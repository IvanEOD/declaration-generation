Index: src/main/kotlin/com/detpros/unrealkotlin/utility/DeclarationGenerator.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.detpros.unrealkotlin.utility\r\n\r\n\r\n/**\r\n *  Declarations Generator\r\n *\r\n * @author IvanEOD ( 5/23/2023 at 2:39 PM EST )\r\n */\r\n\r\n\r\nfun kotlinUE5Text() = \"\"\"// Generated by Detonate Productions Declaration Generation, do not edit manually!\r\n@file:Suppress(\r\n    \"INTERFACE_WITH_SUPERCLASS\",\r\n    \"OVERRIDING_FINAL_MEMBER\",\r\n    \"RETURN_TYPE_MISMATCH_ON_OVERRIDE\",\r\n    \"CONFLICTING_OVERLOADS\",\r\n)\r\n\r\npackage ue\r\n\r\nexternal class UClass {}\r\n\r\nexternal interface KotlinUnrealObject {\r\n    @JsName(\"Tick\")\r\n    fun tick(deltaTime: Float)\r\n    @JsName(\"BeginOverlap\")\r\n    fun beginOverlap(other: Actor): String\r\n    @JsName(\"EndOverlap\")\r\n    fun endOverlap(other: Actor)\r\n    @JsName(\"OnDestroyed\")\r\n    fun onDestroyed()\r\n}\r\n\r\nexternal class KotlinActorComponent : ActorComponent {\r\n    @JsName(\"Spawn\")\r\n    fun <T : Actor> spawn(actorClass: UClass, position: Vector, rotation: Rotator): T\r\n}\r\n\r\nopen external class KotlinObject : KotlinUnrealObject {\r\n    val root: KotlinActorComponent\r\n    override fun tick(deltaTime: Float)\r\n    override fun beginOverlap(other: Actor): String = definedExternally\r\n    override fun endOverlap(other: Actor)\r\n    override fun onDestroyed()\r\n}\r\n\r\nfun <T : Actor> KotlinObject.getOwner(): T = root.getOwner().asDynamic() as T\r\n\r\nexternal var global: dynamic\r\nexternal var ComponentRoot: dynamic\r\n\r\nprivate object KotlinUnrealClassCache {\r\n    val cache = mutableMapOf<String, dynamic>()\r\n}\r\n\r\n@JsName(\"unrealProxyClass\")\r\nfun unrealProxyClass(global: dynamic, klass: dynamic, className: String) {\r\n    val GeneratedClassDefinition = if (KotlinUnrealClassCache.cache.containsKey(className))\r\n        KotlinUnrealClassCache.cache[className]\r\n    else {\r\n        val value = js(\"require('uklass')()(global, klass)\")\r\n        KotlinUnrealClassCache.cache[className] = value\r\n        value\r\n    }\r\n    val instance = js(\"new GeneratedClassDefinition()\")\r\n    instance.Root = ComponentRoot\r\n    instance.Root.SetKotlinObject(instance)\r\n    instance.konstructor()\r\n    if (!global.precious) global.precious = js(\"[]\"); global.precious.push(instance)\r\n}\r\n\r\nfun Vector(\r\n    x: Number = 0,\r\n    y: Number = 0,\r\n    z: Number = 0,\r\n) = ue.Vector().apply {\r\n    this.x = x.toDouble()\r\n    this.y = y.toDouble()\r\n    this.z = z.toDouble()\r\n}\r\n\r\nfun Rotator(\r\n    roll: Number = 0,\r\n    pitch: Number = 0,\r\n    yaw: Number = 0,\r\n): Rotator = ue.Rotator().apply {\r\n    this.roll = roll.toDouble()\r\n    this.pitch = pitch.toDouble()\r\n    this.yaw = yaw.toDouble()\r\n}\r\n\r\nfun LinearColor(r: Number = 0, g: Number = 0, b: Number = 0, a: Number = 1) = ue.LinearColor().apply {\r\n    this.r = r.toDouble()\r\n    this.g = g.toDouble()\r\n    this.b = b.toDouble()\r\n    this.a = a.toDouble()\r\n}\r\n\r\ninline fun Vector.withX(x: Number) = this.apply { this.x = x.toDouble() }\r\ninline fun Vector.withY(y: Number) = this.apply { this.y = y.toDouble() }\r\ninline fun Vector.withZ(z: Number) = this.apply { this.z = z.toDouble() }\r\n\r\ninline fun Rotator.withRoll(roll: Number) = this.apply { this.roll = roll.toDouble() }\r\ninline fun Rotator.withPitch(pitch: Number) = this.apply { this.pitch = pitch.toDouble() }\r\ninline fun Rotator.withYaw(yaw: Number) = this.apply { this.yaw = yaw.toDouble() }\r\n\r\nfun <T> Blueprint.generateClass(world: World, position: Vector, rotation: Rotator): T {\r\n    val receiver = this\r\n    return js(\"new receiver.generatedClass(world, position, rotation)\").unsafeCast<T>()\r\n}\r\n\r\nfun <T> MovieSceneSpawnable.generateClass(world: World, position: Vector, rotation: Rotator): T {\r\n    val receiver = this\r\n    return js(\"new receiver.generatedClass(world, position, rotation)\").unsafeCast<T>()\r\n}\r\n\r\nfun <T> Actor.getComponentByName(componentClass: Any, name: String): T {\r\n    val nameToCheck = name.lowercase()\r\n    val components = getComponentsByClass(componentClass).filter { it.getName().lowercase() == nameToCheck }\r\n    if (components.isEmpty()) return null as T\r\n    return components.first().asDynamic().unsafeCast<T>()\r\n}\r\n\r\nfun <T> Actor.getComponentByClass(componentClass: Any): T = getComponentByClass(componentClass).asDynamic().unsafeCast<T>()\r\nfun <T> Actor.getComponentsByClass(componentClass: Any): Array<T> = getComponentsByClass(componentClass).asDynamic().unsafeCast<Array<T>>()\r\n\r\nfun Key(keyName: String): Key = Key().apply { this.keyName = keyName }\r\n\r\nclass KeyListener(keyName: String, private val playerControllerIndex: Int = 0) {\r\n    private val k = Key(keyName)\r\n    fun down(): Boolean = GWorld.getPlayerController(playerControllerIndex).isInputKeyDown(k)\r\n    fun pressed(): Boolean = GWorld.getPlayerController(playerControllerIndex).wasInputKeyJustPressed(k)\r\n    fun released(): Boolean = GWorld.getPlayerController(playerControllerIndex).wasInputKeyJustReleased(k)\r\n}\r\n\r\n\"\"\".trimIndent()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/detpros/unrealkotlin/utility/DeclarationGenerator.kt b/src/main/kotlin/com/detpros/unrealkotlin/utility/DeclarationGenerator.kt
--- a/src/main/kotlin/com/detpros/unrealkotlin/utility/DeclarationGenerator.kt	(revision 4c219a771720cc6a4ad17d5354ee933d9567d10b)
+++ b/src/main/kotlin/com/detpros/unrealkotlin/utility/DeclarationGenerator.kt	(date 1687394540773)
@@ -18,43 +18,43 @@
 
 package ue
 
-external class UClass {}
+public external class UClass
 
-external interface KotlinUnrealObject {
+public external interface KotlinUnrealObject {
     @JsName("Tick")
-    fun tick(deltaTime: Float)
+    public fun tick(deltaTime: Float)
     @JsName("BeginOverlap")
-    fun beginOverlap(other: Actor): String
+    public fun beginOverlap(other: Actor): String
     @JsName("EndOverlap")
-    fun endOverlap(other: Actor)
+    public fun endOverlap(other: Actor)
     @JsName("OnDestroyed")
-    fun onDestroyed()
+    public fun onDestroyed()
 }
 
-external class KotlinActorComponent : ActorComponent {
+public external class KotlinActorComponent : ActorComponent {
     @JsName("Spawn")
-    fun <T : Actor> spawn(actorClass: UClass, position: Vector, rotation: Rotator): T
+    public fun <T : Actor> spawn(actorClass: UClass, position: Vector, rotation: Rotator): T
 }
 
-open external class KotlinObject : KotlinUnrealObject {
-    val root: KotlinActorComponent
+public open external class KotlinObject : KotlinUnrealObject {
+    public val root: KotlinActorComponent
     override fun tick(deltaTime: Float)
     override fun beginOverlap(other: Actor): String = definedExternally
     override fun endOverlap(other: Actor)
     override fun onDestroyed()
 }
 
-fun <T : Actor> KotlinObject.getOwner(): T = root.getOwner().asDynamic() as T
+public fun <T : Actor> KotlinObject.getOwner(): T = root.getOwner().asDynamic() as T
 
-external var global: dynamic
-external var ComponentRoot: dynamic
+public external var global: dynamic
+public external var ComponentRoot: dynamic
 
 private object KotlinUnrealClassCache {
     val cache = mutableMapOf<String, dynamic>()
 }
 
 @JsName("unrealProxyClass")
-fun unrealProxyClass(global: dynamic, klass: dynamic, className: String) {
+public fun unrealProxyClass(global: dynamic, klass: dynamic, className: String) {
     val GeneratedClassDefinition = if (KotlinUnrealClassCache.cache.containsKey(className))
         KotlinUnrealClassCache.cache[className]
     else {
@@ -69,68 +69,68 @@
     if (!global.precious) global.precious = js("[]"); global.precious.push(instance)
 }
 
-fun Vector(
+public fun Vector(
     x: Number = 0,
     y: Number = 0,
     z: Number = 0,
-) = ue.Vector().apply {
+): Vector = Vector().apply {
     this.x = x.toDouble()
     this.y = y.toDouble()
     this.z = z.toDouble()
 }
 
-fun Rotator(
+public fun Rotator(
     roll: Number = 0,
     pitch: Number = 0,
     yaw: Number = 0,
-): Rotator = ue.Rotator().apply {
+): Rotator = Rotator().apply {
     this.roll = roll.toDouble()
     this.pitch = pitch.toDouble()
     this.yaw = yaw.toDouble()
 }
 
-fun LinearColor(r: Number = 0, g: Number = 0, b: Number = 0, a: Number = 1) = ue.LinearColor().apply {
+public fun LinearColor(r: Number = 0, g: Number = 0, b: Number = 0, a: Number = 1): LinearColor = ue.LinearColor().apply {
     this.r = r.toDouble()
     this.g = g.toDouble()
     this.b = b.toDouble()
     this.a = a.toDouble()
 }
 
-inline fun Vector.withX(x: Number) = this.apply { this.x = x.toDouble() }
-inline fun Vector.withY(y: Number) = this.apply { this.y = y.toDouble() }
-inline fun Vector.withZ(z: Number) = this.apply { this.z = z.toDouble() }
+public inline fun Vector.withX(x: Number): Vector = this.apply { this.x = x.toDouble() }
+public inline fun Vector.withY(y: Number): Vector = this.apply { this.y = y.toDouble() }
+public inline fun Vector.withZ(z: Number): Vector = this.apply { this.z = z.toDouble() }
 
-inline fun Rotator.withRoll(roll: Number) = this.apply { this.roll = roll.toDouble() }
-inline fun Rotator.withPitch(pitch: Number) = this.apply { this.pitch = pitch.toDouble() }
-inline fun Rotator.withYaw(yaw: Number) = this.apply { this.yaw = yaw.toDouble() }
+public inline fun Rotator.withRoll(roll: Number): Rotator = this.apply { this.roll = roll.toDouble() }
+public inline fun Rotator.withPitch(pitch: Number): Rotator = this.apply { this.pitch = pitch.toDouble() }
+public inline fun Rotator.withYaw(yaw: Number): Rotator = this.apply { this.yaw = yaw.toDouble() }
 
-fun <T> Blueprint.generateClass(world: World, position: Vector, rotation: Rotator): T {
+public fun <T> Blueprint.generateClass(world: World, position: Vector, rotation: Rotator): T {
     val receiver = this
     return js("new receiver.generatedClass(world, position, rotation)").unsafeCast<T>()
 }
 
-fun <T> MovieSceneSpawnable.generateClass(world: World, position: Vector, rotation: Rotator): T {
+public fun <T> MovieSceneSpawnable.generateClass(world: World, position: Vector, rotation: Rotator): T {
     val receiver = this
     return js("new receiver.generatedClass(world, position, rotation)").unsafeCast<T>()
 }
 
-fun <T> Actor.getComponentByName(componentClass: Any, name: String): T {
+public fun <T> Actor.getComponentByName(componentClass: Any, name: String): T {
     val nameToCheck = name.lowercase()
     val components = getComponentsByClass(componentClass).filter { it.getName().lowercase() == nameToCheck }
     if (components.isEmpty()) return null as T
     return components.first().asDynamic().unsafeCast<T>()
 }
 
-fun <T> Actor.getComponentByClass(componentClass: Any): T = getComponentByClass(componentClass).asDynamic().unsafeCast<T>()
-fun <T> Actor.getComponentsByClass(componentClass: Any): Array<T> = getComponentsByClass(componentClass).asDynamic().unsafeCast<Array<T>>()
+public fun <T> Actor.getComponentByClass(componentClass: Any): T = getComponentByClass(componentClass).asDynamic().unsafeCast<T>()
+public fun <T> Actor.getComponentsByClass(componentClass: Any): Array<T> = getComponentsByClass(componentClass).asDynamic().unsafeCast<Array<T>>()
 
-fun Key(keyName: String): Key = Key().apply { this.keyName = keyName }
+public fun Key(keyName: String): Key = Key().apply { this.keyName = keyName }
 
-class KeyListener(keyName: String, private val playerControllerIndex: Int = 0) {
+public class KeyListener(keyName: String, private val playerControllerIndex: Int = 0) {
     private val k = Key(keyName)
-    fun down(): Boolean = GWorld.getPlayerController(playerControllerIndex).isInputKeyDown(k)
-    fun pressed(): Boolean = GWorld.getPlayerController(playerControllerIndex).wasInputKeyJustPressed(k)
-    fun released(): Boolean = GWorld.getPlayerController(playerControllerIndex).wasInputKeyJustReleased(k)
+    public fun down(): Boolean = GWorld.getPlayerController(playerControllerIndex).isInputKeyDown(k)
+    public fun pressed(): Boolean = GWorld.getPlayerController(playerControllerIndex).wasInputKeyJustPressed(k)
+    public fun released(): Boolean = GWorld.getPlayerController(playerControllerIndex).wasInputKeyJustReleased(k)
 }
 
 """.trimIndent()
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 4c219a771720cc6a4ad17d5354ee933d9567d10b)
+++ b/.idea/misc.xml	(date 1686757314523)
@@ -4,5 +4,5 @@
   <component name="FrameworkDetectionExcludesConfiguration">
     <file type="web" url="file://$PROJECT_DIR$" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1d5e275b-3bfc-41e3-bfaf-9d9134b6ad06\" name=\"Changes\" comment=\"update gradle\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"declaration-generation\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"declaration-generation\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Run Configurations\" type=\"7b0102dc:RunConfigurationsNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitToolBoxStore\">\r\n    <option name=\"projectConfigVersion\" value=\"5\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2R49QDCigrbOmpvNnmza4Yr46Ym\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"autoscrollFromSource\" value=\"true\" />\r\n    <option name=\"flattenPackages\" value=\"true\" />\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.dsoftware.ghmanager.ui.settings.GhActionsManagerConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Gradle.declaration-generation [pushNextVersion]\">\r\n    <configuration name=\"declaration-generation [build]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"build\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"declaration-generation [init]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"init\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"declaration-generation [pushNextVersion]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"pushNextVersion\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"declaration-generation [wrapper]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"wrapper\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"TestKt\" type=\"JetRunConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.detpros.unrealkotlin.corrections.TestKt\" />\r\n      <module name=\"declaration-generation.main\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.declaration-generation [pushNextVersion]\" />\r\n        <item itemvalue=\"Gradle.declaration-generation [wrapper]\" />\r\n        <item itemvalue=\"Gradle.declaration-generation [init]\" />\r\n        <item itemvalue=\"Kotlin.TestKt\" />\r\n        <item itemvalue=\"Gradle.declaration-generation [build]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1d5e275b-3bfc-41e3-bfaf-9d9134b6ad06\" name=\"Changes\" comment=\"\" />\r\n      <created>1686498474751</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1686498474751</updated>\r\n      <workItem from=\"1686498476629\" duration=\"3811000\" />\r\n      <workItem from=\"1686756664704\" duration=\"39000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"update gradle\">\r\n      <created>1686501928928</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686501928928</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"update gradle\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"update gradle\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4c219a771720cc6a4ad17d5354ee933d9567d10b)
+++ b/.idea/workspace.xml	(date 1687394307937)
@@ -5,6 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="1d5e275b-3bfc-41e3-bfaf-9d9134b6ad06" name="Changes" comment="update gradle">
+      <change beforePath="$PROJECT_DIR$/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/gradle.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -33,6 +35,23 @@
               <path>
                 <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                 <item name="declaration-generation" type="f1a62948:ProjectNode" />
+                <item name="Tasks" type="e4a08cd1:TasksNode" />
+              </path>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="declaration-generation" type="f1a62948:ProjectNode" />
+                <item name="Tasks" type="e4a08cd1:TasksNode" />
+                <item name="build" type="c8890929:TasksNode$1" />
+              </path>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="declaration-generation" type="f1a62948:ProjectNode" />
+                <item name="Tasks" type="e4a08cd1:TasksNode" />
+                <item name="git" type="c8890929:TasksNode$1" />
+              </path>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="declaration-generation" type="f1a62948:ProjectNode" />
                 <item name="Run Configurations" type="7b0102dc:RunConfigurationsNode" />
               </path>
             </expand>
@@ -172,10 +191,10 @@
     <recent_temporary>
       <list>
         <item itemvalue="Gradle.declaration-generation [pushNextVersion]" />
+        <item itemvalue="Gradle.declaration-generation [build]" />
         <item itemvalue="Gradle.declaration-generation [wrapper]" />
         <item itemvalue="Gradle.declaration-generation [init]" />
         <item itemvalue="Kotlin.TestKt" />
-        <item itemvalue="Gradle.declaration-generation [build]" />
       </list>
     </recent_temporary>
   </component>
@@ -188,7 +207,10 @@
       <option name="presentableId" value="Default" />
       <updated>1686498474751</updated>
       <workItem from="1686498476629" duration="3811000" />
-      <workItem from="1686756664704" duration="39000" />
+      <workItem from="1686756664704" duration="673000" />
+      <workItem from="1686758036797" duration="23000" />
+      <workItem from="1686759157232" duration="88000" />
+      <workItem from="1687394277339" duration="31000" />
     </task>
     <task id="LOCAL-00001" summary="update gradle">
       <created>1686501928928</created>
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"#JAVA_HOME\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 4c219a771720cc6a4ad17d5354ee933d9567d10b)
+++ b/.idea/gradle.xml	(date 1686758057685)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
