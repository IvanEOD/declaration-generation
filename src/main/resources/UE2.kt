// Generated by Detonate Productions Declaration Generation, do not edit manually!
@file:Suppress(
  "INTERFACE_WITH_SUPERCLASS",
  "OVERRIDING_FINAL_MEMBER",
  "RETURN_TYPE_MISMATCH_ON_OVERRIDE",
  "CONFLICTING_OVERLOADS",
)

package ue


import org.w3c.dom.AddEventListenerOptions
import org.w3c.dom.EventListenerOptions
import org.w3c.dom.events.EventListener


@JsName("AnimSubsystem_PropertyAccess")
public open external class AnimSubsystemPropertyAccess : AnimSubsystem {
  @JsName("Library")
  public open var library: PropertyAccessLibrary

  public override fun clone(): AnimSubsystemPropertyAccess

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSubsystemPropertyAccess

    @JsName("C")
    public fun copy(other: Any): AnimSubsystemPropertyAccess
  }
}

@JsName("AnimBlueprintExtension_PropertyAccess")
public open external class AnimBlueprintExtensionPropertyAccess(
  outer: UObject,
) : AnimBlueprintExtension {
  @JsName("Subsystem")
  public open var subsystem: AnimSubsystemPropertyAccess

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionPropertyAccess

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionPropertyAccess

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionPropertyAccess

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionPropertyAccess

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionPropertyAccess

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionPropertyAccess
  }
}

@JsName("AnimBlueprintExtension_StateMachine")
public open external class AnimBlueprintExtensionStateMachine(
  outer: UObject,
) : AnimBlueprintExtension {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionStateMachine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionStateMachine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionStateMachine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionStateMachine

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionStateMachine

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionStateMachine
  }
}

@JsName("AnimSubsystem_Tag")
public open external class AnimSubsystemTag : AnimSubsystem {
  @JsName("NodeIndices")
  public open var nodeIndices: Any

  public override fun clone(): AnimSubsystemTag

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSubsystemTag

    @JsName("C")
    public fun copy(other: Any): AnimSubsystemTag
  }
}

@JsName("AnimBlueprintExtension_Tag")
public open external class AnimBlueprintExtensionTag(
  outer: UObject,
) : AnimBlueprintExtension {
  @JsName("Subsystem")
  public open var subsystem: AnimSubsystemTag

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionTag

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionTag

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionTag

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionTag

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionTag

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionTag
  }
}

public open external class AnimBlueprintPostCompileValidation(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintPostCompileValidation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintPostCompileValidation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintPostCompileValidation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintPostCompileValidation

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintPostCompileValidation

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintPostCompileValidation
  }
}

@JsName("EAnimGraphAttributesDisplayMode")
public external object AnimGraphAttributesDisplayMode {
  public var HideOnPins: String

  public var ShowOnPins: String

  public var Automatic: String

  @JsName("EAnimGraphAttributesDisplayMode_MAX")
  public var Max: String
}

@JsName("EAnimGraphAttributeBlend")
public external object AnimGraphAttributeBlend {
  public var Blendable: String

  public var NonBlendable: String

  @JsName("EAnimGraphAttributeBlend_MAX")
  public var Max: String
}

public open external class AnimGraphAttributeDesc {
  @JsName("Name")
  public open var name: String

  @JsName("Icon")
  public open var icon: SlateBrush

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("ToolTipText")
  public open var toolTipText: String

  @JsName("Color")
  public open var color: SlateColor

  @JsName("DisplayMode")
  public open var displayMode: String

  @JsName("Blend")
  public open var blend: String

  @JsName("SortOrder")
  public open var sortOrder: Number

  public open fun clone(): AnimGraphAttributeDesc

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimGraphAttributeDesc

    @JsName("C")
    public fun copy(other: Any): AnimGraphAttributeDesc
  }
}

public open external class AnimGraphAttributes(
  outer: UObject,
) : UObject {
  @JsName("Attributes")
  public open var attributes: Array<AnimGraphAttributeDesc>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphAttributes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphAttributes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphAttributes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphAttributes

    @JsName("C")
    public fun copy(other: UObject): AnimGraphAttributes

    @JsName("C")
    public fun copy(other: Any): AnimGraphAttributes
  }
}

public open external class AnimGraphNodeCustomizationInterface(
  outer: UObject,
) : Interface {
  @JsName("GetTitleColor")
  public open fun getTitleColor(): LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCustomizationInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCustomizationInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCustomizationInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCustomizationInterface

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCustomizationInterface

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCustomizationInterface
  }
}

@JsName("EAnimSyncMethod")
public external object AnimSyncMethod {
  public var DoNotSync: String

  public var SyncGroup: String

  public var Graph: String

  @JsName("EAnimSyncMethod_MAX")
  public var Max: String
}

@JsName("EAnimGroupRole")
public external object AnimGroupRole {
  public var CanBeLeader: String

  public var AlwaysFollower: String

  public var AlwaysLeader: String

  public var TransitionLeader: String

  public var TransitionFollower: String

  @JsName("EAnimGroupRole_MAX")
  public var Max: String
}

public open external class AnimationGroupReference {
  @JsName("Method")
  public open var method: String

  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupRole")
  public open var groupRole: String

  public open fun clone(): AnimationGroupReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationGroupReference

    @JsName("C")
    public fun copy(other: Any): AnimationGroupReference
  }
}

@JsName("AnimGraphNode_AssetPlayerBase")
public open external class AnimGraphNodeAssetPlayerBase(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("SyncGroup")
  public open var syncGroup: AnimationGroupReference

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeAssetPlayerBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeAssetPlayerBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeAssetPlayerBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeAssetPlayerBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeAssetPlayerBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeAssetPlayerBase
  }
}

@JsName("AnimGraphNode_BlendSpaceBase")
public open external class AnimGraphNodeBlendSpaceBase(
  outer: UObject,
) : AnimGraphNodeAssetPlayerBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendSpaceBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendSpaceBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendSpaceBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendSpaceBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendSpaceBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendSpaceBase
  }
}

@JsName("EAnimSyncGroupScope")
public external object AnimSyncGroupScope {
  public var Local: String

  public var Component: String

  @JsName("EAnimSyncGroupScope_MAX")
  public var Max: String
}

@JsName("AnimNode_AssetPlayerBase")
public open external class AnimNodeAssetPlayerBase : AnimNodeBase {
  @JsName("GroupIndex")
  public open var groupIndex: Number

  @JsName("GroupScope")
  public open var groupScope: String

  @JsName("BlendWeight")
  public open var blendWeight: Number

  @JsName("InternalTimeAccumulator")
  public open var internalTimeAccumulator: Number

  public override fun clone(): AnimNodeAssetPlayerBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeAssetPlayerBase

    @JsName("C")
    public fun copy(other: Any): AnimNodeAssetPlayerBase
  }
}

@JsName("AnimNode_BlendSpacePlayer")
public open external class AnimNodeBlendSpacePlayer : AnimNodeAssetPlayerBase {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupRole")
  public open var groupRole: String

  @JsName("Method")
  public open var method: String

  @JsName("bIgnoreForRelevancyTest")
  public open var ignoreForRelevancyTest: Boolean

  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("bLoop")
  public open var loop: Boolean

  @JsName("bResetPlayTimeWhenBlendSpaceChanges")
  public open var resetPlayTimeWhenBlendSpaceChanges: Boolean

  @JsName("StartPosition")
  public open var startPosition: Number

  @JsName("BlendSpace")
  public open var blendSpace: BlendSpace

  @JsName("PreviousBlendSpace")
  public open var previousBlendSpace: BlendSpace

  public override fun clone(): AnimNodeBlendSpacePlayer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendSpacePlayer

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendSpacePlayer
  }
}

@JsName("AnimNode_AimOffsetLookAt")
public open external class AnimNodeAimOffsetLookAt : AnimNodeBlendSpacePlayer {
  @JsName("BasePose")
  public open var basePose: PoseLink

  @JsName("LODThreshold")
  public open var lodThreshold: Number

  @JsName("SourceSocketName")
  public open var sourceSocketName: String

  @JsName("PivotSocketName")
  public open var pivotSocketName: String

  @JsName("LookAtLocation")
  public open var lookAtLocation: Vector

  @JsName("SocketAxis")
  public open var socketAxis: Vector

  @JsName("Alpha")
  public open var alpha: Number

  public override fun clone(): AnimNodeAimOffsetLookAt

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeAimOffsetLookAt

    @JsName("C")
    public fun copy(other: Any): AnimNodeAimOffsetLookAt
  }
}

@JsName("AnimGraphNode_AimOffsetLookAt")
public open external class AnimGraphNodeAimOffsetLookAt(
  outer: UObject,
) : AnimGraphNodeBlendSpaceBase {
  @JsName("UNode")
  public open var uNode: AnimNodeAimOffsetLookAt

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeAimOffsetLookAt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeAimOffsetLookAt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeAimOffsetLookAt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeAimOffsetLookAt

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeAimOffsetLookAt

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeAimOffsetLookAt
  }
}

@JsName("AnimGraphNode_SkeletalControlBase")
public open external class AnimGraphNodeSkeletalControlBase(
  outer: UObject,
) : AnimGraphNodeBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeSkeletalControlBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeSkeletalControlBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeSkeletalControlBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeSkeletalControlBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeSkeletalControlBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeSkeletalControlBase
  }
}

public open external class ComponentSpacePoseLink : PoseLinkBase {
  public override fun clone(): ComponentSpacePoseLink

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ComponentSpacePoseLink

    @JsName("C")
    public fun copy(other: Any): ComponentSpacePoseLink
  }
}

@JsName("EAnimAlphaInputType")
public external object AnimAlphaInputType {
  public var Float: String

  public var Bool: String

  public var Curve: String

  @JsName("EAnimAlphaInputType_MAX")
  public var Max: String
}

public open external class InputScaleBias {
  @JsName("Scale")
  public open var scale: Number

  @JsName("Bias")
  public open var bias: Number

  public open fun clone(): InputScaleBias

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputScaleBias

    @JsName("C")
    public fun copy(other: Any): InputScaleBias
  }
}

public open external class InputAlphaBoolBlend {
  @JsName("BlendInTime")
  public open var blendInTime: Number

  @JsName("BlendOutTime")
  public open var blendOutTime: Number

  @JsName("BlendOption")
  public open var blendOption: String

  @JsName("bInitialized")
  public open var initialized: Boolean

  @JsName("CustomCurve")
  public open var customCurve: CurveFloat

  @JsName("AlphaBlend")
  public open var alphaBlend: AlphaBlend

  public open fun clone(): InputAlphaBoolBlend

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputAlphaBoolBlend

    @JsName("C")
    public fun copy(other: Any): InputAlphaBoolBlend
  }
}

public open external class InputRange {
  @JsName("Min")
  public open var min: Number

  @JsName("Max")
  public open var max: Number

  public open fun clone(): InputRange

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputRange

    @JsName("C")
    public fun copy(other: Any): InputRange
  }
}

public open external class InputScaleBiasClamp {
  @JsName("bMapRange")
  public open var mapRange: Boolean

  @JsName("bClampResult")
  public open var clampResult: Boolean

  @JsName("bInterpResult")
  public open var interpResult: Boolean

  @JsName("InRange")
  public open var inRange: InputRange

  @JsName("OutRange")
  public open var outRange: InputRange

  @JsName("Scale")
  public open var scale: Number

  @JsName("Bias")
  public open var bias: Number

  @JsName("ClampMin")
  public open var clampMin: Number

  @JsName("ClampMax")
  public open var clampMax: Number

  @JsName("InterpSpeedIncreasing")
  public open var interpSpeedIncreasing: Number

  @JsName("InterpSpeedDecreasing")
  public open var interpSpeedDecreasing: Number

  public open fun clone(): InputScaleBiasClamp

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputScaleBiasClamp

    @JsName("C")
    public fun copy(other: Any): InputScaleBiasClamp
  }
}

@JsName("AnimNode_SkeletalControlBase")
public open external class AnimNodeSkeletalControlBase : AnimNodeBase {
  @JsName("ComponentPose")
  public open var componentPose: ComponentSpacePoseLink

  @JsName("LODThreshold")
  public open var lodThreshold: Number

  @JsName("ActualAlpha")
  public open var actualAlpha: Number

  @JsName("AlphaInputType")
  public open var alphaInputType: String

  @JsName("bAlphaBoolEnabled")
  public open var alphaBoolEnabled: Boolean

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("AlphaBoolBlend")
  public open var alphaBoolBlend: InputAlphaBoolBlend

  @JsName("AlphaCurveName")
  public open var alphaCurveName: String

  @JsName("AlphaScaleBiasClamp")
  public open var alphaScaleBiasClamp: InputScaleBiasClamp

  public override fun clone(): AnimNodeSkeletalControlBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSkeletalControlBase

    @JsName("C")
    public fun copy(other: Any): AnimNodeSkeletalControlBase
  }
}

public external object AnimPhysLinearConstraintType {
  @JsName("Free")
  public var free: String

  @JsName("Limited")
  public var limited: String

  @JsName("AnimPhysLinearConstraintType_MAX")
  public var animPhysLinearConstraintTypeMax: String
}

public external object AnimPhysAngularConstraintType {
  @JsName("Angular")
  public var angular: String

  @JsName("Cone")
  public var cone: String

  @JsName("AnimPhysAngularConstraintType_MAX")
  public var animPhysAngularConstraintTypeMax: String
}

public external object AnimPhysTwistAxis {
  @JsName("AxisX")
  public var axisX: String

  @JsName("AxisY")
  public var axisY: String

  @JsName("AxisZ")
  public var axisZ: String

  @JsName("AnimPhysTwistAxis_MAX")
  public var animPhysTwistAxisMax: String
}

public open external class AnimPhysConstraintSetup {
  @JsName("LinearXLimitType")
  public open var linearXLimitType: String

  @JsName("LinearYLimitType")
  public open var linearYLimitType: String

  @JsName("LinearZLimitType")
  public open var linearZLimitType: String

  @JsName("LinearAxesMin")
  public open var linearAxesMin: Vector

  @JsName("LinearAxesMax")
  public open var linearAxesMax: Vector

  @JsName("AngularConstraintType")
  public open var angularConstraintType: String

  @JsName("TwistAxis")
  public open var twistAxis: String

  @JsName("AngularTargetAxis")
  public open var angularTargetAxis: String

  @JsName("ConeAngle")
  public open var coneAngle: Number

  @JsName("AngularXAngle")
  public open var angularXAngle: Number

  @JsName("AngularYAngle")
  public open var angularYAngle: Number

  @JsName("AngularZAngle")
  public open var angularZAngle: Number

  @JsName("AngularLimitsMin")
  public open var angularLimitsMin: Vector

  @JsName("AngularLimitsMax")
  public open var angularLimitsMax: Vector

  @JsName("AngularTarget")
  public open var angularTarget: Vector

  public open fun clone(): AnimPhysConstraintSetup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimPhysConstraintSetup

    @JsName("C")
    public fun copy(other: Any): AnimPhysConstraintSetup
  }
}

@JsName("ESphericalLimitType")
public external object SphericalLimitType {
  public var Inner: String

  public var Outer: String

  @JsName("ESphericalLimitType_MAX")
  public var Max: String
}

public open external class AnimPhysSphericalLimit {
  @JsName("DrivingBone")
  public open var drivingBone: BoneReference

  @JsName("SphereLocalOffset")
  public open var sphereLocalOffset: Vector

  @JsName("LimitRadius")
  public open var limitRadius: Number

  @JsName("LimitType")
  public open var limitType: String

  public open fun clone(): AnimPhysSphericalLimit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimPhysSphericalLimit

    @JsName("C")
    public fun copy(other: Any): AnimPhysSphericalLimit
  }
}

public open external class AnimPhysPlanarLimit {
  @JsName("DrivingBone")
  public open var drivingBone: BoneReference

  @JsName("PlaneTransform")
  public open var planeTransform: Transform

  public open fun clone(): AnimPhysPlanarLimit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimPhysPlanarLimit

    @JsName("C")
    public fun copy(other: Any): AnimPhysPlanarLimit
  }
}

public external object AnimPhysCollisionType {
  @JsName("CoM")
  public var coM: String

  @JsName("CustomSphere")
  public var customSphere: String

  @JsName("InnerSphere")
  public var innerSphere: String

  @JsName("OuterSphere")
  public var outerSphere: String

  @JsName("AnimPhysCollisionType_MAX")
  public var animPhysCollisionTypeMax: String
}

public external object AnimPhysSimSpaceType {
  @JsName("Component")
  public var component: String

  @JsName("Actor")
  public var actor: String

  @JsName("World")
  public var world: String

  @JsName("RootRelative")
  public var rootRelative: String

  @JsName("BoneRelative")
  public var boneRelative: String

  @JsName("AnimPhysSimSpaceType_MAX")
  public var animPhysSimSpaceTypeMax: String
}

@JsName("ERotationComponent")
public external object RotationComponent {
  public var EulerX: String

  public var EulerY: String

  public var EulerZ: String

  public var QuaternionAngle: String

  public var SwingAngle: String

  public var TwistAngle: String

  @JsName("ERotationComponent_MAX")
  public var Max: String
}

@JsName("EEasingFuncType")
public external object EasingFuncType {
  public var Linear: String

  public var Sinusoidal: String

  public var Cubic: String

  public var QuadraticInOut: String

  public var CubicInOut: String

  public var HermiteCubic: String

  public var QuarticInOut: String

  public var QuinticInOut: String

  public var CircularIn: String

  public var CircularOut: String

  public var CircularInOut: String

  public var ExpIn: String

  public var ExpOut: String

  public var ExpInOut: String

  public var CustomCurve: String

  @JsName("EEasingFuncType_MAX")
  public var Max: String
}

public open external class RotationRetargetingInfo {
  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("Source")
  public open var source: Transform

  @JsName("Target")
  public open var target: Transform

  @JsName("RotationComponent")
  public open var rotationComponent: String

  @JsName("TwistAxis")
  public open var twistAxis: Vector

  @JsName("bUseAbsoluteAngle")
  public open var useAbsoluteAngle: Boolean

  @JsName("SourceMinimum")
  public open var sourceMinimum: Number

  @JsName("SourceMaximum")
  public open var sourceMaximum: Number

  @JsName("TargetMinimum")
  public open var targetMinimum: Number

  @JsName("TargetMaximum")
  public open var targetMaximum: Number

  @JsName("EasingType")
  public open var easingType: String

  @JsName("CustomCurve")
  public open var customCurve: RuntimeFloatCurve

  @JsName("bFlipEasing")
  public open var flipEasing: Boolean

  @JsName("EasingWeight")
  public open var easingWeight: Number

  @JsName("bClamp")
  public open var clamp: Boolean

  public open fun clone(): RotationRetargetingInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RotationRetargetingInfo

    @JsName("C")
    public fun copy(other: Any): RotationRetargetingInfo
  }
}

@JsName("AnimNode_AnimDynamics")
public open external class AnimNodeAnimDynamics : AnimNodeSkeletalControlBase {
  @JsName("LinearDampingOverride")
  public open var linearDampingOverride: Number

  @JsName("AngularDampingOverride")
  public open var angularDampingOverride: Number

  @JsName("RelativeSpaceBone")
  public open var relativeSpaceBone: BoneReference

  @JsName("BoundBone")
  public open var boundBone: BoneReference

  @JsName("ChainEnd")
  public open var chainEnd: BoneReference

  @JsName("BoxExtents")
  public open var boxExtents: Vector

  @JsName("LocalJointOffset")
  public open var localJointOffset: Vector

  @JsName("GravityScale")
  public open var gravityScale: Number

  @JsName("GravityOverride")
  public open var gravityOverride: Vector

  @JsName("LinearSpringConstant")
  public open var linearSpringConstant: Number

  @JsName("AngularSpringConstant")
  public open var angularSpringConstant: Number

  @JsName("WindScale")
  public open var windScale: Number

  @JsName("ComponentLinearAccScale")
  public open var componentLinearAccScale: Vector

  @JsName("ComponentLinearVelScale")
  public open var componentLinearVelScale: Vector

  @JsName("ComponentAppliedLinearAccClamp")
  public open var componentAppliedLinearAccClamp: Vector

  @JsName("AngularBiasOverride")
  public open var angularBiasOverride: Number

  @JsName("NumSolverIterationsPreUpdate")
  public open var numSolverIterationsPreUpdate: Number

  @JsName("NumSolverIterationsPostUpdate")
  public open var numSolverIterationsPostUpdate: Number

  @JsName("ConstraintSetup")
  public open var constraintSetup: AnimPhysConstraintSetup

  @JsName("SphericalLimits")
  public open var sphericalLimits: Array<AnimPhysSphericalLimit>

  @JsName("SphereCollisionRadius")
  public open var sphereCollisionRadius: Number

  @JsName("ExternalForce")
  public open var externalForce: Vector

  @JsName("PlanarLimits")
  public open var planarLimits: Array<AnimPhysPlanarLimit>

  @JsName("CollisionType")
  public open var collisionType: String

  @JsName("SimulationSpace")
  public open var simulationSpace: String

  @JsName("bUseSphericalLimits")
  public open var useSphericalLimits: Boolean

  @JsName("bUsePlanarLimit")
  public open var usePlanarLimit: Boolean

  @JsName("bDoUpdate")
  public open var doUpdate: Boolean

  @JsName("bDoEval")
  public open var doEval: Boolean

  @JsName("bOverrideLinearDamping")
  public open var overrideLinearDamping: Boolean

  @JsName("bOverrideAngularBias")
  public open var overrideAngularBias: Boolean

  @JsName("bOverrideAngularDamping")
  public open var overrideAngularDamping: Boolean

  @JsName("bEnableWind")
  public open var enableWind: Boolean

  @JsName("bUseGravityOverride")
  public open var useGravityOverride: Boolean

  @JsName("bGravityOverrideInSimSpace")
  public open var gravityOverrideInSimSpace: Boolean

  @JsName("bLinearSpring")
  public open var linearSpring: Boolean

  @JsName("bAngularSpring")
  public open var angularSpring: Boolean

  @JsName("bChain")
  public open var chain: Boolean

  @JsName("RetargetingSettings")
  public open var retargetingSettings: RotationRetargetingInfo

  public override fun clone(): AnimNodeAnimDynamics

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeAnimDynamics

    @JsName("C")
    public fun copy(other: Any): AnimNodeAnimDynamics
  }
}

@JsName("AnimGraphNode_AnimDynamics")
public open external class AnimGraphNodeAnimDynamics(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeAnimDynamics

  @JsName("bPreviewLive")
  public open var previewLive: Boolean

  @JsName("bShowLinearLimits")
  public open var showLinearLimits: Boolean

  @JsName("bShowAngularLimits")
  public open var showAngularLimits: Boolean

  @JsName("bShowPlanarLimit")
  public open var showPlanarLimit: Boolean

  @JsName("bShowSphericalLimit")
  public open var showSphericalLimit: Boolean

  @JsName("bShowCollisionSpheres")
  public open var showCollisionSpheres: Boolean

  @JsName("LastPreviewComponent")
  public open var lastPreviewComponent: SkeletalMeshComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeAnimDynamics

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeAnimDynamics

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeAnimDynamics

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeAnimDynamics

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeAnimDynamics

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeAnimDynamics
  }
}

@JsName("AnimNode_ApplyAdditive")
public open external class AnimNodeApplyAdditive : AnimNodeBase {
  @JsName("Base")
  public open var base: PoseLink

  @JsName("Additive")
  public open var additive: PoseLink

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("LODThreshold")
  public open var lodThreshold: Number

  @JsName("AlphaBoolBlend")
  public open var alphaBoolBlend: InputAlphaBoolBlend

  @JsName("AlphaCurveName")
  public open var alphaCurveName: String

  @JsName("AlphaScaleBiasClamp")
  public open var alphaScaleBiasClamp: InputScaleBiasClamp

  @JsName("AlphaInputType")
  public open var alphaInputType: String

  @JsName("bAlphaBoolEnabled")
  public open var alphaBoolEnabled: Boolean

  public override fun clone(): AnimNodeApplyAdditive

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeApplyAdditive

    @JsName("C")
    public fun copy(other: Any): AnimNodeApplyAdditive
  }
}

@JsName("AnimGraphNode_ApplyAdditive")
public open external class AnimGraphNodeApplyAdditive(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeApplyAdditive

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeApplyAdditive

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeApplyAdditive

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeApplyAdditive

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeApplyAdditive

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeApplyAdditive

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeApplyAdditive
  }
}

public open external class AngularRangeLimit {
  @JsName("LimitMin")
  public open var limitMin: Vector

  @JsName("LimitMax")
  public open var limitMax: Vector

  public open var bone: BoneReference

  public open fun clone(): AngularRangeLimit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AngularRangeLimit

    @JsName("C")
    public fun copy(other: Any): AngularRangeLimit
  }
}

@JsName("AnimNode_ApplyLimits")
public open external class AnimNodeApplyLimits : AnimNodeSkeletalControlBase {
  @JsName("AngularRangeLimits")
  public open var angularRangeLimits: Array<AngularRangeLimit>

  @JsName("AngularOffsets")
  public open var angularOffsets: Array<Vector>

  public override fun clone(): AnimNodeApplyLimits

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeApplyLimits

    @JsName("C")
    public fun copy(other: Any): AnimNodeApplyLimits
  }
}

@JsName("AnimGraphNode_ApplyLimits")
public open external class AnimGraphNodeApplyLimits(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeApplyLimits

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeApplyLimits

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeApplyLimits

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeApplyLimits

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeApplyLimits

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeApplyLimits

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeApplyLimits
  }
}

@JsName("AnimNode_ApplyMeshSpaceAdditive")
public open external class AnimNodeApplyMeshSpaceAdditive : AnimNodeBase {
  @JsName("Base")
  public open var base: PoseLink

  @JsName("Additive")
  public open var additive: PoseLink

  @JsName("AlphaInputType")
  public open var alphaInputType: String

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("bAlphaBoolEnabled")
  public open var alphaBoolEnabled: Boolean

  @JsName("AlphaBoolBlend")
  public open var alphaBoolBlend: InputAlphaBoolBlend

  @JsName("AlphaCurveName")
  public open var alphaCurveName: String

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("AlphaScaleBiasClamp")
  public open var alphaScaleBiasClamp: InputScaleBiasClamp

  @JsName("LODThreshold")
  public open var lodThreshold: Number

  public override fun clone(): AnimNodeApplyMeshSpaceAdditive

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeApplyMeshSpaceAdditive

    @JsName("C")
    public fun copy(other: Any): AnimNodeApplyMeshSpaceAdditive
  }
}

@JsName("AnimGraphNode_ApplyMeshSpaceAdditive")
public open external class AnimGraphNodeApplyMeshSpaceAdditive(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeApplyMeshSpaceAdditive

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeApplyMeshSpaceAdditive

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeApplyMeshSpaceAdditive

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeApplyMeshSpaceAdditive

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeApplyMeshSpaceAdditive

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeApplyMeshSpaceAdditive

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeApplyMeshSpaceAdditive
  }
}

public open external class BlendBoneByChannelEntry {
  @JsName("SourceBone")
  public open var sourceBone: BoneReference

  @JsName("TargetBone")
  public open var targetBone: BoneReference

  @JsName("bBlendTranslation")
  public open var blendTranslation: Boolean

  @JsName("bBlendRotation")
  public open var blendRotation: Boolean

  @JsName("bBlendScale")
  public open var blendScale: Boolean

  public open fun clone(): BlendBoneByChannelEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlendBoneByChannelEntry

    @JsName("C")
    public fun copy(other: Any): BlendBoneByChannelEntry
  }
}

@JsName("EBoneControlSpace")
public external object BoneControlSpace {
  @JsName("BCS_WorldSpace")
  public var WorldSpace: String

  @JsName("BCS_ComponentSpace")
  public var ComponentSpace: String

  @JsName("BCS_ParentBoneSpace")
  public var ParentBoneSpace: String

  @JsName("BCS_BoneSpace")
  public var BoneSpace: String

  @JsName("BCS_MAX")
  public var Max: String
}

@JsName("AnimNode_BlendBoneByChannel")
public open external class AnimNodeBlendBoneByChannel : AnimNodeBase {
  @JsName("A")
  public open var a: PoseLink

  @JsName("B")
  public open var b: PoseLink

  @JsName("BoneDefinitions")
  public open var boneDefinitions: Array<BlendBoneByChannelEntry>

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("TransformsSpace")
  public open var transformsSpace: String

  public override fun clone(): AnimNodeBlendBoneByChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendBoneByChannel

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendBoneByChannel
  }
}

@JsName("AnimGraphNode_BlendBoneByChannel")
public open external class AnimGraphNodeBlendBoneByChannel(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("BlendNode")
  public open var blendNode: AnimNodeBlendBoneByChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendBoneByChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendBoneByChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendBoneByChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendBoneByChannel

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendBoneByChannel

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendBoneByChannel
  }
}

@JsName("AnimGraphNode_BlendListBase")
public open external class AnimGraphNodeBlendListBase(
  outer: UObject,
) : AnimGraphNodeBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendListBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendListBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendListBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendListBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendListBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendListBase
  }
}

@JsName("EBlendListTransitionType")
public external object BlendListTransitionType {
  public var StandardBlend: String

  public var Inertialization: String

  @JsName("EBlendListTransitionType_MAX")
  public var Max: String
}

@JsName("AnimNode_BlendListBase")
public open external class AnimNodeBlendListBase : AnimNodeBase {
  @JsName("BlendPose")
  public open var blendPose: Array<PoseLink>

  @JsName("BlendTime")
  public open var blendTime: Array<Number>

  @JsName("TransitionType")
  public open var transitionType: String

  @JsName("BlendType")
  public open var blendType: String

  @JsName("bResetChildOnActivation")
  public open var resetChildOnActivation: Boolean

  @JsName("CustomBlendCurve")
  public open var customBlendCurve: CurveFloat

  @JsName("BlendProfile")
  public open var blendProfile: BlendProfile

  public override fun clone(): AnimNodeBlendListBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendListBase

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendListBase
  }
}

@JsName("AnimNode_BlendListByBool")
public open external class AnimNodeBlendListByBool : AnimNodeBlendListBase {
  @JsName("bActiveValue")
  public open var activeValue: Boolean

  public override fun clone(): AnimNodeBlendListByBool

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendListByBool

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendListByBool
  }
}

@JsName("AnimGraphNode_BlendListByBool")
public open external class AnimGraphNodeBlendListByBool(
  outer: UObject,
) : AnimGraphNodeBlendListBase {
  @JsName("UNode")
  public open var uNode: AnimNodeBlendListByBool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendListByBool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendListByBool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendListByBool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendListByBool

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendListByBool

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendListByBool
  }
}

@JsName("AnimNode_BlendListByEnum")
public open external class AnimNodeBlendListByEnum : AnimNodeBlendListBase {
  @JsName("EnumToPoseIndex")
  public open var enumToPoseIndex: Array<Number>

  @JsName("ActiveEnumValue")
  public open var activeEnumValue: Number

  public override fun clone(): AnimNodeBlendListByEnum

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendListByEnum

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendListByEnum
  }
}

@JsName("AnimGraphNode_BlendListByEnum")
public open external class AnimGraphNodeBlendListByEnum(
  outer: UObject,
) : AnimGraphNodeBlendListBase {
  @JsName("UNode")
  public open var uNode: AnimNodeBlendListByEnum

  @JsName("BoundEnum")
  public open var boundEnum: Enum

  @JsName("VisibleEnumEntries")
  public open var visibleEnumEntries: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendListByEnum

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendListByEnum

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendListByEnum

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendListByEnum

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendListByEnum

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendListByEnum
  }
}

@JsName("AnimNode_BlendListByInt")
public open external class AnimNodeBlendListByInt : AnimNodeBlendListBase {
  @JsName("ActiveChildIndex")
  public open var activeChildIndex: Number

  public override fun clone(): AnimNodeBlendListByInt

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendListByInt

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendListByInt
  }
}

@JsName("AnimGraphNode_BlendListByInt")
public open external class AnimGraphNodeBlendListByInt(
  outer: UObject,
) : AnimGraphNodeBlendListBase {
  @JsName("UNode")
  public open var uNode: AnimNodeBlendListByInt

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendListByInt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendListByInt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendListByInt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendListByInt

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendListByInt

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendListByInt
  }
}

@JsName("AnimNode_BlendSpaceEvaluator")
public open external class AnimNodeBlendSpaceEvaluator : AnimNodeBlendSpacePlayer {
  @JsName("NormalizedTime")
  public open var normalizedTime: Number

  @JsName("bTeleportToNormalizedTime")
  public open var teleportToNormalizedTime: Boolean

  public override fun clone(): AnimNodeBlendSpaceEvaluator

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendSpaceEvaluator

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendSpaceEvaluator
  }
}

@JsName("AnimGraphNode_BlendSpaceEvaluator")
public open external class AnimGraphNodeBlendSpaceEvaluator(
  outer: UObject,
) : AnimGraphNodeBlendSpaceBase {
  @JsName("UNode")
  public open var uNode: AnimNodeBlendSpaceEvaluator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendSpaceEvaluator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendSpaceEvaluator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendSpaceEvaluator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendSpaceEvaluator

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendSpaceEvaluator

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendSpaceEvaluator
  }
}

public open external class BlendSpaceGraph(
  outer: UObject,
) : EdGraph {
  @JsName("BlendSpace")
  public open var blendSpace: BlendSpace

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlendSpaceGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlendSpaceGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlendSpaceGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlendSpaceGraph

    @JsName("C")
    public fun copy(other: UObject): BlendSpaceGraph

    @JsName("C")
    public fun copy(other: Any): BlendSpaceGraph
  }
}

@JsName("AnimGraphNode_BlendSpaceGraphBase")
public open external class AnimGraphNodeBlendSpaceGraphBase(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("BlendSpace")
  public open var blendSpace: BlendSpace

  @JsName("BlendSpaceClass")
  public open var blendSpaceClass: UnrealEngineClass

  @JsName("BlendSpaceGraph")
  public open var blendSpaceGraph: BlendSpaceGraph

  @JsName("Graphs")
  public open var graphs: Array<EdGraph>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendSpaceGraphBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendSpaceGraphBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendSpaceGraphBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendSpaceGraphBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendSpaceGraphBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendSpaceGraphBase
  }
}

@JsName("AnimNode_BlendSpaceGraphBase")
public open external class AnimNodeBlendSpaceGraphBase : AnimNodeBase {
  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupRole")
  public open var groupRole: String

  @JsName("BlendSpace")
  public open var blendSpace: BlendSpace

  @JsName("SamplePoseLinks")
  public open var samplePoseLinks: Array<PoseLink>

  public override fun clone(): AnimNodeBlendSpaceGraphBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendSpaceGraphBase

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendSpaceGraphBase
  }
}

@JsName("AnimNode_BlendSpaceGraph")
public open external class AnimNodeBlendSpaceGraph : AnimNodeBlendSpaceGraphBase {
  public override fun clone(): AnimNodeBlendSpaceGraph

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendSpaceGraph

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendSpaceGraph
  }
}

@JsName("AnimGraphNode_BlendSpaceGraph")
public open external class AnimGraphNodeBlendSpaceGraph(
  outer: UObject,
) : AnimGraphNodeBlendSpaceGraphBase {
  @JsName("UNode")
  public open var uNode: AnimNodeBlendSpaceGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendSpaceGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendSpaceGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendSpaceGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendSpaceGraph

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendSpaceGraph

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendSpaceGraph
  }
}

@JsName("AnimGraphNode_BlendSpacePlayer")
public open external class AnimGraphNodeBlendSpacePlayer(
  outer: UObject,
) : AnimGraphNodeBlendSpaceBase {
  @JsName("UNode")
  public open var uNode: AnimNodeBlendSpacePlayer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendSpacePlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendSpacePlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendSpacePlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendSpacePlayer

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendSpacePlayer

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendSpacePlayer
  }
}

@JsName("EComponentType")
public external object ComponentType {
  public var None: String

  public var TranslationX: String

  public var TranslationY: String

  public var TranslationZ: String

  public var RotationX: String

  public var RotationY: String

  public var RotationZ: String

  public var Scale: String

  public var ScaleX: String

  public var ScaleY: String

  public var ScaleZ: String

  @JsName("EComponentType_MAX")
  public var Max: String
}

@JsName("EDrivenDestinationMode")
public external object DrivenDestinationMode {
  public var Bone: String

  public var MorphTarget: String

  public var MaterialParameter: String

  @JsName("EDrivenDestinationMode_MAX")
  public var Max: String
}

@JsName("EDrivenBoneModificationMode")
public external object DrivenBoneModificationMode {
  public var AddToInput: String

  public var ReplaceComponent: String

  public var AddToRefPose: String

  @JsName("EDrivenBoneModificationMode_MAX")
  public var Max: String
}

@JsName("AnimNode_BoneDrivenController")
public open external class AnimNodeBoneDrivenController : AnimNodeSkeletalControlBase {
  @JsName("SourceBone")
  public open var sourceBone: BoneReference

  @JsName("DrivingCurve")
  public open var drivingCurve: CurveFloat

  @JsName("Multiplier")
  public open var multiplier: Number

  @JsName("RangeMin")
  public open var rangeMin: Number

  @JsName("RangeMax")
  public open var rangeMax: Number

  @JsName("RemappedMin")
  public open var remappedMin: Number

  @JsName("RemappedMax")
  public open var remappedMax: Number

  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("TargetBone")
  public open var targetBone: BoneReference

  @JsName("TargetComponent")
  public open var targetComponent: String

  @JsName("DestinationMode")
  public open var destinationMode: String

  @JsName("ModificationMode")
  public open var modificationMode: String

  @JsName("SourceComponent")
  public open var sourceComponent: String

  @JsName("bUseRange")
  public open var useRange: Boolean

  @JsName("bAffectTargetTranslationX")
  public open var affectTargetTranslationX: Boolean

  @JsName("bAffectTargetTranslationY")
  public open var affectTargetTranslationY: Boolean

  @JsName("bAffectTargetTranslationZ")
  public open var affectTargetTranslationZ: Boolean

  @JsName("bAffectTargetRotationX")
  public open var affectTargetRotationX: Boolean

  @JsName("bAffectTargetRotationY")
  public open var affectTargetRotationY: Boolean

  @JsName("bAffectTargetRotationZ")
  public open var affectTargetRotationZ: Boolean

  @JsName("bAffectTargetScaleX")
  public open var affectTargetScaleX: Boolean

  @JsName("bAffectTargetScaleY")
  public open var affectTargetScaleY: Boolean

  @JsName("bAffectTargetScaleZ")
  public open var affectTargetScaleZ: Boolean

  public override fun clone(): AnimNodeBoneDrivenController

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBoneDrivenController

    @JsName("C")
    public fun copy(other: Any): AnimNodeBoneDrivenController
  }
}

@JsName("AnimGraphNode_BoneDrivenController")
public open external class AnimGraphNodeBoneDrivenController(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeBoneDrivenController

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBoneDrivenController

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBoneDrivenController

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBoneDrivenController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBoneDrivenController

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBoneDrivenController

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBoneDrivenController
  }
}

@JsName("EAnimFunctionCallSite")
public external object AnimFunctionCallSite {
  @JsName("OnInitialize")
  public var Initialize: String

  @JsName("OnUpdate")
  public var Update: String

  @JsName("OnBecomeRelevant")
  public var BecomeRelevant: String

  @JsName("OnEvaluate")
  public var Evaluate: String

  @JsName("OnInitializePostRecursion")
  public var InitializePostRecursion: String

  @JsName("OnUpdatePostRecursion")
  public var UpdatePostRecursion: String

  @JsName("OnBecomeRelevantPostRecursion")
  public var BecomeRelevantPostRecursion: String

  @JsName("OnEvaluatePostRecursion")
  public var EvaluatePostRecursion: String

  @JsName("OnStartedBlendingOut")
  public var StartedBlendingOut: String

  @JsName("OnStartedBlendingIn")
  public var StartedBlendingIn: String

  @JsName("OnFinishedBlendingOut")
  public var FinishedBlendingOut: String

  @JsName("OnFinishedBlendingIn")
  public var FinishedBlendingIn: String

  @JsName("EAnimFunctionCallSite_MAX")
  public var Max: String
}

@JsName("AnimNode_CallFunction")
public open external class AnimNodeCallFunction : AnimNodeBase {
  @JsName("Source")
  public open var source: PoseLink

  @JsName("UFunction")
  public open var uFunction: AnimNodeFunctionRef

  @JsName("CallSite")
  public open var callSite: String

  public override fun clone(): AnimNodeCallFunction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeCallFunction

    @JsName("C")
    public fun copy(other: Any): AnimNodeCallFunction
  }
}

@JsName("AnimGraphNode_CallFunction")
public open external class AnimGraphNodeCallFunction(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("InnerGraph")
  public open var innerGraph: EdGraph

  @JsName("CallFunctionPrototype")
  public open var callFunctionPrototype: K2NodeCallFunction

  @JsName("UNode")
  public open var uNode: AnimNodeCallFunction

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCallFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCallFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCallFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCallFunction

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCallFunction

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCallFunction
  }
}

public open external class SocketReference {
  @JsName("SocketName")
  public open var socketName: String

  public open fun clone(): SocketReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SocketReference

    @JsName("C")
    public fun copy(other: Any): SocketReference
  }
}

public open external class BoneSocketTarget {
  @JsName("bUseSocket")
  public open var useSocket: Boolean

  @JsName("BoneReference")
  public open var boneReference: BoneReference

  @JsName("SocketReference")
  public open var socketReference: SocketReference

  public open fun clone(): BoneSocketTarget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoneSocketTarget

    @JsName("C")
    public fun copy(other: Any): BoneSocketTarget
  }
}

@JsName("AnimNode_CCDIK")
public open external class AnimNodeCcdik : AnimNodeSkeletalControlBase {
  @JsName("EffectorLocation")
  public open var effectorLocation: Vector

  @JsName("EffectorLocationSpace")
  public open var effectorLocationSpace: String

  @JsName("EffectorTarget")
  public open var effectorTarget: BoneSocketTarget

  @JsName("TipBone")
  public open var tipBone: BoneReference

  @JsName("RootBone")
  public open var rootBone: BoneReference

  @JsName("Precision")
  public open var precision: Number

  @JsName("MaxIterations")
  public open var maxIterations: Number

  @JsName("bStartFromTail")
  public open var startFromTail: Boolean

  @JsName("bEnableRotationLimit")
  public open var enableRotationLimit: Boolean

  @JsName("RotationLimitPerJoints")
  public open var rotationLimitPerJoints: Array<Number>

  public override fun clone(): AnimNodeCcdik

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeCcdik

    @JsName("C")
    public fun copy(other: Any): AnimNodeCcdik
  }
}

@JsName("AnimGraphNode_CCDIK")
public open external class AnimGraphNodeCcdik(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeCcdik

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCcdik

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCcdik

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCcdik

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCcdik

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCcdik

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCcdik
  }
}

@JsName("AnimNode_ConvertComponentToLocalSpace")
public open external class AnimNodeConvertComponentToLocalSpace : AnimNodeBase {
  @JsName("ComponentPose")
  public open var componentPose: ComponentSpacePoseLink

  public override fun clone(): AnimNodeConvertComponentToLocalSpace

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeConvertComponentToLocalSpace

    @JsName("C")
    public fun copy(other: Any): AnimNodeConvertComponentToLocalSpace
  }
}

@JsName("AnimGraphNode_ComponentToLocalSpace")
public open external class AnimGraphNodeComponentToLocalSpace(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeConvertComponentToLocalSpace

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeComponentToLocalSpace

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeComponentToLocalSpace

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeComponentToLocalSpace

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeComponentToLocalSpace

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeComponentToLocalSpace

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeComponentToLocalSpace
  }
}

@JsName("EConstraintOffsetOption")
public external object ConstraintOffsetOption {
  public var None: String

  @JsName("Offset_RefPose")
  public var OffsetRefPose: String

  @JsName("EConstraintOffsetOption_MAX")
  public var Max: String
}

@JsName("ETransformConstraintType")
public external object TransformConstraintType {
  public var Translation: String

  public var Rotation: String

  public var Scale: String

  public var Parent: String

  @JsName("ETransformConstraintType_MAX")
  public var Max: String
}

public open external class FilterOptionPerAxis {
  @JsName("bX")
  public open var X: Boolean

  @JsName("bY")
  public open var Y: Boolean

  @JsName("bZ")
  public open var Z: Boolean

  public open fun clone(): FilterOptionPerAxis

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FilterOptionPerAxis

    @JsName("C")
    public fun copy(other: Any): FilterOptionPerAxis
  }
}

public open external class Constraint {
  @JsName("TargetBone")
  public open var targetBone: BoneReference

  @JsName("OffsetOption")
  public open var offsetOption: String

  @JsName("TransformType")
  public open var transformType: String

  @JsName("PerAxis")
  public open var perAxis: FilterOptionPerAxis

  public open fun clone(): Constraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Constraint

    @JsName("C")
    public fun copy(other: Any): Constraint
  }
}

@JsName("AnimNode_Constraint")
public open external class AnimNodeConstraint : AnimNodeSkeletalControlBase {
  @JsName("BoneToModify")
  public open var boneToModify: BoneReference

  @JsName("ConstraintSetup")
  public open var constraintSetup: Array<Constraint>

  @JsName("ConstraintWeights")
  public open var constraintWeights: Array<Number>

  public override fun clone(): AnimNodeConstraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeConstraint

    @JsName("C")
    public fun copy(other: Any): AnimNodeConstraint
  }
}

@JsName("AnimGraphNode_Constraint")
public open external class AnimGraphNodeConstraint(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeConstraint

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeConstraint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeConstraint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeConstraint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeConstraint

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeConstraint

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeConstraint
  }
}

@JsName("AnimNode_CopyBone")
public open external class AnimNodeCopyBone : AnimNodeSkeletalControlBase {
  @JsName("SourceBone")
  public open var sourceBone: BoneReference

  @JsName("TargetBone")
  public open var targetBone: BoneReference

  @JsName("bCopyTranslation")
  public open var copyTranslation: Boolean

  @JsName("bCopyRotation")
  public open var copyRotation: Boolean

  @JsName("bCopyScale")
  public open var copyScale: Boolean

  @JsName("ControlSpace")
  public open var controlSpace: String

  public override fun clone(): AnimNodeCopyBone

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeCopyBone

    @JsName("C")
    public fun copy(other: Any): AnimNodeCopyBone
  }
}

@JsName("AnimGraphNode_CopyBone")
public open external class AnimGraphNodeCopyBone(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeCopyBone

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCopyBone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCopyBone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCopyBone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCopyBone

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCopyBone

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCopyBone
  }
}

public external object CopyBoneDeltaMode {
  @JsName("Accumulate")
  public var accumulate: String

  @JsName("Copy")
  public var copy: String

  @JsName("CopyBoneDeltaMode_MAX")
  public var copyBoneDeltaModeMax: String
}

@JsName("AnimNode_CopyBoneDelta")
public open external class AnimNodeCopyBoneDelta : AnimNodeSkeletalControlBase {
  @JsName("SourceBone")
  public open var sourceBone: BoneReference

  @JsName("TargetBone")
  public open var targetBone: BoneReference

  @JsName("bCopyTranslation")
  public open var copyTranslation: Boolean

  @JsName("bCopyRotation")
  public open var copyRotation: Boolean

  @JsName("bCopyScale")
  public open var copyScale: Boolean

  @JsName("CopyMode")
  public open var copyMode: String

  @JsName("TranslationMultiplier")
  public open var translationMultiplier: Number

  @JsName("RotationMultiplier")
  public open var rotationMultiplier: Number

  @JsName("ScaleMultiplier")
  public open var scaleMultiplier: Number

  public override fun clone(): AnimNodeCopyBoneDelta

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeCopyBoneDelta

    @JsName("C")
    public fun copy(other: Any): AnimNodeCopyBoneDelta
  }
}

@JsName("AnimGraphNode_CopyBoneDelta")
public open external class AnimGraphNodeCopyBoneDelta(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeCopyBoneDelta

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCopyBoneDelta

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCopyBoneDelta

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCopyBoneDelta

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCopyBoneDelta

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCopyBoneDelta

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCopyBoneDelta
  }
}

@JsName("AnimNode_CopyPoseFromMesh")
public open external class AnimNodeCopyPoseFromMesh : AnimNodeBase {
  @JsName("SourceMeshComponent")
  public open var sourceMeshComponent: Any

  @JsName("bUseAttachedParent")
  public open var useAttachedParent: Boolean

  @JsName("bCopyCurves")
  public open var copyCurves: Boolean

  @JsName("bCopyCustomAttributes")
  public open var copyCustomAttributes: Boolean

  @JsName("bUseMeshPose")
  public open var useMeshPose: Boolean

  @JsName("RootBoneToCopy")
  public open var rootBoneToCopy: String

  public override fun clone(): AnimNodeCopyPoseFromMesh

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeCopyPoseFromMesh

    @JsName("C")
    public fun copy(other: Any): AnimNodeCopyPoseFromMesh
  }
}

@JsName("AnimGraphNode_CopyPoseFromMesh")
public open external class AnimGraphNodeCopyPoseFromMesh(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeCopyPoseFromMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCopyPoseFromMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCopyPoseFromMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCopyPoseFromMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCopyPoseFromMesh

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCopyPoseFromMesh

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCopyPoseFromMesh
  }
}

@JsName("AnimNode_CurveSource")
public open external class AnimNodeCurveSource : AnimNodeBase {
  @JsName("SourcePose")
  public open var sourcePose: PoseLink

  @JsName("SourceBinding")
  public open var sourceBinding: String

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("CurveSource")
  public open var curveSource: Any

  public override fun clone(): AnimNodeCurveSource

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeCurveSource

    @JsName("C")
    public fun copy(other: Any): AnimNodeCurveSource
  }
}

@JsName("AnimGraphNode_CurveSource")
public open external class AnimGraphNodeCurveSource(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeCurveSource

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCurveSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCurveSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCurveSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCurveSource

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCurveSource

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCurveSource
  }
}

@JsName("AnimGraphNode_CustomProperty")
public open external class AnimGraphNodeCustomProperty(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("KnownExposableProperties")
  public open var knownExposableProperties: Array<String>

  @JsName("ExposedPropertyNames")
  public open var exposedPropertyNames: Array<String>

  @JsName("CustomPinProperties")
  public open var customPinProperties: Array<OptionalPinFromProperty>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCustomProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCustomProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCustomProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCustomProperty

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCustomProperty

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCustomProperty
  }
}

@JsName("EBoneRotationSource")
public external object BoneRotationSource {
  @JsName("BRS_KeepComponentSpaceRotation")
  public var KeepComponentSpaceRotation: String

  @JsName("BRS_KeepLocalSpaceRotation")
  public var KeepLocalSpaceRotation: String

  @JsName("BRS_CopyFromTarget")
  public var CopyFromTarget: String

  @JsName("BRS_MAX")
  public var Max: String
}

@JsName("AnimNode_Fabrik")
public open external class AnimNodeFabrik : AnimNodeSkeletalControlBase {
  @JsName("EffectorTransform")
  public open var effectorTransform: Transform

  @JsName("EffectorTarget")
  public open var effectorTarget: BoneSocketTarget

  @JsName("TipBone")
  public open var tipBone: BoneReference

  @JsName("RootBone")
  public open var rootBone: BoneReference

  @JsName("Precision")
  public open var precision: Number

  @JsName("MaxIterations")
  public open var maxIterations: Number

  @JsName("EffectorTransformSpace")
  public open var effectorTransformSpace: String

  @JsName("EffectorRotationSource")
  public open var effectorRotationSource: String

  @JsName("bEnableDebugDraw")
  public open var enableDebugDraw: Boolean

  @JsName("EffectorTransformBone")
  public open var effectorTransformBone: BoneReference

  public override fun clone(): AnimNodeFabrik

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeFabrik

    @JsName("C")
    public fun copy(other: Any): AnimNodeFabrik
  }
}

@JsName("AnimGraphNode_Fabrik")
public open external class AnimGraphNodeFabrik(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeFabrik

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeFabrik

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeFabrik

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeFabrik

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeFabrik

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeFabrik

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeFabrik
  }
}

@JsName("AnimNode_HandIKRetargeting")
public open external class AnimNodeHandIkRetargeting : AnimNodeSkeletalControlBase {
  @JsName("RightHandFK")
  public open var rightHandFk: BoneReference

  @JsName("LeftHandFK")
  public open var leftHandFk: BoneReference

  @JsName("RightHandIK")
  public open var rightHandIk: BoneReference

  @JsName("LeftHandIK")
  public open var leftHandIk: BoneReference

  @JsName("IKBonesToMove")
  public open var ikBonesToMove: Array<BoneReference>

  @JsName("HandFKWeight")
  public open var handFkWeight: Number

  public override fun clone(): AnimNodeHandIkRetargeting

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeHandIkRetargeting

    @JsName("C")
    public fun copy(other: Any): AnimNodeHandIkRetargeting
  }
}

@JsName("AnimGraphNode_HandIKRetargeting")
public open external class AnimGraphNodeHandIkRetargeting(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeHandIkRetargeting

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeHandIkRetargeting

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeHandIkRetargeting

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeHandIkRetargeting

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeHandIkRetargeting

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeHandIkRetargeting

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeHandIkRetargeting
  }
}

@JsName("ERefPoseType")
public external object RefPoseType {
  @JsName("EIT_LocalSpace")
  public var LocalSpace: String

  @JsName("EIT_Additive")
  public var Additive: String

  @JsName("EIT_MAX")
  public var Max: String
}

@JsName("AnimNode_RefPose")
public open external class AnimNodeRefPose : AnimNodeBase {
  @JsName("RefPoseType")
  public open var refPoseType: String

  public override fun clone(): AnimNodeRefPose

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeRefPose

    @JsName("C")
    public fun copy(other: Any): AnimNodeRefPose
  }
}

@JsName("AnimGraphNode_RefPoseBase")
public open external class AnimGraphNodeRefPoseBase(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeRefPose

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeRefPoseBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeRefPoseBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeRefPoseBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeRefPoseBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeRefPoseBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeRefPoseBase
  }
}

@JsName("AnimGraphNode_IdentityPose")
public open external class AnimGraphNodeIdentityPose(
  outer: UObject,
) : AnimGraphNodeRefPoseBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeIdentityPose

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeIdentityPose

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeIdentityPose

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeIdentityPose

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeIdentityPose

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeIdentityPose
  }
}

@JsName("AnimNode_Inertialization")
public open external class AnimNodeInertialization : AnimNodeBase {
  @JsName("Source")
  public open var source: PoseLink

  @JsName("FilteredCurves")
  public open var filteredCurves: Array<String>

  public override fun clone(): AnimNodeInertialization

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeInertialization

    @JsName("C")
    public fun copy(other: Any): AnimNodeInertialization
  }
}

@JsName("AnimGraphNode_Inertialization")
public open external class AnimGraphNodeInertialization(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeInertialization

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeInertialization

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeInertialization

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeInertialization

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeInertialization

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeInertialization

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeInertialization
  }
}

@JsName("ELayeredBoneBlendMode")
public external object LayeredBoneBlendMode {
  public var BranchFilter: String

  public var BlendMask: String

  @JsName("ELayeredBoneBlendMode_MAX")
  public var Max: String
}

public open external class BranchFilter {
  @JsName("BoneName")
  public open var boneName: String

  @JsName("BlendDepth")
  public open var blendDepth: Number

  public open fun clone(): BranchFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BranchFilter

    @JsName("C")
    public fun copy(other: Any): BranchFilter
  }
}

public open external class InputBlendPose {
  @JsName("BranchFilters")
  public open var branchFilters: Array<BranchFilter>

  public open fun clone(): InputBlendPose

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputBlendPose

    @JsName("C")
    public fun copy(other: Any): InputBlendPose
  }
}

@JsName("ECurveBlendOption")
public external object CurveBlendOption {
  public var Override: String

  public var DoNotOverride: String

  public var NormalizeByWeight: String

  public var BlendByWeight: String

  public var UseBasePose: String

  public var UseMaxValue: String

  public var UseMinValue: String

  @JsName("ECurveBlendOption_MAX")
  public var Max: String
}

public open external class PerBoneBlendWeight {
  @JsName("SourceIndex")
  public open var sourceIndex: Number

  @JsName("BlendWeight")
  public open var blendWeight: Number

  public open fun clone(): PerBoneBlendWeight

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PerBoneBlendWeight

    @JsName("C")
    public fun copy(other: Any): PerBoneBlendWeight
  }
}

@JsName("AnimNode_LayeredBoneBlend")
public open external class AnimNodeLayeredBoneBlend : AnimNodeBase {
  @JsName("BasePose")
  public open var basePose: PoseLink

  @JsName("BlendPoses")
  public open var blendPoses: Array<PoseLink>

  @JsName("BlendMode")
  public open var blendMode: String

  @JsName("BlendMasks")
  public open var blendMasks: Array<BlendProfile>

  @JsName("LayerSetup")
  public open var layerSetup: Array<InputBlendPose>

  @JsName("BlendWeights")
  public open var blendWeights: Array<Number>

  @JsName("bMeshSpaceRotationBlend")
  public open var meshSpaceRotationBlend: Boolean

  @JsName("bMeshSpaceScaleBlend")
  public open var meshSpaceScaleBlend: Boolean

  @JsName("CurveBlendOption")
  public open var curveBlendOption: String

  @JsName("bBlendRootMotionBasedOnRootBone")
  public open var blendRootMotionBasedOnRootBone: Boolean

  @JsName("LODThreshold")
  public open var lodThreshold: Number

  @JsName("PerBoneBlendWeights")
  public open var perBoneBlendWeights: Array<PerBoneBlendWeight>

  @JsName("SkeletonGuid")
  public open var skeletonGuid: Guid

  @JsName("VirtualBoneGuid")
  public open var virtualBoneGuid: Guid

  public override fun clone(): AnimNodeLayeredBoneBlend

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeLayeredBoneBlend

    @JsName("C")
    public fun copy(other: Any): AnimNodeLayeredBoneBlend
  }
}

@JsName("AnimGraphNode_LayeredBoneBlend")
public open external class AnimGraphNodeLayeredBoneBlend(
  outer: UObject,
) : AnimGraphNodeBlendListBase {
  @JsName("UNode")
  public open var uNode: AnimNodeLayeredBoneBlend

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLayeredBoneBlend

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLayeredBoneBlend

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLayeredBoneBlend

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLayeredBoneBlend

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLayeredBoneBlend

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLayeredBoneBlend
  }
}

@JsName("AnimLegIKDefinition")
public open external class AnimLegIkDefinition {
  @JsName("IKFootBone")
  public open var ikFootBone: BoneReference

  @JsName("FKFootBone")
  public open var fkFootBone: BoneReference

  @JsName("NumBonesInLimb")
  public open var numBonesInLimb: Number

  @JsName("MinRotationAngle")
  public open var minRotationAngle: Number

  @JsName("FootBoneForwardAxis")
  public open var footBoneForwardAxis: String

  @JsName("HingeRotationAxis")
  public open var hingeRotationAxis: String

  @JsName("bEnableRotationLimit")
  public open var enableRotationLimit: Boolean

  @JsName("bEnableKneeTwistCorrection")
  public open var enableKneeTwistCorrection: Boolean

  public open fun clone(): AnimLegIkDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimLegIkDefinition

    @JsName("C")
    public fun copy(other: Any): AnimLegIkDefinition
  }
}

@JsName("AnimNode_LegIK")
public open external class AnimNodeLegIk : AnimNodeSkeletalControlBase {
  @JsName("ReachPrecision")
  public open var reachPrecision: Number

  @JsName("MaxIterations")
  public open var maxIterations: Number

  @JsName("LegsDefinition")
  public open var legsDefinition: Array<AnimLegIkDefinition>

  public override fun clone(): AnimNodeLegIk

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeLegIk

    @JsName("C")
    public fun copy(other: Any): AnimNodeLegIk
  }
}

@JsName("AnimGraphNode_LegIK")
public open external class AnimGraphNodeLegIk(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeLegIk

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLegIk

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLegIk

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLegIk

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLegIk

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLegIk

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLegIk
  }
}

@JsName("AnimGraphNode_LinkedAnimGraphBase")
public open external class AnimGraphNodeLinkedAnimGraphBase(
  outer: UObject,
) : AnimGraphNodeCustomProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLinkedAnimGraphBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLinkedAnimGraphBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLinkedAnimGraphBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLinkedAnimGraphBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLinkedAnimGraphBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLinkedAnimGraphBase
  }
}

@JsName("AnimNode_CustomProperty")
public open external class AnimNodeCustomProperty : AnimNodeBase {
  @JsName("SourcePropertyNames")
  public open var sourcePropertyNames: Array<String>

  @JsName("DestPropertyNames")
  public open var destPropertyNames: Array<String>

  @JsName("TargetInstance")
  public open var targetInstance: UObject

  public override fun clone(): AnimNodeCustomProperty

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeCustomProperty

    @JsName("C")
    public fun copy(other: Any): AnimNodeCustomProperty
  }
}

@JsName("AnimNode_LinkedAnimGraph")
public open external class AnimNodeLinkedAnimGraph : AnimNodeCustomProperty {
  @JsName("InputPoses")
  public open var inputPoses: Array<PoseLink>

  @JsName("InputPoseNames")
  public open var inputPoseNames: Array<String>

  @JsName("InstanceClass")
  public open var instanceClass: UnrealEngineClass

  @JsName("Tag")
  public open var tag: String

  @JsName("bReceiveNotifiesFromLinkedInstances")
  public open var receiveNotifiesFromLinkedInstances: Boolean

  @JsName("bPropagateNotifiesToLinkedInstances")
  public open var propagateNotifiesToLinkedInstances: Boolean

  public override fun clone(): AnimNodeLinkedAnimGraph

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeLinkedAnimGraph

    @JsName("C")
    public fun copy(other: Any): AnimNodeLinkedAnimGraph
  }
}

@JsName("AnimGraphNode_LinkedAnimGraph")
public open external class AnimGraphNodeLinkedAnimGraph(
  outer: UObject,
) : AnimGraphNodeLinkedAnimGraphBase {
  @JsName("UNode")
  public open var uNode: AnimNodeLinkedAnimGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLinkedAnimGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLinkedAnimGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLinkedAnimGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLinkedAnimGraph

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLinkedAnimGraph

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLinkedAnimGraph
  }
}

public open external class AnimLayerInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimLayerInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimLayerInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimLayerInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimLayerInterface

    @JsName("C")
    public fun copy(other: UObject): AnimLayerInterface

    @JsName("C")
    public fun copy(other: Any): AnimLayerInterface
  }
}

@JsName("AnimNode_LinkedAnimLayer")
public open external class AnimNodeLinkedAnimLayer : AnimNodeLinkedAnimGraph {
  @JsName("Interface")
  public open var `interface`: UnrealEngineClass

  @JsName("Layer")
  public open var layer: String

  public override fun clone(): AnimNodeLinkedAnimLayer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeLinkedAnimLayer

    @JsName("C")
    public fun copy(other: Any): AnimNodeLinkedAnimLayer
  }
}

@JsName("AnimGraphNode_LinkedAnimLayer")
public open external class AnimGraphNodeLinkedAnimLayer(
  outer: UObject,
) : AnimGraphNodeLinkedAnimGraphBase {
  @JsName("UNode")
  public open var uNode: AnimNodeLinkedAnimLayer

  @JsName("InterfaceGuid")
  public open var interfaceGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLinkedAnimLayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLinkedAnimLayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLinkedAnimLayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLinkedAnimLayer

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLinkedAnimLayer

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLinkedAnimLayer
  }
}

@JsName("AnimNode_LinkedInputPose")
public open external class AnimNodeLinkedInputPose : AnimNodeBase {
  @JsName("Name")
  public open var name: String

  @JsName("Graph")
  public open var graph: String

  @JsName("InputPose")
  public open var inputPose: PoseLink

  public override fun clone(): AnimNodeLinkedInputPose

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeLinkedInputPose

    @JsName("C")
    public fun copy(other: Any): AnimNodeLinkedInputPose
  }
}

public open external class AnimBlueprintFunctionPinInfo {
  @JsName("Name")
  public open var name: String

  @JsName("Type")
  public open var type: EdGraphPinType

  public open fun clone(): AnimBlueprintFunctionPinInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintFunctionPinInfo

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintFunctionPinInfo
  }
}

@JsName("AnimGraphNode_LinkedInputPose")
public open external class AnimGraphNodeLinkedInputPose(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeLinkedInputPose

  @JsName("Inputs")
  public open var inputs: Array<AnimBlueprintFunctionPinInfo>

  @JsName("FunctionReference")
  public open var functionReference: MemberReference

  @JsName("InputPoseIndex")
  public open var inputPoseIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLinkedInputPose

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLinkedInputPose

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLinkedInputPose

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLinkedInputPose

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLinkedInputPose

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLinkedInputPose
  }
}

@JsName("AnimGraphNode_LocalRefPose")
public open external class AnimGraphNodeLocalRefPose(
  outer: UObject,
) : AnimGraphNodeRefPoseBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLocalRefPose

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLocalRefPose

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLocalRefPose

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLocalRefPose

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLocalRefPose

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLocalRefPose
  }
}

@JsName("AnimNode_ConvertLocalToComponentSpace")
public open external class AnimNodeConvertLocalToComponentSpace : AnimNodeBase {
  @JsName("LocalPose")
  public open var localPose: PoseLink

  public override fun clone(): AnimNodeConvertLocalToComponentSpace

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeConvertLocalToComponentSpace

    @JsName("C")
    public fun copy(other: Any): AnimNodeConvertLocalToComponentSpace
  }
}

@JsName("AnimGraphNode_LocalToComponentSpace")
public open external class AnimGraphNodeLocalToComponentSpace(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeConvertLocalToComponentSpace

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLocalToComponentSpace

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLocalToComponentSpace

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLocalToComponentSpace

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLocalToComponentSpace

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLocalToComponentSpace

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLocalToComponentSpace
  }
}

public open external class Axis {
  @JsName("Axis")
  public open var axis: Vector

  @JsName("bInLocalSpace")
  public open var inLocalSpace: Boolean

  public open fun clone(): Axis

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Axis

    @JsName("C")
    public fun copy(other: Any): Axis
  }
}

@JsName("EInterpolationBlend")
public external object InterpolationBlend {
  public var Linear: String

  public var Cubic: String

  public var Sinusoidal: String

  public var EaseInOutExponent2: String

  public var EaseInOutExponent3: String

  public var EaseInOutExponent4: String

  public var EaseInOutExponent5: String

  public var MAX: String
}

@JsName("EAxisOption")
public external object AxisOption {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  @JsName("X_Neg")
  public var XNeg: String

  @JsName("Y_Neg")
  public var YNeg: String

  @JsName("Z_Neg")
  public var ZNeg: String

  public var Custom: String

  @JsName("EAxisOption_MAX")
  public var Max: String
}

@JsName("AnimNode_LookAt")
public open external class AnimNodeLookAt : AnimNodeSkeletalControlBase {
  @JsName("BoneToModify")
  public open var boneToModify: BoneReference

  @JsName("LookAtTarget")
  public open var lookAtTarget: BoneSocketTarget

  @JsName("LookAtLocation")
  public open var lookAtLocation: Vector

  @JsName("LookAt_Axis")
  public open var lookAtAxis: Axis

  @JsName("bUseLookUpAxis")
  public open var useLookUpAxis: Boolean

  @JsName("InterpolationType")
  public open var interpolationType: String

  @JsName("LookUp_Axis")
  public open var lookUpAxis: Axis

  @JsName("LookAtClamp")
  public open var lookAtClamp: Number

  @JsName("InterpolationTime")
  public open var interpolationTime: Number

  @JsName("InterpolationTriggerThreashold")
  public open var interpolationTriggerThreashold: Number

  @JsName("LookAtBone")
  public open var lookAtBone: BoneReference

  @JsName("LookAtSocket")
  public open var lookAtSocket: String

  @JsName("LookAtAxis")
  public open var lookAtAxisString: String

  @JsName("CustomLookAtAxis")
  public open var customLookAtAxis: Vector

  @JsName("LookUpAxis")
  public open var lookUpAxisString: String

  @JsName("CustomLookUpAxis")
  public open var customLookUpAxis: Vector

  public override fun clone(): AnimNodeLookAt

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeLookAt

    @JsName("C")
    public fun copy(other: Any): AnimNodeLookAt
  }
}

@JsName("AnimGraphNode_LookAt")
public open external class AnimGraphNodeLookAt(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeLookAt

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeLookAt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeLookAt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeLookAt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeLookAt

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeLookAt

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeLookAt
  }
}

@JsName("AnimNode_MakeDynamicAdditive")
public open external class AnimNodeMakeDynamicAdditive : AnimNodeBase {
  @JsName("Base")
  public open var base: PoseLink

  @JsName("Additive")
  public open var additive: PoseLink

  @JsName("bMeshSpaceAdditive")
  public open var meshSpaceAdditive: Boolean

  public override fun clone(): AnimNodeMakeDynamicAdditive

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeMakeDynamicAdditive

    @JsName("C")
    public fun copy(other: Any): AnimNodeMakeDynamicAdditive
  }
}

@JsName("AnimGraphNode_MakeDynamicAdditive")
public open external class AnimGraphNodeMakeDynamicAdditive(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeMakeDynamicAdditive

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeMakeDynamicAdditive

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeMakeDynamicAdditive

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeMakeDynamicAdditive

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeMakeDynamicAdditive

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeMakeDynamicAdditive

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeMakeDynamicAdditive
  }
}

@JsName("AnimNode_MeshSpaceRefPose")
public open external class AnimNodeMeshSpaceRefPose : AnimNodeBase {
  public override fun clone(): AnimNodeMeshSpaceRefPose

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeMeshSpaceRefPose

    @JsName("C")
    public fun copy(other: Any): AnimNodeMeshSpaceRefPose
  }
}

@JsName("AnimGraphNode_MeshRefPose")
public open external class AnimGraphNodeMeshRefPose(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeMeshSpaceRefPose

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeMeshRefPose

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeMeshRefPose

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeMeshRefPose

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeMeshRefPose

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeMeshRefPose

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeMeshRefPose
  }
}

@JsName("AnimNode_MirrorBase")
public open external class AnimNodeMirrorBase : AnimNodeBase {
  @JsName("Source")
  public open var source: PoseLink

  public override fun clone(): AnimNodeMirrorBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeMirrorBase

    @JsName("C")
    public fun copy(other: Any): AnimNodeMirrorBase
  }
}

@JsName("AnimNode_Mirror")
public open external class AnimNodeMirror : AnimNodeMirrorBase {
  @JsName("bMirror")
  public open var mirror: Boolean

  @JsName("MirrorDataTable")
  public open var mirrorDataTable: MirrorDataTable

  @JsName("BlendTime")
  public open var blendTime: Number

  @JsName("bResetChild")
  public open var resetChild: Boolean

  @JsName("bBoneMirroring")
  public open var boneMirroring: Boolean

  @JsName("bCurveMirroring")
  public open var curveMirroring: Boolean

  @JsName("bAttributeMirroring")
  public open var attributeMirroring: Boolean

  public override fun clone(): AnimNodeMirror

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeMirror

    @JsName("C")
    public fun copy(other: Any): AnimNodeMirror
  }
}

@JsName("AnimGraphNode_Mirror")
public open external class AnimGraphNodeMirror(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeMirror

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeMirror

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeMirror

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeMirror

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeMirror

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeMirror

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeMirror
  }
}

@JsName("EBoneModificationMode")
public external object BoneModificationMode {
  @JsName("BMM_Ignore")
  public var Ignore: String

  @JsName("BMM_Replace")
  public var Replace: String

  @JsName("BMM_Additive")
  public var Additive: String

  @JsName("BMM_MAX")
  public var Max: String
}

@JsName("AnimNode_ModifyBone")
public open external class AnimNodeModifyBone : AnimNodeSkeletalControlBase {
  @JsName("BoneToModify")
  public open var boneToModify: BoneReference

  @JsName("Translation")
  public open var translation: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("Scale")
  public open var scale: Vector

  @JsName("TranslationMode")
  public open var translationMode: String

  @JsName("RotationMode")
  public open var rotationMode: String

  @JsName("ScaleMode")
  public open var scaleMode: String

  @JsName("TranslationSpace")
  public open var translationSpace: String

  @JsName("RotationSpace")
  public open var rotationSpace: String

  @JsName("ScaleSpace")
  public open var scaleSpace: String

  public override fun clone(): AnimNodeModifyBone

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeModifyBone

    @JsName("C")
    public fun copy(other: Any): AnimNodeModifyBone
  }
}

@JsName("AnimGraphNode_ModifyBone")
public open external class AnimGraphNodeModifyBone(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeModifyBone

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeModifyBone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeModifyBone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeModifyBone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeModifyBone

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeModifyBone

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeModifyBone
  }
}

@JsName("EModifyCurveApplyMode")
public external object ModifyCurveApplyMode {
  public var Add: String

  public var Scale: String

  public var Blend: String

  public var WeightedMovingAverage: String

  public var RemapCurve: String

  @JsName("EModifyCurveApplyMode_MAX")
  public var Max: String
}

@JsName("AnimNode_ModifyCurve")
public open external class AnimNodeModifyCurve : AnimNodeBase {
  @JsName("SourcePose")
  public open var sourcePose: PoseLink

  @JsName("CurveMap")
  public open var curveMap: Any

  @JsName("CurveValues")
  public open var curveValues: Array<Number>

  @JsName("CurveNames")
  public open var curveNames: Array<String>

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("ApplyMode")
  public open var applyMode: String

  public override fun clone(): AnimNodeModifyCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeModifyCurve

    @JsName("C")
    public fun copy(other: Any): AnimNodeModifyCurve
  }
}

@JsName("AnimGraphNode_ModifyCurve")
public open external class AnimGraphNodeModifyCurve(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeModifyCurve

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeModifyCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeModifyCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeModifyCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeModifyCurve

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeModifyCurve

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeModifyCurve
  }
}

@JsName("AnimNode_MultiWayBlend")
public open external class AnimNodeMultiWayBlend : AnimNodeBase {
  @JsName("Poses")
  public open var poses: Array<PoseLink>

  @JsName("DesiredAlphas")
  public open var desiredAlphas: Array<Number>

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("bAdditiveNode")
  public open var additiveNode: Boolean

  @JsName("bNormalizeAlpha")
  public open var normalizeAlpha: Boolean

  public override fun clone(): AnimNodeMultiWayBlend

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeMultiWayBlend

    @JsName("C")
    public fun copy(other: Any): AnimNodeMultiWayBlend
  }
}

@JsName("AnimGraphNode_MultiWayBlend")
public open external class AnimGraphNodeMultiWayBlend(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeMultiWayBlend

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeMultiWayBlend

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeMultiWayBlend

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeMultiWayBlend

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeMultiWayBlend

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeMultiWayBlend

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeMultiWayBlend
  }
}

@JsName("AnimNode_ObserveBone")
public open external class AnimNodeObserveBone : AnimNodeSkeletalControlBase {
  @JsName("BoneToObserve")
  public open var boneToObserve: BoneReference

  @JsName("DisplaySpace")
  public open var displaySpace: String

  @JsName("bRelativeToRefPose")
  public open var relativeToRefPose: Boolean

  @JsName("Translation")
  public open var translation: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("Scale")
  public open var scale: Vector

  public override fun clone(): AnimNodeObserveBone

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeObserveBone

    @JsName("C")
    public fun copy(other: Any): AnimNodeObserveBone
  }
}

@JsName("AnimGraphNode_ObserveBone")
public open external class AnimGraphNodeObserveBone(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeObserveBone

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeObserveBone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeObserveBone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeObserveBone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeObserveBone

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeObserveBone

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeObserveBone
  }
}

@JsName("AnimGraphNode_PoseHandler")
public open external class AnimGraphNodePoseHandler(
  outer: UObject,
) : AnimGraphNodeAssetPlayerBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodePoseHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodePoseHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodePoseHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodePoseHandler

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodePoseHandler

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodePoseHandler
  }
}

@JsName("AnimNode_PoseHandler")
public open external class AnimNodePoseHandler : AnimNodeAssetPlayerBase {
  @JsName("PoseAsset")
  public open var poseAsset: PoseAsset

  public override fun clone(): AnimNodePoseHandler

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodePoseHandler

    @JsName("C")
    public fun copy(other: Any): AnimNodePoseHandler
  }
}

@JsName("AnimNode_PoseBlendNode")
public open external class AnimNodePoseBlendNode : AnimNodePoseHandler {
  @JsName("SourcePose")
  public open var sourcePose: PoseLink

  @JsName("BlendOption")
  public open var blendOption: String

  @JsName("CustomCurve")
  public open var customCurve: CurveFloat

  public override fun clone(): AnimNodePoseBlendNode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodePoseBlendNode

    @JsName("C")
    public fun copy(other: Any): AnimNodePoseBlendNode
  }
}

@JsName("AnimGraphNode_PoseBlendNode")
public open external class AnimGraphNodePoseBlendNode(
  outer: UObject,
) : AnimGraphNodePoseHandler {
  @JsName("UNode")
  public open var uNode: AnimNodePoseBlendNode

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodePoseBlendNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodePoseBlendNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodePoseBlendNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodePoseBlendNode

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodePoseBlendNode

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodePoseBlendNode
  }
}

@JsName("AnimNode_PoseByName")
public open external class AnimNodePoseByName : AnimNodePoseHandler {
  @JsName("PoseName")
  public open var poseName: String

  @JsName("PoseWeight")
  public open var poseWeight: Number

  public override fun clone(): AnimNodePoseByName

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodePoseByName

    @JsName("C")
    public fun copy(other: Any): AnimNodePoseByName
  }
}

@JsName("AnimGraphNode_PoseByName")
public open external class AnimGraphNodePoseByName(
  outer: UObject,
) : AnimGraphNodeAssetPlayerBase {
  @JsName("UNode")
  public open var uNode: AnimNodePoseByName

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodePoseByName

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodePoseByName

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodePoseByName

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodePoseByName

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodePoseByName

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodePoseByName
  }
}

public open external class PoseDriverTransform {
  @JsName("TargetTranslation")
  public open var targetTranslation: Vector

  @JsName("TargetRotation")
  public open var targetRotation: Rotator

  public open fun clone(): PoseDriverTransform

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseDriverTransform

    @JsName("C")
    public fun copy(other: Any): PoseDriverTransform
  }
}

@JsName("ERBFDistanceMethod")
public external object RBFDistanceMethod {
  public var Euclidean: String

  public var Quaternion: String

  public var SwingAngle: String

  public var TwistAngle: String

  public var DefaultMethod: String

  @JsName("ERBFDistanceMethod_MAX")
  public var Max: String
}

@JsName("ERBFFunctionType")
public external object RBFFunctionType {
  public var Gaussian: String

  public var Exponential: String

  public var Linear: String

  public var Cubic: String

  public var Quintic: String

  public var DefaultFunction: String

  @JsName("ERBFFunctionType_MAX")
  public var Max: String
}

public open external class PoseDriverTarget {
  @JsName("BoneTransforms")
  public open var boneTransforms: Array<PoseDriverTransform>

  @JsName("TargetRotation")
  public open var targetRotation: Rotator

  @JsName("TargetScale")
  public open var targetScale: Number

  @JsName("DistanceMethod")
  public open var distanceMethod: String

  @JsName("FunctionType")
  public open var functionType: String

  @JsName("bApplyCustomCurve")
  public open var applyCustomCurve: Boolean

  @JsName("CustomCurve")
  public open var customCurve: RichCurve

  @JsName("DrivenName")
  public open var drivenName: String

  @JsName("bIsHidden")
  public open var isHidden: Boolean

  public open fun clone(): PoseDriverTarget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseDriverTarget

    @JsName("C")
    public fun copy(other: Any): PoseDriverTarget
  }
}

@JsName("ERBFSolverType")
public external object RBFSolverType {
  public var Additive: String

  public var Interpolative: String

  @JsName("ERBFSolverType_MAX")
  public var Max: String
}

@JsName("EBoneAxis")
public external object BoneAxis {
  @JsName("BA_X")
  public var x: String

  @JsName("BA_Y")
  public var y: String

  @JsName("BA_Z")
  public var z: String

  @JsName("BA_MAX")
  public var Max: String
}

@JsName("ERBFNormalizeMethod")
public external object RBFNormalizeMethod {
  public var OnlyNormalizeAboveOne: String

  public var AlwaysNormalize: String

  public var NormalizeWithinMedian: String

  public var NoNormalization: String

  @JsName("ERBFNormalizeMethod_MAX")
  public var Max: String
}

@JsName("RBFParams")
public open external class RbfParams {
  @JsName("TargetDimensions")
  public open var targetDimensions: Number

  @JsName("SolverType")
  public open var solverType: String

  @JsName("Radius")
  public open var radius: Number

  @JsName("bAutomaticRadius")
  public open var automaticRadius: Boolean

  @JsName("UFunction")
  public open var uFunction: String

  @JsName("DistanceMethod")
  public open var distanceMethod: String

  @JsName("TwistAxis")
  public open var twistAxis: String

  @JsName("WeightThreshold")
  public open var weightThreshold: Number

  @JsName("NormalizeMethod")
  public open var normalizeMethod: String

  @JsName("MedianReference")
  public open var medianReference: Vector

  @JsName("MedianMin")
  public open var medianMin: Number

  @JsName("MedianMax")
  public open var medianMax: Number

  public open fun clone(): RbfParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RbfParams

    @JsName("C")
    public fun copy(other: Any): RbfParams
  }
}

@JsName("EPoseDriverType")
public external object PoseDriverType {
  public var SwingAndTwist: String

  public var SwingOnly: String

  public var Translation: String

  @JsName("EPoseDriverType_MAX")
  public var Max: String
}

@JsName("EPoseDriverSource")
public external object PoseDriverSource {
  public var Rotation: String

  public var Translation: String

  @JsName("EPoseDriverSource_MAX")
  public var Max: String
}

@JsName("EPoseDriverOutput")
public external object PoseDriverOutput {
  @JsName("DrivePoses")
  public var Poses: String

  @JsName("DriveCurves")
  public var Curves: String

  @JsName("EPoseDriverOutput_MAX")
  public var Max: String
}

@JsName("AnimNode_PoseDriver")
public open external class AnimNodePoseDriver : AnimNodePoseHandler {
  @JsName("SourcePose")
  public open var sourcePose: PoseLink

  @JsName("SourceBones")
  public open var sourceBones: Array<BoneReference>

  @JsName("OnlyDriveBones")
  public open var onlyDriveBones: Array<BoneReference>

  @JsName("PoseTargets")
  public open var poseTargets: Array<PoseDriverTarget>

  @JsName("EvalSpaceBone")
  public open var evalSpaceBone: BoneReference

  @JsName("bEvalFromRefPose")
  public open var evalFromRefPose: Boolean

  @JsName("RBFParams")
  public open var rbfParams: RbfParams

  @JsName("SourceBone")
  public open var sourceBone: BoneReference

  @JsName("TwistAxis")
  public open var twistAxis: String

  @JsName("Type")
  public open var type: String

  @JsName("RadialScaling")
  public open var radialScaling: Number

  @JsName("DriveSource")
  public open var driveSource: String

  @JsName("DriveOutput")
  public open var driveOutput: String

  @JsName("bOnlyDriveSelectedBones")
  public open var onlyDriveSelectedBones: Boolean

  @JsName("bSoloDrivenOnly")
  public open var soloDrivenOnly: Boolean

  @JsName("LODThreshold")
  public open var lodThreshold: Number

  public override fun clone(): AnimNodePoseDriver

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodePoseDriver

    @JsName("C")
    public fun copy(other: Any): AnimNodePoseDriver
  }
}

@JsName("T$660")
public external interface BoneNamesProvider {
  @JsName("BoneNames")
  public var boneNames: Array<String>
}

@JsName("AnimGraphNode_PoseDriver")
public open external class AnimGraphNodePoseDriver(
  outer: UObject,
) : AnimGraphNodePoseHandler {
  @JsName("UNode")
  public open var uNode: AnimNodePoseDriver

  @JsName("AxisLength")
  public open var axisLength: Number

  @JsName("ConeSubdivision")
  public open var coneSubdivision: Number

  @JsName("bDrawDebugCones")
  public open var drawDebugCones: Boolean

  @JsName("LastPreviewComponent")
  public open var lastPreviewComponent: SkeletalMeshComponent

  @JsName("SetSourceBones")
  public open fun setSourceBones(boneNames: Array<String>): Unit

  @JsName("SetRBFParameters")
  public open fun setRbfParameters(parameters: RbfParams): Unit

  @JsName("SetPoseDriverSource")
  public open fun setPoseDriverSource(driverSource: String): Unit

  @JsName("SetPoseDriverOutput")
  public open fun setPoseDriverOutput(driverOutput: String): Unit

  @JsName("SetOnlyDriveSelectedBones")
  public open fun setOnlyDriveSelectedBones(onlyDriveSelectedBones: Boolean): Unit

  @JsName("SetDrivingBones")
  public open fun setDrivingBones(boneNames: Array<String>): Unit

  @JsName("GetSourceBoneNames")
  public open fun getSourceBoneNames(boneNames: Array<String>): BoneNamesProvider

  @JsName("GetRBFParameters")
  public open fun getRbfParameters(): RbfParams

  @JsName("GetPoseDriverSource")
  public open fun getPoseDriverSource(): String

  @JsName("GetPoseDriverOutput")
  public open fun getPoseDriverOutput(): String

  @JsName("GetOnlyDriveSelectedBones")
  public open fun getOnlyDriveSelectedBones(): Boolean

  @JsName("GetDrivingBoneNames")
  public open fun getDrivingBoneNames(boneNames: Array<String>): BoneNamesProvider

  @JsName("CopyTargetsFromPoseAsset")
  public open fun copyTargetsFromPoseAsset(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodePoseDriver

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodePoseDriver

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodePoseDriver

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodePoseDriver

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodePoseDriver

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodePoseDriver
  }
}

@JsName("ESnapshotSourceMode")
public external object SnapshotSourceMode {
  public var NamedSnapshot: String

  public var SnapshotPin: String

  @JsName("ESnapshotSourceMode_MAX")
  public var Max: String
}

@JsName("AnimNode_PoseSnapshot")
public open external class AnimNodePoseSnapshot : AnimNodeBase {
  @JsName("SnapshotName")
  public open var snapshotName: String

  @JsName("Snapshot")
  public open var snapshot: PoseSnapshot

  @JsName("Mode")
  public open var mode: String

  public override fun clone(): AnimNodePoseSnapshot

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodePoseSnapshot

    @JsName("C")
    public fun copy(other: Any): AnimNodePoseSnapshot
  }
}

@JsName("AnimGraphNode_PoseSnapshot")
public open external class AnimGraphNodePoseSnapshot(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodePoseSnapshot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodePoseSnapshot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodePoseSnapshot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodePoseSnapshot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodePoseSnapshot

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodePoseSnapshot

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodePoseSnapshot
  }
}

public open external class RandomPlayerSequenceEntry {
  @JsName("Sequence")
  public open var sequence: AnimSequence

  @JsName("ChanceToPlay")
  public open var chanceToPlay: Number

  @JsName("MinLoopCount")
  public open var minLoopCount: Number

  @JsName("MaxLoopCount")
  public open var maxLoopCount: Number

  @JsName("MinPlayRate")
  public open var minPlayRate: Number

  @JsName("MaxPlayRate")
  public open var maxPlayRate: Number

  @JsName("BlendIn")
  public open var blendIn: AlphaBlend

  public open fun clone(): RandomPlayerSequenceEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RandomPlayerSequenceEntry

    @JsName("C")
    public fun copy(other: Any): RandomPlayerSequenceEntry
  }
}

@JsName("AnimNode_RandomPlayer")
public open external class AnimNodeRandomPlayer : AnimNodeBase {
  @JsName("Entries")
  public open var entries: Array<RandomPlayerSequenceEntry>

  @JsName("bShuffleMode")
  public open var shuffleMode: Boolean

  public override fun clone(): AnimNodeRandomPlayer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeRandomPlayer

    @JsName("C")
    public fun copy(other: Any): AnimNodeRandomPlayer
  }
}

@JsName("AnimGraphNode_RandomPlayer")
public open external class AnimGraphNodeRandomPlayer(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeRandomPlayer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeRandomPlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeRandomPlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeRandomPlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeRandomPlayer

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeRandomPlayer

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeRandomPlayer
  }
}

@JsName("AnimNode_ResetRoot")
public open external class AnimNodeResetRoot : AnimNodeSkeletalControlBase {
  public override fun clone(): AnimNodeResetRoot

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeResetRoot

    @JsName("C")
    public fun copy(other: Any): AnimNodeResetRoot
  }
}

@JsName("AnimGraphNode_ResetRoot")
public open external class AnimGraphNodeResetRoot(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeResetRoot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeResetRoot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeResetRoot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeResetRoot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeResetRoot

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeResetRoot

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeResetRoot
  }
}

public open external class SimSpaceSettings {
  @JsName("MasterAlpha")
  public open var masterAlpha: Number

  @JsName("VelocityScaleZ")
  public open var velocityScaleZ: Number

  @JsName("MaxLinearVelocity")
  public open var maxLinearVelocity: Number

  @JsName("MaxAngularVelocity")
  public open var maxAngularVelocity: Number

  @JsName("MaxLinearAcceleration")
  public open var maxLinearAcceleration: Number

  @JsName("MaxAngularAcceleration")
  public open var maxAngularAcceleration: Number

  @JsName("ExternalLinearDrag")
  public open var externalLinearDrag: Number

  @JsName("ExternalLinearDragV")
  public open var externalLinearDragV: Vector

  @JsName("ExternalLinearVelocity")
  public open var externalLinearVelocity: Vector

  @JsName("ExternalAngularVelocity")
  public open var externalAngularVelocity: Vector

  public open fun clone(): SimSpaceSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SimSpaceSettings

    @JsName("C")
    public fun copy(other: Any): SimSpaceSettings
  }
}

@JsName("ESimulationSpace")
public external object SimulationSpace {
  public var ComponentSpace: String

  public var WorldSpace: String

  public var BaseBoneSpace: String

  @JsName("ESimulationSpace_MAX")
  public var Max: String
}

@JsName("AnimNode_RigidBody")
public open external class AnimNodeRigidBody : AnimNodeSkeletalControlBase {
  @JsName("OverridePhysicsAsset")
  public open var overridePhysicsAsset: PhysicsAsset

  @JsName("OverrideWorldGravity")
  public open var overrideWorldGravity: Vector

  @JsName("ExternalForce")
  public open var externalForce: Vector

  @JsName("ComponentLinearAccScale")
  public open var componentLinearAccScale: Vector

  @JsName("ComponentLinearVelScale")
  public open var componentLinearVelScale: Vector

  @JsName("ComponentAppliedLinearAccClamp")
  public open var componentAppliedLinearAccClamp: Vector

  @JsName("SimSpaceSettings")
  public open var simSpaceSettings: SimSpaceSettings

  @JsName("CachedBoundsScale")
  public open var cachedBoundsScale: Number

  @JsName("BaseBoneRef")
  public open var baseBoneRef: BoneReference

  @JsName("OverlapChannel")
  public open var overlapChannel: String

  @JsName("SimulationSpace")
  public open var simulationSpace: String

  @JsName("bForceDisableCollisionBetweenConstraintBodies")
  public open var forceDisableCollisionBetweenConstraintBodies: Boolean

  @JsName("bEnableWorldGeometry")
  public open var enableWorldGeometry: Boolean

  @JsName("bOverrideWorldGravity")
  public open var isOverrideWorldGravity: Boolean

  @JsName("bTransferBoneVelocities")
  public open var transferBoneVelocities: Boolean

  @JsName("bFreezeIncomingPoseOnStart")
  public open var freezeIncomingPoseOnStart: Boolean

  @JsName("bClampLinearTranslationLimitToRefPose")
  public open var clampLinearTranslationLimitToRefPose: Boolean

  @JsName("WorldSpaceMinimumScale")
  public open var worldSpaceMinimumScale: Number

  @JsName("EvaluationResetTime")
  public open var evaluationResetTime: Number

  @JsName("bComponentSpaceSimulation")
  public open var componentSpaceSimulation: Boolean

  public override fun clone(): AnimNodeRigidBody

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeRigidBody

    @JsName("C")
    public fun copy(other: Any): AnimNodeRigidBody
  }
}

@JsName("AnimGraphNode_RigidBody")
public open external class AnimGraphNodeRigidBody(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeRigidBody

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeRigidBody

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeRigidBody

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeRigidBody

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeRigidBody

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeRigidBody

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeRigidBody
  }
}

@JsName("AnimGraphNode_Root")
public open external class AnimGraphNodeRoot(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeRoot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeRoot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeRoot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeRoot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeRoot

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeRoot

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeRoot
  }
}

@JsName("AnimNode_RotateRootBone")
public open external class AnimNodeRotateRootBone : AnimNodeBase {
  @JsName("BasePose")
  public open var basePose: PoseLink

  @JsName("Pitch")
  public open var pitch: Number

  @JsName("Yaw")
  public open var yaw: Number

  @JsName("PitchScaleBiasClamp")
  public open var pitchScaleBiasClamp: InputScaleBiasClamp

  @JsName("YawScaleBiasClamp")
  public open var yawScaleBiasClamp: InputScaleBiasClamp

  @JsName("MeshToComponent")
  public open var meshToComponent: Rotator

  public override fun clone(): AnimNodeRotateRootBone

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeRotateRootBone

    @JsName("C")
    public fun copy(other: Any): AnimNodeRotateRootBone
  }
}

@JsName("AnimGraphNode_RotateRootBone")
public open external class AnimGraphNodeRotateRootBone(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeRotateRootBone

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeRotateRootBone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeRotateRootBone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeRotateRootBone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeRotateRootBone

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeRotateRootBone

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeRotateRootBone
  }
}

@JsName("AnimNode_RotationMultiplier")
public open external class AnimNodeRotationMultiplier : AnimNodeSkeletalControlBase {
  @JsName("TargetBone")
  public open var targetBone: BoneReference

  @JsName("SourceBone")
  public open var sourceBone: BoneReference

  @JsName("Multiplier")
  public open var multiplier: Number

  @JsName("RotationAxisToRefer")
  public open var rotationAxisToRefer: String

  @JsName("bIsAdditive")
  public open var isAdditive: Boolean

  public override fun clone(): AnimNodeRotationMultiplier

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeRotationMultiplier

    @JsName("C")
    public fun copy(other: Any): AnimNodeRotationMultiplier
  }
}

@JsName("AnimGraphNode_RotationMultiplier")
public open external class AnimGraphNodeRotationMultiplier(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeRotationMultiplier

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeRotationMultiplier

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeRotationMultiplier

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeRotationMultiplier

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeRotationMultiplier

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeRotationMultiplier

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeRotationMultiplier
  }
}

@JsName("AnimNode_RotationOffsetBlendSpace")
public open external class AnimNodeRotationOffsetBlendSpace : AnimNodeBlendSpacePlayer {
  @JsName("BasePose")
  public open var basePose: PoseLink

  @JsName("LODThreshold")
  public open var lodThreshold: Number

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("AlphaBoolBlend")
  public open var alphaBoolBlend: InputAlphaBoolBlend

  @JsName("AlphaCurveName")
  public open var alphaCurveName: String

  @JsName("AlphaScaleBiasClamp")
  public open var alphaScaleBiasClamp: InputScaleBiasClamp

  @JsName("AlphaInputType")
  public open var alphaInputType: String

  @JsName("bAlphaBoolEnabled")
  public open var alphaBoolEnabled: Boolean

  public override fun clone(): AnimNodeRotationOffsetBlendSpace

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeRotationOffsetBlendSpace

    @JsName("C")
    public fun copy(other: Any): AnimNodeRotationOffsetBlendSpace
  }
}

@JsName("AnimGraphNode_RotationOffsetBlendSpace")
public open external class AnimGraphNodeRotationOffsetBlendSpace(
  outer: UObject,
) : AnimGraphNodeBlendSpaceBase {
  @JsName("UNode")
  public open var uNode: AnimNodeRotationOffsetBlendSpace

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeRotationOffsetBlendSpace

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeRotationOffsetBlendSpace

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeRotationOffsetBlendSpace

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeRotationOffsetBlendSpace

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeRotationOffsetBlendSpace

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeRotationOffsetBlendSpace
  }
}

@JsName("AnimNode_RotationOffsetBlendSpaceGraph")
public open external class AnimNodeRotationOffsetBlendSpaceGraph : AnimNodeBlendSpaceGraphBase {
  @JsName("BasePose")
  public open var basePose: PoseLink

  @JsName("LODThreshold")
  public open var lodThreshold: Number

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("AlphaBoolBlend")
  public open var alphaBoolBlend: InputAlphaBoolBlend

  @JsName("AlphaCurveName")
  public open var alphaCurveName: String

  @JsName("AlphaScaleBiasClamp")
  public open var alphaScaleBiasClamp: InputScaleBiasClamp

  @JsName("AlphaInputType")
  public open var alphaInputType: String

  @JsName("bAlphaBoolEnabled")
  public open var alphaBoolEnabled: Boolean

  public override fun clone(): AnimNodeRotationOffsetBlendSpaceGraph

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeRotationOffsetBlendSpaceGraph

    @JsName("C")
    public fun copy(other: Any): AnimNodeRotationOffsetBlendSpaceGraph
  }
}

@JsName("AnimGraphNode_RotationOffsetBlendSpaceGraph")
public open external class AnimGraphNodeRotationOffsetBlendSpaceGraph(
  outer: UObject,
) : AnimGraphNodeBlendSpaceGraphBase {
  @JsName("UNode")
  public open var uNode: AnimNodeRotationOffsetBlendSpaceGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeRotationOffsetBlendSpaceGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        AnimGraphNodeRotationOffsetBlendSpaceGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeRotationOffsetBlendSpaceGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeRotationOffsetBlendSpaceGraph

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeRotationOffsetBlendSpaceGraph

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeRotationOffsetBlendSpaceGraph
  }
}

@JsName("AnimNode_SaveCachedPose")
public open external class AnimNodeSaveCachedPose : AnimNodeBase {
  @JsName("Pose")
  public open var pose: PoseLink

  @JsName("CachePoseName")
  public open var cachePoseName: String

  public override fun clone(): AnimNodeSaveCachedPose

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSaveCachedPose

    @JsName("C")
    public fun copy(other: Any): AnimNodeSaveCachedPose
  }
}

@JsName("AnimGraphNode_SaveCachedPose")
public open external class AnimGraphNodeSaveCachedPose(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeSaveCachedPose

  @JsName("CacheName")
  public open var cacheName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeSaveCachedPose

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeSaveCachedPose

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeSaveCachedPose

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeSaveCachedPose

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeSaveCachedPose

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeSaveCachedPose
  }
}

@JsName("EScaleChainInitialLength")
public external object ScaleChainInitialLength {
  public var FixedDefaultLengthValue: String

  public var Distance: String

  public var ChainLength: String

  @JsName("EScaleChainInitialLength_MAX")
  public var Max: String
}

@JsName("AnimNode_ScaleChainLength")
public open external class AnimNodeScaleChainLength : AnimNodeBase {
  @JsName("InputPose")
  public open var inputPose: PoseLink

  @JsName("DefaultChainLength")
  public open var defaultChainLength: Number

  @JsName("ChainStartBone")
  public open var chainStartBone: BoneReference

  @JsName("ChainEndBone")
  public open var chainEndBone: BoneReference

  @JsName("TargetLocation")
  public open var targetLocation: Vector

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("ChainInitialLength")
  public open var chainInitialLength: String

  public override fun clone(): AnimNodeScaleChainLength

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeScaleChainLength

    @JsName("C")
    public fun copy(other: Any): AnimNodeScaleChainLength
  }
}

@JsName("AnimGraphNode_ScaleChainLength")
public open external class AnimGraphNodeScaleChainLength(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeScaleChainLength

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeScaleChainLength

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeScaleChainLength

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeScaleChainLength

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeScaleChainLength

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeScaleChainLength

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeScaleChainLength
  }
}

@JsName("AnimNode_SequenceEvaluatorBase")
public open external class AnimNodeSequenceEvaluatorBase : AnimNodeAssetPlayerBase {
  public override fun clone(): AnimNodeSequenceEvaluatorBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSequenceEvaluatorBase

    @JsName("C")
    public fun copy(other: Any): AnimNodeSequenceEvaluatorBase
  }
}

@JsName("ESequenceEvalReinit")
public external object SequenceEvalReinit {
  public var NoReset: String

  public var StartPosition: String

  public var ExplicitTime: String

  @JsName("ESequenceEvalReinit_MAX")
  public var Max: String
}

@JsName("AnimNode_SequenceEvaluator")
public open external class AnimNodeSequenceEvaluator : AnimNodeSequenceEvaluatorBase {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupRole")
  public open var groupRole: String

  @JsName("Method")
  public open var method: String

  @JsName("bIgnoreForRelevancyTest")
  public open var ignoreForRelevancyTest: Boolean

  @JsName("Sequence")
  public open var sequence: AnimSequenceBase

  @JsName("ExplicitTime")
  public open var explicitTime: Number

  @JsName("bShouldLoop")
  public open var shouldLoop: Boolean

  @JsName("bTeleportToExplicitTime")
  public open var teleportToExplicitTime: Boolean

  @JsName("ReinitializationBehavior")
  public open var reinitializationBehavior: String

  @JsName("StartPosition")
  public open var startPosition: Number

  public override fun clone(): AnimNodeSequenceEvaluator

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSequenceEvaluator

    @JsName("C")
    public fun copy(other: Any): AnimNodeSequenceEvaluator
  }
}

@JsName("AnimGraphNode_SequenceEvaluator")
public open external class AnimGraphNodeSequenceEvaluator(
  outer: UObject,
) : AnimGraphNodeAssetPlayerBase {
  @JsName("UNode")
  public open var uNode: AnimNodeSequenceEvaluator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeSequenceEvaluator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeSequenceEvaluator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeSequenceEvaluator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeSequenceEvaluator

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeSequenceEvaluator

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeSequenceEvaluator
  }
}

public open external class InputScaleBiasClampState {
  public open fun clone(): InputScaleBiasClampState

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputScaleBiasClampState

    @JsName("C")
    public fun copy(other: Any): InputScaleBiasClampState
  }
}

@JsName("AnimNode_SequencePlayerBase")
public open external class AnimNodeSequencePlayerBase : AnimNodeAssetPlayerBase {
  @JsName("PlayRateScaleBiasClampState")
  public open var playRateScaleBiasClampState: InputScaleBiasClampState

  public override fun clone(): AnimNodeSequencePlayerBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSequencePlayerBase

    @JsName("C")
    public fun copy(other: Any): AnimNodeSequencePlayerBase
  }
}

public open external class InputScaleBiasClampConstants {
  @JsName("bMapRange")
  public open var mapRange: Boolean

  @JsName("bClampResult")
  public open var clampResult: Boolean

  @JsName("bInterpResult")
  public open var interpResult: Boolean

  @JsName("InRange")
  public open var inRange: InputRange

  @JsName("OutRange")
  public open var outRange: InputRange

  @JsName("Scale")
  public open var scale: Number

  @JsName("Bias")
  public open var bias: Number

  @JsName("ClampMin")
  public open var clampMin: Number

  @JsName("ClampMax")
  public open var clampMax: Number

  @JsName("InterpSpeedIncreasing")
  public open var interpSpeedIncreasing: Number

  @JsName("InterpSpeedDecreasing")
  public open var interpSpeedDecreasing: Number

  public open fun clone(): InputScaleBiasClampConstants

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputScaleBiasClampConstants

    @JsName("C")
    public fun copy(other: Any): InputScaleBiasClampConstants
  }
}

@JsName("AnimNode_SequencePlayer")
public open external class AnimNodeSequencePlayer : AnimNodeSequencePlayerBase {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupRole")
  public open var groupRole: String

  @JsName("Method")
  public open var method: String

  @JsName("bIgnoreForRelevancyTest")
  public open var ignoreForRelevancyTest: Boolean

  @JsName("Sequence")
  public open var sequence: AnimSequenceBase

  @JsName("PlayRateBasis")
  public open var playRateBasis: Number

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("PlayRateScaleBiasClampConstants")
  public open var playRateScaleBiasClampConstants: InputScaleBiasClampConstants

  @JsName("PlayRateScaleBiasClamp")
  public open var playRateScaleBiasClamp: InputScaleBiasClamp

  @JsName("StartPosition")
  public open var startPosition: Number

  @JsName("bLoopAnimation")
  public open var loopAnimation: Boolean

  @JsName("bStartFromMatchingPose")
  public open var startFromMatchingPose: Boolean

  public override fun clone(): AnimNodeSequencePlayer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSequencePlayer

    @JsName("C")
    public fun copy(other: Any): AnimNodeSequencePlayer
  }
}

@JsName("AnimGraphNode_SequencePlayer")
public open external class AnimGraphNodeSequencePlayer(
  outer: UObject,
) : AnimGraphNodeAssetPlayerBase {
  @JsName("UNode")
  public open var uNode: AnimNodeSequencePlayer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeSequencePlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeSequencePlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeSequencePlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeSequencePlayer

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeSequencePlayer

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeSequencePlayer
  }
}

@JsName("AnimNode_Slot")
public open external class AnimNodeSlot : AnimNodeBase {
  @JsName("Source")
  public open var source: PoseLink

  @JsName("SlotName")
  public open var slotName: String

  @JsName("bAlwaysUpdateSourcePose")
  public open var alwaysUpdateSourcePose: Boolean

  public override fun clone(): AnimNodeSlot

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSlot

    @JsName("C")
    public fun copy(other: Any): AnimNodeSlot
  }
}

@JsName("AnimGraphNode_Slot")
public open external class AnimGraphNodeSlot(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeSlot

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeSlot

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeSlot
  }
}

@JsName("ESplineBoneAxis")
public external object SplineBoneAxis {
  public var None: String

  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  @JsName("ESplineBoneAxis_MAX")
  public var Max: String
}

@JsName("AnimNode_SplineIK")
public open external class AnimNodeSplineIk : AnimNodeSkeletalControlBase {
  @JsName("StartBone")
  public open var startBone: BoneReference

  @JsName("EndBone")
  public open var endBone: BoneReference

  @JsName("BoneAxis")
  public open var boneAxis: String

  @JsName("bAutoCalculateSpline")
  public open var autoCalculateSpline: Boolean

  @JsName("PointCount")
  public open var pointCount: Number

  @JsName("ControlPoints")
  public open var controlPoints: Array<Transform>

  @JsName("Roll")
  public open var roll: Number

  @JsName("TwistStart")
  public open var twistStart: Number

  @JsName("TwistEnd")
  public open var twistEnd: Number

  @JsName("TwistBlend")
  public open var twistBlend: AlphaBlend

  @JsName("Stretch")
  public open var stretch: Number

  @JsName("Offset")
  public open var offset: Number

  public override fun clone(): AnimNodeSplineIk

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSplineIk

    @JsName("C")
    public fun copy(other: Any): AnimNodeSplineIk
  }
}

@JsName("AnimGraphNode_SplineIK")
public open external class AnimGraphNodeSplineIk(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeSplineIk

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeSplineIk

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeSplineIk

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeSplineIk

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeSplineIk

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeSplineIk

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeSplineIk
  }
}

@JsName("AnimNode_SpringBone")
public open external class AnimNodeSpringBone : AnimNodeSkeletalControlBase {
  @JsName("SpringBone")
  public open var springBone: BoneReference

  @JsName("MaxDisplacement")
  public open var maxDisplacement: Number

  @JsName("SpringStiffness")
  public open var springStiffness: Number

  @JsName("SpringDamping")
  public open var springDamping: Number

  @JsName("ErrorResetThresh")
  public open var errorResetThresh: Number

  @JsName("bNoZSpring")
  public open var noZSpring: Boolean

  @JsName("bLimitDisplacement")
  public open var limitDisplacement: Boolean

  @JsName("bTranslateX")
  public open var translateX: Boolean

  @JsName("bTranslateY")
  public open var translateY: Boolean

  @JsName("bTranslateZ")
  public open var translateZ: Boolean

  @JsName("bRotateX")
  public open var rotateX: Boolean

  @JsName("bRotateY")
  public open var rotateY: Boolean

  @JsName("bRotateZ")
  public open var rotateZ: Boolean

  public override fun clone(): AnimNodeSpringBone

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSpringBone

    @JsName("C")
    public fun copy(other: Any): AnimNodeSpringBone
  }
}

@JsName("AnimGraphNode_SpringBone")
public open external class AnimGraphNodeSpringBone(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeSpringBone

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeSpringBone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeSpringBone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeSpringBone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeSpringBone

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeSpringBone

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeSpringBone
  }
}

@JsName("AnimNode_StateMachine")
public open external class AnimNodeStateMachine : AnimNodeBase {
  @JsName("StateMachineIndexInClass")
  public open var stateMachineIndexInClass: Number

  @JsName("MaxTransitionsPerFrame")
  public open var maxTransitionsPerFrame: Number

  @JsName("bSkipFirstUpdateTransition")
  public open var skipFirstUpdateTransition: Boolean

  @JsName("bReinitializeOnBecomingRelevant")
  public open var reinitializeOnBecomingRelevant: Boolean

  @JsName("bCreateNotifyMetaData")
  public open var createNotifyMetaData: Boolean

  @JsName("bAllowConduitEntryStates")
  public open var allowConduitEntryStates: Boolean

  public override fun clone(): AnimNodeStateMachine

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeStateMachine

    @JsName("C")
    public fun copy(other: Any): AnimNodeStateMachine
  }
}

@JsName("AnimGraphNode_StateMachine")
public open external class AnimGraphNodeStateMachine(
  outer: UObject,
) : AnimGraphNodeStateMachineBase {
  @JsName("UNode")
  public open var uNode: AnimNodeStateMachine

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeStateMachine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeStateMachine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeStateMachine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeStateMachine

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeStateMachine

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeStateMachine
  }
}

@JsName("AnimNode_Sync")
public open external class AnimNodeSync : AnimNodeBase {
  @JsName("Source")
  public open var source: PoseLink

  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupRole")
  public open var groupRole: String

  public override fun clone(): AnimNodeSync

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeSync

    @JsName("C")
    public fun copy(other: Any): AnimNodeSync
  }
}

@JsName("AnimGraphNode_Sync")
public open external class AnimGraphNodeSync(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeSync

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeSync

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeSync

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeSync

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeSync

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeSync

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeSync
  }
}

public open external class RotationLimit {
  @JsName("LimitMin")
  public open var limitMin: Vector

  @JsName("LimitMax")
  public open var limitMax: Vector

  public open fun clone(): RotationLimit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RotationLimit

    @JsName("C")
    public fun copy(other: Any): RotationLimit
  }
}

@JsName("AnimNode_Trail")
public open external class AnimNodeTrail : AnimNodeSkeletalControlBase {
  @JsName("TrailBone")
  public open var trailBone: BoneReference

  @JsName("ChainLength")
  public open var chainLength: Number

  @JsName("ChainBoneAxis")
  public open var chainBoneAxis: String

  @JsName("bInvertChainBoneAxis")
  public open var invertChainBoneAxis: Boolean

  @JsName("bLimitStretch")
  public open var limitStretch: Boolean

  @JsName("bLimitRotation")
  public open var limitRotation: Boolean

  @JsName("bUsePlanarLimit")
  public open var usePlanarLimit: Boolean

  @JsName("bActorSpaceFakeVel")
  public open var actorSpaceFakeVel: Boolean

  @JsName("bReorientParentToChild")
  public open var reorientParentToChild: Boolean

  @JsName("bEnableDebug")
  public open var enableDebug: Boolean

  @JsName("bShowBaseMotion")
  public open var showBaseMotion: Boolean

  @JsName("bShowTrailLocation")
  public open var showTrailLocation: Boolean

  @JsName("bShowLimit")
  public open var showLimit: Boolean

  @JsName("DebugLifeTime")
  public open var debugLifeTime: Number

  @JsName("TrailRelaxation")
  public open var trailRelaxation: Number

  @JsName("MaxDeltaTime")
  public open var maxDeltaTime: Number

  @JsName("RelaxationSpeedScale")
  public open var relaxationSpeedScale: Number

  @JsName("TrailRelaxationSpeed")
  public open var trailRelaxationSpeed: RuntimeFloatCurve

  @JsName("RelaxationSpeedScaleInputProcessor")
  public open var relaxationSpeedScaleInputProcessor: InputScaleBiasClamp

  @JsName("RotationLimits")
  public open var rotationLimits: Array<RotationLimit>

  @JsName("RotationOffsets")
  public open var rotationOffsets: Array<Vector>

  @JsName("PlanarLimits")
  public open var planarLimits: Array<AnimPhysPlanarLimit>

  @JsName("StretchLimit")
  public open var stretchLimit: Number

  @JsName("FakeVelocity")
  public open var fakeVelocity: Vector

  @JsName("BaseJoint")
  public open var baseJoint: BoneReference

  @JsName("TrailBoneRotationBlendAlpha")
  public open var trailBoneRotationBlendAlpha: Number

  @JsName("LastBoneRotationAnimAlphaBlend")
  public open var lastBoneRotationAnimAlphaBlend: Number

  public override fun clone(): AnimNodeTrail

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeTrail

    @JsName("C")
    public fun copy(other: Any): AnimNodeTrail
  }
}

@JsName("AnimGraphNode_Trail")
public open external class AnimGraphNodeTrail(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeTrail

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeTrail

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeTrail

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeTrail

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeTrail

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeTrail

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeTrail
  }
}

@JsName("EEvaluatorDataSource")
public external object EvaluatorDataSource {
  @JsName("EDS_SourcePose")
  public var SourcePose: String

  @JsName("EDS_DestinationPose")
  public var DestinationPose: String

  @JsName("EDS_MAX")
  public var Max: String
}

@JsName("EEvaluatorMode")
public external object EvaluatorMode {
  @JsName("EM_Standard")
  public var Standard: String

  @JsName("EM_Freeze")
  public var Freeze: String

  @JsName("EM_DelayedFreeze")
  public var DelayedFreeze: String

  @JsName("EM_MAX")
  public var Max: String
}

@JsName("AnimNode_TransitionPoseEvaluator")
public open external class AnimNodeTransitionPoseEvaluator : AnimNodeBase {
  @JsName("FramesToCachePose")
  public open var framesToCachePose: Number

  @JsName("DataSource")
  public open var dataSource: String

  @JsName("EvaluatorMode")
  public open var evaluatorMode: String

  public override fun clone(): AnimNodeTransitionPoseEvaluator

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeTransitionPoseEvaluator

    @JsName("C")
    public fun copy(other: Any): AnimNodeTransitionPoseEvaluator
  }
}

@JsName("AnimGraphNode_TransitionPoseEvaluator")
public open external class AnimGraphNodeTransitionPoseEvaluator(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeTransitionPoseEvaluator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeTransitionPoseEvaluator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeTransitionPoseEvaluator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeTransitionPoseEvaluator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeTransitionPoseEvaluator

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeTransitionPoseEvaluator

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeTransitionPoseEvaluator
  }
}

public open external class ReferenceBoneFrame {
  public open var bone: BoneReference

  @JsName("Axis")
  public open var axis: Axis

  public open fun clone(): ReferenceBoneFrame

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ReferenceBoneFrame

    @JsName("C")
    public fun copy(other: Any): ReferenceBoneFrame
  }
}

public open external class AnimCurveParam {
  @JsName("Name")
  public open var name: String

  public open fun clone(): AnimCurveParam

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimCurveParam

    @JsName("C")
    public fun copy(other: Any): AnimCurveParam
  }
}

@JsName("AnimNode_TwistCorrectiveNode")
public open external class AnimNodeTwistCorrectiveNode : AnimNodeSkeletalControlBase {
  @JsName("BaseFrame")
  public open var baseFrame: ReferenceBoneFrame

  @JsName("TwistFrame")
  public open var twistFrame: ReferenceBoneFrame

  @JsName("TwistPlaneNormalAxis")
  public open var twistPlaneNormalAxis: Axis

  @JsName("RangeMax")
  public open var rangeMax: Number

  @JsName("RemappedMin")
  public open var remappedMin: Number

  @JsName("RemappedMax")
  public open var remappedMax: Number

  @JsName("Curve")
  public open var curve: AnimCurveParam

  public override fun clone(): AnimNodeTwistCorrectiveNode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeTwistCorrectiveNode

    @JsName("C")
    public fun copy(other: Any): AnimNodeTwistCorrectiveNode
  }
}

@JsName("AnimGraphNode_TwistCorrectiveNode")
public open external class AnimGraphNodeTwistCorrectiveNode(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeTwistCorrectiveNode

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeTwistCorrectiveNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeTwistCorrectiveNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeTwistCorrectiveNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeTwistCorrectiveNode

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeTwistCorrectiveNode

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeTwistCorrectiveNode
  }
}

@JsName("AnimNode_TwoBoneIK")
public open external class AnimNodeTwoBoneIk : AnimNodeSkeletalControlBase {
  @JsName("IKBone")
  public open var ikBone: BoneReference

  @JsName("StartStretchRatio")
  public open var startStretchRatio: Number

  @JsName("MaxStretchScale")
  public open var maxStretchScale: Number

  @JsName("StretchLimits")
  public open var stretchLimits: Vector2d

  @JsName("bNoTwist")
  public open var noTwist: Boolean

  @JsName("JointTargetSpaceBoneName")
  public open var jointTargetSpaceBoneName: String

  @JsName("EffectorSpaceBoneName")
  public open var effectorSpaceBoneName: String

  @JsName("EffectorLocation")
  public open var effectorLocation: Vector

  @JsName("EffectorTarget")
  public open var effectorTarget: BoneSocketTarget

  @JsName("JointTargetLocation")
  public open var jointTargetLocation: Vector

  @JsName("JointTarget")
  public open var jointTarget: BoneSocketTarget

  @JsName("TwistAxis")
  public open var twistAxis: Axis

  @JsName("EffectorLocationSpace")
  public open var effectorLocationSpace: String

  @JsName("JointTargetLocationSpace")
  public open var jointTargetLocationSpace: String

  @JsName("bAllowStretching")
  public open var allowStretching: Boolean

  @JsName("bTakeRotationFromEffectorSpace")
  public open var takeRotationFromEffectorSpace: Boolean

  @JsName("bMaintainEffectorRelRot")
  public open var maintainEffectorRelRot: Boolean

  @JsName("bAllowTwist")
  public open var allowTwist: Boolean

  public override fun clone(): AnimNodeTwoBoneIk

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeTwoBoneIk

    @JsName("C")
    public fun copy(other: Any): AnimNodeTwoBoneIk
  }
}

@JsName("AnimGraphNode_TwoBoneIK")
public open external class AnimGraphNodeTwoBoneIk(
  outer: UObject,
) : AnimGraphNodeSkeletalControlBase {
  @JsName("UNode")
  public open var uNode: AnimNodeTwoBoneIk

  @JsName("bEnableDebugDraw")
  public open var enableDebugDraw: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeTwoBoneIk

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeTwoBoneIk

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeTwoBoneIk

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeTwoBoneIk

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeTwoBoneIk

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeTwoBoneIk
  }
}

@JsName("AnimNode_TwoWayBlend")
public open external class AnimNodeTwoWayBlend : AnimNodeBase {
  @JsName("A")
  public open var a: PoseLink

  @JsName("B")
  public open var b: PoseLink

  @JsName("AlphaInputType")
  public open var alphaInputType: String

  @JsName("bAlphaBoolEnabled")
  public open var alphaBoolEnabled: Boolean

  @JsName("bResetChildOnActivation")
  public open var resetChildOnActivation: Boolean

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("AlphaScaleBias")
  public open var alphaScaleBias: InputScaleBias

  @JsName("AlphaBoolBlend")
  public open var alphaBoolBlend: InputAlphaBoolBlend

  @JsName("AlphaCurveName")
  public open var alphaCurveName: String

  @JsName("AlphaScaleBiasClamp")
  public open var alphaScaleBiasClamp: InputScaleBiasClamp

  public override fun clone(): AnimNodeTwoWayBlend

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeTwoWayBlend

    @JsName("C")
    public fun copy(other: Any): AnimNodeTwoWayBlend
  }
}

@JsName("AnimGraphNode_TwoWayBlend")
public open external class AnimGraphNodeTwoWayBlend(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("BlendNode")
  public open var blendNode: AnimNodeTwoWayBlend

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeTwoWayBlend

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeTwoWayBlend

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeTwoWayBlend

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeTwoWayBlend

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeTwoWayBlend

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeTwoWayBlend
  }
}

@JsName("AnimNode_UseCachedPose")
public open external class AnimNodeUseCachedPose : AnimNodeBase {
  @JsName("LinkToCachingNode")
  public open var linkToCachingNode: PoseLink

  @JsName("CachePoseName")
  public open var cachePoseName: String

  public override fun clone(): AnimNodeUseCachedPose

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeUseCachedPose

    @JsName("C")
    public fun copy(other: Any): AnimNodeUseCachedPose
  }
}

@JsName("AnimGraphNode_UseCachedPose")
public open external class AnimGraphNodeUseCachedPose(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeUseCachedPose

  @JsName("SaveCachedPoseNode")
  public open var saveCachedPoseNode: Any

  @JsName("NameOfCache")
  public open var nameOfCache: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeUseCachedPose

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeUseCachedPose

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeUseCachedPose

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeUseCachedPose

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeUseCachedPose

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeUseCachedPose
  }
}

public open external class AnimPreviewAttacheInstance(
  outer: UObject,
) : AnimInstance {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimPreviewAttacheInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimPreviewAttacheInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimPreviewAttacheInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimPreviewAttacheInstance

    @JsName("C")
    public fun copy(other: UObject): AnimPreviewAttacheInstance

    @JsName("C")
    public fun copy(other: Any): AnimPreviewAttacheInstance
  }
}

public open external class AnimSingleNodeInstance(
  outer: UObject,
) : AnimInstance {
  @JsName("CurrentAsset")
  public open var currentAsset: AnimationAsset

  @JsName("PostEvaluateAnimEvent")
  public open var postEvaluateAnimEvent: UnrealEngineDelegate<() -> Unit>

  @JsName("StopAnim")
  public open fun stopAnim(): Unit

  @JsName("SetReverse")
  public open fun setReverse(inReverse: Boolean): Unit

  @JsName("SetPreviewCurveOverride")
  public open fun setPreviewCurveOverride(
    poseName: String,
    value: Number,
    removeIfZero: Boolean,
  ): Unit

  @JsName("SetPositionWithPreviousTime")
  public open fun setPositionWithPreviousTime(
    inPosition: Number,
    inPreviousTime: Number,
    fireNotifies: Boolean,
  ): Unit

  @JsName("SetPosition")
  public open fun setPosition(inPosition: Number, fireNotifies: Boolean): Unit

  @JsName("SetPlayRate")
  public open fun setPlayRate(inPlayRate: Number): Unit

  @JsName("SetPlaying")
  public open fun setPlaying(isPlaying: Boolean): Unit

  @JsName("SetMirrorDataTable")
  public open fun setMirrorDataTable(mirrorDataTable: MirrorDataTable): Unit

  @JsName("SetLooping")
  public open fun setLooping(isLooping: Boolean): Unit

  @JsName("SetBlendSpacePosition")
  public open fun setBlendSpacePosition(inPosition: Vector): Unit

  @JsName("SetAnimationAsset")
  public open fun setAnimationAsset(
    newAsset: AnimationAsset,
    isLooping: Boolean,
    inPlayRate: Number,
  ): Unit

  @JsName("PlayAnim")
  public open fun playAnim(
    isLooping: Boolean,
    inPlayRate: Number,
    inStartPosition: Number,
  ): Unit

  @JsName("GetMirrorDataTable")
  public open fun getMirrorDataTable(): MirrorDataTable

  @JsName("GetLength")
  public open fun getLength(): Number

  @JsName("GetAnimationAsset")
  public open fun getAnimationAsset(): AnimationAsset

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSingleNodeInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSingleNodeInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSingleNodeInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSingleNodeInstance

    @JsName("C")
    public fun copy(other: UObject): AnimSingleNodeInstance

    @JsName("C")
    public fun copy(other: Any): AnimSingleNodeInstance
  }
}

@JsName("EMontagePreviewType")
public external object MontagePreviewType {
  @JsName("EMPT_Normal")
  public var Normal: String

  @JsName("EMPT_AllSections")
  public var AllSections: String

  @JsName("EMPT_MAX")
  public var Max: String
}

public open external class AnimPreviewInstance(
  outer: UObject,
) : AnimSingleNodeInstance {
  @JsName("MontagePreviewType")
  public open var montagePreviewType: String

  @JsName("MontagePreviewStartSectionIdx")
  public open var montagePreviewStartSectionIdx: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimPreviewInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimPreviewInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimPreviewInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimPreviewInstance

    @JsName("C")
    public fun copy(other: UObject): AnimPreviewInstance

    @JsName("C")
    public fun copy(other: Any): AnimPreviewInstance
  }
}

public open external class AnimStateNodeBase(
  outer: UObject,
) : EdGraphNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStateNodeBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStateNodeBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStateNodeBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStateNodeBase

    @JsName("C")
    public fun copy(other: UObject): AnimStateNodeBase

    @JsName("C")
    public fun copy(other: Any): AnimStateNodeBase
  }
}

public open external class AnimStateAliasNode(
  outer: UObject,
) : AnimStateNodeBase {
  @JsName("bGlobalAlias")
  public open var globalAlias: Boolean

  @JsName("StateAliasName")
  public open var stateAliasName: String

  @JsName("AliasedStateNodes")
  public open var aliasedStateNodes: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStateAliasNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStateAliasNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStateAliasNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStateAliasNode

    @JsName("C")
    public fun copy(other: UObject): AnimStateAliasNode

    @JsName("C")
    public fun copy(other: Any): AnimStateAliasNode
  }
}

public open external class AnimStateConduitNode(
  outer: UObject,
) : AnimStateNodeBase {
  @JsName("BoundGraph")
  public open var boundGraph: EdGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStateConduitNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStateConduitNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStateConduitNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStateConduitNode

    @JsName("C")
    public fun copy(other: UObject): AnimStateConduitNode

    @JsName("C")
    public fun copy(other: Any): AnimStateConduitNode
  }
}

@JsName("EAnimStateType")
public external object AnimStateType {
  @JsName("AST_SingleAnimation")
  public var SingleAnimation: String

  @JsName("AST_BlendGraph")
  public var BlendGraph: String

  @JsName("AST_MAX")
  public var Max: String
}

public open external class AnimStateNode(
  outer: UObject,
) : AnimStateNodeBase {
  @JsName("BoundGraph")
  public open var boundGraph: EdGraph

  @JsName("StateType")
  public open var stateType: String

  @JsName("StateEntered")
  public open var stateEntered: AnimNotifyEvent

  @JsName("StateLeft")
  public open var stateLeft: AnimNotifyEvent

  @JsName("StateFullyBlended")
  public open var stateFullyBlended: AnimNotifyEvent

  @JsName("bAlwaysResetOnEntry")
  public open var alwaysResetOnEntry: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStateNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStateNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStateNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStateNode

    @JsName("C")
    public fun copy(other: UObject): AnimStateNode

    @JsName("C")
    public fun copy(other: Any): AnimStateNode
  }
}

@JsName("ETransitionBlendMode")
public external object TransitionBlendMode {
  @JsName("TBM_Linear")
  public var Linear: String

  @JsName("TBM_Cubic")
  public var Cubic: String

  @JsName("TBM_MAX")
  public var Max: String
}

@JsName("ETransitionLogicType")
public external object TransitionLogicType {
  @JsName("TLT_StandardBlend")
  public var StandardBlend: String

  @JsName("TLT_Inertialization")
  public var Inertialization: String

  @JsName("TLT_Custom")
  public var Custom: String

  @JsName("TLT_MAX")
  public var Max: String
}

public open external class AnimStateTransitionNode(
  outer: UObject,
) : AnimStateNodeBase {
  @JsName("BoundGraph")
  public open var boundGraph: EdGraph

  @JsName("CustomTransitionGraph")
  public open var customTransitionGraph: EdGraph

  @JsName("PriorityOrder")
  public open var priorityOrder: Number

  @JsName("CrossfadeDuration")
  public open var crossfadeDuration: Number

  @JsName("CrossfadeMode")
  public open var crossfadeMode: String

  @JsName("BlendMode")
  public open var blendMode: String

  @JsName("CustomBlendCurve")
  public open var customBlendCurve: CurveFloat

  @JsName("BlendProfile")
  public open var blendProfile: BlendProfile

  @JsName("bAutomaticRuleBasedOnSequencePlayerInState")
  public open var automaticRuleBasedOnSequencePlayerInState: Boolean

  @JsName("SyncGroupNameToRequireValidMarkersRule")
  public open var syncGroupNameToRequireValidMarkersRule: String

  @JsName("LogicType")
  public open var logicType: String

  @JsName("TransitionStart")
  public open var transitionStart: AnimNotifyEvent

  @JsName("TransitionEnd")
  public open var transitionEnd: AnimNotifyEvent

  @JsName("TransitionInterrupt")
  public open var transitionInterrupt: AnimNotifyEvent

  @JsName("Bidirectional")
  public open var bidirectional: Boolean

  @JsName("bSharedRules")
  public open var sharedRules: Boolean

  @JsName("bSharedCrossfade")
  public open var sharedCrossfade: Boolean

  @JsName("SharedRulesName")
  public open var sharedRulesName: String

  @JsName("SharedRulesGuid")
  public open var sharedRulesGuid: Guid

  @JsName("SharedColor")
  public open var sharedColor: LinearColor

  @JsName("SharedCrossfadeName")
  public open var sharedCrossfadeName: String

  @JsName("SharedCrossfadeGuid")
  public open var sharedCrossfadeGuid: Guid

  @JsName("SharedCrossfadeIdx")
  public open var sharedCrossfadeIdx: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStateTransitionNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStateTransitionNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStateTransitionNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStateTransitionNode

    @JsName("C")
    public fun copy(other: UObject): AnimStateTransitionNode

    @JsName("C")
    public fun copy(other: Any): AnimStateTransitionNode
  }
}

public open external class ClassVariableCreator(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClassVariableCreator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClassVariableCreator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClassVariableCreator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClassVariableCreator

    @JsName("C")
    public fun copy(other: UObject): ClassVariableCreator

    @JsName("C")
    public fun copy(other: Any): ClassVariableCreator
  }
}

@JsName("K2Node_AnimGetter")
public open external class K2NodeAnimGetter(
  outer: UObject,
) : K2NodeCallFunction {
  @JsName("SourceNode")
  public open var sourceNode: AnimGraphNodeBase

  @JsName("SourceStateNode")
  public open var sourceStateNode: AnimStateNodeBase

  @JsName("GetterClass")
  public open var getterClass: UnrealEngineClass

  @JsName("SourceAnimBlueprint")
  public open var sourceAnimBlueprint: AnimBlueprint

  @JsName("CachedTitle")
  public open var cachedTitle: String

  @JsName("Contexts")
  public open var contexts: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAnimGetter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAnimGetter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAnimGetter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAnimGetter

    @JsName("C")
    public fun copy(other: UObject): K2NodeAnimGetter

    @JsName("C")
    public fun copy(other: Any): K2NodeAnimGetter
  }
}

@JsName("K2Node_AnimNodeReference")
public open external class K2NodeAnimNodeReference(
  outer: UObject,
) : K2Node {
  @JsName("Tag")
  public open var tag: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAnimNodeReference

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAnimNodeReference

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAnimNodeReference

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAnimNodeReference

    @JsName("C")
    public fun copy(other: UObject): K2NodeAnimNodeReference

    @JsName("C")
    public fun copy(other: Any): K2NodeAnimNodeReference
  }
}

@JsName("K2Node_PlayMontage")
public open external class K2NodePlayMontage(
  outer: UObject,
) : K2NodeBaseAsyncTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodePlayMontage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodePlayMontage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodePlayMontage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodePlayMontage

    @JsName("C")
    public fun copy(other: UObject): K2NodePlayMontage

    @JsName("C")
    public fun copy(other: Any): K2NodePlayMontage
  }
}

@JsName("ETransitionGetter")
public external object TransitionGetter {
  @JsName("AnimationAsset_GetCurrentTime")
  public var AnimationAssetGetCurrentTime: String

  @JsName("AnimationAsset_GetLength")
  public var AnimationAssetGetLength: String

  @JsName("AnimationAsset_GetCurrentTimeFraction")
  public var AnimationAssetGetCurrentTimeFraction: String

  @JsName("AnimationAsset_GetTimeFromEnd")
  public var AnimationAssetGetTimeFromEnd: String

  @JsName("AnimationAsset_GetTimeFromEndFraction")
  public var AnimationAssetGetTimeFromEndFraction: String

  @JsName("CurrentState_ElapsedTime")
  public var CurrentStateElapsedTime: String

  @JsName("CurrentState_GetBlendWeight")
  public var CurrentStateGetBlendWeight: String

  public var CurrentTransitionDuration: String

  @JsName("ArbitraryState_GetBlendWeight")
  public var ArbitraryStateGetBlendWeight: String

  @JsName("ETransitionGetter_MAX")
  public var Max: String
}

@JsName("K2Node_TransitionRuleGetter")
public open external class K2NodeTransitionRuleGetter(
  outer: UObject,
) : K2Node {
  @JsName("GetterType")
  public open var getterType: String

  @JsName("AssociatedAnimAssetPlayerNode")
  public open var associatedAnimAssetPlayerNode: AnimGraphNodeBase

  @JsName("AssociatedStateNode")
  public open var associatedStateNode: AnimStateNode

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeTransitionRuleGetter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeTransitionRuleGetter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeTransitionRuleGetter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeTransitionRuleGetter

    @JsName("C")
    public fun copy(other: UObject): K2NodeTransitionRuleGetter

    @JsName("C")
    public fun copy(other: Any): K2NodeTransitionRuleGetter
  }
}

public open external class AnimationBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationBlueprintLibrary

    @JsName("SetRootMotionLockType")
    public fun setRootMotionLockType(animationSequence: AnimSequence, rootMotionLockType: String):
        Unit

    @JsName("SetRootMotionEnabled")
    public fun setRootMotionEnabled(animationSequence: AnimSequence, enabled: Boolean): Unit

    @JsName("SetRateScale")
    public fun setRateScale(animationSequenceBase: AnimSequenceBase, rateScale: Number): Unit

    @JsName("SetIsRootMotionLockForced")
    public fun setIsRootMotionLockForced(animationSequence: AnimSequence, forced: Boolean): Unit

    @JsName("SetCurveCompressionSettings")
    public fun setCurveCompressionSettings(animationSequence: AnimSequence,
        compressionSettings: AnimCurveCompressionSettings): Unit

    @JsName("SetBoneCompressionSettings")
    public fun setBoneCompressionSettings(animationSequence: AnimSequence,
        compressionSettings: AnimBoneCompressionSettings): Unit

    @JsName("SetAnimationInterpolationType")
    public fun setAnimationInterpolationType(animationSequence: AnimSequence,
        interpolationType: String): Unit

    @JsName("SetAdditiveBasePoseType")
    public fun setAdditiveBasePoseType(animationSequence: AnimSequence,
        additiveBasePoseType: String): Unit

    @JsName("SetAdditiveAnimationType")
    public fun setAdditiveAnimationType(animationSequence: AnimSequence,
        additiveAnimationType: String): Unit

    @JsName("RemoveVirtualBones")
    public fun removeVirtualBones(animationSequence: AnimSequence, virtualBoneNames: Array<String>):
        Unit

    @JsName("RemoveVirtualBone")
    public fun removeVirtualBone(animationSequence: AnimSequence, virtualBoneName: String): Unit

    @JsName("RemoveMetaDataOfClass")
    public fun removeMetaDataOfClass(animationAsset: AnimationAsset,
        metaDataClass: UnrealEngineClass): Unit

    @JsName("RemoveMetaData")
    public fun removeMetaData(animationAsset: AnimationAsset, metaDataObject: AnimMetaData): Unit

    @JsName("RemoveCurve")
    public fun removeCurve(
      animationSequence: AnimSequence,
      curveName: String,
      removeNameFromSkeleton: Boolean,
    ): Unit

    @JsName("RemoveBoneAnimation")
    public fun removeBoneAnimation(
      animationSequence: AnimSequence,
      boneName: String,
      includeChildren: Boolean,
      finalize: Boolean,
    ): Unit

    @JsName("RemoveAnimationSyncMarkersByTrack")
    public fun removeAnimationSyncMarkersByTrack(animationSequence: AnimSequence,
        notifyTrackName: String): Number

    @JsName("RemoveAnimationSyncMarkersByName")
    public fun removeAnimationSyncMarkersByName(animationSequence: AnimSequence,
        markerName: String): Number

    @JsName("RemoveAnimationNotifyTrack")
    public fun removeAnimationNotifyTrack(animationSequenceBase: AnimSequenceBase,
        notifyTrackName: String): Unit

    @JsName("RemoveAnimationNotifyEventsByTrack")
    public fun removeAnimationNotifyEventsByTrack(animationSequenceBase: AnimSequenceBase,
        notifyTrackName: String): Number

    @JsName("RemoveAnimationNotifyEventsByName")
    public fun removeAnimationNotifyEventsByName(animationSequenceBase: AnimSequenceBase,
        notifyName: String): Number

    @JsName("RemoveAllVirtualBones")
    public fun removeAllVirtualBones(animationSequence: AnimSequence): Unit

    @JsName("RemoveAllMetaData")
    public fun removeAllMetaData(animationAsset: AnimationAsset): Unit

    @JsName("RemoveAllCurveData")
    public fun removeAllCurveData(animationSequence: AnimSequence): Unit

    @JsName("RemoveAllBoneAnimation")
    public fun removeAllBoneAnimation(animationSequence: AnimSequence): Unit

    @JsName("RemoveAllAnimationSyncMarkers")
    public fun removeAllAnimationSyncMarkers(animationSequence: AnimSequence): Unit

    @JsName("RemoveAllAnimationNotifyTracks")
    public fun removeAllAnimationNotifyTracks(animationSequenceBase: AnimSequenceBase): Unit

    @JsName("IsValidTime")
    public fun isValidTime(
      animationSequenceBase: AnimSequenceBase,
      time: Number,
      isValid: Boolean,
    ): IsValidProvider

    @JsName("IsValidRawAnimationTrackName")
    public fun isValidRawAnimationTrackName(animationSequenceBase: AnimSequenceBase,
        trackName: String): Boolean

    @JsName("IsValidAnimNotifyTrackName")
    public fun isValidAnimNotifyTrackName(animationSequenceBase: AnimSequenceBase,
        notifyTrackName: String): Boolean

    @JsName("IsValidAnimationSyncMarkerName")
    public fun isValidAnimationSyncMarkerName(animationSequence: AnimSequence, markerName: String):
        Boolean

    @JsName("IsRootMotionLockForced")
    public fun isRootMotionLockForced(animationSequence: AnimSequence): Boolean

    @JsName("IsRootMotionEnabled")
    public fun isRootMotionEnabled(animationSequence: AnimSequence): Boolean

    @JsName("GetVectorKeys")
    public fun getVectorKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      values: Array<Vector>,
    ): Object131

    @JsName("GetUniqueMarkerNames")
    public fun getUniqueMarkerNames(animationSequence: AnimSequence, markerNames: Array<String>):
        MarkerNamesProvider

    @JsName("GetTransformationKeys")
    public fun getTransformationKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      values: Array<Transform>,
    ): Object129

    @JsName("GetTimeAtFrame")
    public fun getTimeAtFrame(
      animationSequenceBase: AnimSequenceBase,
      frame: Number,
      time: Number,
    ): TimeProvider

    @JsName("GetSequenceLength")
    public fun getSequenceLength(animationSequenceBase: AnimSequenceBase, length: Number):
        LengthProvider

    @JsName("GetRootMotionLockType")
    public fun getRootMotionLockType(animationSequence: AnimSequence, lockType: String):
        LockTypeProvider

    @JsName("GetRawTrackScaleData")
    public fun getRawTrackScaleData(
      animationSequenceBase: AnimSequenceBase,
      trackName: String,
      scaleData: Array<Vector>,
    ): ScaleDataProvider

    @JsName("GetRawTrackRotationData")
    public fun getRawTrackRotationData(
      animationSequenceBase: AnimSequenceBase,
      trackName: String,
      rotationData: Array<Quat>,
    ): RotationDataProvider

    @JsName("GetRawTrackPositionData")
    public fun getRawTrackPositionData(
      animationSequenceBase: AnimSequenceBase,
      trackName: String,
      positionData: Array<Vector>,
    ): PositionDataProvider

    @JsName("GetRawTrackData")
    public fun getRawTrackData(
      animationSequenceBase: AnimSequenceBase,
      trackName: String,
      positionKeys: Array<Vector>,
      rotationKeys: Array<Quat>,
      scalingKeys: Array<Vector>,
    ): Object98

    @JsName("GetRateScale")
    public fun getRateScale(animationSequenceBase: AnimSequenceBase, rateScale: Number):
        RateScaleProvider

    @JsName("GetNumKeys")
    public fun getNumKeys(animationSequenceBase: AnimSequenceBase, numKeys: Number): NumKeysProvider

    @JsName("GetNumFrames")
    public fun getNumFrames(animationSequenceBase: AnimSequenceBase, numFrames: Number):
        NumFramesProvider

    @JsName("GetNodesOfClass")
    public fun getNodesOfClass(
      animationBlueprint: AnimBlueprint,
      nodeClass: UnrealEngineClass,
      graphNodes: Array<AnimGraphNodeBase>,
      includeChildClasses: Boolean,
    ): GraphNodesProvider

    @JsName("GetMetaDataOfClass")
    public fun getMetaDataOfClass(
      animationAsset: AnimationAsset,
      metaDataClass: UnrealEngineClass,
      metaDataOfClass: Array<AnimMetaData>,
    ): MetaDataOfClassProvider

    @JsName("GetMetaData")
    public fun getMetaData(animationAsset: AnimationAsset, metaData: Array<AnimMetaData>):
        MetaDataProvider

    @JsName("GetFrameAtTime")
    public fun getFrameAtTime(
      animationSequenceBase: AnimSequenceBase,
      time: Number,
      frame: Number,
    ): FrameProvider

    @JsName("GetFloatKeys")
    public fun getFloatKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      values: Array<Number>,
    ): Object127

    @JsName("GetCurveCompressionSettings")
    public fun getCurveCompressionSettings(animationSequence: AnimSequence,
        compressionSettings: AnimCurveCompressionSettings): AnimBoneCompressionCurveProvider

    @JsName("GetBonePosesForTime")
    public fun getBonePosesForTime(
      animationSequenceBase: AnimSequenceBase,
      boneNames: Array<String>,
      time: Number,
      extractRootMotion: Boolean,
      poses: Array<Transform>,
      previewMesh: SkeletalMesh,
    ): PosesProvider

    @JsName("GetBonePosesForFrame")
    public fun getBonePosesForFrame(
      animationSequenceBase: AnimSequenceBase,
      boneNames: Array<String>,
      frame: Number,
      extractRootMotion: Boolean,
      poses: Array<Transform>,
      previewMesh: SkeletalMesh,
    ): PosesProvider

    @JsName("GetBonePoseForTime")
    public fun getBonePoseForTime(
      animationSequenceBase: AnimSequenceBase,
      boneName: String,
      time: Number,
      extractRootMotion: Boolean,
      pose: Transform,
    ): TransformProvider

    @JsName("GetBonePoseForFrame")
    public fun getBonePoseForFrame(
      animationSequenceBase: AnimSequenceBase,
      boneName: String,
      frame: Number,
      extractRootMotion: Boolean,
      pose: Transform,
    ): TransformProvider

    @JsName("GetBoneCompressionSettings")
    public fun getBoneCompressionSettings(animationSequence: AnimSequence,
        compressionSettings: AnimBoneCompressionSettings): AnimBoneCompressionSettingsProvider

    @JsName("GetAnimNotifyEventTriggerTime")
    public fun getAnimNotifyEventTriggerTime(notifyEvent: AnimNotifyEvent): Number

    @JsName("GetAnimNotifyEventDuration")
    public fun getAnimNotifyEventDuration(notifyEvent: AnimNotifyEvent): Number

    @JsName("GetAnimationTrackNames")
    public fun getAnimationTrackNames(animationSequenceBase: AnimSequenceBase,
        trackNames: Array<String>): TrackNamesProvider

    @JsName("GetAnimationSyncMarkersForTrack")
    public fun getAnimationSyncMarkersForTrack(
      animationSequence: AnimSequence,
      notifyTrackName: String,
      markers: Array<AnimSyncMarker>,
    ): MarkersProvider

    @JsName("GetAnimationSyncMarkers")
    public fun getAnimationSyncMarkers(animationSequence: AnimSequence,
        markers: Array<AnimSyncMarker>): MarkersProvider

    @JsName("GetAnimationNotifyTrackNames")
    public fun getAnimationNotifyTrackNames(animationSequenceBase: AnimSequenceBase,
        trackNames: Array<String>): TrackNamesProvider

    @JsName("GetAnimationNotifyEventsForTrack")
    public fun getAnimationNotifyEventsForTrack(
      animationSequenceBase: AnimSequenceBase,
      notifyTrackName: String,
      events: Array<AnimNotifyEvent>,
    ): EventsProvider

    @JsName("GetAnimationNotifyEvents")
    public fun getAnimationNotifyEvents(animationSequenceBase: AnimSequenceBase,
        notifyEvents: Array<AnimNotifyEvent>): NotifyEventsProvider

    @JsName("GetAnimationNotifyEventNames")
    public fun getAnimationNotifyEventNames(animationSequenceBase: AnimSequenceBase,
        eventNames: Array<String>): EventNamesProvider

    @JsName("GetAnimationInterpolationType")
    public fun getAnimationInterpolationType(animationSequence: AnimSequence,
        interpolationType: String): InterpolationTypeProvider

    @JsName("GetAnimationGraphs")
    public fun getAnimationGraphs(animationBlueprint: AnimBlueprint,
        animationGraphs: Array<AnimationGraph>): AnimationGraphsProvider

    @JsName("GetAnimationCurveNames")
    public fun getAnimationCurveNames(
      animationSequence: AnimSequence,
      curveType: String,
      curveNames: Array<String>,
    ): CurveNamesProvider

    @JsName("GetAdditiveBasePoseType")
    public fun getAdditiveBasePoseType(animationSequence: AnimSequence,
        additiveBasePoseType: String): AdditiveBasePoseTypeProvider

    @JsName("GetAdditiveAnimationType")
    public fun getAdditiveAnimationType(animationSequence: AnimSequence,
        additiveAnimationType: String): AdditiveAnimationTypeProvider

    @JsName("FindBonePathToRoot")
    public fun findBonePathToRoot(
      animationSequenceBase: AnimSequenceBase,
      boneName: String,
      bonePath: Array<String>,
    ): BonePathProvider

    @JsName("FinalizeBoneAnimation")
    public fun finalizeBoneAnimation(animationSequence: AnimSequence): Unit

    @JsName("EvaluateRootBoneTimecodeAttributesAtTime")
    public fun evaluateRootBoneTimecodeAttributesAtTime(
      animationSequenceBase: AnimSequenceBase,
      evalTime: Number,
      outQualifiedFrameTime: QualifiedFrameTime,
    ): Object84

    @JsName("DoesCurveExist")
    public fun doesCurveExist(
      animationSequence: AnimSequence,
      curveName: String,
      curveType: String,
    ): Boolean

    @JsName("DoesBoneNameExist")
    public fun doesBoneNameExist(
      animationSequence: AnimSequence,
      boneName: String,
      exists: Boolean,
    ): ExistsProvider

    @JsName("CopyAnimNotifiesFromSequence")
    public fun copyAnimNotifiesFromSequence(
      sourceAnimationSequenceBase: AnimSequenceBase,
      destinationAnimationSequenceBase: AnimSequenceBase,
      deleteExistingNotifies: Boolean,
    ): Unit

    @JsName("CopyAnimationCurveNamesToSkeleton")
    public fun copyAnimationCurveNamesToSkeleton(
      oldSkeleton: Skeleton,
      newSkeleton: Skeleton,
      sequenceBase: AnimSequenceBase,
      curveType: String,
    ): Unit

    @JsName("ContainsMetaDataOfClass")
    public fun containsMetaDataOfClass(animationAsset: AnimationAsset,
        metaDataClass: UnrealEngineClass): Boolean

    @JsName("AddVirtualBone")
    public fun addVirtualBone(
      animationSequence: AnimSequence,
      sourceBoneName: String,
      targetBoneName: String,
      virtualBoneName: String,
    ): VirtualBoneNameProvider

    @JsName("AddVectorCurveKeys")
    public fun addVectorCurveKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      vectors: Array<Vector>,
    ): Unit

    @JsName("AddVectorCurveKey")
    public fun addVectorCurveKey(
      animationSequence: AnimSequence,
      curveName: String,
      time: Number,
      vector: Vector,
    ): Unit

    @JsName("AddTransformationCurveKeys")
    public fun addTransformationCurveKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      transforms: Array<Transform>,
    ): Unit

    @JsName("AddTransformationCurveKey")
    public fun addTransformationCurveKey(
      animationSequence: AnimSequence,
      curveName: String,
      time: Number,
      transform: Transform,
    ): Unit

    @JsName("AddMetaDataObject")
    public fun addMetaDataObject(animationAsset: AnimationAsset, metaDataObject: AnimMetaData): Unit

    @JsName("AddMetaData")
    public fun addMetaData(
      animationAsset: AnimationAsset,
      metaDataClass: UnrealEngineClass,
      metaDataInstance: AnimMetaData,
    ): MetaDataInstanceProvider

    @JsName("AddFloatCurveKeys")
    public fun addFloatCurveKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      values: Array<Number>,
    ): Unit

    @JsName("AddFloatCurveKey")
    public fun addFloatCurveKey(
      animationSequence: AnimSequence,
      curveName: String,
      time: Number,
      value: Number,
    ): Unit

    @JsName("AddCurve")
    public fun addCurve(
      animationSequence: AnimSequence,
      curveName: String,
      curveType: String,
      metaDataCurve: Boolean,
    ): Unit

    @JsName("AddAnimationSyncMarker")
    public fun addAnimationSyncMarker(
      animationSequence: AnimSequence,
      markerName: String,
      time: Number,
      notifyTrackName: String,
    ): Unit

    @JsName("AddAnimationNotifyTrack")
    public fun addAnimationNotifyTrack(
      animationSequenceBase: AnimSequenceBase,
      notifyTrackName: String,
      trackColor: LinearColor,
    ): Unit

    @JsName("AddAnimationNotifyStateEventObject")
    public fun addAnimationNotifyStateEventObject(
      animationSequenceBase: AnimSequenceBase,
      startTime: Number,
      duration: Number,
      notifyState: AnimNotifyState,
      notifyTrackName: String,
    ): Unit

    @JsName("AddAnimationNotifyStateEvent")
    public fun addAnimationNotifyStateEvent(
      animationSequenceBase: AnimSequenceBase,
      notifyTrackName: String,
      startTime: Number,
      duration: Number,
      notifyStateClass: UnrealEngineClass,
    ): AnimNotifyState

    @JsName("AddAnimationNotifyEventObject")
    public fun addAnimationNotifyEventObject(
      animationSequenceBase: AnimSequenceBase,
      startTime: Number,
      notify: AnimNotify,
      notifyTrackName: String,
    ): Unit

    @JsName("AddAnimationNotifyEvent")
    public fun addAnimationNotifyEvent(
      animationSequenceBase: AnimSequenceBase,
      notifyTrackName: String,
      startTime: Number,
      notifyClass: UnrealEngineClass,
    ): AnimNotify

    @JsName("C")
    public fun copy(other: UObject): AnimationBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): AnimationBlueprintLibrary
  }
}

public open external class AnimPoseExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimPoseExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimPoseExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimPoseExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimPoseExtensions

    @JsName("SetBonePose")
    public fun setBonePose(
      pose: AnimPose,
      transform: Transform,
      boneName: String,
      space: String,
    ): AnimPoseProvider

    @JsName("IsValid")
    public fun isValid(pose: AnimPose): Boolean

    @JsName("GetRelativeTransform")
    public fun getRelativeTransform(
      pose: AnimPose,
      fromBoneName: String,
      toBoneName: String,
      space: String,
    ): Transform

    @JsName("GetRelativeToRefPoseTransform")
    public fun getRelativeToRefPoseTransform(
      pose: AnimPose,
      boneName: String,
      space: String,
    ): Transform

    @JsName("GetRefPoseRelativeTransform")
    public fun getRefPoseRelativeTransform(
      pose: AnimPose,
      fromBoneName: String,
      toBoneName: String,
      space: String,
    ): Transform

    @JsName("GetReferencePose")
    public fun getReferencePose(skeleton: Skeleton, outPose: AnimPose): OutAnimPoseProvider

    @JsName("GetRefBonePose")
    public fun getRefBonePose(
      pose: AnimPose,
      boneName: String,
      space: String,
    ): Transform

    @JsName("GetBonePose")
    public fun getBonePose(
      pose: AnimPose,
      boneName: String,
      space: String,
    ): Transform

    @JsName("GetBoneNames")
    public fun getBoneNames(pose: AnimPose, bones: Array<String>): BonesProvider

    @JsName("GetAnimPoseAtTime")
    public fun getAnimPoseAtTime(
      animationSequenceBase: AnimSequenceBase,
      time: Number,
      evaluationOptions: AnimPoseEvaluationOptions,
      pose: AnimPose,
    ): AnimPoseProvider

    @JsName("GetAnimPoseAtFrame")
    public fun getAnimPoseAtFrame(
      animationSequenceBase: AnimSequenceBase,
      frameIndex: Number,
      evaluationOptions: AnimPoseEvaluationOptions,
      pose: AnimPose,
    ): AnimPoseProvider

    @JsName("EvaluateAnimationBlueprintWithInputPose")
    public fun evaluateAnimationBlueprintWithInputPose(
      inputPose: AnimPose,
      targetSkeletalMesh: SkeletalMesh,
      animationBlueprint: AnimBlueprint,
      outPose: AnimPose,
    ): OutAnimPoseProvider

    @JsName("C")
    public fun copy(other: UObject): AnimPoseExtensions

    @JsName("C")
    public fun copy(other: Any): AnimPoseExtensions
  }
}

@JsName("EAnimExecutionContextConversionResult")
public external object AnimExecutionContextConversionResult {
  public var Succeeded: String

  public var Failed: String

  @JsName("EAnimExecutionContextConversionResult_MAX")
  public var Max: String
}

public open external class AnimComponentSpacePoseContext : AnimExecutionContext {
  public override fun clone(): AnimComponentSpacePoseContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimComponentSpacePoseContext

    @JsName("C")
    public fun copy(other: Any): AnimComponentSpacePoseContext
  }
}

public open external class AnimInitializationContext : AnimExecutionContext {
  public override fun clone(): AnimInitializationContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimInitializationContext

    @JsName("C")
    public fun copy(other: Any): AnimInitializationContext
  }
}

public open external class AnimPoseContext : AnimExecutionContext {
  public override fun clone(): AnimPoseContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimPoseContext

    @JsName("C")
    public fun copy(other: Any): AnimPoseContext
  }
}

@JsName("T$686")
public external interface Object686 {
  @JsName("Result")
  public var result: String

  @JsName("$")
  public var value: AnimComponentSpacePoseContext
}

@JsName("T$687")
public external interface Object687 {
  @JsName("Result")
  public var result: String

  @JsName("$")
  public var value: AnimInitializationContext
}

@JsName("T$688")
public external interface Object688 {
  @JsName("Result")
  public var result: String

  @JsName("$")
  public var value: AnimPoseContext
}

@JsName("T$689")
public external interface Object689 {
  @JsName("Result")
  public var result: String

  @JsName("$")
  public var value: AnimUpdateContext
}

public open external class AnimExecutionContext {
  public open fun clone(): AnimExecutionContext

  @JsName("ConvertToComponentSpacePoseContext")
  public open fun convertToComponentSpacePoseContext(result: String): Object686

  @JsName("ConvertToInitializationContext")
  public open fun convertToInitializationContext(result: String): Object687

  @JsName("ConvertToPoseContext")
  public open fun convertToPoseContext(result: String): Object688

  @JsName("ConvertToUpdateContext")
  public open fun convertToUpdateContext(result: String): Object689

  @JsName("GetAnimInstance")
  public open fun getAnimInstance(): AnimInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimExecutionContext

    @JsName("C")
    public fun copy(other: Any): AnimExecutionContext

    @JsName("ConvertToComponentSpacePoseContext")
    public fun convertToComponentSpacePoseContext(context: AnimExecutionContext, result: String):
        Object686

    @JsName("ConvertToInitializationContext")
    public fun convertToInitializationContext(context: AnimExecutionContext, result: String):
        Object687

    @JsName("ConvertToPoseContext")
    public fun convertToPoseContext(context: AnimExecutionContext, result: String): Object688

    @JsName("ConvertToUpdateContext")
    public fun convertToUpdateContext(context: AnimExecutionContext, result: String): Object689

    @JsName("GetAnimInstance")
    public fun getAnimInstance(context: AnimExecutionContext): AnimInstance
  }
}

public open external class AnimUpdateContext : AnimExecutionContext {
  public override fun clone(): AnimUpdateContext

  @JsName("SetSequenceWithInertialBlending")
  public open fun setSequenceWithInertialBlending(
    sequencePlayer: SequencePlayerReference,
    sequence: AnimSequenceBase,
    blendTime: Number,
  ): SequencePlayerReference

  @JsName("AdvanceTime")
  public open fun advanceTime(sequenceEvaluator: SequenceEvaluatorReference, playRate: Number):
      SequenceEvaluatorReference

  @JsName("SetSequenceWithInertialBlending")
  public open fun setSequenceWithInertialBlending(
    sequenceEvaluator: SequenceEvaluatorReference,
    sequence: AnimSequenceBase,
    blendTime: Number,
  ): SequenceEvaluatorReference

  @JsName("GetCurrentWeight")
  public open fun getCurrentWeight(): Number

  @JsName("GetDeltaTime")
  public open fun getDeltaTime(): Number

  @JsName("IsStateBlendingIn")
  public open fun isStateBlendingIn(uNode: AnimationStateResultReference): Boolean

  @JsName("IsStateBlendingOut")
  public open fun isStateBlendingOut(uNode: AnimationStateResultReference): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimUpdateContext

    @JsName("C")
    public fun copy(other: Any): AnimUpdateContext

    @JsName("SetSequenceWithInertialBlending")
    public fun setSequenceWithInertialBlending(
      updateContext: AnimUpdateContext,
      sequencePlayer: SequencePlayerReference,
      sequence: AnimSequenceBase,
      blendTime: Number,
    ): SequencePlayerReference

    @JsName("AdvanceTime")
    public fun advanceTime(
      updateContext: AnimUpdateContext,
      sequenceEvaluator: SequenceEvaluatorReference,
      playRate: Number,
    ): SequenceEvaluatorReference

    @JsName("SetSequenceWithInertialBlending")
    public fun setSequenceWithInertialBlending(
      updateContext: AnimUpdateContext,
      sequenceEvaluator: SequenceEvaluatorReference,
      sequence: AnimSequenceBase,
      blendTime: Number,
    ): SequenceEvaluatorReference

    @JsName("GetCurrentWeight")
    public fun getCurrentWeight(context: AnimUpdateContext): Number

    @JsName("GetDeltaTime")
    public fun getDeltaTime(context: AnimUpdateContext): Number

    @JsName("IsStateBlendingIn")
    public fun isStateBlendingIn(updateContext: AnimUpdateContext,
        uNode: AnimationStateResultReference): Boolean

    @JsName("IsStateBlendingOut")
    public fun isStateBlendingOut(updateContext: AnimUpdateContext,
        uNode: AnimationStateResultReference): Boolean
  }
}

public open external class AnimationStateMachineLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationStateMachineLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationStateMachineLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationStateMachineLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationStateMachineLibrary

    @JsName("IsStateBlendingOut")
    public fun isStateBlendingOut(updateContext: AnimUpdateContext,
        uNode: AnimationStateResultReference): Boolean

    @JsName("IsStateBlendingIn")
    public fun isStateBlendingIn(updateContext: AnimUpdateContext,
        uNode: AnimationStateResultReference): Boolean

    @JsName("ConvertToAnimationStateResultPure")
    public fun convertToAnimationStateResultPure(
      uNode: AnimNodeReference,
      animationState: AnimationStateResultReference,
      result: Boolean,
    ): Object71

    @JsName("ConvertToAnimationStateResult")
    public fun convertToAnimationStateResult(
      uNode: AnimNodeReference,
      animationState: AnimationStateResultReference,
      result: String,
    ): Object70

    @JsName("C")
    public fun copy(other: UObject): AnimationStateMachineLibrary

    @JsName("C")
    public fun copy(other: Any): AnimationStateMachineLibrary
  }
}

public open external class AnimExecutionContextLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  @JsName("Prototype_ThreadSafeAnimUpdateCall")
  public open fun prototypeThreadSafeAnimUpdateCall(context: AnimUpdateContext,
      uNode: AnimNodeReference): Unit

  @JsName("Prototype_ThreadSafeAnimNodeCall")
  public open fun prototypeThreadSafeAnimNodeCall(context: AnimExecutionContext,
      uNode: AnimNodeReference): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimExecutionContextLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimExecutionContextLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimExecutionContextLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimExecutionContextLibrary

    @JsName("GetDeltaTime")
    public fun getDeltaTime(context: AnimUpdateContext): Number

    @JsName("GetCurrentWeight")
    public fun getCurrentWeight(context: AnimUpdateContext): Number

    @JsName("GetAnimNodeReference")
    public fun getAnimNodeReference(instance: AnimInstance, index: Number): AnimNodeReference

    @JsName("GetAnimInstance")
    public fun getAnimInstance(context: AnimExecutionContext): AnimInstance

    @JsName("ConvertToUpdateContext")
    public fun convertToUpdateContext(context: AnimExecutionContext, result: String): Object689

    @JsName("ConvertToPoseContext")
    public fun convertToPoseContext(context: AnimExecutionContext, result: String): Object688

    @JsName("ConvertToInitializationContext")
    public fun convertToInitializationContext(context: AnimExecutionContext, result: String):
        Object687

    @JsName("ConvertToComponentSpacePoseContext")
    public fun convertToComponentSpacePoseContext(context: AnimExecutionContext, result: String):
        Object686

    @JsName("C")
    public fun copy(other: UObject): AnimExecutionContextLibrary

    @JsName("C")
    public fun copy(other: Any): AnimExecutionContextLibrary
  }
}

@JsName("AnimNotify_PlayMontageNotify")
public open external class AnimNotifyPlayMontageNotify(
  outer: UObject,
) : AnimNotify {
  @JsName("NotifyName")
  public open var notifyName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyPlayMontageNotify

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyPlayMontageNotify

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyPlayMontageNotify

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyPlayMontageNotify

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyPlayMontageNotify

    @JsName("C")
    public fun copy(other: Any): AnimNotifyPlayMontageNotify
  }
}

@JsName("AnimNotify_PlayMontageNotifyWindow")
public open external class AnimNotifyPlayMontageNotifyWindow(
  outer: UObject,
) : AnimNotifyState {
  @JsName("NotifyName")
  public open var notifyName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyPlayMontageNotifyWindow

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyPlayMontageNotifyWindow

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyPlayMontageNotifyWindow

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyPlayMontageNotifyWindow

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyPlayMontageNotifyWindow

    @JsName("C")
    public fun copy(other: Any): AnimNotifyPlayMontageNotifyWindow
  }
}

public open external class AnimSequencerInstance(
  outer: UObject,
) : AnimInstance {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSequencerInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSequencerInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSequencerInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSequencerInstance

    @JsName("C")
    public fun copy(other: UObject): AnimSequencerInstance

    @JsName("C")
    public fun copy(other: Any): AnimSequencerInstance
  }
}

public open external class PositionHistory {
  @JsName("Positions")
  public open var positions: Array<Vector>

  @JsName("Range")
  public open var range: Number

  public open fun clone(): PositionHistory

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PositionHistory

    @JsName("C")
    public fun copy(other: Any): PositionHistory
  }
}

@JsName("T$690")
public external interface Object690 {
  @JsName("History")
  public var history: PositionHistory

  @JsName("$")
  public var value: Number
}

public open external class KismetAnimationLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetAnimationLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetAnimationLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetAnimationLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetAnimationLibrary

    @JsName("K2_TwoBoneIK")
    public fun k2TwoBoneIk(
      rootPos: Vector,
      jointPos: Vector,
      endPos: Vector,
      jointTarget: Vector,
      effector: Vector,
      outJointPos: Vector,
      outEndPos: Vector,
      allowStretching: Boolean,
      startStretchRatio: Number,
      maxStretchScale: Number,
    ): Object555

    @JsName("K2_StartProfilingTimer")
    public fun k2StartProfilingTimer(): Unit

    @JsName("K2_MakePerlinNoiseVectorAndRemap")
    public fun k2MakePerlinNoiseVectorAndRemap(
      x: Number,
      y: Number,
      z: Number,
      rangeOutMinX: Number,
      rangeOutMaxX: Number,
      rangeOutMinY: Number,
      rangeOutMaxY: Number,
      rangeOutMinZ: Number,
      rangeOutMaxZ: Number,
    ): Vector

    @JsName("K2_MakePerlinNoiseAndRemap")
    public fun k2MakePerlinNoiseAndRemap(
      value: Number,
      rangeOutMin: Number,
      rangeOutMax: Number,
    ): Number

    @JsName("K2_LookAt")
    public fun k2LookAt(
      currentTransform: Transform,
      targetPosition: Vector,
      lookAtVector: Vector,
      useUpVector: Boolean,
      upVector: Vector,
      clampConeInDegree: Number,
    ): Transform

    @JsName("K2_EndProfilingTimer")
    public fun k2EndProfilingTimer(log: Boolean, logPrefix: String): Number

    @JsName("K2_DistanceBetweenTwoSocketsAndMapRange")
    public fun k2DistanceBetweenTwoSocketsAndMapRange(
      component: SkeletalMeshComponent,
      socketOrBoneNameA: String,
      socketSpaceA: String,
      socketOrBoneNameB: String,
      socketSpaceB: String,
      remapRange: Boolean,
      inRangeMin: Number,
      inRangeMax: Number,
      outRangeMin: Number,
      outRangeMax: Number,
    ): Number

    @JsName("K2_DirectionBetweenSockets")
    public fun k2DirectionBetweenSockets(
      component: SkeletalMeshComponent,
      socketOrBoneNameFrom: String,
      socketOrBoneNameTo: String,
    ): Vector

    @JsName("K2_CalculateVelocityFromSockets")
    public fun k2CalculateVelocityFromSockets(
      deltaSeconds: Number,
      component: SkeletalMeshComponent,
      socketOrBoneName: String,
      referenceSocketOrBone: String,
      socketSpace: String,
      offsetInBoneSpace: Vector,
      history: PositionHistory,
      numberOfSamples: Number,
      velocityMin: Number,
      velocityMax: Number,
      easingType: String,
      customCurve: RuntimeFloatCurve,
    ): Object690

    @JsName("K2_CalculateVelocityFromPositionHistory")
    public fun k2CalculateVelocityFromPositionHistory(
      deltaSeconds: Number,
      position: Vector,
      history: PositionHistory,
      numberOfSamples: Number,
      velocityMin: Number,
      velocityMax: Number,
    ): Object690

    @JsName("CalculateDirection")
    public fun calculateDirection(velocity: Vector, baseRotation: Rotator): Number

    @JsName("C")
    public fun copy(other: UObject): KismetAnimationLibrary

    @JsName("C")
    public fun copy(other: Any): KismetAnimationLibrary
  }
}

public open external class LinkedAnimGraphLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LinkedAnimGraphLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LinkedAnimGraphLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LinkedAnimGraphLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LinkedAnimGraphLibrary

    @JsName("HasLinkedAnimInstance")
    public fun hasLinkedAnimInstance(uNode: LinkedAnimGraphReference): Boolean

    @JsName("GetLinkedAnimInstance")
    public fun getLinkedAnimInstance(uNode: LinkedAnimGraphReference): AnimInstance

    @JsName("ConvertToLinkedAnimGraphPure")
    public fun convertToLinkedAnimGraphPure(
      uNode: AnimNodeReference,
      linkedAnimGraph: LinkedAnimGraphReference,
      result: Boolean,
    ): Object69

    @JsName("ConvertToLinkedAnimGraph")
    public fun convertToLinkedAnimGraph(uNode: AnimNodeReference, result: String): Object68

    @JsName("C")
    public fun copy(other: UObject): LinkedAnimGraphLibrary

    @JsName("C")
    public fun copy(other: Any): LinkedAnimGraphLibrary
  }
}

public open external class BranchingPointNotifyPayload {
  public open fun clone(): BranchingPointNotifyPayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BranchingPointNotifyPayload

    @JsName("C")
    public fun copy(other: Any): BranchingPointNotifyPayload
  }
}

public open external class PlayMontageCallbackProxy(
  outer: UObject,
) : UObject {
  @JsName("OnCompleted")
  public open var onCompleted: UnrealEngineMulticastDelegate<(NotifyName: String) -> Unit>

  @JsName("OnBlendOut")
  public open var onBlendOut: UnrealEngineMulticastDelegate<(NotifyName: String) -> Unit>

  @JsName("OnInterrupted")
  public open var onInterrupted: UnrealEngineMulticastDelegate<(NotifyName: String) -> Unit>

  @JsName("OnNotifyBegin")
  public open var onNotifyBegin: UnrealEngineMulticastDelegate<(NotifyName: String) -> Unit>

  @JsName("OnNotifyEnd")
  public open var onNotifyEnd: UnrealEngineMulticastDelegate<(NotifyName: String) -> Unit>

  @JsName("OnNotifyEndReceived")
  public open fun onNotifyEndReceived(notifyName: String,
      branchingPointNotifyPayload: BranchingPointNotifyPayload): Unit

  @JsName("OnNotifyBeginReceived")
  public open fun onNotifyBeginReceived(notifyName: String,
      branchingPointNotifyPayload: BranchingPointNotifyPayload): Unit

  @JsName("OnMontageEnded")
  public open fun onMontageEnded(montage: AnimMontage, interrupted: Boolean): Unit

  @JsName("OnMontageBlendingOut")
  public open fun onMontageBlendingOut(montage: AnimMontage, interrupted: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlayMontageCallbackProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlayMontageCallbackProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlayMontageCallbackProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlayMontageCallbackProxy

    @JsName("CreateProxyObjectForPlayMontage")
    public fun createProxyObjectForPlayMontage(
      inSkeletalMeshComponent: SkeletalMeshComponent,
      montageToPlay: AnimMontage,
      playRate: Number,
      startingPosition: Number,
      startingSection: String,
    ): PlayMontageCallbackProxy

    @JsName("C")
    public fun copy(other: UObject): PlayMontageCallbackProxy

    @JsName("C")
    public fun copy(other: Any): PlayMontageCallbackProxy
  }
}

public open external class SequenceEvaluatorLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequenceEvaluatorLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequenceEvaluatorLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequenceEvaluatorLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequenceEvaluatorLibrary

    @JsName("SetSequenceWithInertialBlending")
    public fun setSequenceWithInertialBlending(
      updateContext: AnimUpdateContext,
      sequenceEvaluator: SequenceEvaluatorReference,
      sequence: AnimSequenceBase,
      blendTime: Number,
    ): SequenceEvaluatorReference

    @JsName("SetSequence")
    public fun setSequence(sequenceEvaluator: SequenceEvaluatorReference,
        sequence: AnimSequenceBase): SequenceEvaluatorReference

    @JsName("SetExplicitTime")
    public fun setExplicitTime(sequenceEvaluator: SequenceEvaluatorReference, time: Number):
        SequenceEvaluatorReference

    @JsName("GetSequence")
    public fun getSequence(sequenceEvaluator: SequenceEvaluatorReference): AnimSequenceBase

    @JsName("GetAccumulatedTime")
    public fun getAccumulatedTime(sequenceEvaluator: SequenceEvaluatorReference): Number

    @JsName("ConvertToSequenceEvaluatorPure")
    public fun convertToSequenceEvaluatorPure(
      uNode: AnimNodeReference,
      sequenceEvaluator: SequenceEvaluatorReference,
      result: Boolean,
    ): Object67

    @JsName("ConvertToSequenceEvaluator")
    public fun convertToSequenceEvaluator(uNode: AnimNodeReference, result: String): Object66

    @JsName("AdvanceTime")
    public fun advanceTime(
      updateContext: AnimUpdateContext,
      sequenceEvaluator: SequenceEvaluatorReference,
      playRate: Number,
    ): SequenceEvaluatorReference

    @JsName("C")
    public fun copy(other: UObject): SequenceEvaluatorLibrary

    @JsName("C")
    public fun copy(other: Any): SequenceEvaluatorLibrary
  }
}

public open external class SequencePlayerLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencePlayerLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencePlayerLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencePlayerLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencePlayerLibrary

    @JsName("SetStartPosition")
    public fun setStartPosition(sequencePlayer: SequencePlayerReference, startPosition: Number):
        SequencePlayerReference

    @JsName("SetSequenceWithInertialBlending")
    public fun setSequenceWithInertialBlending(
      updateContext: AnimUpdateContext,
      sequencePlayer: SequencePlayerReference,
      sequence: AnimSequenceBase,
      blendTime: Number,
    ): SequencePlayerReference

    @JsName("SetSequence")
    public fun setSequence(sequencePlayer: SequencePlayerReference, sequence: AnimSequenceBase):
        SequencePlayerReference

    @JsName("SetPlayRate")
    public fun setPlayRate(sequencePlayer: SequencePlayerReference, playRate: Number):
        SequencePlayerReference

    @JsName("SetAccumulatedTime")
    public fun setAccumulatedTime(sequencePlayer: SequencePlayerReference, time: Number):
        SequencePlayerReference

    @JsName("GetStartPosition")
    public fun getStartPosition(sequencePlayer: SequencePlayerReference): Number

    @JsName("GetSequencePure")
    public fun getSequencePure(sequencePlayer: SequencePlayerReference): AnimSequenceBase

    @JsName("GetSequence")
    public fun getSequence(sequencePlayer: SequencePlayerReference, sequenceBase: AnimSequenceBase):
        Object61

    @JsName("GetPlayRate")
    public fun getPlayRate(sequencePlayer: SequencePlayerReference): Number

    @JsName("GetLoopAnimation")
    public fun getLoopAnimation(sequencePlayer: SequencePlayerReference): Boolean

    @JsName("GetAccumulatedTime")
    public fun getAccumulatedTime(sequencePlayer: SequencePlayerReference): Number

    @JsName("ConvertToSequencePlayerPure")
    public fun convertToSequencePlayerPure(
      uNode: AnimNodeReference,
      sequencePlayer: SequencePlayerReference,
      result: Boolean,
    ): Object65

    @JsName("ConvertToSequencePlayer")
    public fun convertToSequencePlayer(uNode: AnimNodeReference, result: String): Object64

    @JsName("C")
    public fun copy(other: UObject): SequencePlayerLibrary

    @JsName("C")
    public fun copy(other: Any): SequencePlayerLibrary
  }
}

public open external class SequencerAnimationSupport(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerAnimationSupport

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerAnimationSupport

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerAnimationSupport

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerAnimationSupport

    @JsName("C")
    public fun copy(other: UObject): SequencerAnimationSupport

    @JsName("C")
    public fun copy(other: Any): SequencerAnimationSupport
  }
}

public open external class SkeletalControlLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalControlLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalControlLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalControlLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalControlLibrary

    @JsName("SetAlpha")
    public fun setAlpha(skeletalControl: SkeletalControlReference, alpha: Number):
        SkeletalControlReference

    @JsName("GetAlpha")
    public fun getAlpha(skeletalControl: SkeletalControlReference): Number

    @JsName("ConvertToSkeletalControlPure")
    public fun convertToSkeletalControlPure(
      uNode: AnimNodeReference,
      skeletalControl: SkeletalControlReference,
      result: Boolean,
    ): Object63

    @JsName("ConvertToSkeletalControl")
    public fun convertToSkeletalControl(uNode: AnimNodeReference, result: String): Object62

    @JsName("C")
    public fun copy(other: UObject): SkeletalControlLibrary

    @JsName("C")
    public fun copy(other: Any): SkeletalControlLibrary
  }
}

public open external class ByteChannelEvaluatorSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ByteChannelEvaluatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ByteChannelEvaluatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ByteChannelEvaluatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ByteChannelEvaluatorSystem

    @JsName("C")
    public fun copy(other: UObject): ByteChannelEvaluatorSystem

    @JsName("C")
    public fun copy(other: Any): ByteChannelEvaluatorSystem
  }
}

public open external class DoubleChannelEvaluatorSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DoubleChannelEvaluatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DoubleChannelEvaluatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DoubleChannelEvaluatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DoubleChannelEvaluatorSystem

    @JsName("C")
    public fun copy(other: UObject): DoubleChannelEvaluatorSystem

    @JsName("C")
    public fun copy(other: Any): DoubleChannelEvaluatorSystem
  }
}

public open external class FloatChannelEvaluatorSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FloatChannelEvaluatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FloatChannelEvaluatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FloatChannelEvaluatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FloatChannelEvaluatorSystem

    @JsName("C")
    public fun copy(other: UObject): FloatChannelEvaluatorSystem

    @JsName("C")
    public fun copy(other: Any): FloatChannelEvaluatorSystem
  }
}

public open external class MovieSceneTransformOrigin(
  outer: UObject,
) : Interface {
  @JsName("BP_GetTransformOrigin")
  public open fun bpGetTransformOrigin(): Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTransformOrigin

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTransformOrigin

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTransformOrigin

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTransformOrigin

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTransformOrigin

    @JsName("C")
    public fun copy(other: Any): MovieSceneTransformOrigin
  }
}

public open external class IntegerChannelEvaluatorSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IntegerChannelEvaluatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IntegerChannelEvaluatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IntegerChannelEvaluatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IntegerChannelEvaluatorSystem

    @JsName("C")
    public fun copy(other: UObject): IntegerChannelEvaluatorSystem

    @JsName("C")
    public fun copy(other: Any): IntegerChannelEvaluatorSystem
  }
}

@JsName("MovieScene3DConstraintSection")
public open external class MovieScene3dConstraintSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("ConstraintId")
  public open var constraintId: Guid

  @JsName("ConstraintBindingID")
  public open var constraintBindingId: MovieSceneObjectBindingId

  @JsName("SetConstraintBindingID")
  public open fun setConstraintBindingId(inConstraintBindingId: MovieSceneObjectBindingId): Unit

  @JsName("GetConstraintBindingID")
  public open fun getConstraintBindingId(): MovieSceneObjectBindingId

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dConstraintSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dConstraintSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dConstraintSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dConstraintSection

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dConstraintSection

    @JsName("C")
    public fun copy(other: Any): MovieScene3dConstraintSection
  }
}

@JsName("MovieScene3DAttachSection")
public open external class MovieScene3dAttachSection(
  outer: UObject,
) : MovieScene3dConstraintSection {
  @JsName("AttachSocketName")
  public open var attachSocketName: String

  @JsName("AttachComponentName")
  public open var attachComponentName: String

  @JsName("bFullRevertOnDetach")
  public open var fullRevertOnDetach: Boolean

  @JsName("ReAttachOnDetach")
  public open var reAttachOnDetach: SceneComponent

  @JsName("AttachmentLocationRule")
  public open var attachmentLocationRule: String

  @JsName("AttachmentRotationRule")
  public open var attachmentRotationRule: String

  @JsName("AttachmentScaleRule")
  public open var attachmentScaleRule: String

  @JsName("DetachmentLocationRule")
  public open var detachmentLocationRule: String

  @JsName("DetachmentRotationRule")
  public open var detachmentRotationRule: String

  @JsName("DetachmentScaleRule")
  public open var detachmentScaleRule: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dAttachSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dAttachSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dAttachSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dAttachSection

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dAttachSection

    @JsName("C")
    public fun copy(other: Any): MovieScene3dAttachSection
  }
}

@JsName("MovieScene3DConstraintTrack")
public open external class MovieScene3dConstraintTrack(
  outer: UObject,
) : MovieSceneTrack {
  @JsName("ConstraintSections")
  public open var constraintSections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dConstraintTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dConstraintTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dConstraintTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dConstraintTrack

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dConstraintTrack

    @JsName("C")
    public fun copy(other: Any): MovieScene3dConstraintTrack
  }
}

@JsName("MovieScene3DAttachTrack")
public open external class MovieScene3dAttachTrack(
  outer: UObject,
) : MovieScene3dConstraintTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dAttachTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dAttachTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dAttachTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dAttachTrack

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dAttachTrack

    @JsName("C")
    public fun copy(other: Any): MovieScene3dAttachTrack
  }
}

@JsName("MovieScene3DPathSection_Axis")
public external object MovieScene3dPathSectionAxis {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  @JsName("NEG_X")
  public var negx: String

  @JsName("NEG_Y")
  public var negy: String

  @JsName("NEG_Z")
  public var negz: String

  @JsName("MovieScene3DPathSection_MAX")
  public var movieScene3dPathSectionMax: String
}

@JsName("MovieScene3DPathSection")
public open external class MovieScene3dPathSection(
  outer: UObject,
) : MovieScene3dConstraintSection {
  @JsName("TimingCurve")
  public open var timingCurve: MovieSceneFloatChannel

  @JsName("FrontAxisEnum")
  public open var frontAxisEnum: String

  @JsName("UpAxisEnum")
  public open var upAxisEnum: String

  @JsName("bFollow")
  public open var follow: Boolean

  @JsName("bReverse")
  public open var reverse: Boolean

  @JsName("bForceUpright")
  public open var forceUpright: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dPathSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dPathSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dPathSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dPathSection

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dPathSection

    @JsName("C")
    public fun copy(other: Any): MovieScene3dPathSection
  }
}

@JsName("MovieScene3DPathTrack")
public open external class MovieScene3dPathTrack(
  outer: UObject,
) : MovieScene3dConstraintTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dPathTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dPathTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dPathTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dPathTrack

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dPathTrack

    @JsName("C")
    public fun copy(other: Any): MovieScene3dPathTrack
  }
}

@JsName("MovieScene3DTransformPropertySystem")
public open external class MovieScene3dTransformPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dTransformPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dTransformPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dTransformPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dTransformPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dTransformPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieScene3dTransformPropertySystem
  }
}

@JsName("MovieScene3DTransformTrack")
public open external class MovieScene3dTransformTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dTransformTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dTransformTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dTransformTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dTransformTrack

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dTransformTrack

    @JsName("C")
    public fun copy(other: Any): MovieScene3dTransformTrack
  }
}

public open external class MovieSceneActorReferenceKey {
  @JsName("UObject")
  public open var uObject: MovieSceneObjectBindingId

  @JsName("ComponentName")
  public open var componentName: String

  @JsName("SocketName")
  public open var socketName: String

  public open fun clone(): MovieSceneActorReferenceKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneActorReferenceKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneActorReferenceKey
  }
}

public open external class MovieSceneActorReferenceData : MovieSceneChannel {
  @JsName("KeyTimes")
  public open var keyTimes: Array<FrameNumber>

  @JsName("DefaultValue")
  public open var defaultValue: MovieSceneActorReferenceKey

  @JsName("KeyValues")
  public open var keyValues: Array<MovieSceneActorReferenceKey>

  public override fun clone(): MovieSceneActorReferenceData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneActorReferenceData

    @JsName("C")
    public fun copy(other: Any): MovieSceneActorReferenceData
  }
}

public open external class IntegralKey {
  @JsName("Time")
  public open var time: Number

  @JsName("Value")
  public open var value: Number

  public open fun clone(): IntegralKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IntegralKey

    @JsName("C")
    public fun copy(other: Any): IntegralKey
  }
}

public open external class IntegralCurve : IndexedCurve {
  @JsName("Keys")
  public open var keys: Array<IntegralKey>

  @JsName("DefaultValue")
  public open var defaultValue: Number

  @JsName("bUseDefaultValueBeforeFirstKey")
  public open var useDefaultValueBeforeFirstKey: Boolean

  public override fun clone(): IntegralCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IntegralCurve

    @JsName("C")
    public fun copy(other: Any): IntegralCurve
  }
}

public open external class MovieSceneActorReferenceSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("ActorReferenceData")
  public open var actorReferenceData: MovieSceneActorReferenceData

  @JsName("ActorGuidIndexCurve")
  public open var actorGuidIndexCurve: IntegralCurve

  @JsName("ActorGuidStrings")
  public open var actorGuidStrings: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneActorReferenceSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneActorReferenceSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneActorReferenceSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneActorReferenceSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneActorReferenceSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneActorReferenceSection
  }
}

public open external class MovieSceneActorReferenceTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneActorReferenceTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneActorReferenceTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneActorReferenceTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneActorReferenceTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneActorReferenceTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneActorReferenceTrack
  }
}

public open external class MovieSceneAudioSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Sound")
  public open var sound: SoundBase

  @JsName("StartFrameOffset")
  public open var startFrameOffset: FrameNumber

  @JsName("StartOffset")
  public open var startOffset: Number

  @JsName("AudioStartTime")
  public open var audioStartTime: Number

  @JsName("AudioDilationFactor")
  public open var audioDilationFactor: Number

  @JsName("AudioVolume")
  public open var audioVolume: Number

  @JsName("SoundVolume")
  public open var soundVolume: MovieSceneFloatChannel

  @JsName("PitchMultiplier")
  public open var pitchMultiplier: MovieSceneFloatChannel

  @JsName("Inputs_Float")
  public open var inputsFloat: Any

  @JsName("Inputs_String")
  public open var inputsString: Any

  @JsName("Inputs_Bool")
  public open var inputsBool: Any

  @JsName("Inputs_Int")
  public open var inputsInt: Any

  @JsName("Inputs_Trigger")
  public open var inputsTrigger: Any

  @JsName("AttachActorData")
  public open var attachActorData: MovieSceneActorReferenceData

  @JsName("bLooping")
  public open var looping: Boolean

  @JsName("bSuppressSubtitles")
  public open var suppressSubtitles: Boolean

  @JsName("bOverrideAttenuation")
  public open var overrideAttenuation: Boolean

  @JsName("AttenuationSettings")
  public open var attenuationSettings: SoundAttenuation

  @JsName("OnQueueSubtitles")
  public open var onQueueSubtitles: UnrealEngineDelegate<(Subtitles: Array<SubtitleCue>,
      CueDuration: Number) -> Unit>

  @JsName("OnAudioFinished")
  public open var onAudioFinished: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnAudioPlaybackPercent")
  public open var onAudioPlaybackPercent:
      UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, PlaybackPercent: Number) -> Unit>

  @JsName("SetStartOffset")
  public open fun setStartOffset(inStartOffset: FrameNumber): Unit

  @JsName("SetSound")
  public open fun setSound(inSound: SoundBase): Unit

  @JsName("GetStartOffset")
  public open fun getStartOffset(): FrameNumber

  @JsName("GetSound")
  public open fun getSound(): SoundBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneAudioSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneAudioSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneAudioSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneAudioSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneAudioSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneAudioSection
  }
}

public open external class MovieSceneAudioTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("AudioSections")
  public open var audioSections: Array<MovieSceneSection>

  @JsName("RowHeight")
  public open var rowHeight: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneAudioTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneAudioTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneAudioTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneAudioTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneAudioTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneAudioTrack
  }
}

public open external class MovieSceneBaseValueEvaluatorSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBaseValueEvaluatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBaseValueEvaluatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBaseValueEvaluatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBaseValueEvaluatorSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBaseValueEvaluatorSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneBaseValueEvaluatorSystem
  }
}

public open external class MovieSceneBoolPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBoolPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBoolPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBoolPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBoolPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBoolPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneBoolPropertySystem
  }
}

public open external class MovieSceneBoolTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBoolTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBoolTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBoolTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBoolTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBoolTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneBoolTrack
  }
}

public open external class MovieSceneBytePropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBytePropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBytePropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBytePropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBytePropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBytePropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneBytePropertySystem
  }
}

public open external class MovieSceneByteSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("ByteCurve")
  public open var byteCurve: MovieSceneByteChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneByteSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneByteSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneByteSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneByteSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneByteSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneByteSection
  }
}

public open external class MovieSceneByteTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  @JsName("Enum")
  public open var enum: Enum

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneByteTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneByteTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneByteTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneByteTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneByteTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneByteTrack
  }
}

public open external class MovieSceneCameraAnimSectionData {
  @JsName("CameraAnim")
  public open var cameraAnim: CameraAnim

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("PlayScale")
  public open var playScale: Number

  @JsName("BlendInTime")
  public open var blendInTime: Number

  @JsName("BlendOutTime")
  public open var blendOutTime: Number

  @JsName("bLooping")
  public open var looping: Boolean

  public open fun clone(): MovieSceneCameraAnimSectionData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraAnimSectionData

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraAnimSectionData
  }
}

public open external class MovieSceneCameraAnimSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("AnimData")
  public open var animData: MovieSceneCameraAnimSectionData

  @JsName("CameraAnim")
  public open var cameraAnim: CameraAnim

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("PlayScale")
  public open var playScale: Number

  @JsName("BlendInTime")
  public open var blendInTime: Number

  @JsName("BlendOutTime")
  public open var blendOutTime: Number

  @JsName("bLooping")
  public open var looping: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraAnimSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraAnimSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraAnimSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraAnimSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraAnimSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraAnimSection
  }
}

public open external class MovieSceneCameraAnimTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("CameraAnimSections")
  public open var cameraAnimSections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraAnimTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraAnimTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraAnimTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraAnimTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraAnimTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraAnimTrack
  }
}

public open external class MovieSceneCameraCutSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("bLockPreviousCamera")
  public open var lockPreviousCamera: Boolean

  @JsName("CameraGuid")
  public open var cameraGuid: Guid

  @JsName("CameraBindingID")
  public open var cameraBindingId: MovieSceneObjectBindingId

  @JsName("InitialCameraCutTransform")
  public open var initialCameraCutTransform: Transform

  @JsName("bHasInitialCameraCutTransform")
  public open var hasInitialCameraCutTransform: Boolean

  @JsName("ThumbnailReferenceOffset")
  public open var thumbnailReferenceOffset: Number

  @JsName("SetCameraBindingID")
  public open fun setCameraBindingId(inCameraBindingId: MovieSceneObjectBindingId): Unit

  @JsName("GetCameraBindingID")
  public open fun getCameraBindingId(): MovieSceneObjectBindingId

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraCutSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraCutSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraCutSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraCutSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraCutSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraCutSection
  }
}

public open external class MovieSceneCameraCutTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("bCanBlend")
  public open var canBlend: Boolean

  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraCutTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraCutTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraCutTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraCutTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraCutTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraCutTrack
  }
}

public open external class MovieSceneTrackInstanceInput {
  @JsName("Section")
  public open var section: MovieSceneSection

  public open fun clone(): MovieSceneTrackInstanceInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackInstanceInput

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackInstanceInput
  }
}

public open external class MovieSceneTrackInstance(
  outer: UObject,
) : UObject {
  @JsName("AnimatedObject")
  public open var animatedObject: UObject

  @JsName("bIsMasterTrackInstance")
  public open var isMasterTrackInstance: Boolean

  @JsName("PrivateLinker")
  public open var privateLinker: MovieSceneEntitySystemLinker

  @JsName("Inputs")
  public open var inputs: Array<MovieSceneTrackInstanceInput>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTrackInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTrackInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTrackInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTrackInstance

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackInstance

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackInstance
  }
}

public open external class MovieSceneCameraCutTrackInstance(
  outer: UObject,
) : MovieSceneTrackInstance {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraCutTrackInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraCutTrackInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraCutTrackInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraCutTrackInstance

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraCutTrackInstance

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraCutTrackInstance
  }
}

public open external class MovieSceneCameraShakeSectionData {
  @JsName("ShakeClass")
  public open var shakeClass: UnrealEngineClass

  @JsName("PlayScale")
  public open var playScale: Number

  @JsName("PlaySpace")
  public open var playSpace: String

  @JsName("UserDefinedPlaySpace")
  public open var userDefinedPlaySpace: Rotator

  public open fun clone(): MovieSceneCameraShakeSectionData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeSectionData

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeSectionData
  }
}

public open external class MovieSceneCameraShakeSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("ShakeData")
  public open var shakeData: MovieSceneCameraShakeSectionData

  @JsName("ShakeClass")
  public open var shakeClass: UnrealEngineClass

  @JsName("PlayScale")
  public open var playScale: Number

  @JsName("PlaySpace")
  public open var playSpace: String

  @JsName("UserDefinedPlaySpace")
  public open var userDefinedPlaySpace: Rotator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraShakeSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraShakeSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraShakeSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraShakeSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeSection
  }
}

public open external class MovieSceneCameraShakeSourceShakeSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("ShakeData")
  public open var shakeData: MovieSceneCameraShakeSectionData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraShakeSourceShakeSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraShakeSourceShakeSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraShakeSourceShakeSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraShakeSourceShakeSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeSourceShakeSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeSourceShakeSection
  }
}

public open external class MovieSceneCameraShakeSourceShakeTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("CameraShakeSections")
  public open var cameraShakeSections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraShakeSourceShakeTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraShakeSourceShakeTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraShakeSourceShakeTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraShakeSourceShakeTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeSourceShakeTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeSourceShakeTrack
  }
}

public open external class MovieSceneCameraShakeSourceTrigger {
  @JsName("ShakeClass")
  public open var shakeClass: UnrealEngineClass

  @JsName("PlayScale")
  public open var playScale: Number

  @JsName("PlaySpace")
  public open var playSpace: String

  @JsName("UserDefinedPlaySpace")
  public open var userDefinedPlaySpace: Rotator

  public open fun clone(): MovieSceneCameraShakeSourceTrigger

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeSourceTrigger

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeSourceTrigger
  }
}

public open external class MovieSceneCameraShakeSourceTriggerChannel : MovieSceneChannel {
  @JsName("KeyTimes")
  public open var keyTimes: Array<FrameNumber>

  @JsName("KeyValues")
  public open var keyValues: Array<MovieSceneCameraShakeSourceTrigger>

  public override fun clone(): MovieSceneCameraShakeSourceTriggerChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeSourceTriggerChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeSourceTriggerChannel
  }
}

public open external class MovieSceneCameraShakeSourceTriggerSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Channel")
  public open var channel: MovieSceneCameraShakeSourceTriggerChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraShakeSourceTriggerSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraShakeSourceTriggerSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraShakeSourceTriggerSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraShakeSourceTriggerSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeSourceTriggerSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeSourceTriggerSection
  }
}

public open external class MovieSceneCameraShakeSourceTriggerTrack(
  outer: UObject,
) : MovieSceneTrack {
  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraShakeSourceTriggerTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraShakeSourceTriggerTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraShakeSourceTriggerTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraShakeSourceTriggerTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeSourceTriggerTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeSourceTriggerTrack
  }
}

public open external class MovieSceneCameraShakeEvaluator(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraShakeEvaluator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraShakeEvaluator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraShakeEvaluator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraShakeEvaluator

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeEvaluator

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeEvaluator
  }
}

public open external class MovieSceneCameraShakeTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("CameraShakeSections")
  public open var cameraShakeSections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCameraShakeTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCameraShakeTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCameraShakeTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCameraShakeTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCameraShakeTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneCameraShakeTrack
  }
}

public open external class MovieSceneSectionParameters {
  @JsName("StartFrameOffset")
  public open var startFrameOffset: FrameNumber

  @JsName("bCanLoop")
  public open var canLoop: Boolean

  @JsName("EndFrameOffset")
  public open var endFrameOffset: FrameNumber

  @JsName("FirstLoopStartFrameOffset")
  public open var firstLoopStartFrameOffset: FrameNumber

  @JsName("TimeScale")
  public open var timeScale: Number

  @JsName("HierarchicalBias")
  public open var hierarchicalBias: Number

  @JsName("StartOffset")
  public open var startOffset: Number

  @JsName("PrerollTime")
  public open var prerollTime: Number

  @JsName("PostrollTime")
  public open var postrollTime: Number

  public open fun clone(): MovieSceneSectionParameters

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSectionParameters

    @JsName("C")
    public fun copy(other: Any): MovieSceneSectionParameters
  }
}

public open external class MovieSceneSubSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Parameters")
  public open var parameters: MovieSceneSectionParameters

  @JsName("StartOffset")
  public open var startOffset: Number

  @JsName("TimeScale")
  public open var timeScale: Number

  public override var prerollTime: Number

  @JsName("NetworkMask")
  public open var networkMask: Number

  @JsName("SubSequence")
  public open var subSequence: MovieSceneSequence

  @JsName("SetSequence")
  public open fun setSequence(sequence: MovieSceneSequence): Unit

  @JsName("GetSequence")
  public open fun getSequence(): MovieSceneSequence

  @JsName("GetParentSequenceFrame")
  public open fun getParentSequenceFrame(inFrame: Number, parentSequence: MovieSceneSequence):
      Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSubSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSubSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSubSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSubSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSubSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneSubSection

    @JsName("GetParentSequenceFrame")
    public fun getParentSequenceFrame(
      section: MovieSceneSubSection,
      inFrame: Number,
      parentSequence: MovieSceneSequence,
    ): Number
  }
}

public open external class MovieSceneCinematicShotSection(
  outer: UObject,
) : MovieSceneSubSection {
  @JsName("ShotDisplayName")
  public open var shotDisplayName: String

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("ThumbnailReferenceOffset")
  public open var thumbnailReferenceOffset: Number

  @JsName("SetShotDisplayName")
  public open fun setShotDisplayName(inShotDisplayName: String): Unit

  @JsName("GetShotDisplayName")
  public open fun getShotDisplayName(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCinematicShotSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCinematicShotSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCinematicShotSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCinematicShotSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCinematicShotSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneCinematicShotSection
  }
}

public open external class MovieSceneSubTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSubTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSubTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSubTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSubTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSubTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneSubTrack
  }
}

public open external class MovieSceneCinematicShotTrack(
  outer: UObject,
) : MovieSceneSubTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCinematicShotTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCinematicShotTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCinematicShotTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCinematicShotTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCinematicShotTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneCinematicShotTrack
  }
}

public open external class MovieSceneColorPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneColorPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneColorPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneColorPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneColorPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneColorPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneColorPropertySystem
  }
}

public open external class MovieSceneColorSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("RedCurve")
  public open var redCurve: MovieSceneFloatChannel

  @JsName("GreenCurve")
  public open var greenCurve: MovieSceneFloatChannel

  @JsName("BlueCurve")
  public open var blueCurve: MovieSceneFloatChannel

  @JsName("AlphaCurve")
  public open var alphaCurve: MovieSceneFloatChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneColorSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneColorSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneColorSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneColorSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneColorSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneColorSection
  }
}

public open external class MovieSceneColorTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  @JsName("bIsSlateColor")
  public open var isSlateColor: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneColorTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneColorTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneColorTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneColorTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneColorTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneColorTrack
  }
}

public open external class MovieSceneComponentAttachmentInvalidatorSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneComponentAttachmentInvalidatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MovieSceneComponentAttachmentInvalidatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneComponentAttachmentInvalidatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneComponentAttachmentInvalidatorSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneComponentAttachmentInvalidatorSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneComponentAttachmentInvalidatorSystem
  }
}

public open external class MovieSceneComponentAttachmentSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneComponentAttachmentSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneComponentAttachmentSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneComponentAttachmentSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneComponentAttachmentSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneComponentAttachmentSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneComponentAttachmentSystem
  }
}

public open external class MovieSceneComponentMobilitySystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneComponentMobilitySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneComponentMobilitySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneComponentMobilitySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneComponentMobilitySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneComponentMobilitySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneComponentMobilitySystem
  }
}

public open external class MovieSceneComponentTransformSystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneComponentTransformSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneComponentTransformSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneComponentTransformSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneComponentTransformSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneComponentTransformSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneComponentTransformSystem
  }
}

public open external class MovieSceneCVarOverrides {
  @JsName("ValuesByCVar")
  public open var valuesByCVar: Any

  public open fun clone(): MovieSceneCVarOverrides

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneCVarOverrides

    @JsName("C")
    public fun copy(other: Any): MovieSceneCVarOverrides
  }
}

public open external class MovieSceneCVarSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("ConsoleVariables")
  public open var consoleVariables: MovieSceneCVarOverrides

  @JsName("SetFromString")
  public open fun setFromString(inString: String): Unit

  @JsName("GetString")
  public open fun getString(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCVarSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCVarSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCVarSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCVarSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCVarSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneCVarSection
  }
}

public open external class MovieSceneCVarTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCVarTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCVarTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCVarTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCVarTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCVarTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneCVarTrack
  }
}

public open external class MovieSceneCVarTrackInstance(
  outer: UObject,
) : MovieSceneTrackInstance {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCVarTrackInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCVarTrackInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCVarTrackInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCVarTrackInstance

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCVarTrackInstance

    @JsName("C")
    public fun copy(other: Any): MovieSceneCVarTrackInstance
  }
}

public open external class MovieSceneDataLayerSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("DataLayers")
  public open var dataLayers: Array<ActorDataLayer>

  @JsName("DesiredState")
  public open var desiredState: String

  @JsName("PrerollState")
  public open var prerollState: String

  @JsName("bFlushOnUnload")
  public open var flushOnUnload: Boolean

  @JsName("SetPrerollState")
  public open fun setPrerollState(inPrerollState: String): Unit

  @JsName("SetFlushOnUnload")
  public open fun setFlushOnUnload(flushOnUnload: Boolean): Unit

  @JsName("SetDesiredState")
  public open fun setDesiredState(inDesiredState: String): Unit

  @JsName("SetDataLayers")
  public open fun setDataLayers(inDataLayers: Array<ActorDataLayer>): Unit

  @JsName("GetPrerollState")
  public open fun getPrerollState(): String

  @JsName("GetFlushOnUnload")
  public open fun getFlushOnUnload(): Boolean

  @JsName("GetDesiredState")
  public open fun getDesiredState(): String

  @JsName("GetDataLayers")
  public open fun getDataLayers(): Array<ActorDataLayer>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDataLayerSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDataLayerSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDataLayerSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDataLayerSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDataLayerSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneDataLayerSection
  }
}

public open external class MovieSceneDataLayerSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDataLayerSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDataLayerSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDataLayerSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDataLayerSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDataLayerSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneDataLayerSystem
  }
}

public open external class MovieSceneDataLayerTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDataLayerTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDataLayerTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDataLayerTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDataLayerTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDataLayerTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneDataLayerTrack
  }
}

public open external class MovieSceneDeferredComponentMovementSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDeferredComponentMovementSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDeferredComponentMovementSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDeferredComponentMovementSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDeferredComponentMovementSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDeferredComponentMovementSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneDeferredComponentMovementSystem
  }
}

public open external class MovieSceneDoublePropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDoublePropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDoublePropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDoublePropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDoublePropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoublePropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoublePropertySystem
  }
}

public open external class MovieSceneDoubleSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("DoubleCurve")
  public open var doubleCurve: MovieSceneDoubleChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDoubleSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDoubleSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDoubleSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDoubleSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoubleSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoubleSection
  }
}

public open external class MovieSceneDoubleTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDoubleTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDoubleTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDoubleTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDoubleTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoubleTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoubleTrack
  }
}

public open external class MovieSceneEnumPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEnumPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEnumPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEnumPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEnumPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEnumPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneEnumPropertySystem
  }
}

public open external class MovieSceneEnumSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("EnumCurve")
  public open var enumCurve: MovieSceneByteChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEnumSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEnumSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEnumSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEnumSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEnumSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneEnumSection
  }
}

public open external class MovieSceneEnumTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  @JsName("Enum")
  public open var enum: Enum

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEnumTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEnumTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEnumTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEnumTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEnumTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneEnumTrack
  }
}

public open external class MovieSceneEulerTransformPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEulerTransformPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEulerTransformPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEulerTransformPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEulerTransformPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEulerTransformPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneEulerTransformPropertySystem
  }
}

public open external class MovieSceneEulerTransformTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEulerTransformTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEulerTransformTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEulerTransformTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEulerTransformTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEulerTransformTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneEulerTransformTrack
  }
}

public open external class MovieSceneEventRepeaterSection(
  outer: UObject,
) : MovieSceneEventSectionBase {
  @JsName("Event")
  public open var event: MovieSceneEvent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEventRepeaterSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEventRepeaterSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEventRepeaterSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEventRepeaterSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventRepeaterSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventRepeaterSection
  }
}

public open external class NameCurveKey {
  @JsName("Time")
  public open var time: Number

  @JsName("Value")
  public open var value: String

  public open fun clone(): NameCurveKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NameCurveKey

    @JsName("C")
    public fun copy(other: Any): NameCurveKey
  }
}

public open external class NameCurve : IndexedCurve {
  @JsName("Keys")
  public open var keys: Array<NameCurveKey>

  public override fun clone(): NameCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NameCurve

    @JsName("C")
    public fun copy(other: Any): NameCurve
  }
}

public open external class MovieSceneEventParameters {
  public open fun clone(): MovieSceneEventParameters

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventParameters

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventParameters
  }
}

public open external class EventPayload {
  @JsName("EventName")
  public open var eventName: String

  @JsName("Parameters")
  public open var parameters: MovieSceneEventParameters

  public open fun clone(): EventPayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EventPayload

    @JsName("C")
    public fun copy(other: Any): EventPayload
  }
}

public open external class MovieSceneEventSectionData : MovieSceneChannel {
  @JsName("Times")
  public open var times: Array<FrameNumber>

  @JsName("KeyValues")
  public open var keyValues: Array<EventPayload>

  @JsName("KeyTimes")
  public open var keyTimes: Array<Number>

  public override fun clone(): MovieSceneEventSectionData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventSectionData

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventSectionData
  }
}

public open external class MovieSceneEventSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Events")
  public open var events: NameCurve

  @JsName("EventData")
  public open var eventData: MovieSceneEventSectionData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEventSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEventSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEventSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEventSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventSection
  }
}

public open external class MovieSceneEventSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEventSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEventSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEventSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEventSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventSystem
  }
}

public open external class MovieScenePreSpawnEventSystem(
  outer: UObject,
) : MovieSceneEventSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePreSpawnEventSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePreSpawnEventSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePreSpawnEventSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePreSpawnEventSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePreSpawnEventSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePreSpawnEventSystem
  }
}

public open external class MovieScenePostSpawnEventSystem(
  outer: UObject,
) : MovieSceneEventSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePostSpawnEventSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePostSpawnEventSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePostSpawnEventSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePostSpawnEventSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePostSpawnEventSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePostSpawnEventSystem
  }
}

public open external class MovieScenePostEvalEventSystem(
  outer: UObject,
) : MovieSceneEventSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePostEvalEventSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePostEvalEventSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePostEvalEventSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePostEvalEventSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePostEvalEventSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePostEvalEventSystem
  }
}

@JsName("EFireEventsAtPosition")
public external object FireEventsAtPosition {
  public var AtStartOfEvaluation: String

  public var AtEndOfEvaluation: String

  public var AfterSpawn: String

  @JsName("EFireEventsAtPosition_MAX")
  public var Max: String
}

public open external class MovieSceneEventChannel : MovieSceneChannel {
  @JsName("KeyTimes")
  public open var keyTimes: Array<FrameNumber>

  @JsName("KeyValues")
  public open var keyValues: Array<MovieSceneEvent>

  public override fun clone(): MovieSceneEventChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventChannel
  }
}

public open external class MovieSceneEventTriggerSection(
  outer: UObject,
) : MovieSceneEventSectionBase {
  @JsName("EventChannel")
  public open var eventChannel: MovieSceneEventChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEventTriggerSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEventTriggerSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEventTriggerSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEventTriggerSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventTriggerSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventTriggerSection
  }
}

public open external class MovieSceneEventTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("bFireEventsWhenForwards")
  public open var fireEventsWhenForwards: Boolean

  @JsName("bFireEventsWhenBackwards")
  public open var fireEventsWhenBackwards: Boolean

  @JsName("EventPosition")
  public open var eventPosition: String

  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  @JsName("AddEventRepeaterSection")
  public open fun addEventRepeaterSection(): MovieSceneEventRepeaterSection

  @JsName("AddEventTriggerSection")
  public open fun addEventTriggerSection(): MovieSceneEventTriggerSection

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEventTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEventTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEventTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEventTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventTrack

    @JsName("AddEventRepeaterSection")
    public fun addEventRepeaterSection(inTrack: MovieSceneEventTrack):
        MovieSceneEventRepeaterSection

    @JsName("AddEventTriggerSection")
    public fun addEventTriggerSection(inTrack: MovieSceneEventTrack): MovieSceneEventTriggerSection
  }
}

public open external class MovieSceneFadeSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("FloatCurve")
  public open var floatCurve: MovieSceneFloatChannel

  @JsName("FadeColor")
  public open var fadeColor: LinearColor

  @JsName("bFadeAudio")
  public open var fadeAudio: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFadeSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFadeSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFadeSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFadeSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFadeSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneFadeSection
  }
}

public open external class MovieSceneFloatTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFloatTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFloatTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFloatTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFloatTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatTrack
  }
}

public open external class MovieSceneFadeTrack(
  outer: UObject,
) : MovieSceneFloatTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFadeTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFadeTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFadeTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFadeTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFadeTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneFadeTrack
  }
}

public open external class MovieSceneFloatPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFloatPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFloatPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFloatPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFloatPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatPropertySystem
  }
}

public open external class MovieSceneFloatSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("FloatCurve")
  public open var floatCurve: MovieSceneFloatChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFloatSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFloatSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFloatSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFloatSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatSection
  }
}

public open external class MovieSceneHierarchicalBiasSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneHierarchicalBiasSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneHierarchicalBiasSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneHierarchicalBiasSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneHierarchicalBiasSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneHierarchicalBiasSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneHierarchicalBiasSystem
  }
}

public open external class MovieSceneInitialValueSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneInitialValueSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneInitialValueSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneInitialValueSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneInitialValueSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneInitialValueSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneInitialValueSystem
  }
}

public open external class MovieSceneIntegerPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneIntegerPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneIntegerPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneIntegerPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneIntegerPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneIntegerPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneIntegerPropertySystem
  }
}

public open external class MovieSceneIntegerSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("IntegerCurve")
  public open var integerCurve: MovieSceneIntegerChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneIntegerSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneIntegerSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneIntegerSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneIntegerSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneIntegerSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneIntegerSection
  }
}

public open external class MovieSceneIntegerTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneIntegerTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneIntegerTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneIntegerTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneIntegerTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneIntegerTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneIntegerTrack
  }
}

public open external class MovieSceneInterrogatedPropertyInstantiatorSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneInterrogatedPropertyInstantiatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MovieSceneInterrogatedPropertyInstantiatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneInterrogatedPropertyInstantiatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneInterrogatedPropertyInstantiatorSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneInterrogatedPropertyInstantiatorSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneInterrogatedPropertyInstantiatorSystem
  }
}

@JsName("ELevelVisibility")
public external object LevelVisibility {
  public var Visible: String

  public var Hidden: String

  @JsName("ELevelVisibility_MAX")
  public var Max: String
}

public open external class MovieSceneLevelVisibilitySection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Visibility")
  public open var visibility: String

  @JsName("LevelNames")
  public open var levelNames: Array<String>

  @JsName("SetVisibility")
  public open fun setVisibility(inVisibility: String): Unit

  @JsName("SetLevelNames")
  public open fun setLevelNames(inLevelNames: Array<String>): Unit

  @JsName("GetVisibility")
  public open fun getVisibility(): String

  @JsName("GetLevelNames")
  public open fun getLevelNames(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneLevelVisibilitySection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneLevelVisibilitySection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneLevelVisibilitySection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneLevelVisibilitySection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneLevelVisibilitySection

    @JsName("C")
    public fun copy(other: Any): MovieSceneLevelVisibilitySection
  }
}

public open external class MovieSceneLevelVisibilitySystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneLevelVisibilitySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneLevelVisibilitySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneLevelVisibilitySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneLevelVisibilitySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneLevelVisibilitySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneLevelVisibilitySystem
  }
}

public open external class MovieSceneLevelVisibilityTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneLevelVisibilityTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneLevelVisibilityTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneLevelVisibilityTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneLevelVisibilityTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneLevelVisibilityTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneLevelVisibilityTrack
  }
}

public open external class MovieSceneMaterialParameterCollectionTrack(
  outer: UObject,
) : MovieSceneMaterialTrack {
  public open var MPC: MaterialParameterCollection

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMaterialParameterCollectionTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MovieSceneMaterialParameterCollectionTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMaterialParameterCollectionTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMaterialParameterCollectionTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMaterialParameterCollectionTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneMaterialParameterCollectionTrack
  }
}

public open external class MovieSceneComponentMaterialTrack(
  outer: UObject,
) : MovieSceneMaterialTrack {
  @JsName("MaterialIndex")
  public open var materialIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneComponentMaterialTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneComponentMaterialTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneComponentMaterialTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneComponentMaterialTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneComponentMaterialTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneComponentMaterialTrack
  }
}

public open external class MovieSceneMotionVectorSimulationSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMotionVectorSimulationSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMotionVectorSimulationSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMotionVectorSimulationSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMotionVectorSimulationSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMotionVectorSimulationSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneMotionVectorSimulationSystem
  }
}

public open external class MovieSceneObjectPathChannelKeyValue {
  @JsName("SoftPtr")
  public open var softPtr: UObject

  @JsName("HardPtr")
  public open var hardPtr: UObject

  public open fun clone(): MovieSceneObjectPathChannelKeyValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneObjectPathChannelKeyValue

    @JsName("C")
    public fun copy(other: Any): MovieSceneObjectPathChannelKeyValue
  }
}

public open external class MovieSceneObjectPathChannel : MovieSceneChannel {
  @JsName("PropertyClass")
  public open var propertyClass: UnrealEngineClass

  @JsName("Times")
  public open var times: Array<FrameNumber>

  @JsName("Values")
  public open var values: Array<MovieSceneObjectPathChannelKeyValue>

  @JsName("DefaultValue")
  public open var defaultValue: MovieSceneObjectPathChannelKeyValue

  public override fun clone(): MovieSceneObjectPathChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneObjectPathChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneObjectPathChannel
  }
}

public open external class MovieSceneObjectPropertySection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("ObjectChannel")
  public open var objectChannel: MovieSceneObjectPathChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneObjectPropertySection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneObjectPropertySection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneObjectPropertySection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneObjectPropertySection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneObjectPropertySection

    @JsName("C")
    public fun copy(other: Any): MovieSceneObjectPropertySection
  }
}

public open external class MovieSceneObjectPropertyTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  @JsName("PropertyClass")
  public open var propertyClass: UnrealEngineClass

  @JsName("GetObjectPropertyClass")
  public open fun getObjectPropertyClass(): UnrealEngineClass

  @JsName("SetObjectPropertyClass")
  public open fun setObjectPropertyClass(propertyClass: UnrealEngineClass): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneObjectPropertyTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneObjectPropertyTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneObjectPropertyTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneObjectPropertyTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneObjectPropertyTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneObjectPropertyTrack

    @JsName("GetObjectPropertyClass")
    public fun getObjectPropertyClass(track: MovieSceneObjectPropertyTrack): UnrealEngineClass

    @JsName("SetObjectPropertyClass")
    public fun setObjectPropertyClass(track: MovieSceneObjectPropertyTrack,
        propertyClass: UnrealEngineClass): Unit
  }
}

public open external class MovieSceneParticleParameterTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneParticleParameterTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneParticleParameterTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneParticleParameterTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneParticleParameterTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneParticleParameterTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneParticleParameterTrack
  }
}

public open external class MovieSceneParticleChannel : MovieSceneByteChannel {
  public override fun clone(): MovieSceneParticleChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneParticleChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneParticleChannel
  }
}

public open external class MovieSceneParticleSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("ParticleKeys")
  public open var particleKeys: MovieSceneParticleChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneParticleSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneParticleSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneParticleSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneParticleSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneParticleSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneParticleSection
  }
}

public open external class MovieSceneParticleTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("ParticleSections")
  public open var particleSections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneParticleTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneParticleTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneParticleTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneParticleTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneParticleTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneParticleTrack
  }
}

public open external class MovieSceneBlenderSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBlenderSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBlenderSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBlenderSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBlenderSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBlenderSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneBlenderSystem
  }
}

public open external class MovieScenePiecewiseBoolBlenderSystem(
  outer: UObject,
) : MovieSceneBlenderSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePiecewiseBoolBlenderSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePiecewiseBoolBlenderSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePiecewiseBoolBlenderSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePiecewiseBoolBlenderSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePiecewiseBoolBlenderSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePiecewiseBoolBlenderSystem
  }
}

public open external class MovieScenePiecewiseByteBlenderSystem(
  outer: UObject,
) : MovieSceneBlenderSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePiecewiseByteBlenderSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePiecewiseByteBlenderSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePiecewiseByteBlenderSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePiecewiseByteBlenderSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePiecewiseByteBlenderSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePiecewiseByteBlenderSystem
  }
}

public open external class MovieScenePiecewiseDoubleBlenderSystem(
  outer: UObject,
) : MovieSceneBlenderSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePiecewiseDoubleBlenderSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePiecewiseDoubleBlenderSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePiecewiseDoubleBlenderSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePiecewiseDoubleBlenderSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePiecewiseDoubleBlenderSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePiecewiseDoubleBlenderSystem
  }
}

public open external class MovieScenePiecewiseEnumBlenderSystem(
  outer: UObject,
) : MovieSceneBlenderSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePiecewiseEnumBlenderSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePiecewiseEnumBlenderSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePiecewiseEnumBlenderSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePiecewiseEnumBlenderSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePiecewiseEnumBlenderSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePiecewiseEnumBlenderSystem
  }
}

public open external class MovieScenePiecewiseFloatBlenderSystem(
  outer: UObject,
) : MovieSceneBlenderSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePiecewiseFloatBlenderSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePiecewiseFloatBlenderSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePiecewiseFloatBlenderSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePiecewiseFloatBlenderSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePiecewiseFloatBlenderSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePiecewiseFloatBlenderSystem
  }
}

public open external class MovieScenePiecewiseIntegerBlenderSystem(
  outer: UObject,
) : MovieSceneBlenderSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePiecewiseIntegerBlenderSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePiecewiseIntegerBlenderSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePiecewiseIntegerBlenderSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePiecewiseIntegerBlenderSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePiecewiseIntegerBlenderSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePiecewiseIntegerBlenderSystem
  }
}

@JsName("EMovieScenePlayerStatus")
public external object MovieScenePlayerStatus {
  public var Stopped: String

  public var Playing: String

  public var Scrubbing: String

  public var Jumping: String

  public var Stepping: String

  public var Paused: String

  public var MAX: String
}

public open external class MovieSceneSequenceLoopCount {
  @JsName("Value")
  public open var value: Number

  public open fun clone(): MovieSceneSequenceLoopCount

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceLoopCount

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceLoopCount
  }
}

public open external class MovieSceneSequencePlaybackSettings {
  @JsName("bAutoPlay")
  public open var autoPlay: Boolean

  @JsName("LoopCount")
  public open var loopCount: MovieSceneSequenceLoopCount

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("StartTime")
  public open var startTime: Number

  @JsName("bRandomStartTime")
  public open var randomStartTime: Boolean

  @JsName("bRestoreState")
  public open var restoreState: Boolean

  @JsName("bDisableMovementInput")
  public open var disableMovementInput: Boolean

  @JsName("bDisableLookAtInput")
  public open var disableLookAtInput: Boolean

  @JsName("bHidePlayer")
  public open var hidePlayer: Boolean

  @JsName("bHideHud")
  public open var hideHud: Boolean

  @JsName("bDisableCameraCuts")
  public open var disableCameraCuts: Boolean

  @JsName("bPauseAtEnd")
  public open var pauseAtEnd: Boolean

  public open fun clone(): MovieSceneSequencePlaybackSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequencePlaybackSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequencePlaybackSettings
  }
}

public open external class MovieSceneSequenceReplProperties {
  @JsName("LastKnownPosition")
  public open var lastKnownPosition: FrameTime

  @JsName("LastKnownStatus")
  public open var lastKnownStatus: String

  @JsName("LastKnownNumLoops")
  public open var lastKnownNumLoops: Number

  public open fun clone(): MovieSceneSequenceReplProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceReplProperties

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceReplProperties
  }
}

public open external class MovieSceneSequenceActorPointers {
  @JsName("SequenceActor")
  public open var sequenceActor: Actor

  @JsName("SequenceActorInterface")
  public open var sequenceActorInterface: Any

  public open fun clone(): MovieSceneSequenceActorPointers

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceActorPointers

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceActorPointers
  }
}

public open external class MovieSceneSequenceTickManager(
  outer: UObject,
) : UObject {
  @JsName("SequenceActors")
  public open var sequenceActors: Array<MovieSceneSequenceActorPointers>

  @JsName("Linker")
  public open var linker: MovieSceneEntitySystemLinker

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSequenceTickManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSequenceTickManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSequenceTickManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSequenceTickManager

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceTickManager

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceTickManager
  }
}

@JsName("EMovieScenePositionType")
public external object MovieScenePositionType {
  public var Frame: String

  public var Time: String

  public var MarkedFrame: String

  @JsName("EMovieScenePositionType_MAX")
  public var Max: String
}

@JsName("EUpdatePositionMethod")
public external object UpdatePositionMethod {
  public var Play: String

  public var Jump: String

  public var Scrub: String

  @JsName("EUpdatePositionMethod_MAX")
  public var Max: String
}

public open external class MovieSceneSequencePlaybackParams {
  @JsName("Frame")
  public open var frame: FrameTime

  @JsName("Time")
  public open var time: Number

  @JsName("MarkedFrame")
  public open var markedFrame: String

  @JsName("PositionType")
  public open var positionType: String

  @JsName("UpdateMethod")
  public open var updateMethod: String

  @JsName("bHasJumped")
  public open var hasJumped: Boolean

  public open fun clone(): MovieSceneSequencePlaybackParams

  @JsName("PlayTo")
  public open fun playTo(): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequencePlaybackParams

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequencePlaybackParams

    @JsName("PlayTo")
    public fun playTo(playbackParams: MovieSceneSequencePlaybackParams): Unit
  }
}

public open external class MovieSceneSequencePlayToParams {
  @JsName("bExclusive")
  public open var exclusive: Boolean

  public open fun clone(): MovieSceneSequencePlayToParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequencePlayToParams

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequencePlayToParams
  }
}

public open external class MovieSceneSequencePlayer(
  outer: UObject,
) : UObject {
  @JsName("OnPlay")
  public open var onPlay: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnPlayReverse")
  public open var onPlayReverse: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnStop")
  public open var onStop: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnPause")
  public open var onPause: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnFinished")
  public open var onFinished: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("Status")
  public open var status: String

  @JsName("bReversePlayback")
  public open var reversePlayback: Boolean

  @JsName("Sequence")
  public open var sequence: MovieSceneSequence

  @JsName("StartTime")
  public open var startTime: FrameNumber

  @JsName("DurationFrames")
  public open var durationFrames: Number

  @JsName("DurationSubFrames")
  public open var durationSubFrames: Number

  @JsName("CurrentNumLoops")
  public open var currentNumLoops: Number

  @JsName("PlaybackSettings")
  public open var playbackSettings: MovieSceneSequencePlaybackSettings

  @JsName("RootTemplateInstance")
  public open var rootTemplateInstance: MovieSceneRootEvaluationTemplateInstance

  @JsName("NetSyncProps")
  public open var netSyncProps: MovieSceneSequenceReplProperties

  @JsName("PlaybackClient")
  public open var playbackClient: Any

  @JsName("TickManager")
  public open var tickManager: MovieSceneSequenceTickManager

  @JsName("StopAtCurrentTime")
  public open fun stopAtCurrentTime(): Unit

  @JsName("Stop")
  public open fun stop(): Unit

  @JsName("SetTimeRange")
  public open fun setTimeRange(startTime: Number, duration: Number): Unit

  @JsName("SetPlayRate")
  public open fun setPlayRate(playRate: Number): Unit

  @JsName("SetPlaybackPosition")
  public open fun setPlaybackPosition(playbackParams: MovieSceneSequencePlaybackParams): Unit

  @JsName("SetFrameRate")
  public open fun setFrameRate(frameRate: FrameRate): Unit

  @JsName("SetFrameRange")
  public open fun setFrameRange(
    startFrame: Number,
    duration: Number,
    subFrames: Number,
  ): Unit

  @JsName("SetDisableCameraCuts")
  public open fun setDisableCameraCuts(inDisableCameraCuts: Boolean): Unit

  @JsName("ScrubToSeconds")
  public open fun scrubToSeconds(timeInSeconds: Number): Unit

  @JsName("ScrubToMarkedFrame")
  public open fun scrubToMarkedFrame(inLabel: String): Boolean

  @JsName("ScrubToFrame")
  public open fun scrubToFrame(newPosition: FrameTime): Unit

  @JsName("Scrub")
  public open fun scrub(): Unit

  @JsName("RPC_OnStopEvent")
  public open fun rpcOnStopEvent(stoppedTime: FrameTime): Unit

  @JsName("RPC_OnFinishPlaybackEvent")
  public open fun rpcOnFinishPlaybackEvent(stoppedTime: FrameTime): Unit

  @JsName("RPC_ExplicitServerUpdateEvent")
  public open fun rpcExplicitServerUpdateEvent(method: String, relevantTime: FrameTime): Unit

  @JsName("RestoreState")
  public open fun restoreState(): Unit

  @JsName("PlayToSeconds")
  public open fun playToSeconds(timeInSeconds: Number): Unit

  @JsName("PlayToMarkedFrame")
  public open fun playToMarkedFrame(inLabel: String): Boolean

  @JsName("PlayToFrame")
  public open fun playToFrame(newPosition: FrameTime): Unit

  @JsName("PlayTo")
  public open fun playTo(playbackParams: MovieSceneSequencePlaybackParams,
      playToParams: MovieSceneSequencePlayToParams): Unit

  @JsName("PlayReverse")
  public open fun playReverse(): Unit

  @JsName("PlayLooping")
  public open fun playLooping(numLoops: Number): Unit

  @JsName("Play")
  public open fun play(): Unit

  @JsName("Pause")
  public open fun pause(): Unit

  @JsName("JumpToSeconds")
  public open fun jumpToSeconds(timeInSeconds: Number): Unit

  @JsName("JumpToMarkedFrame")
  public open fun jumpToMarkedFrame(inLabel: String): Boolean

  @JsName("JumpToFrame")
  public open fun jumpToFrame(newPosition: FrameTime): Unit

  @JsName("IsReversed")
  public open fun isReversed(): Boolean

  @JsName("IsPlaying")
  public open fun isPlaying(): Boolean

  @JsName("IsPaused")
  public open fun isPaused(): Boolean

  @JsName("GoToEndAndStop")
  public open fun goToEndAndStop(): Unit

  @JsName("GetStartTime")
  public open fun getStartTime(): QualifiedFrameTime

  @JsName("GetSequenceName")
  public open fun getSequenceName(addClientInfo: Boolean): String

  @JsName("GetSequence")
  public open fun getSequence(): MovieSceneSequence

  @JsName("GetPlayRate")
  public open fun getPlayRate(): Number

  @JsName("GetObjectBindings")
  public open fun getObjectBindings(inObject: UObject): Array<MovieSceneObjectBindingId>

  @JsName("GetFrameRate")
  public open fun getFrameRate(): FrameRate

  @JsName("GetFrameDuration")
  public open fun getFrameDuration(): Number

  @JsName("GetEndTime")
  public open fun getEndTime(): QualifiedFrameTime

  @JsName("GetDuration")
  public open fun getDuration(): QualifiedFrameTime

  @JsName("GetDisableCameraCuts")
  public open fun getDisableCameraCuts(): Boolean

  @JsName("GetCurrentTime")
  public open fun getCurrentTime(): QualifiedFrameTime

  @JsName("GetBoundObjects")
  public open fun getBoundObjects(objectBinding: MovieSceneObjectBindingId): Array<UObject>

  @JsName("ChangePlaybackDirection")
  public open fun changePlaybackDirection(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSequencePlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSequencePlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSequencePlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSequencePlayer

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequencePlayer

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequencePlayer
  }
}

@JsName("MovieSceneAsyncAction_SequencePrediction")
public open external class MovieSceneAsyncActionSequencePrediction(
  outer: UObject,
) : BlueprintAsyncActionBase {
  @JsName("Result")
  public open var result: UnrealEngineMulticastDelegate<(PredictedTransform: Transform) -> Unit>

  @JsName("Failure")
  public open var failure: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SequencePlayer")
  public open var sequencePlayer: MovieSceneSequencePlayer

  @JsName("SceneComponent")
  public open var sceneComponent: SceneComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneAsyncActionSequencePrediction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneAsyncActionSequencePrediction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneAsyncActionSequencePrediction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneAsyncActionSequencePrediction

    @JsName("PredictWorldTransformAtTime")
    public fun predictWorldTransformAtTime(
      player: MovieSceneSequencePlayer,
      targetComponent: SceneComponent,
      timeInSeconds: Number,
    ): MovieSceneAsyncActionSequencePrediction

    @JsName("PredictWorldTransformAtFrame")
    public fun predictWorldTransformAtFrame(
      player: MovieSceneSequencePlayer,
      targetComponent: SceneComponent,
      frameTime: FrameTime,
    ): MovieSceneAsyncActionSequencePrediction

    @JsName("PredictLocalTransformAtTime")
    public fun predictLocalTransformAtTime(
      player: MovieSceneSequencePlayer,
      targetComponent: SceneComponent,
      timeInSeconds: Number,
    ): MovieSceneAsyncActionSequencePrediction

    @JsName("PredictLocalTransformAtFrame")
    public fun predictLocalTransformAtFrame(
      player: MovieSceneSequencePlayer,
      targetComponent: SceneComponent,
      frameTime: FrameTime,
    ): MovieSceneAsyncActionSequencePrediction

    @JsName("C")
    public fun copy(other: UObject): MovieSceneAsyncActionSequencePrediction

    @JsName("C")
    public fun copy(other: Any): MovieSceneAsyncActionSequencePrediction
  }
}

public open external class MovieScenePredictionSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  @JsName("PendingPredictions")
  public open var pendingPredictions: Array<MovieSceneAsyncActionSequencePrediction>

  @JsName("ProcessingPredictions")
  public open var processingPredictions: Array<MovieSceneAsyncActionSequencePrediction>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePredictionSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePredictionSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePredictionSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePredictionSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePredictionSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePredictionSystem
  }
}

public open external class MovieScenePrimitiveMaterialSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("MaterialChannel")
  public open var materialChannel: MovieSceneObjectPathChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePrimitiveMaterialSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePrimitiveMaterialSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePrimitiveMaterialSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePrimitiveMaterialSection

    @JsName("C")
    public fun copy(other: UObject): MovieScenePrimitiveMaterialSection

    @JsName("C")
    public fun copy(other: Any): MovieScenePrimitiveMaterialSection
  }
}

public open external class MovieScenePrimitiveMaterialTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  @JsName("MaterialIndex")
  public open var materialIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePrimitiveMaterialTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePrimitiveMaterialTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePrimitiveMaterialTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePrimitiveMaterialTrack

    @JsName("C")
    public fun copy(other: UObject): MovieScenePrimitiveMaterialTrack

    @JsName("C")
    public fun copy(other: Any): MovieScenePrimitiveMaterialTrack
  }
}

public open external class MovieSceneQuaternionInterpolationRotationSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneQuaternionInterpolationRotationSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MovieSceneQuaternionInterpolationRotationSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneQuaternionInterpolationRotationSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneQuaternionInterpolationRotationSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneQuaternionInterpolationRotationSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneQuaternionInterpolationRotationSystem
  }
}

public open external class MovieSceneSkeletalAnimationParams {
  @JsName("Animation")
  public open var animation: AnimSequenceBase

  @JsName("FirstLoopStartFrameOffset")
  public open var firstLoopStartFrameOffset: FrameNumber

  @JsName("StartFrameOffset")
  public open var startFrameOffset: FrameNumber

  @JsName("EndFrameOffset")
  public open var endFrameOffset: FrameNumber

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("bReverse")
  public open var reverse: Boolean

  @JsName("SlotName")
  public open var slotName: String

  @JsName("MirrorDataTable")
  public open var mirrorDataTable: MirrorDataTable

  @JsName("Weight")
  public open var weight: MovieSceneFloatChannel

  @JsName("bSkipAnimNotifiers")
  public open var skipAnimNotifiers: Boolean

  @JsName("bForceCustomMode")
  public open var forceCustomMode: Boolean

  @JsName("StartOffset")
  public open var startOffset: Number

  @JsName("EndOffset")
  public open var endOffset: Number

  public open fun clone(): MovieSceneSkeletalAnimationParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSkeletalAnimationParams

    @JsName("C")
    public fun copy(other: Any): MovieSceneSkeletalAnimationParams
  }
}

public open external class MovieSceneSkeletalAnimationSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Params")
  public open var params: MovieSceneSkeletalAnimationParams

  @JsName("AnimSequence")
  public open var animSequence: AnimSequence

  @JsName("Animation")
  public open var animation: AnimSequenceBase

  @JsName("StartOffset")
  public open var startOffset: Number

  @JsName("EndOffset")
  public open var endOffset: Number

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("bReverse")
  public open var reverse: Boolean

  @JsName("SlotName")
  public open var slotName: String

  @JsName("StartLocationOffset")
  public open var startLocationOffset: Vector

  @JsName("StartRotationOffset")
  public open var startRotationOffset: Rotator

  @JsName("bMatchWithPrevious")
  public open var matchWithPrevious: Boolean

  @JsName("MatchedBoneName")
  public open var matchedBoneName: String

  @JsName("MatchedLocationOffset")
  public open var matchedLocationOffset: Vector

  @JsName("MatchedRotationOffset")
  public open var matchedRotationOffset: Rotator

  @JsName("bMatchTranslation")
  public open var matchTranslation: Boolean

  @JsName("bMatchIncludeZHeight")
  public open var matchIncludeZHeight: Boolean

  @JsName("bMatchRotationYaw")
  public open var matchRotationYaw: Boolean

  @JsName("bMatchRotationPitch")
  public open var matchRotationPitch: Boolean

  @JsName("bMatchRotationRoll")
  public open var matchRotationRoll: Boolean

  @JsName("bShowSkeleton")
  public open var showSkeleton: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSkeletalAnimationSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSkeletalAnimationSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSkeletalAnimationSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSkeletalAnimationSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSkeletalAnimationSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneSkeletalAnimationSection
  }
}

public open external class MovieSceneSkeletalAnimRootMotionTrackParams {
  public open fun clone(): MovieSceneSkeletalAnimRootMotionTrackParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSkeletalAnimRootMotionTrackParams

    @JsName("C")
    public fun copy(other: Any): MovieSceneSkeletalAnimRootMotionTrackParams
  }
}

public open external class MovieSceneSkeletalAnimationTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("AnimationSections")
  public open var animationSections: Array<MovieSceneSection>

  @JsName("bUseLegacySectionIndexBlend")
  public open var useLegacySectionIndexBlend: Boolean

  @JsName("RootMotionParams")
  public open var rootMotionParams: MovieSceneSkeletalAnimRootMotionTrackParams

  @JsName("bBlendFirstChildOfRoot")
  public open var blendFirstChildOfRoot: Boolean

  @JsName("bShowRootMotionTrail")
  public open var showRootMotionTrail: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSkeletalAnimationTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSkeletalAnimationTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSkeletalAnimationTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSkeletalAnimationTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSkeletalAnimationTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneSkeletalAnimationTrack
  }
}

public open external class MovieSceneSlomoSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("FloatCurve")
  public open var floatCurve: MovieSceneFloatChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSlomoSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSlomoSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSlomoSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSlomoSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSlomoSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneSlomoSection
  }
}

public open external class MovieSceneSlomoTrack(
  outer: UObject,
) : MovieSceneFloatTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSlomoTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSlomoTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSlomoTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSlomoTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSlomoTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneSlomoTrack
  }
}

public open external class MovieSceneStringChannel : MovieSceneChannel {
  @JsName("Times")
  public open var times: Array<FrameNumber>

  @JsName("Values")
  public open var values: Array<String>

  @JsName("DefaultValue")
  public open var defaultValue: String

  @JsName("bHasDefaultValue")
  public open var hasDefaultValue: Boolean

  public override fun clone(): MovieSceneStringChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneStringChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneStringChannel
  }
}

public open external class MovieSceneStringSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("StringCurve")
  public open var stringCurve: MovieSceneStringChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneStringSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneStringSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneStringSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneStringSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneStringSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneStringSection
  }
}

public open external class MovieSceneStringTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneStringTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneStringTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneStringTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneStringTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneStringTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneStringTrack
  }
}

public open external class MovieSceneTransformOriginSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTransformOriginSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTransformOriginSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTransformOriginSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTransformOriginSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTransformOriginSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneTransformOriginSystem
  }
}

public open external class MovieSceneTransformTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTransformTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTransformTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTransformTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTransformTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTransformTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneTransformTrack
  }
}

public open external class MovieSceneFloatVectorPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFloatVectorPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFloatVectorPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFloatVectorPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFloatVectorPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatVectorPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatVectorPropertySystem
  }
}

public open external class MovieSceneDoubleVectorPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDoubleVectorPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDoubleVectorPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDoubleVectorPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDoubleVectorPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoubleVectorPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoubleVectorPropertySystem
  }
}

public open external class MovieSceneFloatVectorSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Curves")
  public open var curves: MovieSceneFloatChannel

  @JsName("ChannelsUsed")
  public open var channelsUsed: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFloatVectorSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFloatVectorSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFloatVectorSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFloatVectorSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatVectorSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatVectorSection
  }
}

public open external class MovieSceneDoubleVectorSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Curves")
  public open var curves: MovieSceneDoubleChannel

  @JsName("ChannelsUsed")
  public open var channelsUsed: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDoubleVectorSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDoubleVectorSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDoubleVectorSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDoubleVectorSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoubleVectorSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoubleVectorSection
  }
}

public open external class MovieSceneFloatVectorTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  @JsName("NumChannelsUsed")
  public open var numChannelsUsed: Number

  @JsName("GetNumChannelsUsed")
  public open fun getNumChannelsUsed(): Number

  @JsName("SetNumChannelsUsed")
  public open fun setNumChannelsUsed(inNumChannelsUsed: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFloatVectorTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFloatVectorTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFloatVectorTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFloatVectorTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatVectorTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatVectorTrack

    @JsName("GetNumChannelsUsed")
    public fun getNumChannelsUsed(track: MovieSceneFloatVectorTrack): Number

    @JsName("SetNumChannelsUsed")
    public fun setNumChannelsUsed(track: MovieSceneFloatVectorTrack, inNumChannelsUsed: Number):
        Unit
  }
}

public open external class MovieSceneDoubleVectorTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  @JsName("NumChannelsUsed")
  public open var numChannelsUsed: Number

  @JsName("GetNumChannelsUsed")
  public open fun getNumChannelsUsed(): Number

  @JsName("SetNumChannelsUsed")
  public open fun setNumChannelsUsed(inNumChannelsUsed: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDoubleVectorTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDoubleVectorTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDoubleVectorTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDoubleVectorTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoubleVectorTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoubleVectorTrack

    @JsName("GetNumChannelsUsed")
    public fun getNumChannelsUsed(track: MovieSceneDoubleVectorTrack): Number

    @JsName("SetNumChannelsUsed")
    public fun setNumChannelsUsed(track: MovieSceneDoubleVectorTrack, inNumChannelsUsed: Number):
        Unit
  }
}

public open external class MovieSceneVisibilityTrack(
  outer: UObject,
) : MovieSceneBoolTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneVisibilityTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneVisibilityTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneVisibilityTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneVisibilityTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneVisibilityTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneVisibilityTrack
  }
}

public open external class MovieSceneHierarchicalEasingInstantiatorSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneHierarchicalEasingInstantiatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MovieSceneHierarchicalEasingInstantiatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneHierarchicalEasingInstantiatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneHierarchicalEasingInstantiatorSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneHierarchicalEasingInstantiatorSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneHierarchicalEasingInstantiatorSystem
  }
}

public open external class WeightAndEasingEvaluatorSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WeightAndEasingEvaluatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WeightAndEasingEvaluatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WeightAndEasingEvaluatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WeightAndEasingEvaluatorSystem

    @JsName("C")
    public fun copy(other: UObject): WeightAndEasingEvaluatorSystem

    @JsName("C")
    public fun copy(other: Any): WeightAndEasingEvaluatorSystem
  }
}

public open external class EngineCustomTimeStep(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EngineCustomTimeStep

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EngineCustomTimeStep

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EngineCustomTimeStep

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EngineCustomTimeStep

    @JsName("C")
    public fun copy(other: UObject): EngineCustomTimeStep

    @JsName("C")
    public fun copy(other: Any): EngineCustomTimeStep
  }
}

public open external class FixedFrameRateCustomTimeStep(
  outer: UObject,
) : EngineCustomTimeStep {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FixedFrameRateCustomTimeStep

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FixedFrameRateCustomTimeStep

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FixedFrameRateCustomTimeStep

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FixedFrameRateCustomTimeStep

    @JsName("C")
    public fun copy(other: UObject): FixedFrameRateCustomTimeStep

    @JsName("C")
    public fun copy(other: Any): FixedFrameRateCustomTimeStep
  }
}

public open external class GenlockedCustomTimeStep(
  outer: UObject,
) : FixedFrameRateCustomTimeStep {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenlockedCustomTimeStep

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenlockedCustomTimeStep

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenlockedCustomTimeStep

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenlockedCustomTimeStep

    @JsName("C")
    public fun copy(other: UObject): GenlockedCustomTimeStep

    @JsName("C")
    public fun copy(other: Any): GenlockedCustomTimeStep
  }
}

public open external class GenlockedFixedRateCustomTimeStep(
  outer: UObject,
) : GenlockedCustomTimeStep {
  @JsName("FrameRate")
  public open var frameRate: FrameRate

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenlockedFixedRateCustomTimeStep

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenlockedFixedRateCustomTimeStep

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenlockedFixedRateCustomTimeStep

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenlockedFixedRateCustomTimeStep

    @JsName("C")
    public fun copy(other: UObject): GenlockedFixedRateCustomTimeStep

    @JsName("C")
    public fun copy(other: Any): GenlockedFixedRateCustomTimeStep
  }
}

@JsName("ETimecodeProviderSynchronizationState")
public external object TimecodeProviderSynchronizationState {
  public var Closed: String

  public var Error: String

  public var Synchronized: String

  public var Synchronizing: String

  @JsName("ETimecodeProviderSynchronizationState_MAX")
  public var Max: String
}

@JsName("T$691")
public external interface Object691 {
  @JsName("OutFrameTime")
  public var outFrameTime: QualifiedFrameTime

  @JsName("$")
  public var value: Boolean
}

public open external class TimecodeProvider(
  outer: UObject,
) : UObject {
  @JsName("FrameDelay")
  public open var frameDelay: Number

  @JsName("GetTimecode")
  public open fun getTimecode(): Timecode

  @JsName("GetSynchronizationState")
  public open fun getSynchronizationState(): String

  @JsName("GetQualifiedFrameTime")
  public open fun getQualifiedFrameTime(): QualifiedFrameTime

  @JsName("GetFrameRate")
  public open fun getFrameRate(): FrameRate

  @JsName("GetDelayedTimecode")
  public open fun getDelayedTimecode(): Timecode

  @JsName("GetDelayedQualifiedFrameTime")
  public open fun getDelayedQualifiedFrameTime(): QualifiedFrameTime

  @JsName("FetchTimecode")
  public open fun fetchTimecode(outFrameTime: QualifiedFrameTime): Object691

  @JsName("FetchAndUpdate")
  public open fun fetchAndUpdate(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TimecodeProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TimecodeProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TimecodeProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TimecodeProvider

    @JsName("C")
    public fun copy(other: UObject): TimecodeProvider

    @JsName("C")
    public fun copy(other: Any): TimecodeProvider
  }
}

public open external class GenlockedTimecodeProvider(
  outer: UObject,
) : TimecodeProvider {
  @JsName("bUseGenlockToCount")
  public open var useGenlockToCount: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenlockedTimecodeProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenlockedTimecodeProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenlockedTimecodeProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenlockedTimecodeProvider

    @JsName("C")
    public fun copy(other: UObject): GenlockedTimecodeProvider

    @JsName("C")
    public fun copy(other: Any): GenlockedTimecodeProvider
  }
}

public open external class TimeManagementBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TimeManagementBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TimeManagementBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TimeManagementBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TimeManagementBlueprintLibrary

    @JsName("TransformTime")
    public fun transformTime(
      sourceTime: FrameTime,
      sourceRate: FrameRate,
      destinationRate: FrameRate,
    ): FrameTime

    @JsName("Subtract_FrameNumberInteger")
    public fun subtractFrameNumberInteger(a: FrameNumber, b: Number): FrameNumber

    @JsName("Subtract_FrameNumberFrameNumber")
    public fun subtractFrameNumberFrameNumber(a: FrameNumber, b: FrameNumber): FrameNumber

    @JsName("SnapFrameTimeToRate")
    public fun snapFrameTimeToRate(
      sourceTime: FrameTime,
      sourceRate: FrameRate,
      snapToRate: FrameRate,
    ): FrameTime

    @JsName("Multiply_SecondsFrameRate")
    public fun multiplySecondsFrameRate(timeInSeconds: Number, frameRate: FrameRate): FrameTime

    @JsName("Multiply_FrameNumberInteger")
    public fun multiplyFrameNumberInteger(a: FrameNumber, b: Number): FrameNumber

    @JsName("IsValid_MultipleOf")
    public fun isValidMultipleOf(inFrameRate: FrameRate, otherFramerate: FrameRate): Boolean

    @JsName("IsValid_Framerate")
    public fun isValidFramerate(inFrameRate: FrameRate): Boolean

    @JsName("GetTimecodeFrameRate")
    public fun getTimecodeFrameRate(): FrameRate

    @JsName("GetTimecode")
    public fun getTimecode(): Timecode

    @JsName("Divide_FrameNumberInteger")
    public fun divideFrameNumberInteger(a: FrameNumber, b: Number): FrameNumber

    @JsName("Conv_TimecodeToString")
    public fun convertTimecodeToString(inTimecode: Timecode, forceSignDisplay: Boolean): String

    @JsName("Conv_QualifiedFrameTimeToSeconds")
    public fun convertQualifiedFrameTimeToSeconds(inFrameTime: QualifiedFrameTime): Number

    @JsName("Conv_FrameRateToSeconds")
    public fun convertFrameRateToSeconds(inFrameRate: FrameRate): Number

    @JsName("Conv_FrameNumberToInteger")
    public fun convertFrameNumberToInteger(inFrameNumber: FrameNumber): Number

    @JsName("Add_FrameNumberInteger")
    public fun addFrameNumberInteger(a: FrameNumber, b: Number): FrameNumber

    @JsName("Add_FrameNumberFrameNumber")
    public fun addFrameNumberFrameNumber(a: FrameNumber, b: FrameNumber): FrameNumber

    @JsName("C")
    public fun copy(other: UObject): TimeManagementBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): TimeManagementBlueprintLibrary
  }
}

public open external class TimeSynchronizationSource(
  outer: UObject,
) : UObject {
  @JsName("bUseForSynchronization")
  public open var useForSynchronization: Boolean

  @JsName("FrameOffset")
  public open var frameOffset: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TimeSynchronizationSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TimeSynchronizationSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TimeSynchronizationSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TimeSynchronizationSource

    @JsName("C")
    public fun copy(other: UObject): TimeSynchronizationSource

    @JsName("C")
    public fun copy(other: Any): TimeSynchronizationSource
  }
}

public open external class MovieSceneCustomClockSource(
  outer: UObject,
) : Interface {
  @JsName("OnTick")
  public open fun onTick(deltaSeconds: Number, inPlayRate: Number): Unit

  @JsName("OnStopPlaying")
  public open fun onStopPlaying(inStopTime: QualifiedFrameTime): Unit

  @JsName("OnStartPlaying")
  public open fun onStartPlaying(inStartTime: QualifiedFrameTime): Unit

  @JsName("OnRequestCurrentTime")
  public open fun onRequestCurrentTime(inCurrentTime: QualifiedFrameTime, inPlayRate: Number):
      FrameTime

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCustomClockSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCustomClockSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCustomClockSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCustomClockSource

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCustomClockSource

    @JsName("C")
    public fun copy(other: Any): MovieSceneCustomClockSource
  }
}

public open external class MovieSceneDeterminismSource(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDeterminismSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDeterminismSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDeterminismSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDeterminismSource

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDeterminismSource

    @JsName("C")
    public fun copy(other: Any): MovieSceneDeterminismSource
  }
}

public open external class MovieSceneEntityProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEntityProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEntityProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEntityProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEntityProvider

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEntityProvider

    @JsName("C")
    public fun copy(other: Any): MovieSceneEntityProvider
  }
}

public open external class MovieSceneEvaluationHook(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEvaluationHook

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEvaluationHook

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEvaluationHook

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEvaluationHook

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationHook

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationHook
  }
}

public open external class MovieScenePlaybackClient(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePlaybackClient

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePlaybackClient

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePlaybackClient

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePlaybackClient

    @JsName("C")
    public fun copy(other: UObject): MovieScenePlaybackClient

    @JsName("C")
    public fun copy(other: Any): MovieScenePlaybackClient
  }
}

public open external class MovieSceneTrackTemplateProducer(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTrackTemplateProducer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTrackTemplateProducer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTrackTemplateProducer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTrackTemplateProducer

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackTemplateProducer

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackTemplateProducer
  }
}

public open external class NodeAndChannelMappings(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NodeAndChannelMappings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NodeAndChannelMappings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NodeAndChannelMappings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NodeAndChannelMappings

    @JsName("C")
    public fun copy(other: UObject): NodeAndChannelMappings

    @JsName("C")
    public fun copy(other: Any): NodeAndChannelMappings
  }
}

public open external class MovieSceneBindingOverrideData {
  @JsName("ObjectBindingID")
  public open var objectBindingId: MovieSceneObjectBindingId

  @JsName("UObject")
  public open var uObject: UObject

  @JsName("bOverridesDefault")
  public open var overridesDefault: Boolean

  public open fun clone(): MovieSceneBindingOverrideData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneBindingOverrideData

    @JsName("C")
    public fun copy(other: Any): MovieSceneBindingOverrideData
  }
}

public open external class MovieSceneBindingOverrides(
  outer: UObject,
) : UObject {
  @JsName("BindingData")
  public open var bindingData: Array<MovieSceneBindingOverrideData>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBindingOverrides

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBindingOverrides

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBindingOverrides

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBindingOverrides

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBindingOverrides

    @JsName("C")
    public fun copy(other: Any): MovieSceneBindingOverrides
  }
}

public open external class MovieSceneBindingOwnerInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBindingOwnerInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBindingOwnerInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBindingOwnerInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBindingOwnerInterface

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBindingOwnerInterface

    @JsName("C")
    public fun copy(other: Any): MovieSceneBindingOwnerInterface
  }
}

public open external class MovieSceneBoolSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("DefaultValue")
  public open var defaultValue: Boolean

  @JsName("BoolCurve")
  public open var boolCurve: MovieSceneBoolChannel

  @JsName("bIsExternallyInverted")
  public open var isExternallyInverted: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBoolSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBoolSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBoolSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBoolSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBoolSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneBoolSection
  }
}

public open external class MovieSceneGenericBoundObjectInstantiator(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneGenericBoundObjectInstantiator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneGenericBoundObjectInstantiator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneGenericBoundObjectInstantiator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneGenericBoundObjectInstantiator

    @JsName("C")
    public fun copy(other: UObject): MovieSceneGenericBoundObjectInstantiator

    @JsName("C")
    public fun copy(other: Any): MovieSceneGenericBoundObjectInstantiator
  }
}

public open external class MovieSceneBoundSceneComponentInstantiator(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBoundSceneComponentInstantiator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBoundSceneComponentInstantiator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBoundSceneComponentInstantiator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBoundSceneComponentInstantiator

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBoundSceneComponentInstantiator

    @JsName("C")
    public fun copy(other: Any): MovieSceneBoundSceneComponentInstantiator
  }
}

public open external class MovieSceneSceneComponentImpersonator(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSceneComponentImpersonator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSceneComponentImpersonator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSceneComponentImpersonator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSceneComponentImpersonator

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSceneComponentImpersonator

    @JsName("C")
    public fun copy(other: Any): MovieSceneSceneComponentImpersonator
  }
}

public open external class MovieSceneValueDecomposer(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneValueDecomposer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneValueDecomposer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneValueDecomposer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneValueDecomposer

    @JsName("C")
    public fun copy(other: UObject): MovieSceneValueDecomposer

    @JsName("C")
    public fun copy(other: Any): MovieSceneValueDecomposer
  }
}

@JsName("EMovieSceneBuiltInEasing")
public external object MovieSceneBuiltInEasing {
  public var Linear: String

  public var SinIn: String

  public var SinOut: String

  public var SinInOut: String

  public var QuadIn: String

  public var QuadOut: String

  public var QuadInOut: String

  public var CubicIn: String

  public var CubicOut: String

  public var CubicInOut: String

  public var QuartIn: String

  public var QuartOut: String

  public var QuartInOut: String

  public var QuintIn: String

  public var QuintOut: String

  public var QuintInOut: String

  public var ExpoIn: String

  public var ExpoOut: String

  public var ExpoInOut: String

  public var CircIn: String

  public var CircOut: String

  public var CircInOut: String

  @JsName("EMovieSceneBuiltInEasing_MAX")
  public var Max: String
}

public open external class MovieSceneBuiltInEasingFunction(
  outer: UObject,
) : UObject {
  @JsName("Type")
  public open var type: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBuiltInEasingFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBuiltInEasingFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBuiltInEasingFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBuiltInEasingFunction

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBuiltInEasingFunction

    @JsName("C")
    public fun copy(other: Any): MovieSceneBuiltInEasingFunction
  }
}

public open external class MovieSceneEasingExternalCurve(
  outer: UObject,
) : UObject {
  @JsName("Curve")
  public open var curve: CurveFloat

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEasingExternalCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEasingExternalCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEasingExternalCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEasingExternalCurve

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEasingExternalCurve

    @JsName("C")
    public fun copy(other: Any): MovieSceneEasingExternalCurve
  }
}

public open external class MovieSceneEasingFunction(
  outer: UObject,
) : Interface {
  @JsName("OnEvaluate")
  public open fun onEvaluate(interp: Number): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEasingFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEasingFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEasingFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEasingFunction

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEasingFunction

    @JsName("C")
    public fun copy(other: Any): MovieSceneEasingFunction
  }
}

public open external class MovieSceneEvalTimeSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEvalTimeSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEvalTimeSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEvalTimeSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEvalTimeSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvalTimeSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvalTimeSystem
  }
}

public open external class MovieSceneEvaluationHookSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  @JsName("PendingEventsByRootInstance")
  public open var pendingEventsByRootInstance: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEvaluationHookSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEvaluationHookSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEvaluationHookSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEvaluationHookSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationHookSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationHookSystem
  }
}

public open external class MovieSceneHookSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("bRequiresRangedHook")
  public open var requiresRangedHook: Boolean

  @JsName("bRequiresTriggerHooks")
  public open var requiresTriggerHooks: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneHookSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneHookSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneHookSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneHookSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneHookSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneHookSection
  }
}

public open external class MovieSceneKeyProxy(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneKeyProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneKeyProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneKeyProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneKeyProxy

    @JsName("C")
    public fun copy(other: UObject): MovieSceneKeyProxy

    @JsName("C")
    public fun copy(other: Any): MovieSceneKeyProxy
  }
}

public open external class MovieSceneMasterInstantiatorSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMasterInstantiatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMasterInstantiatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMasterInstantiatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMasterInstantiatorSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMasterInstantiatorSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneMasterInstantiatorSystem
  }
}

public open external class MovieScenePreAnimatedStateSystemInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePreAnimatedStateSystemInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePreAnimatedStateSystemInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePreAnimatedStateSystemInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePreAnimatedStateSystemInterface

    @JsName("C")
    public fun copy(other: UObject): MovieScenePreAnimatedStateSystemInterface

    @JsName("C")
    public fun copy(other: Any): MovieScenePreAnimatedStateSystemInterface
  }
}

public open external class MovieSceneCachePreAnimatedStateSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCachePreAnimatedStateSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCachePreAnimatedStateSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCachePreAnimatedStateSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCachePreAnimatedStateSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCachePreAnimatedStateSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneCachePreAnimatedStateSystem
  }
}

public open external class MovieSceneRestorePreAnimatedStateSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneRestorePreAnimatedStateSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneRestorePreAnimatedStateSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneRestorePreAnimatedStateSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneRestorePreAnimatedStateSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneRestorePreAnimatedStateSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneRestorePreAnimatedStateSystem
  }
}

public open external class MovieSceneSequenceActor(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSequenceActor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSequenceActor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSequenceActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSequenceActor

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceActor

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceActor
  }
}

public open external class MovieSceneSpawnablesSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSpawnablesSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSpawnablesSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSpawnablesSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSpawnablesSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSpawnablesSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneSpawnablesSystem
  }
}

public open external class MovieSceneSpawnSection(
  outer: UObject,
) : MovieSceneBoolSection {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSpawnSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSpawnSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSpawnSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSpawnSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSpawnSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneSpawnSection
  }
}

public open external class MovieSceneSpawnTrack(
  outer: UObject,
) : MovieSceneTrack {
  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  @JsName("ObjectGuid")
  public open var objectGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSpawnTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSpawnTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSpawnTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSpawnTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSpawnTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneSpawnTrack
  }
}

public open external class TestMovieSceneTrack(
  outer: UObject,
) : MovieSceneTrack {
  @JsName("bHighPassFilter")
  public open var highPassFilter: Boolean

  @JsName("SectionArray")
  public open var sectionArray: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestMovieSceneTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestMovieSceneTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestMovieSceneTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestMovieSceneTrack

    @JsName("C")
    public fun copy(other: UObject): TestMovieSceneTrack

    @JsName("C")
    public fun copy(other: Any): TestMovieSceneTrack
  }
}

public open external class TestMovieSceneSection(
  outer: UObject,
) : MovieSceneSection {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestMovieSceneSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestMovieSceneSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestMovieSceneSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestMovieSceneSection

    @JsName("C")
    public fun copy(other: UObject): TestMovieSceneSection

    @JsName("C")
    public fun copy(other: Any): TestMovieSceneSection
  }
}

public open external class TestMovieSceneSequence(
  outer: UObject,
) : MovieSceneSequence {
  @JsName("MovieScene")
  public open var movieScene: MovieScene

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestMovieSceneSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestMovieSceneSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestMovieSceneSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestMovieSceneSequence

    @JsName("C")
    public fun copy(other: UObject): TestMovieSceneSequence

    @JsName("C")
    public fun copy(other: Any): TestMovieSceneSequence
  }
}

public open external class TestMovieSceneSubTrack(
  outer: UObject,
) : MovieSceneSubTrack {
  @JsName("SectionArray")
  public open var sectionArray: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestMovieSceneSubTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestMovieSceneSubTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestMovieSceneSubTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestMovieSceneSubTrack

    @JsName("C")
    public fun copy(other: UObject): TestMovieSceneSubTrack

    @JsName("C")
    public fun copy(other: Any): TestMovieSceneSubTrack
  }
}

public open external class TestMovieSceneSubSection(
  outer: UObject,
) : MovieSceneSubSection {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestMovieSceneSubSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestMovieSceneSubSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestMovieSceneSubSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestMovieSceneSubSection

    @JsName("C")
    public fun copy(other: UObject): TestMovieSceneSubSection

    @JsName("C")
    public fun copy(other: Any): TestMovieSceneSubSection
  }
}

public open external class TestMovieSceneEvalHookTrack(
  outer: UObject,
) : MovieSceneTrack {
  @JsName("SectionArray")
  public open var sectionArray: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestMovieSceneEvalHookTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestMovieSceneEvalHookTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestMovieSceneEvalHookTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestMovieSceneEvalHookTrack

    @JsName("C")
    public fun copy(other: UObject): TestMovieSceneEvalHookTrack

    @JsName("C")
    public fun copy(other: Any): TestMovieSceneEvalHookTrack
  }
}

public open external class TestMovieSceneEvalHookSection(
  outer: UObject,
) : MovieSceneHookSection {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestMovieSceneEvalHookSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestMovieSceneEvalHookSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestMovieSceneEvalHookSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestMovieSceneEvalHookSection

    @JsName("C")
    public fun copy(other: UObject): TestMovieSceneEvalHookSection

    @JsName("C")
    public fun copy(other: Any): TestMovieSceneEvalHookSection
  }
}

public open external class MovieSceneTrackInstanceInstantiator(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTrackInstanceInstantiator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTrackInstanceInstantiator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTrackInstanceInstantiator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTrackInstanceInstantiator

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackInstanceInstantiator

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackInstanceInstantiator
  }
}

public open external class MovieSceneTrackInstanceSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  @JsName("Instantiator")
  public open var instantiator: MovieSceneTrackInstanceInstantiator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTrackInstanceSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTrackInstanceSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTrackInstanceSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTrackInstanceSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackInstanceSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackInstanceSystem
  }
}

public open external class AudioLinkBlueprintInterface(
  outer: UObject,
) : Interface {
  @JsName("StopLink")
  public open fun stopLink(): Unit

  @JsName("SetLinkSound")
  public open fun setLinkSound(newSound: SoundBase): Unit

  @JsName("PlayLink")
  public open fun playLink(startTime: Number): Unit

  @JsName("IsLinkPlaying")
  public open fun isLinkPlaying(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioLinkBlueprintInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioLinkBlueprintInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioLinkBlueprintInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioLinkBlueprintInterface

    @JsName("C")
    public fun copy(other: UObject): AudioLinkBlueprintInterface

    @JsName("C")
    public fun copy(other: Any): AudioLinkBlueprintInterface
  }
}

@JsName("EAudioDeviceChangedRole")
public external object AudioDeviceChangedRole {
  public var Invalid: String

  public var Console: String

  public var Multimedia: String

  public var Communications: String

  public var Count: String

  @JsName("EAudioDeviceChangedRole_MAX")
  public var Max: String
}

@JsName("EAudioDeviceChangedState")
public external object AudioDeviceChangedState {
  public var Invalid: String

  public var Active: String

  public var Disabled: String

  public var NotPresent: String

  public var Unplugged: String

  public var Count: String

  @JsName("EAudioDeviceChangedState_MAX")
  public var Max: String
}

public open external class AudioDeviceNotificationSubsystem(
  outer: UObject,
) : EngineSubsystem {
  @JsName("DefaultCaptureDeviceChanged")
  public open var defaultCaptureDeviceChanged:
      UnrealEngineMulticastDelegate<(AudioDeviceRole: String, DeviceID: String) -> Unit>

  @JsName("DefaultRenderDeviceChanged")
  public open var defaultRenderDeviceChanged:
      UnrealEngineMulticastDelegate<(AudioDeviceRole: String, DeviceID: String) -> Unit>

  @JsName("DeviceAdded")
  public open var deviceAdded: UnrealEngineMulticastDelegate<(DeviceID: String) -> Unit>

  @JsName("DeviceRemoved")
  public open var deviceRemoved: UnrealEngineMulticastDelegate<(DeviceID: String) -> Unit>

  @JsName("DeviceStateChanged")
  public open var deviceStateChanged: UnrealEngineMulticastDelegate<(DeviceID: String,
      NewState: String) -> Unit>

  @JsName("DeviceSwitched")
  public open var deviceSwitched: UnrealEngineMulticastDelegate<(DeviceID: String) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioDeviceNotificationSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioDeviceNotificationSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioDeviceNotificationSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioDeviceNotificationSubsystem

    @JsName("C")
    public fun copy(other: UObject): AudioDeviceNotificationSubsystem

    @JsName("C")
    public fun copy(other: Any): AudioDeviceNotificationSubsystem
  }
}

public open external class AudioGenerator(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioGenerator

    @JsName("C")
    public fun copy(other: UObject): AudioGenerator

    @JsName("C")
    public fun copy(other: Any): AudioGenerator
  }
}

@JsName("EAudioSpectrumBandPresetType")
public external object AudioSpectrumBandPresetType {
  public var KickDrum: String

  public var SnareDrum: String

  public var Voice: String

  public var Cymbals: String

  @JsName("EAudioSpectrumBandPresetType_MAX")
  public var Max: String
}

public open external class SoundSubmixSpectralAnalysisBandSettings {
  @JsName("BandFrequency")
  public open var bandFrequency: Number

  @JsName("AttackTimeMsec")
  public open var attackTimeMsec: Number

  @JsName("ReleaseTimeMsec")
  public open var releaseTimeMsec: Number

  @JsName("QFactor")
  public open var qFactor: Number

  public open fun clone(): SoundSubmixSpectralAnalysisBandSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundSubmixSpectralAnalysisBandSettings

    @JsName("C")
    public fun copy(other: Any): SoundSubmixSpectralAnalysisBandSettings
  }
}

@JsName("EMusicalNoteName")
public external object MusicalNoteName {
  @JsName("C")
  public var c: String

  public var Db: String

  @JsName("D")
  public var d: String

  public var Eb: String

  @JsName("E")
  public var e: String

  @JsName("F")
  public var f: String

  public var Gb: String

  @JsName("G")
  public var g: String

  public var Ab: String

  @JsName("A")
  public var a: String

  public var Bb: String

  @JsName("B")
  public var b: String

  @JsName("EMusicalNoteName_MAX")
  public var Max: String
}

public open external class AudioMixerBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioMixerBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioMixerBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioMixerBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioMixerBlueprintLibrary

    @JsName("TrimAudioCache")
    public fun trimAudioCache(inMegabytesToFree: Number): Number

    @JsName("StopRecordingOutput")
    public fun stopRecordingOutput(
      worldContextObject: UObject,
      exportType: String,
      name: String,
      path: String,
      submixToRecord: SoundSubmix,
      existingSoundWaveToOverwrite: SoundWave,
    ): SoundWave

    @JsName("StopAudioBus")
    public fun stopAudioBus(worldContextObject: UObject, audioBus: AudioBus): Unit

    @JsName("StopAnalyzingOutput")
    public fun stopAnalyzingOutput(worldContextObject: UObject, submixToStopAnalyzing: SoundSubmix):
        Unit

    @JsName("StartRecordingOutput")
    public fun startRecordingOutput(
      worldContextObject: UObject,
      expectedDuration: Number,
      submixToRecord: SoundSubmix,
    ): Unit

    @JsName("StartAudioBus")
    public fun startAudioBus(worldContextObject: UObject, audioBus: AudioBus): Unit

    @JsName("StartAnalyzingOutput")
    public fun startAnalyzingOutput(
      worldContextObject: UObject,
      submixToAnalyze: SoundSubmix,
      fftSize: String,
      interpolationMethod: String,
      windowType: String,
      hopSize: Number,
      spectrumType: String,
    ): Unit

    @JsName("SetSubmixEffectChainOverride")
    public fun setSubmixEffectChainOverride(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixEffectPresetChain: Array<SoundEffectSubmixPreset>,
      fadeTimeSec: Number,
    ): Unit

    @JsName("SetBypassSourceEffectChainEntry")
    public fun setBypassSourceEffectChainEntry(
      worldContextObject: UObject,
      presetChain: SoundEffectSourcePresetChain,
      entryIndex: Number,
      bypassed: Boolean,
    ): Unit

    @JsName("ResumeRecordingOutput")
    public fun resumeRecordingOutput(worldContextObject: UObject, submixToPause: SoundSubmix): Unit

    @JsName("ReplaceSubmixEffect")
    public fun replaceSubmixEffect(
      worldContextObject: UObject,
      inSoundSubmix: SoundSubmix,
      submixChainIndex: Number,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Unit

    @JsName("ReplaceSoundEffectSubmix")
    public fun replaceSoundEffectSubmix(
      worldContextObject: UObject,
      inSoundSubmix: SoundSubmix,
      submixChainIndex: Number,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Unit

    @JsName("RemoveSubmixEffectPresetAtIndex")
    public fun removeSubmixEffectPresetAtIndex(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixChainIndex: Number,
    ): Unit

    @JsName("RemoveSubmixEffectPreset")
    public fun removeSubmixEffectPreset(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Unit

    @JsName("RemoveSubmixEffectAtIndex")
    public fun removeSubmixEffectAtIndex(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixChainIndex: Number,
    ): Unit

    @JsName("RemoveSubmixEffect")
    public fun removeSubmixEffect(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Unit

    @JsName("RemoveSourceEffectFromPresetChain")
    public fun removeSourceEffectFromPresetChain(
      worldContextObject: UObject,
      presetChain: SoundEffectSourcePresetChain,
      entryIndex: Number,
    ): Unit

    @JsName("RemoveMasterSubmixEffect")
    public fun removeMasterSubmixEffect(worldContextObject: UObject,
        submixEffectPreset: SoundEffectSubmixPreset): Unit

    @JsName("PrimeSoundCueForPlayback")
    public fun primeSoundCueForPlayback(soundCue: SoundCue): Unit

    @JsName("PauseRecordingOutput")
    public fun pauseRecordingOutput(worldContextObject: UObject, submixToPause: SoundSubmix): Unit

    @JsName("MakePresetSpectralAnalysisBandSettings")
    public fun makePresetSpectralAnalysisBandSettings(
      inBandPresetType: String,
      inNumBands: Number,
      inAttackTimeMsec: Number,
      inReleaseTimeMsec: Number,
    ): Array<SoundSubmixSpectralAnalysisBandSettings>

    @JsName("MakeMusicalSpectralAnalysisBandSettings")
    public fun makeMusicalSpectralAnalysisBandSettings(
      inNumSemitones: Number,
      inStartingMusicalNote: String,
      inStartingOctave: Number,
      inAttackTimeMsec: Number,
      inReleaseTimeMsec: Number,
    ): Array<SoundSubmixSpectralAnalysisBandSettings>

    @JsName("MakeFullSpectrumSpectralAnalysisBandSettings")
    public fun makeFullSpectrumSpectralAnalysisBandSettings(
      inNumBands: Number,
      inMinimumFrequency: Number,
      inMaximumFrequency: Number,
      inAttackTimeMsec: Number,
      inReleaseTimeMsec: Number,
    ): Array<SoundSubmixSpectralAnalysisBandSettings>

    @JsName("IsAudioBusActive")
    public fun isAudioBusActive(worldContextObject: UObject, audioBus: AudioBus): Boolean

    @JsName("GetPhaseForFrequencies")
    public fun getPhaseForFrequencies(
      worldContextObject: UObject,
      frequencies: Array<Number>,
      phases: Array<Number>,
      submixToAnalyze: SoundSubmix,
    ): PhasesProvider

    @JsName("GetNumberOfEntriesInSourceEffectChain")
    public fun getNumberOfEntriesInSourceEffectChain(worldContextObject: UObject,
        presetChain: SoundEffectSourcePresetChain): Number

    @JsName("GetMagnitudeForFrequencies")
    public fun getMagnitudeForFrequencies(
      worldContextObject: UObject,
      frequencies: Array<Number>,
      magnitudes: Array<Number>,
      submixToAnalyze: SoundSubmix,
    ): MagnitudesProvider

    @JsName("Conv_AudioOutputDeviceInfoToString")
    public fun convertAudioOutputDeviceInfoToString(info: AudioOutputDeviceInfo): String

    @JsName("ClearSubmixEffects")
    public fun clearSubmixEffects(worldContextObject: UObject, soundSubmix: SoundSubmix): Unit

    @JsName("ClearSubmixEffectChainOverride")
    public fun clearSubmixEffectChainOverride(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      fadeTimeSec: Number,
    ): Unit

    @JsName("ClearMasterSubmixEffects")
    public fun clearMasterSubmixEffects(worldContextObject: UObject): Unit

    @JsName("AddSubmixEffect")
    public fun addSubmixEffect(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Number

    @JsName("AddSourceEffectToPresetChain")
    public fun addSourceEffectToPresetChain(
      worldContextObject: UObject,
      presetChain: SoundEffectSourcePresetChain,
      entry: SourceEffectChainEntry,
    ): Unit

    @JsName("AddMasterSubmixEffect")
    public fun addMasterSubmixEffect(worldContextObject: UObject,
        submixEffectPreset: SoundEffectSubmixPreset): Unit

    @JsName("C")
    public fun copy(other: UObject): AudioMixerBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): AudioMixerBlueprintLibrary
  }
}

@JsName("EQuartzCommandQuantization")
public external object QuartzCommandQuantization {
  public var Bar: String

  public var Beat: String

  public var ThirtySecondNote: String

  public var SixteenthNote: String

  public var EighthNote: String

  public var QuarterNote: String

  public var HalfNote: String

  public var WholeNote: String

  public var DottedSixteenthNote: String

  public var DottedEighthNote: String

  public var DottedQuarterNote: String

  public var DottedHalfNote: String

  public var DottedWholeNote: String

  public var SixteenthNoteTriplet: String

  public var EighthNoteTriplet: String

  public var QuarterNoteTriplet: String

  public var HalfNoteTriplet: String

  public var Tick: String

  public var Count: String

  public var None: String

  @JsName("EQuartzCommandQuantization_MAX")
  public var Max: String
}

public open external class QuartzTransportTimeStamp {
  @JsName("Bars")
  public open var bars: Number

  @JsName("Beat")
  public open var beat: Number

  @JsName("BeatFraction")
  public open var beatFraction: Number

  @JsName("Seconds")
  public open var seconds: Number

  public open fun clone(): QuartzTransportTimeStamp

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): QuartzTransportTimeStamp

    @JsName("C")
    public fun copy(other: Any): QuartzTransportTimeStamp
  }
}

@JsName("T$694")
public external interface ClockHandleProvider {
  @JsName("ClockHandle")
  public var clockHandle: QuartzClockHandle
}

public open external class QuartzClockHandle(
  outer: UObject,
) : UObject {
  @JsName("UnsubscribeFromTimeDivision")
  public open fun unsubscribeFromTimeDivision(
    worldContextObject: UObject,
    inQuantizationBoundary: String,
    clockHandle: QuartzClockHandle,
  ): ClockHandleProvider

  @JsName("UnsubscribeFromAllTimeDivisions")
  public open fun unsubscribeFromAllTimeDivisions(worldContextObject: UObject,
      clockHandle: QuartzClockHandle): ClockHandleProvider

  @JsName("StopClock")
  public open fun stopClock(
    worldContextObject: UObject,
    cancelPendingEvents: Boolean,
    clockHandle: QuartzClockHandle,
  ): ClockHandleProvider

  @JsName("StartClock")
  public open fun startClock(worldContextObject: UObject, clockHandle: QuartzClockHandle):
      ClockHandleProvider

  @JsName("ResumeClock")
  public open fun resumeClock(worldContextObject: UObject, clockHandle: QuartzClockHandle):
      ClockHandleProvider

  @JsName("PauseClock")
  public open fun pauseClock(worldContextObject: UObject, clockHandle: QuartzClockHandle):
      ClockHandleProvider

  @JsName("IsClockRunning")
  public open fun isClockRunning(worldContextObject: UObject): Boolean

  @JsName("GetTicksPerSecond")
  public open fun getTicksPerSecond(worldContextObject: UObject): Number

  @JsName("GetThirtySecondNotesPerMinute")
  public open fun getThirtySecondNotesPerMinute(worldContextObject: UObject): Number

  @JsName("GetSecondsPerTick")
  public open fun getSecondsPerTick(worldContextObject: UObject): Number

  @JsName("GetMillisecondsPerTick")
  public open fun getMillisecondsPerTick(worldContextObject: UObject): Number

  @JsName("GetEstimatedRunTime")
  public open fun getEstimatedRunTime(worldContextObject: UObject): Number

  @JsName("GetDurationOfQuantizationTypeInSeconds")
  public open fun getDurationOfQuantizationTypeInSeconds(
    worldContextObject: UObject,
    quantizationType: String,
    multiplier: Number,
  ): Number

  @JsName("GetCurrentTimestamp")
  public open fun getCurrentTimestamp(worldContextObject: UObject): QuartzTransportTimeStamp

  @JsName("GetBeatsPerMinute")
  public open fun getBeatsPerMinute(worldContextObject: UObject): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): QuartzClockHandle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): QuartzClockHandle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): QuartzClockHandle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): QuartzClockHandle

    @JsName("C")
    public fun copy(other: UObject): QuartzClockHandle

    @JsName("C")
    public fun copy(other: Any): QuartzClockHandle
  }
}

@JsName("ESubmixEffectDynamicsProcessorType")
public external object SubmixEffectDynamicsProcessorType {
  public var Compressor: String

  public var Limiter: String

  public var Expander: String

  public var Gate: String

  public var UpwardsCompressor: String

  public var Count: String

  @JsName("ESubmixEffectDynamicsProcessorType_MAX")
  public var Max: String
}

@JsName("ESubmixEffectDynamicsPeakMode")
public external object SubmixEffectDynamicsPeakMode {
  public var MeanSquared: String

  public var RootMeanSquared: String

  public var Peak: String

  public var Count: String

  @JsName("ESubmixEffectDynamicsPeakMode_MAX")
  public var Max: String
}

@JsName("ESubmixEffectDynamicsChannelLinkMode")
public external object SubmixEffectDynamicsChannelLinkMode {
  public var Disabled: String

  public var Average: String

  public var Peak: String

  public var Count: String

  @JsName("ESubmixEffectDynamicsChannelLinkMode_MAX")
  public var Max: String
}

@JsName("ESubmixEffectDynamicsKeySource")
public external object SubmixEffectDynamicsKeySource {
  public var Default: String

  public var AudioBus: String

  public var Submix: String

  public var Count: String

  @JsName("ESubmixEffectDynamicsKeySource_MAX")
  public var Max: String
}

public open external class SubmixEffectDynamicProcessorFilterSettings {
  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("Cutoff")
  public open var cutoff: Number

  @JsName("GainDb")
  public open var gainDb: Number

  public open fun clone(): SubmixEffectDynamicProcessorFilterSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectDynamicProcessorFilterSettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectDynamicProcessorFilterSettings
  }
}

public open external class SubmixEffectDynamicsProcessorSettings {
  @JsName("DynamicsProcessorType")
  public open var dynamicsProcessorType: String

  @JsName("PeakMode")
  public open var peakMode: String

  @JsName("LinkMode")
  public open var linkMode: String

  @JsName("InputGainDb")
  public open var inputGainDb: Number

  @JsName("ThresholdDb")
  public open var thresholdDb: Number

  @JsName("Ratio")
  public open var ratio: Number

  @JsName("KneeBandwidthDb")
  public open var kneeBandwidthDb: Number

  @JsName("LookAheadMsec")
  public open var lookAheadMsec: Number

  @JsName("AttackTimeMsec")
  public open var attackTimeMsec: Number

  @JsName("ReleaseTimeMsec")
  public open var releaseTimeMsec: Number

  @JsName("KeySource")
  public open var keySource: String

  @JsName("ExternalAudioBus")
  public open var externalAudioBus: AudioBus

  @JsName("ExternalSubmix")
  public open var externalSubmix: SoundSubmix

  @JsName("bChannelLinked")
  public open var channelLinked: Boolean

  @JsName("bAnalogMode")
  public open var analogMode: Boolean

  @JsName("bBypass")
  public open var bypass: Boolean

  @JsName("bKeyAudition")
  public open var keyAudition: Boolean

  @JsName("KeyGainDb")
  public open var keyGainDb: Number

  @JsName("OutputGainDb")
  public open var outputGainDb: Number

  @JsName("KeyHighshelf")
  public open var keyHighshelf: SubmixEffectDynamicProcessorFilterSettings

  @JsName("KeyLowshelf")
  public open var keyLowshelf: SubmixEffectDynamicProcessorFilterSettings

  public open fun clone(): SubmixEffectDynamicsProcessorSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectDynamicsProcessorSettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectDynamicsProcessorSettings
  }
}

public open external class SubmixEffectDynamicsProcessorPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectDynamicsProcessorSettings

  @JsName("SetSettings")
  public open fun setSettings(settings: SubmixEffectDynamicsProcessorSettings): Unit

  @JsName("SetExternalSubmix")
  public open fun setExternalSubmix(submix: SoundSubmix): Unit

  @JsName("SetAudioBus")
  public open fun setAudioBus(audioBus: AudioBus): Unit

  @JsName("ResetKey")
  public open fun resetKey(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectDynamicsProcessorPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectDynamicsProcessorPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectDynamicsProcessorPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectDynamicsProcessorPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectDynamicsProcessorPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectDynamicsProcessorPreset
  }
}

@JsName("SubmixEffectEQBand")
public open external class SubmixEffectEqBand {
  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Bandwidth")
  public open var bandwidth: Number

  @JsName("GainDb")
  public open var gainDb: Number

  @JsName("bEnabled")
  public open var enabled: Boolean

  public open fun clone(): SubmixEffectEqBand

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectEqBand

    @JsName("C")
    public fun copy(other: Any): SubmixEffectEqBand
  }
}

@JsName("SubmixEffectSubmixEQSettings")
public open external class SubmixEffectSubmixEqSettings {
  @JsName("EQBands")
  public open var eqBands: Array<SubmixEffectEqBand>

  public open fun clone(): SubmixEffectSubmixEqSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectSubmixEqSettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectSubmixEqSettings
  }
}

@JsName("SubmixEffectSubmixEQPreset")
public open external class SubmixEffectSubmixEqPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectSubmixEqSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectSubmixEqSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectSubmixEqPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectSubmixEqPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectSubmixEqPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectSubmixEqPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectSubmixEqPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectSubmixEqPreset
  }
}

public open external class SubmixEffectReverbSettings {
  @JsName("bBypassEarlyReflections")
  public open var bypassEarlyReflections: Boolean

  @JsName("ReflectionsDelay")
  public open var reflectionsDelay: Number

  @JsName("GainHF")
  public open var gainHf: Number

  @JsName("ReflectionsGain")
  public open var reflectionsGain: Number

  @JsName("bBypassLateReflections")
  public open var bypassLateReflections: Boolean

  @JsName("LateDelay")
  public open var lateDelay: Number

  @JsName("DecayTime")
  public open var decayTime: Number

  @JsName("Density")
  public open var density: Number

  @JsName("Diffusion")
  public open var diffusion: Number

  @JsName("AirAbsorptionGainHF")
  public open var airAbsorptionGainHf: Number

  @JsName("DecayHFRatio")
  public open var decayHfRatio: Number

  @JsName("LateGain")
  public open var lateGain: Number

  @JsName("Gain")
  public open var gain: Number

  @JsName("WetLevel")
  public open var wetLevel: Number

  @JsName("DryLevel")
  public open var dryLevel: Number

  @JsName("bBypass")
  public open var bypass: Boolean

  public open fun clone(): SubmixEffectReverbSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectReverbSettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectReverbSettings
  }
}

public open external class SubmixEffectReverbPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectReverbSettings

  @JsName("SetSettingsWithReverbEffect")
  public open fun setSettingsWithReverbEffect(
    inReverbEffect: ReverbEffect,
    wetLevel: Number,
    dryLevel: Number,
  ): Unit

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectReverbSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectReverbPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectReverbPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectReverbPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectReverbPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectReverbPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectReverbPreset
  }
}

public open external class TickableWorldSubsystem(
  outer: UObject,
) : WorldSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TickableWorldSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TickableWorldSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TickableWorldSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TickableWorldSubsystem

    @JsName("C")
    public fun copy(other: UObject): TickableWorldSubsystem

    @JsName("C")
    public fun copy(other: Any): TickableWorldSubsystem
  }
}

@JsName("EQuartzTimeSignatureQuantization")
public external object QuartzTimeSignatureQuantization {
  public var HalfNote: String

  public var QuarterNote: String

  public var EighthNote: String

  public var SixteenthNote: String

  public var ThirtySecondNote: String

  public var Count: String

  @JsName("EQuartzTimeSignatureQuantization_MAX")
  public var Max: String
}

public open external class QuartzPulseOverrideStep {
  @JsName("NumberOfPulses")
  public open var numberOfPulses: Number

  @JsName("PulseDuration")
  public open var pulseDuration: String

  public open fun clone(): QuartzPulseOverrideStep

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): QuartzPulseOverrideStep

    @JsName("C")
    public fun copy(other: Any): QuartzPulseOverrideStep
  }
}

public open external class QuartzTimeSignature {
  @JsName("NumBeats")
  public open var numBeats: Number

  @JsName("BeatType")
  public open var beatType: String

  @JsName("OptionalPulseOverride")
  public open var optionalPulseOverride: Array<QuartzPulseOverrideStep>

  public open fun clone(): QuartzTimeSignature

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): QuartzTimeSignature

    @JsName("C")
    public fun copy(other: Any): QuartzTimeSignature
  }
}

public open external class QuartzClockSettings {
  @JsName("TimeSignature")
  public open var timeSignature: QuartzTimeSignature

  @JsName("bIgnoreLevelChange")
  public open var ignoreLevelChange: Boolean

  public open fun clone(): QuartzClockSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): QuartzClockSettings

    @JsName("C")
    public fun copy(other: Any): QuartzClockSettings
  }
}

@JsName("T$695")
public external interface InClockHandleProvider {
  @JsName("InClockHandle")
  public var inClockHandle: QuartzClockHandle
}

public open external class QuartzSubsystem(
  outer: UObject,
) : TickableWorldSubsystem {
  @JsName("IsQuartzEnabled")
  public open fun isQuartzEnabled(): Boolean

  @JsName("IsClockRunning")
  public open fun isClockRunning(worldContextObject: UObject, clockName: String): Boolean

  @JsName("GetRoundTripMinLatency")
  public open fun getRoundTripMinLatency(worldContextObject: UObject): Number

  @JsName("GetRoundTripMaxLatency")
  public open fun getRoundTripMaxLatency(worldContextObject: UObject): Number

  @JsName("GetRoundTripAverageLatency")
  public open fun getRoundTripAverageLatency(worldContextObject: UObject): Number

  @JsName("GetHandleForClock")
  public open fun getHandleForClock(worldContextObject: UObject, clockName: String):
      QuartzClockHandle

  @JsName("GetGameThreadToAudioRenderThreadMinLatency")
  public open fun getGameThreadToAudioRenderThreadMinLatency(worldContextObject: UObject): Number

  @JsName("GetGameThreadToAudioRenderThreadMaxLatency")
  public open fun getGameThreadToAudioRenderThreadMaxLatency(worldContextObject: UObject): Number

  @JsName("GetGameThreadToAudioRenderThreadAverageLatency")
  public open fun getGameThreadToAudioRenderThreadAverageLatency(worldContextObject: UObject):
      Number

  @JsName("GetEstimatedClockRunTime")
  public open fun getEstimatedClockRunTime(worldContextObject: UObject, inClockName: String): Number

  @JsName("GetDurationOfQuantizationTypeInSeconds")
  public open fun getDurationOfQuantizationTypeInSeconds(
    worldContextObject: UObject,
    clockName: String,
    quantizationType: String,
    multiplier: Number,
  ): Number

  @JsName("GetCurrentClockTimestamp")
  public open fun getCurrentClockTimestamp(worldContextObject: UObject, inClockName: String):
      QuartzTransportTimeStamp

  @JsName("GetAudioRenderThreadToGameThreadMinLatency")
  public open fun getAudioRenderThreadToGameThreadMinLatency(): Number

  @JsName("GetAudioRenderThreadToGameThreadMaxLatency")
  public open fun getAudioRenderThreadToGameThreadMaxLatency(): Number

  @JsName("GetAudioRenderThreadToGameThreadAverageLatency")
  public open fun getAudioRenderThreadToGameThreadAverageLatency(): Number

  @JsName("DoesClockExist")
  public open fun doesClockExist(worldContextObject: UObject, clockName: String): Boolean

  @JsName("DeleteClockByName")
  public open fun deleteClockByName(worldContextObject: UObject, clockName: String): Unit

  @JsName("DeleteClockByHandle")
  public open fun deleteClockByHandle(worldContextObject: UObject,
      inClockHandle: QuartzClockHandle): InClockHandleProvider

  @JsName("CreateNewClock")
  public open fun createNewClock(
    worldContextObject: UObject,
    clockName: String,
    inSettings: QuartzClockSettings,
    overrideSettingsIfClockExists: Boolean,
    useAudioEngineClockManager: Boolean,
  ): QuartzClockHandle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): QuartzSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): QuartzSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): QuartzSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): QuartzSubsystem

    @JsName("C")
    public fun copy(other: UObject): QuartzSubsystem

    @JsName("C")
    public fun copy(other: Any): QuartzSubsystem
  }
}

public open external class SoundWaveProcedural(
  outer: UObject,
) : SoundWave {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundWaveProcedural

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundWaveProcedural

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundWaveProcedural

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundWaveProcedural

    @JsName("C")
    public fun copy(other: UObject): SoundWaveProcedural

    @JsName("C")
    public fun copy(other: Any): SoundWaveProcedural
  }
}

public open external class SynthComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("bAutoDestroy")
  public open var autoDestroy: Boolean

  @JsName("bStopWhenOwnerDestroyed")
  public open var stopWhenOwnerDestroyed: Boolean

  @JsName("bAllowSpatialization")
  public open var allowSpatialization: Boolean

  @JsName("bOverrideAttenuation")
  public open var overrideAttenuation: Boolean

  @JsName("bOutputToBusOnly")
  public open var outputToBusOnly: Boolean

  @JsName("bEnableBusSends")
  public open var enableBusSends: Boolean

  @JsName("bEnableBaseSubmix")
  public open var enableBaseSubmix: Boolean

  @JsName("bEnableSubmixSends")
  public open var enableSubmixSends: Boolean

  @JsName("AttenuationSettings")
  public open var attenuationSettings: SoundAttenuation

  @JsName("AttenuationOverrides")
  public open var attenuationOverrides: SoundAttenuationSettings

  @JsName("ConcurrencySettings")
  public open var concurrencySettings: SoundConcurrency

  @JsName("ConcurrencySet")
  public open var concurrencySet: Any

  @JsName("SoundClass")
  public open var soundClass: SoundClass

  @JsName("SourceEffectChain")
  public open var sourceEffectChain: SoundEffectSourcePresetChain

  @JsName("SoundSubmix")
  public open var soundSubmix: SoundSubmixBase

  @JsName("SoundSubmixSends")
  public open var soundSubmixSends: Array<SoundSubmixSendInfo>

  @JsName("BusSends")
  public open var busSends: Array<SoundSourceBusSendInfo>

  @JsName("PreEffectBusSends")
  public open var preEffectBusSends: Array<SoundSourceBusSendInfo>

  @JsName("bIsUISound")
  public open var isUiSound: Boolean

  @JsName("bIsPreviewSound")
  public open var isPreviewSound: Boolean

  @JsName("EnvelopeFollowerAttackTime")
  public open var envelopeFollowerAttackTime: Number

  @JsName("EnvelopeFollowerReleaseTime")
  public open var envelopeFollowerReleaseTime: Number

  @JsName("OnAudioEnvelopeValue")
  public open var onAudioEnvelopeValue:
      UnrealEngineMulticastDelegate<(EnvelopeValue: Number) -> Unit>

  @JsName("Synth")
  public open var synth: SynthSound

  @JsName("AudioComponent")
  public open var audioComponent: AudioComponent

  @JsName("Stop")
  public open fun stop(): Unit

  @JsName("Start")
  public open fun start(): Unit

  @JsName("SetVolumeMultiplier")
  public open fun setVolumeMultiplier(volumeMultiplier: Number): Unit

  @JsName("SetSubmixSend")
  public open fun setSubmixSend(submix: SoundSubmixBase, sendLevel: Number): Unit

  @JsName("SetOutputToBusOnly")
  public open fun setOutputToBusOnly(inOutputToBusOnly: Boolean): Unit

  @JsName("SetLowPassFilterFrequency")
  public open fun setLowPassFilterFrequency(inLowPassFilterFrequency: Number): Unit

  @JsName("SetLowPassFilterEnabled")
  public open fun setLowPassFilterEnabled(inLowPassFilterEnabled: Boolean): Unit

  @JsName("IsPlaying")
  public open fun isPlaying(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SynthComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SynthComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SynthComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SynthComponent

    @JsName("C")
    public fun copy(other: UObject): SynthComponent

    @JsName("C")
    public fun copy(other: Any): SynthComponent
  }
}

public open external class SynthSound(
  outer: UObject,
) : SoundWaveProcedural {
  @JsName("OwningSynthComponent")
  public open var owningSynthComponent: SynthComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SynthSound

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SynthSound

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SynthSound

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SynthSound

    @JsName("C")
    public fun copy(other: UObject): SynthSound

    @JsName("C")
    public fun copy(other: Any): SynthSound
  }
}

public open external class MediaSource(
  outer: UObject,
) : UObject {
  @JsName("Validate")
  public open fun validate(): Boolean

  @JsName("SetMediaOptionString")
  public open fun setMediaOptionString(key: String, value: String): Unit

  @JsName("SetMediaOptionInt64")
  public open fun setMediaOptionInt64(key: String, value: Any): Unit

  @JsName("SetMediaOptionFloat")
  public open fun setMediaOptionFloat(key: String, value: Number): Unit

  @JsName("SetMediaOptionBool")
  public open fun setMediaOptionBool(key: String, value: Boolean): Unit

  @JsName("GetUrl")
  public open fun getUrl(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MediaSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MediaSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MediaSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MediaSource

    @JsName("C")
    public fun copy(other: UObject): MediaSource

    @JsName("C")
    public fun copy(other: Any): MediaSource
  }
}

public open external class BaseMediaSource : MediaSource {
  @JsName("PlatformPlayerNames")
  public open var platformPlayerNames: Any

  @JsName("PlayerName")
  public open var playerName: String

  public fun addEventListener(
    type: String,
    listener: EventListener,
    options: Boolean,
  ): Unit

  public fun addEventListener(type: String, listener: EventListener): Unit

  public fun addEventListener(
    type: String,
    listener: EventListener,
    options: AddEventListenerOptions,
  ): Unit

  public fun addEventListener(
    type: String,
    listener: EventListenerObject,
    options: Boolean,
  ): Unit

  public fun addEventListener(type: String, listener: EventListenerObject): Unit

  public fun addEventListener(
    type: String,
    listener: EventListenerObject,
    options: AddEventListenerOptions,
  ): Unit

  public fun removeEventListener(
    type: String,
    listener: EventListener,
    options: Boolean,
  ): Unit

  public fun removeEventListener(type: String, listener: EventListener): Unit

  public fun removeEventListener(
    type: String,
    listener: EventListener,
    options: EventListenerOptions,
  ): Unit

  public fun removeEventListener(
    type: String,
    listener: EventListenerObject,
    options: Boolean,
  ): Unit

  public fun removeEventListener(type: String, listener: EventListenerObject): Unit

  public fun removeEventListener(
    type: String,
    listener: EventListenerObject,
    options: EventListenerOptions,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseMediaSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseMediaSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseMediaSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseMediaSource

    @JsName("C")
    public fun copy(other: UObject): BaseMediaSource

    @JsName("C")
    public fun copy(other: Any): BaseMediaSource
  }
}

public open external class FileMediaSource : BaseMediaSource {
  @JsName("FilePath")
  public open var filePath: String

  @JsName("PrecacheFile")
  public open var precacheFile: Boolean

  @JsName("SetFilePath")
  public open fun setFilePath(path: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FileMediaSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FileMediaSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FileMediaSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FileMediaSource

    @JsName("C")
    public fun copy(other: UObject): FileMediaSource

    @JsName("C")
    public fun copy(other: Any): FileMediaSource
  }
}

public open external class MediaCaptureDevice {
  @JsName("DisplayName")
  public open var displayName: String

  public open var URL: String

  public open fun clone(): MediaCaptureDevice

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MediaCaptureDevice

    @JsName("C")
    public fun copy(other: Any): MediaCaptureDevice
  }
}

@JsName("T$696")
public external interface OutDevicesProvider {
  @JsName("OutDevices")
  public var outDevices: Array<MediaCaptureDevice>
}

public open external class MediaBlueprintFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MediaBlueprintFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MediaBlueprintFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MediaBlueprintFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MediaBlueprintFunctionLibrary

    @JsName("EnumerateWebcamCaptureDevices")
    public fun enumerateWebcamCaptureDevices(outDevices: Array<MediaCaptureDevice>, filter: Number):
        OutDevicesProvider

    @JsName("EnumerateVideoCaptureDevices")
    public fun enumerateVideoCaptureDevices(outDevices: Array<MediaCaptureDevice>, filter: Number):
        OutDevicesProvider

    @JsName("EnumerateAudioCaptureDevices")
    public fun enumerateAudioCaptureDevices(outDevices: Array<MediaCaptureDevice>, filter: Number):
        OutDevicesProvider

    @JsName("C")
    public fun copy(other: UObject): MediaBlueprintFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): MediaBlueprintFunctionLibrary
  }
}

public external object MediaTextureOutputFormat {
  @JsName("MTOF_Default")
  public var mtofDefault: String

  @JsName("MTOF_SRGB_LINOUT")
  public var mtofsrgblinout: String

  @JsName("MTOF_MAX")
  public var mtofmax: String
}

public external object MediaTextureOrientation {
  @JsName("MTORI_Original")
  public var mtoriOriginal: String

  @JsName("MTORI_CW90")
  public var mtoricw90: String

  @JsName("MTORI_CW180")
  public var mtoricw180: String

  @JsName("MTORI_CW270")
  public var mtoricw270: String

  @JsName("MTORI_MAX")
  public var mtorimax: String
}

@JsName("T$699")
public external interface Object699 {
  @JsName("OutIndex")
  public var outIndex: Number

  @JsName("$")
  public var value: MediaSource
}

@JsName("T$700")
public external interface Object700 {
  @JsName("InOutIndex")
  public var inOutIndex: Number

  @JsName("$")
  public var value: MediaSource
}

public open external class MediaPlaylist(
  outer: UObject,
) : UObject {
  @JsName("Items")
  public open var items: Array<MediaSource>

  @JsName("Replace")
  public open fun replace(index: Number, replacement: MediaSource): Boolean

  @JsName("RemoveAt")
  public open fun removeAt(index: Number): Boolean

  @JsName("Remove")
  public open fun remove(mediaSource: MediaSource): Boolean

  @JsName("Num")
  public open fun num(): Number

  @JsName("Insert")
  public open fun insert(mediaSource: MediaSource, index: Number): Unit

  @JsName("GetRandom")
  public open fun getRandom(outIndex: Number): Object699

  @JsName("GetPrevious")
  public open fun getPrevious(inOutIndex: Number): Object700

  @JsName("GetNext")
  public open fun getNext(inOutIndex: Number): Object700

  @JsName("Get")
  public open fun get(index: Number): MediaSource

  @JsName("AddUrl")
  public open fun addUrl(URL: String): Boolean

  @JsName("AddFile")
  public open fun addFile(filePath: String): Boolean

  @JsName("Add")
  public open fun add(mediaSource: MediaSource): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MediaPlaylist

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MediaPlaylist

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MediaPlaylist

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MediaPlaylist

    @JsName("C")
    public fun copy(other: UObject): MediaPlaylist

    @JsName("C")
    public fun copy(other: Any): MediaPlaylist
  }
}

@JsName("EMediaPlayerTrack")
public external object MediaPlayerTrack {
  public var Audio: String

  public var Caption: String

  public var Metadata: String

  public var Script: String

  public var Subtitle: String

  public var Text: String

  public var Video: String

  @JsName("EMediaPlayerTrack_MAX")
  public var Max: String
}

public open external class MediaPlayerTrackOptions {
  @JsName("Audio")
  public open var audio: Number

  @JsName("Caption")
  public open var caption: Number

  @JsName("MetaData")
  public open var metaData: Number

  @JsName("Script")
  public open var script: Number

  @JsName("Subtitle")
  public open var subtitle: Number

  public open var text: Number

  @JsName("Video")
  public open var video: Number

  public open fun clone(): MediaPlayerTrackOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MediaPlayerTrackOptions

    @JsName("C")
    public fun copy(other: Any): MediaPlayerTrackOptions
  }
}

@JsName("EMediaPlayerOptionBooleanOverride")
public external object MediaPlayerOptionBooleanOverride {
  public var UseMediaPlayerSetting: String

  public var Enabled: String

  public var Disabled: String

  @JsName("EMediaPlayerOptionBooleanOverride_MAX")
  public var Max: String
}

public open external class MediaPlayerOptions {
  @JsName("Tracks")
  public open var tracks: MediaPlayerTrackOptions

  @JsName("SeekTime")
  public open var seekTime: Timespan

  @JsName("PlayOnOpen")
  public open var playOnOpen: String

  public open var loop: String

  public open fun clone(): MediaPlayerOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MediaPlayerOptions

    @JsName("C")
    public fun copy(other: Any): MediaPlayerOptions
  }
}

public open external class MediaTimeStampInfo(
  outer: UObject,
) : UObject {
  @JsName("Time")
  public open var time: Timespan

  @JsName("SequenceIndex")
  public open var sequenceIndex: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MediaTimeStampInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MediaTimeStampInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MediaTimeStampInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MediaTimeStampInfo

    @JsName("C")
    public fun copy(other: UObject): MediaTimeStampInfo

    @JsName("C")
    public fun copy(other: Any): MediaTimeStampInfo
  }
}

@JsName("T$701")
public external interface SuccessProvider {
  @JsName("bSuccess")
  public var success: Boolean
}

@JsName("T$702")
public external interface OutRatesProvider {
  @JsName("OutRates")
  public var outRates: Array<FloatRange>
}

public open external class MediaPlayer(
  outer: UObject,
) : UObject {
  @JsName("OnEndReached")
  public open var onEndReached: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnMediaClosed")
  public open var onMediaClosed: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnMediaOpened")
  public open var onMediaOpened: UnrealEngineMulticastDelegate<(OpenedUrl: String) -> Unit>

  @JsName("OnMediaOpenFailed")
  public open var onMediaOpenFailed: UnrealEngineMulticastDelegate<(FailedUrl: String) -> Unit>

  @JsName("OnPlaybackResumed")
  public open var onPlaybackResumed: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnPlaybackSuspended")
  public open var onPlaybackSuspended: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnSeekCompleted")
  public open var onSeekCompleted: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnTracksChanged")
  public open var onTracksChanged: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("CacheAhead")
  public open var cacheAhead: Timespan

  @JsName("CacheBehind")
  public open var cacheBehind: Timespan

  @JsName("CacheBehindGame")
  public open var cacheBehindGame: Timespan

  @JsName("NativeAudioOut")
  public open var nativeAudioOut: Boolean

  @JsName("PlayOnOpen")
  public open var playOnOpen: Boolean

  @JsName("Shuffle")
  public open var shuffle: Boolean

  public open var loop: Boolean

  @JsName("Playlist")
  public open var playlist: MediaPlaylist

  @JsName("PlaylistIndex")
  public open var playlistIndex: Number

  @JsName("TimeDelay")
  public open var timeDelay: Timespan

  @JsName("HorizontalFieldOfView")
  public open var horizontalFieldOfView: Number

  @JsName("VerticalFieldOfView")
  public open var verticalFieldOfView: Number

  @JsName("ViewRotation")
  public open var viewRotation: Rotator

  @JsName("PlayerGuid")
  public open var playerGuid: Guid

  @JsName("AffectedByPIEHandling")
  public open var affectedByPieHandling: Boolean

  @JsName("SupportsSeeking")
  public open fun supportsSeeking(): Boolean

  @JsName("SupportsScrubbing")
  public open fun supportsScrubbing(): Boolean

  @JsName("SupportsRate")
  public open fun supportsRate(rate: Number, unthinned: Boolean): Boolean

  @JsName("SetViewRotation")
  public open fun setViewRotation(rotation: Rotator, absolute: Boolean): Boolean

  @JsName("SetViewField")
  public open fun setViewField(
    horizontal: Number,
    vertical: Number,
    absolute: Boolean,
  ): Boolean

  @JsName("SetVideoTrackFrameRate")
  public open fun setVideoTrackFrameRate(
    trackIndex: Number,
    formatIndex: Number,
    frameRate: Number,
  ): Boolean

  @JsName("SetTrackFormat")
  public open fun setTrackFormat(
    trackType: String,
    trackIndex: Number,
    formatIndex: Number,
  ): Boolean

  @JsName("SetTimeDelay")
  public open fun setTimeDelay(timeDelay: Timespan): Unit

  @JsName("SetRate")
  public open fun setRate(rate: Number): Boolean

  @JsName("SetNativeVolume")
  public open fun setNativeVolume(volume: Number): Boolean

  @JsName("SetMediaOptions")
  public open fun setMediaOptions(options: MediaSource): Unit

  @JsName("SetLooping")
  public open fun setLooping(looping: Boolean): Boolean

  @JsName("SetDesiredPlayerName")
  public open fun setDesiredPlayerName(playerName: String): Unit

  @JsName("SetBlockOnTime")
  public open fun setBlockOnTime(time: Timespan): Unit

  @JsName("SelectTrack")
  public open fun selectTrack(trackType: String, trackIndex: Number): Boolean

  @JsName("Seek")
  public open fun seek(time: Timespan): Boolean

  @JsName("Rewind")
  public open fun rewind(): Boolean

  @JsName("Reopen")
  public open fun reopen(): Boolean

  @JsName("Previous")
  public open fun previous(): Boolean

  @JsName("PlayAndSeek")
  public open fun playAndSeek(): Unit

  @JsName("Play")
  public open fun play(): Boolean

  @JsName("Pause")
  public open fun pause(): Boolean

  @JsName("OpenUrl")
  public open fun openUrl(URL: String): Boolean

  @JsName("OpenSourceWithOptions")
  public open fun openSourceWithOptions(mediaSource: MediaSource, options: MediaPlayerOptions):
      Boolean

  @JsName("OpenSourceLatent")
  public open fun openSourceLatent(
    worldContextObject: UObject,
    latentInfo: LatentActionInfo,
    mediaSource: MediaSource,
    options: MediaPlayerOptions,
    success: Boolean,
  ): SuccessProvider

  @JsName("OpenSource")
  public open fun openSource(mediaSource: MediaSource): Boolean

  @JsName("OpenPlaylistIndex")
  public open fun openPlaylistIndex(inPlaylist: MediaPlaylist, index: Number): Boolean

  @JsName("OpenPlaylist")
  public open fun openPlaylist(inPlaylist: MediaPlaylist): Boolean

  @JsName("OpenFile")
  public open fun openFile(filePath: String): Boolean

  @JsName("Next")
  public open fun next(): Boolean

  @JsName("IsReady")
  public open fun isReady(): Boolean

  @JsName("IsPreparing")
  public open fun isPreparing(): Boolean

  @JsName("IsPlaying")
  public open fun isPlaying(): Boolean

  @JsName("IsPaused")
  public open fun isPaused(): Boolean

  @JsName("IsLooping")
  public open fun isLooping(): Boolean

  @JsName("IsConnecting")
  public open fun isConnecting(): Boolean

  @JsName("IsClosed")
  public open fun isClosed(): Boolean

  @JsName("IsBuffering")
  public open fun isBuffering(): Boolean

  @JsName("HasError")
  public open fun hasError(): Boolean

  @JsName("GetViewRotation")
  public open fun getViewRotation(): Rotator

  @JsName("GetVideoTrackType")
  public open fun getVideoTrackType(trackIndex: Number, formatIndex: Number): String

  @JsName("GetVideoTrackFrameRates")
  public open fun getVideoTrackFrameRates(trackIndex: Number, formatIndex: Number): FloatRange

  @JsName("GetVideoTrackFrameRate")
  public open fun getVideoTrackFrameRate(trackIndex: Number, formatIndex: Number): Number

  @JsName("GetVideoTrackDimensions")
  public open fun getVideoTrackDimensions(trackIndex: Number, formatIndex: Number): IntPoint

  @JsName("GetVideoTrackAspectRatio")
  public open fun getVideoTrackAspectRatio(trackIndex: Number, formatIndex: Number): Number

  @JsName("GetVerticalFieldOfView")
  public open fun getVerticalFieldOfView(): Number

  @JsName("GetUrl")
  public open fun getUrl(): String

  @JsName("GetTrackLanguage")
  public open fun getTrackLanguage(trackType: String, trackIndex: Number): String

  @JsName("GetTrackFormat")
  public open fun getTrackFormat(trackType: String, trackIndex: Number): Number

  @JsName("GetTrackDisplayName")
  public open fun getTrackDisplayName(trackType: String, trackIndex: Number): String

  @JsName("GetTimeStamp")
  public open fun getTimeStamp(): MediaTimeStampInfo

  @JsName("GetTimeDelay")
  public open fun getTimeDelay(): Timespan

  @JsName("GetTime")
  public open fun getTime(): Timespan

  @JsName("GetSupportedRates")
  public open fun getSupportedRates(outRates: Array<FloatRange>, unthinned: Boolean):
      OutRatesProvider

  @JsName("GetSelectedTrack")
  public open fun getSelectedTrack(trackType: String): Number

  @JsName("GetRate")
  public open fun getRate(): Number

  @JsName("GetPlaylistIndex")
  public open fun getPlaylistIndex(): Number

  @JsName("GetPlaylist")
  public open fun getPlaylist(): MediaPlaylist

  @JsName("GetPlayerName")
  public open fun getPlayerName(): String

  @JsName("GetNumTracks")
  public open fun getNumTracks(trackType: String): Number

  @JsName("GetNumTrackFormats")
  public open fun getNumTrackFormats(trackType: String, trackIndex: Number): Number

  @JsName("GetMediaName")
  public open fun getMediaName(): String

  @JsName("GetHorizontalFieldOfView")
  public open fun getHorizontalFieldOfView(): Number

  @JsName("GetDuration")
  public open fun getDuration(): Timespan

  @JsName("GetDesiredPlayerName")
  public open fun getDesiredPlayerName(): String

  @JsName("GetAudioTrackType")
  public open fun getAudioTrackType(trackIndex: Number, formatIndex: Number): String

  @JsName("GetAudioTrackSampleRate")
  public open fun getAudioTrackSampleRate(trackIndex: Number, formatIndex: Number): Number

  @JsName("GetAudioTrackChannels")
  public open fun getAudioTrackChannels(trackIndex: Number, formatIndex: Number): Number

  @JsName("Close")
  public open fun close(): Unit

  @JsName("CanPlayUrl")
  public open fun canPlayUrl(URL: String): Boolean

  @JsName("CanPlaySource")
  public open fun canPlaySource(mediaSource: MediaSource): Boolean

  @JsName("CanPause")
  public open fun canPause(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MediaPlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MediaPlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MediaPlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MediaPlayer

    @JsName("C")
    public fun copy(other: UObject): MediaPlayer

    @JsName("C")
    public fun copy(other: Any): MediaPlayer
  }
}

public open external class MediaTexture(
  outer: UObject,
) : Texture {
  @JsName("AddressX")
  public open var addressX: String

  @JsName("AddressY")
  public open var addressY: String

  @JsName("AutoClear")
  public open var autoClear: Boolean

  @JsName("ClearColor")
  public open var clearColor: LinearColor

  @JsName("EnableGenMips")
  public open var enableGenMips: Boolean

  @JsName("NumMips")
  public open var numMips: Number

  @JsName("NewStyleOutput")
  public open var newStyleOutput: Boolean

  @JsName("OutputFormat")
  public open var outputFormat: String

  @JsName("CurrentAspectRatio")
  public open var currentAspectRatio: Number

  @JsName("CurrentOrientation")
  public open var currentOrientation: String

  @JsName("MediaPlayer")
  public open var mediaPlayer: MediaPlayer

  @JsName("UpdateResource")
  public open fun updateResource(): Unit

  @JsName("SetMediaPlayer")
  public open fun setMediaPlayer(newMediaPlayer: MediaPlayer): Unit

  @JsName("GetWidth")
  public open fun getWidth(): Number

  @JsName("GetTextureNumMips")
  public open fun getTextureNumMips(): Number

  @JsName("GetMediaPlayer")
  public open fun getMediaPlayer(): MediaPlayer

  @JsName("GetHeight")
  public open fun getHeight(): Number

  @JsName("GetAspectRatio")
  public open fun getAspectRatio(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MediaTexture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MediaTexture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MediaTexture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MediaTexture

    @JsName("C")
    public fun copy(other: UObject): MediaTexture

    @JsName("C")
    public fun copy(other: Any): MediaTexture
  }
}

public open external class MediaComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("MediaTexture")
  public open var mediaTexture: MediaTexture

  @JsName("MediaPlayer")
  public open var mediaPlayer: MediaPlayer

  @JsName("GetMediaTexture")
  public open fun getMediaTexture(): MediaTexture

  @JsName("GetMediaPlayer")
  public open fun getMediaPlayer(): MediaPlayer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MediaComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MediaComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MediaComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MediaComponent

    @JsName("C")
    public fun copy(other: UObject): MediaComponent

    @JsName("C")
    public fun copy(other: Any): MediaComponent
  }
}

@JsName("EMediaSoundChannels")
public external object MediaSoundChannels {
  public var Mono: String

  public var Stereo: String

  public var Surround: String

  @JsName("EMediaSoundChannels_MAX")
  public var Max: String
}

@JsName("EMediaSoundComponentFFTSize")
public external object MediaSoundComponentFFTSize {
  @JsName("Min_64")
  public var Min64: String

  @JsName("Small_256")
  public var Small256: String

  @JsName("Medium_512")
  public var Medium512: String

  @JsName("Large_1024")
  public var Large1024: String

  @JsName("EMediaSoundComponentFFTSize_MAX")
  public var Max: String
}

public open external class MediaSoundComponentSpectralData {
  @JsName("FrequencyHz")
  public open var frequencyHz: Number

  @JsName("Magnitude")
  public open var magnitude: Number

  public open fun clone(): MediaSoundComponentSpectralData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MediaSoundComponentSpectralData

    @JsName("C")
    public fun copy(other: Any): MediaSoundComponentSpectralData
  }
}

public open external class MediaSoundComponent(
  outer: UObject,
) : SynthComponent {
  @JsName("Channels")
  public open var channels: String

  @JsName("DynamicRateAdjustment")
  public open var dynamicRateAdjustment: Boolean

  @JsName("RateAdjustmentFactor")
  public open var rateAdjustmentFactor: Number

  @JsName("RateAdjustmentRange")
  public open var rateAdjustmentRange: FloatRange

  @JsName("MediaPlayer")
  public open var mediaPlayer: MediaPlayer

  @JsName("SetSpectralAnalysisSettings")
  public open fun setSpectralAnalysisSettings(inFrequenciesToAnalyze: Array<Number>,
      inFftSize: String): Unit

  @JsName("SetMediaPlayer")
  public open fun setMediaPlayer(newMediaPlayer: MediaPlayer): Unit

  @JsName("SetEnvelopeFollowingsettings")
  public open fun setEnvelopeFollowingsettings(attackTimeMsec: Number, releaseTimeMsec: Number):
      Unit

  @JsName("SetEnableSpectralAnalysis")
  public open fun setEnableSpectralAnalysis(inSpectralAnalysisEnabled: Boolean): Unit

  @JsName("SetEnableEnvelopeFollowing")
  public open fun setEnableEnvelopeFollowing(inEnvelopeFollowing: Boolean): Unit

  @JsName("GetSpectralData")
  public open fun getSpectralData(): Array<MediaSoundComponentSpectralData>

  @JsName("GetNormalizedSpectralData")
  public open fun getNormalizedSpectralData(): Array<MediaSoundComponentSpectralData>

  @JsName("GetMediaPlayer")
  public open fun getMediaPlayer(): MediaPlayer

  @JsName("GetEnvelopeValue")
  public open fun getEnvelopeValue(): Number

  @JsName("BP_GetAttenuationSettingsToApply")
  public open fun bpGetAttenuationSettingsToApply(outAttenuationSettings: SoundAttenuationSettings):
      Object267

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MediaSoundComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MediaSoundComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MediaSoundComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MediaSoundComponent

    @JsName("C")
    public fun copy(other: UObject): MediaSoundComponent

    @JsName("C")
    public fun copy(other: Any): MediaSoundComponent
  }
}

public open external class PlatformMediaSource : MediaSource {
  @JsName("PlatformMediaSources")
  public open var platformMediaSources: Any

  @JsName("MediaSource")
  public open var mediaSource: MediaSource

  public fun addEventListener(
    type: String,
    listener: EventListener,
    options: Boolean,
  ): Unit

  public fun addEventListener(type: String, listener: EventListener): Unit

  public fun addEventListener(
    type: String,
    listener: EventListener,
    options: AddEventListenerOptions,
  ): Unit

  public fun addEventListener(
    type: String,
    listener: EventListenerObject,
    options: Boolean,
  ): Unit

  public fun addEventListener(type: String, listener: EventListenerObject): Unit

  public fun addEventListener(
    type: String,
    listener: EventListenerObject,
    options: AddEventListenerOptions,
  ): Unit

  public fun removeEventListener(
    type: String,
    listener: EventListener,
    options: Boolean,
  ): Unit

  public fun removeEventListener(type: String, listener: EventListener): Unit

  public fun removeEventListener(
    type: String,
    listener: EventListener,
    options: EventListenerOptions,
  ): Unit

  public fun removeEventListener(
    type: String,
    listener: EventListenerObject,
    options: Boolean,
  ): Unit

  public fun removeEventListener(type: String, listener: EventListenerObject): Unit

  public fun removeEventListener(
    type: String,
    listener: EventListenerObject,
    options: EventListenerOptions,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlatformMediaSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlatformMediaSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlatformMediaSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlatformMediaSource

    @JsName("C")
    public fun copy(other: UObject): PlatformMediaSource

    @JsName("C")
    public fun copy(other: Any): PlatformMediaSource
  }
}

public open external class StreamMediaSource : BaseMediaSource {
  @JsName("StreamUrl")
  public open var streamUrl: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StreamMediaSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StreamMediaSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StreamMediaSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StreamMediaSource

    @JsName("C")
    public fun copy(other: UObject): StreamMediaSource

    @JsName("C")
    public fun copy(other: Any): StreamMediaSource
  }
}

public open external class TimeSynchronizableMediaSource : BaseMediaSource {
  @JsName("bUseTimeSynchronization")
  public open var useTimeSynchronization: Boolean

  @JsName("FrameDelay")
  public open var frameDelay: Number

  @JsName("TimeDelay")
  public open var timeDelay: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TimeSynchronizableMediaSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TimeSynchronizableMediaSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TimeSynchronizableMediaSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TimeSynchronizableMediaSource

    @JsName("C")
    public fun copy(other: UObject): TimeSynchronizableMediaSource

    @JsName("C")
    public fun copy(other: Any): TimeSynchronizableMediaSource
  }
}

public open external class AnimSequenceLevelSequenceLink(
  outer: UObject,
) : AssetUserData {
  @JsName("SkelTrackGuid")
  public open var skelTrackGuid: Guid

  @JsName("PathToLevelSequence")
  public open var pathToLevelSequence: SoftObjectPath

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSequenceLevelSequenceLink

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSequenceLevelSequenceLink

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSequenceLevelSequenceLink

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSequenceLevelSequenceLink

    @JsName("C")
    public fun copy(other: UObject): AnimSequenceLevelSequenceLink

    @JsName("C")
    public fun copy(other: Any): AnimSequenceLevelSequenceLink
  }
}

public open external class DefaultLevelSequenceInstanceData(
  outer: UObject,
) : UObject {
  @JsName("TransformOriginActor")
  public open var transformOriginActor: Actor

  @JsName("TransformOrigin")
  public open var transformOrigin: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DefaultLevelSequenceInstanceData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DefaultLevelSequenceInstanceData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DefaultLevelSequenceInstanceData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DefaultLevelSequenceInstanceData

    @JsName("C")
    public fun copy(other: UObject): DefaultLevelSequenceInstanceData

    @JsName("C")
    public fun copy(other: Any): DefaultLevelSequenceInstanceData
  }
}

public open external class LevelSequenceMetaData(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceMetaData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceMetaData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceMetaData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceMetaData

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceMetaData

    @JsName("C")
    public fun copy(other: Any): LevelSequenceMetaData
  }
}

@JsName("T$703")
public external interface Object703 {
  @JsName("OutActor")
  public var outActor: LevelSequenceActor

  @JsName("$")
  public var value: LevelSequencePlayer
}

public open external class LevelSequencePlayer(
  outer: UObject,
) : MovieSceneSequencePlayer {
  @JsName("OnCameraCut")
  public open var onCameraCut:
      UnrealEngineMulticastDelegate<(CameraComponent: CameraComponent) -> Unit>

  @JsName("GetActiveCameraComponent")
  public open fun getActiveCameraComponent(): CameraComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequencePlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequencePlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequencePlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequencePlayer

    @JsName("CreateLevelSequencePlayer")
    public fun createLevelSequencePlayer(
      worldContextObject: UObject,
      levelSequence: LevelSequence,
      settings: MovieSceneSequencePlaybackSettings,
      outActor: LevelSequenceActor,
    ): Object703

    @JsName("C")
    public fun copy(other: UObject): LevelSequencePlayer

    @JsName("C")
    public fun copy(other: Any): LevelSequencePlayer
  }
}

public open external class LevelSequenceCameraSettings {
  @JsName("bOverrideAspectRatioAxisConstraint")
  public open var overrideAspectRatioAxisConstraint: Boolean

  @JsName("AspectRatioAxisConstraint")
  public open var aspectRatioAxisConstraint: String

  public open fun clone(): LevelSequenceCameraSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelSequenceCameraSettings

    @JsName("C")
    public fun copy(other: Any): LevelSequenceCameraSettings
  }
}

public open external class LevelSequencePlayerSnapshot {
  @JsName("MasterName")
  public open var masterName: String

  @JsName("MasterTime")
  public open var masterTime: QualifiedFrameTime

  @JsName("SourceTime")
  public open var sourceTime: QualifiedFrameTime

  @JsName("CurrentShotName")
  public open var currentShotName: String

  @JsName("CurrentShotLocalTime")
  public open var currentShotLocalTime: QualifiedFrameTime

  @JsName("CurrentShotSourceTime")
  public open var currentShotSourceTime: QualifiedFrameTime

  @JsName("SourceTimecode")
  public open var sourceTimecode: String

  @JsName("CameraComponent")
  public open var cameraComponent: CameraComponent

  @JsName("ActiveShot")
  public open var activeShot: LevelSequence

  @JsName("ShotID")
  public open var shotId: MovieSceneSequenceId

  public open fun clone(): LevelSequencePlayerSnapshot

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelSequencePlayerSnapshot

    @JsName("C")
    public fun copy(other: Any): LevelSequencePlayerSnapshot
  }
}

public open external class LevelSequenceBurnIn(
  outer: UObject,
) : UserWidget {
  @JsName("FrameInformation")
  public open var frameInformation: LevelSequencePlayerSnapshot

  @JsName("LevelSequenceActor")
  public open var levelSequenceActor: LevelSequenceActor

  @JsName("SetSettings")
  public open fun setSettings(inSettings: UObject): Unit

  @JsName("GetSettingsClass")
  public open fun getSettingsClass(): UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceBurnIn

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceBurnIn

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceBurnIn

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceBurnIn

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceBurnIn

    @JsName("C")
    public fun copy(other: Any): LevelSequenceBurnIn
  }
}

public open external class LevelSequenceActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("PlaybackSettings")
  public open var playbackSettings: MovieSceneSequencePlaybackSettings

  @JsName("SequencePlayer")
  public open var sequencePlayer: LevelSequencePlayer

  @JsName("LevelSequenceAsset")
  public open var levelSequenceAsset: LevelSequence

  @JsName("LevelSequence")
  public open var levelSequence: SoftObjectPath

  @JsName("CameraSettings")
  public open var cameraSettings: LevelSequenceCameraSettings

  @JsName("BurnInOptions")
  public open var burnInOptions: LevelSequenceBurnInOptions

  @JsName("BindingOverrides")
  public open var bindingOverrides: MovieSceneBindingOverrides

  @JsName("bAutoPlay")
  public open var autoPlay: Boolean

  @JsName("bOverrideInstanceData")
  public open var overrideInstanceData: Boolean

  @JsName("bReplicatePlayback")
  public open var replicatePlayback: Boolean

  @JsName("DefaultInstanceData")
  public open var defaultInstanceData: UObject

  @JsName("BurnInInstance")
  public open var burnInInstance: LevelSequenceBurnIn

  @JsName("bShowBurnin")
  public open var showBurnin: Boolean

  @JsName("ShowBurnin")
  public open fun showBurnin(): Unit

  @JsName("SetSequence")
  public open fun setSequence(inSequence: LevelSequence): Unit

  @JsName("SetReplicatePlayback")
  public open fun setReplicatePlayback(replicatePlayback: Boolean): Unit

  @JsName("SetBindingByTag")
  public open fun setBindingByTag(
    bindingTag: String,
    actors: Array<Actor>,
    allowBindingsFromAsset: Boolean,
  ): Unit

  @JsName("SetBinding")
  public open fun setBinding(
    binding: MovieSceneObjectBindingId,
    actors: Array<Actor>,
    allowBindingsFromAsset: Boolean,
  ): Unit

  @JsName("ResetBindings")
  public open fun resetBindings(): Unit

  @JsName("ResetBinding")
  public open fun resetBinding(binding: MovieSceneObjectBindingId): Unit

  @JsName("RemoveBindingByTag")
  public open fun removeBindingByTag(tag: String, actor: Actor): Unit

  @JsName("RemoveBinding")
  public open fun removeBinding(binding: MovieSceneObjectBindingId, actor: Actor): Unit

  @JsName("LoadSequence")
  public open fun loadSequence(): LevelSequence

  @JsName("HideBurnin")
  public open fun hideBurnin(): Unit

  @JsName("GetSequencePlayer")
  public open fun getSequencePlayer(): LevelSequencePlayer

  @JsName("GetSequence")
  public open fun getSequence(): LevelSequence

  @JsName("FindNamedBindings")
  public open fun findNamedBindings(tag: String): Array<MovieSceneObjectBindingId>

  @JsName("FindNamedBinding")
  public open fun findNamedBinding(tag: String): MovieSceneObjectBindingId

  @JsName("AddBindingByTag")
  public open fun addBindingByTag(
    bindingTag: String,
    actor: Actor,
    allowBindingsFromAsset: Boolean,
  ): Unit

  @JsName("AddBinding")
  public open fun addBinding(
    binding: MovieSceneObjectBindingId,
    actor: Actor,
    allowBindingsFromAsset: Boolean,
  ): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceActor

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceActor

    @JsName("C")
    public fun copy(other: Any): LevelSequenceActor
  }
}

public open external class LevelSequenceAnimSequenceLinkItem {
  @JsName("SkelTrackGuid")
  public open var skelTrackGuid: Guid

  @JsName("PathToAnimSequence")
  public open var pathToAnimSequence: SoftObjectPath

  @JsName("bExportTransforms")
  public open var exportTransforms: Boolean

  @JsName("bExportMorphTargets")
  public open var exportMorphTargets: Boolean

  @JsName("bExportAttributeCurves")
  public open var exportAttributeCurves: Boolean

  @JsName("bExportMaterialCurves")
  public open var exportMaterialCurves: Boolean

  @JsName("bRecordInWorldSpace")
  public open var recordInWorldSpace: Boolean

  public open fun clone(): LevelSequenceAnimSequenceLinkItem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelSequenceAnimSequenceLinkItem

    @JsName("C")
    public fun copy(other: Any): LevelSequenceAnimSequenceLinkItem
  }
}

public open external class LevelSequenceAnimSequenceLink(
  outer: UObject,
) : AssetUserData {
  @JsName("AnimSequenceLinks")
  public open var animSequenceLinks: Array<LevelSequenceAnimSequenceLinkItem>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceAnimSequenceLink

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceAnimSequenceLink

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceAnimSequenceLink

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceAnimSequenceLink

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceAnimSequenceLink

    @JsName("C")
    public fun copy(other: Any): LevelSequenceAnimSequenceLink
  }
}

public open external class LevelSequenceDirector(
  outer: UObject,
) : UObject {
  @JsName("Player")
  public open var player: LevelSequencePlayer

  @JsName("SubSequenceID")
  public open var subSequenceId: Number

  @JsName("MovieScenePlayerIndex")
  public open var movieScenePlayerIndex: Number

  @JsName("OnCreated")
  public open fun onCreated(): Unit

  @JsName("GetSequence")
  public open fun getSequence(): MovieSceneSequence

  @JsName("GetBoundObjects")
  public open fun getBoundObjects(objectBinding: MovieSceneObjectBindingId): Array<UObject>

  @JsName("GetBoundObject")
  public open fun getBoundObject(objectBinding: MovieSceneObjectBindingId): UObject

  @JsName("GetBoundActors")
  public open fun getBoundActors(objectBinding: MovieSceneObjectBindingId): Array<Actor>

  @JsName("GetBoundActor")
  public open fun getBoundActor(objectBinding: MovieSceneObjectBindingId): Actor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceDirector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceDirector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceDirector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceDirector

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceDirector

    @JsName("C")
    public fun copy(other: Any): LevelSequenceDirector
  }
}

public open external class LegacyLevelSequenceDirectorBlueprint(
  outer: UObject,
) : Blueprint {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LegacyLevelSequenceDirectorBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LegacyLevelSequenceDirectorBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LegacyLevelSequenceDirectorBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LegacyLevelSequenceDirectorBlueprint

    @JsName("C")
    public fun copy(other: UObject): LegacyLevelSequenceDirectorBlueprint

    @JsName("C")
    public fun copy(other: Any): LegacyLevelSequenceDirectorBlueprint
  }
}

public open external class LevelSequenceProjectSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bDefaultLockEngineToDisplayRate")
  public open var defaultLockEngineToDisplayRate: Boolean

  @JsName("DefaultDisplayRate")
  public open var defaultDisplayRate: String

  @JsName("DefaultTickResolution")
  public open var defaultTickResolution: String

  @JsName("DefaultClockSource")
  public open var defaultClockSource: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceProjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceProjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceProjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceProjectSettings

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceProjectSettings

    @JsName("C")
    public fun copy(other: Any): LevelSequenceProjectSettings
  }
}

public open external class LevelSequenceMediaController(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("Sequence")
  public open var sequence: LevelSequenceActor

  @JsName("MediaComponent")
  public open var mediaComponent: MediaComponent

  @JsName("ServerStartTimeSeconds")
  public open var serverStartTimeSeconds: Number

  @JsName("SynchronizeToServer")
  public open fun synchronizeToServer(desyncThresholdSeconds: Number): Unit

  @JsName("Play")
  public open fun play(): Unit

  @JsName("OnRep_ServerStartTimeSeconds")
  public open fun onRepServerStartTimeSeconds(): Unit

  @JsName("GetSequence")
  public open fun getSequence(): LevelSequenceActor

  @JsName("GetMediaComponent")
  public open fun getMediaComponent(): MediaComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceMediaController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceMediaController

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceMediaController

    @JsName("C")
    public fun copy(other: Any): LevelSequenceMediaController
  }
}

public open external class ActorElementDetailsInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementDetailsInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementDetailsInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementDetailsInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementDetailsInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementDetailsInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementDetailsInterface
  }
}

public open external class ActorElementAssetDataInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementAssetDataInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementAssetDataInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementAssetDataInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementAssetDataInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementAssetDataInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementAssetDataInterface
  }
}

public open external class ActorElementEditorAssetDataInterface(
  outer: UObject,
) : ActorElementAssetDataInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementEditorAssetDataInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementEditorAssetDataInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementEditorAssetDataInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementEditorAssetDataInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementEditorAssetDataInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementEditorAssetDataInterface
  }
}

public open external class ActorElementSelectionInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementSelectionInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementSelectionInterface
  }
}

public open external class ActorElementEditorSelectionInterface(
  outer: UObject,
) : ActorElementSelectionInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementEditorSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementEditorSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementEditorSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementEditorSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementEditorSelectionInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementEditorSelectionInterface
  }
}

public open external class ActorElementWorldInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementWorldInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementWorldInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementWorldInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementWorldInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementWorldInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementWorldInterface
  }
}

public open external class ActorElementEditorWorldInterface(
  outer: UObject,
) : ActorElementWorldInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementEditorWorldInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementEditorWorldInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementEditorWorldInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementEditorWorldInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementEditorWorldInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementEditorWorldInterface
  }
}

public open external class ActorFactoryAmbientSound(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryAmbientSound

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryAmbientSound

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryAmbientSound

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryAmbientSound

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryAmbientSound

    @JsName("C")
    public fun copy(other: Any): ActorFactoryAmbientSound
  }
}

public open external class ActorFactorySkeletalMesh(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactorySkeletalMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactorySkeletalMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactorySkeletalMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactorySkeletalMesh

    @JsName("C")
    public fun copy(other: UObject): ActorFactorySkeletalMesh

    @JsName("C")
    public fun copy(other: Any): ActorFactorySkeletalMesh
  }
}

public open external class ActorFactoryAnimationAsset(
  outer: UObject,
) : ActorFactorySkeletalMesh {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryAnimationAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryAnimationAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryAnimationAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryAnimationAsset

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryAnimationAsset

    @JsName("C")
    public fun copy(other: Any): ActorFactoryAnimationAsset
  }
}

public open external class ActorFactoryStaticMesh(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryStaticMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryStaticMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryStaticMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryStaticMesh

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryStaticMesh

    @JsName("C")
    public fun copy(other: Any): ActorFactoryStaticMesh
  }
}

public open external class ActorFactoryBasicShape(
  outer: UObject,
) : ActorFactoryStaticMesh {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryBasicShape

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryBasicShape

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryBasicShape

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryBasicShape

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryBasicShape

    @JsName("C")
    public fun copy(other: Any): ActorFactoryBasicShape
  }
}

public open external class ActorFactoryBlueprint(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryBlueprint

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryBlueprint

    @JsName("C")
    public fun copy(other: Any): ActorFactoryBlueprint
  }
}

public open external class ActorFactoryBoxReflectionCapture(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryBoxReflectionCapture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryBoxReflectionCapture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryBoxReflectionCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryBoxReflectionCapture

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryBoxReflectionCapture

    @JsName("C")
    public fun copy(other: Any): ActorFactoryBoxReflectionCapture
  }
}

public open external class ActorFactoryCameraActor(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryCameraActor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryCameraActor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryCameraActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryCameraActor

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryCameraActor

    @JsName("C")
    public fun copy(other: Any): ActorFactoryCameraActor
  }
}

public open external class ActorFactoryCharacter(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryCharacter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryCharacter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryCharacter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryCharacter

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryCharacter

    @JsName("C")
    public fun copy(other: Any): ActorFactoryCharacter
  }
}

public open external class ActorFactoryClass(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryClass

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryClass

    @JsName("C")
    public fun copy(other: Any): ActorFactoryClass
  }
}

public open external class ActorFactoryCylinderVolume(
  outer: UObject,
) : ActorFactoryVolume {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryCylinderVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryCylinderVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryCylinderVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryCylinderVolume

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryCylinderVolume

    @JsName("C")
    public fun copy(other: Any): ActorFactoryCylinderVolume
  }
}

public open external class ActorFactoryDeferredDecal(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryDeferredDecal

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryDeferredDecal

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryDeferredDecal

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryDeferredDecal

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryDeferredDecal

    @JsName("C")
    public fun copy(other: Any): ActorFactoryDeferredDecal
  }
}

public open external class ActorFactoryDirectionalLight(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryDirectionalLight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryDirectionalLight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryDirectionalLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryDirectionalLight

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryDirectionalLight

    @JsName("C")
    public fun copy(other: Any): ActorFactoryDirectionalLight
  }
}

public open external class ActorFactoryEmitter(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryEmitter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryEmitter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryEmitter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryEmitter

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryEmitter

    @JsName("C")
    public fun copy(other: Any): ActorFactoryEmitter
  }
}

public open external class ActorFactoryEmptyActor(
  outer: UObject,
) : ActorFactory {
  @JsName("bVisualizeActor")
  public open var visualizeActor: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryEmptyActor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryEmptyActor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryEmptyActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryEmptyActor

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryEmptyActor

    @JsName("C")
    public fun copy(other: Any): ActorFactoryEmptyActor
  }
}

public open external class ActorFactoryExponentialHeightFog(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryExponentialHeightFog

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryExponentialHeightFog

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryExponentialHeightFog

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryExponentialHeightFog

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryExponentialHeightFog

    @JsName("C")
    public fun copy(other: Any): ActorFactoryExponentialHeightFog
  }
}

public open external class ActorFactoryInteractiveFoliage(
  outer: UObject,
) : ActorFactoryStaticMesh {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryInteractiveFoliage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryInteractiveFoliage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryInteractiveFoliage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryInteractiveFoliage

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryInteractiveFoliage

    @JsName("C")
    public fun copy(other: Any): ActorFactoryInteractiveFoliage
  }
}

public open external class ActorFactoryLevelSequence(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryLevelSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryLevelSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryLevelSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryLevelSequence

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryLevelSequence

    @JsName("C")
    public fun copy(other: Any): ActorFactoryLevelSequence
  }
}

public open external class ActorFactoryNote(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryNote

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryNote

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryNote

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryNote

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryNote

    @JsName("C")
    public fun copy(other: Any): ActorFactoryNote
  }
}

public open external class ActorFactoryPawn(
  outer: UObject,
) : ActorFactoryEmptyActor {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryPawn

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryPawn

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryPawn

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryPawn

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryPawn

    @JsName("C")
    public fun copy(other: Any): ActorFactoryPawn
  }
}

public open external class ActorFactoryPhysicsAsset(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryPhysicsAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryPhysicsAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryPhysicsAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryPhysicsAsset

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryPhysicsAsset

    @JsName("C")
    public fun copy(other: Any): ActorFactoryPhysicsAsset
  }
}

public open external class ActorFactoryPlanarReflection(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryPlanarReflection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryPlanarReflection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryPlanarReflection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryPlanarReflection

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryPlanarReflection

    @JsName("C")
    public fun copy(other: Any): ActorFactoryPlanarReflection
  }
}

public open external class ActorFactoryPlaneReflectionCapture(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryPlaneReflectionCapture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryPlaneReflectionCapture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryPlaneReflectionCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryPlaneReflectionCapture

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryPlaneReflectionCapture

    @JsName("C")
    public fun copy(other: Any): ActorFactoryPlaneReflectionCapture
  }
}

public open external class ActorFactoryPlayerStart(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryPlayerStart

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryPlayerStart

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryPlayerStart

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryPlayerStart

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryPlayerStart

    @JsName("C")
    public fun copy(other: Any): ActorFactoryPlayerStart
  }
}

public open external class ActorFactoryPointLight(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryPointLight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryPointLight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryPointLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryPointLight

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryPointLight

    @JsName("C")
    public fun copy(other: Any): ActorFactoryPointLight
  }
}

public open external class ActorFactoryRectLight(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryRectLight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryRectLight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryRectLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryRectLight

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryRectLight

    @JsName("C")
    public fun copy(other: Any): ActorFactoryRectLight
  }
}

public open external class ActorFactoryRuntimeVirtualTextureVolume(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryRuntimeVirtualTextureVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryRuntimeVirtualTextureVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryRuntimeVirtualTextureVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryRuntimeVirtualTextureVolume

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryRuntimeVirtualTextureVolume

    @JsName("C")
    public fun copy(other: Any): ActorFactoryRuntimeVirtualTextureVolume
  }
}

public open external class ActorFactorySkyAtmosphere(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactorySkyAtmosphere

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactorySkyAtmosphere

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactorySkyAtmosphere

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactorySkyAtmosphere

    @JsName("C")
    public fun copy(other: UObject): ActorFactorySkyAtmosphere

    @JsName("C")
    public fun copy(other: Any): ActorFactorySkyAtmosphere
  }
}

public open external class ActorFactorySkyLight(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactorySkyLight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactorySkyLight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactorySkyLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactorySkyLight

    @JsName("C")
    public fun copy(other: UObject): ActorFactorySkyLight

    @JsName("C")
    public fun copy(other: Any): ActorFactorySkyLight
  }
}

public open external class ActorFactorySphereReflectionCapture(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactorySphereReflectionCapture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactorySphereReflectionCapture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactorySphereReflectionCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactorySphereReflectionCapture

    @JsName("C")
    public fun copy(other: UObject): ActorFactorySphereReflectionCapture

    @JsName("C")
    public fun copy(other: Any): ActorFactorySphereReflectionCapture
  }
}

public open external class ActorFactorySphereVolume(
  outer: UObject,
) : ActorFactoryVolume {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactorySphereVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactorySphereVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactorySphereVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactorySphereVolume

    @JsName("C")
    public fun copy(other: UObject): ActorFactorySphereVolume

    @JsName("C")
    public fun copy(other: Any): ActorFactorySphereVolume
  }
}

public open external class ActorFactorySpotLight(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactorySpotLight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactorySpotLight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactorySpotLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactorySpotLight

    @JsName("C")
    public fun copy(other: UObject): ActorFactorySpotLight

    @JsName("C")
    public fun copy(other: Any): ActorFactorySpotLight
  }
}

public open external class ActorFactoryTargetPoint(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryTargetPoint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryTargetPoint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryTargetPoint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryTargetPoint

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryTargetPoint

    @JsName("C")
    public fun copy(other: Any): ActorFactoryTargetPoint
  }
}

public open external class ActorFactoryTextRender(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryTextRender

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryTextRender

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryTextRender

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryTextRender

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryTextRender

    @JsName("C")
    public fun copy(other: Any): ActorFactoryTextRender
  }
}

public open external class ActorFactoryTriggerBox(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryTriggerBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryTriggerBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryTriggerBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryTriggerBox

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryTriggerBox

    @JsName("C")
    public fun copy(other: Any): ActorFactoryTriggerBox
  }
}

public open external class ActorFactoryTriggerCapsule(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryTriggerCapsule

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryTriggerCapsule

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryTriggerCapsule

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryTriggerCapsule

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryTriggerCapsule

    @JsName("C")
    public fun copy(other: Any): ActorFactoryTriggerCapsule
  }
}

public open external class ActorFactoryTriggerSphere(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryTriggerSphere

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryTriggerSphere

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryTriggerSphere

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryTriggerSphere

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryTriggerSphere

    @JsName("C")
    public fun copy(other: Any): ActorFactoryTriggerSphere
  }
}

public open external class ActorFactoryVectorFieldVolume(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryVectorFieldVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryVectorFieldVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryVectorFieldVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryVectorFieldVolume

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryVectorFieldVolume

    @JsName("C")
    public fun copy(other: Any): ActorFactoryVectorFieldVolume
  }
}

public open external class ActorFactoryVolumetricCloud(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryVolumetricCloud

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryVolumetricCloud

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryVolumetricCloud

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryVolumetricCloud

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryVolumetricCloud

    @JsName("C")
    public fun copy(other: Any): ActorFactoryVolumetricCloud
  }
}

public open external class GroupActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("bLocked")
  public open var locked: Boolean

  @JsName("GroupActors")
  public open var groupActors: Array<Actor>

  @JsName("SubGroups")
  public open var subGroups: Array<GroupActor>

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroupActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroupActor

    @JsName("C")
    public fun copy(other: UObject): GroupActor

    @JsName("C")
    public fun copy(other: Any): GroupActor
  }
}

public open external class ActorGroupingUtils(
  outer: UObject,
) : UObject {
  @JsName("UnlockSelectedGroups")
  public open fun unlockSelectedGroups(): Unit

  @JsName("UngroupSelected")
  public open fun ungroupSelected(): Unit

  @JsName("UngroupActors")
  public open fun ungroupActors(actorsToUngroup: Array<Actor>): Unit

  @JsName("RemoveSelectedFromGroup")
  public open fun removeSelectedFromGroup(): Unit

  @JsName("LockSelectedGroups")
  public open fun lockSelectedGroups(): Unit

  @JsName("GroupSelected")
  public open fun groupSelected(): GroupActor

  @JsName("GroupActors")
  public open fun groupActors(actorsToGroup: Array<Actor>): GroupActor

  @JsName("AddSelectedToGroup")
  public open fun addSelectedToGroup(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorGroupingUtils

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorGroupingUtils

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorGroupingUtils

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorGroupingUtils

    @JsName("SetGroupingActive")
    public fun setGroupingActive(inGroupingActive: Boolean): Unit

    @JsName("IsGroupingActive")
    public fun isGroupingActive(): Boolean

    @JsName("Get")
    public fun get(): ActorGroupingUtils

    @JsName("C")
    public fun copy(other: UObject): ActorGroupingUtils

    @JsName("C")
    public fun copy(other: Any): ActorGroupingUtils
  }
}

@JsName("BlendSpaceFactory1D")
public open external class BlendSpaceFactory1d(
  outer: UObject,
) : Factory {
  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlendSpaceFactory1d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlendSpaceFactory1d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlendSpaceFactory1d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlendSpaceFactory1d

    @JsName("C")
    public fun copy(other: UObject): BlendSpaceFactory1d

    @JsName("C")
    public fun copy(other: Any): BlendSpaceFactory1d
  }
}

@JsName("AimOffsetBlendSpaceFactory1D")
public open external class AimOffsetBlendSpaceFactory1d(
  outer: UObject,
) : BlendSpaceFactory1d {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AimOffsetBlendSpaceFactory1d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AimOffsetBlendSpaceFactory1d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AimOffsetBlendSpaceFactory1d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AimOffsetBlendSpaceFactory1d

    @JsName("C")
    public fun copy(other: UObject): AimOffsetBlendSpaceFactory1d

    @JsName("C")
    public fun copy(other: Any): AimOffsetBlendSpaceFactory1d
  }
}

public open external class BlendSpaceFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlendSpaceFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlendSpaceFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlendSpaceFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlendSpaceFactoryNew

    @JsName("C")
    public fun copy(other: UObject): BlendSpaceFactoryNew

    @JsName("C")
    public fun copy(other: Any): BlendSpaceFactoryNew
  }
}

public open external class AimOffsetBlendSpaceFactoryNew(
  outer: UObject,
) : BlendSpaceFactoryNew {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AimOffsetBlendSpaceFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AimOffsetBlendSpaceFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AimOffsetBlendSpaceFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AimOffsetBlendSpaceFactoryNew

    @JsName("C")
    public fun copy(other: UObject): AimOffsetBlendSpaceFactoryNew

    @JsName("C")
    public fun copy(other: Any): AimOffsetBlendSpaceFactoryNew
  }
}

public open external class AnalyticsPrivacySettings(
  outer: UObject,
) : UObject {
  @JsName("bSendUsageData")
  public open var sendUsageData: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnalyticsPrivacySettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnalyticsPrivacySettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnalyticsPrivacySettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnalyticsPrivacySettings

    @JsName("C")
    public fun copy(other: UObject): AnalyticsPrivacySettings

    @JsName("C")
    public fun copy(other: Any): AnalyticsPrivacySettings
  }
}

public open external class AnimationBlueprintEditorOptions(
  outer: UObject,
) : UObject {
  @JsName("bHideUnrelatedNodes")
  public open var hideUnrelatedNodes: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationBlueprintEditorOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationBlueprintEditorOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationBlueprintEditorOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationBlueprintEditorOptions

    @JsName("C")
    public fun copy(other: UObject): AnimationBlueprintEditorOptions

    @JsName("C")
    public fun copy(other: Any): AnimationBlueprintEditorOptions
  }
}

public open external class AnimBlueprintFactory(
  outer: UObject,
) : Factory {
  @JsName("BlueprintType")
  public open var blueprintType: String

  @JsName("ParentClass")
  public open var parentClass: UnrealEngineClass

  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  @JsName("bTemplate")
  public open var template: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintFactory

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintFactory

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintFactory
  }
}

public open external class AnimLayerInterfaceFactory(
  outer: UObject,
) : AnimBlueprintFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimLayerInterfaceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimLayerInterfaceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimLayerInterfaceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimLayerInterfaceFactory

    @JsName("C")
    public fun copy(other: UObject): AnimLayerInterfaceFactory

    @JsName("C")
    public fun copy(other: Any): AnimLayerInterfaceFactory
  }
}

public open external class AnimBlueprintThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintThumbnailRenderer
  }
}

public open external class AnimBoneCompressionSettingsFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBoneCompressionSettingsFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBoneCompressionSettingsFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBoneCompressionSettingsFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBoneCompressionSettingsFactory

    @JsName("C")
    public fun copy(other: UObject): AnimBoneCompressionSettingsFactory

    @JsName("C")
    public fun copy(other: Any): AnimBoneCompressionSettingsFactory
  }
}

public open external class AnimCompositeFactory(
  outer: UObject,
) : Factory {
  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("SourceAnimation")
  public open var sourceAnimation: AnimSequence

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompositeFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompositeFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompositeFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompositeFactory

    @JsName("C")
    public fun copy(other: UObject): AnimCompositeFactory

    @JsName("C")
    public fun copy(other: Any): AnimCompositeFactory
  }
}

public open external class AnimCurveCompressionSettingsFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCurveCompressionSettingsFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCurveCompressionSettingsFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCurveCompressionSettingsFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCurveCompressionSettingsFactory

    @JsName("C")
    public fun copy(other: UObject): AnimCurveCompressionSettingsFactory

    @JsName("C")
    public fun copy(other: Any): AnimCurveCompressionSettingsFactory
  }
}

public open external class AnimMontageFactory(
  outer: UObject,
) : Factory {
  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("SourceAnimation")
  public open var sourceAnimation: AnimSequence

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimMontageFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimMontageFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimMontageFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimMontageFactory

    @JsName("C")
    public fun copy(other: UObject): AnimMontageFactory

    @JsName("C")
    public fun copy(other: Any): AnimMontageFactory
  }
}

@JsName("ExporterFBX")
public open external class ExporterFbx(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExporterFbx

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExporterFbx

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExporterFbx

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExporterFbx

    @JsName("C")
    public fun copy(other: UObject): ExporterFbx

    @JsName("C")
    public fun copy(other: Any): ExporterFbx
  }
}

@JsName("AnimSequenceExporterFBX")
public open external class AnimSequenceExporterFbx(
  outer: UObject,
) : ExporterFbx {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSequenceExporterFbx

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSequenceExporterFbx

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSequenceExporterFbx

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSequenceExporterFbx

    @JsName("C")
    public fun copy(other: UObject): AnimSequenceExporterFbx

    @JsName("C")
    public fun copy(other: Any): AnimSequenceExporterFbx
  }
}

public open external class AnimSequenceFactory(
  outer: UObject,
) : Factory {
  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSequenceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSequenceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSequenceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSequenceFactory

    @JsName("C")
    public fun copy(other: UObject): AnimSequenceFactory

    @JsName("C")
    public fun copy(other: Any): AnimSequenceFactory
  }
}

public open external class AnimSequenceThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSequenceThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSequenceThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSequenceThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSequenceThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): AnimSequenceThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): AnimSequenceThumbnailRenderer
  }
}

public open external class AnimStreamableFactory(
  outer: UObject,
) : Factory {
  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("SourceAnimation")
  public open var sourceAnimation: AnimSequence

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStreamableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStreamableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStreamableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStreamableFactory

    @JsName("C")
    public fun copy(other: UObject): AnimStreamableFactory

    @JsName("C")
    public fun copy(other: Any): AnimStreamableFactory
  }
}

public open external class AssetEditorContextObject(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetEditorContextObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetEditorContextObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetEditorContextObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetEditorContextObject

    @JsName("C")
    public fun copy(other: UObject): AssetEditorContextObject

    @JsName("C")
    public fun copy(other: Any): AssetEditorContextObject
  }
}

public open external class AssetEditor(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetEditor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetEditor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetEditor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetEditor

    @JsName("C")
    public fun copy(other: UObject): AssetEditor

    @JsName("C")
    public fun copy(other: Any): AssetEditor
  }
}

public open external class AssetEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("OwnedAssetEditors")
  public open var ownedAssetEditors: Array<AssetEditor>

  @JsName("OpenEditorForAssets")
  public open fun openEditorForAssets(assets: Array<UObject>): Boolean

  @JsName("CloseAllEditorsForAsset")
  public open fun closeAllEditorsForAsset(asset: UObject): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): AssetEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): AssetEditorSubsystem
  }
}

public open external class AssetEditorToolkitMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetEditorToolkitMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetEditorToolkitMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetEditorToolkitMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetEditorToolkitMenuContext

    @JsName("C")
    public fun copy(other: UObject): AssetEditorToolkitMenuContext

    @JsName("C")
    public fun copy(other: Any): AssetEditorToolkitMenuContext
  }
}

public open external class IniStringValue {
  @JsName("Section")
  public open var section: String

  @JsName("Key")
  public open var key: String

  @JsName("Value")
  public open var value: String

  @JsName("Filename")
  public open var filename: String

  public open fun clone(): IniStringValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IniStringValue

    @JsName("C")
    public fun copy(other: Any): IniStringValue
  }
}

public open external class AssetGuideline(
  outer: UObject,
) : AssetUserData {
  @JsName("Plugins")
  public open var plugins: Array<String>

  @JsName("ProjectSettings")
  public open var projectSettings: Array<IniStringValue>

  @JsName("GuidelineName")
  public open var guidelineName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetGuideline

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetGuideline

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetGuideline

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetGuideline

    @JsName("C")
    public fun copy(other: UObject): AssetGuideline

    @JsName("C")
    public fun copy(other: Any): AssetGuideline
  }
}

public open external class Commandlet(
  outer: UObject,
) : UObject {
  @JsName("HelpDescription")
  public open var helpDescription: String

  @JsName("HelpUsage")
  public open var helpUsage: String

  @JsName("HelpWebLink")
  public open var helpWebLink: String

  @JsName("HelpParamNames")
  public open var helpParamNames: Array<String>

  @JsName("HelpParamDescriptions")
  public open var helpParamDescriptions: Array<String>

  @JsName("IsServer")
  public open var isServer: Boolean

  @JsName("IsClient")
  public open var isClient: Boolean

  @JsName("IsEditor")
  public open var isEditor: Boolean

  @JsName("LogToConsole")
  public open var logToConsole: Boolean

  @JsName("ShowErrorCount")
  public open var showErrorCount: Boolean

  @JsName("ShowProgress")
  public open var showProgress: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Commandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Commandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Commandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Commandlet

    @JsName("C")
    public fun copy(other: UObject): Commandlet

    @JsName("C")
    public fun copy(other: Any): Commandlet
  }
}

public open external class AssetRegUtilCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetRegUtilCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetRegUtilCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetRegUtilCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetRegUtilCommandlet

    @JsName("C")
    public fun copy(other: UObject): AssetRegUtilCommandlet

    @JsName("C")
    public fun copy(other: Any): AssetRegUtilCommandlet
  }
}

public open external class AssetRegistryDumpCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetRegistryDumpCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetRegistryDumpCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetRegistryDumpCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetRegistryDumpCommandlet

    @JsName("C")
    public fun copy(other: UObject): AssetRegistryDumpCommandlet

    @JsName("C")
    public fun copy(other: Any): AssetRegistryDumpCommandlet
  }
}

public open external class AudioMixerCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioMixerCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioMixerCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioMixerCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioMixerCommandlet

    @JsName("C")
    public fun copy(other: UObject): AudioMixerCommandlet

    @JsName("C")
    public fun copy(other: Any): AudioMixerCommandlet
  }
}

public open external class AutoReimportManager(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AutoReimportManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AutoReimportManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AutoReimportManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AutoReimportManager

    @JsName("C")
    public fun copy(other: UObject): AutoReimportManager

    @JsName("C")
    public fun copy(other: Any): AutoReimportManager
  }
}

public open external class BaseWidgetBlueprint(
  outer: UObject,
) : UserWidgetBlueprint {
  @JsName("WidgetTree")
  public open var widgetTree: WidgetTree

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseWidgetBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseWidgetBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseWidgetBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseWidgetBlueprint

    @JsName("C")
    public fun copy(other: UObject): BaseWidgetBlueprint

    @JsName("C")
    public fun copy(other: Any): BaseWidgetBlueprint
  }
}

public open external class BlendSpaceThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlendSpaceThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlendSpaceThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlendSpaceThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlendSpaceThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): BlendSpaceThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): BlendSpaceThumbnailRenderer
  }
}

public open external class BlueprintEditorProjectSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bForceAllDependenciesToRecompile")
  public open var forceAllDependenciesToRecompile: Boolean

  @JsName("bValidateUnloadedSoftActorReferences")
  public open var validateUnloadedSoftActorReferences: Boolean

  @JsName("bEnableChildActorExpansionInTreeView")
  public open var enableChildActorExpansionInTreeView: Boolean

  @JsName("DefaultChildActorTreeViewMode")
  public open var defaultChildActorTreeViewMode: String

  @JsName("NamespacesToAlwaysInclude")
  public open var namespacesToAlwaysInclude: Array<String>

  @JsName("DisabledCompilerMessagesExceptEditor")
  public open var disabledCompilerMessagesExceptEditor: Array<String>

  @JsName("DisabledCompilerMessages")
  public open var disabledCompilerMessages: Array<String>

  @JsName("BaseClassesToAllowRecompilingDuringPlayInEditor")
  public open var baseClassesToAllowRecompilingDuringPlayInEditor: Array<Class>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintEditorProjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintEditorProjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintEditorProjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintEditorProjectSettings

    @JsName("C")
    public fun copy(other: UObject): BlueprintEditorProjectSettings

    @JsName("C")
    public fun copy(other: Any): BlueprintEditorProjectSettings
  }
}

public open external class BlueprintFactory(
  outer: UObject,
) : Factory {
  @JsName("ParentClass")
  public open var parentClass: UnrealEngineClass

  @JsName("bSkipClassPicker")
  public open var skipClassPicker: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintFactory

    @JsName("C")
    public fun copy(other: UObject): BlueprintFactory

    @JsName("C")
    public fun copy(other: Any): BlueprintFactory
  }
}

public open external class BlueprintFunctionLibraryFactory(
  outer: UObject,
) : BlueprintFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintFunctionLibraryFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintFunctionLibraryFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintFunctionLibraryFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintFunctionLibraryFactory

    @JsName("C")
    public fun copy(other: UObject): BlueprintFunctionLibraryFactory

    @JsName("C")
    public fun copy(other: Any): BlueprintFunctionLibraryFactory
  }
}

public open external class BlueprintInterfaceFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintInterfaceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintInterfaceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintInterfaceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintInterfaceFactory

    @JsName("C")
    public fun copy(other: UObject): BlueprintInterfaceFactory

    @JsName("C")
    public fun copy(other: Any): BlueprintInterfaceFactory
  }
}

public open external class BlueprintMacroFactory(
  outer: UObject,
) : BlueprintFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintMacroFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintMacroFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintMacroFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintMacroFactory

    @JsName("C")
    public fun copy(other: UObject): BlueprintMacroFactory

    @JsName("C")
    public fun copy(other: Any): BlueprintMacroFactory
  }
}

public open external class BrushEditingSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrushEditingSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrushEditingSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushEditingSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushEditingSubsystem

    @JsName("C")
    public fun copy(other: UObject): BrushEditingSubsystem

    @JsName("C")
    public fun copy(other: Any): BrushEditingSubsystem
  }
}

@JsName("CanvasRenderTarget2DFactoryNew")
public open external class CanvasRenderTarget2dFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("Format")
  public open var format: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CanvasRenderTarget2dFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CanvasRenderTarget2dFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CanvasRenderTarget2dFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CanvasRenderTarget2dFactoryNew

    @JsName("C")
    public fun copy(other: UObject): CanvasRenderTarget2dFactoryNew

    @JsName("C")
    public fun copy(other: Any): CanvasRenderTarget2dFactoryNew
  }
}

public open external class CascadeOptions(
  outer: UObject,
) : UObject {
  @JsName("bShowModuleDump")
  public open var showModuleDump: Boolean

  @JsName("BackgroundColor")
  public open var backgroundColor: Color

  @JsName("bUseSubMenus")
  public open var useSubMenus: Boolean

  @JsName("bUseSpaceBarReset")
  public open var useSpaceBarReset: Boolean

  @JsName("bUseSpaceBarResetInLevel")
  public open var useSpaceBarResetInLevel: Boolean

  @JsName("Empty_Background")
  public open var emptyBackground: Color

  @JsName("Emitter_Background")
  public open var emitterBackground: Color

  @JsName("Emitter_Unselected")
  public open var emitterUnselected: Color

  @JsName("Emitter_Selected")
  public open var emitterSelected: Color

  @JsName("ModuleColor_General_Unselected")
  public open var moduleColorGeneralUnselected: Color

  @JsName("ModuleColor_General_Selected")
  public open var moduleColorGeneralSelected: Color

  @JsName("ModuleColor_TypeData_Unselected")
  public open var moduleColorTypeDataUnselected: Color

  @JsName("ModuleColor_TypeData_Selected")
  public open var moduleColorTypeDataSelected: Color

  @JsName("ModuleColor_Beam_Unselected")
  public open var moduleColorBeamUnselected: Color

  @JsName("ModuleColor_Beam_Selected")
  public open var moduleColorBeamSelected: Color

  @JsName("ModuleColor_Trail_Unselected")
  public open var moduleColorTrailUnselected: Color

  @JsName("ModuleColor_Trail_Selected")
  public open var moduleColorTrailSelected: Color

  @JsName("ModuleColor_Spawn_Unselected")
  public open var moduleColorSpawnUnselected: Color

  @JsName("ModuleColor_Spawn_Selected")
  public open var moduleColorSpawnSelected: Color

  @JsName("ModuleColor_Light_Unselected")
  public open var moduleColorLightUnselected: Color

  @JsName("ModuleColor_Light_Selected")
  public open var moduleColorLightSelected: Color

  @JsName("ModuleColor_SubUV_Unselected")
  public open var moduleColorSubUvUnselected: Color

  @JsName("ModuleColor_SubUV_Selected")
  public open var moduleColorSubUvSelected: Color

  @JsName("ModuleColor_Required_Unselected")
  public open var moduleColorRequiredUnselected: Color

  @JsName("ModuleColor_Required_Selected")
  public open var moduleColorRequiredSelected: Color

  @JsName("ModuleColor_Event_Unselected")
  public open var moduleColorEventUnselected: Color

  @JsName("ModuleColor_Event_Selected")
  public open var moduleColorEventSelected: Color

  @JsName("bShowGrid")
  public open var showGrid: Boolean

  @JsName("GridColor_Hi")
  public open var gridColorHi: Color

  @JsName("GridColor_Low")
  public open var gridColorLow: Color

  @JsName("GridPerspectiveSize")
  public open var gridPerspectiveSize: Number

  @JsName("bShowParticleCounts")
  public open var showParticleCounts: Boolean

  @JsName("bShowParticleEvents")
  public open var showParticleEvents: Boolean

  @JsName("bShowParticleTimes")
  public open var showParticleTimes: Boolean

  @JsName("bShowParticleDistance")
  public open var showParticleDistance: Boolean

  @JsName("bShowParticleMemory")
  public open var showParticleMemory: Boolean

  @JsName("ParticleMemoryUpdateTime")
  public open var particleMemoryUpdateTime: Number

  @JsName("bShowFloor")
  public open var showFloor: Boolean

  @JsName("FloorMesh")
  public open var floorMesh: String

  @JsName("FloorPosition")
  public open var floorPosition: Vector

  @JsName("FloorRotation")
  public open var floorRotation: Rotator

  @JsName("FloorScale")
  public open var floorScale: Number

  @JsName("FloorScale3D")
  public open var floorScale3d: Vector

  @JsName("ShowPPFlags")
  public open var showPpFlags: Number

  @JsName("bUseSlimCascadeDraw")
  public open var useSlimCascadeDraw: Boolean

  @JsName("SlimCascadeDrawHeight")
  public open var slimCascadeDrawHeight: Number

  @JsName("bCenterCascadeModuleText")
  public open var centerCascadeModuleText: Boolean

  @JsName("Cascade_MouseMoveThreshold")
  public open var cascadeMouseMoveThreshold: Number

  @JsName("MotionModeRadius")
  public open var motionModeRadius: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CascadeOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CascadeOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CascadeOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CascadeOptions

    @JsName("C")
    public fun copy(other: UObject): CascadeOptions

    @JsName("C")
    public fun copy(other: Any): CascadeOptions
  }
}

public open external class ChunkDependency {
  @JsName("ChunkID")
  public open var chunkId: Number

  @JsName("ParentChunkID")
  public open var parentChunkId: Number

  public open fun clone(): ChunkDependency

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChunkDependency

    @JsName("C")
    public fun copy(other: Any): ChunkDependency
  }
}

public open external class ChunkDependencyInfo(
  outer: UObject,
) : UObject {
  @JsName("DependencyArray")
  public open var dependencyArray: Array<ChunkDependency>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ChunkDependencyInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ChunkDependencyInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ChunkDependencyInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ChunkDependencyInfo

    @JsName("C")
    public fun copy(other: UObject): ChunkDependencyInfo

    @JsName("C")
    public fun copy(other: Any): ChunkDependencyInfo
  }
}

public open external class ClassThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClassThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClassThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClassThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClassThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): ClassThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): ClassThumbnailRenderer
  }
}

@JsName("EClassViewerDeveloperType")
public external object ClassViewerDeveloperType {
  @JsName("CVDT_None")
  public var None: String

  @JsName("CVDT_CurrentUser")
  public var CurrentUser: String

  @JsName("CVDT_All")
  public var All: String

  @JsName("CVDT_Max")
  public var Max: String
}

public open external class ClassViewerSettings(
  outer: UObject,
) : UObject {
  @JsName("AllowedClasses")
  public open var allowedClasses: Array<String>

  @JsName("DisplayInternalClasses")
  public open var displayInternalClasses: Boolean

  @JsName("DeveloperFolderType")
  public open var developerFolderType: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClassViewerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClassViewerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClassViewerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClassViewerSettings

    @JsName("C")
    public fun copy(other: UObject): ClassViewerSettings

    @JsName("C")
    public fun copy(other: Any): ClassViewerSettings
  }
}

public open external class CompileAllBlueprintsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CompileAllBlueprintsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CompileAllBlueprintsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CompileAllBlueprintsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CompileAllBlueprintsCommandlet

    @JsName("C")
    public fun copy(other: UObject): CompileAllBlueprintsCommandlet

    @JsName("C")
    public fun copy(other: Any): CompileAllBlueprintsCommandlet
  }
}

public open external class ComponentElementDetailsInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentElementDetailsInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentElementDetailsInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentElementDetailsInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentElementDetailsInterface

    @JsName("C")
    public fun copy(other: UObject): ComponentElementDetailsInterface

    @JsName("C")
    public fun copy(other: Any): ComponentElementDetailsInterface
  }
}

public open external class ComponentElementSelectionInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentElementSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentElementSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentElementSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentElementSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): ComponentElementSelectionInterface

    @JsName("C")
    public fun copy(other: Any): ComponentElementSelectionInterface
  }
}

public open external class ComponentElementEditorSelectionInterface(
  outer: UObject,
) : ComponentElementSelectionInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentElementEditorSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentElementEditorSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentElementEditorSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentElementEditorSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): ComponentElementEditorSelectionInterface

    @JsName("C")
    public fun copy(other: Any): ComponentElementEditorSelectionInterface
  }
}

public open external class ComponentElementWorldInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentElementWorldInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentElementWorldInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentElementWorldInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentElementWorldInterface

    @JsName("C")
    public fun copy(other: UObject): ComponentElementWorldInterface

    @JsName("C")
    public fun copy(other: Any): ComponentElementWorldInterface
  }
}

public open external class ComponentElementEditorWorldInterface(
  outer: UObject,
) : ComponentElementWorldInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentElementEditorWorldInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentElementEditorWorldInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentElementEditorWorldInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentElementEditorWorldInterface

    @JsName("C")
    public fun copy(other: UObject): ComponentElementEditorWorldInterface

    @JsName("C")
    public fun copy(other: Any): ComponentElementEditorWorldInterface
  }
}

public open external class CompositeCurveTableFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CompositeCurveTableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CompositeCurveTableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CompositeCurveTableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CompositeCurveTableFactory

    @JsName("C")
    public fun copy(other: UObject): CompositeCurveTableFactory

    @JsName("C")
    public fun copy(other: Any): CompositeCurveTableFactory
  }
}

public open external class DataTableFactory(
  outer: UObject,
) : Factory {
  public open var struct: ScriptStruct

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataTableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataTableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataTableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataTableFactory

    @JsName("C")
    public fun copy(other: UObject): DataTableFactory

    @JsName("C")
    public fun copy(other: Any): DataTableFactory
  }
}

public open external class CompositeDataTableFactory(
  outer: UObject,
) : DataTableFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CompositeDataTableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CompositeDataTableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CompositeDataTableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CompositeDataTableFactory

    @JsName("C")
    public fun copy(other: UObject): CompositeDataTableFactory

    @JsName("C")
    public fun copy(other: Any): CompositeDataTableFactory
  }
}

public open external class CompressAnimationsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CompressAnimationsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CompressAnimationsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CompressAnimationsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CompressAnimationsCommandlet

    @JsName("C")
    public fun copy(other: UObject): CompressAnimationsCommandlet

    @JsName("C")
    public fun copy(other: Any): CompressAnimationsCommandlet
  }
}

public open external class EditorBrushBuilder(
  outer: UObject,
) : BrushBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorBrushBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorBrushBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorBrushBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorBrushBuilder

    @JsName("C")
    public fun copy(other: UObject): EditorBrushBuilder

    @JsName("C")
    public fun copy(other: Any): EditorBrushBuilder
  }
}

public open external class ConeBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("Z")
  public open var z: Number

  @JsName("CapZ")
  public open var capZ: Number

  @JsName("OuterRadius")
  public open var outerRadius: Number

  @JsName("InnerRadius")
  public open var innerRadius: Number

  @JsName("Sides")
  public open var sides: Number

  @JsName("GroupName")
  public open var groupName: String

  @JsName("AlignToSide")
  public open var alignToSide: Boolean

  @JsName("Hollow")
  public open var hollow: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConeBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConeBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConeBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConeBuilder

    @JsName("C")
    public fun copy(other: UObject): ConeBuilder

    @JsName("C")
    public fun copy(other: Any): ConeBuilder
  }
}

public open external class ContentBrowserSettings(
  outer: UObject,
) : UObject {
  @JsName("NumObjectsToLoadBeforeWarning")
  public open var numObjectsToLoadBeforeWarning: Number

  @JsName("bOpenSourcesPanelByDefault")
  public open var openSourcesPanelByDefault: Boolean

  @JsName("RealTimeThumbnails")
  public open var realTimeThumbnails: Boolean

  @JsName("DisplayFolders")
  public open var displayFolders: Boolean

  @JsName("DisplayEmptyFolders")
  public open var displayEmptyFolders: Boolean

  @JsName("FilterRecursively")
  public open var filterRecursively: Boolean

  @JsName("bShowAllFolder")
  public open var showAllFolder: Boolean

  @JsName("bOrganizeFolders")
  public open var organizeFolders: Boolean

  @JsName("bDisplayContentFolderSuffix")
  public open var displayContentFolderSuffix: Boolean

  @JsName("bDisplayFriendlyNameForPluginFolders")
  public open var displayFriendlyNameForPluginFolders: Boolean

  @JsName("NumObjectsInRecentList")
  public open var numObjectsInRecentList: Number

  @JsName("bEnableRealtimeMaterialInstanceThumbnails")
  public open var enableRealtimeMaterialInstanceThumbnails: Boolean

  @JsName("DisplayEngineFolder")
  public open var displayEngineFolder: Boolean

  @JsName("DisplayDevelopersFolder")
  public open var displayDevelopersFolder: Boolean

  @JsName("DisplayL10NFolder")
  public open var displayL10nFolder: Boolean

  @JsName("DisplayPluginFolders")
  public open var displayPluginFolders: Boolean

  @JsName("DisplayFavorites")
  public open var displayFavorites: Boolean

  @JsName("DockCollections")
  public open var dockCollections: Boolean

  @JsName("DisplayCppFolders")
  public open var displayCppFolders: Boolean

  @JsName("IncludeClassNames")
  public open var includeClassNames: Boolean

  @JsName("IncludeAssetPaths")
  public open var includeAssetPaths: Boolean

  @JsName("IncludeCollectionNames")
  public open var includeCollectionNames: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserSettings

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserSettings

    @JsName("C")
    public fun copy(other: Any): ContentBrowserSettings
  }
}

public open external class ConvertLevelsToExternalActorsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConvertLevelsToExternalActorsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConvertLevelsToExternalActorsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConvertLevelsToExternalActorsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConvertLevelsToExternalActorsCommandlet

    @JsName("C")
    public fun copy(other: UObject): ConvertLevelsToExternalActorsCommandlet

    @JsName("C")
    public fun copy(other: Any): ConvertLevelsToExternalActorsCommandlet
  }
}

public open external class CookCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("FullGCAssetClassNames")
  public open var fullGcAssetClassNames: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CookCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CookCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CookCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CookCommandlet

    @JsName("C")
    public fun copy(other: UObject): CookCommandlet

    @JsName("C")
    public fun copy(other: Any): CookCommandlet
  }
}

public open external class CookGlobalShadersCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CookGlobalShadersCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CookGlobalShadersCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CookGlobalShadersCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CookGlobalShadersCommandlet

    @JsName("C")
    public fun copy(other: UObject): CookGlobalShadersCommandlet

    @JsName("C")
    public fun copy(other: Any): CookGlobalShadersCommandlet
  }
}

public open external class CookGlobalShadersDeviceHelperBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CookGlobalShadersDeviceHelperBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CookGlobalShadersDeviceHelperBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CookGlobalShadersDeviceHelperBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CookGlobalShadersDeviceHelperBase

    @JsName("C")
    public fun copy(other: UObject): CookGlobalShadersDeviceHelperBase

    @JsName("C")
    public fun copy(other: Any): CookGlobalShadersDeviceHelperBase
  }
}

public open external class CookGlobalShadersDeviceHelperStaged(
  outer: UObject,
) : CookGlobalShadersDeviceHelperBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CookGlobalShadersDeviceHelperStaged

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CookGlobalShadersDeviceHelperStaged

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CookGlobalShadersDeviceHelperStaged

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CookGlobalShadersDeviceHelperStaged

    @JsName("C")
    public fun copy(other: UObject): CookGlobalShadersDeviceHelperStaged

    @JsName("C")
    public fun copy(other: Any): CookGlobalShadersDeviceHelperStaged
  }
}

public open external class CookOnTheFlyServer(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CookOnTheFlyServer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CookOnTheFlyServer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CookOnTheFlyServer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CookOnTheFlyServer

    @JsName("C")
    public fun copy(other: UObject): CookOnTheFlyServer

    @JsName("C")
    public fun copy(other: Any): CookOnTheFlyServer
  }
}

public open external class CrashReporterSettings(
  outer: UObject,
) : UObject {
  @JsName("UploadSymbolsPath")
  public open var uploadSymbolsPath: String

  @JsName("DownstreamStorage")
  public open var downstreamStorage: String

  @JsName("RemoteStorage")
  public open var remoteStorage: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CrashReporterSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CrashReporterSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CrashReporterSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CrashReporterSettings

    @JsName("C")
    public fun copy(other: UObject): CrashReporterSettings

    @JsName("C")
    public fun copy(other: Any): CrashReporterSettings
  }
}

public open external class CrashReportsPrivacySettings(
  outer: UObject,
) : UObject {
  @JsName("bSendUnattendedBugReports")
  public open var sendUnattendedBugReports: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CrashReportsPrivacySettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CrashReportsPrivacySettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CrashReportsPrivacySettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CrashReportsPrivacySettings

    @JsName("C")
    public fun copy(other: UObject): CrashReportsPrivacySettings

    @JsName("C")
    public fun copy(other: Any): CrashReportsPrivacySettings
  }
}

@JsName("ECSVImportType")
public external object CSVImportType {
  @JsName("ECSV_DataTable")
  public var DataTable: String

  @JsName("ECSV_CurveTable")
  public var CurveTable: String

  @JsName("ECSV_CurveFloat")
  public var CurveFloat: String

  @JsName("ECSV_CurveVector")
  public var CurveVector: String

  @JsName("ECSV_CurveLinearColor")
  public var CurveLinearColor: String

  @JsName("ECSV_MAX")
  public var Max: String
}

@JsName("CSVImportSettings")
public open external class CsvImportSettings {
  @JsName("ImportRowStruct")
  public open var importRowStruct: ScriptStruct

  @JsName("ImportType")
  public open var importType: String

  @JsName("ImportCurveInterpMode")
  public open var importCurveInterpMode: String

  public open fun clone(): CsvImportSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CsvImportSettings

    @JsName("C")
    public fun copy(other: Any): CsvImportSettings
  }
}

@JsName("CSVImportFactory")
public open external class CsvImportFactory(
  outer: UObject,
) : Factory {
  @JsName("AutomatedImportSettings")
  public open var automatedImportSettings: CsvImportSettings

  @JsName("DataTableImportOptions")
  public open var dataTableImportOptions: DataTable

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CsvImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CsvImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CsvImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CsvImportFactory

    @JsName("C")
    public fun copy(other: UObject): CsvImportFactory

    @JsName("C")
    public fun copy(other: Any): CsvImportFactory
  }
}

public open external class CubeBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  @JsName("Z")
  public open var z: Number

  @JsName("WallThickness")
  public open var wallThickness: Number

  @JsName("GroupName")
  public open var groupName: String

  @JsName("Hollow")
  public open var hollow: Boolean

  @JsName("Tessellated")
  public open var tessellated: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CubeBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CubeBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CubeBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CubeBuilder

    @JsName("C")
    public fun copy(other: UObject): CubeBuilder

    @JsName("C")
    public fun copy(other: Any): CubeBuilder
  }
}

public open external class CurvedStairBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("InnerRadius")
  public open var innerRadius: Number

  @JsName("StepHeight")
  public open var stepHeight: Number

  @JsName("StepWidth")
  public open var stepWidth: Number

  @JsName("AngleOfCurve")
  public open var angleOfCurve: Number

  @JsName("NumSteps")
  public open var numSteps: Number

  @JsName("AddToFirstStep")
  public open var addToFirstStep: Number

  @JsName("GroupName")
  public open var groupName: String

  @JsName("CounterClockwise")
  public open var counterClockwise: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurvedStairBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurvedStairBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurvedStairBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurvedStairBuilder

    @JsName("C")
    public fun copy(other: UObject): CurvedStairBuilder

    @JsName("C")
    public fun copy(other: Any): CurvedStairBuilder
  }
}

public open external class CurveEdOptions(
  outer: UObject,
) : UObject {
  @JsName("MinViewRange")
  public open var minViewRange: Number

  @JsName("MaxViewRange")
  public open var maxViewRange: Number

  @JsName("BackgroundColor")
  public open var backgroundColor: LinearColor

  @JsName("LabelColor")
  public open var labelColor: LinearColor

  @JsName("SelectedLabelColor")
  public open var selectedLabelColor: LinearColor

  @JsName("GridColor")
  public open var gridColor: LinearColor

  @JsName("GridTextColor")
  public open var gridTextColor: LinearColor

  @JsName("LabelBlockBkgColor")
  public open var labelBlockBkgColor: LinearColor

  @JsName("SelectedKeyColor")
  public open var selectedKeyColor: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEdOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEdOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEdOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEdOptions

    @JsName("C")
    public fun copy(other: UObject): CurveEdOptions

    @JsName("C")
    public fun copy(other: Any): CurveEdOptions
  }
}

public open external class CurveFactory(
  outer: UObject,
) : Factory {
  @JsName("CurveClass")
  public open var curveClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveFactory

    @JsName("C")
    public fun copy(other: UObject): CurveFactory

    @JsName("C")
    public fun copy(other: Any): CurveFactory
  }
}

public open external class CurveFloatFactory(
  outer: UObject,
) : CurveFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveFloatFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveFloatFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveFloatFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveFloatFactory

    @JsName("C")
    public fun copy(other: UObject): CurveFloatFactory

    @JsName("C")
    public fun copy(other: Any): CurveFloatFactory
  }
}

public open external class CurveLinearColorFactory(
  outer: UObject,
) : CurveFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveLinearColorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveLinearColorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveLinearColorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveLinearColorFactory

    @JsName("C")
    public fun copy(other: UObject): CurveLinearColorFactory

    @JsName("C")
    public fun copy(other: Any): CurveLinearColorFactory
  }
}

public open external class CurveVectorFactory(
  outer: UObject,
) : CurveFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveVectorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveVectorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveVectorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveVectorFactory

    @JsName("C")
    public fun copy(other: UObject): CurveVectorFactory

    @JsName("C")
    public fun copy(other: Any): CurveVectorFactory
  }
}

public open external class CurveImportFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveImportFactory

    @JsName("C")
    public fun copy(other: UObject): CurveImportFactory

    @JsName("C")
    public fun copy(other: Any): CurveImportFactory
  }
}

public open external class CurveLinearColorAtlasFactory(
  outer: UObject,
) : Factory {
  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("Format")
  public open var format: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveLinearColorAtlasFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveLinearColorAtlasFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveLinearColorAtlasFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveLinearColorAtlasFactory

    @JsName("C")
    public fun copy(other: UObject): CurveLinearColorAtlasFactory

    @JsName("C")
    public fun copy(other: Any): CurveLinearColorAtlasFactory
  }
}

public open external class CurveLinearColorThumbnailRenderer(
  outer: UObject,
) : ThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveLinearColorThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveLinearColorThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveLinearColorThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveLinearColorThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): CurveLinearColorThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): CurveLinearColorThumbnailRenderer
  }
}

public open external class CurveTableFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveTableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveTableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveTableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveTableFactory

    @JsName("C")
    public fun copy(other: UObject): CurveTableFactory

    @JsName("C")
    public fun copy(other: Any): CurveTableFactory
  }
}

public open external class CylinderBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("Z")
  public open var z: Number

  @JsName("OuterRadius")
  public open var outerRadius: Number

  @JsName("InnerRadius")
  public open var innerRadius: Number

  @JsName("Sides")
  public open var sides: Number

  @JsName("GroupName")
  public open var groupName: String

  @JsName("AlignToSide")
  public open var alignToSide: Boolean

  @JsName("Hollow")
  public open var hollow: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CylinderBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CylinderBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CylinderBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CylinderBuilder

    @JsName("C")
    public fun copy(other: UObject): CylinderBuilder

    @JsName("C")
    public fun copy(other: Any): CylinderBuilder
  }
}

public open external class DataAssetFactory(
  outer: UObject,
) : Factory {
  @JsName("DataAssetClass")
  public open var dataAssetClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataAssetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataAssetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataAssetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataAssetFactory

    @JsName("C")
    public fun copy(other: UObject): DataAssetFactory

    @JsName("C")
    public fun copy(other: Any): DataAssetFactory
  }
}

@JsName("DDCCleanupCommandlet")
public open external class DdcCleanupCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DdcCleanupCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DdcCleanupCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DdcCleanupCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DdcCleanupCommandlet

    @JsName("C")
    public fun copy(other: UObject): DdcCleanupCommandlet

    @JsName("C")
    public fun copy(other: Any): DdcCleanupCommandlet
  }
}

@JsName("EProcessRootMotionMode")
public external object ProcessRootMotionMode {
  public var Ignore: String

  public var Loop: String

  public var LoopAndReset: String

  @JsName("EProcessRootMotionMode_MAX")
  public var Max: String
}

public open external class DebugSkelMeshComponent(
  outer: UObject,
) : SkeletalMeshComponent {
  @JsName("bRenderRawSkeleton")
  public open var renderRawSkeleton: Boolean

  @JsName("bDrawMesh")
  public open var drawMesh: Boolean

  @JsName("bShowBoneNames")
  public open var showBoneNames: Boolean

  @JsName("bDrawBoneInfluences")
  public open var drawBoneInfluences: Boolean

  @JsName("bDrawMorphTargetVerts")
  public open var drawMorphTargetVerts: Boolean

  @JsName("bDrawNormals")
  public open var drawNormals: Boolean

  @JsName("bDrawTangents")
  public open var drawTangents: Boolean

  @JsName("bDrawBinormals")
  public open var drawBinormals: Boolean

  @JsName("bDrawSockets")
  public open var drawSockets: Boolean

  @JsName("bDrawAttributes")
  public open var drawAttributes: Boolean

  @JsName("bSkeletonSocketsVisible")
  public open var skeletonSocketsVisible: Boolean

  @JsName("bMeshSocketsVisible")
  public open var meshSocketsVisible: Boolean

  @JsName("bDisplayRawAnimation")
  public open var displayRawAnimation: Boolean

  @JsName("bDisplayNonRetargetedPose")
  public open var displayNonRetargetedPose: Boolean

  @JsName("bDisplayAdditiveBasePose")
  public open var displayAdditiveBasePose: Boolean

  @JsName("bDisplayBakedAnimation")
  public open var displayBakedAnimation: Boolean

  @JsName("bDisplaySourceAnimation")
  public open var displaySourceAnimation: Boolean

  @JsName("bDisplayBound")
  public open var displayBound: Boolean

  @JsName("bDisplayVertexColors")
  public open var displayVertexColors: Boolean

  @JsName("WireframeMeshOverlayColor")
  public open var wireframeMeshOverlayColor: LinearColor

  @JsName("bPreviewRootMotion")
  public open var previewRootMotion: Boolean

  @JsName("ProcessRootMotionMode")
  public open var processRootMotionMode: String

  @JsName("ConsumeRootMotionPreviousPlaybackTime")
  public open var consumeRootMotionPreviousPlaybackTime: Number

  @JsName("bShowClothData")
  public open var showClothData: Boolean

  @JsName("MinClothPropertyView")
  public open var minClothPropertyView: Number

  @JsName("MaxClothPropertyView")
  public open var maxClothPropertyView: Number

  @JsName("ClothMeshOpacity")
  public open var clothMeshOpacity: Number

  @JsName("bClothFlipNormal")
  public open var clothFlipNormal: Boolean

  @JsName("bClothCullBackface")
  public open var clothCullBackface: Boolean

  @JsName("bRequiredBonesUpToDateDuringTick")
  public open var requiredBonesUpToDateDuringTick: Boolean

  @JsName("BoneRadiusMultiplier")
  public open var boneRadiusMultiplier: Number

  @JsName("BonesOfInterest")
  public open var bonesOfInterest: Array<Number>

  @JsName("MorphTargetOfInterests")
  public open var morphTargetOfInterests: Array<MorphTarget>

  @JsName("SkelMaterials")
  public open var skelMaterials: Array<MaterialInterface>

  @JsName("PreviewInstance")
  public open var previewInstance: AnimPreviewInstance

  @JsName("SavedAnimScriptInstance")
  public open var savedAnimScriptInstance: AnimInstance

  @JsName("bIsUsingInGameBounds")
  public open var isUsingInGameBounds: Boolean

  @JsName("bIsUsingPreSkinnedBounds")
  public open var isUsingPreSkinnedBounds: Boolean

  @JsName("bPerformSingleClothingTick")
  public open var performSingleClothingTick: Boolean

  @JsName("bPauseClothingSimulationWithAnim")
  public open var pauseClothingSimulationWithAnim: Boolean

  @JsName("bTrackAttachedInstanceLOD")
  public open var trackAttachedInstanceLod: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DebugSkelMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DebugSkelMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DebugSkelMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DebugSkelMeshComponent

    @JsName("C")
    public fun copy(other: UObject): DebugSkelMeshComponent

    @JsName("C")
    public fun copy(other: Any): DebugSkelMeshComponent
  }
}

public open external class DEditorParameterValue(
  outer: UObject,
) : UObject {
  @JsName("bOverride")
  public open var override: Boolean

  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("ExpressionId")
  public open var expressionId: Guid

  @JsName("SortPriority")
  public open var sortPriority: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorParameterValue
  }
}

public open external class DEditorDoubleVectorParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: Vector4d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorDoubleVectorParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorDoubleVectorParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorDoubleVectorParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorDoubleVectorParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorDoubleVectorParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorDoubleVectorParameterValue
  }
}

public open external class DFontParameters {
  @JsName("FontValue")
  public open var fontValue: Font

  @JsName("FontPage")
  public open var fontPage: Number

  public open fun clone(): DFontParameters

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DFontParameters

    @JsName("C")
    public fun copy(other: Any): DFontParameters
  }
}

public open external class DEditorFontParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: DFontParameters

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorFontParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorFontParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorFontParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorFontParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorFontParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorFontParameterValue
  }
}

public open external class DEditorMaterialLayersParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: MaterialLayersFunctions

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorMaterialLayersParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorMaterialLayersParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorMaterialLayersParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorMaterialLayersParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorMaterialLayersParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorMaterialLayersParameterValue
  }
}

public open external class DEditorRuntimeVirtualTextureParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: RuntimeVirtualTexture

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorRuntimeVirtualTextureParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        DEditorRuntimeVirtualTextureParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorRuntimeVirtualTextureParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorRuntimeVirtualTextureParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorRuntimeVirtualTextureParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorRuntimeVirtualTextureParameterValue
  }
}

public open external class ScalarParameterAtlasData {
  @JsName("bIsUsedAsAtlasPosition")
  public open var isUsedAsAtlasPosition: Boolean

  @JsName("Curve")
  public open var curve: CurveLinearColor

  @JsName("Atlas")
  public open var atlas: CurveLinearColorAtlas

  public open fun clone(): ScalarParameterAtlasData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScalarParameterAtlasData

    @JsName("C")
    public fun copy(other: Any): ScalarParameterAtlasData
  }
}

public open external class DEditorScalarParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: Number

  @JsName("AtlasData")
  public open var atlasData: ScalarParameterAtlasData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorScalarParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorScalarParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorScalarParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorScalarParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorScalarParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorScalarParameterValue
  }
}

public open external class DComponentMaskParameter {
  @JsName("R")
  public open var r: Boolean

  @JsName("G")
  public open var g: Boolean

  @JsName("B")
  public open var b: Boolean

  @JsName("A")
  public open var a: Boolean

  public open fun clone(): DComponentMaskParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DComponentMaskParameter

    @JsName("C")
    public fun copy(other: Any): DComponentMaskParameter
  }
}

public open external class DEditorStaticComponentMaskParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: DComponentMaskParameter

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorStaticComponentMaskParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorStaticComponentMaskParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorStaticComponentMaskParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorStaticComponentMaskParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorStaticComponentMaskParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorStaticComponentMaskParameterValue
  }
}

public open external class DEditorStaticSwitchParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorStaticSwitchParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorStaticSwitchParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorStaticSwitchParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorStaticSwitchParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorStaticSwitchParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorStaticSwitchParameterValue
  }
}

public open external class ParameterChannelNames {
  @JsName("R")
  public open var r: String

  @JsName("G")
  public open var g: String

  @JsName("B")
  public open var b: String

  @JsName("A")
  public open var a: String

  public open fun clone(): ParameterChannelNames

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParameterChannelNames

    @JsName("C")
    public fun copy(other: Any): ParameterChannelNames
  }
}

public open external class DEditorTextureParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: Texture

  @JsName("ChannelNames")
  public open var channelNames: ParameterChannelNames

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorTextureParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorTextureParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorTextureParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorTextureParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorTextureParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorTextureParameterValue
  }
}

public open external class DEditorVectorParameterValue(
  outer: UObject,
) : DEditorParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: LinearColor

  @JsName("bIsUsedAsChannelMask")
  public open var isUsedAsChannelMask: Boolean

  @JsName("ChannelNames")
  public open var channelNames: ParameterChannelNames

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DEditorVectorParameterValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DEditorVectorParameterValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DEditorVectorParameterValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DEditorVectorParameterValue

    @JsName("C")
    public fun copy(other: UObject): DEditorVectorParameterValue

    @JsName("C")
    public fun copy(other: Any): DEditorVectorParameterValue
  }
}

public open external class EdMode(
  outer: UObject,
) : UObject {
  @JsName("ModeToolsContext")
  public open var modeToolsContext: EdModeInteractiveToolsContext

  @JsName("SettingsClass")
  public open var settingsClass: Class

  @JsName("SettingsObject")
  public open var settingsObject: UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdMode

    @JsName("C")
    public fun copy(other: UObject): EdMode

    @JsName("C")
    public fun copy(other: Any): EdMode
  }
}

public open external class BaseLegacyWidgetEdMode(
  outer: UObject,
) : EdMode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseLegacyWidgetEdMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseLegacyWidgetEdMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseLegacyWidgetEdMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseLegacyWidgetEdMode

    @JsName("C")
    public fun copy(other: UObject): BaseLegacyWidgetEdMode

    @JsName("C")
    public fun copy(other: Any): BaseLegacyWidgetEdMode
  }
}

public open external class EdModeDefault(
  outer: UObject,
) : BaseLegacyWidgetEdMode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdModeDefault

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdModeDefault

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdModeDefault

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdModeDefault

    @JsName("C")
    public fun copy(other: UObject): EdModeDefault

    @JsName("C")
    public fun copy(other: Any): EdModeDefault
  }
}

public open external class DerivedDataCacheCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DerivedDataCacheCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DerivedDataCacheCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DerivedDataCacheCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DerivedDataCacheCommandlet

    @JsName("C")
    public fun copy(other: UObject): DerivedDataCacheCommandlet

    @JsName("C")
    public fun copy(other: Any): DerivedDataCacheCommandlet
  }
}

public open external class DiffAssetRegistriesCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("AssetRegistrySearchPath")
  public open var assetRegistrySearchPath: Array<String>

  @JsName("P4Repository")
  public open var p4Repository: String

  @JsName("P4EngineBasePath")
  public open var p4EngineBasePath: String

  @JsName("P4EngineAssetPath")
  public open var p4EngineAssetPath: String

  @JsName("P4GameBasePath")
  public open var p4GameBasePath: String

  @JsName("P4GameAssetPath")
  public open var p4GameAssetPath: String

  @JsName("RegexBranchCL")
  public open var regexBranchCl: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DiffAssetRegistriesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DiffAssetRegistriesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DiffAssetRegistriesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DiffAssetRegistriesCommandlet

    @JsName("C")
    public fun copy(other: UObject): DiffAssetRegistriesCommandlet

    @JsName("C")
    public fun copy(other: Any): DiffAssetRegistriesCommandlet
  }
}

public open external class DiffAssetsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DiffAssetsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DiffAssetsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DiffAssetsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DiffAssetsCommandlet

    @JsName("C")
    public fun copy(other: UObject): DiffAssetsCommandlet

    @JsName("C")
    public fun copy(other: Any): DiffAssetsCommandlet
  }
}

public open external class DiffFilesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DiffFilesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DiffFilesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DiffFilesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DiffFilesCommandlet

    @JsName("C")
    public fun copy(other: UObject): DiffFilesCommandlet

    @JsName("C")
    public fun copy(other: Any): DiffFilesCommandlet
  }
}

public open external class DiffPackagesCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("Packages")
  public open var packages: Package

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DiffPackagesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DiffPackagesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DiffPackagesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DiffPackagesCommandlet

    @JsName("C")
    public fun copy(other: UObject): DiffPackagesCommandlet

    @JsName("C")
    public fun copy(other: Any): DiffPackagesCommandlet
  }
}

public open external class DumpBlueprintsInfoCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DumpBlueprintsInfoCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DumpBlueprintsInfoCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DumpBlueprintsInfoCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DumpBlueprintsInfoCommandlet

    @JsName("C")
    public fun copy(other: UObject): DumpBlueprintsInfoCommandlet

    @JsName("C")
    public fun copy(other: Any): DumpBlueprintsInfoCommandlet
  }
}

public open external class DumpHiddenCategoriesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DumpHiddenCategoriesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DumpHiddenCategoriesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DumpHiddenCategoriesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DumpHiddenCategoriesCommandlet

    @JsName("C")
    public fun copy(other: UObject): DumpHiddenCategoriesCommandlet

    @JsName("C")
    public fun copy(other: Any): DumpHiddenCategoriesCommandlet
  }
}

public open external class DumpMaterialShaderTypesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DumpMaterialShaderTypesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DumpMaterialShaderTypesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DumpMaterialShaderTypesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DumpMaterialShaderTypesCommandlet

    @JsName("C")
    public fun copy(other: UObject): DumpMaterialShaderTypesCommandlet

    @JsName("C")
    public fun copy(other: Any): DumpMaterialShaderTypesCommandlet
  }
}

@JsName("EdGraphNode_Comment")
public open external class EdGraphNodeComment(
  outer: UObject,
) : EdGraphNode {
  @JsName("CommentColor")
  public open var commentColor: LinearColor

  @JsName("FontSize")
  public open var fontSize: Number

  @JsName("bCommentBubbleVisible_InDetailsPanel")
  public open var commentBubbleVisibleInDetailsPanel: Boolean

  @JsName("bColorCommentBubble")
  public open var colorCommentBubble: Boolean

  @JsName("MoveMode")
  public open var moveMode: String

  @JsName("CommentDepth")
  public open var commentDepth: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdGraphNodeComment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdGraphNodeComment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdGraphNodeComment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdGraphNodeComment

    @JsName("C")
    public fun copy(other: UObject): EdGraphNodeComment

    @JsName("C")
    public fun copy(other: Any): EdGraphNodeComment
  }
}

public open external class EditorActorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("OnEditCutActorsBegin")
  public open var onEditCutActorsBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnEditCutActorsEnd")
  public open var onEditCutActorsEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnEditCopyActorsBegin")
  public open var onEditCopyActorsBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnEditCopyActorsEnd")
  public open var onEditCopyActorsEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnEditPasteActorsBegin")
  public open var onEditPasteActorsBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnEditPasteActorsEnd")
  public open var onEditPasteActorsEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnDuplicateActorsBegin")
  public open var onDuplicateActorsBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnDuplicateActorsEnd")
  public open var onDuplicateActorsEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnDeleteActorsBegin")
  public open var onDeleteActorsBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnDeleteActorsEnd")
  public open var onDeleteActorsEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SpawnActorFromObject")
  public open fun spawnActorFromObject(
    objectToUse: UObject,
    location: Vector,
    rotation: Rotator,
    transient: Boolean,
  ): Actor

  @JsName("SpawnActorFromClass")
  public open fun spawnActorFromClass(
    actorClass: UnrealEngineClass,
    location: Vector,
    rotation: Rotator,
    transient: Boolean,
  ): Actor

  @JsName("SetSelectedLevelActors")
  public open fun setSelectedLevelActors(actorsToSelect: Array<Actor>): Unit

  @JsName("SetComponentTransform")
  public open fun setComponentTransform(inSceneComponent: SceneComponent,
      inWorldTransform: Transform): Boolean

  @JsName("SetActorTransform")
  public open fun setActorTransform(inActor: Actor, inWorldTransform: Transform): Boolean

  @JsName("SetActorSelectionState")
  public open fun setActorSelectionState(actor: Actor, shouldBeSelected: Boolean): Unit

  @JsName("SelectNothing")
  public open fun selectNothing(): Unit

  @JsName("SelectAllChildren")
  public open fun selectAllChildren(recurseChildren: Boolean): Unit

  @JsName("SelectAll")
  public open fun selectAll(inWorld: World): Unit

  @JsName("InvertSelection")
  public open fun invertSelection(inWorld: World): Unit

  @JsName("GetSelectedLevelActors")
  public open fun getSelectedLevelActors(): Array<Actor>

  @JsName("GetAllLevelActorsComponents")
  public open fun getAllLevelActorsComponents(): Array<ActorComponent>

  @JsName("GetAllLevelActors")
  public open fun getAllLevelActors(): Array<Actor>

  @JsName("GetActorReference")
  public open fun getActorReference(pathToActor: String): Actor

  @JsName("DuplicateSelectedActors")
  public open fun duplicateSelectedActors(inWorld: World): Unit

  @JsName("DuplicateActors")
  public open fun duplicateActors(
    actorsToDuplicate: Array<Actor>,
    toWorld: World,
    offset: Vector,
  ): Array<Actor>

  @JsName("DuplicateActor")
  public open fun duplicateActor(
    actorToDuplicate: Actor,
    toWorld: World,
    offset: Vector,
  ): Actor

  @JsName("DestroyActors")
  public open fun destroyActors(actorsToDestroy: Array<Actor>): Boolean

  @JsName("DestroyActor")
  public open fun destroyActor(actorToDestroy: Actor): Boolean

  @JsName("DeleteSelectedActors")
  public open fun deleteSelectedActors(inWorld: World): Unit

  @JsName("ConvertActors")
  public open fun convertActors(
    actors: Array<Actor>,
    actorClass: UnrealEngineClass,
    staticMeshPackagePath: String,
  ): Array<Actor>

  @JsName("ClearActorSelectionSet")
  public open fun clearActorSelectionSet(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorActorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorActorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorActorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorActorSubsystem

    @JsName("C")
    public fun copy(other: UObject): EditorActorSubsystem

    @JsName("C")
    public fun copy(other: Any): EditorActorSubsystem
  }
}

public open external class EditorAnimBaseObj(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorAnimBaseObj

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorAnimBaseObj

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorAnimBaseObj

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorAnimBaseObj

    @JsName("C")
    public fun copy(other: UObject): EditorAnimBaseObj

    @JsName("C")
    public fun copy(other: Any): EditorAnimBaseObj
  }
}

public open external class EditorAnimCompositeSegment(
  outer: UObject,
) : EditorAnimBaseObj {
  @JsName("AnimSegment")
  public open var animSegment: AnimSegment

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorAnimCompositeSegment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorAnimCompositeSegment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorAnimCompositeSegment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorAnimCompositeSegment

    @JsName("C")
    public fun copy(other: UObject): EditorAnimCompositeSegment

    @JsName("C")
    public fun copy(other: Any): EditorAnimCompositeSegment
  }
}

public open external class EditorAnimCurveBoneLinks(
  outer: UObject,
) : UObject {
  @JsName("CurveName")
  public open var curveName: SmartName

  @JsName("ConnectedBones")
  public open var connectedBones: Array<BoneReference>

  @JsName("MaxLOD")
  public open var maxLod: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorAnimCurveBoneLinks

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorAnimCurveBoneLinks

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorAnimCurveBoneLinks

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorAnimCurveBoneLinks

    @JsName("C")
    public fun copy(other: UObject): EditorAnimCurveBoneLinks

    @JsName("C")
    public fun copy(other: Any): EditorAnimCurveBoneLinks
  }
}

public open external class EditorAnimSegment(
  outer: UObject,
) : EditorAnimBaseObj {
  @JsName("AnimSegment")
  public open var animSegment: AnimSegment

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorAnimSegment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorAnimSegment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorAnimSegment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorAnimSegment

    @JsName("C")
    public fun copy(other: UObject): EditorAnimSegment

    @JsName("C")
    public fun copy(other: Any): EditorAnimSegment
  }
}

public open external class EditorCompositeSection(
  outer: UObject,
) : EditorAnimBaseObj {
  @JsName("CompositeSection")
  public open var compositeSection: CompositeSection

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorCompositeSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorCompositeSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorCompositeSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorCompositeSection

    @JsName("C")
    public fun copy(other: UObject): EditorCompositeSection

    @JsName("C")
    public fun copy(other: Any): EditorCompositeSection
  }
}

public open external class EditorDomainSaveCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorDomainSaveCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorDomainSaveCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorDomainSaveCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorDomainSaveCommandlet

    @JsName("C")
    public fun copy(other: UObject): EditorDomainSaveCommandlet

    @JsName("C")
    public fun copy(other: Any): EditorDomainSaveCommandlet
  }
}

@JsName("EWindowMode")
public external object WindowMode {
  public var Fullscreen: String

  public var WindowedFullscreen: String

  public var Windowed: String

  @JsName("EWindowMode_MAX")
  public var Max: String
}

@JsName("T$704")
public external interface Object704 {
  @JsName("CurrentScaleNormalized")
  public var currentScaleNormalized: Number

  @JsName("CurrentScaleValue")
  public var currentScaleValue: Number

  @JsName("MinScaleValue")
  public var minScaleValue: Number

  @JsName("MaxScaleValue")
  public var maxScaleValue: Number
}

public open external class GameUserSettings(
  outer: UObject,
) : UObject {
  @JsName("bUseVSync")
  public open var useVSync: Boolean

  @JsName("bUseDynamicResolution")
  public open var useDynamicResolution: Boolean

  @JsName("ResolutionSizeX")
  public open var resolutionSizeX: Any

  @JsName("ResolutionSizeY")
  public open var resolutionSizeY: Any

  @JsName("LastUserConfirmedResolutionSizeX")
  public open var lastUserConfirmedResolutionSizeX: Any

  @JsName("LastUserConfirmedResolutionSizeY")
  public open var lastUserConfirmedResolutionSizeY: Any

  @JsName("WindowPosX")
  public open var windowPosX: Number

  @JsName("WindowPosY")
  public open var windowPosY: Number

  @JsName("FullscreenMode")
  public open var fullscreenMode: Number

  @JsName("LastConfirmedFullscreenMode")
  public open var lastConfirmedFullscreenMode: Number

  @JsName("PreferredFullscreenMode")
  public open var preferredFullscreenMode: Number

  @JsName("Version")
  public open var version: Any

  @JsName("AudioQualityLevel")
  public open var audioQualityLevel: Number

  @JsName("LastConfirmedAudioQualityLevel")
  public open var lastConfirmedAudioQualityLevel: Number

  @JsName("FrameRateLimit")
  public open var frameRateLimit: Number

  @JsName("DesiredScreenWidth")
  public open var desiredScreenWidth: Number

  @JsName("bUseDesiredScreenHeight")
  public open var useDesiredScreenHeight: Boolean

  @JsName("DesiredScreenHeight")
  public open var desiredScreenHeight: Number

  @JsName("LastUserConfirmedDesiredScreenWidth")
  public open var lastUserConfirmedDesiredScreenWidth: Number

  @JsName("LastUserConfirmedDesiredScreenHeight")
  public open var lastUserConfirmedDesiredScreenHeight: Number

  @JsName("LastRecommendedScreenWidth")
  public open var lastRecommendedScreenWidth: Number

  @JsName("LastRecommendedScreenHeight")
  public open var lastRecommendedScreenHeight: Number

  @JsName("LastCPUBenchmarkResult")
  public open var lastCpuBenchmarkResult: Number

  @JsName("LastGPUBenchmarkResult")
  public open var lastGpuBenchmarkResult: Number

  @JsName("LastCPUBenchmarkSteps")
  public open var lastCpuBenchmarkSteps: Array<Number>

  @JsName("LastGPUBenchmarkSteps")
  public open var lastGpuBenchmarkSteps: Array<Number>

  @JsName("LastGPUBenchmarkMultiplier")
  public open var lastGpuBenchmarkMultiplier: Number

  @JsName("bUseHDRDisplayOutput")
  public open var useHdrDisplayOutput: Boolean

  @JsName("HDRDisplayOutputNits")
  public open var hdrDisplayOutputNits: Number

  @JsName("OnGameUserSettingsUINeedsUpdate")
  public open var onGameUserSettingsUiNeedsUpdate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ValidateSettings")
  public open fun validateSettings(): Unit

  @JsName("SupportsHDRDisplayOutput")
  public open fun supportsHdrDisplayOutput(): Boolean

  @JsName("SetVSyncEnabled")
  public open fun setVSyncEnabled(enable: Boolean): Unit

  @JsName("SetVisualEffectQuality")
  public open fun setVisualEffectQuality(value: Number): Unit

  @JsName("SetViewDistanceQuality")
  public open fun setViewDistanceQuality(value: Number): Unit

  @JsName("SetToDefaults")
  public open fun setToDefaults(): Unit

  @JsName("SetTextureQuality")
  public open fun setTextureQuality(value: Number): Unit

  @JsName("SetShadowQuality")
  public open fun setShadowQuality(value: Number): Unit

  @JsName("SetShadingQuality")
  public open fun setShadingQuality(value: Number): Unit

  @JsName("SetScreenResolution")
  public open fun setScreenResolution(resolution: IntPoint): Unit

  @JsName("SetResolutionScaleValueEx")
  public open fun setResolutionScaleValueEx(newScaleValue: Number): Unit

  @JsName("SetResolutionScaleValue")
  public open fun setResolutionScaleValue(newScaleValue: Number): Unit

  @JsName("SetResolutionScaleNormalized")
  public open fun setResolutionScaleNormalized(newScaleNormalized: Number): Unit

  @JsName("SetReflectionQuality")
  public open fun setReflectionQuality(value: Number): Unit

  @JsName("SetPostProcessingQuality")
  public open fun setPostProcessingQuality(value: Number): Unit

  @JsName("SetOverallScalabilityLevel")
  public open fun setOverallScalabilityLevel(value: Number): Unit

  @JsName("SetGlobalIlluminationQuality")
  public open fun setGlobalIlluminationQuality(value: Number): Unit

  @JsName("SetFullscreenMode")
  public open fun setFullscreenMode(inFullscreenMode: String): Unit

  @JsName("SetFrameRateLimit")
  public open fun setFrameRateLimit(newLimit: Number): Unit

  @JsName("SetFoliageQuality")
  public open fun setFoliageQuality(value: Number): Unit

  @JsName("SetDynamicResolutionEnabled")
  public open fun setDynamicResolutionEnabled(enable: Boolean): Unit

  @JsName("SetBenchmarkFallbackValues")
  public open fun setBenchmarkFallbackValues(): Unit

  @JsName("SetAudioQualityLevel")
  public open fun setAudioQualityLevel(qualityLevel: Number): Unit

  @JsName("SetAntiAliasingQuality")
  public open fun setAntiAliasingQuality(value: Number): Unit

  @JsName("SaveSettings")
  public open fun saveSettings(): Unit

  @JsName("RunHardwareBenchmark")
  public open fun runHardwareBenchmark(
    workScale: Number,
    cpuMultiplier: Number,
    gpuMultiplier: Number,
  ): Unit

  @JsName("RevertVideoMode")
  public open fun revertVideoMode(): Unit

  @JsName("ResetToCurrentSettings")
  public open fun resetToCurrentSettings(): Unit

  @JsName("LoadSettings")
  public open fun loadSettings(forceReload: Boolean): Unit

  @JsName("IsVSyncEnabled")
  public open fun isVSyncEnabled(): Boolean

  @JsName("IsVSyncDirty")
  public open fun isVSyncDirty(): Boolean

  @JsName("IsScreenResolutionDirty")
  public open fun isScreenResolutionDirty(): Boolean

  @JsName("IsHDREnabled")
  public open fun isHdrEnabled(): Boolean

  @JsName("IsFullscreenModeDirty")
  public open fun isFullscreenModeDirty(): Boolean

  @JsName("IsDynamicResolutionEnabled")
  public open fun isDynamicResolutionEnabled(): Boolean

  @JsName("IsDynamicResolutionDirty")
  public open fun isDynamicResolutionDirty(): Boolean

  @JsName("IsDirty")
  public open fun isDirty(): Boolean

  @JsName("GetVisualEffectQuality")
  public open fun getVisualEffectQuality(): Number

  @JsName("GetViewDistanceQuality")
  public open fun getViewDistanceQuality(): Number

  @JsName("GetTextureQuality")
  public open fun getTextureQuality(): Number

  @JsName("GetShadowQuality")
  public open fun getShadowQuality(): Number

  @JsName("GetShadingQuality")
  public open fun getShadingQuality(): Number

  @JsName("GetScreenResolution")
  public open fun getScreenResolution(): IntPoint

  @JsName("GetResolutionScaleNormalized")
  public open fun getResolutionScaleNormalized(): Number

  @JsName("GetResolutionScaleInformationEx")
  public open fun getResolutionScaleInformationEx(
    currentScaleNormalized: Number,
    currentScaleValue: Number,
    minScaleValue: Number,
    maxScaleValue: Number,
  ): Object704

  @JsName("GetResolutionScaleInformation")
  public open fun getResolutionScaleInformation(
    currentScaleNormalized: Number,
    currentScaleValue: Number,
    minScaleValue: Number,
    maxScaleValue: Number,
  ): Object704

  @JsName("GetReflectionQuality")
  public open fun getReflectionQuality(): Number

  @JsName("GetRecommendedResolutionScale")
  public open fun getRecommendedResolutionScale(): Number

  @JsName("GetPreferredFullscreenMode")
  public open fun getPreferredFullscreenMode(): String

  @JsName("GetPostProcessingQuality")
  public open fun getPostProcessingQuality(): Number

  @JsName("GetOverallScalabilityLevel")
  public open fun getOverallScalabilityLevel(): Number

  @JsName("GetLastConfirmedScreenResolution")
  public open fun getLastConfirmedScreenResolution(): IntPoint

  @JsName("GetLastConfirmedFullscreenMode")
  public open fun getLastConfirmedFullscreenMode(): String

  @JsName("GetGlobalIlluminationQuality")
  public open fun getGlobalIlluminationQuality(): Number

  @JsName("GetFullscreenMode")
  public open fun getFullscreenMode(): String

  @JsName("GetFrameRateLimit")
  public open fun getFrameRateLimit(): Number

  @JsName("GetFoliageQuality")
  public open fun getFoliageQuality(): Number

  @JsName("GetDesktopResolution")
  public open fun getDesktopResolution(): IntPoint

  @JsName("GetDefaultResolutionScale")
  public open fun getDefaultResolutionScale(): Number

  @JsName("GetCurrentHDRDisplayNits")
  public open fun getCurrentHdrDisplayNits(): Number

  @JsName("GetAudioQualityLevel")
  public open fun getAudioQualityLevel(): Number

  @JsName("GetAntiAliasingQuality")
  public open fun getAntiAliasingQuality(): Number

  @JsName("EnableHDRDisplayOutput")
  public open fun enableHdrDisplayOutput(enable: Boolean, displayNits: Number): Unit

  @JsName("ConfirmVideoMode")
  public open fun confirmVideoMode(): Unit

  @JsName("ApplySettings")
  public open fun applySettings(checkForCommandLineOverrides: Boolean): Unit

  @JsName("ApplyResolutionSettings")
  public open fun applyResolutionSettings(checkForCommandLineOverrides: Boolean): Unit

  @JsName("ApplyNonResolutionSettings")
  public open fun applyNonResolutionSettings(): Unit

  @JsName("ApplyHardwareBenchmarkResults")
  public open fun applyHardwareBenchmarkResults(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameUserSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameUserSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameUserSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameUserSettings

    @JsName("GetSyncInterval")
    public fun getSyncInterval(): Number

    @JsName("GetGameUserSettings")
    public fun getGameUserSettings(): GameUserSettings

    @JsName("GetFramePace")
    public fun getFramePace(): Number

    @JsName("GetDefaultWindowPosition")
    public fun getDefaultWindowPosition(): IntPoint

    @JsName("GetDefaultWindowMode")
    public fun getDefaultWindowMode(): String

    @JsName("GetDefaultResolution")
    public fun getDefaultResolution(): IntPoint

    @JsName("C")
    public fun copy(other: UObject): GameUserSettings

    @JsName("C")
    public fun copy(other: Any): GameUserSettings
  }
}

public open external class AssetManager(
  outer: UObject,
) : UObject {
  @JsName("ObjectReferenceList")
  public open var objectReferenceList: Array<UObject>

  @JsName("bIsGlobalAsyncScanEnvironment")
  public open var isGlobalAsyncScanEnvironment: Boolean

  @JsName("bShouldGuessTypeAndName")
  public open var shouldGuessTypeAndName: Boolean

  @JsName("bShouldUseSynchronousLoad")
  public open var shouldUseSynchronousLoad: Boolean

  @JsName("bIsLoadingFromPakFiles")
  public open var isLoadingFromPakFiles: Boolean

  @JsName("bShouldAcquireMissingChunksOnLoad")
  public open var shouldAcquireMissingChunksOnLoad: Boolean

  @JsName("bOnlyCookProductionAssets")
  public open var onlyCookProductionAssets: Boolean

  @JsName("NumBulkScanRequests")
  public open var numBulkScanRequests: Number

  @JsName("bIsPrimaryAssetDirectoryCurrent")
  public open var isPrimaryAssetDirectoryCurrent: Boolean

  @JsName("bIsManagementDatabaseCurrent")
  public open var isManagementDatabaseCurrent: Boolean

  @JsName("bUpdateManagementDatabaseAfterScan")
  public open var updateManagementDatabaseAfterScan: Boolean

  @JsName("bIncludeOnlyOnDiskAssets")
  public open var includeOnlyOnDiskAssets: Boolean

  @JsName("bHasCompletedInitialScan")
  public open var hasCompletedInitialScan: Boolean

  @JsName("NumberOfSpawnedNotifications")
  public open var numberOfSpawnedNotifications: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetManager

    @JsName("C")
    public fun copy(other: UObject): AssetManager

    @JsName("C")
    public fun copy(other: Any): AssetManager
  }
}

public open external class StatColorMapEntry {
  @JsName("In")
  public open var `in`: Number

  @JsName("Out")
  public open var out: Color

  public open fun clone(): StatColorMapEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StatColorMapEntry

    @JsName("C")
    public fun copy(other: Any): StatColorMapEntry
  }
}

public open external class StatColorMapping {
  @JsName("StatName")
  public open var statName: String

  @JsName("ColorMap")
  public open var colorMap: Array<StatColorMapEntry>

  @JsName("DisableBlend")
  public open var disableBlend: Boolean

  public open fun clone(): StatColorMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StatColorMapping

    @JsName("C")
    public fun copy(other: Any): StatColorMapping
  }
}

public open external class GameNameRedirect {
  @JsName("OldGameName")
  public open var oldGameName: String

  @JsName("NewGameName")
  public open var newGameName: String

  public open fun clone(): GameNameRedirect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameNameRedirect

    @JsName("C")
    public fun copy(other: Any): GameNameRedirect
  }
}

public open external class ClassRedirect {
  @JsName("ObjectName")
  public open var objectName: String

  @JsName("OldClassName")
  public open var oldClassName: String

  @JsName("NewClassName")
  public open var newClassName: String

  @JsName("OldSubobjName")
  public open var oldSubobjName: String

  @JsName("NewSubobjName")
  public open var newSubobjName: String

  @JsName("NewClassClass")
  public open var newClassClass: String

  @JsName("NewClassPackage")
  public open var newClassPackage: String

  @JsName("InstanceOnly")
  public open var instanceOnly: Boolean

  public open fun clone(): ClassRedirect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClassRedirect

    @JsName("C")
    public fun copy(other: Any): ClassRedirect
  }
}

public open external class PluginRedirect {
  @JsName("OldPluginName")
  public open var oldPluginName: String

  @JsName("NewPluginName")
  public open var newPluginName: String

  public open fun clone(): PluginRedirect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PluginRedirect

    @JsName("C")
    public fun copy(other: Any): PluginRedirect
  }
}

public open external class StructRedirect {
  @JsName("OldStructName")
  public open var oldStructName: String

  @JsName("NewStructName")
  public open var newStructName: String

  public open fun clone(): StructRedirect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StructRedirect

    @JsName("C")
    public fun copy(other: Any): StructRedirect
  }
}

@JsName("ETransitionType")
public external object TransitionType {
  public var None: String

  public var Paused: String

  public var Loading: String

  public var Saving: String

  public var Connecting: String

  public var Precaching: String

  public var WaitingToConnect: String

  public var MAX: String
}

public open external class DropNoteInfo {
  @JsName("Location")
  public open var location: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("Comment")
  public open var comment: String

  public open fun clone(): DropNoteInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DropNoteInfo

    @JsName("C")
    public fun copy(other: Any): DropNoteInfo
  }
}

public open external class NetDriverDefinition {
  @JsName("DefName")
  public open var defName: String

  @JsName("DriverClassName")
  public open var driverClassName: String

  @JsName("DriverClassNameFallback")
  public open var driverClassNameFallback: String

  public open fun clone(): NetDriverDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NetDriverDefinition

    @JsName("C")
    public fun copy(other: Any): NetDriverDefinition
  }
}

public open external class Engine(
  outer: UObject,
) : UObject {
  @JsName("TinyFont")
  public open var tinyFont: Font

  @JsName("TinyFontName")
  public open var tinyFontName: SoftObjectPath

  @JsName("SmallFont")
  public open var smallFont: Font

  @JsName("SmallFontName")
  public open var smallFontName: SoftObjectPath

  @JsName("MediumFont")
  public open var mediumFont: Font

  @JsName("MediumFontName")
  public open var mediumFontName: SoftObjectPath

  @JsName("LargeFont")
  public open var largeFont: Font

  @JsName("LargeFontName")
  public open var largeFontName: SoftObjectPath

  @JsName("SubtitleFont")
  public open var subtitleFont: Font

  @JsName("SubtitleFontName")
  public open var subtitleFontName: SoftObjectPath

  @JsName("AdditionalFonts")
  public open var additionalFonts: Array<Font>

  @JsName("AdditionalFontNames")
  public open var additionalFontNames: Array<String>

  @JsName("ConsoleClass")
  public open var consoleClass: UnrealEngineClass

  @JsName("ConsoleClassName")
  public open var consoleClassName: SoftClassPath

  @JsName("GameViewportClientClass")
  public open var gameViewportClientClass: UnrealEngineClass

  @JsName("GameViewportClientClassName")
  public open var gameViewportClientClassName: SoftClassPath

  @JsName("LocalPlayerClass")
  public open var localPlayerClass: UnrealEngineClass

  @JsName("LocalPlayerClassName")
  public open var localPlayerClassName: SoftClassPath

  @JsName("WorldSettingsClass")
  public open var worldSettingsClass: UnrealEngineClass

  @JsName("WorldSettingsClassName")
  public open var worldSettingsClassName: SoftClassPath

  @JsName("NavigationSystemClassName")
  public open var navigationSystemClassName: SoftClassPath

  @JsName("NavigationSystemClass")
  public open var navigationSystemClass: UnrealEngineClass

  @JsName("NavigationSystemConfigClassName")
  public open var navigationSystemConfigClassName: SoftClassPath

  @JsName("NavigationSystemConfigClass")
  public open var navigationSystemConfigClass: UnrealEngineClass

  @JsName("AvoidanceManagerClassName")
  public open var avoidanceManagerClassName: SoftClassPath

  @JsName("AvoidanceManagerClass")
  public open var avoidanceManagerClass: UnrealEngineClass

  @JsName("AIControllerClassName")
  public open var aiControllerClassName: SoftClassPath

  @JsName("PhysicsCollisionHandlerClass")
  public open var physicsCollisionHandlerClass: UnrealEngineClass

  @JsName("PhysicsCollisionHandlerClassName")
  public open var physicsCollisionHandlerClassName: SoftClassPath

  @JsName("GameUserSettingsClassName")
  public open var gameUserSettingsClassName: SoftClassPath

  @JsName("GameUserSettingsClass")
  public open var gameUserSettingsClass: UnrealEngineClass

  @JsName("GameUserSettings")
  public open var gameUserSettings: GameUserSettings

  @JsName("LevelScriptActorClass")
  public open var levelScriptActorClass: UnrealEngineClass

  @JsName("LevelScriptActorClassName")
  public open var levelScriptActorClassName: SoftClassPath

  @JsName("DefaultBlueprintBaseClassName")
  public open var defaultBlueprintBaseClassName: SoftClassPath

  @JsName("GameSingletonClassName")
  public open var gameSingletonClassName: SoftClassPath

  @JsName("GameSingleton")
  public open var gameSingleton: UObject

  @JsName("AssetManagerClassName")
  public open var assetManagerClassName: SoftClassPath

  @JsName("AssetManager")
  public open var assetManager: AssetManager

  @JsName("DefaultTexture")
  public open var defaultTexture: Texture2d

  @JsName("DefaultTextureName")
  public open var defaultTextureName: SoftObjectPath

  @JsName("DefaultDiffuseTexture")
  public open var defaultDiffuseTexture: Texture

  @JsName("DefaultDiffuseTextureName")
  public open var defaultDiffuseTextureName: SoftObjectPath

  @JsName("DefaultBSPVertexTexture")
  public open var defaultBspVertexTexture: Texture2d

  @JsName("DefaultBSPVertexTextureName")
  public open var defaultBspVertexTextureName: SoftObjectPath

  @JsName("HighFrequencyNoiseTexture")
  public open var highFrequencyNoiseTexture: Texture2d

  @JsName("HighFrequencyNoiseTextureName")
  public open var highFrequencyNoiseTextureName: SoftObjectPath

  @JsName("DefaultBokehTexture")
  public open var defaultBokehTexture: Texture2d

  @JsName("DefaultBokehTextureName")
  public open var defaultBokehTextureName: SoftObjectPath

  @JsName("DefaultBloomKernelTexture")
  public open var defaultBloomKernelTexture: Texture2d

  @JsName("DefaultBloomKernelTextureName")
  public open var defaultBloomKernelTextureName: SoftObjectPath

  @JsName("DefaultFilmGrainTexture")
  public open var defaultFilmGrainTexture: Texture2d

  @JsName("DefaultFilmGrainTextureName")
  public open var defaultFilmGrainTextureName: SoftObjectPath

  @JsName("WireframeMaterial")
  public open var wireframeMaterial: Material

  @JsName("WireframeMaterialName")
  public open var wireframeMaterialName: String

  @JsName("GeomMaterial")
  public open var geomMaterial: Material

  @JsName("GeomMaterialName")
  public open var geomMaterialName: SoftObjectPath

  @JsName("DebugMeshMaterial")
  public open var debugMeshMaterial: Material

  @JsName("DebugMeshMaterialName")
  public open var debugMeshMaterialName: SoftObjectPath

  @JsName("EmissiveMeshMaterial")
  public open var emissiveMeshMaterial: Material

  @JsName("EmissiveMeshMaterialName")
  public open var emissiveMeshMaterialName: SoftObjectPath

  @JsName("LevelColorationLitMaterial")
  public open var levelColorationLitMaterial: Material

  @JsName("LevelColorationLitMaterialName")
  public open var levelColorationLitMaterialName: String

  @JsName("LevelColorationUnlitMaterial")
  public open var levelColorationUnlitMaterial: Material

  @JsName("LevelColorationUnlitMaterialName")
  public open var levelColorationUnlitMaterialName: String

  @JsName("LightingTexelDensityMaterial")
  public open var lightingTexelDensityMaterial: Material

  @JsName("LightingTexelDensityName")
  public open var lightingTexelDensityName: String

  @JsName("ShadedLevelColorationLitMaterial")
  public open var shadedLevelColorationLitMaterial: Material

  @JsName("ShadedLevelColorationLitMaterialName")
  public open var shadedLevelColorationLitMaterialName: String

  @JsName("ShadedLevelColorationUnlitMaterial")
  public open var shadedLevelColorationUnlitMaterial: Material

  @JsName("ShadedLevelColorationUnlitMaterialName")
  public open var shadedLevelColorationUnlitMaterialName: String

  @JsName("RemoveSurfaceMaterial")
  public open var removeSurfaceMaterial: Material

  @JsName("RemoveSurfaceMaterialName")
  public open var removeSurfaceMaterialName: SoftObjectPath

  @JsName("VertexColorMaterial")
  public open var vertexColorMaterial: Material

  @JsName("VertexColorMaterialName")
  public open var vertexColorMaterialName: String

  @JsName("VertexColorViewModeMaterial_ColorOnly")
  public open var vertexColorViewModeMaterialColorOnly: Material

  @JsName("VertexColorViewModeMaterialName_ColorOnly")
  public open var vertexColorViewModeMaterialNameColorOnly: String

  @JsName("VertexColorViewModeMaterial_AlphaAsColor")
  public open var vertexColorViewModeMaterialAlphaAsColor: Material

  @JsName("VertexColorViewModeMaterialName_AlphaAsColor")
  public open var vertexColorViewModeMaterialNameAlphaAsColor: String

  @JsName("VertexColorViewModeMaterial_RedOnly")
  public open var vertexColorViewModeMaterialRedOnly: Material

  @JsName("VertexColorViewModeMaterialName_RedOnly")
  public open var vertexColorViewModeMaterialNameRedOnly: String

  @JsName("VertexColorViewModeMaterial_GreenOnly")
  public open var vertexColorViewModeMaterialGreenOnly: Material

  @JsName("VertexColorViewModeMaterialName_GreenOnly")
  public open var vertexColorViewModeMaterialNameGreenOnly: String

  @JsName("VertexColorViewModeMaterial_BlueOnly")
  public open var vertexColorViewModeMaterialBlueOnly: Material

  @JsName("VertexColorViewModeMaterialName_BlueOnly")
  public open var vertexColorViewModeMaterialNameBlueOnly: String

  @JsName("BoneWeightMaterial")
  public open var boneWeightMaterial: Material

  @JsName("BoneWeightMaterialName")
  public open var boneWeightMaterialName: SoftObjectPath

  @JsName("ClothPaintMaterial")
  public open var clothPaintMaterial: Material

  @JsName("ClothPaintMaterialWireframe")
  public open var clothPaintMaterialWireframe: Material

  @JsName("ClothPaintMaterialInstance")
  public open var clothPaintMaterialInstance: MaterialInstanceDynamic

  @JsName("ClothPaintMaterialWireframeInstance")
  public open var clothPaintMaterialWireframeInstance: MaterialInstanceDynamic

  @JsName("ClothPaintMaterialName")
  public open var clothPaintMaterialName: SoftObjectPath

  @JsName("ClothPaintMaterialWireframeName")
  public open var clothPaintMaterialWireframeName: SoftObjectPath

  @JsName("PhysicalMaterialMaskMaterial")
  public open var physicalMaterialMaskMaterial: Material

  @JsName("PhysicalMaterialMaskMaterialName")
  public open var physicalMaterialMaskMaterialName: SoftObjectPath

  @JsName("DebugEditorMaterial")
  public open var debugEditorMaterial: Material

  @JsName("DefaultFlattenMaterialName")
  public open var defaultFlattenMaterialName: SoftObjectPath

  @JsName("DefaultHLODFlattenMaterialName")
  public open var defaultHlodFlattenMaterialName: SoftObjectPath

  @JsName("DefaultLandscapeFlattenMaterialName")
  public open var defaultLandscapeFlattenMaterialName: SoftObjectPath

  @JsName("DefaultFlattenMaterial")
  public open var defaultFlattenMaterial: Material

  @JsName("DefaultHLODFlattenMaterial")
  public open var defaultHlodFlattenMaterial: Material

  @JsName("DefaultLandscapeFlattenMaterial")
  public open var defaultLandscapeFlattenMaterial: Material

  @JsName("DebugEditorMaterialName")
  public open var debugEditorMaterialName: SoftObjectPath

  @JsName("ConstraintLimitMaterial")
  public open var constraintLimitMaterial: Material

  @JsName("ConstraintLimitMaterialX")
  public open var constraintLimitMaterialX: MaterialInstanceDynamic

  @JsName("ConstraintLimitMaterialXAxis")
  public open var constraintLimitMaterialXAxis: MaterialInstanceDynamic

  @JsName("ConstraintLimitMaterialY")
  public open var constraintLimitMaterialY: MaterialInstanceDynamic

  @JsName("ConstraintLimitMaterialYAxis")
  public open var constraintLimitMaterialYAxis: MaterialInstanceDynamic

  @JsName("ConstraintLimitMaterialZ")
  public open var constraintLimitMaterialZ: MaterialInstanceDynamic

  @JsName("ConstraintLimitMaterialZAxis")
  public open var constraintLimitMaterialZAxis: MaterialInstanceDynamic

  @JsName("ConstraintLimitMaterialPrismatic")
  public open var constraintLimitMaterialPrismatic: MaterialInstanceDynamic

  @JsName("InvalidLightmapSettingsMaterial")
  public open var invalidLightmapSettingsMaterial: Material

  @JsName("InvalidLightmapSettingsMaterialName")
  public open var invalidLightmapSettingsMaterialName: SoftObjectPath

  @JsName("PreviewShadowsIndicatorMaterial")
  public open var previewShadowsIndicatorMaterial: Material

  @JsName("PreviewShadowsIndicatorMaterialName")
  public open var previewShadowsIndicatorMaterialName: SoftObjectPath

  @JsName("ArrowMaterial")
  public open var arrowMaterial: Material

  @JsName("ArrowMaterialYellow")
  public open var arrowMaterialYellow: MaterialInstanceDynamic

  @JsName("ArrowMaterialName")
  public open var arrowMaterialName: SoftObjectPath

  @JsName("LightingOnlyBrightness")
  public open var lightingOnlyBrightness: LinearColor

  @JsName("ShaderComplexityColors")
  public open var shaderComplexityColors: Array<LinearColor>

  @JsName("QuadComplexityColors")
  public open var quadComplexityColors: Array<LinearColor>

  @JsName("LightComplexityColors")
  public open var lightComplexityColors: Array<LinearColor>

  @JsName("StationaryLightOverlapColors")
  public open var stationaryLightOverlapColors: Array<LinearColor>

  @JsName("LODColorationColors")
  public open var lodColorationColors: Array<LinearColor>

  @JsName("HLODColorationColors")
  public open var hlodColorationColors: Array<LinearColor>

  @JsName("StreamingAccuracyColors")
  public open var streamingAccuracyColors: Array<LinearColor>

  @JsName("MaxPixelShaderAdditiveComplexityCount")
  public open var maxPixelShaderAdditiveComplexityCount: Number

  @JsName("MaxES3PixelShaderAdditiveComplexityCount")
  public open var maxEs3PixelShaderAdditiveComplexityCount: Number

  @JsName("MinLightMapDensity")
  public open var minLightMapDensity: Number

  @JsName("IdealLightMapDensity")
  public open var idealLightMapDensity: Number

  @JsName("MaxLightMapDensity")
  public open var maxLightMapDensity: Number

  @JsName("bRenderLightMapDensityGrayscale")
  public open var renderLightMapDensityGrayscale: Boolean

  @JsName("RenderLightMapDensityGrayscaleScale")
  public open var renderLightMapDensityGrayscaleScale: Number

  @JsName("RenderLightMapDensityColorScale")
  public open var renderLightMapDensityColorScale: Number

  @JsName("LightMapDensityVertexMappedColor")
  public open var lightMapDensityVertexMappedColor: LinearColor

  @JsName("LightMapDensitySelectedColor")
  public open var lightMapDensitySelectedColor: LinearColor

  @JsName("StatColorMappings")
  public open var statColorMappings: Array<StatColorMapping>

  @JsName("EditorBrushMaterial")
  public open var editorBrushMaterial: Material

  @JsName("EditorBrushMaterialName")
  public open var editorBrushMaterialName: SoftObjectPath

  @JsName("DefaultPhysMaterial")
  public open var defaultPhysMaterial: PhysicalMaterial

  @JsName("DefaultPhysMaterialName")
  public open var defaultPhysMaterialName: SoftObjectPath

  @JsName("DefaultDestructiblePhysMaterial")
  public open var defaultDestructiblePhysMaterial: PhysicalMaterial

  @JsName("DefaultDestructiblePhysMaterialName")
  public open var defaultDestructiblePhysMaterialName: SoftObjectPath

  @JsName("ActiveGameNameRedirects")
  public open var activeGameNameRedirects: Array<GameNameRedirect>

  @JsName("ActiveClassRedirects")
  public open var activeClassRedirects: Array<ClassRedirect>

  @JsName("ActivePluginRedirects")
  public open var activePluginRedirects: Array<PluginRedirect>

  @JsName("ActiveStructRedirects")
  public open var activeStructRedirects: Array<StructRedirect>

  @JsName("PreIntegratedSkinBRDFTexture")
  public open var preIntegratedSkinBrdfTexture: Texture2d

  @JsName("PreIntegratedSkinBRDFTextureName")
  public open var preIntegratedSkinBrdfTextureName: SoftObjectPath

  @JsName("BlueNoiseTexture")
  public open var blueNoiseTexture: Texture2d

  @JsName("BlueNoiseTextureName")
  public open var blueNoiseTextureName: SoftObjectPath

  @JsName("MiniFontTexture")
  public open var miniFontTexture: Texture2d

  @JsName("MiniFontTextureName")
  public open var miniFontTextureName: SoftObjectPath

  @JsName("WeightMapPlaceholderTexture")
  public open var weightMapPlaceholderTexture: Texture

  @JsName("WeightMapPlaceholderTextureName")
  public open var weightMapPlaceholderTextureName: SoftObjectPath

  @JsName("LightMapDensityTexture")
  public open var lightMapDensityTexture: Texture2d

  @JsName("LightMapDensityTextureName")
  public open var lightMapDensityTextureName: SoftObjectPath

  @JsName("GameViewport")
  public open var gameViewport: GameViewportClient

  @JsName("DeferredCommands")
  public open var deferredCommands: Array<String>

  @JsName("NearClipPlane")
  public open var nearClipPlane: Number

  @JsName("bSubtitlesEnabled")
  public open var subtitlesEnabled: Boolean

  @JsName("bSubtitlesForcedOff")
  public open var subtitlesForcedOff: Boolean

  @JsName("MaximumLoopIterationCount")
  public open var maximumLoopIterationCount: Number

  @JsName("bCanBlueprintsTickByDefault")
  public open var canBlueprintsTickByDefault: Boolean

  @JsName("bOptimizeAnimBlueprintMemberVariableAccess")
  public open var optimizeAnimBlueprintMemberVariableAccess: Boolean

  @JsName("bAllowMultiThreadedAnimationUpdate")
  public open var allowMultiThreadedAnimationUpdate: Boolean

  @JsName("bEnableEditorPSysRealtimeLOD")
  public open var enableEditorPSysRealtimeLod: Boolean

  @JsName("bSmoothFrameRate")
  public open var smoothFrameRate: Boolean

  @JsName("bUseFixedFrameRate")
  public open var useFixedFrameRate: Boolean

  @JsName("FixedFrameRate")
  public open var fixedFrameRate: Number

  @JsName("SmoothedFrameRateRange")
  public open var smoothedFrameRateRange: FloatRange

  @JsName("CustomTimeStep")
  public open var customTimeStep: EngineCustomTimeStep

  @JsName("CustomTimeStepClassName")
  public open var customTimeStepClassName: SoftClassPath

  @JsName("TimecodeProvider")
  public open var timecodeProvider: TimecodeProvider

  @JsName("TimecodeProviderClassName")
  public open var timecodeProviderClassName: SoftClassPath

  @JsName("bGenerateDefaultTimecode")
  public open var generateDefaultTimecode: Boolean

  @JsName("GenerateDefaultTimecodeFrameRate")
  public open var generateDefaultTimecodeFrameRate: FrameRate

  @JsName("GenerateDefaultTimecodeFrameDelay")
  public open var generateDefaultTimecodeFrameDelay: Number

  @JsName("bCheckForMultiplePawnsSpawnedInAFrame")
  public open var checkForMultiplePawnsSpawnedInAFrame: Boolean

  @JsName("NumPawnsAllowedToBeSpawnedInAFrame")
  public open var numPawnsAllowedToBeSpawnedInAFrame: Number

  @JsName("bShouldGenerateLowQualityLightmaps")
  public open var shouldGenerateLowQualityLightmaps: Boolean

  @JsName("C_WorldBox")
  public open var cWorldBox: Color

  @JsName("C_BrushWire")
  public open var cBrushWire: Color

  @JsName("C_AddWire")
  public open var cAddWire: Color

  @JsName("C_SubtractWire")
  public open var cSubtractWire: Color

  @JsName("C_SemiSolidWire")
  public open var cSemiSolidWire: Color

  @JsName("C_NonSolidWire")
  public open var cNonSolidWire: Color

  @JsName("C_WireBackground")
  public open var cWireBackground: Color

  @JsName("C_ScaleBoxHi")
  public open var cScaleBoxHi: Color

  @JsName("C_VolumeCollision")
  public open var cVolumeCollision: Color

  @JsName("C_BSPCollision")
  public open var cbspCollision: Color

  @JsName("C_OrthoBackground")
  public open var cOrthoBackground: Color

  @JsName("C_Volume")
  public open var cVolume: Color

  @JsName("C_BrushShape")
  public open var cBrushShape: Color

  @JsName("StreamingDistanceFactor")
  public open var streamingDistanceFactor: Number

  @JsName("GameScreenshotSaveDirectory")
  public open var gameScreenshotSaveDirectory: DirectoryPath

  @JsName("UseStaticMeshMinLODPerQualityLevels")
  public open var useStaticMeshMinLodPerQualityLevels: Boolean

  @JsName("TransitionType")
  public open var transitionType: String

  @JsName("TransitionDescription")
  public open var transitionDescription: String

  @JsName("TransitionGameMode")
  public open var transitionGameMode: String

  @JsName("bAllowMatureLanguage")
  public open var allowMatureLanguage: Boolean

  @JsName("CameraRotationThreshold")
  public open var cameraRotationThreshold: Number

  @JsName("CameraTranslationThreshold")
  public open var cameraTranslationThreshold: Number

  @JsName("PrimitiveProbablyVisibleTime")
  public open var primitiveProbablyVisibleTime: Number

  @JsName("MaxOcclusionPixelsFraction")
  public open var maxOcclusionPixelsFraction: Number

  @JsName("bPauseOnLossOfFocus")
  public open var pauseOnLossOfFocus: Boolean

  @JsName("MaxParticleResize")
  public open var maxParticleResize: Number

  @JsName("MaxParticleResizeWarn")
  public open var maxParticleResizeWarn: Number

  @JsName("PendingDroppedNotes")
  public open var pendingDroppedNotes: Array<DropNoteInfo>

  @JsName("NetClientTicksPerSecond")
  public open var netClientTicksPerSecond: Number

  @JsName("DisplayGamma")
  public open var displayGamma: Number

  @JsName("MinDesiredFrameRate")
  public open var minDesiredFrameRate: Number

  @JsName("DefaultSelectedMaterialColor")
  public open var defaultSelectedMaterialColor: LinearColor

  @JsName("SelectedMaterialColor")
  public open var selectedMaterialColor: LinearColor

  @JsName("SelectionOutlineColor")
  public open var selectionOutlineColor: LinearColor

  @JsName("SubduedSelectionOutlineColor")
  public open var subduedSelectionOutlineColor: LinearColor

  @JsName("SelectedMaterialColorOverride")
  public open var selectedMaterialColorOverride: LinearColor

  @JsName("bIsOverridingSelectedColor")
  public open var isOverridingSelectedColor: Boolean

  @JsName("bEnableOnScreenDebugMessages")
  public open var enableOnScreenDebugMessages: Boolean

  @JsName("bEnableOnScreenDebugMessagesDisplay")
  public open var enableOnScreenDebugMessagesDisplay: Boolean

  @JsName("bSuppressMapWarnings")
  public open var suppressMapWarnings: Boolean

  @JsName("bDisableAILogging")
  public open var disableAiLogging: Boolean

  @JsName("bEnableVisualLogRecordingOnStart")
  public open var enableVisualLogRecordingOnStart: Any

  @JsName("ScreenSaverInhibitorSemaphore")
  public open var screenSaverInhibitorSemaphore: Number

  @JsName("bLockReadOnlyLevels")
  public open var lockReadOnlyLevels: Boolean

  @JsName("ParticleEventManagerClassPath")
  public open var particleEventManagerClassPath: String

  @JsName("SelectionHighlightIntensity")
  public open var selectionHighlightIntensity: Number

  @JsName("BSPSelectionHighlightIntensity")
  public open var bspSelectionHighlightIntensity: Number

  @JsName("SelectionHighlightIntensityBillboards")
  public open var selectionHighlightIntensityBillboards: Number

  @JsName("NetDriverDefinitions")
  public open var netDriverDefinitions: Array<NetDriverDefinition>

  @JsName("ServerActors")
  public open var serverActors: Array<String>

  @JsName("RuntimeServerActors")
  public open var runtimeServerActors: Array<String>

  @JsName("NetErrorLogInterval")
  public open var netErrorLogInterval: Number

  @JsName("bStartedLoadMapMovie")
  public open var startedLoadMapMovie: Boolean

  @JsName("NextWorldContextHandle")
  public open var nextWorldContextHandle: Number

  @JsName("GetEditorWorld")
  public open fun getEditorWorld(): World

  @JsName("GetPIEWorld")
  public open fun getPieWorld(): World

  @JsName("HasUndo")
  public open fun hasUndo(): Boolean

  @JsName("SetClientTravel")
  public open fun setClientTravel(
    inWorld: World,
    nextUrl: String,
    inTravelType: String,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Engine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Engine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Engine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Engine

    @JsName("C")
    public fun copy(other: UObject): Engine

    @JsName("C")
    public fun copy(other: Any): Engine

    @JsName("GetEditorWorld")
    public fun getEditorWorld(engine: Engine): World

    @JsName("GetPIEWorld")
    public fun getPieWorld(engine: Engine): World

    @JsName("HasUndo")
    public fun hasUndo(engine: Engine): Boolean

    @JsName("SetClientTravel")
    public fun setClientTravel(
      engine: Engine,
      inWorld: World,
      nextUrl: String,
      inTravelType: String,
    ): Unit
  }
}

public open external class JavascriptTransaction {
  public open fun clone(): JavascriptTransaction

  @JsName("GetContext")
  public open fun getContext(): String

  @JsName("GetPrimaryObject")
  public open fun getPrimaryObject(): UObject

  @JsName("GetTitle")
  public open fun getTitle(): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptTransaction

    @JsName("C")
    public fun copy(other: Any): JavascriptTransaction

    @JsName("GetContext")
    public fun getContext(transaction: JavascriptTransaction): String

    @JsName("GetPrimaryObject")
    public fun getPrimaryObject(transaction: JavascriptTransaction): UObject

    @JsName("GetTitle")
    public fun getTitle(transaction: JavascriptTransaction): String
  }
}

public open external class Transactor(
  outer: UObject,
) : UObject {
  @JsName("GetQueueLength")
  public open fun getQueueLength(): Number

  @JsName("GetTransaction")
  public open fun getTransaction(queueIndex: Number): JavascriptTransaction

  @JsName("IsActive")
  public open fun isActive(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Transactor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Transactor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Transactor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Transactor

    @JsName("C")
    public fun copy(other: UObject): Transactor

    @JsName("C")
    public fun copy(other: Any): Transactor

    @JsName("GetQueueLength")
    public fun getQueueLength(transactor: Transactor): Number

    @JsName("GetTransaction")
    public fun getTransaction(transactor: Transactor, queueIndex: Number): JavascriptTransaction

    @JsName("IsActive")
    public fun isActive(transactor: Transactor): Boolean
  }
}

public open external class EditorWorldExtensionCollection(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorWorldExtensionCollection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorWorldExtensionCollection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorWorldExtensionCollection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorWorldExtensionCollection

    @JsName("C")
    public fun copy(other: UObject): EditorWorldExtensionCollection

    @JsName("C")
    public fun copy(other: Any): EditorWorldExtensionCollection
  }
}

public open external class EditorWorldExtensionManager(
  outer: UObject,
) : UObject {
  @JsName("EditorWorldExtensionCollection")
  public open var editorWorldExtensionCollection: Array<EditorWorldExtensionCollection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorWorldExtensionManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorWorldExtensionManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorWorldExtensionManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorWorldExtensionManager

    @JsName("C")
    public fun copy(other: UObject): EditorWorldExtensionManager

    @JsName("C")
    public fun copy(other: Any): EditorWorldExtensionManager
  }
}

public open external class LevelEditorDragDropHandler(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditorDragDropHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditorDragDropHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditorDragDropHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditorDragDropHandler

    @JsName("C")
    public fun copy(other: UObject): LevelEditorDragDropHandler

    @JsName("C")
    public fun copy(other: Any): LevelEditorDragDropHandler
  }
}

@JsName("ECsgOper")
public external object CsgOper {
  @JsName("CSG_Active")
  public var Active: String

  @JsName("CSG_Add")
  public var Add: String

  @JsName("CSG_Subtract")
  public var Subtract: String

  @JsName("CSG_Intersect")
  public var Intersect: String

  @JsName("CSG_Deintersect")
  public var Deintersect: String

  @JsName("CSG_None")
  public var None: String

  @JsName("CSG_MAX")
  public var Max: String
}

@JsName("T$705")
public external interface Object705 {
  @JsName("Out")
  public var out: Array<UObject>

  @JsName("$")
  public var value: Number
}

public open external class USelection(
  outer: UObject,
) : UObject {
  @JsName("ElementSelectionSet")
  public open var elementSelectionSet: TypedElementSelectionSet

  @JsName("Deselect")
  public open fun deselect(inObject: UObject): Unit

  @JsName("DeselectAll")
  public open fun deselectAll(inClass: UnrealEngineClass): Unit

  @JsName("GetSelectedObjects")
  public open fun getSelectedObjects(out: Array<UObject>): Object705

  @JsName("Select")
  public open fun select(inObject: UObject): Unit

  @JsName("ToggleSelect")
  public open fun toggleSelect(inObject: UObject): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): USelection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): USelection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): USelection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): USelection

    @JsName("C")
    public fun copy(other: UObject): USelection

    @JsName("C")
    public fun copy(other: Any): USelection

    @JsName("Deselect")
    public fun deselect(uSelection: USelection, inObject: UObject): Unit

    @JsName("DeselectAll")
    public fun deselectAll(uSelection: USelection, inClass: UnrealEngineClass): Unit

    @JsName("GetSelectedObjects")
    public fun getSelectedObjects(uSelection: USelection, out: Array<UObject>): Object705

    @JsName("Select")
    public fun select(uSelection: USelection, inObject: UObject): Unit

    @JsName("ToggleSelect")
    public fun toggleSelect(uSelection: USelection, inObject: UObject): Unit
  }
}

public open external class EditorEngine(
  outer: UObject,
) : Engine {
  @JsName("TempModel")
  public open var tempModel: Model

  @JsName("ConversionTempModel")
  public open var conversionTempModel: Model

  @JsName("Trans")
  public open var trans: Transactor

  @JsName("Bad")
  public open var bad: Texture2d

  @JsName("EditorFont")
  public open var editorFont: Font

  @JsName("PreviewSoundCue")
  public open var previewSoundCue: SoundCue

  @JsName("PreviewAudioComponent")
  public open var previewAudioComponent: AudioComponent

  @JsName("EditorCube")
  public open var editorCube: StaticMesh

  @JsName("EditorSphere")
  public open var editorSphere: StaticMesh

  @JsName("EditorPlane")
  public open var editorPlane: StaticMesh

  @JsName("EditorCylinder")
  public open var editorCylinder: StaticMesh

  @JsName("bFastRebuild")
  public open var fastRebuild: Boolean

  @JsName("IsImportingT3D")
  public open var isImportingT3d: Boolean

  @JsName("ClickFlags")
  public open var clickFlags: Any

  @JsName("ParentContext")
  public open var parentContext: Package

  @JsName("UnsnappedClickLocation")
  public open var unsnappedClickLocation: Vector

  @JsName("ClickLocation")
  public open var clickLocation: Vector

  @JsName("ClickPlane")
  public open var clickPlane: Plane

  @JsName("MouseMovement")
  public open var mouseMovement: Vector

  @JsName("DetailMode")
  public open var detailMode: String

  @JsName("UseSizingBox")
  public open var useSizingBox: Boolean

  @JsName("UseAxisIndicator")
  public open var useAxisIndicator: Boolean

  @JsName("GodMode")
  public open var godMode: Boolean

  @JsName("GameCommandLine")
  public open var gameCommandLine: String

  @JsName("bShowBrushMarkerPolys")
  public open var showBrushMarkerPolys: Boolean

  @JsName("bEnableSocketSnapping")
  public open var enableSocketSnapping: Boolean

  @JsName("bEnableLODLocking")
  public open var enableLodLocking: Boolean

  @JsName("HeightMapExportClassName")
  public open var heightMapExportClassName: String

  @JsName("ActorFactories")
  public open var actorFactories: Array<ActorFactory>

  @JsName("UserOpenedFile")
  public open var userOpenedFile: String

  @JsName("InEditorGameURLOptions")
  public open var inEditorGameUrlOptions: String

  @JsName("PlayWorld")
  public open var playWorld: World

  @JsName("bIsToggleBetweenPIEandSIEQueued")
  public open var isToggleBetweenPiEandSieQueued: Boolean

  @JsName("bAllowMultiplePIEWorlds")
  public open var allowMultiplePieWorlds: Boolean

  @JsName("bRequestEndPlayMapQueued")
  public open var requestEndPlayMapQueued: Boolean

  @JsName("bSquelchTransactionNotification")
  public open var squelchTransactionNotification: Boolean

  @JsName("bNotifyUndoRedoSelectionChange")
  public open var notifyUndoRedoSelectionChange: Boolean

  @JsName("PlayFromHerePlayerStartClass")
  public open var playFromHerePlayerStartClass: UnrealEngineClass

  @JsName("EditorWorld")
  public open var editorWorld: World

  @JsName("ActorsThatWereSelected")
  public open var actorsThatWereSelected: Array<Any>

  @JsName("PlayWorldDestination")
  public open var playWorldDestination: Number

  @JsName("CurrentPlayWorldDestination")
  public open var currentPlayWorldDestination: Number

  @JsName("bMobilePreviewPortrait")
  public open var mobilePreviewPortrait: Boolean

  @JsName("BuildPlayDevice")
  public open var buildPlayDevice: Number

  @JsName("UserEditedPlayWorldURL")
  public open var userEditedPlayWorldUrl: String

  @JsName("ScratchRenderTarget2048")
  public open var scratchRenderTarget2048: TextureRenderTarget2d

  @JsName("ScratchRenderTarget1024")
  public open var scratchRenderTarget1024: TextureRenderTarget2d

  @JsName("ScratchRenderTarget512")
  public open var scratchRenderTarget512: TextureRenderTarget2d

  @JsName("ScratchRenderTarget256")
  public open var scratchRenderTarget256: TextureRenderTarget2d

  @JsName("PreviewMeshComp")
  public open var previewMeshComp: StaticMeshComponent

  @JsName("PreviewMeshIndex")
  public open var previewMeshIndex: Number

  @JsName("bShowPreviewMesh")
  public open var showPreviewMesh: Boolean

  @JsName("bCustomCameraAlignEmitter")
  public open var customCameraAlignEmitter: Boolean

  @JsName("CustomCameraAlignEmitterDistance")
  public open var customCameraAlignEmitterDistance: Number

  @JsName("bDrawSocketsInGMode")
  public open var drawSocketsInGMode: Boolean

  @JsName("bDrawParticleHelpers")
  public open var drawParticleHelpers: Boolean

  @JsName("BrushBuilders")
  public open var brushBuilders: Array<BrushBuilder>

  @JsName("EditorWorldExtensionsManager")
  public open var editorWorldExtensionsManager: EditorWorldExtensionManager

  @JsName("DragDropHandler")
  public open var dragDropHandler: LevelEditorDragDropHandler

  @JsName("ActorGroupingUtilsClassName")
  public open var actorGroupingUtilsClassName: SoftClassPath

  @JsName("ActorGroupingUtils")
  public open var actorGroupingUtils: ActorGroupingUtils

  @JsName("PlayWorldLocation")
  public open var playWorldLocation: Vector

  @JsName("PlayWorldRotation")
  public open var playWorldRotation: Rotator

  @JsName("bIsPlayWorldQueued")
  public open var isPlayWorldQueued: Boolean

  @JsName("bIsSimulateInEditorQueued")
  public open var isSimulateInEditorQueued: Boolean

  @JsName("bHasPlayWorldPlacement")
  public open var hasPlayWorldPlacement: Boolean

  @JsName("bUseMobilePreviewForPlayWorld")
  public open var useMobilePreviewForPlayWorld: Boolean

  @JsName("bUseVRPreviewForPlayWorld")
  public open var useVrPreviewForPlayWorld: Boolean

  @JsName("bIsSimulatingInEditor")
  public open var isSimulatingInEditor: Boolean

  @JsName("PlayInEditorViewportIndex")
  public open var playInEditorViewportIndex: Number

  @JsName("bspBrushCSG")
  public open fun bspBrushCsg(
    actor: Brush,
    model: Model,
    polyFlags: Number,
    brushType: String,
    csgOper: String,
    buildBounds: Boolean,
    mergePolys: Boolean,
    replaceNullMaterialRefs: Boolean,
    showProgressBar: Boolean,
  ): Number

  @JsName("CanSelectActor")
  public open fun canSelectActor(
    actor: Actor,
    inSelected: Boolean,
    selectEvenIfHidden: Boolean,
    warnIfLevelLocked: Boolean,
  ): Boolean

  @JsName("Exec")
  public open fun exec(
    inWorld: World,
    command: String,
    out: String,
  ): Object496

  @JsName("FindBrushBuilder")
  public open fun findBrushBuilder(brushBuilderClass: UnrealEngineClass): BrushBuilder

  @JsName("GetSelectedActors")
  public open fun getSelectedActors(): USelection

  @JsName("GetSelectedComponents")
  public open fun getSelectedComponents(): USelection

  @JsName("GetSelectedObjects")
  public open fun getSelectedObjects(): USelection

  @JsName("GetSelectedSet")
  public open fun getSelectedSet(`class`: UnrealEngineClass): USelection

  @JsName("RebuildLevel")
  public open fun rebuildLevel(level: Level): Unit

  @JsName("RebuildStaticNavigableGeometry")
  public open fun rebuildStaticNavigableGeometry(level: Level): Unit

  @JsName("RedrawAllViewports")
  public open fun redrawAllViewports(invalidateHitProxies: Boolean): Unit

  @JsName("SelectActor")
  public open fun selectActor(
    actor: Actor,
    inSelected: Boolean,
    notify: Boolean,
    selectEvenIfHidden: Boolean,
    forceRefresh: Boolean,
  ): Unit

  @JsName("SelectComponent")
  public open fun selectComponent(
    component: ActorComponent,
    inSelected: Boolean,
    notify: Boolean,
    selectEvenIfHidden: Boolean,
  ): Unit

  @JsName("SelectGroup")
  public open fun selectGroup(
    inGroupActor: GroupActor,
    forceSelection: Boolean,
    inSelected: Boolean,
    notify: Boolean,
  ): Unit

  @JsName("SelectNone")
  public open fun selectNone(
    noteSelectionChange: Boolean,
    deselectBspSurfs: Boolean,
    warnAboutManyActors: Boolean,
  ): Unit

  @JsName("SetMaterial")
  public open fun setMaterial(
    inModel: Model,
    material: MaterialInterface,
    surfaces: Array<Number>,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorEngine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorEngine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorEngine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorEngine

    @JsName("C")
    public fun copy(other: UObject): EditorEngine

    @JsName("C")
    public fun copy(other: Any): EditorEngine

    @JsName("bspBrushCSG")
    public fun bspBrushCsg(
      engine: EditorEngine,
      actor: Brush,
      model: Model,
      polyFlags: Number,
      brushType: String,
      csgOper: String,
      buildBounds: Boolean,
      mergePolys: Boolean,
      replaceNullMaterialRefs: Boolean,
      showProgressBar: Boolean,
    ): Number

    @JsName("CanSelectActor")
    public fun canSelectActor(
      engine: EditorEngine,
      actor: Actor,
      inSelected: Boolean,
      selectEvenIfHidden: Boolean,
      warnIfLevelLocked: Boolean,
    ): Boolean

    @JsName("Exec")
    public fun exec(
      engine: EditorEngine,
      inWorld: World,
      command: String,
      out: String,
    ): Object496

    @JsName("FindBrushBuilder")
    public fun findBrushBuilder(engine: EditorEngine, brushBuilderClass: UnrealEngineClass):
        BrushBuilder

    @JsName("GetSelectedActors")
    public fun getSelectedActors(engine: EditorEngine): USelection

    @JsName("GetSelectedComponents")
    public fun getSelectedComponents(engine: EditorEngine): USelection

    @JsName("GetSelectedObjects")
    public fun getSelectedObjects(engine: EditorEngine): USelection

    @JsName("GetSelectedSet")
    public fun getSelectedSet(engine: EditorEngine, `class`: UnrealEngineClass): USelection

    @JsName("RebuildLevel")
    public fun rebuildLevel(engine: EditorEngine, level: Level): Unit

    @JsName("RebuildStaticNavigableGeometry")
    public fun rebuildStaticNavigableGeometry(engine: EditorEngine, level: Level): Unit

    @JsName("RedrawAllViewports")
    public fun redrawAllViewports(engine: EditorEngine, invalidateHitProxies: Boolean): Unit

    @JsName("SelectActor")
    public fun selectActor(
      engine: EditorEngine,
      actor: Actor,
      inSelected: Boolean,
      notify: Boolean,
      selectEvenIfHidden: Boolean,
      forceRefresh: Boolean,
    ): Unit

    @JsName("SelectComponent")
    public fun selectComponent(
      engine: EditorEngine,
      component: ActorComponent,
      inSelected: Boolean,
      notify: Boolean,
      selectEvenIfHidden: Boolean,
    ): Unit

    @JsName("SelectGroup")
    public fun selectGroup(
      engine: EditorEngine,
      inGroupActor: GroupActor,
      forceSelection: Boolean,
      inSelected: Boolean,
      notify: Boolean,
    ): Unit

    @JsName("SelectNone")
    public fun selectNone(
      engine: EditorEngine,
      noteSelectionChange: Boolean,
      deselectBspSurfs: Boolean,
      warnAboutManyActors: Boolean,
    ): Unit

    @JsName("SetMaterial")
    public fun setMaterial(
      engine: EditorEngine,
      inModel: Model,
      material: MaterialInterface,
      surfaces: Array<Number>,
    ): Unit
  }
}

@JsName("EConsoleForGamepadLabels")
public external object ConsoleForGamepadLabels {
  public var None: String

  public var XBoxOne: String

  @JsName("PS4")
  public var Ps4: String

  @JsName("EConsoleForGamepadLabels_MAX")
  public var Max: String
}

public open external class EditorExperimentalSettings(
  outer: UObject,
) : UObject {
  @JsName("bEnableAsyncTextureCompilation")
  public open var enableAsyncTextureCompilation: Boolean

  @JsName("bEnableAsyncStaticMeshCompilation")
  public open var enableAsyncStaticMeshCompilation: Boolean

  @JsName("bEnableAsyncSkeletalMeshCompilation")
  public open var enableAsyncSkeletalMeshCompilation: Boolean

  @JsName("bEnableInterchangeFramework")
  public open var enableInterchangeFramework: Boolean

  @JsName("bEnableInterchangeFrameworkForTextureOnly")
  public open var enableInterchangeFrameworkForTextureOnly: Boolean

  @JsName("bHDREditor")
  public open var hdrEditor: Boolean

  @JsName("HDREditorNITLevel")
  public open var hdrEditorNitLevel: Number

  @JsName("bProceduralFoliage")
  public open var proceduralFoliage: Boolean

  @JsName("bEnableTranslationPicker")
  public open var enableTranslationPicker: Boolean

  @JsName("ConsoleForGamepadLabels")
  public open var consoleForGamepadLabels: String

  @JsName("bToolbarCustomization")
  public open var toolbarCustomization: Boolean

  @JsName("bBreakOnExceptions")
  public open var breakOnExceptions: Boolean

  @JsName("bDrawMidpointArrowsInBlueprints")
  public open var drawMidpointArrowsInBlueprints: Boolean

  @JsName("bContextMenuChunkAssignments")
  public open var contextMenuChunkAssignments: Boolean

  @JsName("bDisableCookInEditor")
  public open var disableCookInEditor: Boolean

  @JsName("bSharedCookedBuilds")
  public open var sharedCookedBuilds: Boolean

  @JsName("MultiProcessCooking")
  public open var multiProcessCooking: Number

  @JsName("bAllowLateJoinInPIE")
  public open var allowLateJoinInPie: Boolean

  @JsName("bAllowVulkanPreview")
  public open var allowVulkanPreview: Boolean

  @JsName("bEnableMultithreadedLightmapEncoding")
  public open var enableMultithreadedLightmapEncoding: Boolean

  @JsName("bEnableMultithreadedShadowmapEncoding")
  public open var enableMultithreadedShadowmapEncoding: Boolean

  @JsName("bUseOpenCLForConvexHullDecomp")
  public open var useOpenClForConvexHullDecomp: Boolean

  @JsName("bAllowPotentiallyUnsafePropertyEditing")
  public open var allowPotentiallyUnsafePropertyEditing: Boolean

  @JsName("bFacialAnimationImporter")
  public open var facialAnimationImporter: Boolean

  @JsName("bEnableOneFilePerActorSupport")
  public open var enableOneFilePerActorSupport: Boolean

  @JsName("bEnableActorFolderObjectSupport")
  public open var enableActorFolderObjectSupport: Boolean

  @JsName("bMobilePIEPreviewDeviceLaunch")
  public open var mobilePiePreviewDeviceLaunch: Boolean

  @JsName("bTextAssetFormatSupport")
  public open var textAssetFormatSupport: Boolean

  @JsName("bExampleLayersAndBlends")
  public open var exampleLayersAndBlends: Boolean

  @JsName("bEnableLongPathsSupport")
  public open var enableLongPathsSupport: Boolean

  @JsName("bPackedLevelActor")
  public open var packedLevelActor: Boolean

  @JsName("bLevelInstance")
  public open var levelInstance: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorExperimentalSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorExperimentalSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorExperimentalSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorExperimentalSettings

    @JsName("C")
    public fun copy(other: UObject): EditorExperimentalSettings

    @JsName("C")
    public fun copy(other: Any): EditorExperimentalSettings
  }
}

@JsName("ELevelVisibilityDirtyMode")
public external object LevelVisibilityDirtyMode {
  public var ModifyOnChange: String

  public var DontModify: String

  @JsName("ELevelVisibilityDirtyMode_MAX")
  public var Max: String
}

public open external class EditorLevelUtils(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorLevelUtils

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorLevelUtils

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorLevelUtils

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorLevelUtils

    @JsName("SetLevelVisibility")
    public fun setLevelVisibility(
      level: Level,
      shouldBeVisible: Boolean,
      forceLayersVisible: Boolean,
      modifyMode: String,
    ): Unit

    @JsName("SetLevelsVisibility")
    public fun setLevelsVisibility(
      levels: Array<Level>,
      shouldBeVisible: Array<Boolean>,
      forceLayersVisible: Boolean,
      modifyMode: String,
    ): Unit

    @JsName("MoveSelectedActorsToLevel")
    public fun moveSelectedActorsToLevel(destLevel: LevelStreaming, warnAboutReferences: Boolean):
        Number

    @JsName("MoveActorsToLevel")
    public fun moveActorsToLevel(
      actorsToMove: Array<Actor>,
      destStreamingLevel: LevelStreaming,
      warnAboutReferences: Boolean,
      warnAboutRenaming: Boolean,
    ): Number

    @JsName("MakeLevelCurrent")
    public fun makeLevelCurrent(inStreamingLevel: LevelStreaming): Unit

    @JsName("K2_AddLevelToWorldWithTransform")
    public fun k2AddLevelToWorldWithTransform(
      world: World,
      levelPackageName: String,
      levelStreamingClass: UnrealEngineClass,
      levelTransform: Transform,
    ): LevelStreaming

    @JsName("K2_AddLevelToWorld")
    public fun k2AddLevelToWorld(
      world: World,
      levelPackageName: String,
      levelStreamingClass: UnrealEngineClass,
    ): LevelStreaming

    @JsName("GetLevels")
    public fun getLevels(world: World): Array<Level>

    @JsName("CreateNewStreamingLevel")
    public fun createNewStreamingLevel(
      levelStreamingClass: UnrealEngineClass,
      newLevelPath: String,
      moveSelectedActorsIntoNewLevel: Boolean,
    ): LevelStreaming

    @JsName("C")
    public fun copy(other: UObject): EditorLevelUtils

    @JsName("C")
    public fun copy(other: Any): EditorLevelUtils
  }
}

@JsName("ELoadLevelAtStartup")
public external object LoadLevelAtStartup {
  public var None: String

  public var ProjectDefault: String

  public var LastOpened: String

  @JsName("ELoadLevelAtStartup_MAX")
  public var Max: String
}

public open external class AutoReimportWildcard {
  public open var wildcard: String

  @JsName("bInclude")
  public open var include: Boolean

  public open fun clone(): AutoReimportWildcard

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AutoReimportWildcard

    @JsName("C")
    public fun copy(other: Any): AutoReimportWildcard
  }
}

public open external class AutoReimportDirectoryConfig {
  @JsName("SourceDirectory")
  public open var sourceDirectory: String

  @JsName("MountPoint")
  public open var mountPoint: String

  @JsName("Wildcards")
  public open var wildcards: Array<AutoReimportWildcard>

  public open fun clone(): AutoReimportDirectoryConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AutoReimportDirectoryConfig

    @JsName("C")
    public fun copy(other: Any): AutoReimportDirectoryConfig
  }
}

public open external class EditorLoadingSavingSettings(
  outer: UObject,
) : UObject {
  @JsName("LoadLevelAtStartup")
  public open var loadLevelAtStartup: String

  @JsName("bForceCompilationAtStartup")
  public open var forceCompilationAtStartup: Boolean

  @JsName("bRestoreOpenAssetTabsOnRestart")
  public open var restoreOpenAssetTabsOnRestart: Boolean

  @JsName("bEnableSourceControlCompatabilityCheck")
  public open var enableSourceControlCompatabilityCheck: Boolean

  @JsName("bMonitorContentDirectories")
  public open var monitorContentDirectories: Boolean

  @JsName("AutoReimportDirectories")
  public open var autoReimportDirectories: Array<String>

  @JsName("AutoReimportDirectorySettings")
  public open var autoReimportDirectorySettings: Array<AutoReimportDirectoryConfig>

  @JsName("AutoReimportThreshold")
  public open var autoReimportThreshold: Number

  @JsName("bAutoCreateAssets")
  public open var autoCreateAssets: Boolean

  @JsName("bAutoDeleteAssets")
  public open var autoDeleteAssets: Boolean

  @JsName("bDetectChangesOnStartup")
  public open var detectChangesOnStartup: Boolean

  @JsName("bPromptBeforeAutoImporting")
  public open var promptBeforeAutoImporting: Boolean

  @JsName("bDeleteSourceFilesWithAssets")
  public open var deleteSourceFilesWithAssets: Boolean

  @JsName("bAutoReimportTextures")
  public open var autoReimportTextures: Boolean

  @JsName("bAutoReimportCSV")
  public open var autoReimportCsv: Boolean

  @JsName("bDirtyMigratedBlueprints")
  public open var dirtyMigratedBlueprints: Boolean

  @JsName("bAutoSaveEnable")
  public open var autoSaveEnable: Boolean

  @JsName("bAutoSaveMaps")
  public open var autoSaveMaps: Boolean

  @JsName("bAutoSaveContent")
  public open var autoSaveContent: Boolean

  @JsName("AutoSaveTimeMinutes")
  public open var autoSaveTimeMinutes: Number

  @JsName("AutoSaveInteractionDelayInSeconds")
  public open var autoSaveInteractionDelayInSeconds: Number

  @JsName("AutoSaveWarningInSeconds")
  public open var autoSaveWarningInSeconds: Number

  @JsName("bAutomaticallyCheckoutOnAssetModification")
  public open var automaticallyCheckoutOnAssetModification: Boolean

  @JsName("bPromptForCheckoutOnAssetModification")
  public open var promptForCheckoutOnAssetModification: Boolean

  @JsName("bSCCAutoAddNewFiles")
  public open var sccAutoAddNewFiles: Boolean

  @JsName("bSCCUseGlobalSettings")
  public open var sccUseGlobalSettings: Boolean

  @JsName("TextDiffToolPath")
  public open var textDiffToolPath: FilePath

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorLoadingSavingSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorLoadingSavingSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorLoadingSavingSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorLoadingSavingSettings

    @JsName("C")
    public fun copy(other: UObject): EditorLoadingSavingSettings

    @JsName("C")
    public fun copy(other: Any): EditorLoadingSavingSettings
  }
}

public open external class EditorMiscSettings(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorMiscSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorMiscSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorMiscSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorMiscSettings

    @JsName("C")
    public fun copy(other: UObject): EditorMiscSettings

    @JsName("C")
    public fun copy(other: Any): EditorMiscSettings
  }
}

public open external class EditorNotifyObject(
  outer: UObject,
) : EditorAnimBaseObj {
  @JsName("Event")
  public open var event: AnimNotifyEvent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorNotifyObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorNotifyObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorNotifyObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorNotifyObject

    @JsName("C")
    public fun copy(other: UObject): EditorNotifyObject

    @JsName("C")
    public fun copy(other: Any): EditorNotifyObject
  }
}

public open external class EditorParentPlayerListObj(
  outer: UObject,
) : UObject {
  @JsName("Overrides")
  public open var overrides: Array<AnimParentNodeAssetOverride>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorParentPlayerListObj

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorParentPlayerListObj

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorParentPlayerListObj

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorParentPlayerListObj

    @JsName("C")
    public fun copy(other: UObject): EditorParentPlayerListObj

    @JsName("C")
    public fun copy(other: Any): EditorParentPlayerListObj
  }
}

@JsName("EEditorUserScreenPercentageModeOverride")
public external object EditorUserScreenPercentageModeOverride {
  public var ProjectDefault: String

  public var Manual: String

  public var BasedOnDisplayResolution: String

  @JsName("BasedOnDPIScale")
  public var BasedOnDpiScale: String

  @JsName("EEditorUserScreenPercentageModeOverride_MAX")
  public var Max: String
}

public open external class EditorPerformanceSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bShowFrameRateAndMemory")
  public open var showFrameRateAndMemory: Boolean

  @JsName("bThrottleCPUWhenNotForeground")
  public open var throttleCpuWhenNotForeground: Boolean

  @JsName("bDisableRealtimeViewportsInRemoteSessions")
  public open var disableRealtimeViewportsInRemoteSessions: Boolean

  @JsName("bMonitorEditorPerformance")
  public open var monitorEditorPerformance: Boolean

  @JsName("bEnableSharedDDCPerformanceNotifications")
  public open var enableSharedDdcPerformanceNotifications: Boolean

  @JsName("bEnableScalabilityWarningIndicator")
  public open var enableScalabilityWarningIndicator: Boolean

  @JsName("bDisplayHighDPIViewports")
  public open var displayHighDpiViewports: Boolean

  @JsName("bOverridePIEScreenPercentage")
  public open var overridePieScreenPercentage: Boolean

  @JsName("RealtimeScreenPercentageMode")
  public open var realtimeScreenPercentageMode: String

  @JsName("NonRealtimeScreenPercentageMode")
  public open var nonRealtimeScreenPercentageMode: String

  @JsName("bOverrideManualScreenPercentage")
  public open var overrideManualScreenPercentage: Boolean

  @JsName("ManualScreenPercentage")
  public open var manualScreenPercentage: Number

  @JsName("bOverrideMinViewportRenderingResolution")
  public open var overrideMinViewportRenderingResolution: Boolean

  @JsName("MinViewportRenderingResolution")
  public open var minViewportRenderingResolution: Number

  @JsName("bOverrideMaxViewportRenderingResolution")
  public open var overrideMaxViewportRenderingResolution: Boolean

  @JsName("MaxViewportRenderingResolution")
  public open var maxViewportRenderingResolution: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorPerformanceSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorPerformanceSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorPerformanceSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorPerformanceSettings

    @JsName("C")
    public fun copy(other: UObject): EditorPerformanceSettings

    @JsName("C")
    public fun copy(other: Any): EditorPerformanceSettings
  }
}

public open external class EditorPerProjectUserSettings(
  outer: UObject,
) : UObject {
  @JsName("bDisplayUIExtensionPoints")
  public open var displayUiExtensionPoints: Boolean

  @JsName("bDisplayDocumentationLink")
  public open var displayDocumentationLink: Boolean

  @JsName("bDisplayActionListItemRefIds")
  public open var displayActionListItemRefIds: Boolean

  @JsName("bAlwaysGatherBehaviorTreeDebuggerData")
  public open var alwaysGatherBehaviorTreeDebuggerData: Boolean

  @JsName("bDisplayBlackboardKeysInAlphabeticalOrder")
  public open var displayBlackboardKeysInAlphabeticalOrder: Boolean

  @JsName("bDisplayEngineVersionInBadge")
  public open var displayEngineVersionInBadge: Boolean

  @JsName("bUseSimplygonSwarm")
  public open var useSimplygonSwarm: Boolean

  @JsName("SimplygonServerIP")
  public open var simplygonServerIp: String

  @JsName("bEnableSwarmDebugging")
  public open var enableSwarmDebugging: Boolean

  @JsName("SimplygonSwarmDelay")
  public open var simplygonSwarmDelay: Any

  @JsName("SwarmNumOfConcurrentJobs")
  public open var swarmNumOfConcurrentJobs: Any

  @JsName("SwarmMaxUploadChunkSizeInMB")
  public open var swarmMaxUploadChunkSizeInMb: Any

  @JsName("SwarmIntermediateFolder")
  public open var swarmIntermediateFolder: String

  @JsName("bAutomaticallyHotReloadNewClasses")
  public open var automaticallyHotReloadNewClasses: Boolean

  @JsName("bShowCompilerLogOnCompileError")
  public open var showCompilerLogOnCompileError: Boolean

  @JsName("bKeepFbxNamespace")
  public open var keepFbxNamespace: Boolean

  @JsName("bShowImportDialogAtReimport")
  public open var showImportDialogAtReimport: Boolean

  @JsName("DataSourceFolder")
  public open var dataSourceFolder: DirectoryPath

  @JsName("bKeepAttachHierarchy")
  public open var keepAttachHierarchy: Boolean

  @JsName("bAnimationReimportWarnings")
  public open var animationReimportWarnings: Boolean

  @JsName("bUseCurvesForDistributions")
  public open var useCurvesForDistributions: Boolean

  @JsName("PropertyMatrix_NumberOfPasteOperationsBeforeWarning")
  public open var propertyMatrixNumberOfPasteOperationsBeforeWarning: Number

  @JsName("bSCSEditorShowGrid")
  public open var scsEditorShowGrid: Boolean

  @JsName("bSCSEditorShowFloor")
  public open var scsEditorShowFloor: Boolean

  @JsName("bGetAttentionOnUATCompletion")
  public open var getAttentionOnUatCompletion: Boolean

  @JsName("bAlwaysBuildUAT")
  public open var alwaysBuildUat: Boolean

  @JsName("SCSViewportCameraSpeed")
  public open var scsViewportCameraSpeed: Number

  @JsName("bAutoloadCheckedOutPackages")
  public open var autoloadCheckedOutPackages: Boolean

  @JsName("bSuppressFullyLoadPrompt")
  public open var suppressFullyLoadPrompt: Boolean

  @JsName("bAllowSelectTranslucent")
  public open var allowSelectTranslucent: Boolean

  @JsName("BlueprintFavorites")
  public open var blueprintFavorites: BlueprintPaletteFavorites

  @JsName("AssetViewerProfileIndex")
  public open var assetViewerProfileIndex: Number

  @JsName("AssetViewerProfileName")
  public open var assetViewerProfileName: String

  @JsName("PreviewFeatureLevel")
  public open var previewFeatureLevel: Number

  @JsName("PreviewPlatformName")
  public open var previewPlatformName: String

  @JsName("PreviewShaderFormatName")
  public open var previewShaderFormatName: String

  @JsName("bPreviewFeatureLevelActive")
  public open var previewFeatureLevelActive: Boolean

  @JsName("bPreviewFeatureLevelWasDefault")
  public open var previewFeatureLevelWasDefault: Boolean

  @JsName("PreviewDeviceProfileName")
  public open var previewDeviceProfileName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorPerProjectUserSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorPerProjectUserSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorPerProjectUserSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorPerProjectUserSettings

    @JsName("C")
    public fun copy(other: UObject): EditorPerProjectUserSettings

    @JsName("C")
    public fun copy(other: Any): EditorPerProjectUserSettings
  }
}

@JsName("ISMComponentDescriptor")
public open external class IsmComponentDescriptor {
  @JsName("Hash")
  public open var hash: Any

  @JsName("ComponentClass")
  public open var componentClass: UnrealEngineClass

  @JsName("StaticMesh")
  public open var staticMesh: StaticMesh

  @JsName("OverrideMaterials")
  public open var overrideMaterials: Array<MaterialInterface>

  @JsName("RuntimeVirtualTextures")
  public open var runtimeVirtualTextures: Array<RuntimeVirtualTexture>

  @JsName("Mobility")
  public open var mobility: String

  @JsName("VirtualTextureRenderPassType")
  public open var virtualTextureRenderPassType: String

  @JsName("LightmapType")
  public open var lightmapType: String

  @JsName("LightingChannels")
  public open var lightingChannels: LightingChannels

  @JsName("RayTracingGroupId")
  public open var rayTracingGroupId: Number

  @JsName("RayTracingGroupCullingPriority")
  public open var rayTracingGroupCullingPriority: String

  @JsName("bHasCustomNavigableGeometry")
  public open var hasCustomNavigableGeometry: String

  @JsName("CustomDepthStencilWriteMask")
  public open var customDepthStencilWriteMask: String

  @JsName("BodyInstance")
  public open var bodyInstance: BodyInstance

  @JsName("InstanceStartCullDistance")
  public open var instanceStartCullDistance: Number

  @JsName("InstanceEndCullDistance")
  public open var instanceEndCullDistance: Number

  @JsName("VirtualTextureCullMips")
  public open var virtualTextureCullMips: Number

  @JsName("TranslucencySortPriority")
  public open var translucencySortPriority: Number

  @JsName("OverriddenLightMapRes")
  public open var overriddenLightMapRes: Number

  @JsName("CustomDepthStencilValue")
  public open var customDepthStencilValue: Number

  @JsName("HLODBatchingPolicy")
  public open var hlodBatchingPolicy: String

  @JsName("bCastShadow")
  public open var castShadow: Boolean

  @JsName("bCastDynamicShadow")
  public open var castDynamicShadow: Boolean

  @JsName("bCastStaticShadow")
  public open var castStaticShadow: Boolean

  @JsName("bCastContactShadow")
  public open var castContactShadow: Boolean

  @JsName("bCastShadowAsTwoSided")
  public open var castShadowAsTwoSided: Boolean

  @JsName("bAffectDynamicIndirectLighting")
  public open var affectDynamicIndirectLighting: Boolean

  @JsName("bAffectDistanceFieldLighting")
  public open var affectDistanceFieldLighting: Boolean

  @JsName("bReceivesDecals")
  public open var receivesDecals: Boolean

  @JsName("bOverrideLightMapRes")
  public open var overrideLightMapRes: Boolean

  @JsName("bUseAsOccluder")
  public open var useAsOccluder: Boolean

  @JsName("bEnableDensityScaling")
  public open var enableDensityScaling: Boolean

  @JsName("bEnableDiscardOnLoad")
  public open var enableDiscardOnLoad: Boolean

  @JsName("bRenderCustomDepth")
  public open var renderCustomDepth: Boolean

  @JsName("bIncludeInHLOD")
  public open var includeInHlod: Boolean

  @JsName("bVisibleInRayTracing")
  public open var visibleInRayTracing: Boolean

  @JsName("bHiddenInGame")
  public open var hiddenInGame: Boolean

  @JsName("bIsEditorOnly")
  public open var isEditorOnly: Boolean

  @JsName("bVisible")
  public open var visible: Boolean

  @JsName("bConsiderForActorPlacementWhenHidden")
  public open var considerForActorPlacementWhenHidden: Boolean

  public open fun clone(): IsmComponentDescriptor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IsmComponentDescriptor

    @JsName("C")
    public fun copy(other: Any): IsmComponentDescriptor
  }
}

public open external class InstancedPlacemenClientSettings(
  outer: UObject,
) : UObject {
  @JsName("UpdateGuid")
  public open var updateGuid: Guid

  @JsName("ObjectPath")
  public open var objectPath: SoftObjectPath

  @JsName("InstancedComponentSettings")
  public open var instancedComponentSettings: IsmComponentDescriptor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InstancedPlacemenClientSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InstancedPlacemenClientSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InstancedPlacemenClientSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InstancedPlacemenClientSettings

    @JsName("C")
    public fun copy(other: UObject): InstancedPlacemenClientSettings

    @JsName("C")
    public fun copy(other: Any): InstancedPlacemenClientSettings
  }
}

public open external class EditorInstancedPlacementSettings(
  outer: UObject,
) : InstancedPlacemenClientSettings {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorInstancedPlacementSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorInstancedPlacementSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorInstancedPlacementSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorInstancedPlacementSettings

    @JsName("C")
    public fun copy(other: UObject): EditorInstancedPlacementSettings

    @JsName("C")
    public fun copy(other: Any): EditorInstancedPlacementSettings
  }
}

@JsName("EUnit")
public external object Unit {
  public var Micrometers: String

  public var Millimeters: String

  public var Centimeters: String

  public var Meters: String

  public var Kilometers: String

  public var Inches: String

  public var Feet: String

  public var Yards: String

  public var Miles: String

  public var Lightyears: String

  public var Degrees: String

  public var Radians: String

  public var CentimetersPerSecond: String

  public var MetersPerSecond: String

  public var KilometersPerHour: String

  public var MilesPerHour: String

  public var Celsius: String

  public var Farenheit: String

  public var Kelvin: String

  public var Micrograms: String

  public var Milligrams: String

  public var Grams: String

  public var Kilograms: String

  public var MetricTons: String

  public var Ounces: String

  public var Pounds: String

  public var Stones: String

  public var Newtons: String

  public var PoundsForce: String

  public var KilogramsForce: String

  public var Hertz: String

  public var Kilohertz: String

  public var Megahertz: String

  public var Gigahertz: String

  public var RevolutionsPerMinute: String

  public var Bytes: String

  public var Kilobytes: String

  public var Megabytes: String

  public var Gigabytes: String

  public var Terabytes: String

  public var Lumens: String

  public var Milliseconds: String

  public var Seconds: String

  public var Minutes: String

  public var Hours: String

  public var Days: String

  public var Months: String

  public var Years: String

  public var Multiplier: String

  public var Percentage: String

  public var Unspecified: String

  @JsName("EUnit_MAX")
  public var Max: String
}

@JsName("EReferenceViewerSettingMode")
public external object ReferenceViewerSettingMode {
  public var NoPreference: String

  public var ShowByDefault: String

  public var HideByDefault: String

  @JsName("EReferenceViewerSettingMode_MAX")
  public var Max: String
}

@JsName("EUnitDisplay")
public external object UnitDisplay {
  public var None: String

  public var Metric: String

  public var Imperial: String

  public var Invalid: String

  @JsName("EUnitDisplay_MAX")
  public var Max: String
}

@JsName("EDefaultLocationUnit")
public external object DefaultLocationUnit {
  public var Micrometers: String

  public var Millimeters: String

  public var Centimeters: String

  public var Meters: String

  public var Kilometers: String

  public var Inches: String

  public var Feet: String

  public var Yards: String

  public var Miles: String

  public var Invalid: String

  @JsName("EDefaultLocationUnit_MAX")
  public var Max: String
}

public open external class EditorProjectAppearanceSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bDisplayUnits")
  public open var displayUnits: Boolean

  @JsName("bDisplayUnitsOnComponentTransforms")
  public open var displayUnitsOnComponentTransforms: Boolean

  @JsName("DistanceUnits")
  public open var distanceUnits: Array<String>

  @JsName("MassUnits")
  public open var massUnits: Array<String>

  @JsName("TimeUnits")
  public open var timeUnits: Array<String>

  @JsName("AngleUnits")
  public open var angleUnits: String

  @JsName("SpeedUnits")
  public open var speedUnits: String

  @JsName("TemperatureUnits")
  public open var temperatureUnits: String

  @JsName("ForceUnits")
  public open var forceUnits: String

  @JsName("ShowSearchableNames")
  public open var showSearchableNames: String

  @JsName("ReferenceViewerDefaultMaxSearchBreadth")
  public open var referenceViewerDefaultMaxSearchBreadth: Number

  @JsName("UnitDisplay")
  public open var unitDisplay: String

  @JsName("DefaultInputUnits")
  public open var defaultInputUnits: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorProjectAppearanceSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorProjectAppearanceSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorProjectAppearanceSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorProjectAppearanceSettings

    @JsName("C")
    public fun copy(other: UObject): EditorProjectAppearanceSettings

    @JsName("C")
    public fun copy(other: Any): EditorProjectAppearanceSettings
  }
}

@JsName("ELevelEditor2DAxis")
public external object LevelEditor2DAxis {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  @JsName("ELevelEditor2DAxis_MAX")
  public var Max: String
}

@JsName("Mode2DLayer")
public open external class Mode2dLayer {
  @JsName("Name")
  public open var name: String

  @JsName("Depth")
  public open var depth: Number

  public open fun clone(): Mode2dLayer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Mode2dLayer

    @JsName("C")
    public fun copy(other: Any): Mode2dLayer
  }
}

@JsName("LevelEditor2DSettings")
public open external class LevelEditor2dSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bEnable2DWidget")
  public open var enable2dWidget: Boolean

  @JsName("bEnableSnapLayers")
  public open var enableSnapLayers: Boolean

  @JsName("SnapAxis")
  public open var snapAxis: String

  @JsName("SnapLayers")
  public open var snapLayers: Array<Mode2dLayer>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditor2dSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditor2dSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditor2dSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditor2dSettings

    @JsName("C")
    public fun copy(other: UObject): LevelEditor2dSettings

    @JsName("C")
    public fun copy(other: Any): LevelEditor2dSettings
  }
}

@JsName("EScreenPercentageMode")
public external object ScreenPercentageMode {
  public var Manual: String

  public var BasedOnDisplayResolution: String

  @JsName("BasedOnDPIScale")
  public var BasedOnDpiScale: String

  @JsName("EScreenPercentageMode_MAX")
  public var Max: String
}

public open external class EditorPerformanceProjectSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("RealtimeScreenPercentageMode")
  public open var realtimeScreenPercentageMode: String

  @JsName("NonRealtimeScreenPercentageMode")
  public open var nonRealtimeScreenPercentageMode: String

  @JsName("ManualScreenPercentage")
  public open var manualScreenPercentage: Number

  @JsName("MinViewportRenderingResolution")
  public open var minViewportRenderingResolution: Number

  @JsName("MaxViewportRenderingResolution")
  public open var maxViewportRenderingResolution: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorPerformanceProjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorPerformanceProjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorPerformanceProjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorPerformanceProjectSettings

    @JsName("C")
    public fun copy(other: UObject): EditorPerformanceProjectSettings

    @JsName("C")
    public fun copy(other: Any): EditorPerformanceProjectSettings
  }
}

@JsName("DDCProjectSettings")
public open external class DdcProjectSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("EnableWarnings")
  public open var enableWarnings: Boolean

  @JsName("RecommendEveryoneSetupAGlobalLocalDDCPath")
  public open var recommendEveryoneSetupAGlobalLocalDdcPath: Boolean

  @JsName("RecommendEveryoneSetupAGlobalSharedDDCPath")
  public open var recommendEveryoneSetupAGlobalSharedDdcPath: Boolean

  @JsName("RecommendEveryoneSetupAGlobalS3DDCPath")
  public open var recommendEveryoneSetupAGlobalS3ddcPath: Boolean

  @JsName("RecommendEveryoneEnableS3DDC")
  public open var recommendEveryoneEnableS3ddc: Boolean

  @JsName("RecommendEveryoneUseHordeStorage")
  public open var recommendEveryoneUseHordeStorage: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DdcProjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DdcProjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DdcProjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DdcProjectSettings

    @JsName("C")
    public fun copy(other: UObject): DdcProjectSettings

    @JsName("C")
    public fun copy(other: Any): DdcProjectSettings
  }
}

public open external class RecentProjectFile {
  @JsName("ProjectName")
  public open var projectName: String

  @JsName("LastOpenTime")
  public open var lastOpenTime: DateTime

  public open fun clone(): RecentProjectFile

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RecentProjectFile

    @JsName("C")
    public fun copy(other: Any): RecentProjectFile
  }
}

public open external class EditorSettings(
  outer: UObject,
) : UObject {
  @JsName("GlobalLocalDDCPath")
  public open var globalLocalDdcPath: DirectoryPath

  @JsName("GlobalSharedDDCPath")
  public open var globalSharedDdcPath: DirectoryPath

  @JsName("LocalDerivedDataCache")
  public open var localDerivedDataCache: DirectoryPath

  @JsName("SharedDerivedDataCache")
  public open var sharedDerivedDataCache: DirectoryPath

  @JsName("bEnableDDCNotifications")
  public open var enableDdcNotifications: Boolean

  @JsName("bNotifyUseHordeStorage")
  public open var notifyUseHordeStorage: Boolean

  @JsName("bNotifySetupDDCPath")
  public open var notifySetupDdcPath: Boolean

  @JsName("bNotifyEnableS3DD")
  public open var notifyEnableS3dd: Boolean

  @JsName("bEnableS3DDC")
  public open var enableS3ddc: Boolean

  @JsName("GlobalS3DDCPath")
  public open var globalS3ddcPath: DirectoryPath

  @JsName("bLoadTheMostRecentlyLoadedProjectAtStartup")
  public open var loadTheMostRecentlyLoadedProjectAtStartup: Boolean

  @JsName("bEditorAnalyticsEnabled")
  public open var editorAnalyticsEnabled: Boolean

  @JsName("RecentlyOpenedProjectFiles")
  public open var recentlyOpenedProjectFiles: Array<RecentProjectFile>

  @JsName("CreatedProjectPaths")
  public open var createdProjectPaths: Array<String>

  @JsName("bCopyStarterContentPreference")
  public open var copyStarterContentPreference: Boolean

  @JsName("CompletedSurveys")
  public open var completedSurveys: Array<Guid>

  @JsName("InProgressSurveys")
  public open var inProgressSurveys: Array<Guid>

  @JsName("AutoScalabilityWorkScaleAmount")
  public open var autoScalabilityWorkScaleAmount: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorSettings

    @JsName("C")
    public fun copy(other: UObject): EditorSettings

    @JsName("C")
    public fun copy(other: Any): EditorSettings
  }
}

public open external class EditorSkeletonNotifyObj(
  outer: UObject,
) : UObject {
  @JsName("Name")
  public open var name: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorSkeletonNotifyObj

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorSkeletonNotifyObj

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorSkeletonNotifyObj

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorSkeletonNotifyObj

    @JsName("C")
    public fun copy(other: UObject): EditorSkeletonNotifyObj

    @JsName("C")
    public fun copy(other: Any): EditorSkeletonNotifyObj
  }
}

public open external class EditorStaticMeshFactory(
  outer: UObject,
) : ActorFactoryStaticMesh {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorStaticMeshFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorStaticMeshFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorStaticMeshFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorStaticMeshFactory

    @JsName("C")
    public fun copy(other: UObject): EditorStaticMeshFactory

    @JsName("C")
    public fun copy(other: Any): EditorStaticMeshFactory
  }
}

public open external class EditorSubsystemBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorSubsystemBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorSubsystemBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorSubsystemBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorSubsystemBlueprintLibrary

    @JsName("GetEditorSubsystem")
    public fun getEditorSubsystem(`class`: UnrealEngineClass): EditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): EditorSubsystemBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): EditorSubsystemBlueprintLibrary
  }
}

public open external class EnumFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnumFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnumFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnumFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnumFactory

    @JsName("C")
    public fun copy(other: UObject): EnumFactory

    @JsName("C")
    public fun copy(other: Any): EnumFactory
  }
}

public open external class GatherTextCommandletBase(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GatherTextCommandletBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GatherTextCommandletBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GatherTextCommandletBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GatherTextCommandletBase

    @JsName("C")
    public fun copy(other: UObject): GatherTextCommandletBase

    @JsName("C")
    public fun copy(other: Any): GatherTextCommandletBase
  }
}

public open external class ExportDialogueScriptCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExportDialogueScriptCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExportDialogueScriptCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExportDialogueScriptCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExportDialogueScriptCommandlet

    @JsName("C")
    public fun copy(other: UObject): ExportDialogueScriptCommandlet

    @JsName("C")
    public fun copy(other: Any): ExportDialogueScriptCommandlet
  }
}

public open external class ExportPakDependenciesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExportPakDependenciesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExportPakDependenciesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExportPakDependenciesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExportPakDependenciesCommandlet

    @JsName("C")
    public fun copy(other: UObject): ExportPakDependenciesCommandlet

    @JsName("C")
    public fun copy(other: Any): ExportPakDependenciesCommandlet
  }
}

public open external class ExportTextContainer(
  outer: UObject,
) : UObject {
  @JsName("ExportText")
  public open var exportText: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExportTextContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExportTextContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExportTextContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExportTextContainer

    @JsName("C")
    public fun copy(other: UObject): ExportTextContainer

    @JsName("C")
    public fun copy(other: Any): ExportTextContainer
  }
}

public open external class ExternalActorsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExternalActorsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExternalActorsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExternalActorsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExternalActorsCommandlet

    @JsName("C")
    public fun copy(other: UObject): ExternalActorsCommandlet

    @JsName("C")
    public fun copy(other: Any): ExternalActorsCommandlet
  }
}

public open external class ExtractLocResCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExtractLocResCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExtractLocResCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExtractLocResCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExtractLocResCommandlet

    @JsName("C")
    public fun copy(other: UObject): ExtractLocResCommandlet

    @JsName("C")
    public fun copy(other: Any): ExtractLocResCommandlet
  }
}

public open external class FbxSceneImportData(
  outer: UObject,
) : UObject {
  @JsName("SourceFbxFile")
  public open var sourceFbxFile: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxSceneImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxSceneImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxSceneImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxSceneImportData

    @JsName("C")
    public fun copy(other: UObject): FbxSceneImportData

    @JsName("C")
    public fun copy(other: Any): FbxSceneImportData
  }
}

public open external class FbxAssetImportData(
  outer: UObject,
) : AssetImportData {
  @JsName("ImportTranslation")
  public open var importTranslation: Vector

  @JsName("ImportRotation")
  public open var importRotation: Rotator

  @JsName("ImportUniformScale")
  public open var importUniformScale: Number

  @JsName("bConvertScene")
  public open var convertScene: Boolean

  @JsName("bForceFrontXAxis")
  public open var forceFrontXAxis: Boolean

  @JsName("bConvertSceneUnit")
  public open var convertSceneUnit: Boolean

  @JsName("bImportAsScene")
  public open var importAsScene: Boolean

  @JsName("FbxSceneImportDataReference")
  public open var fbxSceneImportDataReference: FbxSceneImportData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxAssetImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxAssetImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxAssetImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxAssetImportData

    @JsName("C")
    public fun copy(other: UObject): FbxAssetImportData

    @JsName("C")
    public fun copy(other: Any): FbxAssetImportData
  }
}

@JsName("EFBXAnimationLengthImportType")
public external object FBXAnimationLengthImportType {
  @JsName("FBXALIT_ExportedTime")
  public var ExportedTime: String

  @JsName("FBXALIT_AnimatedKey")
  public var AnimatedKey: String

  @JsName("FBXALIT_SetRange")
  public var SetRange: String

  @JsName("FBXALIT_MAX")
  public var Max: String
}

public open external class FbxAnimSequenceImportData(
  outer: UObject,
) : FbxAssetImportData {
  @JsName("bImportMeshesInBoneHierarchy")
  public open var importMeshesInBoneHierarchy: Boolean

  @JsName("AnimationLength")
  public open var animationLength: String

  @JsName("StartFrame")
  public open var startFrame: Number

  @JsName("EndFrame")
  public open var endFrame: Number

  @JsName("FrameImportRange")
  public open var frameImportRange: Int32Interval

  @JsName("bUseDefaultSampleRate")
  public open var useDefaultSampleRate: Boolean

  @JsName("CustomSampleRate")
  public open var customSampleRate: Number

  @JsName("SourceAnimationName")
  public open var sourceAnimationName: String

  @JsName("bImportCustomAttribute")
  public open var importCustomAttribute: Boolean

  @JsName("bDeleteExistingCustomAttributeCurves")
  public open var deleteExistingCustomAttributeCurves: Boolean

  @JsName("bDeleteExistingNonCurveCustomAttributes")
  public open var deleteExistingNonCurveCustomAttributes: Boolean

  @JsName("bImportBoneTracks")
  public open var importBoneTracks: Boolean

  @JsName("bSetMaterialDriveParameterOnCustomAttribute")
  public open var setMaterialDriveParameterOnCustomAttribute: Boolean

  @JsName("MaterialCurveSuffixes")
  public open var materialCurveSuffixes: Array<String>

  @JsName("bRemoveRedundantKeys")
  public open var removeRedundantKeys: Boolean

  @JsName("bDeleteExistingMorphTargetCurves")
  public open var deleteExistingMorphTargetCurves: Boolean

  @JsName("bDoNotImportCurveWithZero")
  public open var doNotImportCurveWithZero: Boolean

  @JsName("bPreserveLocalTransform")
  public open var preserveLocalTransform: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxAnimSequenceImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxAnimSequenceImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxAnimSequenceImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxAnimSequenceImportData

    @JsName("C")
    public fun copy(other: UObject): FbxAnimSequenceImportData

    @JsName("C")
    public fun copy(other: Any): FbxAnimSequenceImportData
  }
}

@JsName("EFBXTestPlanActionType")
public external object FBXTestPlanActionType {
  public var Import: String

  public var Reimport: String

  @JsName("AddLOD")
  public var AddLod: String

  @JsName("ReimportLOD")
  public var ReimportLod: String

  public var ImportReload: String

  public var AddAlternateSkinnig: String

  @JsName("EFBXTestPlanActionType_MAX")
  public var Max: String
}

@JsName("EFBXExpectedResultPreset")
public external object FBXExpectedResultPreset {
  @JsName("Error_Number")
  public var ErrorNumber: String

  @JsName("Warning_Number")
  public var WarningNumber: String

  @JsName("Created_Staticmesh_Number")
  public var CreatedStaticmeshNumber: String

  @JsName("Created_Skeletalmesh_Number")
  public var CreatedSkeletalmeshNumber: String

  @JsName("Materials_Created_Number")
  public var MaterialsCreatedNumber: String

  @JsName("Material_Slot_Imported_Name")
  public var MaterialSlotImportedName: String

  @JsName("Vertex_Number")
  public var VertexNumber: String

  @JsName("Lod_Number")
  public var LodNumber: String

  @JsName("Vertex_Number_Lod")
  public var VertexNumberLod: String

  @JsName("Mesh_Materials_Number")
  public var MeshMaterialsNumber: String

  @JsName("Mesh_LOD_Section_Number")
  public var MeshLodSectionNumber: String

  @JsName("Mesh_LOD_Section_Vertex_Number")
  public var MeshLodSectionVertexNumber: String

  @JsName("Mesh_LOD_Section_Triangle_Number")
  public var MeshLodSectionTriangleNumber: String

  @JsName("Mesh_LOD_Section_Material_Name")
  public var MeshLodSectionMaterialName: String

  @JsName("Mesh_LOD_Section_Material_Index")
  public var MeshLodSectionMaterialIndex: String

  @JsName("Mesh_LOD_Section_Material_Imported_Name")
  public var MeshLodSectionMaterialImportedName: String

  @JsName("Mesh_LOD_Vertex_Position")
  public var MeshLodVertexPosition: String

  @JsName("Mesh_LOD_Vertex_Normal")
  public var MeshLodVertexNormal: String

  @JsName("LOD_UV_Channel_Number")
  public var LoduvChannelNumber: String

  @JsName("Bone_Number")
  public var BoneNumber: String

  @JsName("Bone_Position")
  public var BonePosition: String

  @JsName("Animation_Frame_Number")
  public var AnimationFrameNumber: String

  @JsName("Animation_Length")
  public var AnimationLength: String

  @JsName("Animation_CustomCurve_KeyValue")
  public var AnimationCustomCurveKeyValue: String

  @JsName("Animation_CustomCurve_KeyArriveTangent")
  public var AnimationCustomCurveKeyArriveTangent: String

  @JsName("Animation_CustomCurve_KeyLeaveTangent")
  public var AnimationCustomCurveKeyLeaveTangent: String

  @JsName("Skin_By_Bone_Vertex_Number")
  public var SkinByBoneVertexNumber: String

  @JsName("Animation_CustomCurve_KeyArriveTangentWeight")
  public var AnimationCustomCurveKeyArriveTangentWeight: String

  @JsName("Animation_CustomCurve_KeyLeaveTangentWeight")
  public var AnimationCustomCurveKeyLeaveTangentWeight: String

  @JsName("EFBXExpectedResultPreset_MAX")
  public var Max: String
}

public open external class FbxTestPlanExpectedResult {
  @JsName("ExpectedPresetsType")
  public open var expectedPresetsType: String

  @JsName("ExpectedPresetsDataInteger")
  public open var expectedPresetsDataInteger: Array<Number>

  @JsName("ExpectedPresetsDataFloat")
  public open var expectedPresetsDataFloat: Array<Number>

  @JsName("ExpectedPresetsDataDouble")
  public open var expectedPresetsDataDouble: Array<Any>

  @JsName("ExpectedPresetsDataString")
  public open var expectedPresetsDataString: Array<String>

  public open fun clone(): FbxTestPlanExpectedResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FbxTestPlanExpectedResult

    @JsName("C")
    public fun copy(other: Any): FbxTestPlanExpectedResult
  }
}

@JsName("EFBXImportType")
public external object FBXImportType {
  @JsName("FBXIT_StaticMesh")
  public var StaticMesh: String

  @JsName("FBXIT_SkeletalMesh")
  public var SkeletalMesh: String

  @JsName("FBXIT_Animation")
  public var Animation: String

  @JsName("FBXIT_MAX")
  public var Max: String
}

@JsName("EFBXNormalImportMethod")
public external object FBXNormalImportMethod {
  @JsName("FBXNIM_ComputeNormals")
  public var ComputeNormals: String

  @JsName("FBXNIM_ImportNormals")
  public var ImportNormals: String

  @JsName("FBXNIM_ImportNormalsAndTangents")
  public var ImportNormalsAndTangents: String

  @JsName("FBXNIM_MAX")
  public var Max: String
}

@JsName("EFBXNormalGenerationMethod")
public external object FBXNormalGenerationMethod {
  public var BuiltIn: String

  public var MikkTSpace: String

  @JsName("EFBXNormalGenerationMethod_MAX")
  public var Max: String
}

public open external class ImportMeshLodSectionsData {
  @JsName("SectionOriginalMaterialName")
  public open var sectionOriginalMaterialName: Array<String>

  public open fun clone(): ImportMeshLodSectionsData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ImportMeshLodSectionsData

    @JsName("C")
    public fun copy(other: Any): ImportMeshLodSectionsData
  }
}

public open external class FbxMeshImportData(
  outer: UObject,
) : FbxAssetImportData {
  @JsName("bTransformVertexToAbsolute")
  public open var transformVertexToAbsolute: Boolean

  @JsName("bBakePivotInVertex")
  public open var bakePivotInVertex: Boolean

  @JsName("bImportMeshLODs")
  public open var importMeshLoDs: Boolean

  @JsName("NormalImportMethod")
  public open var normalImportMethod: String

  @JsName("NormalGenerationMethod")
  public open var normalGenerationMethod: String

  @JsName("bComputeWeightedNormals")
  public open var computeWeightedNormals: Boolean

  @JsName("bReorderMaterialToFbxOrder")
  public open var reorderMaterialToFbxOrder: Boolean

  @JsName("ImportMaterialOriginalNameData")
  public open var importMaterialOriginalNameData: Array<String>

  @JsName("ImportMeshLodData")
  public open var importMeshLodData: Array<ImportMeshLodSectionsData>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxMeshImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxMeshImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxMeshImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxMeshImportData

    @JsName("C")
    public fun copy(other: UObject): FbxMeshImportData

    @JsName("C")
    public fun copy(other: Any): FbxMeshImportData
  }
}

@JsName("EVertexColorImportOption")
public external object VertexColorImportOption {
  public var Replace: String

  public var Ignore: String

  public var Override: String

  @JsName("EVertexColorImportOption_MAX")
  public var Max: String
}

public open external class FbxStaticMeshImportData(
  outer: UObject,
) : FbxMeshImportData {
  @JsName("StaticMeshLODGroup")
  public open var staticMeshLodGroup: String

  @JsName("VertexColorImportOption")
  public open var vertexColorImportOption: String

  @JsName("VertexOverrideColor")
  public open var vertexOverrideColor: Color

  @JsName("bRemoveDegenerates")
  public open var removeDegenerates: Boolean

  @JsName("bBuildReversedIndexBuffer")
  public open var buildReversedIndexBuffer: Boolean

  @JsName("bBuildNanite")
  public open var buildNanite: Boolean

  @JsName("bGenerateLightmapUVs")
  public open var generateLightmapUVs: Boolean

  @JsName("bOneConvexHullPerUCX")
  public open var oneConvexHullPerUcx: Boolean

  @JsName("bAutoGenerateCollision")
  public open var autoGenerateCollision: Boolean

  @JsName("bCombineMeshes")
  public open var combineMeshes: Boolean

  @JsName("DistanceFieldResolutionScale")
  public open var distanceFieldResolutionScale: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxStaticMeshImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxStaticMeshImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxStaticMeshImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxStaticMeshImportData

    @JsName("C")
    public fun copy(other: UObject): FbxStaticMeshImportData

    @JsName("C")
    public fun copy(other: Any): FbxStaticMeshImportData
  }
}

@JsName("EFBXImportContentType")
public external object FBXImportContentType {
  @JsName("FBXICT_All")
  public var All: String

  @JsName("FBXICT_Geometry")
  public var Geometry: String

  @JsName("FBXICT_SkinningWeights")
  public var SkinningWeights: String

  @JsName("FBXICT_MAX")
  public var Max: String
}

public open external class FbxSkeletalMeshImportData(
  outer: UObject,
) : FbxMeshImportData {
  @JsName("ImportContentType")
  public open var importContentType: String

  @JsName("LastImportContentType")
  public open var lastImportContentType: String

  @JsName("VertexColorImportOption")
  public open var vertexColorImportOption: String

  @JsName("VertexOverrideColor")
  public open var vertexOverrideColor: Color

  @JsName("bUpdateSkeletonReferencePose")
  public open var updateSkeletonReferencePose: Boolean

  @JsName("bUseT0AsRefPose")
  public open var useT0AsRefPose: Boolean

  @JsName("bPreserveSmoothingGroups")
  public open var preserveSmoothingGroups: Boolean

  @JsName("bImportMeshesInBoneHierarchy")
  public open var importMeshesInBoneHierarchy: Boolean

  @JsName("bImportMorphTargets")
  public open var importMorphTargets: Boolean

  @JsName("ThresholdPosition")
  public open var thresholdPosition: Number

  @JsName("ThresholdTangentNormal")
  public open var thresholdTangentNormal: Number

  @JsName("ThresholdUV")
  public open var thresholdUv: Number

  @JsName("MorphThresholdPosition")
  public open var morphThresholdPosition: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxSkeletalMeshImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxSkeletalMeshImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxSkeletalMeshImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxSkeletalMeshImportData

    @JsName("C")
    public fun copy(other: UObject): FbxSkeletalMeshImportData

    @JsName("C")
    public fun copy(other: Any): FbxSkeletalMeshImportData
  }
}

@JsName("EMaterialSearchLocation")
public external object MaterialSearchLocation {
  public var Local: String

  public var UnderParent: String

  public var UnderRoot: String

  public var AllAssets: String

  public var DoNotSearch: String

  @JsName("EMaterialSearchLocation_MAX")
  public var Max: String
}

public open external class FbxTextureImportData(
  outer: UObject,
) : FbxAssetImportData {
  @JsName("bInvertNormalMaps")
  public open var invertNormalMaps: Boolean

  @JsName("MaterialSearchLocation")
  public open var materialSearchLocation: String

  @JsName("BaseMaterialName")
  public open var baseMaterialName: SoftObjectPath

  @JsName("BaseColorName")
  public open var baseColorName: String

  @JsName("BaseDiffuseTextureName")
  public open var baseDiffuseTextureName: String

  @JsName("BaseNormalTextureName")
  public open var baseNormalTextureName: String

  @JsName("BaseEmissiveColorName")
  public open var baseEmissiveColorName: String

  @JsName("BaseEmmisiveTextureName")
  public open var baseEmmisiveTextureName: String

  @JsName("BaseSpecularTextureName")
  public open var baseSpecularTextureName: String

  @JsName("BaseOpacityTextureName")
  public open var baseOpacityTextureName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxTextureImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxTextureImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxTextureImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxTextureImportData

    @JsName("C")
    public fun copy(other: UObject): FbxTextureImportData

    @JsName("C")
    public fun copy(other: Any): FbxTextureImportData
  }
}

@JsName("FbxImportUI")
public open external class FbxImportUi(
  outer: UObject,
) : UObject {
  @JsName("bIsObjImport")
  public open var isObjImport: Boolean

  @JsName("OriginalImportType")
  public open var originalImportType: String

  @JsName("MeshTypeToImport")
  public open var meshTypeToImport: String

  @JsName("bOverrideFullName")
  public open var overrideFullName: Boolean

  @JsName("bImportAsSkeletal")
  public open var importAsSkeletal: Boolean

  @JsName("bImportMesh")
  public open var importMesh: Boolean

  @JsName("Skeleton")
  public open var skeleton: Skeleton

  @JsName("bCreatePhysicsAsset")
  public open var createPhysicsAsset: Boolean

  @JsName("PhysicsAsset")
  public open var physicsAsset: PhysicsAsset

  @JsName("bAutoComputeLodDistances")
  public open var autoComputeLodDistances: Boolean

  @JsName("LodDistance0")
  public open var lodDistance0: Number

  @JsName("LodDistance1")
  public open var lodDistance1: Number

  @JsName("LodDistance2")
  public open var lodDistance2: Number

  @JsName("LodDistance3")
  public open var lodDistance3: Number

  @JsName("LodDistance4")
  public open var lodDistance4: Number

  @JsName("LodDistance5")
  public open var lodDistance5: Number

  @JsName("LodDistance6")
  public open var lodDistance6: Number

  @JsName("LodDistance7")
  public open var lodDistance7: Number

  @JsName("MinimumLodNumber")
  public open var minimumLodNumber: Number

  @JsName("LodNumber")
  public open var lodNumber: Number

  @JsName("bImportAnimations")
  public open var importAnimations: Boolean

  @JsName("OverrideAnimationName")
  public open var overrideAnimationName: String

  @JsName("bImportRigidMesh")
  public open var importRigidMesh: Boolean

  @JsName("bImportMaterials")
  public open var importMaterials: Boolean

  @JsName("bImportTextures")
  public open var importTextures: Boolean

  @JsName("bResetToFbxOnMaterialConflict")
  public open var resetToFbxOnMaterialConflict: Boolean

  @JsName("StaticMeshImportData")
  public open var staticMeshImportData: FbxStaticMeshImportData

  @JsName("SkeletalMeshImportData")
  public open var skeletalMeshImportData: FbxSkeletalMeshImportData

  @JsName("AnimSequenceImportData")
  public open var animSequenceImportData: FbxAnimSequenceImportData

  @JsName("TextureImportData")
  public open var textureImportData: FbxTextureImportData

  @JsName("bAutomatedImportShouldDetectType")
  public open var automatedImportShouldDetectType: Boolean

  @JsName("FileVersion")
  public open var fileVersion: String

  @JsName("FileCreator")
  public open var fileCreator: String

  @JsName("FileCreatorApplication")
  public open var fileCreatorApplication: String

  @JsName("FileUnits")
  public open var fileUnits: String

  @JsName("FileAxisDirection")
  public open var fileAxisDirection: String

  @JsName("FileSampleRate")
  public open var fileSampleRate: String

  @JsName("AnimStartFrame")
  public open var animStartFrame: String

  @JsName("AnimEndFrame")
  public open var animEndFrame: String

  @JsName("ResetToDefault")
  public open fun resetToDefault(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxImportUi

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxImportUi

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxImportUi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxImportUi

    @JsName("C")
    public fun copy(other: UObject): FbxImportUi

    @JsName("C")
    public fun copy(other: Any): FbxImportUi
  }
}

public open external class FbxTestPlan(
  outer: UObject,
) : UObject {
  @JsName("TestPlanName")
  public open var testPlanName: String

  @JsName("Action")
  public open var action: String

  @JsName("LODIndex")
  public open var lodIndex: Number

  @JsName("bDeleteFolderAssets")
  public open var deleteFolderAssets: Boolean

  @JsName("ExpectedResult")
  public open var expectedResult: Array<FbxTestPlanExpectedResult>

  @JsName("ImportUI")
  public open var importUi: FbxImportUi

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxTestPlan

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxTestPlan

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxTestPlan

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxTestPlan

    @JsName("C")
    public fun copy(other: UObject): FbxTestPlan

    @JsName("C")
    public fun copy(other: Any): FbxTestPlan
  }
}

public open external class FbxFactory(
  outer: UObject,
) : Factory {
  @JsName("ImportUI")
  public open var importUi: FbxImportUi

  @JsName("OriginalImportUI")
  public open var originalImportUi: FbxImportUi

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxFactory

    @JsName("C")
    public fun copy(other: UObject): FbxFactory

    @JsName("C")
    public fun copy(other: Any): FbxFactory
  }
}

public open external class SceneImportFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SceneImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SceneImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SceneImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SceneImportFactory

    @JsName("C")
    public fun copy(other: UObject): SceneImportFactory

    @JsName("C")
    public fun copy(other: Any): SceneImportFactory
  }
}

@JsName("EFBXSceneOptionsCreateHierarchyType")
public external object FBXSceneOptionsCreateHierarchyType {
  @JsName("FBXSOCHT_CreateLevelActors")
  public var CreateLevelActors: String

  @JsName("FBXSOCHT_CreateActorComponents")
  public var CreateActorComponents: String

  @JsName("FBXSOCHT_CreateBlueprint")
  public var CreateBlueprint: String

  @JsName("FBXSOCHT_MAX")
  public var Max: String
}

public open external class FbxSceneImportOptions(
  outer: UObject,
) : UObject {
  @JsName("bCreateContentFolderHierarchy")
  public open var createContentFolderHierarchy: Boolean

  @JsName("bImportAsDynamic")
  public open var importAsDynamic: Boolean

  @JsName("HierarchyType")
  public open var hierarchyType: String

  @JsName("bForceFrontXAxis")
  public open var forceFrontXAxis: Boolean

  @JsName("ImportTranslation")
  public open var importTranslation: Vector

  @JsName("ImportRotation")
  public open var importRotation: Rotator

  @JsName("ImportUniformScale")
  public open var importUniformScale: Number

  @JsName("bTransformVertexToAbsolute")
  public open var transformVertexToAbsolute: Boolean

  @JsName("bBakePivotInVertex")
  public open var bakePivotInVertex: Boolean

  @JsName("bImportStaticMeshLODs")
  public open var importStaticMeshLoDs: Boolean

  @JsName("bImportSkeletalMeshLODs")
  public open var importSkeletalMeshLoDs: Boolean

  @JsName("bInvertNormalMaps")
  public open var invertNormalMaps: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxSceneImportOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxSceneImportOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxSceneImportOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxSceneImportOptions

    @JsName("C")
    public fun copy(other: UObject): FbxSceneImportOptions

    @JsName("C")
    public fun copy(other: Any): FbxSceneImportOptions
  }
}

@JsName("EFbxSceneVertexColorImportOption")
public external object FbxSceneVertexColorImportOption {
  public var Replace: String

  public var Ignore: String

  public var Override: String

  @JsName("EFbxSceneVertexColorImportOption_MAX")
  public var Max: String
}

@JsName("EFBXSceneNormalImportMethod")
public external object FBXSceneNormalImportMethod {
  @JsName("FBXSceneNIM_ComputeNormals")
  public var ComputeNormals: String

  @JsName("FBXSceneNIM_ImportNormals")
  public var ImportNormals: String

  @JsName("FBXSceneNIM_ImportNormalsAndTangents")
  public var ImportNormalsAndTangents: String

  @JsName("FBXSceneNIM_MAX")
  public var Max: String
}

@JsName("EFBXSceneNormalGenerationMethod")
public external object FBXSceneNormalGenerationMethod {
  public var BuiltIn: String

  public var MikkTSpace: String

  @JsName("EFBXSceneNormalGenerationMethod_MAX")
  public var Max: String
}

public open external class FbxSceneImportOptionsStaticMesh(
  outer: UObject,
) : UObject {
  @JsName("StaticMeshLODGroup")
  public open var staticMeshLodGroup: String

  @JsName("bAutoGenerateCollision")
  public open var autoGenerateCollision: Boolean

  @JsName("VertexColorImportOption")
  public open var vertexColorImportOption: String

  @JsName("VertexOverrideColor")
  public open var vertexOverrideColor: Color

  @JsName("bRemoveDegenerates")
  public open var removeDegenerates: Boolean

  @JsName("bBuildReversedIndexBuffer")
  public open var buildReversedIndexBuffer: Boolean

  @JsName("bGenerateLightmapUVs")
  public open var generateLightmapUVs: Boolean

  @JsName("bOneConvexHullPerUCX")
  public open var oneConvexHullPerUcx: Boolean

  @JsName("NormalImportMethod")
  public open var normalImportMethod: String

  @JsName("NormalGenerationMethod")
  public open var normalGenerationMethod: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxSceneImportOptionsStaticMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxSceneImportOptionsStaticMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxSceneImportOptionsStaticMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxSceneImportOptionsStaticMesh

    @JsName("C")
    public fun copy(other: UObject): FbxSceneImportOptionsStaticMesh

    @JsName("C")
    public fun copy(other: Any): FbxSceneImportOptionsStaticMesh
  }
}

public open external class FbxSceneImportOptionsSkeletalMesh(
  outer: UObject,
) : UObject {
  @JsName("bUpdateSkeletonReferencePose")
  public open var updateSkeletonReferencePose: Boolean

  @JsName("bCreatePhysicsAsset")
  public open var createPhysicsAsset: Boolean

  @JsName("bUseT0AsRefPose")
  public open var useT0AsRefPose: Boolean

  @JsName("bPreserveSmoothingGroups")
  public open var preserveSmoothingGroups: Boolean

  @JsName("bImportMeshesInBoneHierarchy")
  public open var importMeshesInBoneHierarchy: Boolean

  @JsName("bImportMorphTargets")
  public open var importMorphTargets: Boolean

  @JsName("ThresholdPosition")
  public open var thresholdPosition: Number

  @JsName("ThresholdTangentNormal")
  public open var thresholdTangentNormal: Number

  @JsName("ThresholdUV")
  public open var thresholdUv: Number

  @JsName("MorphThresholdPosition")
  public open var morphThresholdPosition: Number

  @JsName("bImportAnimations")
  public open var importAnimations: Boolean

  @JsName("AnimationLength")
  public open var animationLength: String

  @JsName("FrameImportRange")
  public open var frameImportRange: Int32Interval

  @JsName("bUseDefaultSampleRate")
  public open var useDefaultSampleRate: Boolean

  @JsName("CustomSampleRate")
  public open var customSampleRate: Number

  @JsName("bImportCustomAttribute")
  public open var importCustomAttribute: Boolean

  @JsName("bDeleteExistingCustomAttributeCurves")
  public open var deleteExistingCustomAttributeCurves: Boolean

  @JsName("bDeleteExistingNonCurveCustomAttributes")
  public open var deleteExistingNonCurveCustomAttributes: Boolean

  @JsName("bPreserveLocalTransform")
  public open var preserveLocalTransform: Boolean

  @JsName("bDeleteExistingMorphTargetCurves")
  public open var deleteExistingMorphTargetCurves: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxSceneImportOptionsSkeletalMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxSceneImportOptionsSkeletalMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxSceneImportOptionsSkeletalMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxSceneImportOptionsSkeletalMesh

    @JsName("C")
    public fun copy(other: UObject): FbxSceneImportOptionsSkeletalMesh

    @JsName("C")
    public fun copy(other: Any): FbxSceneImportOptionsSkeletalMesh
  }
}

public open external class FbxSceneImportFactory(
  outer: UObject,
) : SceneImportFactory {
  @JsName("SceneImportOptions")
  public open var sceneImportOptions: FbxSceneImportOptions

  @JsName("SceneImportOptionsStaticMesh")
  public open var sceneImportOptionsStaticMesh: FbxSceneImportOptionsStaticMesh

  @JsName("SceneImportOptionsSkeletalMesh")
  public open var sceneImportOptionsSkeletalMesh: FbxSceneImportOptionsSkeletalMesh

  @JsName("StaticMeshImportData")
  public open var staticMeshImportData: FbxStaticMeshImportData

  @JsName("SkeletalMeshImportData")
  public open var skeletalMeshImportData: FbxSkeletalMeshImportData

  @JsName("AnimSequenceImportData")
  public open var animSequenceImportData: FbxAnimSequenceImportData

  @JsName("TextureImportData")
  public open var textureImportData: FbxTextureImportData

  @JsName("ReimportData")
  public open var reimportData: FbxSceneImportData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxSceneImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxSceneImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxSceneImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxSceneImportFactory

    @JsName("C")
    public fun copy(other: UObject): FbxSceneImportFactory

    @JsName("C")
    public fun copy(other: Any): FbxSceneImportFactory
  }
}

@JsName("EReloadPackagesInteractionMode")
public external object ReloadPackagesInteractionMode {
  public var Interactive: String

  public var AssumePositive: String

  public var AssumeNegative: String

  @JsName("EReloadPackagesInteractionMode_MAX")
  public var Max: String
}

@JsName("T$707")
public external interface Object707 {
  @JsName("bOutAnyPackagesUnloaded")
  public var outAnyPackagesUnloaded: Boolean

  @JsName("OutErrorMessage")
  public var outErrorMessage: String
}

@JsName("T$708")
public external interface Object708 {
  @JsName("bOutAnyPackagesReloaded")
  public var outAnyPackagesReloaded: Boolean

  @JsName("OutErrorMessage")
  public var outErrorMessage: String
}

@JsName("T$709")
public external interface OutDirtyPackagesProvider {
  @JsName("OutDirtyPackages")
  public var outDirtyPackages: Array<Package>
}

public open external class EditorLoadingAndSavingUtils(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorLoadingAndSavingUtils

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorLoadingAndSavingUtils

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorLoadingAndSavingUtils

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorLoadingAndSavingUtils

    @JsName("UnloadPackages")
    public fun unloadPackages(
      packagesToUnload: Array<Package>,
      outAnyPackagesUnloaded: Boolean,
      outErrorMessage: String,
    ): Object707

    @JsName("SavePackagesWithDialog")
    public fun savePackagesWithDialog(packagesToSave: Array<Package>, onlyDirty: Boolean): Boolean

    @JsName("SavePackages")
    public fun savePackages(packagesToSave: Array<Package>, onlyDirty: Boolean): Boolean

    @JsName("SaveMap")
    public fun saveMap(world: World, assetPath: String): Boolean

    @JsName("SaveDirtyPackagesWithDialog")
    public fun saveDirtyPackagesWithDialog(saveMapPackages: Boolean, saveContentPackages: Boolean):
        Boolean

    @JsName("SaveDirtyPackages")
    public fun saveDirtyPackages(saveMapPackages: Boolean, saveContentPackages: Boolean): Boolean

    @JsName("SaveCurrentLevel")
    public fun saveCurrentLevel(): Boolean

    @JsName("ReloadPackages")
    public fun reloadPackages(
      packagesToReload: Array<Package>,
      outAnyPackagesReloaded: Boolean,
      outErrorMessage: String,
      interactionMode: String,
    ): Object708

    @JsName("NewMapFromTemplate")
    public fun newMapFromTemplate(pathToTemplateLevel: String, saveExistingMap: Boolean): World

    @JsName("NewBlankMap")
    public fun newBlankMap(saveExistingMap: Boolean): World

    @JsName("LoadMapWithDialog")
    public fun loadMapWithDialog(): World

    @JsName("LoadMap")
    public fun loadMap(filename: String): World

    @JsName("ImportScene")
    public fun importScene(filename: String): Unit

    @JsName("GetDirtyMapPackages")
    public fun getDirtyMapPackages(outDirtyPackages: Array<Package>): OutDirtyPackagesProvider

    @JsName("GetDirtyContentPackages")
    public fun getDirtyContentPackages(outDirtyPackages: Array<Package>): OutDirtyPackagesProvider

    @JsName("ExportScene")
    public fun exportScene(exportSelectedActorsOnly: Boolean): Unit

    @JsName("C")
    public fun copy(other: UObject): EditorLoadingAndSavingUtils

    @JsName("C")
    public fun copy(other: Any): EditorLoadingAndSavingUtils
  }
}

public open external class FileServerCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FileServerCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FileServerCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FileServerCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FileServerCommandlet

    @JsName("C")
    public fun copy(other: UObject): FileServerCommandlet

    @JsName("C")
    public fun copy(other: Any): FileServerCommandlet
  }
}

public open external class FixConflictingLocalizationKeysCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FixConflictingLocalizationKeysCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FixConflictingLocalizationKeysCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FixConflictingLocalizationKeysCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FixConflictingLocalizationKeysCommandlet

    @JsName("C")
    public fun copy(other: UObject): FixConflictingLocalizationKeysCommandlet

    @JsName("C")
    public fun copy(other: Any): FixConflictingLocalizationKeysCommandlet
  }
}

public open external class ResavePackagesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ResavePackagesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ResavePackagesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ResavePackagesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ResavePackagesCommandlet

    @JsName("C")
    public fun copy(other: UObject): ResavePackagesCommandlet

    @JsName("C")
    public fun copy(other: Any): ResavePackagesCommandlet
  }
}

public open external class FixupNeedsLoadForEditorGameCommandlet(
  outer: UObject,
) : ResavePackagesCommandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FixupNeedsLoadForEditorGameCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FixupNeedsLoadForEditorGameCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FixupNeedsLoadForEditorGameCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FixupNeedsLoadForEditorGameCommandlet

    @JsName("C")
    public fun copy(other: UObject): FixupNeedsLoadForEditorGameCommandlet

    @JsName("C")
    public fun copy(other: Any): FixupNeedsLoadForEditorGameCommandlet
  }
}

public open external class FontFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FontFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FontFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FontFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FontFactory

    @JsName("C")
    public fun copy(other: UObject): FontFactory

    @JsName("C")
    public fun copy(other: Any): FontFactory
  }
}

public open external class FontFileImportFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FontFileImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FontFileImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FontFileImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FontFileImportFactory

    @JsName("C")
    public fun copy(other: UObject): FontFileImportFactory

    @JsName("C")
    public fun copy(other: Any): FontFileImportFactory
  }
}

public open external class FontThumbnailRenderer(
  outer: UObject,
) : TextureThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FontThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FontThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FontThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FontThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): FontThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): FontThumbnailRenderer
  }
}

public open external class ForceFeedbackAttenuationFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ForceFeedbackAttenuationFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ForceFeedbackAttenuationFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ForceFeedbackAttenuationFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ForceFeedbackAttenuationFactory

    @JsName("C")
    public fun copy(other: UObject): ForceFeedbackAttenuationFactory

    @JsName("C")
    public fun copy(other: Any): ForceFeedbackAttenuationFactory
  }
}

public open external class ForceFeedbackEffectFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ForceFeedbackEffectFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ForceFeedbackEffectFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ForceFeedbackEffectFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ForceFeedbackEffectFactory

    @JsName("C")
    public fun copy(other: UObject): ForceFeedbackEffectFactory

    @JsName("C")
    public fun copy(other: Any): ForceFeedbackEffectFactory
  }
}

public open external class GatherTextCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GatherTextCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GatherTextCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GatherTextCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GatherTextCommandlet

    @JsName("C")
    public fun copy(other: UObject): GatherTextCommandlet

    @JsName("C")
    public fun copy(other: Any): GatherTextCommandlet
  }
}

public open external class GatherTextFromAssetsCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GatherTextFromAssetsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GatherTextFromAssetsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GatherTextFromAssetsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GatherTextFromAssetsCommandlet

    @JsName("C")
    public fun copy(other: UObject): GatherTextFromAssetsCommandlet

    @JsName("C")
    public fun copy(other: Any): GatherTextFromAssetsCommandlet
  }
}

public open external class GatherTextFromMetaDataCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GatherTextFromMetaDataCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GatherTextFromMetaDataCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GatherTextFromMetaDataCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GatherTextFromMetaDataCommandlet

    @JsName("C")
    public fun copy(other: UObject): GatherTextFromMetaDataCommandlet

    @JsName("C")
    public fun copy(other: Any): GatherTextFromMetaDataCommandlet
  }
}

public open external class GatherTextFromSourceCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GatherTextFromSourceCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GatherTextFromSourceCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GatherTextFromSourceCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GatherTextFromSourceCommandlet

    @JsName("C")
    public fun copy(other: UObject): GatherTextFromSourceCommandlet

    @JsName("C")
    public fun copy(other: Any): GatherTextFromSourceCommandlet
  }
}

public open external class GenerateAssetManifestCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateAssetManifestCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateAssetManifestCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateAssetManifestCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateAssetManifestCommandlet

    @JsName("C")
    public fun copy(other: UObject): GenerateAssetManifestCommandlet

    @JsName("C")
    public fun copy(other: Any): GenerateAssetManifestCommandlet
  }
}

@JsName("GenerateBlueprintAPICommandlet")
public open external class GenerateBlueprintApiCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateBlueprintApiCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateBlueprintApiCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateBlueprintApiCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateBlueprintApiCommandlet

    @JsName("C")
    public fun copy(other: UObject): GenerateBlueprintApiCommandlet

    @JsName("C")
    public fun copy(other: Any): GenerateBlueprintApiCommandlet
  }
}

public open external class GenerateDistillFileSetsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateDistillFileSetsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateDistillFileSetsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateDistillFileSetsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateDistillFileSetsCommandlet

    @JsName("C")
    public fun copy(other: UObject): GenerateDistillFileSetsCommandlet

    @JsName("C")
    public fun copy(other: Any): GenerateDistillFileSetsCommandlet
  }
}

public open external class GenerateGatherArchiveCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateGatherArchiveCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateGatherArchiveCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateGatherArchiveCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateGatherArchiveCommandlet

    @JsName("C")
    public fun copy(other: UObject): GenerateGatherArchiveCommandlet

    @JsName("C")
    public fun copy(other: Any): GenerateGatherArchiveCommandlet
  }
}

public open external class GenerateGatherManifestCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateGatherManifestCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateGatherManifestCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateGatherManifestCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateGatherManifestCommandlet

    @JsName("C")
    public fun copy(other: UObject): GenerateGatherManifestCommandlet

    @JsName("C")
    public fun copy(other: Any): GenerateGatherManifestCommandlet
  }
}

public open external class GenerateTextLocalizationReportCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateTextLocalizationReportCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateTextLocalizationReportCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateTextLocalizationReportCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateTextLocalizationReportCommandlet

    @JsName("C")
    public fun copy(other: UObject): GenerateTextLocalizationReportCommandlet

    @JsName("C")
    public fun copy(other: Any): GenerateTextLocalizationReportCommandlet
  }
}

public open external class GenerateTextLocalizationResourceCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateTextLocalizationResourceCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        GenerateTextLocalizationResourceCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateTextLocalizationResourceCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateTextLocalizationResourceCommandlet

    @JsName("C")
    public fun copy(other: UObject): GenerateTextLocalizationResourceCommandlet

    @JsName("C")
    public fun copy(other: Any): GenerateTextLocalizationResourceCommandlet
  }
}

public open external class HapticFeedbackEffectBufferFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HapticFeedbackEffectBufferFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HapticFeedbackEffectBufferFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HapticFeedbackEffectBufferFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HapticFeedbackEffectBufferFactory

    @JsName("C")
    public fun copy(other: UObject): HapticFeedbackEffectBufferFactory

    @JsName("C")
    public fun copy(other: Any): HapticFeedbackEffectBufferFactory
  }
}

public open external class HapticFeedbackEffectCurveFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HapticFeedbackEffectCurveFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HapticFeedbackEffectCurveFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HapticFeedbackEffectCurveFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HapticFeedbackEffectCurveFactory

    @JsName("C")
    public fun copy(other: UObject): HapticFeedbackEffectCurveFactory

    @JsName("C")
    public fun copy(other: Any): HapticFeedbackEffectCurveFactory
  }
}

public open external class HapticFeedbackEffectSoundWaveFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HapticFeedbackEffectSoundWaveFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HapticFeedbackEffectSoundWaveFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HapticFeedbackEffectSoundWaveFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HapticFeedbackEffectSoundWaveFactory

    @JsName("C")
    public fun copy(other: UObject): HapticFeedbackEffectSoundWaveFactory

    @JsName("C")
    public fun copy(other: Any): HapticFeedbackEffectSoundWaveFactory
  }
}

@JsName("HierarchicalLODSettings")
public open external class HierarchicalLodSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bForceSettingsInAllMaps")
  public open var forceSettingsInAllMaps: Boolean

  @JsName("bSaveLODActorsToHLODPackages")
  public open var saveLodActorsToHlodPackages: Boolean

  @JsName("DefaultSetup")
  public open var defaultSetup: Class

  @JsName("DirectoriesForHLODCommandlet")
  public open var directoriesForHlodCommandlet: Array<DirectoryPath>

  @JsName("MapsToBuild")
  public open var mapsToBuild: Array<FilePath>

  @JsName("BaseMaterial")
  public open var baseMaterial: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HierarchicalLodSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HierarchicalLodSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HierarchicalLodSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HierarchicalLodSettings

    @JsName("C")
    public fun copy(other: UObject): HierarchicalLodSettings

    @JsName("C")
    public fun copy(other: Any): HierarchicalLodSettings
  }
}

@JsName("HierarchicalLODVolume")
public open external class HierarchicalLodVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("bIncludeOverlappingActors")
  public open var includeOverlappingActors: Boolean

  @JsName("ApplyOnlyToSpecificHLODLevels")
  public open var applyOnlyToSpecificHlodLevels: Array<Number>

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HierarchicalLodVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HierarchicalLodVolume

    @JsName("C")
    public fun copy(other: UObject): HierarchicalLodVolume

    @JsName("C")
    public fun copy(other: Any): HierarchicalLodVolume
  }
}

public open external class ImportAssetsCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("GlobalImportData")
  public open var globalImportData: AutomatedAssetImportData

  @JsName("ImportDataList")
  public open var importDataList: Array<AutomatedAssetImportData>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImportAssetsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImportAssetsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImportAssetsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImportAssetsCommandlet

    @JsName("C")
    public fun copy(other: UObject): ImportAssetsCommandlet

    @JsName("C")
    public fun copy(other: Any): ImportAssetsCommandlet
  }
}

public open external class ImportDialogueScriptCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImportDialogueScriptCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImportDialogueScriptCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImportDialogueScriptCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImportDialogueScriptCommandlet

    @JsName("C")
    public fun copy(other: UObject): ImportDialogueScriptCommandlet

    @JsName("C")
    public fun copy(other: Any): ImportDialogueScriptCommandlet
  }
}

public open external class ImportLocalizedDialogueCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImportLocalizedDialogueCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImportLocalizedDialogueCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImportLocalizedDialogueCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImportLocalizedDialogueCommandlet

    @JsName("C")
    public fun copy(other: UObject): ImportLocalizedDialogueCommandlet

    @JsName("C")
    public fun copy(other: Any): ImportLocalizedDialogueCommandlet
  }
}

public open external class ImportSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("OnAssetPreImport_BP")
  public open var onAssetPreImportBp: UnrealEngineMulticastDelegate<(
    InFactory: Factory,
    InClass: UnrealEngineClass,
    InParent: UObject,
    Name: String,
    Type: String,
  ) -> Unit>

  @JsName("OnAssetPostImport_BP")
  public open var onAssetPostImportBp: UnrealEngineMulticastDelegate<(InFactory: Factory,
      InCreatedObject: UObject) -> Unit>

  @JsName("OnAssetReimport_BP")
  public open var onAssetReimportBp:
      UnrealEngineMulticastDelegate<(InCreatedObject: UObject) -> Unit>

  @JsName("OnAssetPostLODImport_BP")
  public open var onAssetPostLodImportBp: UnrealEngineMulticastDelegate<(InObject: UObject,
      InLODIndex: Number) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImportSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImportSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImportSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImportSubsystem

    @JsName("C")
    public fun copy(other: UObject): ImportSubsystem

    @JsName("C")
    public fun copy(other: Any): ImportSubsystem
  }
}

public open external class InternationalizationConditioningCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InternationalizationConditioningCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        InternationalizationConditioningCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InternationalizationConditioningCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InternationalizationConditioningCommandlet

    @JsName("C")
    public fun copy(other: UObject): InternationalizationConditioningCommandlet

    @JsName("C")
    public fun copy(other: Any): InternationalizationConditioningCommandlet
  }
}

public open external class InternationalizationExportCommandlet(
  outer: UObject,
) : GatherTextCommandletBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InternationalizationExportCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InternationalizationExportCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InternationalizationExportCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InternationalizationExportCommandlet

    @JsName("C")
    public fun copy(other: UObject): InternationalizationExportCommandlet

    @JsName("C")
    public fun copy(other: Any): InternationalizationExportCommandlet
  }
}

public open external class IoStoreCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IoStoreCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IoStoreCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IoStoreCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IoStoreCommandlet

    @JsName("C")
    public fun copy(other: UObject): IoStoreCommandlet

    @JsName("C")
    public fun copy(other: Any): IoStoreCommandlet
  }
}

@JsName("T$711")
public external interface Object711 {
  @JsName("OutLayer")
  public var outLayer: Layer

  @JsName("$")
  public var value: Boolean
}

@JsName("T$712")
public external interface InOutActorsProvider {
  @JsName("InOutActors")
  public var inOutActors: Array<Actor>
}

@JsName("T$714")
public external interface OutLayersProvider {
  @JsName("OutLayers")
  public var outLayers: Array<Layer>
}

@JsName("T$715")
public external interface OutLayerNamesProvider {
  @JsName("OutLayerNames")
  public var outLayerNames: Array<String>
}

public open external class LayersSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("UpdateAllViewVisibility")
  public open fun updateAllViewVisibility(layerThatChanged: String): Unit

  @JsName("UpdateAllActorsVisibility")
  public open fun updateAllActorsVisibility(notifySelectionChange: Boolean,
      redrawViewports: Boolean): Boolean

  @JsName("UpdateActorVisibility")
  public open fun updateActorVisibility(
    actor: Actor,
    outSelectionChanged: Boolean,
    outActorModified: Boolean,
    notifySelectionChange: Boolean,
    redrawViewports: Boolean,
  ): Object642

  @JsName("UpdateActorAllViewsVisibility")
  public open fun updateActorAllViewsVisibility(actor: Actor): Unit

  @JsName("TryGetLayer")
  public open fun tryGetLayer(layerName: String, outLayer: Layer): Object711

  @JsName("ToggleLayerVisibility")
  public open fun toggleLayerVisibility(layerName: String): Unit

  @JsName("ToggleLayersVisibility")
  public open fun toggleLayersVisibility(layerNames: Array<String>): Unit

  @JsName("SetLayerVisibility")
  public open fun setLayerVisibility(layerName: String, isVisible: Boolean): Unit

  @JsName("SetLayersVisibility")
  public open fun setLayersVisibility(layerNames: Array<String>, isVisible: Boolean): Unit

  @JsName("SelectActorsInLayers")
  public open fun selectActorsInLayers(
    layerNames: Array<String>,
    select: Boolean,
    notify: Boolean,
    selectEvenIfHidden: Boolean,
  ): Boolean

  @JsName("SelectActorsInLayer")
  public open fun selectActorsInLayer(
    layerName: String,
    select: Boolean,
    notify: Boolean,
    selectEvenIfHidden: Boolean,
  ): Boolean

  @JsName("RenameLayer")
  public open fun renameLayer(originalLayerName: String, newLayerName: String): Boolean

  @JsName("RemoveSelectedActorsFromLayers")
  public open fun removeSelectedActorsFromLayers(layerNames: Array<String>): Boolean

  @JsName("RemoveSelectedActorsFromLayer")
  public open fun removeSelectedActorsFromLayer(layerName: String): Boolean

  @JsName("RemoveLevelLayerInformation")
  public open fun removeLevelLayerInformation(level: Level): Unit

  @JsName("RemoveActorsFromLayers")
  public open fun removeActorsFromLayers(
    actors: Array<Actor>,
    layerNames: Array<String>,
    updateStats: Boolean,
  ): Boolean

  @JsName("RemoveActorsFromLayer")
  public open fun removeActorsFromLayer(
    actors: Array<Actor>,
    layerName: String,
    updateStats: Boolean,
  ): Boolean

  @JsName("RemoveActorFromLayers")
  public open fun removeActorFromLayers(
    actor: Actor,
    layerNames: Array<String>,
    updateStats: Boolean,
  ): Boolean

  @JsName("RemoveActorFromLayer")
  public open fun removeActorFromLayer(
    actor: Actor,
    layerToRemove: String,
    updateStats: Boolean,
  ): Boolean

  @JsName("MakeAllLayersVisible")
  public open fun makeAllLayersVisible(): Unit

  @JsName("IsLayer")
  public open fun isLayer(layerName: String): Boolean

  @JsName("IsActorValidForLayer")
  public open fun isActorValidForLayer(actor: Actor): Boolean

  @JsName("InitializeNewActorLayers")
  public open fun initializeNewActorLayers(actor: Actor): Boolean

  @JsName("GetWorld")
  public open fun getWorld(): World

  @JsName("GetSelectedActors")
  public open fun getSelectedActors(): Array<Actor>

  @JsName("GetLayer")
  public open fun getLayer(layerName: String): Layer

  @JsName("GetActorsFromLayers")
  public open fun getActorsFromLayers(layerNames: Array<String>): Array<Actor>

  @JsName("GetActorsFromLayer")
  public open fun getActorsFromLayer(layerName: String): Array<Actor>

  @JsName("EditorRefreshLayerBrowser")
  public open fun editorRefreshLayerBrowser(): Unit

  @JsName("EditorMapChange")
  public open fun editorMapChange(): Unit

  @JsName("DisassociateActorsFromLayers")
  public open fun disassociateActorsFromLayers(actors: Array<Actor>): Boolean

  @JsName("DisassociateActorFromLayers")
  public open fun disassociateActorFromLayers(actor: Actor): Boolean

  @JsName("DeleteLayers")
  public open fun deleteLayers(layersToDelete: Array<String>): Unit

  @JsName("DeleteLayer")
  public open fun deleteLayer(layerToDelete: String): Unit

  @JsName("CreateLayer")
  public open fun createLayer(layerName: String): Layer

  @JsName("AppendActorsFromLayers")
  public open fun appendActorsFromLayers(layerNames: Array<String>, inOutActors: Array<Actor>):
      InOutActorsProvider

  @JsName("AppendActorsFromLayer")
  public open fun appendActorsFromLayer(layerName: String, inOutActors: Array<Actor>):
      InOutActorsProvider

  @JsName("AddSelectedActorsToLayers")
  public open fun addSelectedActorsToLayers(layerNames: Array<String>): Boolean

  @JsName("AddSelectedActorsToLayer")
  public open fun addSelectedActorsToLayer(layerName: String): Boolean

  @JsName("AddLevelLayerInformation")
  public open fun addLevelLayerInformation(level: Level): Unit

  @JsName("AddAllLayersTo")
  public open fun addAllLayersTo(outLayers: Array<Layer>): OutLayersProvider

  @JsName("AddAllLayerNamesTo")
  public open fun addAllLayerNamesTo(outLayerNames: Array<String>): OutLayerNamesProvider

  @JsName("AddActorToLayers")
  public open fun addActorToLayers(actor: Actor, layerNames: Array<String>): Boolean

  @JsName("AddActorToLayer")
  public open fun addActorToLayer(actor: Actor, layerName: String): Boolean

  @JsName("AddActorsToLayers")
  public open fun addActorsToLayers(actors: Array<Actor>, layerNames: Array<String>): Boolean

  @JsName("AddActorsToLayer")
  public open fun addActorsToLayer(actors: Array<Actor>, layerName: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LayersSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LayersSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LayersSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LayersSubsystem

    @JsName("C")
    public fun copy(other: UObject): LayersSubsystem

    @JsName("C")
    public fun copy(other: Any): LayersSubsystem
  }
}

public open external class LegacyEdModeWrapper(
  outer: UObject,
) : EdMode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LegacyEdModeWrapper

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LegacyEdModeWrapper

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LegacyEdModeWrapper

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LegacyEdModeWrapper

    @JsName("C")
    public fun copy(other: UObject): LegacyEdModeWrapper

    @JsName("C")
    public fun copy(other: Any): LegacyEdModeWrapper
  }
}

public open external class LegacyEdModeSelectInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LegacyEdModeSelectInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LegacyEdModeSelectInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LegacyEdModeSelectInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LegacyEdModeSelectInterface

    @JsName("C")
    public fun copy(other: UObject): LegacyEdModeSelectInterface

    @JsName("C")
    public fun copy(other: Any): LegacyEdModeSelectInterface
  }
}

public open external class LegacyEdModeWidgetInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LegacyEdModeWidgetInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LegacyEdModeWidgetInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LegacyEdModeWidgetInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LegacyEdModeWidgetInterface

    @JsName("C")
    public fun copy(other: UObject): LegacyEdModeWidgetInterface

    @JsName("C")
    public fun copy(other: Any): LegacyEdModeWidgetInterface
  }
}

public open external class LegacyEdModeToolInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LegacyEdModeToolInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LegacyEdModeToolInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LegacyEdModeToolInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LegacyEdModeToolInterface

    @JsName("C")
    public fun copy(other: UObject): LegacyEdModeToolInterface

    @JsName("C")
    public fun copy(other: Any): LegacyEdModeToolInterface
  }
}

public open external class LegacyEdModeDrawHelperInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LegacyEdModeDrawHelperInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LegacyEdModeDrawHelperInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LegacyEdModeDrawHelperInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LegacyEdModeDrawHelperInterface

    @JsName("C")
    public fun copy(other: UObject): LegacyEdModeDrawHelperInterface

    @JsName("C")
    public fun copy(other: Any): LegacyEdModeDrawHelperInterface
  }
}

public open external class LegacyEdModeViewportInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LegacyEdModeViewportInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LegacyEdModeViewportInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LegacyEdModeViewportInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LegacyEdModeViewportInterface

    @JsName("C")
    public fun copy(other: UObject): LegacyEdModeViewportInterface

    @JsName("C")
    public fun copy(other: Any): LegacyEdModeViewportInterface
  }
}

public open external class LevelEditorMiscSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bAutoApplyLightingEnable")
  public open var autoApplyLightingEnable: Boolean

  @JsName("bBSPAutoUpdate")
  public open var bspAutoUpdate: Boolean

  @JsName("bAutoMoveBSPPivotOffset")
  public open var autoMoveBspPivotOffset: Boolean

  @JsName("bNavigationAutoUpdate")
  public open var navigationAutoUpdate: Boolean

  @JsName("bReplaceRespectsScale")
  public open var replaceRespectsScale: Boolean

  @JsName("bEnableExperimentalLevelEditor")
  public open var enableExperimentalLevelEditor: Boolean

  @JsName("bAvoidRelabelOnPasteSelected")
  public open var avoidRelabelOnPasteSelected: Boolean

  @JsName("bAllowBackgroundAudio")
  public open var allowBackgroundAudio: Boolean

  @JsName("bCreateNewAudioDeviceForPlayInEditor")
  public open var createNewAudioDeviceForPlayInEditor: Boolean

  @JsName("bEnableRealTimeAudio")
  public open var enableRealTimeAudio: Boolean

  @JsName("EditorVolumeLevel")
  public open var editorVolumeLevel: Number

  @JsName("bEnableEditorSounds")
  public open var enableEditorSounds: Boolean

  @JsName("DefaultLevelStreamingClass")
  public open var defaultLevelStreamingClass: UnrealEngineClass

  @JsName("bPromptWhenAddingToLevelBeforeCheckout")
  public open var promptWhenAddingToLevelBeforeCheckout: Boolean

  @JsName("bPromptWhenAddingToLevelOutsideBounds")
  public open var promptWhenAddingToLevelOutsideBounds: Boolean

  @JsName("PercentageThresholdForPrompt")
  public open var percentageThresholdForPrompt: Number

  @JsName("MinimumBoundsForCheckingSize")
  public open var minimumBoundsForCheckingSize: Vector

  @JsName("EditorScreenshotSaveDirectory")
  public open var editorScreenshotSaveDirectory: DirectoryPath

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditorMiscSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditorMiscSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditorMiscSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditorMiscSettings

    @JsName("C")
    public fun copy(other: UObject): LevelEditorMiscSettings

    @JsName("C")
    public fun copy(other: Any): LevelEditorMiscSettings
  }
}

public open external class CommonResolutionMenuContext(
  outer: UObject,
) : ToolMenuContextBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CommonResolutionMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CommonResolutionMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CommonResolutionMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CommonResolutionMenuContext

    @JsName("C")
    public fun copy(other: UObject): CommonResolutionMenuContext

    @JsName("C")
    public fun copy(other: Any): CommonResolutionMenuContext
  }
}

@JsName("ELabelAnchorMode")
public external object LabelAnchorMode {
  @JsName("LabelAnchorMode_TopLeft")
  public var TopLeft: String

  @JsName("LabelAnchorMode_TopCenter")
  public var TopCenter: String

  @JsName("LabelAnchorMode_TopRight")
  public var TopRight: String

  @JsName("LabelAnchorMode_CenterLeft")
  public var CenterLeft: String

  @JsName("LabelAnchorMode_Centered")
  public var Centered: String

  @JsName("LabelAnchorMode_CenterRight")
  public var CenterRight: String

  @JsName("LabelAnchorMode_BottomLeft")
  public var BottomLeft: String

  @JsName("LabelAnchorMode_BottomCenter")
  public var BottomCenter: String

  @JsName("LabelAnchorMode_BottomRight")
  public var BottomRight: String

  @JsName("LabelAnchorMode_MAX")
  public var Max: String
}

@JsName("EPlayOnBuildMode")
public external object PlayOnBuildMode {
  @JsName("PlayOnBuild_Always")
  public var Always: String

  @JsName("PlayOnBuild_Never")
  public var Never: String

  @JsName("PlayOnBuild_Default")
  public var Default: String

  @JsName("PlayOnBuild_IfEditorBuiltLocally")
  public var IfEditorBuiltLocally: String

  @JsName("PlayOnBuild_MAX")
  public var Max: String
}

@JsName("EPlayOnLaunchConfiguration")
public external object PlayOnLaunchConfiguration {
  @JsName("LaunchConfig_Default")
  public var Default: String

  @JsName("LaunchConfig_Debug")
  public var Debug: String

  @JsName("LaunchConfig_Development")
  public var Development: String

  @JsName("LaunchConfig_Test")
  public var Test: String

  @JsName("LaunchConfig_Shipping")
  public var Shipping: String

  @JsName("LaunchConfig_MAX")
  public var Max: String
}

@JsName("EPlayOnPakFileMode")
public external object PlayOnPakFileMode {
  public var NoPak: String

  public var PakNoCompress: String

  public var PakCompress: String

  @JsName("EPlayOnPakFileMode_MAX")
  public var Max: String
}

@JsName("EPlayNetMode")
public external object PlayNetMode {
  @JsName("PIE_Standalone")
  public var Standalone: String

  @JsName("PIE_ListenServer")
  public var ListenServer: String

  @JsName("PIE_Client")
  public var Client: String

  @JsName("PIE_MAX")
  public var Max: String
}

public external object NetworkEmulationTarget {
  @JsName("Server")
  public var server: String

  @JsName("Client")
  public var client: String

  @JsName("Any")
  public var any: String

  @JsName("NetworkEmulationTarget_MAX")
  public var networkEmulationTargetMax: String
}

public open external class NetworkEmulationPacketSettings {
  @JsName("MinLatency")
  public open var minLatency: Number

  @JsName("MaxLatency")
  public open var maxLatency: Number

  @JsName("PacketLossPercentage")
  public open var packetLossPercentage: Number

  public open fun clone(): NetworkEmulationPacketSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NetworkEmulationPacketSettings

    @JsName("C")
    public fun copy(other: Any): NetworkEmulationPacketSettings
  }
}

public open external class LevelEditorPlayNetworkEmulationSettings {
  @JsName("bIsNetworkEmulationEnabled")
  public open var isNetworkEmulationEnabled: Boolean

  @JsName("EmulationTarget")
  public open var emulationTarget: String

  @JsName("CurrentProfile")
  public open var currentProfile: String

  @JsName("OutPackets")
  public open var outPackets: NetworkEmulationPacketSettings

  @JsName("InPackets")
  public open var inPackets: NetworkEmulationPacketSettings

  public open fun clone(): LevelEditorPlayNetworkEmulationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelEditorPlayNetworkEmulationSettings

    @JsName("C")
    public fun copy(other: Any): LevelEditorPlayNetworkEmulationSettings
  }
}

@JsName("ELaunchModeType")
public external object LaunchModeType {
  @JsName("LaunchMode_OnDevice")
  public var OnDevice: String

  @JsName("LaunchMode_MAX")
  public var Max: String
}

@JsName("EPlayModeLocations")
public external object PlayModeLocations {
  @JsName("PlayLocation_CurrentCameraLocation")
  public var CurrentCameraLocation: String

  @JsName("PlayLocation_DefaultPlayerStart")
  public var DefaultPlayerStart: String

  @JsName("PlayLocation_MAX")
  public var Max: String
}

@JsName("EPlayModeType")
public external object PlayModeType {
  @JsName("PlayMode_InViewPort")
  public var InViewPort: String

  @JsName("PlayMode_InEditorFloating")
  public var InEditorFloating: String

  @JsName("PlayMode_InMobilePreview")
  public var InMobilePreview: String

  @JsName("PlayMode_InTargetedMobilePreview")
  public var InTargetedMobilePreview: String

  @JsName("PlayMode_InVulkanPreview")
  public var InVulkanPreview: String

  @JsName("PlayMode_InNewProcess")
  public var InNewProcess: String

  @JsName("PlayMode_InVR")
  public var InVr: String

  @JsName("PlayMode_Simulate")
  public var Simulate: String

  @JsName("PlayMode_QuickLaunch")
  public var QuickLaunch: String

  @JsName("PlayMode_Count")
  public var Count: String

  @JsName("PlayMode_MAX")
  public var Max: String
}

public open external class PlayScreenResolution {
  @JsName("Description")
  public open var description: String

  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("AspectRatio")
  public open var aspectRatio: String

  @JsName("bCanSwapAspectRatio")
  public open var canSwapAspectRatio: Boolean

  @JsName("ProfileName")
  public open var profileName: String

  @JsName("ScaleFactor")
  public open var scaleFactor: Number

  @JsName("LogicalHeight")
  public open var logicalHeight: Number

  @JsName("LogicalWidth")
  public open var logicalWidth: Number

  public open fun clone(): PlayScreenResolution

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PlayScreenResolution

    @JsName("C")
    public fun copy(other: Any): PlayScreenResolution
  }
}

public open external class LevelEditorPlaySettings(
  outer: UObject,
) : UObject {
  @JsName("PlayFromHerePlayerStartClassName")
  public open var playFromHerePlayerStartClassName: String

  @JsName("GameGetsMouseControl")
  public open var gameGetsMouseControl: Boolean

  @JsName("UseMouseForTouch")
  public open var useMouseForTouch: Boolean

  @JsName("ShowMouseControlLabel")
  public open var showMouseControlLabel: Boolean

  @JsName("MouseControlLabelPosition")
  public open var mouseControlLabelPosition: String

  @JsName("ViewportGetsHMDControl")
  public open var viewportGetsHmdControl: Boolean

  @JsName("ShouldMinimizeEditorOnVRPIE")
  public open var shouldMinimizeEditorOnVrpie: Boolean

  @JsName("AutoRecompileBlueprints")
  public open var autoRecompileBlueprints: Boolean

  @JsName("EnableGameSound")
  public open var enableGameSound: Boolean

  @JsName("SoloAudioInFirstPIEClient")
  public open var soloAudioInFirstPieClient: Boolean

  @JsName("EnablePIEEnterAndExitSounds")
  public open var enablePieEnterAndExitSounds: Boolean

  @JsName("PlayInEditorSoundQualityLevel")
  public open var playInEditorSoundQualityLevel: Number

  @JsName("bUseNonRealtimeAudioDevice")
  public open var useNonRealtimeAudioDevice: Boolean

  @JsName("bOnlyLoadVisibleLevelsInPIE")
  public open var onlyLoadVisibleLevelsInPie: Boolean

  @JsName("bPreferToStreamLevelsInPIE")
  public open var preferToStreamLevelsInPie: Boolean

  @JsName("NewWindowWidth")
  public open var newWindowWidth: Number

  @JsName("NewWindowHeight")
  public open var newWindowHeight: Number

  @JsName("NewWindowPosition")
  public open var newWindowPosition: IntPoint

  @JsName("CenterNewWindow")
  public open var centerNewWindow: Boolean

  @JsName("PIEAlwaysOnTop")
  public open var pieAlwaysOnTop: Boolean

  @JsName("DisableStandaloneSound")
  public open var disableStandaloneSound: Boolean

  @JsName("AdditionalLaunchParameters")
  public open var additionalLaunchParameters: String

  @JsName("BuildGameBeforeLaunch")
  public open var buildGameBeforeLaunch: String

  @JsName("LaunchConfiguration")
  public open var launchConfiguration: String

  @JsName("PackFilesForLaunch")
  public open var packFilesForLaunch: String

  @JsName("bAutoCompileBlueprintsOnLaunch")
  public open var autoCompileBlueprintsOnLaunch: Boolean

  @JsName("bLaunchSeparateServer")
  public open var launchSeparateServer: Boolean

  @JsName("PlayNetMode")
  public open var playNetMode: String

  @JsName("RunUnderOneProcess")
  public open var runUnderOneProcess: Boolean

  @JsName("PlayNetDedicated")
  public open var playNetDedicated: Boolean

  @JsName("PlayNumberOfClients")
  public open var playNumberOfClients: Number

  @JsName("ServerPort")
  public open var serverPort: Any

  @JsName("ClientWindowWidth")
  public open var clientWindowWidth: Number

  @JsName("AutoConnectToServer")
  public open var autoConnectToServer: Boolean

  @JsName("RouteGamepadToSecondWindow")
  public open var routeGamepadToSecondWindow: Boolean

  @JsName("CreateAudioDeviceForEveryPlayer")
  public open var createAudioDeviceForEveryPlayer: Boolean

  @JsName("ClientWindowHeight")
  public open var clientWindowHeight: Number

  @JsName("ServerMapNameOverride")
  public open var serverMapNameOverride: String

  @JsName("AdditionalServerGameOptions")
  public open var additionalServerGameOptions: String

  @JsName("AdditionalLaunchOptions")
  public open var additionalLaunchOptions: String

  @JsName("bShowServerDebugDrawingByDefault")
  public open var showServerDebugDrawingByDefault: Boolean

  @JsName("ServerDebugDrawingColorTintStrength")
  public open var serverDebugDrawingColorTintStrength: Number

  @JsName("ServerDebugDrawingColorTint")
  public open var serverDebugDrawingColorTint: LinearColor

  @JsName("AdditionalServerLaunchParameters")
  public open var additionalServerLaunchParameters: String

  @JsName("ServerFixedFPS")
  public open var serverFixedFps: Number

  @JsName("ClientFixedFPS")
  public open var clientFixedFps: Array<Number>

  @JsName("NetworkEmulationSettings")
  public open var networkEmulationSettings: LevelEditorPlayNetworkEmulationSettings

  @JsName("LastSize")
  public open var lastSize: IntPoint

  @JsName("MultipleInstancePositions")
  public open var multipleInstancePositions: Array<IntPoint>

  @JsName("LastExecutedLaunchDevice")
  public open var lastExecutedLaunchDevice: String

  @JsName("LastExecutedLaunchName")
  public open var lastExecutedLaunchName: String

  @JsName("LastExecutedLaunchModeType")
  public open var lastExecutedLaunchModeType: String

  @JsName("LastExecutedPlayModeLocation")
  public open var lastExecutedPlayModeLocation: String

  @JsName("LastExecutedPlayModeType")
  public open var lastExecutedPlayModeType: String

  @JsName("LastExecutedPIEPreviewDevice")
  public open var lastExecutedPiePreviewDevice: String

  @JsName("LaptopScreenResolutions")
  public open var laptopScreenResolutions: Array<PlayScreenResolution>

  @JsName("MonitorScreenResolutions")
  public open var monitorScreenResolutions: Array<PlayScreenResolution>

  @JsName("PhoneScreenResolutions")
  public open var phoneScreenResolutions: Array<PlayScreenResolution>

  @JsName("TabletScreenResolutions")
  public open var tabletScreenResolutions: Array<PlayScreenResolution>

  @JsName("TelevisionScreenResolutions")
  public open var televisionScreenResolutions: Array<PlayScreenResolution>

  @JsName("DeviceToEmulate")
  public open var deviceToEmulate: String

  @JsName("PIESafeZoneOverride")
  public open var pieSafeZoneOverride: Margin

  @JsName("CustomUnsafeZoneStarts")
  public open var customUnsafeZoneStarts: Array<Vector2d>

  @JsName("CustomUnsafeZoneDimensions")
  public open var customUnsafeZoneDimensions: Array<Vector2d>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditorPlaySettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditorPlaySettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditorPlaySettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditorPlaySettings

    @JsName("C")
    public fun copy(other: UObject): LevelEditorPlaySettings

    @JsName("C")
    public fun copy(other: Any): LevelEditorPlaySettings
  }
}

@JsName("EWASDType")
public external object WASDType {
  @JsName("WASD_Always")
  public var Always: String

  @JsName("WASD_RMBOnly")
  public var RmbOnly: String

  @JsName("WASD_Never")
  public var Never: String

  @JsName("WASD_MAX")
  public var Max: String
}

@JsName("ELandscapeFoliageEditorControlType")
public external object LandscapeFoliageEditorControlType {
  public var IgnoreCtrl: String

  public var RequireCtrl: String

  public var RequireNoCtrl: String

  @JsName("ELandscapeFoliageEditorControlType_MAX")
  public var Max: String
}

@JsName("EScrollGestureDirection")
public external object ScrollGestureDirection {
  public var UseSystemSetting: String

  public var Standard: String

  public var Natural: String

  @JsName("EScrollGestureDirection_MAX")
  public var Max: String
}

public open external class SnapToSurfaceSettings {
  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("SnapOffsetExtent")
  public open var snapOffsetExtent: Number

  @JsName("bSnapRotation")
  public open var snapRotation: Boolean

  public open fun clone(): SnapToSurfaceSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SnapToSurfaceSettings

    @JsName("C")
    public fun copy(other: Any): SnapToSurfaceSettings
  }
}

@JsName("ERotationGridMode")
public external object RotationGridMode {
  @JsName("GridMode_DivisionsOf360")
  public var DivisionsOf360: String

  @JsName("GridMode_Common")
  public var Common: String

  @JsName("GridMode_MAX")
  public var Max: String
}

@JsName("EMeasuringToolUnits")
public external object MeasuringToolUnits {
  @JsName("MeasureUnits_Centimeters")
  public var Centimeters: String

  @JsName("MeasureUnits_Meters")
  public var Meters: String

  @JsName("MeasureUnits_Kilometers")
  public var Kilometers: String

  @JsName("MeasureUnits_MAX")
  public var Max: String
}

@JsName("ELevelViewportType")
public external object LevelViewportType {
  @JsName("LVT_OrthoXY")
  public var OrthoXy: String

  @JsName("LVT_OrthoXZ")
  public var OrthoXz: String

  @JsName("LVT_OrthoYZ")
  public var OrthoYz: String

  @JsName("LVT_Perspective")
  public var Perspective: String

  @JsName("LVT_OrthoFreelook")
  public var OrthoFreelook: String

  @JsName("LVT_OrthoNegativeXY")
  public var OrthoNegativeXy: String

  @JsName("LVT_OrthoNegativeXZ")
  public var OrthoNegativeXz: String

  @JsName("LVT_OrthoNegativeYZ")
  public var OrthoNegativeYz: String

  @JsName("LVT_MAX")
  public var Max: String

  @JsName("LVT_None")
  public var None: String
}

@JsName("EViewModeIndex")
public external object ViewModeIndex {
  @JsName("VMI_BrushWireframe")
  public var BrushWireframe: String

  @JsName("VMI_Wireframe")
  public var Wireframe: String

  @JsName("VMI_Unlit")
  public var Unlit: String

  @JsName("VMI_Lit")
  public var Lit: String

  @JsName("VMI_Lit_DetailLighting")
  public var LitDetailLighting: String

  @JsName("VMI_LightingOnly")
  public var LightingOnly: String

  @JsName("VMI_LightComplexity")
  public var LightComplexity: String

  @JsName("VMI_ShaderComplexity")
  public var ShaderComplexity: String

  @JsName("VMI_LightmapDensity")
  public var LightmapDensity: String

  @JsName("VMI_LitLightmapDensity")
  public var LitLightmapDensity: String

  @JsName("VMI_ReflectionOverride")
  public var ReflectionOverride: String

  @JsName("VMI_VisualizeBuffer")
  public var VisualizeBuffer: String

  @JsName("VMI_StationaryLightOverlap")
  public var StationaryLightOverlap: String

  @JsName("VMI_CollisionPawn")
  public var CollisionPawn: String

  @JsName("VMI_CollisionVisibility")
  public var CollisionVisibility: String

  @JsName("VMI_LODColoration")
  public var LodColoration: String

  @JsName("VMI_QuadOverdraw")
  public var QuadOverdraw: String

  @JsName("VMI_PrimitiveDistanceAccuracy")
  public var PrimitiveDistanceAccuracy: String

  @JsName("VMI_MeshUVDensityAccuracy")
  public var MeshUvDensityAccuracy: String

  @JsName("VMI_ShaderComplexityWithQuadOverdraw")
  public var ShaderComplexityWithQuadOverdraw: String

  @JsName("VMI_HLODColoration")
  public var HlodColoration: String

  @JsName("VMI_GroupLODColoration")
  public var GroupLodColoration: String

  @JsName("VMI_MaterialTextureScaleAccuracy")
  public var MaterialTextureScaleAccuracy: String

  @JsName("VMI_RequiredTextureResolution")
  public var RequiredTextureResolution: String

  @JsName("VMI_PathTracing")
  public var PathTracing: String

  @JsName("VMI_RayTracingDebug")
  public var RayTracingDebug: String

  @JsName("VMI_VisualizeNanite")
  public var VisualizeNanite: String

  @JsName("VMI_VirtualTexturePendingMips")
  public var VirtualTexturePendingMips: String

  @JsName("VMI_VisualizeLumen")
  public var VisualizeLumen: String

  @JsName("VMI_VisualizeVirtualShadowMap")
  public var VisualizeVirtualShadowMap: String

  @JsName("VMI_Max")
  public var Max: String

  @JsName("VMI_Unknown")
  public var Unknown: String
}

public open external class ExposureSettings {
  @JsName("FixedEV100")
  public open var fixedEv100: Number

  @JsName("bFixed")
  public open var fixed: Boolean

  public open fun clone(): ExposureSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExposureSettings

    @JsName("C")
    public fun copy(other: Any): ExposureSettings
  }
}

public open external class LevelEditorViewportInstanceSettings {
  @JsName("ViewportType")
  public open var viewportType: String

  @JsName("PerspViewModeIndex")
  public open var perspViewModeIndex: String

  @JsName("OrthoViewModeIndex")
  public open var orthoViewModeIndex: String

  @JsName("EditorShowFlagsString")
  public open var editorShowFlagsString: String

  @JsName("GameShowFlagsString")
  public open var gameShowFlagsString: String

  @JsName("BufferVisualizationMode")
  public open var bufferVisualizationMode: String

  @JsName("NaniteVisualizationMode")
  public open var naniteVisualizationMode: String

  @JsName("LumenVisualizationMode")
  public open var lumenVisualizationMode: String

  @JsName("VirtualShadowMapVisualizationMode")
  public open var virtualShadowMapVisualizationMode: String

  @JsName("RayTracingDebugVisualizationMode")
  public open var rayTracingDebugVisualizationMode: String

  @JsName("ExposureSettings")
  public open var exposureSettings: ExposureSettings

  @JsName("FOVAngle")
  public open var fovAngle: Number

  @JsName("FarViewPlane")
  public open var farViewPlane: Number

  @JsName("bIsRealtime")
  public open var isRealtime: Boolean

  @JsName("bShowFPS")
  public open var showFps: Boolean

  @JsName("bShowOnScreenStats")
  public open var showOnScreenStats: Boolean

  @JsName("EnabledStats")
  public open var enabledStats: Array<String>

  @JsName("bShowFullToolbar")
  public open var showFullToolbar: Boolean

  public open fun clone(): LevelEditorViewportInstanceSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelEditorViewportInstanceSettings

    @JsName("C")
    public fun copy(other: Any): LevelEditorViewportInstanceSettings
  }
}

public open external class LevelEditorViewportInstanceSettingsKeyValuePair {
  @JsName("ConfigName")
  public open var configName: String

  @JsName("ConfigSettings")
  public open var configSettings: LevelEditorViewportInstanceSettings

  public open fun clone(): LevelEditorViewportInstanceSettingsKeyValuePair

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelEditorViewportInstanceSettingsKeyValuePair

    @JsName("C")
    public fun copy(other: Any): LevelEditorViewportInstanceSettingsKeyValuePair
  }
}

public open external class LevelEditorViewportSettings(
  outer: UObject,
) : UObject {
  @JsName("FlightCameraControlType")
  public open var flightCameraControlType: String

  @JsName("FlightCameraControlExperimentalNavigation")
  public open var flightCameraControlExperimentalNavigation: Boolean

  @JsName("LandscapeEditorControlType")
  public open var landscapeEditorControlType: String

  @JsName("FoliageEditorControlType")
  public open var foliageEditorControlType: String

  @JsName("bPanMovesCanvas")
  public open var panMovesCanvas: Boolean

  @JsName("bCenterZoomAroundCursor")
  public open var centerZoomAroundCursor: Boolean

  @JsName("MinimumOrthographicZoom")
  public open var minimumOrthographicZoom: Number

  @JsName("bAllowTranslateRotateZWidget")
  public open var allowTranslateRotateZWidget: Boolean

  @JsName("bAllowArcballRotate")
  public open var allowArcballRotate: Boolean

  @JsName("bAllowScreenRotate")
  public open var allowScreenRotate: Boolean

  @JsName("bClickBSPSelectsBrush")
  public open var clickBspSelectsBrush: Boolean

  @JsName("CameraSpeed")
  public open var cameraSpeed: Number

  @JsName("CameraSpeedScalar")
  public open var cameraSpeedScalar: Number

  @JsName("MouseScrollCameraSpeed")
  public open var mouseScrollCameraSpeed: Number

  @JsName("MouseSensitivty")
  public open var mouseSensitivty: Number

  @JsName("bInvertMouseLookYAxis")
  public open var invertMouseLookYAxis: Boolean

  @JsName("bInvertOrbitYAxis")
  public open var invertOrbitYAxis: Boolean

  @JsName("bInvertMiddleMousePan")
  public open var invertMiddleMousePan: Boolean

  @JsName("bInvertRightMouseDollyYAxis")
  public open var invertRightMouseDollyYAxis: Boolean

  @JsName("bUseAbsoluteTranslation")
  public open var useAbsoluteTranslation: Boolean

  @JsName("bLevelStreamingVolumePrevis")
  public open var levelStreamingVolumePrevis: Boolean

  @JsName("bUseUE3OrbitControls")
  public open var useUe3OrbitControls: Boolean

  @JsName("ScrollGestureDirectionFor3DViewports")
  public open var scrollGestureDirectionFor3dViewports: String

  @JsName("ScrollGestureDirectionForOrthoViewports")
  public open var scrollGestureDirectionForOrthoViewports: String

  @JsName("bLevelEditorJoystickControls")
  public open var levelEditorJoystickControls: Boolean

  @JsName("bUseDistanceScaledCameraSpeed")
  public open var useDistanceScaledCameraSpeed: Boolean

  @JsName("bOrbitCameraAroundSelection")
  public open var orbitCameraAroundSelection: Boolean

  @JsName("bUsePowerOf2SnapSize")
  public open var usePowerOf2SnapSize: Boolean

  @JsName("DecimalGridSizes")
  public open var decimalGridSizes: Array<Number>

  @JsName("DecimalGridIntervals")
  public open var decimalGridIntervals: Array<Number>

  @JsName("Pow2GridSizes")
  public open var pow2GridSizes: Array<Number>

  @JsName("Pow2GridIntervals")
  public open var pow2GridIntervals: Array<Number>

  @JsName("CommonRotGridSizes")
  public open var commonRotGridSizes: Array<Number>

  @JsName("DivisionsOf360RotGridSizes")
  public open var divisionsOf360RotGridSizes: Array<Number>

  @JsName("ScalingGridSizes")
  public open var scalingGridSizes: Array<Number>

  @JsName("GridEnabled")
  public open var gridEnabled: Boolean

  @JsName("RotGridEnabled")
  public open var rotGridEnabled: Boolean

  @JsName("SnapScaleEnabled")
  public open var snapScaleEnabled: Boolean

  @JsName("SnapToSurface")
  public open var snapToSurface: SnapToSurfaceSettings

  @JsName("bUsePercentageBasedScaling")
  public open var usePercentageBasedScaling: Boolean

  @JsName("bEnableLayerSnap")
  public open var enableLayerSnap: Boolean

  @JsName("ActiveSnapLayerIndex")
  public open var activeSnapLayerIndex: Number

  @JsName("bEnableActorSnap")
  public open var enableActorSnap: Boolean

  @JsName("ActorSnapScale")
  public open var actorSnapScale: Number

  @JsName("ActorSnapDistance")
  public open var actorSnapDistance: Number

  @JsName("bSnapVertices")
  public open var snapVertices: Boolean

  @JsName("SnapDistance")
  public open var snapDistance: Number

  @JsName("CurrentPosGridSize")
  public open var currentPosGridSize: Number

  @JsName("CurrentRotGridSize")
  public open var currentRotGridSize: Number

  @JsName("CurrentScalingGridSize")
  public open var currentScalingGridSize: Number

  @JsName("PreserveNonUniformScale")
  public open var preserveNonUniformScale: Boolean

  @JsName("CurrentRotGridMode")
  public open var currentRotGridMode: String

  @JsName("AspectRatioAxisConstraint")
  public open var aspectRatioAxisConstraint: String

  @JsName("bEnableViewportHoverFeedback")
  public open var enableViewportHoverFeedback: Boolean

  @JsName("bHighlightWithBrackets")
  public open var highlightWithBrackets: Boolean

  @JsName("bUseLinkedOrthographicViewports")
  public open var useLinkedOrthographicViewports: Boolean

  @JsName("bStrictBoxSelection")
  public open var strictBoxSelection: Boolean

  @JsName("bTransparentBoxSelection")
  public open var transparentBoxSelection: Boolean

  @JsName("bUseSelectionOutline")
  public open var useSelectionOutline: Boolean

  @JsName("SelectionHighlightIntensity")
  public open var selectionHighlightIntensity: Number

  @JsName("BSPSelectionHighlightIntensity")
  public open var bspSelectionHighlightIntensity: Number

  @JsName("bEnableViewportCameraToUpdateFromPIV")
  public open var enableViewportCameraToUpdateFromPiv: Boolean

  @JsName("bPreviewSelectedCameras")
  public open var previewSelectedCameras: Boolean

  @JsName("CameraPreviewSize")
  public open var cameraPreviewSize: Number

  @JsName("BackgroundDropDistance")
  public open var backgroundDropDistance: Number

  @JsName("PreviewMeshes")
  public open var previewMeshes: Array<SoftObjectPath>

  @JsName("BillboardScale")
  public open var billboardScale: Number

  @JsName("TransformWidgetSizeAdjustment")
  public open var transformWidgetSizeAdjustment: Number

  @JsName("bSaveEngineStats")
  public open var saveEngineStats: Boolean

  @JsName("MeasuringToolUnits")
  public open var measuringToolUnits: String

  @JsName("SelectedSplinePointSizeAdjustment")
  public open var selectedSplinePointSizeAdjustment: Number

  @JsName("SplineLineThicknessAdjustment")
  public open var splineLineThicknessAdjustment: Number

  @JsName("SplineTangentHandleSizeAdjustment")
  public open var splineTangentHandleSizeAdjustment: Number

  @JsName("SplineTangentScale")
  public open var splineTangentScale: Number

  @JsName("LastInViewportMenuLocation")
  public open var lastInViewportMenuLocation: Vector2d

  @JsName("PerInstanceSettings")
  public open var perInstanceSettings: Array<LevelEditorViewportInstanceSettingsKeyValuePair>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditorViewportSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditorViewportSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditorViewportSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditorViewportSettings

    @JsName("C")
    public fun copy(other: UObject): LevelEditorViewportSettings

    @JsName("C")
    public fun copy(other: Any): LevelEditorViewportSettings
  }
}

@JsName("LevelExporterFBX")
public open external class LevelExporterFbx(
  outer: UObject,
) : ExporterFbx {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelExporterFbx

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelExporterFbx

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelExporterFbx

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelExporterFbx

    @JsName("C")
    public fun copy(other: UObject): LevelExporterFbx

    @JsName("C")
    public fun copy(other: Any): LevelExporterFbx
  }
}

@JsName("LevelExporterLOD")
public open external class LevelExporterLod(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelExporterLod

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelExporterLod

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelExporterLod

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelExporterLod

    @JsName("C")
    public fun copy(other: UObject): LevelExporterLod

    @JsName("C")
    public fun copy(other: Any): LevelExporterLod
  }
}

@JsName("LevelExporterOBJ")
public open external class LevelExporterObj(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelExporterObj

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelExporterObj

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelExporterObj

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelExporterObj

    @JsName("C")
    public fun copy(other: UObject): LevelExporterObj

    @JsName("C")
    public fun copy(other: Any): LevelExporterObj
  }
}

@JsName("LevelExporterSTL")
public open external class LevelExporterStl(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelExporterStl

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelExporterStl

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelExporterStl

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelExporterStl

    @JsName("C")
    public fun copy(other: UObject): LevelExporterStl

    @JsName("C")
    public fun copy(other: Any): LevelExporterStl
  }
}

@JsName("LevelExporterT3D")
public open external class LevelExporterT3d(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelExporterT3d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelExporterT3d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelExporterT3d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelExporterT3d

    @JsName("C")
    public fun copy(other: UObject): LevelExporterT3d

    @JsName("C")
    public fun copy(other: Any): LevelExporterT3d
  }
}

public open external class LevelFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelFactory

    @JsName("C")
    public fun copy(other: UObject): LevelFactory

    @JsName("C")
    public fun copy(other: Any): LevelFactory
  }
}

public open external class LevelThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): LevelThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): LevelThumbnailRenderer
  }
}

public open external class LightmassDebugOptions {
  @JsName("bDebugMode")
  public open var debugMode: Boolean

  @JsName("bStatsEnabled")
  public open var statsEnabled: Boolean

  @JsName("bGatherBSPSurfacesAcrossComponents")
  public open var gatherBspSurfacesAcrossComponents: Boolean

  @JsName("CoplanarTolerance")
  public open var coplanarTolerance: Number

  @JsName("bUseImmediateImport")
  public open var useImmediateImport: Boolean

  @JsName("bImmediateProcessMappings")
  public open var immediateProcessMappings: Boolean

  @JsName("bSortMappings")
  public open var sortMappings: Boolean

  @JsName("bDumpBinaryFiles")
  public open var dumpBinaryFiles: Boolean

  @JsName("bDebugMaterials")
  public open var debugMaterials: Boolean

  @JsName("bPadMappings")
  public open var padMappings: Boolean

  @JsName("bDebugPaddings")
  public open var debugPaddings: Boolean

  @JsName("bOnlyCalcDebugTexelMappings")
  public open var onlyCalcDebugTexelMappings: Boolean

  @JsName("bUseRandomColors")
  public open var useRandomColors: Boolean

  @JsName("bColorBordersGreen")
  public open var colorBordersGreen: Boolean

  @JsName("bColorByExecutionTime")
  public open var colorByExecutionTime: Boolean

  @JsName("ExecutionTimeDivisor")
  public open var executionTimeDivisor: Number

  public open fun clone(): LightmassDebugOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassDebugOptions

    @JsName("C")
    public fun copy(other: Any): LightmassDebugOptions
  }
}

public open external class SwarmDebugOptions {
  @JsName("bDistributionEnabled")
  public open var distributionEnabled: Boolean

  @JsName("bForceContentExport")
  public open var forceContentExport: Boolean

  @JsName("bInitialized")
  public open var initialized: Boolean

  public open fun clone(): SwarmDebugOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SwarmDebugOptions

    @JsName("C")
    public fun copy(other: Any): SwarmDebugOptions
  }
}

public open external class LightmassOptionsObject(
  outer: UObject,
) : UObject {
  @JsName("DebugSettings")
  public open var debugSettings: LightmassDebugOptions

  @JsName("SwarmSettings")
  public open var swarmSettings: SwarmDebugOptions

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightmassOptionsObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightmassOptionsObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightmassOptionsObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightmassOptionsObject

    @JsName("C")
    public fun copy(other: UObject): LightmassOptionsObject

    @JsName("C")
    public fun copy(other: Any): LightmassOptionsObject
  }
}

public open external class LightWeightInstanceFactory(
  outer: UObject,
) : Factory {
  @JsName("ParentClass")
  public open var parentClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightWeightInstanceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightWeightInstanceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightWeightInstanceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightWeightInstanceFactory

    @JsName("C")
    public fun copy(other: UObject): LightWeightInstanceFactory

    @JsName("C")
    public fun copy(other: Any): LightWeightInstanceFactory
  }
}

public open external class LinearStairBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("StepLength")
  public open var stepLength: Number

  @JsName("StepHeight")
  public open var stepHeight: Number

  @JsName("StepWidth")
  public open var stepWidth: Number

  @JsName("NumSteps")
  public open var numSteps: Number

  @JsName("AddToFirstStep")
  public open var addToFirstStep: Number

  @JsName("GroupName")
  public open var groupName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LinearStairBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LinearStairBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LinearStairBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LinearStairBuilder

    @JsName("C")
    public fun copy(other: UObject): LinearStairBuilder

    @JsName("C")
    public fun copy(other: Any): LinearStairBuilder
  }
}

public open external class ListMaterialsUsedWithMeshEmittersCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ListMaterialsUsedWithMeshEmittersCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        ListMaterialsUsedWithMeshEmittersCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ListMaterialsUsedWithMeshEmittersCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ListMaterialsUsedWithMeshEmittersCommandlet

    @JsName("C")
    public fun copy(other: UObject): ListMaterialsUsedWithMeshEmittersCommandlet

    @JsName("C")
    public fun copy(other: Any): ListMaterialsUsedWithMeshEmittersCommandlet
  }
}

public open external class ListStaticMeshesImportedFromSpeedTreesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ListStaticMeshesImportedFromSpeedTreesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        ListStaticMeshesImportedFromSpeedTreesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ListStaticMeshesImportedFromSpeedTreesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ListStaticMeshesImportedFromSpeedTreesCommandlet

    @JsName("C")
    public fun copy(other: UObject): ListStaticMeshesImportedFromSpeedTreesCommandlet

    @JsName("C")
    public fun copy(other: Any): ListStaticMeshesImportedFromSpeedTreesCommandlet
  }
}

public open external class LoadPackageCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LoadPackageCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LoadPackageCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LoadPackageCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LoadPackageCommandlet

    @JsName("C")
    public fun copy(other: UObject): LoadPackageCommandlet

    @JsName("C")
    public fun copy(other: Any): LoadPackageCommandlet
  }
}

public open external class MakeBinaryConfigCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MakeBinaryConfigCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MakeBinaryConfigCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MakeBinaryConfigCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MakeBinaryConfigCommandlet

    @JsName("C")
    public fun copy(other: UObject): MakeBinaryConfigCommandlet

    @JsName("C")
    public fun copy(other: Any): MakeBinaryConfigCommandlet
  }
}

public open external class EditorParameterGroup {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupAssociation")
  public open var groupAssociation: String

  @JsName("Parameters")
  public open var parameters: Array<DEditorParameterValue>

  @JsName("GroupSortPriority")
  public open var groupSortPriority: Number

  public open fun clone(): EditorParameterGroup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorParameterGroup

    @JsName("C")
    public fun copy(other: Any): EditorParameterGroup
  }
}

public open external class MaterialFunctionInstance(
  outer: UObject,
) : MaterialFunctionInterface {
  @JsName("Parent")
  public open var parent: MaterialFunctionInterface

  @JsName("Base")
  public open var base: MaterialFunctionInterface

  @JsName("ScalarParameterValues")
  public open var scalarParameterValues: Array<ScalarParameterValue>

  @JsName("VectorParameterValues")
  public open var vectorParameterValues: Array<VectorParameterValue>

  @JsName("DoubleVectorParameterValues")
  public open var doubleVectorParameterValues: Array<DoubleVectorParameterValue>

  @JsName("TextureParameterValues")
  public open var textureParameterValues: Array<TextureParameterValue>

  @JsName("FontParameterValues")
  public open var fontParameterValues: Array<FontParameterValue>

  @JsName("StaticSwitchParameterValues")
  public open var staticSwitchParameterValues: Array<StaticSwitchParameter>

  @JsName("StaticComponentMaskParameterValues")
  public open var staticComponentMaskParameterValues: Array<StaticComponentMaskParameter>

  @JsName("RuntimeVirtualTextureParameterValues")
  public open var runtimeVirtualTextureParameterValues: Array<RuntimeVirtualTextureParameterValue>

  @JsName("PreviewMaterial")
  public open var previewMaterial: MaterialInstanceConstant

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFunctionInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionInstance

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionInstance

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionInstance
  }
}

public open external class LightmassParameterValue {
  @JsName("bOverride")
  public open var override: Boolean

  public open fun clone(): LightmassParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassParameterValue

    @JsName("C")
    public fun copy(other: Any): LightmassParameterValue
  }
}

public open external class LightmassBooleanParameterValue : LightmassParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: Boolean

  public override fun clone(): LightmassBooleanParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassBooleanParameterValue

    @JsName("C")
    public fun copy(other: Any): LightmassBooleanParameterValue
  }
}

public open external class LightmassScalarParameterValue : LightmassParameterValue {
  @JsName("ParameterValue")
  public open var parameterValue: Number

  public override fun clone(): LightmassScalarParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassScalarParameterValue

    @JsName("C")
    public fun copy(other: Any): LightmassScalarParameterValue
  }
}

public open external class LightmassParameterizedMaterialSettings {
  @JsName("CastShadowAsMasked")
  public open var castShadowAsMasked: LightmassBooleanParameterValue

  @JsName("EmissiveBoost")
  public open var emissiveBoost: LightmassScalarParameterValue

  @JsName("DiffuseBoost")
  public open var diffuseBoost: LightmassScalarParameterValue

  @JsName("ExportResolutionScale")
  public open var exportResolutionScale: LightmassScalarParameterValue

  public open fun clone(): LightmassParameterizedMaterialSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassParameterizedMaterialSettings

    @JsName("C")
    public fun copy(other: Any): LightmassParameterizedMaterialSettings
  }
}

public open external class MaterialEditorInstanceConstant(
  outer: UObject,
) : UObject {
  @JsName("PhysMaterial")
  public open var physMaterial: PhysicalMaterial

  @JsName("Parent")
  public open var parent: MaterialInterface

  @JsName("ParameterGroups")
  public open var parameterGroups: Array<EditorParameterGroup>

  @JsName("RefractionDepthBias")
  public open var refractionDepthBias: Number

  @JsName("SubsurfaceProfile")
  public open var subsurfaceProfile: SubsurfaceProfile

  @JsName("bOverrideSubsurfaceProfile")
  public open var overrideSubsurfaceProfile: Boolean

  @JsName("bOverrideBaseProperties")
  public open var overrideBaseProperties: Boolean

  @JsName("bIsFunctionPreviewMaterial")
  public open var isFunctionPreviewMaterial: Boolean

  @JsName("bIsFunctionInstanceDirty")
  public open var isFunctionInstanceDirty: Boolean

  @JsName("BasePropertyOverrides")
  public open var basePropertyOverrides: MaterialInstanceBasePropertyOverrides

  @JsName("SourceInstance")
  public open var sourceInstance: MaterialInstanceConstant

  @JsName("SourceFunction")
  public open var sourceFunction: MaterialFunctionInstance

  @JsName("VisibleExpressions")
  public open var visibleExpressions: Array<MaterialParameterInfo>

  @JsName("LightmassSettings")
  public open var lightmassSettings: LightmassParameterizedMaterialSettings

  @JsName("bUseOldStyleMICEditorGroups")
  public open var useOldStyleMicEditorGroups: Boolean

  @JsName("StoredLayerPreviews")
  public open var storedLayerPreviews: Array<MaterialInstanceConstant>

  @JsName("StoredBlendPreviews")
  public open var storedBlendPreviews: Array<MaterialInstanceConstant>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialEditorInstanceConstant

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialEditorInstanceConstant

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialEditorInstanceConstant

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialEditorInstanceConstant

    @JsName("C")
    public fun copy(other: UObject): MaterialEditorInstanceConstant

    @JsName("C")
    public fun copy(other: Any): MaterialEditorInstanceConstant
  }
}

public open external class MaterialEditorMeshComponent(
  outer: UObject,
) : StaticMeshComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialEditorMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialEditorMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialEditorMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialEditorMeshComponent

    @JsName("C")
    public fun copy(other: UObject): MaterialEditorMeshComponent

    @JsName("C")
    public fun copy(other: Any): MaterialEditorMeshComponent
  }
}

public open external class MaterialEditorOptions(
  outer: UObject,
) : UObject {
  @JsName("bShowGrid")
  public open var showGrid: Boolean

  @JsName("bHideUnusedConnectorsSetting")
  public open var hideUnusedConnectorsSetting: Boolean

  @JsName("bRealtimeMaterialViewport")
  public open var realtimeMaterialViewport: Boolean

  @JsName("bRealtimeExpressionViewport")
  public open var realtimeExpressionViewport: Boolean

  @JsName("bLivePreviewUpdate")
  public open var livePreviewUpdate: Boolean

  @JsName("bHideUnrelatedNodes")
  public open var hideUnrelatedNodes: Boolean

  @JsName("bAlwaysRefreshAllPreviews")
  public open var alwaysRefreshAllPreviews: Boolean

  @JsName("bUseUnsortedMenus")
  public open var useUnsortedMenus: Boolean

  @JsName("FavoriteExpressions")
  public open var favoriteExpressions: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialEditorOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialEditorOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialEditorOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialEditorOptions

    @JsName("C")
    public fun copy(other: UObject): MaterialEditorOptions

    @JsName("C")
    public fun copy(other: Any): MaterialEditorOptions
  }
}

public open external class MaterialEditorPreviewParameters(
  outer: UObject,
) : UObject {
  @JsName("ParameterGroups")
  public open var parameterGroups: Array<EditorParameterGroup>

  @JsName("PreviewMaterial")
  public open var previewMaterial: Material

  @JsName("OriginalFunction")
  public open var originalFunction: MaterialFunction

  @JsName("OriginalMaterial")
  public open var originalMaterial: Material

  @JsName("StoredLayerPreviews")
  public open var storedLayerPreviews: Array<MaterialInstanceConstant>

  @JsName("StoredBlendPreviews")
  public open var storedBlendPreviews: Array<MaterialInstanceConstant>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialEditorPreviewParameters

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialEditorPreviewParameters

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialEditorPreviewParameters

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialEditorPreviewParameters

    @JsName("C")
    public fun copy(other: UObject): MaterialEditorPreviewParameters

    @JsName("C")
    public fun copy(other: Any): MaterialEditorPreviewParameters
  }
}

public open external class MaterialFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("InitialTexture")
  public open var initialTexture: Texture

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFactoryNew

    @JsName("C")
    public fun copy(other: UObject): MaterialFactoryNew

    @JsName("C")
    public fun copy(other: Any): MaterialFactoryNew
  }
}

public open external class MaterialFunctionFactoryNew(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFunctionFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionFactoryNew

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionFactoryNew

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionFactoryNew
  }
}

public open external class MaterialFunctionInstanceFactory(
  outer: UObject,
) : Factory {
  @JsName("InitialParent")
  public open var initialParent: MaterialFunctionInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionInstanceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFunctionInstanceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionInstanceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionInstanceFactory

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionInstanceFactory

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionInstanceFactory
  }
}

public open external class MaterialFunctionMaterialLayerInstanceFactory(
  outer: UObject,
) : MaterialFunctionInstanceFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionMaterialLayerInstanceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MaterialFunctionMaterialLayerInstanceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionMaterialLayerInstanceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionMaterialLayerInstanceFactory

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionMaterialLayerInstanceFactory

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionMaterialLayerInstanceFactory
  }
}

public open external class MaterialFunctionMaterialLayerBlendInstanceFactory(
  outer: UObject,
) : MaterialFunctionInstanceFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionMaterialLayerBlendInstanceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MaterialFunctionMaterialLayerBlendInstanceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionMaterialLayerBlendInstanceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionMaterialLayerBlendInstanceFactory

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionMaterialLayerBlendInstanceFactory

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionMaterialLayerBlendInstanceFactory
  }
}

public open external class MaterialFunctionMaterialLayerBlendFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionMaterialLayerBlendFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFunctionMaterialLayerBlendFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionMaterialLayerBlendFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionMaterialLayerBlendFactory

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionMaterialLayerBlendFactory

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionMaterialLayerBlendFactory
  }
}

public open external class MaterialFunctionMaterialLayerFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionMaterialLayerFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFunctionMaterialLayerFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionMaterialLayerFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionMaterialLayerFactory

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionMaterialLayerFactory

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionMaterialLayerFactory
  }
}

public open external class MaterialFunctionThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFunctionThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionThumbnailRenderer
  }
}

@JsName("MaterialGraphNode_Base")
public open external class MaterialGraphNodeBase(
  outer: UObject,
) : EdGraphNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraphNodeBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraphNodeBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraphNodeBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraphNodeBase

    @JsName("C")
    public fun copy(other: UObject): MaterialGraphNodeBase

    @JsName("C")
    public fun copy(other: Any): MaterialGraphNodeBase
  }
}

@JsName("MaterialGraphNode_Root")
public open external class MaterialGraphNodeRoot(
  outer: UObject,
) : MaterialGraphNodeBase {
  @JsName("Material")
  public open var material: Material

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraphNodeRoot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraphNodeRoot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraphNodeRoot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraphNodeRoot

    @JsName("C")
    public fun copy(other: UObject): MaterialGraphNodeRoot

    @JsName("C")
    public fun copy(other: Any): MaterialGraphNodeRoot
  }
}

public open external class MaterialGraph(
  outer: UObject,
) : EdGraph {
  @JsName("Material")
  public open var material: Material

  @JsName("MaterialFunction")
  public open var materialFunction: MaterialFunction

  @JsName("RootNode")
  public open var rootNode: MaterialGraphNodeRoot

  @JsName("SubgraphExpression")
  public open var subgraphExpression: MaterialExpression

  @JsName("OriginalMaterialFullName")
  public open var originalMaterialFullName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraph

    @JsName("C")
    public fun copy(other: UObject): MaterialGraph

    @JsName("C")
    public fun copy(other: Any): MaterialGraph
  }
}

public open external class MaterialGraphNode(
  outer: UObject,
) : MaterialGraphNodeBase {
  @JsName("MaterialExpression")
  public open var materialExpression: MaterialExpression

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraphNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraphNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraphNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraphNode

    @JsName("C")
    public fun copy(other: UObject): MaterialGraphNode

    @JsName("C")
    public fun copy(other: Any): MaterialGraphNode
  }
}

@JsName("MaterialGraphNode_Comment")
public open external class MaterialGraphNodeComment(
  outer: UObject,
) : EdGraphNodeComment {
  @JsName("MaterialExpressionComment")
  public open var materialExpressionComment: MaterialExpressionComment

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraphNodeComment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraphNodeComment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraphNodeComment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraphNodeComment

    @JsName("C")
    public fun copy(other: UObject): MaterialGraphNodeComment

    @JsName("C")
    public fun copy(other: Any): MaterialGraphNodeComment
  }
}

@JsName("MaterialGraphNode_Composite")
public open external class MaterialGraphNodeComposite(
  outer: UObject,
) : MaterialGraphNode {
  @JsName("BoundGraph")
  public open var boundGraph: MaterialGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraphNodeComposite

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraphNodeComposite

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraphNodeComposite

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraphNodeComposite

    @JsName("C")
    public fun copy(other: UObject): MaterialGraphNodeComposite

    @JsName("C")
    public fun copy(other: Any): MaterialGraphNodeComposite
  }
}

@JsName("MaterialGraphNode_Knot")
public open external class MaterialGraphNodeKnot(
  outer: UObject,
) : MaterialGraphNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraphNodeKnot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraphNodeKnot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraphNodeKnot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraphNodeKnot

    @JsName("C")
    public fun copy(other: UObject): MaterialGraphNodeKnot

    @JsName("C")
    public fun copy(other: Any): MaterialGraphNodeKnot
  }
}

@JsName("MaterialGraphNode_PinBase")
public open external class MaterialGraphNodePinBase(
  outer: UObject,
) : MaterialGraphNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraphNodePinBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraphNodePinBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraphNodePinBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraphNodePinBase

    @JsName("C")
    public fun copy(other: UObject): MaterialGraphNodePinBase

    @JsName("C")
    public fun copy(other: Any): MaterialGraphNodePinBase
  }
}

public open external class MaterialGraphSchema(
  outer: UObject,
) : EdGraphSchema {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialGraphSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialGraphSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialGraphSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialGraphSchema

    @JsName("C")
    public fun copy(other: UObject): MaterialGraphSchema

    @JsName("C")
    public fun copy(other: Any): MaterialGraphSchema
  }
}

@JsName("T$716")
public external interface Object716 {
  @JsName("OutError")
  public var outError: String

  @JsName("$")
  public var value: MaterialInterface
}

public open external class MaterialImportHelpers(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialImportHelpers

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialImportHelpers

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialImportHelpers

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialImportHelpers

    @JsName("FindExistingMaterialFromSearchLocation")
    public fun findExistingMaterialFromSearchLocation(
      materialFullName: String,
      basePackagePath: String,
      searchLocation: String,
      outError: String,
    ): Object716

    @JsName("FindExistingMaterial")
    public fun findExistingMaterial(
      basePath: String,
      materialFullName: String,
      recursivePaths: Boolean,
      outError: String,
    ): Object716

    @JsName("C")
    public fun copy(other: UObject): MaterialImportHelpers

    @JsName("C")
    public fun copy(other: Any): MaterialImportHelpers
  }
}

public open external class MaterialInstanceConstantFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("InitialParent")
  public open var initialParent: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialInstanceConstantFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialInstanceConstantFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialInstanceConstantFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialInstanceConstantFactoryNew

    @JsName("C")
    public fun copy(other: UObject): MaterialInstanceConstantFactoryNew

    @JsName("C")
    public fun copy(other: Any): MaterialInstanceConstantFactoryNew
  }
}

public open external class MaterialInstanceThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialInstanceThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialInstanceThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialInstanceThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialInstanceThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): MaterialInstanceThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): MaterialInstanceThumbnailRenderer
  }
}

public open external class MaterialParameterCollectionFactoryNew(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialParameterCollectionFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialParameterCollectionFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialParameterCollectionFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialParameterCollectionFactoryNew

    @JsName("C")
    public fun copy(other: UObject): MaterialParameterCollectionFactoryNew

    @JsName("C")
    public fun copy(other: Any): MaterialParameterCollectionFactoryNew
  }
}

public open external class MaterialStatsOptions(
  outer: UObject,
) : UObject {
  @JsName("bPlatformUsed")
  public open var platformUsed: Number

  @JsName("bMaterialQualityUsed")
  public open var materialQualityUsed: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialStatsOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialStatsOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialStatsOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialStatsOptions

    @JsName("C")
    public fun copy(other: UObject): MaterialStatsOptions

    @JsName("C")
    public fun copy(other: Any): MaterialStatsOptions
  }
}

public open external class MergeShaderPipelineCachesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MergeShaderPipelineCachesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MergeShaderPipelineCachesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MergeShaderPipelineCachesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MergeShaderPipelineCachesCommandlet

    @JsName("C")
    public fun copy(other: UObject): MergeShaderPipelineCachesCommandlet

    @JsName("C")
    public fun copy(other: Any): MergeShaderPipelineCachesCommandlet
  }
}

public open external class MirrorTableFindReplaceExpressions(
  outer: UObject,
) : UObject {
  @JsName("FindReplaceExpressions")
  public open var findReplaceExpressions: Array<MirrorFindReplaceExpression>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MirrorTableFindReplaceExpressions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MirrorTableFindReplaceExpressions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MirrorTableFindReplaceExpressions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MirrorTableFindReplaceExpressions

    @JsName("C")
    public fun copy(other: UObject): MirrorTableFindReplaceExpressions

    @JsName("C")
    public fun copy(other: Any): MirrorTableFindReplaceExpressions
  }
}

public open external class MirrorDataTableFactory(
  outer: UObject,
) : Factory {
  public open var struct: ScriptStruct

  @JsName("Skeleton")
  public open var skeleton: Skeleton

  @JsName("MirrorFindReplaceExpressions")
  public open var mirrorFindReplaceExpressions: MirrorTableFindReplaceExpressions

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MirrorDataTableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MirrorDataTableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MirrorDataTableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MirrorDataTableFactory

    @JsName("C")
    public fun copy(other: UObject): MirrorDataTableFactory

    @JsName("C")
    public fun copy(other: Any): MirrorDataTableFactory
  }
}

@JsName("ModelExporterT3D")
public open external class ModelExporterT3d(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelExporterT3d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelExporterT3d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelExporterT3d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelExporterT3d

    @JsName("C")
    public fun copy(other: UObject): ModelExporterT3d

    @JsName("C")
    public fun copy(other: Any): ModelExporterT3d
  }
}

public open external class ModelFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelFactory

    @JsName("C")
    public fun copy(other: UObject): ModelFactory

    @JsName("C")
    public fun copy(other: Any): ModelFactory
  }
}

public open external class ObjectElementDetailsInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ObjectElementDetailsInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ObjectElementDetailsInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ObjectElementDetailsInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ObjectElementDetailsInterface

    @JsName("C")
    public fun copy(other: UObject): ObjectElementDetailsInterface

    @JsName("C")
    public fun copy(other: Any): ObjectElementDetailsInterface
  }
}

public open external class ObjectElementSelectionInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ObjectElementSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ObjectElementSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ObjectElementSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ObjectElementSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): ObjectElementSelectionInterface

    @JsName("C")
    public fun copy(other: Any): ObjectElementSelectionInterface
  }
}

public open external class ObjectElementEditorSelectionInterface(
  outer: UObject,
) : ObjectElementSelectionInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ObjectElementEditorSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ObjectElementEditorSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ObjectElementEditorSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ObjectElementEditorSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): ObjectElementEditorSelectionInterface

    @JsName("C")
    public fun copy(other: Any): ObjectElementEditorSelectionInterface
  }
}

@JsName("ObjectExporterT3D")
public open external class ObjectExporterT3d(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ObjectExporterT3d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ObjectExporterT3d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ObjectExporterT3d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ObjectExporterT3d

    @JsName("C")
    public fun copy(other: UObject): ObjectExporterT3d

    @JsName("C")
    public fun copy(other: Any): ObjectExporterT3d
  }
}

public open external class ObjectLibraryFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ObjectLibraryFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ObjectLibraryFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ObjectLibraryFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ObjectLibraryFactory

    @JsName("C")
    public fun copy(other: UObject): ObjectLibraryFactory

    @JsName("C")
    public fun copy(other: Any): ObjectLibraryFactory
  }
}

public open external class PackageFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PackageFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PackageFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PackageFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PackageFactory

    @JsName("C")
    public fun copy(other: UObject): PackageFactory

    @JsName("C")
    public fun copy(other: Any): PackageFactory
  }
}

public open external class PackageTools(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PackageTools

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PackageTools

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PackageTools

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PackageTools

    @JsName("SanitizePackageName")
    public fun sanitizePackageName(inPackageName: String): String

    @JsName("C")
    public fun copy(other: UObject): PackageTools

    @JsName("C")
    public fun copy(other: Any): PackageTools
  }
}

public open external class PackFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PackFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PackFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PackFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PackFactory

    @JsName("C")
    public fun copy(other: UObject): PackFactory

    @JsName("C")
    public fun copy(other: Any): PackFactory
  }
}

public open external class PanelExtensionSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PanelExtensionSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PanelExtensionSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PanelExtensionSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PanelExtensionSubsystem

    @JsName("C")
    public fun copy(other: UObject): PanelExtensionSubsystem

    @JsName("C")
    public fun copy(other: Any): PanelExtensionSubsystem
  }
}

public open external class ParticleSystemAuditCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("HighSpawnRateOrBurstThreshold")
  public open var highSpawnRateOrBurstThreshold: Number

  @JsName("FarLODDistanceTheshold")
  public open var farLodDistanceTheshold: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleSystemAuditCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleSystemAuditCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleSystemAuditCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleSystemAuditCommandlet

    @JsName("C")
    public fun copy(other: UObject): ParticleSystemAuditCommandlet

    @JsName("C")
    public fun copy(other: Any): ParticleSystemAuditCommandlet
  }
}

public open external class ParticleSystemFactoryNew(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleSystemFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleSystemFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleSystemFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleSystemFactoryNew

    @JsName("C")
    public fun copy(other: UObject): ParticleSystemFactoryNew

    @JsName("C")
    public fun copy(other: Any): ParticleSystemFactoryNew
  }
}

public open external class ParticleSystemThumbnailRenderer(
  outer: UObject,
) : TextureThumbnailRenderer {
  @JsName("NoImage")
  public open var noImage: Texture2d

  @JsName("OutOfDate")
  public open var outOfDate: Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleSystemThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleSystemThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleSystemThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleSystemThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): ParticleSystemThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): ParticleSystemThumbnailRenderer
  }
}

@JsName("EAnimationViewportCameraFollowMode")
public external object AnimationViewportCameraFollowMode {
  public var None: String

  public var Bounds: String

  public var Bone: String

  @JsName("EAnimationViewportCameraFollowMode_MAX")
  public var Max: String
}

public open external class ViewportConfigOptions {
  @JsName("ViewModeIndex")
  public open var viewModeIndex: String

  @JsName("ViewFOV")
  public open var viewFov: Number

  @JsName("CameraSpeedSetting")
  public open var cameraSpeedSetting: Number

  @JsName("CameraSpeedScalar")
  public open var cameraSpeedScalar: Number

  @JsName("CameraFollowMode")
  public open var cameraFollowMode: String

  @JsName("CameraFollowBoneName")
  public open var cameraFollowBoneName: String

  public open fun clone(): ViewportConfigOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ViewportConfigOptions

    @JsName("C")
    public fun copy(other: Any): ViewportConfigOptions
  }
}

public open external class AssetEditorOptions {
  @JsName("Context")
  public open var context: String

  @JsName("ViewportConfigs")
  public open var viewportConfigs: ViewportConfigOptions

  public open fun clone(): AssetEditorOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetEditorOptions

    @JsName("C")
    public fun copy(other: Any): AssetEditorOptions
  }
}

public open external class PersonaOptions(
  outer: UObject,
) : UObject {
  @JsName("bAutoAlignFloorToMesh")
  public open var autoAlignFloorToMesh: Boolean

  @JsName("bAlwaysOpenAnimationAssetsInNewTab")
  public open var alwaysOpenAnimationAssetsInNewTab: Boolean

  @JsName("bShowGrid")
  public open var showGrid: Boolean

  @JsName("bHighlightOrigin")
  public open var highlightOrigin: Boolean

  @JsName("bMuteAudio")
  public open var muteAudio: Boolean

  @JsName("bUseAudioAttenuation")
  public open var useAudioAttenuation: Boolean

  @JsName("ShowMeshStats")
  public open var showMeshStats: Number

  @JsName("DefaultLocalAxesSelection")
  public open var defaultLocalAxesSelection: Any

  @JsName("DefaultBoneDrawSelection")
  public open var defaultBoneDrawSelection: Any

  @JsName("SectionTimingNodeColor")
  public open var sectionTimingNodeColor: LinearColor

  @JsName("NotifyTimingNodeColor")
  public open var notifyTimingNodeColor: LinearColor

  @JsName("BranchingPointTimingNodeColor")
  public open var branchingPointTimingNodeColor: LinearColor

  @JsName("bUseInlineSocketEditor")
  public open var useInlineSocketEditor: Boolean

  @JsName("bFlattenSkeletonHierarchyWhenFiltering")
  public open var flattenSkeletonHierarchyWhenFiltering: Boolean

  @JsName("bHideParentsWhenFiltering")
  public open var hideParentsWhenFiltering: Boolean

  @JsName("bExpandTreeOnSelection")
  public open var expandTreeOnSelection: Boolean

  @JsName("bAllowPreviewMeshCollectionsToSelectFromDifferentSkeletons")
  public open var allowPreviewMeshCollectionsToSelectFromDifferentSkeletons: Boolean

  @JsName("bAllowPreviewMeshCollectionsToUseCustomAnimBP")
  public open var allowPreviewMeshCollectionsToUseCustomAnimBp: Boolean

  @JsName("bAllowMeshSectionSelection")
  public open var allowMeshSectionSelection: Boolean

  @JsName("NumFolderFiltersInAssetBrowser")
  public open var numFolderFiltersInAssetBrowser: Any

  @JsName("AssetEditorOptions")
  public open var assetEditorOptions: Array<AssetEditorOptions>

  @JsName("CurveEditorSnapInterval")
  public open var curveEditorSnapInterval: Number

  @JsName("TimelineScrubSnapValue")
  public open var timelineScrubSnapValue: Number

  @JsName("TimelineDisplayFormat")
  public open var timelineDisplayFormat: String

  @JsName("bTimelineDisplayPercentage")
  public open var timelineDisplayPercentage: Boolean

  @JsName("bTimelineDisplayFormatSecondary")
  public open var timelineDisplayFormatSecondary: Boolean

  @JsName("bTimelineDisplayCurveKeys")
  public open var timelineDisplayCurveKeys: Boolean

  @JsName("TimelineEnabledSnaps")
  public open var timelineEnabledSnaps: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PersonaOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PersonaOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PersonaOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PersonaOptions

    @JsName("C")
    public fun copy(other: UObject): PersonaOptions

    @JsName("C")
    public fun copy(other: Any): PersonaOptions
  }
}

public open external class PhysicalMaterialFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("PhysicalMaterialClass")
  public open var physicalMaterialClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicalMaterialFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicalMaterialFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicalMaterialFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicalMaterialFactoryNew

    @JsName("C")
    public fun copy(other: UObject): PhysicalMaterialFactoryNew

    @JsName("C")
    public fun copy(other: Any): PhysicalMaterialFactoryNew
  }
}

public open external class PhysicalMaterialMaskFactory(
  outer: UObject,
) : Factory {
  @JsName("PhysicalMaterialMaskClass")
  public open var physicalMaterialMaskClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicalMaterialMaskFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicalMaterialMaskFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicalMaterialMaskFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicalMaterialMaskFactory

    @JsName("C")
    public fun copy(other: UObject): PhysicalMaterialMaskFactory

    @JsName("C")
    public fun copy(other: Any): PhysicalMaterialMaskFactory
  }
}

public open external class PhysicalMaterialMaskThumbnailRenderer(
  outer: UObject,
) : TextureThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicalMaterialMaskThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicalMaterialMaskThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicalMaterialMaskThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicalMaterialMaskThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): PhysicalMaterialMaskThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): PhysicalMaterialMaskThumbnailRenderer
  }
}

@JsName("EPhysicsAssetEditorRenderMode")
public external object PhysicsAssetEditorRenderMode {
  public var Solid: String

  public var Wireframe: String

  public var None: String

  @JsName("EPhysicsAssetEditorRenderMode_MAX")
  public var Max: String
}

@JsName("EPhysicsAssetEditorConstraintViewMode")
public external object PhysicsAssetEditorConstraintViewMode {
  public var None: String

  public var AllPositions: String

  public var AllLimits: String

  @JsName("EPhysicsAssetEditorConstraintViewMode_MAX")
  public var Max: String
}

public open external class PhysicsAssetEditorOptions(
  outer: UObject,
) : UObject {
  @JsName("PhysicsBlend")
  public open var physicsBlend: Number

  @JsName("bUpdateJointsFromAnimation")
  public open var updateJointsFromAnimation: Boolean

  @JsName("PhysicsUpdateMode")
  public open var physicsUpdateMode: String

  @JsName("PokePauseTime")
  public open var pokePauseTime: Number

  @JsName("PokeBlendTime")
  public open var pokeBlendTime: Number

  @JsName("GravScale")
  public open var gravScale: Number

  @JsName("GravityOverrideZ")
  public open var gravityOverrideZ: Number

  @JsName("bUseGravityOverride")
  public open var useGravityOverride: Boolean

  @JsName("MaxFPS")
  public open var maxFps: Number

  @JsName("HandleLinearDamping")
  public open var handleLinearDamping: Number

  @JsName("HandleLinearStiffness")
  public open var handleLinearStiffness: Number

  @JsName("HandleAngularDamping")
  public open var handleAngularDamping: Number

  @JsName("HandleAngularStiffness")
  public open var handleAngularStiffness: Number

  @JsName("InterpolationSpeed")
  public open var interpolationSpeed: Number

  @JsName("PokeStrength")
  public open var pokeStrength: Number

  @JsName("InteractionDistance")
  public open var interactionDistance: Number

  @JsName("bShowConstraintsAsPoints")
  public open var showConstraintsAsPoints: Boolean

  @JsName("bRenderOnlySelectedConstraints")
  public open var renderOnlySelectedConstraints: Boolean

  @JsName("ConstraintDrawSize")
  public open var constraintDrawSize: Number

  @JsName("MeshViewMode")
  public open var meshViewMode: String

  @JsName("CollisionViewMode")
  public open var collisionViewMode: String

  @JsName("ConstraintViewMode")
  public open var constraintViewMode: String

  @JsName("SimulationMeshViewMode")
  public open var simulationMeshViewMode: String

  @JsName("SimulationCollisionViewMode")
  public open var simulationCollisionViewMode: String

  @JsName("SimulationConstraintViewMode")
  public open var simulationConstraintViewMode: String

  @JsName("CollisionOpacity")
  public open var collisionOpacity: Number

  @JsName("bSolidRenderingForSelectedOnly")
  public open var solidRenderingForSelectedOnly: Boolean

  @JsName("bHideSimulatedBodies")
  public open var hideSimulatedBodies: Boolean

  @JsName("bHideKinematicBodies")
  public open var hideKinematicBodies: Boolean

  @JsName("bResetClothWhenSimulating")
  public open var resetClothWhenSimulating: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsAssetEditorOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsAssetEditorOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsAssetEditorOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsAssetEditorOptions

    @JsName("C")
    public fun copy(other: UObject): PhysicsAssetEditorOptions

    @JsName("C")
    public fun copy(other: Any): PhysicsAssetEditorOptions
  }
}

public open external class PhysicsAssetFactory(
  outer: UObject,
) : Factory {
  @JsName("TargetSkeletalMesh")
  public open var targetSkeletalMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsAssetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsAssetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsAssetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsAssetFactory

    @JsName("C")
    public fun copy(other: UObject): PhysicsAssetFactory

    @JsName("C")
    public fun copy(other: Any): PhysicsAssetFactory
  }
}

@JsName("EPhysAssetFitGeomType")
public external object PhysAssetFitGeomType {
  @JsName("EFG_Box")
  public var Box: String

  @JsName("EFG_Sphyl")
  public var Sphyl: String

  @JsName("EFG_Sphere")
  public var Sphere: String

  @JsName("EFG_TaperedCapsule")
  public var TaperedCapsule: String

  @JsName("EFG_SingleConvexHull")
  public var SingleConvexHull: String

  @JsName("EFG_MultiConvexHull")
  public var MultiConvexHull: String

  @JsName("EFG_MAX")
  public var Max: String
}

@JsName("EPhysAssetFitVertWeight")
public external object PhysAssetFitVertWeight {
  @JsName("EVW_AnyWeight")
  public var AnyWeight: String

  @JsName("EVW_DominantWeight")
  public var DominantWeight: String

  @JsName("EVW_MAX")
  public var Max: String
}

public open external class PhysAssetCreateParams {
  @JsName("MinBoneSize")
  public open var minBoneSize: Number

  @JsName("MinWeldSize")
  public open var minWeldSize: Number

  @JsName("GeomType")
  public open var geomType: String

  @JsName("VertWeight")
  public open var vertWeight: String

  @JsName("bAutoOrientToBone")
  public open var autoOrientToBone: Boolean

  @JsName("bCreateConstraints")
  public open var createConstraints: Boolean

  @JsName("bWalkPastSmall")
  public open var walkPastSmall: Boolean

  @JsName("bBodyForAll")
  public open var bodyForAll: Boolean

  @JsName("bDisableCollisionsByDefault")
  public open var disableCollisionsByDefault: Boolean

  @JsName("AngularConstraintMode")
  public open var angularConstraintMode: String

  @JsName("HullCount")
  public open var hullCount: Number

  @JsName("MaxHullVerts")
  public open var maxHullVerts: Number

  public open fun clone(): PhysAssetCreateParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysAssetCreateParams

    @JsName("C")
    public fun copy(other: Any): PhysAssetCreateParams
  }
}

public open external class PhysicsAssetGenerationSettings(
  outer: UObject,
) : UObject {
  @JsName("CreateParams")
  public open var createParams: PhysAssetCreateParams

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsAssetGenerationSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsAssetGenerationSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsAssetGenerationSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsAssetGenerationSettings

    @JsName("C")
    public fun copy(other: UObject): PhysicsAssetGenerationSettings

    @JsName("C")
    public fun copy(other: Any): PhysicsAssetGenerationSettings
  }
}

public open external class PhysicsAssetThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsAssetThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsAssetThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsAssetThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsAssetThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): PhysicsAssetThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): PhysicsAssetThumbnailRenderer
  }
}

public open external class PkgInfoCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PkgInfoCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PkgInfoCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PkgInfoCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PkgInfoCommandlet

    @JsName("C")
    public fun copy(other: UObject): PkgInfoCommandlet

    @JsName("C")
    public fun copy(other: Any): PkgInfoCommandlet
  }
}

@JsName("PolysExporterOBJ")
public open external class PolysExporterObj(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolysExporterObj

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolysExporterObj

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolysExporterObj

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolysExporterObj

    @JsName("C")
    public fun copy(other: UObject): PolysExporterObj

    @JsName("C")
    public fun copy(other: Any): PolysExporterObj
  }
}

@JsName("PolysExporterT3D")
public open external class PolysExporterT3d(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolysExporterT3d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolysExporterT3d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolysExporterT3d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolysExporterT3d

    @JsName("C")
    public fun copy(other: UObject): PolysExporterT3d

    @JsName("C")
    public fun copy(other: Any): PolysExporterT3d
  }
}

public open external class PolysFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolysFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolysFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolysFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolysFactory

    @JsName("C")
    public fun copy(other: UObject): PolysFactory

    @JsName("C")
    public fun copy(other: Any): PolysFactory
  }
}

public open external class PopulateDialogueWaveFromCharacterSheetCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PopulateDialogueWaveFromCharacterSheetCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        PopulateDialogueWaveFromCharacterSheetCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PopulateDialogueWaveFromCharacterSheetCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PopulateDialogueWaveFromCharacterSheetCommandlet

    @JsName("C")
    public fun copy(other: UObject): PopulateDialogueWaveFromCharacterSheetCommandlet

    @JsName("C")
    public fun copy(other: Any): PopulateDialogueWaveFromCharacterSheetCommandlet
  }
}

public open external class PoseAssetFactory(
  outer: UObject,
) : Factory {
  @JsName("SourceAnimation")
  public open var sourceAnimation: AnimSequence

  @JsName("PoseNames")
  public open var poseNames: Array<String>

  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PoseAssetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PoseAssetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PoseAssetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PoseAssetFactory

    @JsName("C")
    public fun copy(other: UObject): PoseAssetFactory

    @JsName("C")
    public fun copy(other: Any): PoseAssetFactory
  }
}

public open external class PreviewMaterial(
  outer: UObject,
) : Material {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PreviewMaterial

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PreviewMaterial

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PreviewMaterial

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PreviewMaterial

    @JsName("C")
    public fun copy(other: UObject): PreviewMaterial

    @JsName("C")
    public fun copy(other: Any): PreviewMaterial
  }
}

public open external class PreviewMeshCollectionFactory(
  outer: UObject,
) : Factory {
  @JsName("CurrentSkeleton")
  public open var currentSkeleton: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PreviewMeshCollectionFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PreviewMeshCollectionFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PreviewMeshCollectionFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PreviewMeshCollectionFactory

    @JsName("C")
    public fun copy(other: UObject): PreviewMeshCollectionFactory

    @JsName("C")
    public fun copy(other: Any): PreviewMeshCollectionFactory
  }
}

public open external class PropertyEditorTestInstancedObject(
  outer: UObject,
) : UObject {
  @JsName("Number")
  public open var number: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PropertyEditorTestInstancedObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PropertyEditorTestInstancedObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyEditorTestInstancedObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyEditorTestInstancedObject

    @JsName("C")
    public fun copy(other: UObject): PropertyEditorTestInstancedObject

    @JsName("C")
    public fun copy(other: Any): PropertyEditorTestInstancedObject
  }
}

@JsName("EPropertyEditorTestEnum")
public external object PropertyEditorTestEnum {
  @JsName("PropertyEditorTest_Enum1")
  public var Enum1: String

  @JsName("PropertyEditorTest_Enum2")
  public var Enum2: String

  @JsName("PropertyEditorTest_Enum3")
  public var Enum3: String

  @JsName("PropertyEditorTest_Enum4")
  public var Enum4: String

  @JsName("PropertyEditorTest_Enum5")
  public var Enum5: String

  @JsName("PropertyEditorTest_Enum6")
  public var Enum6: String

  @JsName("PropertyEditorTest_MAX")
  public var Max: String
}

@JsName("EPropertyEditorTestEditColor")
public external object PropertyEditorTestEditColor {
  public var Red: String

  public var Orange: String

  public var Yellow: String

  public var Green: String

  public var Blue: String

  public var Indigo: String

  public var Violet: String

  public var Pink: String

  public var Magenta: String

  public var Cyan: String

  @JsName("EPropertyEditorTestEditColor_MAX")
  public var Max: String
}

@JsName("EPropertyEditorTestUnderscores")
public external object PropertyEditorTestUnderscores {
  @JsName("_One")
  public var One: String

  @JsName("_Two")
  public var Two: String

  @JsName("_Three")
  public var Three: String

  public var NotUnderscore: String

  @JsName("EPropertyEditorTestUnderscores_MAX")
  public var Max: String
}

public open external class PropertyEditorTestSubStruct {
  @JsName("FirstProperty")
  public open var firstProperty: Number

  @JsName("SecondProperty")
  public open var secondProperty: Number

  @JsName("CustomizedStructInsideUncustomizedStruct")
  public open var customizedStructInsideUncustomizedStruct: LinearColor

  @JsName("CustomizedStructInsideUncustomizedStruct2")
  public open var customizedStructInsideUncustomizedStruct2: SoftObjectPath

  public open fun clone(): PropertyEditorTestSubStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyEditorTestSubStruct

    @JsName("C")
    public fun copy(other: Any): PropertyEditorTestSubStruct
  }
}

public open external class PropertyEditorTestBasicStruct {
  @JsName("IntPropertyInsideAStruct")
  public open var intPropertyInsideAStruct: Number

  @JsName("FloatPropertyInsideAStruct")
  public open var floatPropertyInsideAStruct: Number

  @JsName("ObjectPropertyInsideAStruct")
  public open var objectPropertyInsideAStruct: UObject

  @JsName("InnerStruct")
  public open var innerStruct: PropertyEditorTestSubStruct

  public open fun clone(): PropertyEditorTestBasicStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyEditorTestBasicStruct

    @JsName("C")
    public fun copy(other: Any): PropertyEditorTestBasicStruct
  }
}

public open external class PropertyEditorTestInstancedStruct {
  @JsName("UObject")
  public open var uObject: PropertyEditorTestInstancedObject

  public open fun clone(): PropertyEditorTestInstancedStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyEditorTestInstancedStruct

    @JsName("C")
    public fun copy(other: Any): PropertyEditorTestInstancedStruct
  }
}

public open external class PropertyEditTestTextStruct {
  @JsName("NormalProperty")
  public open var normalProperty: String

  public open fun clone(): PropertyEditTestTextStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyEditTestTextStruct

    @JsName("C")
    public fun copy(other: Any): PropertyEditTestTextStruct
  }
}

@JsName("ETestEnumFlags")
public external object TestEnumFlags {
  public var None: String

  public var One: String

  public var Two: String

  public var Four: String

  @JsName("ETestEnumFlags_MAX")
  public var Max: String
}

public open external class PropertyEditorTestEditCondition {
  @JsName("InlineEditCondition")
  public open var inlineEditCondition: Boolean

  @JsName("HasInlineEditCondition")
  public open var hasInlineEditCondition: Number

  @JsName("Flags")
  public open var flags: String

  @JsName("EnabledAndVisibleWhenOne")
  public open var enabledAndVisibleWhenOne: Number

  public open fun clone(): PropertyEditorTestEditCondition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyEditorTestEditCondition

    @JsName("C")
    public fun copy(other: Any): PropertyEditorTestEditCondition
  }
}

public open external class PropertyEditorTestObject(
  outer: UObject,
) : UObject {
  @JsName("Int8Property")
  public open var int8Property: Any

  @JsName("Int16Property")
  public open var int16Property: Any

  @JsName("Int32Property")
  public open var int32Property: Number

  @JsName("Int64Property")
  public open var int64Property: Any

  @JsName("ByteProperty")
  public open var byteProperty: Number

  @JsName("UnsignedInt16Property")
  public open var unsignedInt16Property: Any

  @JsName("UnsignedInt32Property")
  public open var unsignedInt32Property: Any

  @JsName("UnsignedInt64Property")
  public open var unsignedInt64Property: Any

  @JsName("FloatProperty")
  public open var floatProperty: Number

  @JsName("DoubleProperty")
  public open var doubleProperty: Any

  @JsName("NameProperty")
  public open var nameProperty: String

  @JsName("BoolProperty")
  public open var boolProperty: Boolean

  @JsName("StringProperty")
  public open var stringProperty: String

  @JsName("TextProperty")
  public open var textProperty: String

  @JsName("IntPointProperty")
  public open var intPointProperty: IntPoint

  @JsName("Vector3Property")
  public open var vector3Property: Vector

  @JsName("Vector2Property")
  public open var vector2Property: Vector2d

  @JsName("Vector4Property")
  public open var vector4Property: Vector4

  @JsName("RotatorProperty")
  public open var rotatorProperty: Rotator

  @JsName("ObjectProperty")
  public open var objectProperty: UObject

  @JsName("LinearColorProperty")
  public open var linearColorProperty: LinearColor

  @JsName("ColorProperty")
  public open var colorProperty: Color

  @JsName("EnumByteProperty")
  public open var enumByteProperty: String

  @JsName("EnumProperty")
  public open var enumProperty: String

  @JsName("EnumUnderscores")
  public open var enumUnderscores: String

  @JsName("MatrixProperty")
  public open var matrixProperty: Matrix

  @JsName("TransformProperty")
  public open var transformProperty: Transform

  @JsName("ClassProperty")
  public open var classProperty: UnrealEngineClass

  @JsName("ClassPropertyWithAllowed")
  public open var classPropertyWithAllowed: UnrealEngineClass

  @JsName("ClassPropertyWithDisallowed")
  public open var classPropertyWithDisallowed: UnrealEngineClass

  @JsName("SubclassOfTexture")
  public open var subclassOfTexture: UnrealEngineClass

  @JsName("SubclassOfWithAllowed")
  public open var subclassOfWithAllowed: UnrealEngineClass

  @JsName("SubclassOfWithDisallowed")
  public open var subclassOfWithDisallowed: UnrealEngineClass

  @JsName("AssetPointerWithAllowedAndWhitespace")
  public open var assetPointerWithAllowedAndWhitespace: UObject

  @JsName("IntProperty32Array")
  public open var intProperty32Array: Array<Number>

  @JsName("BytePropertyArray")
  public open var bytePropertyArray: Array<Number>

  @JsName("FloatPropertyArray")
  public open var floatPropertyArray: Array<Number>

  @JsName("NamePropertyArray")
  public open var namePropertyArray: Array<String>

  @JsName("BoolPropertyArray")
  public open var boolPropertyArray: Array<Boolean>

  @JsName("StringPropertyArray")
  public open var stringPropertyArray: Array<String>

  @JsName("TextPropertyArray")
  public open var textPropertyArray: Array<String>

  @JsName("Vector3PropertyArray")
  public open var vector3PropertyArray: Array<Vector>

  @JsName("Vector2PropertyArray")
  public open var vector2PropertyArray: Array<Vector2d>

  @JsName("Vector4PropertyArray")
  public open var vector4PropertyArray: Array<Vector4>

  @JsName("RotatorPropertyArray")
  public open var rotatorPropertyArray: Array<Rotator>

  @JsName("ObjectPropertyArray")
  public open var objectPropertyArray: Array<UObject>

  @JsName("ActorPropertyArray")
  public open var actorPropertyArray: Array<Actor>

  @JsName("LinearColorPropertyArray")
  public open var linearColorPropertyArray: Array<LinearColor>

  @JsName("ColorPropertyArray")
  public open var colorPropertyArray: Array<Color>

  @JsName("EnumPropertyArray")
  public open var enumPropertyArray: Array<String>

  @JsName("StructPropertyArray")
  public open var structPropertyArray: Array<PropertyEditorTestBasicStruct>

  @JsName("StructPropertyArrayWithTitle")
  public open var structPropertyArrayWithTitle: Array<PropertyEditorTestBasicStruct>

  @JsName("StructPropertyArrayWithFormattedTitle")
  public open var structPropertyArrayWithFormattedTitle: Array<PropertyEditorTestBasicStruct>

  @JsName("StructPropertyArrayWithTitleError")
  public open var structPropertyArrayWithTitleError: Array<PropertyEditorTestBasicStruct>

  @JsName("StructPropertyArrayWithFormattedTitleError")
  public open var structPropertyArrayWithFormattedTitleError: Array<PropertyEditorTestBasicStruct>

  @JsName("InstancedStructArray")
  public open var instancedStructArray: Array<PropertyEditorTestInstancedStruct>

  @JsName("InstancedUObjectArray")
  public open var instancedUObjectArray: Array<PropertyEditorTestInstancedObject>

  @JsName("FixedArrayOfInts")
  public open var fixedArrayOfInts: Array<Number>

  @JsName("StaticArrayOfInts")
  public open var staticArrayOfInts: Number

  @JsName("StaticArrayOfIntsWithEnumLabels")
  public open var staticArrayOfIntsWithEnumLabels: Number

  @JsName("FloatRange")
  public open var floatRange: FloatRange

  @JsName("FloatPropertyWithClampedRange")
  public open var floatPropertyWithClampedRange: Number

  @JsName("IntPropertyWithClampedRange")
  public open var intPropertyWithClampedRange: Number

  @JsName("IntThatCannotBeChanged")
  public open var intThatCannotBeChanged: Number

  @JsName("StringThatCannotBeChanged")
  public open var stringThatCannotBeChanged: String

  @JsName("ObjectThatCannotBeChanged")
  public open var objectThatCannotBeChanged: PrimitiveComponent

  @JsName("EnumBitflags")
  public open var enumBitflags: Number

  @JsName("StringPasswordProperty")
  public open var stringPasswordProperty: String

  @JsName("TextPasswordProperty")
  public open var textPasswordProperty: String

  @JsName("ThisIsBrokenIfItsVisibleInADetailsView")
  public open var thisIsBrokenIfItsVisibleInADetailsView: PropertyEditorTestBasicStruct

  @JsName("StructWithMultipleInstances1")
  public open var structWithMultipleInstances1: PropertyEditorTestBasicStruct

  @JsName("bEditConditionStructWithMultipleInstances2")
  public open var editConditionStructWithMultipleInstances2: Boolean

  @JsName("StructWithMultipleInstances2")
  public open var structWithMultipleInstances2: PropertyEditorTestBasicStruct

  @JsName("RichCurve")
  public open var richCurve: RichCurve

  @JsName("AssetReferenceCustomStruct")
  public open var assetReferenceCustomStruct: SoftObjectPath

  @JsName("AssetReferenceCustomStructWithThumbnail")
  public open var assetReferenceCustomStructWithThumbnail: SoftObjectPath

  @JsName("ExactlyPointLightActorReference")
  public open var exactlyPointLightActorReference: SoftObjectPath

  @JsName("LightActorReference")
  public open var lightActorReference: SoftObjectPath

  @JsName("ExactPointOrSpotLightActorReference")
  public open var exactPointOrSpotLightActorReference: SoftObjectPath

  @JsName("LightOrStaticMeshActorReference")
  public open var lightOrStaticMeshActorReference: SoftObjectPath

  @JsName("NotLightActorReference")
  public open var notLightActorReference: SoftObjectPath

  @JsName("MaterialOrTextureAssetReference")
  public open var materialOrTextureAssetReference: SoftObjectPath

  @JsName("ActorWithMetaClass")
  public open var actorWithMetaClass: SoftObjectPath

  @JsName("DisabledByCanEditChange")
  public open var disabledByCanEditChange: SoftObjectPath

  @JsName("bEditCondition")
  public open var editCondition: Boolean

  @JsName("SimplePropertyWithEditCondition")
  public open var simplePropertyWithEditCondition: Number

  @JsName("bEditConditionAssetReferenceCustomStructWithEditCondition")
  public open var editConditionAssetReferenceCustomStructWithEditCondition: Boolean

  @JsName("AssetReferenceCustomStructWithEditCondition")
  public open var assetReferenceCustomStructWithEditCondition: SoftObjectPath

  @JsName("ArrayOfStructs")
  public open var arrayOfStructs: Array<PropertyEditorTestBasicStruct>

  public open var struct: PropertyEditTestTextStruct

  @JsName("EditInlineNewStaticMeshComponent")
  public open var editInlineNewStaticMeshComponent: StaticMeshComponent

  @JsName("ArrayOfEditInlineNewSMCs")
  public open var arrayOfEditInlineNewSmCs: Array<StaticMeshComponent>

  @JsName("TextureProp")
  public open var textureProp: Texture

  @JsName("StaticMeshProp")
  public open var staticMeshProp: StaticMesh

  @JsName("AnyMaterialInterface")
  public open var anyMaterialInterface: MaterialInterface

  @JsName("MaterialNoThumbnail")
  public open var materialNoThumbnail: MaterialInterface

  @JsName("OnlyActorsAllowed")
  public open var onlyActorsAllowed: Actor

  @JsName("Int32Set")
  public open var int32Set: Any

  @JsName("FloatSet")
  public open var floatSet: Any

  @JsName("StringSet")
  public open var stringSet: Any

  @JsName("ObjectSet")
  public open var objectSet: Any

  @JsName("ActorSet")
  public open var actorSet: Any

  @JsName("EditColorSet")
  public open var editColorSet: Any

  @JsName("NameSet")
  public open var nameSet: Any

  @JsName("Int32ToStringMap")
  public open var int32ToStringMap: Any

  @JsName("StringToColorMap")
  public open var stringToColorMap: Any

  @JsName("Int32ToStructMap")
  public open var int32ToStructMap: Any

  @JsName("StringToFloatMap")
  public open var stringToFloatMap: Any

  @JsName("StringToObjectMap")
  public open var stringToObjectMap: Any

  @JsName("StringToActorMap")
  public open var stringToActorMap: Any

  @JsName("ObjectToInt32Map")
  public open var objectToInt32Map: Any

  @JsName("ObjectToColorMap")
  public open var objectToColorMap: Any

  @JsName("IntToEnumMap")
  public open var intToEnumMap: Any

  @JsName("NameToNameMap")
  public open var nameToNameMap: Any

  @JsName("NameToObjectMap")
  public open var nameToObjectMap: Any

  @JsName("NameToCustomMap")
  public open var nameToCustomMap: Any

  @JsName("NameToColorMap")
  public open var nameToColorMap: Any

  @JsName("IntToCustomMap")
  public open var intToCustomMap: Any

  @JsName("IntToSubStructMap")
  public open var intToSubStructMap: Any

  @JsName("LinearColorSet")
  public open var linearColorSet: Any

  @JsName("VectorSet")
  public open var vectorSet: Any

  @JsName("LinearColorToStringMap")
  public open var linearColorToStringMap: Any

  @JsName("VectorToFloatMap")
  public open var vectorToFloatMap: Any

  @JsName("LinearColorToVectorMap")
  public open var linearColorToVectorMap: Any

  @JsName("BlendableInterface")
  public open var blendableInterface: Any

  @JsName("AnimClassInterface")
  public open var animClassInterface: Any

  @JsName("LightPropagationVolumeBlendable")
  public open var lightPropagationVolumeBlendable: Any

  @JsName("TextureOrBlendableInterface")
  public open var textureOrBlendableInterface: UObject

  @JsName("bSubcategory")
  public open var subcategory: Boolean

  @JsName("bSubcategoryAdvanced")
  public open var subcategoryAdvanced: Boolean

  @JsName("bSubcategoryFooSimple")
  public open var subcategoryFooSimple: Boolean

  @JsName("bSubcategoryFooAdvanced")
  public open var subcategoryFooAdvanced: Boolean

  @JsName("bSubcategoryBarSimple")
  public open var subcategoryBarSimple: Boolean

  @JsName("bSubcategoryBarAdvanced")
  public open var subcategoryBarAdvanced: Boolean

  @JsName("bSubcategoryLast")
  public open var subcategoryLast: Boolean

  @JsName("bEnablesNext")
  public open var enablesNext: Boolean

  @JsName("bEnabledByPrevious")
  public open var enabledByPrevious: Boolean

  @JsName("EnumEditCondition")
  public open var enumEditCondition: String

  @JsName("bEnabledWhenBlue")
  public open var enabledWhenBlue: Boolean

  @JsName("bEnabledWhenPink")
  public open var enabledWhenPink: Boolean

  @JsName("EnumAsByteEditCondition")
  public open var enumAsByteEditCondition: String

  @JsName("bEnabledWhenEnumIs2")
  public open var enabledWhenEnumIs2: Boolean

  @JsName("bEnabledWhenEnumIs4")
  public open var enabledWhenEnumIs4: Boolean

  @JsName("IntegerEditCondition")
  public open var integerEditCondition: Number

  @JsName("bEnabledWhenIntGreaterOrEqual5")
  public open var enabledWhenIntGreaterOrEqual5: Boolean

  @JsName("bEnabledWhenIntLessOrEqual10")
  public open var enabledWhenIntLessOrEqual10: Boolean

  @JsName("FloatEditCondition")
  public open var floatEditCondition: Number

  @JsName("bEnabledWhenFloatGreaterThan5")
  public open var enabledWhenFloatGreaterThan5: Boolean

  @JsName("bEnabledWhenFloatLessThan10")
  public open var enabledWhenFloatLessThan10: Boolean

  @JsName("bEditConditionForArrays")
  public open var editConditionForArrays: Boolean

  @JsName("ArrayWithEditCondition")
  public open var arrayWithEditCondition: Array<Texture2d>

  @JsName("ArrayOfStructsWithEditCondition")
  public open var arrayOfStructsWithEditCondition: Array<PropertyEditorTestBasicStruct>

  @JsName("bEditConditionForFixedArray")
  public open var editConditionForFixedArray: Boolean

  @JsName("FixedArrayWithEditCondition")
  public open var fixedArrayWithEditCondition: String

  @JsName("EditConditionFlags")
  public open var editConditionFlags: Any

  @JsName("bEnabledWhenFlagsHasTwoOrFour")
  public open var enabledWhenFlagsHasTwoOrFour: Boolean

  @JsName("bDisabledWhenFlagsIsOdd")
  public open var disabledWhenFlagsIsOdd: Boolean

  @JsName("InlineProperty")
  public open var inlineProperty: String

  @JsName("PropertyThatHides")
  public open var propertyThatHides: String

  @JsName("bVisibleWhenStatic")
  public open var visibleWhenStatic: Boolean

  @JsName("VisibleWhenStationary")
  public open var visibleWhenStationary: Number

  @JsName("DateTime")
  public open var dateTime: DateTime

  @JsName("Timespan")
  public open var timespan: Timespan

  @JsName("Guid")
  public open var guid: Guid

  @JsName("PerPlatformFloat")
  public open var perPlatformFloat: PerPlatformFloat

  @JsName("PerPlatformInt")
  public open var perPlatformInt: PerPlatformInt

  @JsName("bInlineEditConditionWithoutMetaToggle")
  public open var inlineEditConditionWithoutMetaToggle: Boolean

  @JsName("InlineEditConditionWithoutMeta")
  public open var inlineEditConditionWithoutMeta: Number

  @JsName("bInlineEditConditionWithMetaToggle")
  public open var inlineEditConditionWithMetaToggle: Boolean

  @JsName("InlineEditConditionWithMeta")
  public open var inlineEditConditionWithMeta: Number

  @JsName("bInlineEditConditionNotEditable")
  public open var inlineEditConditionNotEditable: Boolean

  @JsName("HasNonEditableInlineCondition")
  public open var hasNonEditableInlineCondition: Number

  @JsName("bSharedEditCondition")
  public open var sharedEditCondition: Boolean

  @JsName("UsesSharedEditCondition1")
  public open var usesSharedEditCondition1: Number

  @JsName("UsesSharedEditCondition2")
  public open var usesSharedEditCondition2: Number

  @JsName("StructWithInlineCondition")
  public open var structWithInlineCondition: PropertyEditorTestEditCondition

  @JsName("ArrayOfStructsWithInlineCondition")
  public open var arrayOfStructsWithInlineCondition: Array<PropertyEditorTestEditCondition>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PropertyEditorTestObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PropertyEditorTestObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyEditorTestObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyEditorTestObject

    @JsName("C")
    public fun copy(other: UObject): PropertyEditorTestObject

    @JsName("C")
    public fun copy(other: Any): PropertyEditorTestObject
  }
}

public open external class BlueprintPropertyTestObject(
  outer: UObject,
) : UObject {
  @JsName("ShouldBeHidden")
  public open var shouldBeHidden: Number

  @JsName("ShouldBeVisible")
  public open var shouldBeVisible: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintPropertyTestObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintPropertyTestObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintPropertyTestObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintPropertyTestObject

    @JsName("C")
    public fun copy(other: UObject): BlueprintPropertyTestObject

    @JsName("C")
    public fun copy(other: Any): BlueprintPropertyTestObject
  }
}

public open external class BlueprintPropertyContainerTestObject(
  outer: UObject,
) : UObject {
  @JsName("Array")
  public open var array: Array<BlueprintPropertyTestObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintPropertyContainerTestObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintPropertyContainerTestObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintPropertyContainerTestObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintPropertyContainerTestObject

    @JsName("C")
    public fun copy(other: UObject): BlueprintPropertyContainerTestObject

    @JsName("C")
    public fun copy(other: Any): BlueprintPropertyContainerTestObject
  }
}

public open external class TestSparseClassDataBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestSparseClassDataBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestSparseClassDataBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestSparseClassDataBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestSparseClassDataBase

    @JsName("C")
    public fun copy(other: UObject): TestSparseClassDataBase

    @JsName("C")
    public fun copy(other: Any): TestSparseClassDataBase
  }
}

public open external class TestSparseClassData(
  outer: UObject,
) : TestSparseClassDataBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestSparseClassData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestSparseClassData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestSparseClassData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestSparseClassData

    @JsName("C")
    public fun copy(other: UObject): TestSparseClassData

    @JsName("C")
    public fun copy(other: Any): TestSparseClassData
  }
}

public open external class PropertyEditorTestActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("GetOptionsValue")
  public open var getOptionsValue: String

  @JsName("GetOptionsFunc")
  public open fun getOptionsFunc(): Array<String>

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyEditorTestActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyEditorTestActor

    @JsName("C")
    public fun copy(other: UObject): PropertyEditorTestActor

    @JsName("C")
    public fun copy(other: Any): PropertyEditorTestActor
  }
}

public open external class ReimportCurveFactory(
  outer: UObject,
) : CsvImportFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportCurveFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportCurveFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportCurveFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportCurveFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportCurveFactory

    @JsName("C")
    public fun copy(other: Any): ReimportCurveFactory
  }
}

public open external class ReimportCurveTableFactory(
  outer: UObject,
) : CsvImportFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportCurveTableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportCurveTableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportCurveTableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportCurveTableFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportCurveTableFactory

    @JsName("C")
    public fun copy(other: Any): ReimportCurveTableFactory
  }
}

public open external class ReimportDataTableFactory(
  outer: UObject,
) : CsvImportFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportDataTableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportDataTableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportDataTableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportDataTableFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportDataTableFactory

    @JsName("C")
    public fun copy(other: Any): ReimportDataTableFactory
  }
}

public open external class ReimportFbxAnimSequenceFactory(
  outer: UObject,
) : FbxFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportFbxAnimSequenceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportFbxAnimSequenceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportFbxAnimSequenceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportFbxAnimSequenceFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportFbxAnimSequenceFactory

    @JsName("C")
    public fun copy(other: Any): ReimportFbxAnimSequenceFactory
  }
}

public open external class ReimportFbxSceneFactory(
  outer: UObject,
) : FbxSceneImportFactory {
  @JsName("ScriptReimportHelper")
  public open fun scriptReimportHelper(obj: UObject): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportFbxSceneFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportFbxSceneFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportFbxSceneFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportFbxSceneFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportFbxSceneFactory

    @JsName("C")
    public fun copy(other: Any): ReimportFbxSceneFactory
  }
}

public open external class ReimportFbxSkeletalMeshFactory(
  outer: UObject,
) : FbxFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportFbxSkeletalMeshFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportFbxSkeletalMeshFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportFbxSkeletalMeshFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportFbxSkeletalMeshFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportFbxSkeletalMeshFactory

    @JsName("C")
    public fun copy(other: Any): ReimportFbxSkeletalMeshFactory
  }
}

public open external class ReimportFbxStaticMeshFactory(
  outer: UObject,
) : FbxFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportFbxStaticMeshFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportFbxStaticMeshFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportFbxStaticMeshFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportFbxStaticMeshFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportFbxStaticMeshFactory

    @JsName("C")
    public fun copy(other: Any): ReimportFbxStaticMeshFactory
  }
}

@JsName("ETextureSourceColorSpace")
public external object TextureSourceColorSpace {
  public var Auto: String

  public var Linear: String

  public var SRGB: String

  @JsName("ETextureSourceColorSpace_MAX")
  public var Max: String
}

public open external class TextureFactory(
  outer: UObject,
) : Factory {
  @JsName("NoCompression")
  public open var noCompression: Boolean

  @JsName("NoAlpha")
  public open var noAlpha: Boolean

  @JsName("bDeferCompression")
  public open var deferCompression: Boolean

  @JsName("CompressionSettings")
  public open var compressionSettings: String

  @JsName("bCreateMaterial")
  public open var createMaterial: Boolean

  @JsName("bRGBToBaseColor")
  public open var rgbToBaseColor: Boolean

  @JsName("bRGBToEmissive")
  public open var rgbToEmissive: Boolean

  @JsName("bAlphaToRoughness")
  public open var alphaToRoughness: Boolean

  @JsName("bAlphaToEmissive")
  public open var alphaToEmissive: Boolean

  @JsName("bAlphaToOpacity")
  public open var alphaToOpacity: Boolean

  @JsName("bAlphaToOpacityMask")
  public open var alphaToOpacityMask: Boolean

  @JsName("bTwoSided")
  public open var twoSided: Boolean

  @JsName("Blending")
  public open var blending: String

  @JsName("ShadingModel")
  public open var shadingModel: String

  @JsName("MipGenSettings")
  public open var mipGenSettings: String

  @JsName("LODGroup")
  public open var lodGroup: String

  @JsName("bDitherMipMapAlpha")
  public open var ditherMipMapAlpha: Boolean

  @JsName("bDoScaleMipsForAlphaCoverage")
  public open var doScaleMipsForAlphaCoverage: Boolean

  @JsName("AlphaCoverageThresholds")
  public open var alphaCoverageThresholds: Vector4

  @JsName("bPreserveBorder")
  public open var preserveBorder: Boolean

  @JsName("bFlipNormalMapGreenChannel")
  public open var flipNormalMapGreenChannel: Boolean

  @JsName("bUsingExistingSettings")
  public open var usingExistingSettings: Boolean

  @JsName("bUseHashAsGuid")
  public open var useHashAsGuid: Boolean

  @JsName("UdimRegexPattern")
  public open var udimRegexPattern: String

  @JsName("ColorSpaceMode")
  public open var colorSpaceMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureFactory

    @JsName("C")
    public fun copy(other: UObject): TextureFactory

    @JsName("C")
    public fun copy(other: Any): TextureFactory
  }
}

public open external class ReimportTextureFactory(
  outer: UObject,
) : TextureFactory {
  public open var pOriginalTex: Texture

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportTextureFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportTextureFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportTextureFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportTextureFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportTextureFactory

    @JsName("C")
    public fun copy(other: Any): ReimportTextureFactory
  }
}

public open external class VectorFieldStaticFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VectorFieldStaticFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VectorFieldStaticFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VectorFieldStaticFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VectorFieldStaticFactory

    @JsName("C")
    public fun copy(other: UObject): VectorFieldStaticFactory

    @JsName("C")
    public fun copy(other: Any): VectorFieldStaticFactory
  }
}

public open external class ReimportVectorFieldStaticFactory(
  outer: UObject,
) : VectorFieldStaticFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportVectorFieldStaticFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportVectorFieldStaticFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportVectorFieldStaticFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportVectorFieldStaticFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportVectorFieldStaticFactory

    @JsName("C")
    public fun copy(other: Any): ReimportVectorFieldStaticFactory
  }
}

@JsName("RenderTargetExporterHDR")
public open external class RenderTargetExporterHdr(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RenderTargetExporterHdr

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RenderTargetExporterHdr

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RenderTargetExporterHdr

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RenderTargetExporterHdr

    @JsName("C")
    public fun copy(other: UObject): RenderTargetExporterHdr

    @JsName("C")
    public fun copy(other: Any): RenderTargetExporterHdr
  }
}

public open external class ReplaceActorCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReplaceActorCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReplaceActorCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReplaceActorCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReplaceActorCommandlet

    @JsName("C")
    public fun copy(other: UObject): ReplaceActorCommandlet

    @JsName("C")
    public fun copy(other: Any): ReplaceActorCommandlet
  }
}

public open external class ReplaceAssetsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReplaceAssetsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReplaceAssetsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReplaceAssetsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReplaceAssetsCommandlet

    @JsName("C")
    public fun copy(other: UObject): ReplaceAssetsCommandlet

    @JsName("C")
    public fun copy(other: Any): ReplaceAssetsCommandlet
  }
}

public open external class SavePackageUtilitiesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SavePackageUtilitiesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SavePackageUtilitiesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SavePackageUtilitiesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SavePackageUtilitiesCommandlet

    @JsName("C")
    public fun copy(other: UObject): SavePackageUtilitiesCommandlet

    @JsName("C")
    public fun copy(other: Any): SavePackageUtilitiesCommandlet
  }
}

public open external class SceneThumbnailInfo(
  outer: UObject,
) : ThumbnailInfo {
  @JsName("OrbitPitch")
  public open var orbitPitch: Number

  @JsName("OrbitYaw")
  public open var orbitYaw: Number

  @JsName("OrbitZoom")
  public open var orbitZoom: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SceneThumbnailInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SceneThumbnailInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SceneThumbnailInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SceneThumbnailInfo

    @JsName("C")
    public fun copy(other: UObject): SceneThumbnailInfo

    @JsName("C")
    public fun copy(other: Any): SceneThumbnailInfo
  }
}

@JsName("EThumbnailPrimType")
public external object ThumbnailPrimType {
  @JsName("TPT_None")
  public var None: String

  @JsName("TPT_Sphere")
  public var Sphere: String

  @JsName("TPT_Cube")
  public var Cube: String

  @JsName("TPT_Plane")
  public var Plane: String

  @JsName("TPT_Cylinder")
  public var Cylinder: String

  @JsName("TPT_MAX")
  public var Max: String
}

public open external class SceneThumbnailInfoWithPrimitive(
  outer: UObject,
) : SceneThumbnailInfo {
  @JsName("PrimitiveType")
  public open var primitiveType: String

  @JsName("PreviewMesh")
  public open var previewMesh: SoftObjectPath

  @JsName("bUserModifiedShape")
  public open var userModifiedShape: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SceneThumbnailInfoWithPrimitive

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SceneThumbnailInfoWithPrimitive

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SceneThumbnailInfoWithPrimitive

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SceneThumbnailInfoWithPrimitive

    @JsName("C")
    public fun copy(other: UObject): SceneThumbnailInfoWithPrimitive

    @JsName("C")
    public fun copy(other: Any): SceneThumbnailInfoWithPrimitive
  }
}

public open external class EditorViewportViewMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorViewportViewMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorViewportViewMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorViewportViewMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorViewportViewMenuContext

    @JsName("C")
    public fun copy(other: UObject): EditorViewportViewMenuContext

    @JsName("C")
    public fun copy(other: Any): EditorViewportViewMenuContext
  }
}

@JsName("SequenceExporterT3D")
public open external class SequenceExporterT3d(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequenceExporterT3d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequenceExporterT3d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequenceExporterT3d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequenceExporterT3d

    @JsName("C")
    public fun copy(other: UObject): SequenceExporterT3d

    @JsName("C")
    public fun copy(other: Any): SequenceExporterT3d
  }
}

public open external class ShaderCodeLibraryToolsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ShaderCodeLibraryToolsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ShaderCodeLibraryToolsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ShaderCodeLibraryToolsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ShaderCodeLibraryToolsCommandlet

    @JsName("C")
    public fun copy(other: UObject): ShaderCodeLibraryToolsCommandlet

    @JsName("C")
    public fun copy(other: Any): ShaderCodeLibraryToolsCommandlet
  }
}

public open external class ShaderPipelineCacheToolsCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ShaderPipelineCacheToolsCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ShaderPipelineCacheToolsCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ShaderPipelineCacheToolsCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ShaderPipelineCacheToolsCommandlet

    @JsName("C")
    public fun copy(other: UObject): ShaderPipelineCacheToolsCommandlet

    @JsName("C")
    public fun copy(other: Any): ShaderPipelineCacheToolsCommandlet
  }
}

@JsName("ESheetAxis")
public external object SheetAxis {
  @JsName("AX_Horizontal")
  public var Horizontal: String

  @JsName("AX_XAxis")
  public var XAxis: String

  @JsName("AX_YAxis")
  public var YAxis: String

  @JsName("AX_MAX")
  public var Max: String
}

public open external class SheetBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  @JsName("XSegments")
  public open var xSegments: Number

  @JsName("YSegments")
  public open var ySegments: Number

  @JsName("Axis")
  public open var axis: String

  @JsName("GroupName")
  public open var groupName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SheetBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SheetBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SheetBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SheetBuilder

    @JsName("C")
    public fun copy(other: UObject): SheetBuilder

    @JsName("C")
    public fun copy(other: Any): SheetBuilder
  }
}

public open external class SkeletalMeshEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("AnimPreviewFloorColor")
  public open var animPreviewFloorColor: Color

  @JsName("AnimPreviewSkyColor")
  public open var animPreviewSkyColor: Color

  @JsName("AnimPreviewSkyBrightness")
  public open var animPreviewSkyBrightness: Number

  @JsName("AnimPreviewLightBrightness")
  public open var animPreviewLightBrightness: Number

  @JsName("AnimPreviewLightingDirection")
  public open var animPreviewLightingDirection: Rotator

  @JsName("AnimPreviewDirectionalColor")
  public open var animPreviewDirectionalColor: Color

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshEditorSettings

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshEditorSettings

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshEditorSettings
  }
}

@JsName("SkeletalMeshExporterFBX")
public open external class SkeletalMeshExporterFbx(
  outer: UObject,
) : ExporterFbx {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshExporterFbx

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshExporterFbx

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshExporterFbx

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshExporterFbx

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshExporterFbx

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshExporterFbx
  }
}

public open external class SkeletalMeshThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshThumbnailRenderer
  }
}

public open external class SkeletalMeshToolMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshToolMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshToolMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshToolMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshToolMenuContext

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshToolMenuContext

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshToolMenuContext
  }
}

public open external class SkeletonFactory(
  outer: UObject,
) : Factory {
  @JsName("TargetSkeletalMesh")
  public open var targetSkeletalMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletonFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletonFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletonFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletonFactory

    @JsName("C")
    public fun copy(other: UObject): SkeletonFactory

    @JsName("C")
    public fun copy(other: Any): SkeletonFactory
  }
}

public open external class SkeletonThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletonThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletonThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletonThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletonThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): SkeletonThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): SkeletonThumbnailRenderer
  }
}

public open external class SlateBrushAssetFactory(
  outer: UObject,
) : Factory {
  @JsName("InitialTexture")
  public open var initialTexture: Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateBrushAssetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateBrushAssetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateBrushAssetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateBrushAssetFactory

    @JsName("C")
    public fun copy(other: UObject): SlateBrushAssetFactory

    @JsName("C")
    public fun copy(other: Any): SlateBrushAssetFactory
  }
}

public open external class SlateBrushThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateBrushThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateBrushThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateBrushThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateBrushThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): SlateBrushThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): SlateBrushThumbnailRenderer
  }
}

public open external class SlateWidgetStyleAssetFactory(
  outer: UObject,
) : Factory {
  @JsName("StyleType")
  public open var styleType: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateWidgetStyleAssetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateWidgetStyleAssetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateWidgetStyleAssetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateWidgetStyleAssetFactory

    @JsName("C")
    public fun copy(other: UObject): SlateWidgetStyleAssetFactory

    @JsName("C")
    public fun copy(other: Any): SlateWidgetStyleAssetFactory
  }
}

@JsName("SMInstanceElementDetailsInterface")
public open external class SmInstanceElementDetailsInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmInstanceElementDetailsInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmInstanceElementDetailsInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmInstanceElementDetailsInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmInstanceElementDetailsInterface

    @JsName("C")
    public fun copy(other: UObject): SmInstanceElementDetailsInterface

    @JsName("C")
    public fun copy(other: Any): SmInstanceElementDetailsInterface
  }
}

@JsName("SMInstanceElementDetailsProxyObject")
public open external class SmInstanceElementDetailsProxyObject(
  outer: UObject,
) : UObject {
  @JsName("Transform")
  public open var transform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmInstanceElementDetailsProxyObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmInstanceElementDetailsProxyObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmInstanceElementDetailsProxyObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmInstanceElementDetailsProxyObject

    @JsName("C")
    public fun copy(other: UObject): SmInstanceElementDetailsProxyObject

    @JsName("C")
    public fun copy(other: Any): SmInstanceElementDetailsProxyObject
  }
}

@JsName("SMInstanceElementSelectionInterface")
public open external class SmInstanceElementSelectionInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmInstanceElementSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmInstanceElementSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmInstanceElementSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmInstanceElementSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): SmInstanceElementSelectionInterface

    @JsName("C")
    public fun copy(other: Any): SmInstanceElementSelectionInterface
  }
}

@JsName("SMInstanceElementEditorSelectionInterface")
public open external class SmInstanceElementEditorSelectionInterface(
  outer: UObject,
) : SmInstanceElementSelectionInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmInstanceElementEditorSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmInstanceElementEditorSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmInstanceElementEditorSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmInstanceElementEditorSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): SmInstanceElementEditorSelectionInterface

    @JsName("C")
    public fun copy(other: Any): SmInstanceElementEditorSelectionInterface
  }
}

@JsName("SMInstanceElementWorldInterface")
public open external class SmInstanceElementWorldInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmInstanceElementWorldInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmInstanceElementWorldInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmInstanceElementWorldInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmInstanceElementWorldInterface

    @JsName("C")
    public fun copy(other: UObject): SmInstanceElementWorldInterface

    @JsName("C")
    public fun copy(other: Any): SmInstanceElementWorldInterface
  }
}

@JsName("SMInstanceElementEditorWorldInterface")
public open external class SmInstanceElementEditorWorldInterface(
  outer: UObject,
) : SmInstanceElementWorldInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmInstanceElementEditorWorldInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmInstanceElementEditorWorldInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmInstanceElementEditorWorldInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmInstanceElementEditorWorldInterface

    @JsName("C")
    public fun copy(other: UObject): SmInstanceElementEditorWorldInterface

    @JsName("C")
    public fun copy(other: Any): SmInstanceElementEditorWorldInterface
  }
}

@JsName("SoundExporterOGG")
public open external class SoundExporterOgg(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundExporterOgg

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundExporterOgg

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundExporterOgg

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundExporterOgg

    @JsName("C")
    public fun copy(other: UObject): SoundExporterOgg

    @JsName("C")
    public fun copy(other: Any): SoundExporterOgg
  }
}

@JsName("SoundExporterWAV")
public open external class SoundExporterWav(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundExporterWav

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundExporterWav

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundExporterWav

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundExporterWav

    @JsName("C")
    public fun copy(other: UObject): SoundExporterWav

    @JsName("C")
    public fun copy(other: Any): SoundExporterWav
  }
}

@JsName("SoundSurroundExporterWAV")
public open external class SoundSurroundExporterWav(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundSurroundExporterWav

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundSurroundExporterWav

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundSurroundExporterWav

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundSurroundExporterWav

    @JsName("C")
    public fun copy(other: UObject): SoundSurroundExporterWav

    @JsName("C")
    public fun copy(other: Any): SoundSurroundExporterWav
  }
}

public open external class SoundWaveThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundWaveThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundWaveThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundWaveThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundWaveThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): SoundWaveThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): SoundWaveThumbnailRenderer
  }
}

public open external class SpiralStairBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("InnerRadius")
  public open var innerRadius: Number

  @JsName("StepWidth")
  public open var stepWidth: Number

  @JsName("StepHeight")
  public open var stepHeight: Number

  @JsName("StepThickness")
  public open var stepThickness: Number

  @JsName("NumStepsPer360")
  public open var numStepsPer360: Number

  @JsName("NumSteps")
  public open var numSteps: Number

  @JsName("GroupName")
  public open var groupName: String

  @JsName("SlopedCeiling")
  public open var slopedCeiling: Boolean

  @JsName("SlopedFloor")
  public open var slopedFloor: Boolean

  @JsName("CounterClockwise")
  public open var counterClockwise: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpiralStairBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpiralStairBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpiralStairBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpiralStairBuilder

    @JsName("C")
    public fun copy(other: UObject): SpiralStairBuilder

    @JsName("C")
    public fun copy(other: Any): SpiralStairBuilder
  }
}

public open external class StabilizeLocalizationKeysCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StabilizeLocalizationKeysCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StabilizeLocalizationKeysCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StabilizeLocalizationKeysCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StabilizeLocalizationKeysCommandlet

    @JsName("C")
    public fun copy(other: UObject): StabilizeLocalizationKeysCommandlet

    @JsName("C")
    public fun copy(other: Any): StabilizeLocalizationKeysCommandlet
  }
}

@JsName("StaticMeshExporterFBX")
public open external class StaticMeshExporterFbx(
  outer: UObject,
) : ExporterFbx {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshExporterFbx

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshExporterFbx

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshExporterFbx

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshExporterFbx

    @JsName("C")
    public fun copy(other: UObject): StaticMeshExporterFbx

    @JsName("C")
    public fun copy(other: Any): StaticMeshExporterFbx
  }
}

@JsName("StaticMeshExporterOBJ")
public open external class StaticMeshExporterObj(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshExporterObj

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshExporterObj

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshExporterObj

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshExporterObj

    @JsName("C")
    public fun copy(other: UObject): StaticMeshExporterObj

    @JsName("C")
    public fun copy(other: Any): StaticMeshExporterObj
  }
}

public open external class StaticMeshMinLodCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshMinLodCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshMinLodCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshMinLodCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshMinLodCommandlet

    @JsName("C")
    public fun copy(other: UObject): StaticMeshMinLodCommandlet

    @JsName("C")
    public fun copy(other: Any): StaticMeshMinLodCommandlet
  }
}

public open external class StaticMeshThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): StaticMeshThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): StaticMeshThumbnailRenderer
  }
}

public open external class StringTableFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StringTableFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StringTableFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StringTableFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StringTableFactory

    @JsName("C")
    public fun copy(other: UObject): StringTableFactory

    @JsName("C")
    public fun copy(other: Any): StringTableFactory
  }
}

public open external class StructureFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StructureFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StructureFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StructureFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StructureFactory

    @JsName("C")
    public fun copy(other: UObject): StructureFactory

    @JsName("C")
    public fun copy(other: Any): StructureFactory
  }
}

@JsName("EStructViewerDeveloperType")
public external object StructViewerDeveloperType {
  @JsName("SVDT_None")
  public var None: String

  @JsName("SVDT_CurrentUser")
  public var CurrentUser: String

  @JsName("SVDT_All")
  public var All: String

  @JsName("SVDT_Max")
  public var Max: String
}

public open external class StructViewerSettings(
  outer: UObject,
) : UObject {
  @JsName("DisplayInternalStructs")
  public open var displayInternalStructs: Boolean

  @JsName("DeveloperFolderType")
  public open var developerFolderType: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StructViewerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StructViewerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StructViewerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StructViewerSettings

    @JsName("C")
    public fun copy(other: UObject): StructViewerSettings

    @JsName("C")
    public fun copy(other: Any): StructViewerSettings
  }
}

public open external class SubsurfaceProfileFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubsurfaceProfileFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubsurfaceProfileFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubsurfaceProfileFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubsurfaceProfileFactory

    @JsName("C")
    public fun copy(other: UObject): SubsurfaceProfileFactory

    @JsName("C")
    public fun copy(other: Any): SubsurfaceProfileFactory
  }
}

public open external class SubsurfaceProfileRenderer(
  outer: UObject,
) : TextureThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubsurfaceProfileRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubsurfaceProfileRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubsurfaceProfileRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubsurfaceProfileRenderer

    @JsName("C")
    public fun copy(other: UObject): SubsurfaceProfileRenderer

    @JsName("C")
    public fun copy(other: Any): SubsurfaceProfileRenderer
  }
}

@JsName("SubUVAnimationFactory")
public open external class SubUvAnimationFactory(
  outer: UObject,
) : Factory {
  @JsName("InitialTexture")
  public open var initialTexture: Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubUvAnimationFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubUvAnimationFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubUvAnimationFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubUvAnimationFactory

    @JsName("C")
    public fun copy(other: UObject): SubUvAnimationFactory

    @JsName("C")
    public fun copy(other: Any): SubUvAnimationFactory
  }
}

public open external class SummarizeTraceCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SummarizeTraceCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SummarizeTraceCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SummarizeTraceCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SummarizeTraceCommandlet

    @JsName("C")
    public fun copy(other: UObject): SummarizeTraceCommandlet

    @JsName("C")
    public fun copy(other: Any): SummarizeTraceCommandlet
  }
}

public open external class SwapSoundForDialogueInCuesCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SwapSoundForDialogueInCuesCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SwapSoundForDialogueInCuesCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SwapSoundForDialogueInCuesCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SwapSoundForDialogueInCuesCommandlet

    @JsName("C")
    public fun copy(other: UObject): SwapSoundForDialogueInCuesCommandlet

    @JsName("C")
    public fun copy(other: Any): SwapSoundForDialogueInCuesCommandlet
  }
}

public open external class TemplateMapMetadata(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TemplateMapMetadata

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TemplateMapMetadata

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TemplateMapMetadata

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TemplateMapMetadata

    @JsName("C")
    public fun copy(other: UObject): TemplateMapMetadata

    @JsName("C")
    public fun copy(other: Any): TemplateMapMetadata
  }
}

public open external class TetrahedronBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("Radius")
  public open var radius: Number

  @JsName("SphereExtrapolation")
  public open var sphereExtrapolation: Number

  @JsName("GroupName")
  public open var groupName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TetrahedronBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TetrahedronBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TetrahedronBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TetrahedronBuilder

    @JsName("C")
    public fun copy(other: UObject): TetrahedronBuilder

    @JsName("C")
    public fun copy(other: Any): TetrahedronBuilder
  }
}

@JsName("ETexAlign")
public external object TexAlign {
  @JsName("TEXALIGN_None")
  public var None: String

  @JsName("TEXALIGN_Default")
  public var Default: String

  @JsName("TEXALIGN_Box")
  public var Box: String

  @JsName("TEXALIGN_Planar")
  public var Planar: String

  @JsName("TEXALIGN_Fit")
  public var Fit: String

  @JsName("TEXALIGN_PlanarAuto")
  public var PlanarAuto: String

  @JsName("TEXALIGN_PlanarWall")
  public var PlanarWall: String

  @JsName("TEXALIGN_PlanarFloor")
  public var PlanarFloor: String

  @JsName("TEXALIGN_MAX")
  public var Max: String
}

public open external class TexAligner(
  outer: UObject,
) : UObject {
  @JsName("DefTexAlign")
  public open var defTexAlign: String

  @JsName("TAxis")
  public open var tAxis: Number

  @JsName("UTile")
  public open var uTile: Number

  @JsName("VTile")
  public open var vTile: Number

  @JsName("Desc")
  public open var desc: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TexAligner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TexAligner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TexAligner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TexAligner

    @JsName("C")
    public fun copy(other: UObject): TexAligner

    @JsName("C")
    public fun copy(other: Any): TexAligner
  }
}

public open external class TexAlignerBox(
  outer: UObject,
) : TexAligner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TexAlignerBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TexAlignerBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TexAlignerBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TexAlignerBox

    @JsName("C")
    public fun copy(other: UObject): TexAlignerBox

    @JsName("C")
    public fun copy(other: Any): TexAlignerBox
  }
}

public open external class TexAlignerDefault(
  outer: UObject,
) : TexAligner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TexAlignerDefault

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TexAlignerDefault

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TexAlignerDefault

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TexAlignerDefault

    @JsName("C")
    public fun copy(other: UObject): TexAlignerDefault

    @JsName("C")
    public fun copy(other: Any): TexAlignerDefault
  }
}

public open external class TexAlignerFit(
  outer: UObject,
) : TexAligner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TexAlignerFit

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TexAlignerFit

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TexAlignerFit

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TexAlignerFit

    @JsName("C")
    public fun copy(other: UObject): TexAlignerFit

    @JsName("C")
    public fun copy(other: Any): TexAlignerFit
  }
}

public open external class TexAlignerPlanar(
  outer: UObject,
) : TexAligner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TexAlignerPlanar

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TexAlignerPlanar

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TexAlignerPlanar

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TexAlignerPlanar

    @JsName("C")
    public fun copy(other: UObject): TexAlignerPlanar

    @JsName("C")
    public fun copy(other: Any): TexAlignerPlanar
  }
}

public open external class TextAssetCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextAssetCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextAssetCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextAssetCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextAssetCommandlet

    @JsName("C")
    public fun copy(other: UObject): TextAssetCommandlet

    @JsName("C")
    public fun copy(other: Any): TextAssetCommandlet
  }
}

@JsName("TextBufferExporterTXT")
public open external class TextBufferExporterTxt(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextBufferExporterTxt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextBufferExporterTxt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextBufferExporterTxt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextBufferExporterTxt

    @JsName("C")
    public fun copy(other: UObject): TextBufferExporterTxt

    @JsName("C")
    public fun copy(other: Any): TextBufferExporterTxt
  }
}

@JsName("Texture2DArrayFactory")
public open external class Texture2dArrayFactory(
  outer: UObject,
) : Factory {
  @JsName("InitialTextures")
  public open var initialTextures: Array<Texture2d>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Texture2dArrayFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Texture2dArrayFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Texture2dArrayFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Texture2dArrayFactory

    @JsName("C")
    public fun copy(other: UObject): Texture2dArrayFactory

    @JsName("C")
    public fun copy(other: Any): Texture2dArrayFactory
  }
}

@JsName("Texture2DArrayThumbnailRenderer")
public open external class Texture2dArrayThumbnailRenderer(
  outer: UObject,
) : TextureThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Texture2dArrayThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Texture2dArrayThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Texture2dArrayThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Texture2dArrayThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): Texture2dArrayThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): Texture2dArrayThumbnailRenderer
  }
}

@JsName("Texture2DFactoryNew")
public open external class Texture2dFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Texture2dFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Texture2dFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Texture2dFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Texture2dFactoryNew

    @JsName("C")
    public fun copy(other: UObject): Texture2dFactoryNew

    @JsName("C")
    public fun copy(other: Any): Texture2dFactoryNew
  }
}

public open external class TextureCubeArrayFactory(
  outer: UObject,
) : Factory {
  @JsName("InitialTextures")
  public open var initialTextures: Array<TextureCube>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureCubeArrayFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureCubeArrayFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureCubeArrayFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureCubeArrayFactory

    @JsName("C")
    public fun copy(other: UObject): TextureCubeArrayFactory

    @JsName("C")
    public fun copy(other: Any): TextureCubeArrayFactory
  }
}

public open external class TextureCubeArrayThumbnailRenderer(
  outer: UObject,
) : TextureThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureCubeArrayThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureCubeArrayThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureCubeArrayThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureCubeArrayThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): TextureCubeArrayThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): TextureCubeArrayThumbnailRenderer
  }
}

@JsName("TextureCubeExporterHDR")
public open external class TextureCubeExporterHdr(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureCubeExporterHdr

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureCubeExporterHdr

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureCubeExporterHdr

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureCubeExporterHdr

    @JsName("C")
    public fun copy(other: UObject): TextureCubeExporterHdr

    @JsName("C")
    public fun copy(other: Any): TextureCubeExporterHdr
  }
}

public open external class TextureCubeThumbnailRenderer(
  outer: UObject,
) : TextureThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureCubeThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureCubeThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureCubeThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureCubeThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): TextureCubeThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): TextureCubeThumbnailRenderer
  }
}

@JsName("TextureExporterBMP")
public open external class TextureExporterBmp(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureExporterBmp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureExporterBmp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureExporterBmp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureExporterBmp

    @JsName("C")
    public fun copy(other: UObject): TextureExporterBmp

    @JsName("C")
    public fun copy(other: Any): TextureExporterBmp
  }
}

@JsName("VirtualTextureBuilderExporterBMP")
public open external class VirtualTextureBuilderExporterBmp(
  outer: UObject,
) : TextureExporterBmp {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VirtualTextureBuilderExporterBmp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VirtualTextureBuilderExporterBmp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VirtualTextureBuilderExporterBmp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VirtualTextureBuilderExporterBmp

    @JsName("C")
    public fun copy(other: UObject): VirtualTextureBuilderExporterBmp

    @JsName("C")
    public fun copy(other: Any): VirtualTextureBuilderExporterBmp
  }
}

@JsName("TextureExporterHDR")
public open external class TextureExporterHdr(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureExporterHdr

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureExporterHdr

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureExporterHdr

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureExporterHdr

    @JsName("C")
    public fun copy(other: UObject): TextureExporterHdr

    @JsName("C")
    public fun copy(other: Any): TextureExporterHdr
  }
}

@JsName("TextureExporterPCX")
public open external class TextureExporterPcx(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureExporterPcx

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureExporterPcx

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureExporterPcx

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureExporterPcx

    @JsName("C")
    public fun copy(other: UObject): TextureExporterPcx

    @JsName("C")
    public fun copy(other: Any): TextureExporterPcx
  }
}

@JsName("TextureExporterTGA")
public open external class TextureExporterTga(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureExporterTga

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureExporterTga

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureExporterTga

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureExporterTga

    @JsName("C")
    public fun copy(other: UObject): TextureExporterTga

    @JsName("C")
    public fun copy(other: Any): TextureExporterTga
  }
}

@JsName("TextureRenderTarget2DArrayFactoryNew")
public open external class TextureRenderTarget2dArrayFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("Slices")
  public open var slices: Number

  @JsName("Format")
  public open var format: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureRenderTarget2dArrayFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureRenderTarget2dArrayFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureRenderTarget2dArrayFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureRenderTarget2dArrayFactoryNew

    @JsName("C")
    public fun copy(other: UObject): TextureRenderTarget2dArrayFactoryNew

    @JsName("C")
    public fun copy(other: Any): TextureRenderTarget2dArrayFactoryNew
  }
}

public open external class TextureRenderTargetCubeFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("Width")
  public open var width: Number

  @JsName("Format")
  public open var format: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureRenderTargetCubeFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureRenderTargetCubeFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureRenderTargetCubeFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureRenderTargetCubeFactoryNew

    @JsName("C")
    public fun copy(other: UObject): TextureRenderTargetCubeFactoryNew

    @JsName("C")
    public fun copy(other: Any): TextureRenderTargetCubeFactoryNew
  }
}

public open external class TextureRenderTargetFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("Format")
  public open var format: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureRenderTargetFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureRenderTargetFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureRenderTargetFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureRenderTargetFactoryNew

    @JsName("C")
    public fun copy(other: UObject): TextureRenderTargetFactoryNew

    @JsName("C")
    public fun copy(other: Any): TextureRenderTargetFactoryNew
  }
}

public open external class TextureRenderTargetVolumeFactoryNew(
  outer: UObject,
) : Factory {
  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("Format")
  public open var format: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureRenderTargetVolumeFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureRenderTargetVolumeFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureRenderTargetVolumeFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureRenderTargetVolumeFactoryNew

    @JsName("C")
    public fun copy(other: UObject): TextureRenderTargetVolumeFactoryNew

    @JsName("C")
    public fun copy(other: Any): TextureRenderTargetVolumeFactoryNew
  }
}

public open external class SkeletalMeshActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("bShouldDoAnimNotifies")
  public open var shouldDoAnimNotifies: Boolean

  @JsName("bWakeOnLevelStart")
  public open var wakeOnLevelStart: Boolean

  @JsName("SkeletalMeshComponent")
  public open var skeletalMeshComponent: SkeletalMeshComponent

  @JsName("ReplicatedMesh")
  public open var replicatedMesh: SkeletalMesh

  @JsName("ReplicatedPhysAsset")
  public open var replicatedPhysAsset: PhysicsAsset

  @JsName("ReplicatedMaterial0")
  public open var replicatedMaterial0: MaterialInterface

  @JsName("ReplicatedMaterial1")
  public open var replicatedMaterial1: MaterialInterface

  @JsName("OnRep_ReplicatedPhysAsset")
  public open fun onRepReplicatedPhysAsset(): Unit

  @JsName("OnRep_ReplicatedMesh")
  public open fun onRepReplicatedMesh(): Unit

  @JsName("OnRep_ReplicatedMaterial1")
  public open fun onRepReplicatedMaterial1(): Unit

  @JsName("OnRep_ReplicatedMaterial0")
  public open fun onRepReplicatedMaterial0(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshActor

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshActor

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshActor
  }
}

public open external class AnimationThumbnailSkeletalMeshActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : SkeletalMeshActor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationThumbnailSkeletalMeshActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationThumbnailSkeletalMeshActor

    @JsName("C")
    public fun copy(other: UObject): AnimationThumbnailSkeletalMeshActor

    @JsName("C")
    public fun copy(other: Any): AnimationThumbnailSkeletalMeshActor
  }
}

public open external class ThumbnailRenderingInfo {
  @JsName("ClassNeedingThumbnailName")
  public open var classNeedingThumbnailName: String

  @JsName("ClassNeedingThumbnail")
  public open var classNeedingThumbnail: UnrealEngineClass

  @JsName("RendererClassName")
  public open var rendererClassName: String

  @JsName("Renderer")
  public open var renderer: ThumbnailRenderer

  public open fun clone(): ThumbnailRenderingInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ThumbnailRenderingInfo

    @JsName("C")
    public fun copy(other: Any): ThumbnailRenderingInfo
  }
}

public open external class ThumbnailManager(
  outer: UObject,
) : UObject {
  @JsName("NotSupported")
  public open var notSupported: ThumbnailRenderingInfo

  @JsName("EditorCube")
  public open var editorCube: StaticMesh

  @JsName("EditorSphere")
  public open var editorSphere: StaticMesh

  @JsName("EditorCylinder")
  public open var editorCylinder: StaticMesh

  @JsName("EditorPlane")
  public open var editorPlane: StaticMesh

  @JsName("EditorSkySphere")
  public open var editorSkySphere: StaticMesh

  @JsName("FloorPlaneMaterial")
  public open var floorPlaneMaterial: Material

  @JsName("AmbientCubemap")
  public open var ambientCubemap: TextureCube

  @JsName("CheckerboardTexture")
  public open var checkerboardTexture: Texture2d

  @JsName("RenderableThumbnailTypes")
  public open var renderableThumbnailTypes: Array<ThumbnailRenderingInfo>

  @JsName("ThumbnailManagerClassName")
  public open var thumbnailManagerClassName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ThumbnailManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ThumbnailManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ThumbnailManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ThumbnailManager

    @JsName("C")
    public fun copy(other: UObject): ThumbnailManager

    @JsName("C")
    public fun copy(other: Any): ThumbnailManager
  }
}

public open external class TouchInterfaceFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TouchInterfaceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TouchInterfaceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TouchInterfaceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TouchInterfaceFactory

    @JsName("C")
    public fun copy(other: UObject): TouchInterfaceFactory

    @JsName("C")
    public fun copy(other: Any): TouchInterfaceFactory
  }
}

public open external class TransBuffer(
  outer: UObject,
) : Transactor {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransBuffer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransBuffer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransBuffer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransBuffer

    @JsName("C")
    public fun copy(other: UObject): TransBuffer

    @JsName("C")
    public fun copy(other: Any): TransBuffer
  }
}

public open external class FontImportOptions(
  outer: UObject,
) : UObject {
  @JsName("Data")
  public open var data: FontImportOptionsData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FontImportOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FontImportOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FontImportOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FontImportOptions

    @JsName("C")
    public fun copy(other: UObject): FontImportOptions

    @JsName("C")
    public fun copy(other: Any): FontImportOptions
  }
}

public open external class TrueTypeFontFactory(
  outer: UObject,
) : TextureFactory {
  @JsName("ImportOptions")
  public open var importOptions: FontImportOptions

  @JsName("bPropertiesConfigured")
  public open var propertiesConfigured: Boolean

  @JsName("bFontSelected")
  public open var fontSelected: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TrueTypeFontFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TrueTypeFontFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TrueTypeFontFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TrueTypeFontFactory

    @JsName("C")
    public fun copy(other: UObject): TrueTypeFontFactory

    @JsName("C")
    public fun copy(other: Any): TrueTypeFontFactory
  }
}

public open external class EditorCommandCategory {
  @JsName("Parent")
  public open var parent: String

  @JsName("Name")
  public open var name: String

  public open fun clone(): EditorCommandCategory

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorCommandCategory

    @JsName("C")
    public fun copy(other: Any): EditorCommandCategory
  }
}

public open external class EditorCommand {
  @JsName("Parent")
  public open var parent: String

  @JsName("CommandName")
  public open var commandName: String

  @JsName("ExecCommand")
  public open var execCommand: String

  @JsName("Description")
  public open var description: String

  public open fun clone(): EditorCommand

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorCommand

    @JsName("C")
    public fun copy(other: Any): EditorCommand
  }
}

public open external class EditorKeyBinding {
  @JsName("bCtrlDown")
  public open var ctrlDown: Boolean

  @JsName("bAltDown")
  public open var altDown: Boolean

  @JsName("bShiftDown")
  public open var shiftDown: Boolean

  @JsName("Key")
  public open var key: Key

  @JsName("CommandName")
  public open var commandName: String

  public open fun clone(): EditorKeyBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorKeyBinding

    @JsName("C")
    public fun copy(other: Any): EditorKeyBinding
  }
}

public open external class UnrealEdKeyBindings(
  outer: UObject,
) : UObject {
  @JsName("KeyBindings")
  public open var keyBindings: Array<EditorKeyBinding>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UnrealEdKeyBindings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UnrealEdKeyBindings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UnrealEdKeyBindings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UnrealEdKeyBindings

    @JsName("C")
    public fun copy(other: UObject): UnrealEdKeyBindings

    @JsName("C")
    public fun copy(other: Any): UnrealEdKeyBindings
  }
}

public open external class ClassPickerDefaults {
  @JsName("ClassName")
  public open var className: String

  @JsName("AssetClass")
  public open var assetClass: String

  public open fun clone(): ClassPickerDefaults

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClassPickerDefaults

    @JsName("C")
    public fun copy(other: Any): ClassPickerDefaults
  }
}

public open external class UnrealEdOptions(
  outer: UObject,
) : UObject {
  @JsName("EditorCategories")
  public open var editorCategories: Array<EditorCommandCategory>

  @JsName("EditorCommands")
  public open var editorCommands: Array<EditorCommand>

  @JsName("EditorKeyBindings")
  public open var editorKeyBindings: UnrealEdKeyBindings

  @JsName("bExpandClassPickerClassList")
  public open var expandClassPickerClassList: Boolean

  @JsName("NewAssetDefaultClasses")
  public open var newAssetDefaultClasses: Array<ClassPickerDefaults>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UnrealEdOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UnrealEdOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UnrealEdOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UnrealEdOptions

    @JsName("C")
    public fun copy(other: UObject): UnrealEdOptions

    @JsName("C")
    public fun copy(other: Any): UnrealEdOptions
  }
}

public external object AnimationCompressionFormat {
  @JsName("ACF_None")
  public var acfNone: String

  @JsName("ACF_Float96NoW")
  public var acfFloat96NoW: String

  @JsName("ACF_Fixed48NoW")
  public var acfFixed48NoW: String

  @JsName("ACF_IntervalFixed32NoW")
  public var acfIntervalFixed32NoW: String

  @JsName("ACF_Fixed32NoW")
  public var acfFixed32NoW: String

  @JsName("ACF_Float32NoW")
  public var acfFloat32NoW: String

  @JsName("ACF_Identity")
  public var acfIdentity: String

  @JsName("ACF_MAX")
  public var acfmax: String
}

public open external class AnimCompress(
  outer: UObject,
) : AnimBoneCompressionCodec {
  @JsName("bNeedsSkeleton")
  public open var needsSkeleton: Boolean

  @JsName("TranslationCompressionFormat")
  public open var translationCompressionFormat: String

  @JsName("RotationCompressionFormat")
  public open var rotationCompressionFormat: String

  @JsName("ScaleCompressionFormat")
  public open var scaleCompressionFormat: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompress

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompress

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompress

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompress

    @JsName("C")
    public fun copy(other: UObject): AnimCompress

    @JsName("C")
    public fun copy(other: Any): AnimCompress
  }
}

public open external class TemplateMapInfo {
  @JsName("ThumbnailTexture")
  public open var thumbnailTexture: Texture2d

  @JsName("Thumbnail")
  public open var thumbnail: SoftObjectPath

  @JsName("Map")
  public open var map: SoftObjectPath

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("Category")
  public open var category: String

  public open fun clone(): TemplateMapInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TemplateMapInfo

    @JsName("C")
    public fun copy(other: Any): TemplateMapInfo
  }
}

public open external class UnrealEdEngine(
  outer: UObject,
) : EditorEngine {
  @JsName("EditorOptionsInst")
  public open var editorOptionsInst: UnrealEdOptions

  @JsName("AutoReimportManager")
  public open var autoReimportManager: AutoReimportManager

  @JsName("MaterialCopyPasteBuffer")
  public open var materialCopyPasteBuffer: Material

  @JsName("SoundCueCopyPasteBuffer")
  public open var soundCueCopyPasteBuffer: SoundCue

  @JsName("AnimationCompressionAlgorithms")
  public open var animationCompressionAlgorithms: Array<AnimCompress>

  @JsName("PackagesToBeFullyLoadedAtStartup")
  public open var packagesToBeFullyLoadedAtStartup: Array<String>

  @JsName("CurrentLODParentActor")
  public open var currentLodParentActor: Actor

  @JsName("bNeedWarningForPkgEngineVer")
  public open var needWarningForPkgEngineVer: Boolean

  @JsName("SortedSpriteCategories")
  public open var sortedSpriteCategories: Array<String>

  @JsName("TemplateMapInfos")
  public open var templateMapInfos: Array<TemplateMapInfo>

  @JsName("CookServer")
  public open var cookServer: CookOnTheFlyServer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UnrealEdEngine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UnrealEdEngine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UnrealEdEngine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UnrealEdEngine

    @JsName("C")
    public fun copy(other: UObject): UnrealEdEngine

    @JsName("C")
    public fun copy(other: Any): UnrealEdEngine
  }
}

public open external class UnrealEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("SetLevelViewportCameraInfo")
  public open fun setLevelViewportCameraInfo(cameraLocation: Vector, cameraRotation: Rotator): Unit

  @JsName("GetLevelViewportCameraInfo")
  public open fun getLevelViewportCameraInfo(cameraLocation: Vector, cameraRotation: Rotator):
      Object436

  @JsName("GetGameWorld")
  public open fun getGameWorld(): World

  @JsName("GetEditorWorld")
  public open fun getEditorWorld(): World

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UnrealEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UnrealEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UnrealEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UnrealEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): UnrealEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): UnrealEditorSubsystem
  }
}

public open external class UnrealEdTypes(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UnrealEdTypes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UnrealEdTypes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UnrealEdTypes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UnrealEdTypes

    @JsName("C")
    public fun copy(other: UObject): UnrealEdTypes

    @JsName("C")
    public fun copy(other: Any): UnrealEdTypes
  }
}

public open external class UnrealPakCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UnrealPakCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UnrealPakCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UnrealPakCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UnrealPakCommandlet

    @JsName("C")
    public fun copy(other: UObject): UnrealPakCommandlet

    @JsName("C")
    public fun copy(other: Any): UnrealPakCommandlet
  }
}

public open external class UpdateGameProjectCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UpdateGameProjectCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UpdateGameProjectCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UpdateGameProjectCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UpdateGameProjectCommandlet

    @JsName("C")
    public fun copy(other: UObject): UpdateGameProjectCommandlet

    @JsName("C")
    public fun copy(other: Any): UpdateGameProjectCommandlet
  }
}

public open external class StructVariableDescription {
  @JsName("VarName")
  public open var varName: String

  @JsName("VarGuid")
  public open var varGuid: Guid

  @JsName("FriendlyName")
  public open var friendlyName: String

  @JsName("DefaultValue")
  public open var defaultValue: String

  @JsName("Category")
  public open var category: String

  @JsName("SubCategory")
  public open var subCategory: String

  @JsName("SubCategoryObject")
  public open var subCategoryObject: UObject

  @JsName("PinValueType")
  public open var pinValueType: EdGraphTerminalType

  @JsName("ContainerType")
  public open var containerType: String

  @JsName("bIsArray")
  public open var isArray: Boolean

  @JsName("bIsSet")
  public open var isSet: Boolean

  @JsName("bIsMap")
  public open var isMap: Boolean

  @JsName("bInvalidMember")
  public open var invalidMember: Boolean

  @JsName("bDontEditOnInstance")
  public open var dontEditOnInstance: Boolean

  @JsName("bEnableSaveGame")
  public open var enableSaveGame: Boolean

  @JsName("bEnableMultiLineText")
  public open var enableMultiLineText: Boolean

  @JsName("bEnable3dWidget")
  public open var enable3dWidget: Boolean

  @JsName("CurrentDefaultValue")
  public open var currentDefaultValue: String

  @JsName("Tooltip")
  public open var tooltip: String

  public open fun clone(): StructVariableDescription

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StructVariableDescription

    @JsName("C")
    public fun copy(other: Any): StructVariableDescription
  }
}

public open external class UserDefinedStructEditorData(
  outer: UObject,
) : UObject {
  @JsName("UniqueNameId")
  public open var uniqueNameId: Any

  @JsName("VariablesDescriptions")
  public open var variablesDescriptions: Array<StructVariableDescription>

  @JsName("Tooltip")
  public open var tooltip: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserDefinedStructEditorData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserDefinedStructEditorData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserDefinedStructEditorData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserDefinedStructEditorData

    @JsName("C")
    public fun copy(other: UObject): UserDefinedStructEditorData

    @JsName("C")
    public fun copy(other: Any): UserDefinedStructEditorData
  }
}

public open external class VectorFieldExporter(
  outer: UObject,
) : Exporter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VectorFieldExporter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VectorFieldExporter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VectorFieldExporter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VectorFieldExporter

    @JsName("C")
    public fun copy(other: UObject): VectorFieldExporter

    @JsName("C")
    public fun copy(other: Any): VectorFieldExporter
  }
}

public open external class VolumeTextureFactory(
  outer: UObject,
) : Factory {
  @JsName("InitialTexture")
  public open var initialTexture: Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumeTextureFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumeTextureFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumeTextureFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumeTextureFactory

    @JsName("C")
    public fun copy(other: UObject): VolumeTextureFactory

    @JsName("C")
    public fun copy(other: Any): VolumeTextureFactory
  }
}

public open external class VolumeTextureThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  @JsName("MaterialInstance")
  public open var materialInstance: MaterialInstanceConstant

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumeTextureThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumeTextureThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumeTextureThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumeTextureThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): VolumeTextureThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): VolumeTextureThumbnailRenderer
  }
}

public open external class VolumetricBuilder(
  outer: UObject,
) : EditorBrushBuilder {
  @JsName("Z")
  public open var z: Number

  @JsName("Radius")
  public open var radius: Number

  @JsName("NumSheets")
  public open var numSheets: Number

  @JsName("GroupName")
  public open var groupName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumetricBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumetricBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumetricBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumetricBuilder

    @JsName("C")
    public fun copy(other: UObject): VolumetricBuilder

    @JsName("C")
    public fun copy(other: Any): VolumetricBuilder
  }
}

public open external class WorldFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldFactory

    @JsName("C")
    public fun copy(other: UObject): WorldFactory

    @JsName("C")
    public fun copy(other: Any): WorldFactory
  }
}

public open external class WorldFolders(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldFolders

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldFolders

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldFolders

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldFolders

    @JsName("C")
    public fun copy(other: UObject): WorldFolders

    @JsName("C")
    public fun copy(other: Any): WorldFolders
  }
}

public open external class WorldPartitionBuilder(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionBuilder

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionBuilder

    @JsName("C")
    public fun copy(other: Any): WorldPartitionBuilder
  }
}

public open external class WorldPartitionBuilderCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("Builders")
  public open var builders: Array<WorldPartitionBuilder>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionBuilderCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionBuilderCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionBuilderCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionBuilderCommandlet

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionBuilderCommandlet

    @JsName("C")
    public fun copy(other: Any): WorldPartitionBuilderCommandlet
  }
}

public open external class WorldPartitionBuildNavigationOptions(
  outer: UObject,
) : UObject {
  @JsName("bVerbose")
  public open var verbose: Boolean

  @JsName("bCleanPackages")
  public open var cleanPackages: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionBuildNavigationOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionBuildNavigationOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionBuildNavigationOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionBuildNavigationOptions

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionBuildNavigationOptions

    @JsName("C")
    public fun copy(other: Any): WorldPartitionBuildNavigationOptions
  }
}

@JsName("HLODLayerActorMapping")
public open external class HlodLayerActorMapping {
  @JsName("ActorClass")
  public open var actorClass: Class

  @JsName("HLODLayer")
  public open var hlodLayer: String

  public open fun clone(): HlodLayerActorMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): HlodLayerActorMapping

    @JsName("C")
    public fun copy(other: Any): HlodLayerActorMapping
  }
}

public open external class WorldPartitionConvertCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("EditorHashClass")
  public open var editorHashClass: UnrealEngineClass

  @JsName("RuntimeHashClass")
  public open var runtimeHashClass: UnrealEngineClass

  @JsName("ExcludedLevels")
  public open var excludedLevels: Array<String>

  @JsName("bConvertActorsNotReferencedByLevelScript")
  public open var convertActorsNotReferencedByLevelScript: Boolean

  @JsName("WorldOrigin")
  public open var worldOrigin: Vector

  @JsName("WorldExtent")
  public open var worldExtent: Vector

  @JsName("HLODLayerAssetsPath")
  public open var hlodLayerAssetsPath: String

  @JsName("DefaultHLODLayerName")
  public open var defaultHlodLayerName: String

  @JsName("FoliageTypePath")
  public open var foliageTypePath: String

  @JsName("HLODLayersForActorClasses")
  public open var hlodLayersForActorClasses: Array<HlodLayerActorMapping>

  @JsName("HLODLayers")
  public open var hlodLayers: Any

  @JsName("LandscapeGridSize")
  public open var landscapeGridSize: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionConvertCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionConvertCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionConvertCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionConvertCommandlet

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionConvertCommandlet

    @JsName("C")
    public fun copy(other: Any): WorldPartitionConvertCommandlet
  }
}

public open external class WorldPartitionFoliageBuilder(
  outer: UObject,
) : WorldPartitionBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionFoliageBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionFoliageBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionFoliageBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionFoliageBuilder

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionFoliageBuilder

    @JsName("C")
    public fun copy(other: Any): WorldPartitionFoliageBuilder
  }
}

@JsName("WorldPartitionHLODsBuilder")
public open external class WorldPartitionHloDsBuilder(
  outer: UObject,
) : WorldPartitionBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionHloDsBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionHloDsBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionHloDsBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionHloDsBuilder

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionHloDsBuilder

    @JsName("C")
    public fun copy(other: Any): WorldPartitionHloDsBuilder
  }
}

public open external class WorldPartitionMiniMapBuilder(
  outer: UObject,
) : WorldPartitionBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionMiniMapBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionMiniMapBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionMiniMapBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionMiniMapBuilder

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionMiniMapBuilder

    @JsName("C")
    public fun copy(other: Any): WorldPartitionMiniMapBuilder
  }
}

public open external class WorldPartitionNavigationDataBuilder(
  outer: UObject,
) : WorldPartitionBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionNavigationDataBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionNavigationDataBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionNavigationDataBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionNavigationDataBuilder

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionNavigationDataBuilder

    @JsName("C")
    public fun copy(other: Any): WorldPartitionNavigationDataBuilder
  }
}

public open external class WorldPartitionRenameDuplicateBuilder(
  outer: UObject,
) : WorldPartitionBuilder {
  @JsName("DuplicatedObjects")
  public open var duplicatedObjects: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionRenameDuplicateBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionRenameDuplicateBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionRenameDuplicateBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionRenameDuplicateBuilder

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionRenameDuplicateBuilder

    @JsName("C")
    public fun copy(other: Any): WorldPartitionRenameDuplicateBuilder
  }
}

public open external class WorldPartitionResaveActorsBuilder(
  outer: UObject,
) : WorldPartitionBuilder {
  @JsName("ActorClassName")
  public open var actorClassName: String

  @JsName("bReportOnly")
  public open var reportOnly: Boolean

  @JsName("bResaveDirtyActorDescsOnly")
  public open var resaveDirtyActorDescsOnly: Boolean

  @JsName("bSwitchActorPackagingSchemeToReduced")
  public open var switchActorPackagingSchemeToReduced: Boolean

  @JsName("bEnableActorFolders")
  public open var enableActorFolders: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionResaveActorsBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionResaveActorsBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionResaveActorsBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionResaveActorsBuilder

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionResaveActorsBuilder

    @JsName("C")
    public fun copy(other: Any): WorldPartitionResaveActorsBuilder
  }
}

@JsName("EOrthoThumbnailDirection")
public external object OrthoThumbnailDirection {
  public var Top: String

  public var Bottom: String

  public var Left: String

  public var Right: String

  public var Front: String

  public var Back: String

  @JsName("EOrthoThumbnailDirection_MAX")
  public var Max: String
}

public open external class WorldThumbnailInfo(
  outer: UObject,
) : SceneThumbnailInfo {
  @JsName("CameraMode")
  public open var cameraMode: String

  @JsName("OrthoDirection")
  public open var orthoDirection: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldThumbnailInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldThumbnailInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldThumbnailInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldThumbnailInfo

    @JsName("C")
    public fun copy(other: UObject): WorldThumbnailInfo

    @JsName("C")
    public fun copy(other: Any): WorldThumbnailInfo
  }
}

public open external class WorldThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  @JsName("GlobalOrbitPitchOffset")
  public open var globalOrbitPitchOffset: Number

  @JsName("GlobalOrbitYawOffset")
  public open var globalOrbitYawOffset: Number

  @JsName("bUseUnlitScene")
  public open var useUnlitScene: Boolean

  @JsName("bAllowWorldThumbnails")
  public open var allowWorldThumbnails: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): WorldThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): WorldThumbnailRenderer
  }
}

public open external class WrangleContentCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WrangleContentCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WrangleContentCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WrangleContentCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WrangleContentCommandlet

    @JsName("C")
    public fun copy(other: UObject): WrangleContentCommandlet

    @JsName("C")
    public fun copy(other: Any): WrangleContentCommandlet
  }
}

public open external class FoliageStatistics(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageStatistics

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageStatistics

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageStatistics

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageStatistics

    @JsName("FoliageOverlappingSphereCount")
    public fun foliageOverlappingSphereCount(
      worldContextObject: UObject,
      staticMesh: StaticMesh,
      centerPosition: Vector,
      radius: Number,
    ): Number

    @JsName("FoliageOverlappingBoxTransforms")
    public fun foliageOverlappingBoxTransforms(
      worldContextObject: UObject,
      staticMesh: StaticMesh,
      box: Box,
      outTransforms: Array<Transform>,
    ): OutTransformsProvider

    @JsName("FoliageOverlappingBoxCount")
    public fun foliageOverlappingBoxCount(
      worldContextObject: UObject,
      staticMesh: StaticMesh,
      box: Box,
    ): Number

    @JsName("C")
    public fun copy(other: UObject): FoliageStatistics

    @JsName("C")
    public fun copy(other: Any): FoliageStatistics
  }
}

@JsName("FoliageType_Actor")
public open external class FoliageTypeActor(
  outer: UObject,
) : FoliageType {
  @JsName("ActorClass")
  public open var actorClass: UnrealEngineClass

  @JsName("bShouldAttachToBaseComponent")
  public open var shouldAttachToBaseComponent: Boolean

  @JsName("bStaticMeshOnly")
  public open var staticMeshOnly: Boolean

  @JsName("StaticMeshOnlyComponentClass")
  public open var staticMeshOnlyComponentClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageTypeActor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageTypeActor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageTypeActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageTypeActor

    @JsName("C")
    public fun copy(other: UObject): FoliageTypeActor

    @JsName("C")
    public fun copy(other: Any): FoliageTypeActor
  }
}

public open external class PartitionActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("GridSize")
  public open var gridSize: Any

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PartitionActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PartitionActor

    @JsName("C")
    public fun copy(other: UObject): PartitionActor

    @JsName("C")
    public fun copy(other: Any): PartitionActor
  }
}

@JsName("ISMComponentInstance")
public open external class IsmComponentInstance {
  @JsName("ClientIndex")
  public open var clientIndex: Number

  @JsName("InstanceIndex")
  public open var instanceIndex: Number

  @JsName("InstanceSubIndex")
  public open var instanceSubIndex: Number

  public open fun clone(): IsmComponentInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IsmComponentInstance

    @JsName("C")
    public fun copy(other: Any): IsmComponentInstance
  }
}

@JsName("ISMClientInstance")
public open external class IsmClientInstance {
  @JsName("ComponentIndices")
  public open var componentIndices: Array<Number>

  public open fun clone(): IsmClientInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IsmClientInstance

    @JsName("C")
    public fun copy(other: Any): IsmClientInstance
  }
}

@JsName("ISMClientData")
public open external class IsmClientData {
  @JsName("Instances")
  public open var instances: Array<IsmClientInstance>

  public open fun clone(): IsmClientData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IsmClientData

    @JsName("C")
    public fun copy(other: Any): IsmClientData
  }
}

@JsName("ISMComponentData")
public open external class IsmComponentData {
  @JsName("Instances")
  public open var instances: Array<IsmComponentInstance>

  @JsName("ClientInstances")
  public open var clientInstances: Array<IsmClientData>

  @JsName("Component")
  public open var component: InstancedStaticMeshComponent

  public open fun clone(): IsmComponentData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IsmComponentData

    @JsName("C")
    public fun copy(other: Any): IsmComponentData
  }
}

@JsName("ISMPartitionActor")
public open external class IsmPartitionActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : PartitionActor {
  @JsName("Clients")
  public open var clients: Array<Guid>

  @JsName("Descriptors")
  public open var descriptors: Array<IsmComponentDescriptor>

  @JsName("DescriptorComponents")
  public open var descriptorComponents: Array<IsmComponentData>

  @JsName("ClientInstanceManagers")
  public open var clientInstanceManagers: Any

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IsmPartitionActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IsmPartitionActor

    @JsName("C")
    public fun copy(other: UObject): IsmPartitionActor

    @JsName("C")
    public fun copy(other: Any): IsmPartitionActor
  }
}

public open external class InstancedFoliageActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : IsmPartitionActor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InstancedFoliageActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InstancedFoliageActor

    @JsName("RemoveAllInstances")
    public fun removeAllInstances(worldContextObject: UObject, inFoliageType: FoliageType): Unit

    @JsName("AddInstances")
    public fun addInstances(
      worldContextObject: UObject,
      inFoliageType: FoliageType,
      inTransforms: Array<Transform>,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): InstancedFoliageActor

    @JsName("C")
    public fun copy(other: Any): InstancedFoliageActor
  }
}

@JsName("ENavDataGatheringMode")
public external object NavDataGatheringMode {
  public var Default: String

  public var Instant: String

  public var Lazy: String

  @JsName("ENavDataGatheringMode_MAX")
  public var Max: String
}

public open external class StaticMeshActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("StaticMeshComponent")
  public open var staticMeshComponent: StaticMeshComponent

  @JsName("bStaticMeshReplicateMovement")
  public open var staticMeshReplicateMovement: Boolean

  @JsName("NavigationGeometryGatheringMode")
  public open var navigationGeometryGatheringMode: String

  @JsName("SetMobility")
  public open fun setMobility(inMobility: String): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshActor

    @JsName("C")
    public fun copy(other: UObject): StaticMeshActor

    @JsName("C")
    public fun copy(other: Any): StaticMeshActor
  }
}

public open external class InteractiveFoliageActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : StaticMeshActor {
  @JsName("CapsuleComponent")
  public open var capsuleComponent: CapsuleComponent

  @JsName("TouchingActorEntryPosition")
  public open var touchingActorEntryPosition: Vector

  @JsName("FoliageVelocity")
  public open var foliageVelocity: Vector

  @JsName("FoliageForce")
  public open var foliageForce: Vector

  @JsName("FoliagePosition")
  public open var foliagePosition: Vector

  @JsName("FoliageDamageImpulseScale")
  public open var foliageDamageImpulseScale: Number

  @JsName("FoliageTouchImpulseScale")
  public open var foliageTouchImpulseScale: Number

  @JsName("FoliageStiffness")
  public open var foliageStiffness: Number

  @JsName("FoliageStiffnessQuadratic")
  public open var foliageStiffnessQuadratic: Number

  @JsName("FoliageDamping")
  public open var foliageDamping: Number

  @JsName("MaxDamageImpulse")
  public open var maxDamageImpulse: Number

  @JsName("MaxTouchImpulse")
  public open var maxTouchImpulse: Number

  @JsName("MaxForce")
  public open var maxForce: Number

  @JsName("Mass")
  public open var mass: Number

  @JsName("CapsuleTouched")
  public open fun capsuleTouched(
    overlappedComp: PrimitiveComponent,
    other: Actor,
    otherComp: PrimitiveComponent,
    otherBodyIndex: Number,
    fromSweep: Boolean,
    overlapInfo: HitResult,
  ): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveFoliageActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveFoliageActor

    @JsName("C")
    public fun copy(other: UObject): InteractiveFoliageActor

    @JsName("C")
    public fun copy(other: Any): InteractiveFoliageActor
  }
}

public open external class InteractiveFoliageComponent(
  outer: UObject,
) : StaticMeshComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveFoliageComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveFoliageComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveFoliageComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveFoliageComponent

    @JsName("C")
    public fun copy(other: UObject): InteractiveFoliageComponent

    @JsName("C")
    public fun copy(other: Any): InteractiveFoliageComponent
  }
}

public open external class ProceduralFoliageBlockingVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("ProceduralFoliageVolume")
  public open var proceduralFoliageVolume: ProceduralFoliageVolume

  @JsName("DensityFalloff")
  public open var densityFalloff: FoliageDensityFalloff

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralFoliageBlockingVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralFoliageBlockingVolume

    @JsName("C")
    public fun copy(other: UObject): ProceduralFoliageBlockingVolume

    @JsName("C")
    public fun copy(other: Any): ProceduralFoliageBlockingVolume
  }
}

public open external class ProceduralFoliageInstance {
  @JsName("Rotation")
  public open var rotation: Quat

  @JsName("Location")
  public open var location: Vector

  @JsName("Age")
  public open var age: Number

  @JsName("Normal")
  public open var normal: Vector

  @JsName("Scale")
  public open var scale: Number

  @JsName("Type")
  public open var type: FoliageType

  public open fun clone(): ProceduralFoliageInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ProceduralFoliageInstance

    @JsName("C")
    public fun copy(other: Any): ProceduralFoliageInstance
  }
}

public open external class ProceduralFoliageTile(
  outer: UObject,
) : UObject {
  @JsName("FoliageSpawner")
  public open var foliageSpawner: ProceduralFoliageSpawner

  @JsName("InstancesArray")
  public open var instancesArray: Array<ProceduralFoliageInstance>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralFoliageTile

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralFoliageTile

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralFoliageTile

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralFoliageTile

    @JsName("C")
    public fun copy(other: UObject): ProceduralFoliageTile

    @JsName("C")
    public fun copy(other: Any): ProceduralFoliageTile
  }
}

public open external class ImageWriteBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImageWriteBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImageWriteBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImageWriteBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImageWriteBlueprintLibrary

    @JsName("ExportToDisk")
    public fun exportToDisk(
      texture: Texture,
      filename: String,
      options: ImageWriteOptions,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): ImageWriteBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): ImageWriteBlueprintLibrary
  }
}

public open external class ControlPointMeshComponent(
  outer: UObject,
) : StaticMeshComponent {
  @JsName("bSelected")
  public open var selected: Boolean

  @JsName("VirtualTextureMainPassMaxDrawDistance")
  public open var virtualTextureMainPassMaxDrawDistance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlPointMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlPointMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlPointMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlPointMeshComponent

    @JsName("C")
    public fun copy(other: UObject): ControlPointMeshComponent

    @JsName("C")
    public fun copy(other: Any): ControlPointMeshComponent
  }
}

public open external class ControlPointMeshActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("ControlPointMeshComponent")
  public open var controlPointMeshComponent: ControlPointMeshComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlPointMeshActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlPointMeshActor

    @JsName("C")
    public fun copy(other: UObject): ControlPointMeshActor

    @JsName("C")
    public fun copy(other: Any): ControlPointMeshActor
  }
}

public open external class LandscapeSplineInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeSplineInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeSplineInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeSplineInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeSplineInterface

    @JsName("C")
    public fun copy(other: UObject): LandscapeSplineInterface

    @JsName("C")
    public fun copy(other: Any): LandscapeSplineInterface
  }
}

public open external class LandscapeSplineSegmentConnection {
  @JsName("ControlPoint")
  public open var controlPoint: LandscapeSplineControlPoint

  @JsName("TangentLen")
  public open var tangentLen: Number

  @JsName("SocketName")
  public open var socketName: String

  public open fun clone(): LandscapeSplineSegmentConnection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeSplineSegmentConnection

    @JsName("C")
    public fun copy(other: Any): LandscapeSplineSegmentConnection
  }
}

public external object LandscapeSplineMeshOrientation {
  @JsName("LSMO_XUp")
  public var lsmoxUp: String

  @JsName("LSMO_YUp")
  public var lsmoyUp: String

  @JsName("LSMO_MAX")
  public var lsmomax: String
}

public open external class LandscapeSplineMeshEntry {
  @JsName("Mesh")
  public open var mesh: StaticMesh

  @JsName("MaterialOverrides")
  public open var materialOverrides: Array<MaterialInterface>

  @JsName("bCenterH")
  public open var centerH: Boolean

  @JsName("CenterAdjust")
  public open var centerAdjust: Vector2d

  @JsName("bScaleToWidth")
  public open var scaleToWidth: Boolean

  @JsName("Scale")
  public open var scale: Vector

  @JsName("Orientation")
  public open var orientation: String

  @JsName("ForwardAxis")
  public open var forwardAxis: String

  @JsName("UpAxis")
  public open var upAxis: String

  public open fun clone(): LandscapeSplineMeshEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeSplineMeshEntry

    @JsName("C")
    public fun copy(other: Any): LandscapeSplineMeshEntry
  }
}

public open external class LandscapeSplineInterpPoint {
  @JsName("Center")
  public open var center: Vector

  @JsName("Left")
  public open var left: Vector

  @JsName("Right")
  public open var right: Vector

  @JsName("FalloffLeft")
  public open var falloffLeft: Vector

  @JsName("FalloffRight")
  public open var falloffRight: Vector

  @JsName("LayerLeft")
  public open var layerLeft: Vector

  @JsName("LayerRight")
  public open var layerRight: Vector

  @JsName("LayerFalloffLeft")
  public open var layerFalloffLeft: Vector

  @JsName("LayerFalloffRight")
  public open var layerFalloffRight: Vector

  @JsName("StartEndFalloff")
  public open var startEndFalloff: Number

  public open fun clone(): LandscapeSplineInterpPoint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeSplineInterpPoint

    @JsName("C")
    public fun copy(other: Any): LandscapeSplineInterpPoint
  }
}

public open external class LandscapeSplineSegment(
  outer: UObject,
) : UObject {
  @JsName("Connections")
  public open var connections: LandscapeSplineSegmentConnection

  @JsName("LayerName")
  public open var layerName: String

  @JsName("bRaiseTerrain")
  public open var raiseTerrain: Boolean

  @JsName("bLowerTerrain")
  public open var lowerTerrain: Boolean

  @JsName("SplineMeshes")
  public open var splineMeshes: Array<LandscapeSplineMeshEntry>

  @JsName("bEnableCollision")
  public open var enableCollision: Boolean

  @JsName("CollisionProfileName")
  public open var collisionProfileName: String

  @JsName("bCastShadow")
  public open var castShadow: Boolean

  @JsName("bHiddenInGame")
  public open var hiddenInGame: Boolean

  @JsName("bPlaceSplineMeshesInStreamingLevels")
  public open var placeSplineMeshesInStreamingLevels: Boolean

  @JsName("RandomSeed")
  public open var randomSeed: Number

  @JsName("LDMaxDrawDistance")
  public open var ldMaxDrawDistance: Number

  @JsName("TranslucencySortPriority")
  public open var translucencySortPriority: Number

  @JsName("bRenderCustomDepth")
  public open var renderCustomDepth: Boolean

  @JsName("CustomDepthStencilWriteMask")
  public open var customDepthStencilWriteMask: String

  @JsName("CustomDepthStencilValue")
  public open var customDepthStencilValue: Number

  @JsName("RuntimeVirtualTextures")
  public open var runtimeVirtualTextures: Array<RuntimeVirtualTexture>

  @JsName("VirtualTextureLodBias")
  public open var virtualTextureLodBias: Number

  @JsName("VirtualTextureCullMips")
  public open var virtualTextureCullMips: Number

  @JsName("VirtualTextureMainPassMaxDrawDistance")
  public open var virtualTextureMainPassMaxDrawDistance: Number

  @JsName("VirtualTextureRenderPassType")
  public open var virtualTextureRenderPassType: String

  @JsName("BodyInstance")
  public open var bodyInstance: BodyInstance

  @JsName("bSelected")
  public open var selected: Boolean

  @JsName("bNavDirty")
  public open var navDirty: Boolean

  @JsName("SplineInfo")
  public open var splineInfo: InterpCurveVector

  @JsName("Points")
  public open var points: Array<LandscapeSplineInterpPoint>

  @JsName("Bounds")
  public open var bounds: Box

  @JsName("LocalMeshComponents")
  public open var localMeshComponents: Array<SplineMeshComponent>

  @JsName("ForeignWorlds")
  public open var foreignWorlds: Array<World>

  @JsName("ModificationKey")
  public open var modificationKey: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeSplineSegment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeSplineSegment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeSplineSegment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeSplineSegment

    @JsName("C")
    public fun copy(other: UObject): LandscapeSplineSegment

    @JsName("C")
    public fun copy(other: Any): LandscapeSplineSegment
  }
}

public open external class LandscapeSplineConnection {
  @JsName("Segment")
  public open var segment: LandscapeSplineSegment

  @JsName("End")
  public open var end: Boolean

  public open fun clone(): LandscapeSplineConnection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeSplineConnection

    @JsName("C")
    public fun copy(other: Any): LandscapeSplineConnection
  }
}

public open external class LandscapeSplineControlPoint(
  outer: UObject,
) : UObject {
  @JsName("Location")
  public open var location: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("Width")
  public open var width: Number

  @JsName("LayerWidthRatio")
  public open var layerWidthRatio: Number

  @JsName("SideFalloff")
  public open var sideFalloff: Number

  @JsName("LeftSideFalloffFactor")
  public open var leftSideFalloffFactor: Number

  @JsName("RightSideFalloffFactor")
  public open var rightSideFalloffFactor: Number

  @JsName("LeftSideLayerFalloffFactor")
  public open var leftSideLayerFalloffFactor: Number

  @JsName("RightSideLayerFalloffFactor")
  public open var rightSideLayerFalloffFactor: Number

  @JsName("EndFalloff")
  public open var endFalloff: Number

  @JsName("SegmentMeshOffset")
  public open var segmentMeshOffset: Number

  @JsName("LayerName")
  public open var layerName: String

  @JsName("bRaiseTerrain")
  public open var raiseTerrain: Boolean

  @JsName("bLowerTerrain")
  public open var lowerTerrain: Boolean

  @JsName("Mesh")
  public open var mesh: StaticMesh

  @JsName("MaterialOverrides")
  public open var materialOverrides: Array<MaterialInterface>

  @JsName("MeshScale")
  public open var meshScale: Vector

  @JsName("bEnableCollision")
  public open var enableCollision: Boolean

  @JsName("CollisionProfileName")
  public open var collisionProfileName: String

  @JsName("bCastShadow")
  public open var castShadow: Boolean

  @JsName("bHiddenInGame")
  public open var hiddenInGame: Boolean

  @JsName("bPlaceSplineMeshesInStreamingLevels")
  public open var placeSplineMeshesInStreamingLevels: Boolean

  @JsName("LDMaxDrawDistance")
  public open var ldMaxDrawDistance: Number

  @JsName("TranslucencySortPriority")
  public open var translucencySortPriority: Number

  @JsName("bRenderCustomDepth")
  public open var renderCustomDepth: Boolean

  @JsName("CustomDepthStencilWriteMask")
  public open var customDepthStencilWriteMask: String

  @JsName("CustomDepthStencilValue")
  public open var customDepthStencilValue: Number

  @JsName("RuntimeVirtualTextures")
  public open var runtimeVirtualTextures: Array<RuntimeVirtualTexture>

  @JsName("VirtualTextureLodBias")
  public open var virtualTextureLodBias: Number

  @JsName("VirtualTextureCullMips")
  public open var virtualTextureCullMips: Number

  @JsName("VirtualTextureMainPassMaxDrawDistance")
  public open var virtualTextureMainPassMaxDrawDistance: Number

  @JsName("VirtualTextureRenderPassType")
  public open var virtualTextureRenderPassType: String

  @JsName("BodyInstance")
  public open var bodyInstance: BodyInstance

  @JsName("bSelected")
  public open var selected: Boolean

  @JsName("bNavDirty")
  public open var navDirty: Boolean

  @JsName("ConnectedSegments")
  public open var connectedSegments: Array<LandscapeSplineConnection>

  @JsName("Points")
  public open var points: Array<LandscapeSplineInterpPoint>

  @JsName("Bounds")
  public open var bounds: Box

  @JsName("LocalMeshComponent")
  public open var localMeshComponent: ControlPointMeshComponent

  @JsName("ForeignWorld")
  public open var foreignWorld: World

  @JsName("ModificationKey")
  public open var modificationKey: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeSplineControlPoint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeSplineControlPoint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeSplineControlPoint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeSplineControlPoint

    @JsName("C")
    public fun copy(other: UObject): LandscapeSplineControlPoint

    @JsName("C")
    public fun copy(other: Any): LandscapeSplineControlPoint
  }
}

public open external class LandscapeSplinesComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("SplineResolution")
  public open var splineResolution: Number

  @JsName("SplineColor")
  public open var splineColor: Color

  @JsName("ControlPointSprite")
  public open var controlPointSprite: Texture2d

  @JsName("SplineEditorMesh")
  public open var splineEditorMesh: StaticMesh

  @JsName("bShowSplineEditorMesh")
  public open var showSplineEditorMesh: Boolean

  @JsName("ControlPoints")
  public open var controlPoints: Array<LandscapeSplineControlPoint>

  @JsName("Segments")
  public open var segments: Array<LandscapeSplineSegment>

  @JsName("ForeignWorldSplineDataMap")
  public open var foreignWorldSplineDataMap: Any

  @JsName("CookedForeignMeshComponents")
  public open var cookedForeignMeshComponents: Array<MeshComponent>

  @JsName("GetSplineMeshComponents")
  public open fun getSplineMeshComponents(): Array<SplineMeshComponent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeSplinesComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeSplinesComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeSplinesComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeSplinesComponent

    @JsName("C")
    public fun copy(other: UObject): LandscapeSplinesComponent

    @JsName("C")
    public fun copy(other: Any): LandscapeSplinesComponent
  }
}

@JsName("ELandscapeLODFalloff")
public external object LandscapeLODFalloff {
  public var Linear: String

  public var SquareRoot: String

  @JsName("ELandscapeLODFalloff_MAX")
  public var Max: String
}

@JsName("ELandscapeLayerDisplayMode")
public external object LandscapeLayerDisplayMode {
  public var Default: String

  public var Alphabetical: String

  public var UserSpecific: String

  @JsName("ELandscapeLayerDisplayMode_MAX")
  public var Max: String
}

public open external class LandscapeProxyMaterialOverride {
  @JsName("LODIndex")
  public open var lodIndex: PerPlatformInt

  @JsName("Material")
  public open var material: MaterialInterface

  public open fun clone(): LandscapeProxyMaterialOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeProxyMaterialOverride

    @JsName("C")
    public fun copy(other: Any): LandscapeProxyMaterialOverride
  }
}

public open external class LandscapeComponentMaterialOverride {
  @JsName("LODIndex")
  public open var lodIndex: PerPlatformInt

  @JsName("Material")
  public open var material: MaterialInterface

  public open fun clone(): LandscapeComponentMaterialOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeComponentMaterialOverride

    @JsName("C")
    public fun copy(other: Any): LandscapeComponentMaterialOverride
  }
}

public open external class LandscapeWeightmapUsage(
  outer: UObject,
) : UObject {
  @JsName("ChannelUsage")
  public open var channelUsage: LandscapeComponent

  @JsName("LayerGuid")
  public open var layerGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeWeightmapUsage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeWeightmapUsage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeWeightmapUsage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeWeightmapUsage

    @JsName("C")
    public fun copy(other: UObject): LandscapeWeightmapUsage

    @JsName("C")
    public fun copy(other: Any): LandscapeWeightmapUsage
  }
}

@JsName("ESplineModulationColorMask")
public external object SplineModulationColorMask {
  public var Red: String

  public var Green: String

  public var Blue: String

  public var Alpha: String

  @JsName("ESplineModulationColorMask_MAX")
  public var Max: String
}

public open external class LandscapeLayerInfoObject(
  outer: UObject,
) : UObject {
  @JsName("LayerName")
  public open var layerName: String

  @JsName("PhysMaterial")
  public open var physMaterial: PhysicalMaterial

  @JsName("Hardness")
  public open var hardness: Number

  @JsName("MinimumCollisionRelevanceWeight")
  public open var minimumCollisionRelevanceWeight: Number

  @JsName("bNoWeightBlend")
  public open var noWeightBlend: Boolean

  @JsName("SplineFalloffModulationTexture")
  public open var splineFalloffModulationTexture: Texture2d

  @JsName("SplineFalloffModulationColorMask")
  public open var splineFalloffModulationColorMask: String

  @JsName("SplineFalloffModulationTiling")
  public open var splineFalloffModulationTiling: Number

  @JsName("SplineFalloffModulationBias")
  public open var splineFalloffModulationBias: Number

  @JsName("SplineFalloffModulationScale")
  public open var splineFalloffModulationScale: Number

  @JsName("IsReferencedFromLoadedData")
  public open var isReferencedFromLoadedData: Boolean

  @JsName("LayerUsageDebugColor")
  public open var layerUsageDebugColor: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeLayerInfoObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeLayerInfoObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeLayerInfoObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeLayerInfoObject

    @JsName("C")
    public fun copy(other: UObject): LandscapeLayerInfoObject

    @JsName("C")
    public fun copy(other: Any): LandscapeLayerInfoObject
  }
}

public open external class WeightmapLayerAllocationInfo {
  @JsName("LayerInfo")
  public open var layerInfo: LandscapeLayerInfoObject

  @JsName("WeightmapTextureIndex")
  public open var weightmapTextureIndex: Number

  @JsName("WeightmapTextureChannel")
  public open var weightmapTextureChannel: Number

  public open fun clone(): WeightmapLayerAllocationInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WeightmapLayerAllocationInfo

    @JsName("C")
    public fun copy(other: Any): WeightmapLayerAllocationInfo
  }
}

@JsName("LandscapeLODStreamingProxy")
public open external class LandscapeLodStreamingProxy(
  outer: UObject,
) : StreamableRenderAsset {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeLodStreamingProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeLodStreamingProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeLodStreamingProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeLodStreamingProxy

    @JsName("C")
    public fun copy(other: UObject): LandscapeLodStreamingProxy

    @JsName("C")
    public fun copy(other: Any): LandscapeLodStreamingProxy
  }
}

public open external class LandscapeEditToolRenderData {
  @JsName("ToolMaterial")
  public open var toolMaterial: MaterialInterface

  @JsName("GizmoMaterial")
  public open var gizmoMaterial: MaterialInterface

  @JsName("SelectedType")
  public open var selectedType: Number

  @JsName("DebugChannelR")
  public open var debugChannelR: Number

  @JsName("DebugChannelG")
  public open var debugChannelG: Number

  @JsName("DebugChannelB")
  public open var debugChannelB: Number

  @JsName("DataTexture")
  public open var dataTexture: Texture2d

  @JsName("LayerContributionTexture")
  public open var layerContributionTexture: Texture2d

  @JsName("DirtyTexture")
  public open var dirtyTexture: Texture2d

  public open fun clone(): LandscapeEditToolRenderData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeEditToolRenderData

    @JsName("C")
    public fun copy(other: Any): LandscapeEditToolRenderData
  }
}

public open external class LandscapeComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("SectionBaseX")
  public open var sectionBaseX: Number

  @JsName("SectionBaseY")
  public open var sectionBaseY: Number

  @JsName("ComponentSizeQuads")
  public open var componentSizeQuads: Number

  @JsName("SubsectionSizeQuads")
  public open var subsectionSizeQuads: Number

  @JsName("NumSubsections")
  public open var numSubsections: Number

  @JsName("OverrideMaterial")
  public open var overrideMaterial: MaterialInterface

  @JsName("OverrideHoleMaterial")
  public open var overrideHoleMaterial: MaterialInterface

  @JsName("OverrideMaterials")
  public open var overrideMaterials: Array<LandscapeComponentMaterialOverride>

  @JsName("MaterialInstance")
  public open var materialInstance: MaterialInstanceConstant

  @JsName("MaterialInstances")
  public open var materialInstances: Array<MaterialInstanceConstant>

  @JsName("MaterialInstancesDynamic")
  public open var materialInstancesDynamic: Array<MaterialInstanceDynamic>

  @JsName("LODIndexToMaterialIndex")
  public open var lodIndexToMaterialIndex: Array<Any>

  @JsName("XYOffsetmapTexture")
  public open var xyOffsetmapTexture: Texture2d

  @JsName("WeightmapScaleBias")
  public open var weightmapScaleBias: Vector4

  @JsName("WeightmapSubsectionOffset")
  public open var weightmapSubsectionOffset: Number

  @JsName("HeightmapScaleBias")
  public open var heightmapScaleBias: Vector4

  @JsName("CachedLocalBox")
  public open var cachedLocalBox: Box

  @JsName("CollisionComponent")
  public open var collisionComponent: Any

  @JsName("LightingGuid")
  public open var lightingGuid: Guid

  @JsName("LayersData")
  public open var layersData: Any

  @JsName("WeightmapTexturesUsage")
  public open var weightmapTexturesUsage: Array<LandscapeWeightmapUsage>

  @JsName("LayerUpdateFlagPerMode")
  public open var layerUpdateFlagPerMode: Any

  @JsName("bPendingCollisionDataUpdate")
  public open var pendingCollisionDataUpdate: Boolean

  @JsName("bPendingLayerCollisionDataUpdate")
  public open var pendingLayerCollisionDataUpdate: Boolean

  @JsName("HeightmapTexture")
  public open var heightmapTexture: Texture2d

  @JsName("WeightmapLayerAllocations")
  public open var weightmapLayerAllocations: Array<WeightmapLayerAllocationInfo>

  @JsName("WeightmapTextures")
  public open var weightmapTextures: Array<Texture2d>

  @JsName("LODStreamingProxy")
  public open var lodStreamingProxy: LandscapeLodStreamingProxy

  @JsName("MapBuildDataId")
  public open var mapBuildDataId: Guid

  @JsName("IrrelevantLights")
  public open var irrelevantLights: Array<Guid>

  @JsName("CollisionMipLevel")
  public open var collisionMipLevel: Number

  @JsName("SimpleCollisionMipLevel")
  public open var simpleCollisionMipLevel: Number

  @JsName("NegativeZBoundsExtension")
  public open var negativeZBoundsExtension: Number

  @JsName("PositiveZBoundsExtension")
  public open var positiveZBoundsExtension: Number

  @JsName("StaticLightingResolution")
  public open var staticLightingResolution: Number

  @JsName("ForcedLOD")
  public open var forcedLod: Number

  @JsName("LODBias")
  public open var lodBias: Number

  @JsName("StateId")
  public open var stateId: Guid

  @JsName("BakedTextureMaterialGuid")
  public open var bakedTextureMaterialGuid: Guid

  @JsName("LastBakedTextureMaterialGuid")
  public open var lastBakedTextureMaterialGuid: Guid

  @JsName("GIBakedBaseColorTexture")
  public open var giBakedBaseColorTexture: Texture2d

  @JsName("LightingLODBias")
  public open var lightingLodBias: Number

  @JsName("LayerAllowList")
  public open var layerAllowList: Array<LandscapeLayerInfoObject>

  @JsName("EditToolRenderData")
  public open var editToolRenderData: LandscapeEditToolRenderData

  @JsName("MobileDataSourceHash")
  public open var mobileDataSourceHash: Guid

  @JsName("MaterialPerLOD")
  public open var materialPerLod: Any

  @JsName("SplineHash")
  public open var splineHash: Any

  @JsName("PhysicalMaterialHash")
  public open var physicalMaterialHash: Any

  @JsName("LastSavedPhysicalMaterialHash")
  public open var lastSavedPhysicalMaterialHash: Any

  @JsName("MobileBlendableLayerMask")
  public open var mobileBlendableLayerMask: Number

  @JsName("MobileMaterialInterface")
  public open var mobileMaterialInterface: MaterialInterface

  @JsName("MobileMaterialInterfaces")
  public open var mobileMaterialInterfaces: Array<MaterialInterface>

  @JsName("MobileWeightmapTextures")
  public open var mobileWeightmapTextures: Array<Texture2d>

  @JsName("MobileCombinationMaterialInstances")
  public open var mobileCombinationMaterialInstances: Array<MaterialInstanceConstant>

  @JsName("MobileCombinationMaterialInstance")
  public open var mobileCombinationMaterialInstance: MaterialInstanceConstant

  @JsName("GetMaterialInstanceDynamic")
  public open fun getMaterialInstanceDynamic(inIndex: Number): MaterialInstanceDynamic

  @JsName("EditorGetPaintLayerWeightByNameAtLocation")
  public open fun editorGetPaintLayerWeightByNameAtLocation(inLocation: Vector,
      inPaintLayerName: String): Number

  @JsName("EditorGetPaintLayerWeightAtLocation")
  public open fun editorGetPaintLayerWeightAtLocation(inLocation: Vector,
      paintLayer: LandscapeLayerInfoObject): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeComponent

    @JsName("C")
    public fun copy(other: UObject): LandscapeComponent

    @JsName("C")
    public fun copy(other: Any): LandscapeComponent
  }
}

public open external class LandscapeHeightfieldCollisionComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("ComponentLayerInfos")
  public open var componentLayerInfos: Array<LandscapeLayerInfoObject>

  @JsName("SectionBaseX")
  public open var sectionBaseX: Number

  @JsName("SectionBaseY")
  public open var sectionBaseY: Number

  @JsName("CollisionSizeQuads")
  public open var collisionSizeQuads: Number

  @JsName("CollisionScale")
  public open var collisionScale: Number

  @JsName("SimpleCollisionSizeQuads")
  public open var simpleCollisionSizeQuads: Number

  @JsName("CollisionQuadFlags")
  public open var collisionQuadFlags: Array<Number>

  @JsName("HeightfieldGuid")
  public open var heightfieldGuid: Guid

  @JsName("CachedLocalBox")
  public open var cachedLocalBox: Box

  @JsName("RenderComponent")
  public open var renderComponent: Any

  @JsName("PhysicalMaterialRenderObjects")
  public open var physicalMaterialRenderObjects: Array<PhysicalMaterial>

  @JsName("CookedPhysicalMaterials")
  public open var cookedPhysicalMaterials: Array<PhysicalMaterial>

  @JsName("GetRenderComponent")
  public open fun getRenderComponent(): LandscapeComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeHeightfieldCollisionComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeHeightfieldCollisionComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeHeightfieldCollisionComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeHeightfieldCollisionComponent

    @JsName("C")
    public fun copy(other: UObject): LandscapeHeightfieldCollisionComponent

    @JsName("C")
    public fun copy(other: Any): LandscapeHeightfieldCollisionComponent
  }
}

public open external class LandscapeEditorLayerSettings {
  @JsName("LayerInfoObj")
  public open var layerInfoObj: LandscapeLayerInfoObject

  @JsName("ReimportLayerFilePath")
  public open var reimportLayerFilePath: String

  public open fun clone(): LandscapeEditorLayerSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeEditorLayerSettings

    @JsName("C")
    public fun copy(other: Any): LandscapeEditorLayerSettings
  }
}

public open external class LandscapeProxy(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : PartitionActor {
  @JsName("SplineComponent")
  public open var splineComponent: LandscapeSplinesComponent

  @JsName("LandscapeGuid")
  public open var landscapeGuid: Guid

  @JsName("LandscapeSectionOffset")
  public open var landscapeSectionOffset: IntPoint

  @JsName("MaxLODLevel")
  public open var maxLodLevel: Number

  @JsName("LODDistanceFactor")
  public open var lodDistanceFactor: Number

  @JsName("LODFalloff")
  public open var lodFalloff: String

  @JsName("ComponentScreenSizeToUseSubSections")
  public open var componentScreenSizeToUseSubSections: Number

  @JsName("LOD0ScreenSize")
  public open var lod0ScreenSize: Number

  @JsName("LOD0DistributionSetting")
  public open var lod0DistributionSetting: Number

  @JsName("LODDistributionSetting")
  public open var lodDistributionSetting: Number

  @JsName("ExportLOD")
  public open var exportLod: Number

  @JsName("TargetDisplayOrderList")
  public open var targetDisplayOrderList: Array<String>

  @JsName("TargetDisplayOrder")
  public open var targetDisplayOrder: String

  @JsName("StaticLightingLOD")
  public open var staticLightingLod: Number

  @JsName("DefaultPhysMaterial")
  public open var defaultPhysMaterial: PhysicalMaterial

  @JsName("StreamingDistanceMultiplier")
  public open var streamingDistanceMultiplier: Number

  @JsName("LandscapeMaterial")
  public open var landscapeMaterial: MaterialInterface

  @JsName("LandscapeHoleMaterial")
  public open var landscapeHoleMaterial: MaterialInterface

  @JsName("LandscapeMaterialsOverride")
  public open var landscapeMaterialsOverride: Array<LandscapeProxyMaterialOverride>

  @JsName("PreEditLandscapeMaterial")
  public open var preEditLandscapeMaterial: MaterialInterface

  @JsName("PreEditLandscapeHoleMaterial")
  public open var preEditLandscapeHoleMaterial: MaterialInterface

  @JsName("PreEditLandscapeMaterialsOverride")
  public open var preEditLandscapeMaterialsOverride: Array<LandscapeProxyMaterialOverride>

  @JsName("bIsPerformingInteractiveActionOnLandscapeMaterialOverride")
  public open var isPerformingInteractiveActionOnLandscapeMaterialOverride: Boolean

  @JsName("bMeshHoles")
  public open var meshHoles: Boolean

  @JsName("MeshHolesMaxLod")
  public open var meshHolesMaxLod: Number

  @JsName("RuntimeVirtualTextures")
  public open var runtimeVirtualTextures: Array<RuntimeVirtualTexture>

  @JsName("bSetCreateRuntimeVirtualTextureVolumes")
  public open var setCreateRuntimeVirtualTextureVolumes: Boolean

  @JsName("VirtualTextureNumLods")
  public open var virtualTextureNumLods: Number

  @JsName("VirtualTextureLodBias")
  public open var virtualTextureLodBias: Number

  @JsName("VirtualTextureRenderPassType")
  public open var virtualTextureRenderPassType: String

  @JsName("NegativeZBoundsExtension")
  public open var negativeZBoundsExtension: Number

  @JsName("PositiveZBoundsExtension")
  public open var positiveZBoundsExtension: Number

  @JsName("LandscapeComponents")
  public open var landscapeComponents: Array<LandscapeComponent>

  @JsName("CollisionComponents")
  public open var collisionComponents: Array<LandscapeHeightfieldCollisionComponent>

  @JsName("FoliageComponents")
  public open var foliageComponents: Array<HierarchicalInstancedStaticMeshComponent>

  @JsName("bHasLandscapeGrass")
  public open var hasLandscapeGrass: Boolean

  @JsName("StaticLightingResolution")
  public open var staticLightingResolution: Number

  @JsName("CastShadow")
  public open var castShadow: Boolean

  @JsName("bCastDynamicShadow")
  public open var castDynamicShadow: Boolean

  @JsName("bCastStaticShadow")
  public open var castStaticShadow: Boolean

  @JsName("bCastContactShadow")
  public open var castContactShadow: Boolean

  @JsName("bCastFarShadow")
  public open var castFarShadow: Boolean

  @JsName("bCastHiddenShadow")
  public open var castHiddenShadow: Boolean

  @JsName("bCastShadowAsTwoSided")
  public open var castShadowAsTwoSided: Boolean

  @JsName("bAffectDistanceFieldLighting")
  public open var affectDistanceFieldLighting: Boolean

  @JsName("LightingChannels")
  public open var lightingChannels: LightingChannels

  @JsName("bUseMaterialPositionOffsetInStaticLighting")
  public open var useMaterialPositionOffsetInStaticLighting: Boolean

  @JsName("bRenderCustomDepth")
  public open var renderCustomDepth: Boolean

  @JsName("CustomDepthStencilWriteMask")
  public open var customDepthStencilWriteMask: String

  @JsName("CustomDepthStencilValue")
  public open var customDepthStencilValue: Number

  @JsName("LDMaxDrawDistance")
  public open var ldMaxDrawDistance: Number

  @JsName("bIsMovingToLevel")
  public open var isMovingToLevel: Boolean

  @JsName("LightmassSettings")
  public open var lightmassSettings: LightmassPrimitiveSettings

  @JsName("CollisionMipLevel")
  public open var collisionMipLevel: Number

  @JsName("SimpleCollisionMipLevel")
  public open var simpleCollisionMipLevel: Number

  @JsName("CollisionThickness")
  public open var collisionThickness: Number

  @JsName("BodyInstance")
  public open var bodyInstance: BodyInstance

  @JsName("bGenerateOverlapEvents")
  public open var generateOverlapEvents: Boolean

  @JsName("bBakeMaterialPositionOffsetIntoCollision")
  public open var bakeMaterialPositionOffsetIntoCollision: Boolean

  @JsName("EditorCachedLayerInfos")
  public open var editorCachedLayerInfos: Array<LandscapeLayerInfoObject>

  @JsName("ReimportHeightmapFilePath")
  public open var reimportHeightmapFilePath: String

  @JsName("ReimportDestinationLayerGuid")
  public open var reimportDestinationLayerGuid: Guid

  @JsName("EditorLayerSettings")
  public open var editorLayerSettings: Array<LandscapeEditorLayerSettings>

  @JsName("WeightmapUsageMap")
  public open var weightmapUsageMap: Any

  @JsName("ComponentSizeQuads")
  public open var componentSizeQuads: Number

  @JsName("SubsectionSizeQuads")
  public open var subsectionSizeQuads: Number

  @JsName("NumSubsections")
  public open var numSubsections: Number

  @JsName("bUsedForNavigation")
  public open var usedForNavigation: Boolean

  @JsName("bFillCollisionUnderLandscapeForNavmesh")
  public open var fillCollisionUnderLandscapeForNavmesh: Boolean

  @JsName("bUseDynamicMaterialInstance")
  public open var useDynamicMaterialInstance: Boolean

  @JsName("NavigationGeometryGatheringMode")
  public open var navigationGeometryGatheringMode: String

  @JsName("MaxPaintedLayersPerComponent")
  public open var maxPaintedLayersPerComponent: Number

  @JsName("bUseLandscapeForCullingInvisibleHLODVertices")
  public open var useLandscapeForCullingInvisibleHlodVertices: Boolean

  @JsName("bHasLayersContent")
  public open var hasLayersContent: Boolean

  @JsName("SetLandscapeMaterialVectorParameterValue")
  public open fun setLandscapeMaterialVectorParameterValue(parameterName: String,
      value: LinearColor): Unit

  @JsName("SetLandscapeMaterialTextureParameterValue")
  public open fun setLandscapeMaterialTextureParameterValue(parameterName: String,
      value: Texture): Unit

  @JsName("SetLandscapeMaterialScalarParameterValue")
  public open fun setLandscapeMaterialScalarParameterValue(parameterName: String, value: Number):
      Unit

  @JsName("LandscapeImportWeightmapFromRenderTarget")
  public open fun landscapeImportWeightmapFromRenderTarget(inRenderTarget: TextureRenderTarget2d,
      inLayerName: String): Boolean

  @JsName("LandscapeImportHeightmapFromRenderTarget")
  public open fun landscapeImportHeightmapFromRenderTarget(inRenderTarget: TextureRenderTarget2d,
      inImportHeightFromRgChannel: Boolean): Boolean

  @JsName("LandscapeExportWeightmapToRenderTarget")
  public open fun landscapeExportWeightmapToRenderTarget(inRenderTarget: TextureRenderTarget2d,
      inLayerName: String): Boolean

  @JsName("LandscapeExportHeightmapToRenderTarget")
  public open fun landscapeExportHeightmapToRenderTarget(
    inRenderTarget: TextureRenderTarget2d,
    inExportHeightIntoRgChannel: Boolean,
    inExportLandscapeProxies: Boolean,
  ): Boolean

  @JsName("EditorSetLandscapeMaterial")
  public open fun editorSetLandscapeMaterial(newLandscapeMaterial: MaterialInterface): Unit

  @JsName("EditorApplySpline")
  public open fun editorApplySpline(
    inSplineComponent: SplineComponent,
    startWidth: Number,
    endWidth: Number,
    startSideFalloff: Number,
    endSideFalloff: Number,
    startRoll: Number,
    endRoll: Number,
    numSubdivisions: Number,
    raiseHeights: Boolean,
    lowerHeights: Boolean,
    paintLayer: LandscapeLayerInfoObject,
    editLayerName: String,
  ): Unit

  @JsName("ChangeLODDistanceFactor")
  public open fun changeLodDistanceFactor(inLodDistanceFactor: Number): Unit

  @JsName("ChangeComponentScreenSizeToUseSubSections")
  public open
      fun changeComponentScreenSizeToUseSubSections(inComponentScreenSizeToUseSubSections: Number):
      Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeProxy

    @JsName("C")
    public fun copy(other: UObject): LandscapeProxy

    @JsName("C")
    public fun copy(other: Any): LandscapeProxy
  }
}

@JsName("ELandscapeBlendMode")
public external object LandscapeBlendMode {
  @JsName("LSBM_AdditiveBlend")
  public var AdditiveBlend: String

  @JsName("LSBM_AlphaBlend")
  public var AlphaBlend: String

  @JsName("LSBM_MAX")
  public var Max: String
}

@JsName("T$718")
public external interface OutStreamableAssetsProvider {
  @JsName("OutStreamableAssets")
  public var outStreamableAssets: Array<UObject>
}

public open external class LandscapeBlueprintBrushBase(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("OwningLandscape")
  public open var owningLandscape: Landscape

  @JsName("AffectHeightmap")
  public open var affectHeightmap: Boolean

  @JsName("AffectWeightmap")
  public open var affectWeightmap: Boolean

  @JsName("AffectedWeightmapLayers")
  public open var affectedWeightmapLayers: Array<String>

  @JsName("bIsVisible")
  public open var isVisible: Boolean

  @JsName("RequestLandscapeUpdate")
  public open fun requestLandscapeUpdate(): Unit

  @JsName("Render")
  public open fun render(
    inIsHeightmap: Boolean,
    inCombinedResult: TextureRenderTarget2d,
    inWeightmapLayerName: String,
  ): TextureRenderTarget2d

  @JsName("Initialize")
  public open fun initialize(
    inLandscapeTransform: Transform,
    inLandscapeSize: IntPoint,
    inLandscapeRenderTargetSize: IntPoint,
  ): Unit

  @JsName("GetBlueprintRenderDependencies")
  public open fun getBlueprintRenderDependencies(outStreamableAssets: Array<UObject>):
      OutStreamableAssetsProvider

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeBlueprintBrushBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeBlueprintBrushBase

    @JsName("C")
    public fun copy(other: UObject): LandscapeBlueprintBrushBase

    @JsName("C")
    public fun copy(other: Any): LandscapeBlueprintBrushBase
  }
}

public open external class LandscapeLayerBrush {
  @JsName("BlueprintBrush")
  public open var blueprintBrush: LandscapeBlueprintBrushBase

  public open fun clone(): LandscapeLayerBrush

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeLayerBrush

    @JsName("C")
    public fun copy(other: Any): LandscapeLayerBrush
  }
}

public open external class LandscapeLayer {
  @JsName("Guid")
  public open var guid: Guid

  @JsName("Name")
  public open var name: String

  @JsName("bVisible")
  public open var visible: Boolean

  @JsName("bLocked")
  public open var locked: Boolean

  @JsName("HeightmapAlpha")
  public open var heightmapAlpha: Number

  @JsName("WeightmapAlpha")
  public open var weightmapAlpha: Number

  @JsName("BlendMode")
  public open var blendMode: String

  @JsName("Brushes")
  public open var brushes: Array<LandscapeLayerBrush>

  @JsName("WeightmapLayerAllocationBlend")
  public open var weightmapLayerAllocationBlend: Any

  public open fun clone(): LandscapeLayer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeLayer

    @JsName("C")
    public fun copy(other: Any): LandscapeLayer
  }
}

public open external class LandscapeInfoLayerSettings {
  @JsName("LayerInfoObj")
  public open var layerInfoObj: LandscapeLayerInfoObject

  @JsName("LayerName")
  public open var layerName: String

  @JsName("ThumbnailMIC")
  public open var thumbnailMic: MaterialInstanceConstant

  @JsName("Owner")
  public open var owner: LandscapeProxy

  @JsName("DebugColorChannel")
  public open var debugColorChannel: Number

  @JsName("bValid")
  public open var valid: Boolean

  public open fun clone(): LandscapeInfoLayerSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeInfoLayerSettings

    @JsName("C")
    public fun copy(other: Any): LandscapeInfoLayerSettings
  }
}

public open external class LandscapeStreamingProxy(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : LandscapeProxy {
  @JsName("LandscapeActor")
  public open var landscapeActor: Any

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeStreamingProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeStreamingProxy

    @JsName("C")
    public fun copy(other: UObject): LandscapeStreamingProxy

    @JsName("C")
    public fun copy(other: Any): LandscapeStreamingProxy
  }
}

@JsName("ELandscapeLayerPaintingRestriction")
public external object LandscapeLayerPaintingRestriction {
  public var None: String

  public var UseMaxLayers: String

  public var ExistingOnly: String

  public var UseComponentAllowList: String

  @JsName("ELandscapeLayerPaintingRestriction_MAX")
  public var Max: String
}

public open external class LandscapeInfo(
  outer: UObject,
) : UObject {
  @JsName("LandscapeActor")
  public open var landscapeActor: Any

  @JsName("LandscapeGuid")
  public open var landscapeGuid: Guid

  @JsName("ComponentSizeQuads")
  public open var componentSizeQuads: Number

  @JsName("SubsectionSizeQuads")
  public open var subsectionSizeQuads: Number

  @JsName("ComponentNumSubsections")
  public open var componentNumSubsections: Number

  @JsName("DrawScale")
  public open var drawScale: Vector

  @JsName("Layers")
  public open var layers: Array<LandscapeInfoLayerSettings>

  @JsName("Proxies")
  public open var proxies: Array<LandscapeStreamingProxy>

  @JsName("SplineActors")
  public open var splineActors: Array<Any>

  @JsName("GetAlphamapDataToMemory")
  public open fun getAlphamapDataToMemory(
    layerInfo: LandscapeLayerInfoObject,
    minX: Number,
    minY: Number,
    maxX: Number,
    maxY: Number,
  ): Unit

  @JsName("GetHeightmapDataToMemory")
  public open fun getHeightmapDataToMemory(
    minX: Number,
    minY: Number,
    maxX: Number,
    maxY: Number,
  ): Unit

  @JsName("GetLandscapeExtent")
  public open fun getLandscapeExtent(
    minX: Number,
    minY: Number,
    maxX: Number,
    maxY: Number,
  ): Object509

  @JsName("GetLayerInfoByName")
  public open fun getLayerInfoByName(layerName: String, owner: LandscapeProxy):
      LandscapeLayerInfoObject

  @JsName("SetAlphamapDataFromMemory")
  public open fun setAlphamapDataFromMemory(
    layerInfo: LandscapeLayerInfoObject,
    minX: Number,
    minY: Number,
    maxX: Number,
    maxY: Number,
    paintingRestriction: String,
  ): Unit

  @JsName("SetHeightmapDataFromMemory")
  public open fun setHeightmapDataFromMemory(
    minX: Number,
    minY: Number,
    maxX: Number,
    maxY: Number,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeInfo

    @JsName("C")
    public fun copy(other: UObject): LandscapeInfo

    @JsName("C")
    public fun copy(other: Any): LandscapeInfo

    @JsName("GetAlphamapDataToMemory")
    public fun getAlphamapDataToMemory(
      landscapeInfo: LandscapeInfo,
      layerInfo: LandscapeLayerInfoObject,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
    ): Unit

    @JsName("GetHeightmapDataToMemory")
    public fun getHeightmapDataToMemory(
      landscapeInfo: LandscapeInfo,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
    ): Unit

    @JsName("GetLandscapeExtent")
    public fun getLandscapeExtent(
      landscapeInfo: LandscapeInfo,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
    ): Object509

    @JsName("GetLayerInfoByName")
    public fun getLayerInfoByName(
      landscapeInfo: LandscapeInfo,
      layerName: String,
      owner: LandscapeProxy,
    ): LandscapeLayerInfoObject

    @JsName("SetAlphamapDataFromMemory")
    public fun setAlphamapDataFromMemory(
      landscapeInfo: LandscapeInfo,
      layerInfo: LandscapeLayerInfoObject,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
      paintingRestriction: String,
    ): Unit

    @JsName("SetHeightmapDataFromMemory")
    public fun setHeightmapDataFromMemory(
      landscapeInfo: LandscapeInfo,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
    ): Unit
  }
}

public open external class Landscape(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : LandscapeProxy {
  @JsName("bCanHaveLayersContent")
  public open var canHaveLayersContent: Boolean

  @JsName("LandscapeSplinesTargetLayerGuid")
  public open var landscapeSplinesTargetLayerGuid: Guid

  @JsName("LandscapeLayers")
  public open var landscapeLayers: Array<LandscapeLayer>

  @JsName("HeightmapRTList")
  public open var heightmapRtList: Array<TextureRenderTarget2d>

  @JsName("WeightmapRTList")
  public open var weightmapRtList: Array<TextureRenderTarget2d>

  @JsName("TrackedStreamingInTextures")
  public open var trackedStreamingInTextures: Any

  @JsName("LandscapeSplinesAffectedComponents")
  public open var landscapeSplinesAffectedComponents: Any

  @JsName("bLandscapeLayersAreInitialized")
  public open var landscapeLayersAreInitialized: Boolean

  @JsName("bLandscapeLayersAreUsingLocalMerge")
  public open var landscapeLayersAreUsingLocalMerge: Boolean

  @JsName("WasCompilingShaders")
  public open var wasCompilingShaders: Boolean

  @JsName("LayerContentUpdateModes")
  public open var layerContentUpdateModes: Any

  @JsName("bSplineLayerUpdateRequested")
  public open var splineLayerUpdateRequested: Boolean

  @JsName("GetLandscapeInfo")
  public open fun getLandscapeInfo(spawnNewActor: Boolean): LandscapeInfo

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Landscape

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Landscape

    @JsName("C")
    public fun copy(other: UObject): Landscape

    @JsName("C")
    public fun copy(other: Any): Landscape

    @JsName("GetLandscapeInfo")
    public fun getLandscapeInfo(landscape: Landscape, spawnNewActor: Boolean): LandscapeInfo
  }
}

public open external class LandscapeGizmoActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("LengthZ")
  public open var lengthZ: Number

  @JsName("MarginZ")
  public open var marginZ: Number

  @JsName("MinRelativeZ")
  public open var minRelativeZ: Number

  @JsName("RelativeScaleZ")
  public open var relativeScaleZ: Number

  @JsName("TargetLandscapeInfo")
  public open var targetLandscapeInfo: LandscapeInfo

  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeGizmoActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeGizmoActor

    @JsName("C")
    public fun copy(other: UObject): LandscapeGizmoActor

    @JsName("C")
    public fun copy(other: Any): LandscapeGizmoActor
  }
}

@JsName("ELandscapeGizmoType")
public external object LandscapeGizmoType {
  @JsName("LGT_None")
  public var None: String

  @JsName("LGT_Height")
  public var Height: String

  @JsName("LGT_Weight")
  public var Weight: String

  @JsName("LGT_MAX")
  public var Max: String
}

public open external class LandscapeGizmoActiveActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : LandscapeGizmoActor {
  @JsName("DataType")
  public open var dataType: String

  @JsName("GizmoTexture")
  public open var gizmoTexture: Texture2d

  @JsName("TextureScale")
  public open var textureScale: Vector2d

  @JsName("SampledHeight")
  public open var sampledHeight: Array<Vector>

  @JsName("SampledNormal")
  public open var sampledNormal: Array<Vector>

  @JsName("SampleSizeX")
  public open var sampleSizeX: Number

  @JsName("SampleSizeY")
  public open var sampleSizeY: Number

  @JsName("CachedWidth")
  public open var cachedWidth: Number

  @JsName("CachedHeight")
  public open var cachedHeight: Number

  @JsName("CachedScaleXY")
  public open var cachedScaleXy: Number

  @JsName("FrustumVerts")
  public open var frustumVerts: Vector

  @JsName("GizmoMaterial")
  public open var gizmoMaterial: Material

  @JsName("GizmoDataMaterial")
  public open var gizmoDataMaterial: MaterialInstance

  @JsName("GizmoMeshMaterial")
  public open var gizmoMeshMaterial: Material

  @JsName("LayerInfos")
  public open var layerInfos: Array<LandscapeLayerInfoObject>

  @JsName("bSnapToLandscapeGrid")
  public open var snapToLandscapeGrid: Boolean

  @JsName("UnsnappedRotation")
  public open var unsnappedRotation: Rotator

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeGizmoActiveActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeGizmoActiveActor

    @JsName("C")
    public fun copy(other: UObject): LandscapeGizmoActiveActor

    @JsName("C")
    public fun copy(other: Any): LandscapeGizmoActiveActor
  }
}

public open external class LandscapeGizmoRenderComponent(
  outer: UObject,
) : PrimitiveComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeGizmoRenderComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeGizmoRenderComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeGizmoRenderComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeGizmoRenderComponent

    @JsName("C")
    public fun copy(other: UObject): LandscapeGizmoRenderComponent

    @JsName("C")
    public fun copy(other: Any): LandscapeGizmoRenderComponent
  }
}

@JsName("EGrassScaling")
public external object GrassScaling {
  public var Uniform: String

  public var Free: String

  @JsName("LockXY")
  public var LockXy: String

  @JsName("EGrassScaling_MAX")
  public var Max: String
}

public open external class GrassVariety {
  @JsName("GrassMesh")
  public open var grassMesh: StaticMesh

  @JsName("OverrideMaterials")
  public open var overrideMaterials: Array<MaterialInterface>

  @JsName("GrassDensity")
  public open var grassDensity: PerPlatformFloat

  @JsName("bUseGrid")
  public open var useGrid: Boolean

  @JsName("PlacementJitter")
  public open var placementJitter: Number

  @JsName("StartCullDistance")
  public open var startCullDistance: PerPlatformInt

  @JsName("EndCullDistance")
  public open var endCullDistance: PerPlatformInt

  @JsName("MinLOD")
  public open var minLod: Number

  @JsName("Scaling")
  public open var scaling: String

  @JsName("ScaleX")
  public open var scaleX: FloatInterval

  @JsName("ScaleY")
  public open var scaleY: FloatInterval

  @JsName("ScaleZ")
  public open var scaleZ: FloatInterval

  @JsName("RandomRotation")
  public open var randomRotation: Boolean

  @JsName("AlignToSurface")
  public open var alignToSurface: Boolean

  @JsName("bUseLandscapeLightmap")
  public open var useLandscapeLightmap: Boolean

  @JsName("LightingChannels")
  public open var lightingChannels: LightingChannels

  @JsName("bReceivesDecals")
  public open var receivesDecals: Boolean

  @JsName("bCastDynamicShadow")
  public open var castDynamicShadow: Boolean

  @JsName("bKeepInstanceBufferCPUCopy")
  public open var keepInstanceBufferCpuCopy: Boolean

  public open fun clone(): GrassVariety

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GrassVariety

    @JsName("C")
    public fun copy(other: Any): GrassVariety
  }
}

public open external class LandscapeGrassType(
  outer: UObject,
) : UObject {
  @JsName("GrassVarieties")
  public open var grassVarieties: Array<GrassVariety>

  @JsName("bEnableDensityScaling")
  public open var enableDensityScaling: Boolean

  @JsName("GrassMesh")
  public open var grassMesh: StaticMesh

  @JsName("GrassDensity")
  public open var grassDensity: Number

  @JsName("PlacementJitter")
  public open var placementJitter: Number

  @JsName("StartCullDistance")
  public open var startCullDistance: Number

  @JsName("EndCullDistance")
  public open var endCullDistance: Number

  @JsName("RandomRotation")
  public open var randomRotation: Boolean

  @JsName("AlignToSurface")
  public open var alignToSurface: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeGrassType

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeGrassType

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeGrassType

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeGrassType

    @JsName("C")
    public fun copy(other: UObject): LandscapeGrassType

    @JsName("C")
    public fun copy(other: Any): LandscapeGrassType
  }
}

@JsName("LandscapeHLODBuilder")
public open external class LandscapeHlodBuilder(
  outer: UObject,
) : HlodBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeHlodBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeHlodBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeHlodBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeHlodBuilder

    @JsName("C")
    public fun copy(other: UObject): LandscapeHlodBuilder

    @JsName("C")
    public fun copy(other: Any): LandscapeHlodBuilder
  }
}

public open external class LandscapeInfoMap(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeInfoMap

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeInfoMap

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeInfoMap

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeInfoMap

    @JsName("C")
    public fun copy(other: UObject): LandscapeInfoMap

    @JsName("C")
    public fun copy(other: Any): LandscapeInfoMap
  }
}

public open external class LandscapeMaterialTextureStreamingInfo {
  @JsName("TextureName")
  public open var textureName: String

  @JsName("TexelFactor")
  public open var texelFactor: Number

  public open fun clone(): LandscapeMaterialTextureStreamingInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LandscapeMaterialTextureStreamingInfo

    @JsName("C")
    public fun copy(other: Any): LandscapeMaterialTextureStreamingInfo
  }
}

public open external class LandscapeMaterialInstanceConstant(
  outer: UObject,
) : MaterialInstanceConstant {
  @JsName("TextureStreamingInfo")
  public open var textureStreamingInfo: Array<LandscapeMaterialTextureStreamingInfo>

  @JsName("bIsLayerThumbnail")
  public open var isLayerThumbnail: Boolean

  @JsName("bDisableTessellation")
  public open var disableTessellation: Boolean

  @JsName("bMobile")
  public open var mobile: Boolean

  @JsName("bEditorToolUsage")
  public open var editorToolUsage: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeMaterialInstanceConstant

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeMaterialInstanceConstant

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeMaterialInstanceConstant

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeMaterialInstanceConstant

    @JsName("C")
    public fun copy(other: UObject): LandscapeMaterialInstanceConstant

    @JsName("C")
    public fun copy(other: Any): LandscapeMaterialInstanceConstant
  }
}

public open external class LandscapeMeshCollisionComponent(
  outer: UObject,
) : LandscapeHeightfieldCollisionComponent {
  @JsName("MeshGuid")
  public open var meshGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeMeshCollisionComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeMeshCollisionComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeMeshCollisionComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeMeshCollisionComponent

    @JsName("C")
    public fun copy(other: UObject): LandscapeMeshCollisionComponent

    @JsName("C")
    public fun copy(other: Any): LandscapeMeshCollisionComponent
  }
}

public open external class LandscapeMeshProxyComponent(
  outer: UObject,
) : StaticMeshComponent {
  @JsName("LandscapeGuid")
  public open var landscapeGuid: Guid

  @JsName("ProxyComponentBases")
  public open var proxyComponentBases: Array<IntPoint>

  @JsName("ProxyLOD")
  public open var proxyLod: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeMeshProxyComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeMeshProxyComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeMeshProxyComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeMeshProxyComponent

    @JsName("C")
    public fun copy(other: UObject): LandscapeMeshProxyComponent

    @JsName("C")
    public fun copy(other: Any): LandscapeMeshProxyComponent
  }
}

public open external class LandscapeMeshProxyActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("LandscapeMeshProxyComponent")
  public open var landscapeMeshProxyComponent: LandscapeMeshProxyComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeMeshProxyActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeMeshProxyActor

    @JsName("C")
    public fun copy(other: UObject): LandscapeMeshProxyActor

    @JsName("C")
    public fun copy(other: Any): LandscapeMeshProxyActor
  }
}

public open external class LandscapeSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("MaxNumberOfLayers")
  public open var maxNumberOfLayers: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeSettings

    @JsName("C")
    public fun copy(other: UObject): LandscapeSettings

    @JsName("C")
    public fun copy(other: Any): LandscapeSettings
  }
}

public open external class LandscapeSplineActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("LandscapeGuid")
  public open var landscapeGuid: Guid

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeSplineActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeSplineActor

    @JsName("C")
    public fun copy(other: UObject): LandscapeSplineActor

    @JsName("C")
    public fun copy(other: Any): LandscapeSplineActor
  }
}

public open external class LandscapeSubsystem(
  outer: UObject,
) : TickableWorldSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeSubsystem

    @JsName("C")
    public fun copy(other: UObject): LandscapeSubsystem

    @JsName("C")
    public fun copy(other: Any): LandscapeSubsystem
  }
}

public open external class MaterialExpressionCustomOutput(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCustomOutput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCustomOutput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCustomOutput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCustomOutput

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCustomOutput

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCustomOutput
  }
}

public open external class GrassInput {
  @JsName("Name")
  public open var name: String

  @JsName("GrassType")
  public open var grassType: LandscapeGrassType

  @JsName("Input")
  public open var input: ExpressionInput

  public open fun clone(): GrassInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GrassInput

    @JsName("C")
    public fun copy(other: Any): GrassInput
  }
}

public open external class MaterialExpressionLandscapeGrassOutput(
  outer: UObject,
) : MaterialExpressionCustomOutput {
  @JsName("GrassTypes")
  public open var grassTypes: Array<GrassInput>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLandscapeGrassOutput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionLandscapeGrassOutput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLandscapeGrassOutput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLandscapeGrassOutput

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLandscapeGrassOutput

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLandscapeGrassOutput
  }
}

@JsName("ELandscapeLayerBlendType")
public external object LandscapeLayerBlendType {
  @JsName("LB_WeightBlend")
  public var WeightBlend: String

  @JsName("LB_AlphaBlend")
  public var AlphaBlend: String

  @JsName("LB_HeightBlend")
  public var HeightBlend: String

  @JsName("LB_MAX")
  public var Max: String
}

public open external class LayerBlendInput {
  @JsName("LayerName")
  public open var layerName: String

  @JsName("BlendType")
  public open var blendType: String

  @JsName("LayerInput")
  public open var layerInput: ExpressionInput

  @JsName("HeightInput")
  public open var heightInput: ExpressionInput

  @JsName("PreviewWeight")
  public open var previewWeight: Number

  @JsName("ConstLayerInput")
  public open var constLayerInput: Vector

  @JsName("ConstHeightInput")
  public open var constHeightInput: Number

  public open fun clone(): LayerBlendInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LayerBlendInput

    @JsName("C")
    public fun copy(other: Any): LayerBlendInput
  }
}

public open external class MaterialExpressionLandscapeLayerBlend(
  outer: UObject,
) : MaterialExpression {
  @JsName("Layers")
  public open var layers: Array<LayerBlendInput>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLandscapeLayerBlend

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionLandscapeLayerBlend

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLandscapeLayerBlend

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLandscapeLayerBlend

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLandscapeLayerBlend

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLandscapeLayerBlend
  }
}

@JsName("ETerrainCoordMappingType")
public external object TerrainCoordMappingType {
  @JsName("TCMT_Auto")
  public var Auto: String

  @JsName("TCMT_XY")
  public var XY: String

  @JsName("TCMT_XZ")
  public var XZ: String

  @JsName("TCMT_YZ")
  public var YZ: String

  @JsName("TCMT_MAX")
  public var Max: String
}

@JsName("ELandscapeCustomizedCoordType")
public external object LandscapeCustomizedCoordType {
  @JsName("LCCT_None")
  public var None: String

  @JsName("LCCT_CustomUV0")
  public var CustomUv0: String

  @JsName("LCCT_CustomUV1")
  public var CustomUv1: String

  @JsName("LCCT_CustomUV2")
  public var CustomUv2: String

  @JsName("LCCT_WeightMapUV")
  public var WeightMapUv: String

  @JsName("LCCT_MAX")
  public var Max: String
}

public open external class MaterialExpressionLandscapeLayerCoords(
  outer: UObject,
) : MaterialExpression {
  @JsName("MappingType")
  public open var mappingType: String

  @JsName("CustomUVType")
  public open var customUvType: String

  @JsName("MappingScale")
  public open var mappingScale: Number

  @JsName("MappingRotation")
  public open var mappingRotation: Number

  @JsName("MappingPanU")
  public open var mappingPanU: Number

  @JsName("MappingPanV")
  public open var mappingPanV: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLandscapeLayerCoords

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionLandscapeLayerCoords

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLandscapeLayerCoords

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLandscapeLayerCoords

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLandscapeLayerCoords

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLandscapeLayerCoords
  }
}

public open external class MaterialExpressionLandscapeLayerSample(
  outer: UObject,
) : MaterialExpression {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("PreviewWeight")
  public open var previewWeight: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLandscapeLayerSample

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionLandscapeLayerSample

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLandscapeLayerSample

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLandscapeLayerSample

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLandscapeLayerSample

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLandscapeLayerSample
  }
}

public open external class MaterialExpressionLandscapeLayerSwitch(
  outer: UObject,
) : MaterialExpression {
  @JsName("LayerUsed")
  public open var layerUsed: ExpressionInput

  @JsName("LayerNotUsed")
  public open var layerNotUsed: ExpressionInput

  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("PreviewUsed")
  public open var previewUsed: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLandscapeLayerSwitch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionLandscapeLayerSwitch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLandscapeLayerSwitch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLandscapeLayerSwitch

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLandscapeLayerSwitch

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLandscapeLayerSwitch
  }
}

public open external class MaterialExpressionLandscapeLayerWeight(
  outer: UObject,
) : MaterialExpression {
  @JsName("Base")
  public open var base: ExpressionInput

  @JsName("Layer")
  public open var layer: ExpressionInput

  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("PreviewWeight")
  public open var previewWeight: Number

  @JsName("ConstBase")
  public open var constBase: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLandscapeLayerWeight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionLandscapeLayerWeight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLandscapeLayerWeight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLandscapeLayerWeight

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLandscapeLayerWeight

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLandscapeLayerWeight
  }
}

public open external class PhysicalMaterialInput {
  @JsName("PhysicalMaterial")
  public open var physicalMaterial: PhysicalMaterial

  @JsName("Input")
  public open var input: ExpressionInput

  public open fun clone(): PhysicalMaterialInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicalMaterialInput

    @JsName("C")
    public fun copy(other: Any): PhysicalMaterialInput
  }
}

public open external class MaterialExpressionLandscapePhysicalMaterialOutput(
  outer: UObject,
) : MaterialExpressionCustomOutput {
  @JsName("Inputs")
  public open var inputs: Array<PhysicalMaterialInput>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLandscapePhysicalMaterialOutput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MaterialExpressionLandscapePhysicalMaterialOutput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLandscapePhysicalMaterialOutput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLandscapePhysicalMaterialOutput

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLandscapePhysicalMaterialOutput

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLandscapePhysicalMaterialOutput
  }
}

public open external class MaterialExpressionLandscapeVisibilityMask(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLandscapeVisibilityMask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionLandscapeVisibilityMask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLandscapeVisibilityMask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLandscapeVisibilityMask

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLandscapeVisibilityMask

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLandscapeVisibilityMask
  }
}

public open external class ActiveSoundUpdateInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActiveSoundUpdateInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActiveSoundUpdateInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActiveSoundUpdateInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActiveSoundUpdateInterface

    @JsName("C")
    public fun copy(other: UObject): ActiveSoundUpdateInterface

    @JsName("C")
    public fun copy(other: Any): ActiveSoundUpdateInterface
  }
}

public open external class ActorChannel(
  outer: UObject,
) : Channel {
  @JsName("Actor")
  public open var actor: Actor

  @JsName("CreateSubObjects")
  public open var createSubObjects: Array<UObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorChannel

    @JsName("C")
    public fun copy(other: UObject): ActorChannel

    @JsName("C")
    public fun copy(other: Any): ActorChannel
  }
}

public open external class ActorElementCounterInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementCounterInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementCounterInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementCounterInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementCounterInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementCounterInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementCounterInterface
  }
}

public open external class ActorElementHierarchyInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementHierarchyInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementHierarchyInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementHierarchyInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementHierarchyInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementHierarchyInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementHierarchyInterface
  }
}

public open external class ActorElementObjectInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorElementObjectInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorElementObjectInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorElementObjectInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorElementObjectInterface

    @JsName("C")
    public fun copy(other: UObject): ActorElementObjectInterface

    @JsName("C")
    public fun copy(other: Any): ActorElementObjectInterface
  }
}

public open external class ActorPartitionSubsystem(
  outer: UObject,
) : WorldSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorPartitionSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorPartitionSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorPartitionSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorPartitionSubsystem

    @JsName("C")
    public fun copy(other: UObject): ActorPartitionSubsystem

    @JsName("C")
    public fun copy(other: Any): ActorPartitionSubsystem
  }
}

@JsName("T$719")
public external interface ParamsProvider {
  @JsName("Params")
  public var params: Array<AudioParameter>
}

public open external class ActorSoundParameterInterface(
  outer: UObject,
) : Interface {
  @JsName("GetActorSoundParams")
  public open fun getActorSoundParams(params: Array<AudioParameter>): ParamsProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorSoundParameterInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorSoundParameterInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorSoundParameterInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorSoundParameterInterface

    @JsName("C")
    public fun copy(other: UObject): ActorSoundParameterInterface

    @JsName("C")
    public fun copy(other: Any): ActorSoundParameterInterface
  }
}

public open external class StreamableTexture {
  @JsName("Name")
  public open var name: String

  @JsName("Guid")
  public open var guid: Guid

  public open fun clone(): StreamableTexture

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StreamableTexture

    @JsName("C")
    public fun copy(other: Any): StreamableTexture
  }
}

public open external class ActorTextureStreamingBuildDataComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("StreamableTextures")
  public open var streamableTextures: Array<StreamableTexture>

  @JsName("PackedTextureStreamingQualityLevelFeatureLevel")
  public open var packedTextureStreamingQualityLevelFeatureLevel: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorTextureStreamingBuildDataComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorTextureStreamingBuildDataComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorTextureStreamingBuildDataComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorTextureStreamingBuildDataComponent

    @JsName("C")
    public fun copy(other: UObject): ActorTextureStreamingBuildDataComponent

    @JsName("C")
    public fun copy(other: Any): ActorTextureStreamingBuildDataComponent
  }
}

public open external class AimOffsetBlendSpace(
  outer: UObject,
) : BlendSpace {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AimOffsetBlendSpace

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AimOffsetBlendSpace

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AimOffsetBlendSpace

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AimOffsetBlendSpace

    @JsName("C")
    public fun copy(other: UObject): AimOffsetBlendSpace

    @JsName("C")
    public fun copy(other: Any): AimOffsetBlendSpace
  }
}

@JsName("BlendSpace1D")
public open external class BlendSpace1d(
  outer: UObject,
) : BlendSpace {
  @JsName("bDisplayEditorVertically")
  public open var displayEditorVertically: Boolean

  @JsName("bScaleAnimation")
  public open var scaleAnimation: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlendSpace1d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlendSpace1d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlendSpace1d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlendSpace1d

    @JsName("C")
    public fun copy(other: UObject): BlendSpace1d

    @JsName("C")
    public fun copy(other: Any): BlendSpace1d
  }
}

@JsName("AimOffsetBlendSpace1D")
public open external class AimOffsetBlendSpace1d(
  outer: UObject,
) : BlendSpace1d {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AimOffsetBlendSpace1d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AimOffsetBlendSpace1d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AimOffsetBlendSpace1d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AimOffsetBlendSpace1d

    @JsName("C")
    public fun copy(other: UObject): AimOffsetBlendSpace1d

    @JsName("C")
    public fun copy(other: Any): AimOffsetBlendSpace1d
  }
}

public open external class AmbientSound(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("AudioComponent")
  public open var audioComponent: AudioComponent

  @JsName("Stop")
  public open fun stop(): Unit

  @JsName("Play")
  public open fun play(startTime: Number): Unit

  @JsName("FadeOut")
  public open fun fadeOut(fadeOutDuration: Number, fadeVolumeLevel: Number): Unit

  @JsName("FadeIn")
  public open fun fadeIn(fadeInDuration: Number, fadeVolumeLevel: Number): Unit

  @JsName("AdjustVolume")
  public open fun adjustVolume(adjustVolumeDuration: Number, adjustVolumeLevel: Number): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AmbientSound

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AmbientSound

    @JsName("C")
    public fun copy(other: UObject): AmbientSound

    @JsName("C")
    public fun copy(other: Any): AmbientSound
  }
}

public open external class AnimationAssetExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationAssetExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationAssetExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationAssetExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationAssetExtensions

    @JsName("GetSkeleton")
    public fun getSkeleton(inAsset: AnimationAsset): Skeleton

    @JsName("C")
    public fun copy(other: UObject): AnimationAssetExtensions

    @JsName("C")
    public fun copy(other: Any): AnimationAssetExtensions
  }
}

public open external class TimecodeCustomAttributeNameSettings {
  @JsName("HourAttributeName")
  public open var hourAttributeName: String

  @JsName("MinuteAttributeName")
  public open var minuteAttributeName: String

  @JsName("SecondAttributeName")
  public open var secondAttributeName: String

  @JsName("FrameAttributeName")
  public open var frameAttributeName: String

  @JsName("SubframeAttributeName")
  public open var subframeAttributeName: String

  @JsName("RateAttributeName")
  public open var rateAttributeName: String

  @JsName("TakenameAttributeName")
  public open var takenameAttributeName: String

  public open fun clone(): TimecodeCustomAttributeNameSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TimecodeCustomAttributeNameSettings

    @JsName("C")
    public fun copy(other: Any): TimecodeCustomAttributeNameSettings
  }
}

public open external class CustomAttributeSetting {
  @JsName("Name")
  public open var name: String

  @JsName("Meaning")
  public open var meaning: String

  public open fun clone(): CustomAttributeSetting

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomAttributeSetting

    @JsName("C")
    public fun copy(other: Any): CustomAttributeSetting
  }
}

@JsName("ECustomAttributeBlendType")
public external object CustomAttributeBlendType {
  public var Override: String

  public var Blend: String

  @JsName("ECustomAttributeBlendType_MAX")
  public var Max: String
}

public open external class AnimationSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("CompressCommandletVersion")
  public open var compressCommandletVersion: Number

  @JsName("KeyEndEffectorsMatchNameArray")
  public open var keyEndEffectorsMatchNameArray: Array<String>

  @JsName("ForceRecompression")
  public open var forceRecompression: Boolean

  @JsName("bForceBelowThreshold")
  public open var forceBelowThreshold: Boolean

  @JsName("bFirstRecompressUsingCurrentOrDefault")
  public open var firstRecompressUsingCurrentOrDefault: Boolean

  @JsName("bRaiseMaxErrorToExisting")
  public open var raiseMaxErrorToExisting: Boolean

  @JsName("bEnablePerformanceLog")
  public open var enablePerformanceLog: Boolean

  @JsName("bStripAnimationDataOnDedicatedServer")
  public open var stripAnimationDataOnDedicatedServer: Boolean

  @JsName("bTickAnimationOnSkeletalMeshInit")
  public open var tickAnimationOnSkeletalMeshInit: Boolean

  @JsName("BoneTimecodeCustomAttributeNameSettings")
  public open var boneTimecodeCustomAttributeNameSettings: TimecodeCustomAttributeNameSettings

  @JsName("BoneCustomAttributesNames")
  public open var boneCustomAttributesNames: Array<CustomAttributeSetting>

  @JsName("BoneNamesWithCustomAttributes")
  public open var boneNamesWithCustomAttributes: Array<String>

  @JsName("AttributeBlendModes")
  public open var attributeBlendModes: Any

  @JsName("DefaultAttributeBlendMode")
  public open var defaultAttributeBlendMode: String

  @JsName("TransformAttributeNames")
  public open var transformAttributeNames: Array<String>

  @JsName("MirrorFindReplaceExpressions")
  public open var mirrorFindReplaceExpressions: Array<MirrorFindReplaceExpression>

  @JsName("GetBoneCustomAttributeNamesToImport")
  public open fun getBoneCustomAttributeNamesToImport(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationSettings

    @JsName("C")
    public fun copy(other: UObject): AnimationSettings

    @JsName("C")
    public fun copy(other: Any): AnimationSettings
  }
}

@JsName("AnimBlueprintClassSubsystem_PropertyAccess")
public open external class AnimBlueprintClassSubsystemPropertyAccess(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintClassSubsystemPropertyAccess

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintClassSubsystemPropertyAccess

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintClassSubsystemPropertyAccess

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintClassSubsystemPropertyAccess

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintClassSubsystemPropertyAccess

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintClassSubsystemPropertyAccess
  }
}

public open external class AnimBlueprintGeneratedStruct(
  outer: UObject,
) : ScriptStruct {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintGeneratedStruct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintGeneratedStruct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintGeneratedStruct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintGeneratedStruct

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintGeneratedStruct

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintGeneratedStruct
  }
}

public open external class BakedStateExitTransition {
  @JsName("CanTakeDelegateIndex")
  public open var canTakeDelegateIndex: Number

  @JsName("CustomResultNodeIndex")
  public open var customResultNodeIndex: Number

  @JsName("TransitionIndex")
  public open var transitionIndex: Number

  @JsName("bDesiredTransitionReturnValue")
  public open var desiredTransitionReturnValue: Boolean

  @JsName("bAutomaticRemainingTimeRule")
  public open var automaticRemainingTimeRule: Boolean

  @JsName("SyncGroupNameToRequireValidMarkersRule")
  public open var syncGroupNameToRequireValidMarkersRule: String

  @JsName("PoseEvaluatorLinks")
  public open var poseEvaluatorLinks: Array<Number>

  public open fun clone(): BakedStateExitTransition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BakedStateExitTransition

    @JsName("C")
    public fun copy(other: Any): BakedStateExitTransition
  }
}

public open external class BakedAnimationState {
  @JsName("StateName")
  public open var stateName: String

  @JsName("Transitions")
  public open var transitions: Array<BakedStateExitTransition>

  @JsName("StateRootNodeIndex")
  public open var stateRootNodeIndex: Number

  @JsName("StartNotify")
  public open var startNotify: Number

  @JsName("EndNotify")
  public open var endNotify: Number

  @JsName("FullyBlendedNotify")
  public open var fullyBlendedNotify: Number

  @JsName("bIsAConduit")
  public open var isAConduit: Boolean

  @JsName("EntryRuleNodeIndex")
  public open var entryRuleNodeIndex: Number

  @JsName("PlayerNodeIndices")
  public open var playerNodeIndices: Array<Number>

  @JsName("LayerNodeIndices")
  public open var layerNodeIndices: Array<Number>

  @JsName("bAlwaysResetOnEntry")
  public open var alwaysResetOnEntry: Boolean

  public open fun clone(): BakedAnimationState

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BakedAnimationState

    @JsName("C")
    public fun copy(other: Any): BakedAnimationState
  }
}

public open external class AnimationStateBase {
  @JsName("StateName")
  public open var stateName: String

  public open fun clone(): AnimationStateBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationStateBase

    @JsName("C")
    public fun copy(other: Any): AnimationStateBase
  }
}

public open external class AnimationTransitionBetweenStates : AnimationStateBase {
  @JsName("PreviousState")
  public open var previousState: Number

  @JsName("NextState")
  public open var nextState: Number

  @JsName("CrossfadeDuration")
  public open var crossfadeDuration: Number

  @JsName("StartNotify")
  public open var startNotify: Number

  @JsName("EndNotify")
  public open var endNotify: Number

  @JsName("InterruptNotify")
  public open var interruptNotify: Number

  @JsName("BlendMode")
  public open var blendMode: String

  @JsName("CustomCurve")
  public open var customCurve: CurveFloat

  @JsName("BlendProfile")
  public open var blendProfile: BlendProfile

  @JsName("LogicType")
  public open var logicType: String

  public override fun clone(): AnimationTransitionBetweenStates

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationTransitionBetweenStates

    @JsName("C")
    public fun copy(other: Any): AnimationTransitionBetweenStates
  }
}

public open external class BakedAnimationStateMachine {
  @JsName("MachineName")
  public open var machineName: String

  @JsName("InitialState")
  public open var initialState: Number

  @JsName("States")
  public open var states: Array<BakedAnimationState>

  @JsName("Transitions")
  public open var transitions: Array<AnimationTransitionBetweenStates>

  public open fun clone(): BakedAnimationStateMachine

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BakedAnimationStateMachine

    @JsName("C")
    public fun copy(other: Any): BakedAnimationStateMachine
  }
}

@JsName("EAnimNodeDataFlags")
public external object AnimNodeDataFlags {
  public var None: String

  public var HasInitialUpdateFunction: String

  public var HasBecomeRelevantFunction: String

  public var HasUpdateFunction: String

  @JsName("EAnimNodeDataFlags_MAX")
  public var Max: String
}

public open external class AnimNodeData {
  @JsName("AnimClassInterface")
  public open var animClassInterface: Any

  @JsName("Entries")
  public open var entries: Array<Any>

  @JsName("NodeIndex")
  public open var nodeIndex: Number

  @JsName("Flags")
  public open var flags: String

  public open fun clone(): AnimNodeData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeData

    @JsName("C")
    public fun copy(other: Any): AnimNodeData
  }
}

public open external class AnimBlueprintGeneratedClass(
  outer: UObject,
) : BlueprintGeneratedClass {
  @JsName("BakedStateMachines")
  public open var bakedStateMachines: Array<BakedAnimationStateMachine>

  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("AnimNotifies")
  public open var animNotifies: Array<AnimNotifyEvent>

  @JsName("OrderedSavedPoseIndicesMap")
  public open var orderedSavedPoseIndicesMap: Any

  @JsName("SyncGroupNames")
  public open var syncGroupNames: Array<String>

  @JsName("EvaluateGraphExposedInputs")
  public open var evaluateGraphExposedInputs: Array<ExposedValueHandler>

  @JsName("GraphAssetPlayerInformation")
  public open var graphAssetPlayerInformation: Any

  @JsName("GraphBlendOptions")
  public open var graphBlendOptions: Any

  @JsName("AnimNodeData")
  public open var animNodeData: Array<AnimNodeData>

  @JsName("NodeTypeMap")
  public open var nodeTypeMap: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintGeneratedClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintGeneratedClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintGeneratedClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintGeneratedClass

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintGeneratedClass

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintGeneratedClass
  }
}

public open external class AnimBlueprintFunction {
  @JsName("Name")
  public open var name: String

  @JsName("Group")
  public open var group: String

  @JsName("OutputPoseNodeIndex")
  public open var outputPoseNodeIndex: Number

  @JsName("InputPoseNames")
  public open var inputPoseNames: Array<String>

  @JsName("InputPoseNodeIndices")
  public open var inputPoseNodeIndices: Array<Number>

  @JsName("bImplemented")
  public open var implemented: Boolean

  public open fun clone(): AnimBlueprintFunction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintFunction

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintFunction
  }
}

public open external class AnimBlueprintFunctionData {
  @JsName("OutputPoseNodeProperty")
  public open var outputPoseNodeProperty: Any

  @JsName("InputPoseNodeProperties")
  public open var inputPoseNodeProperties: Array<Any>

  @JsName("InputProperties")
  public open var inputProperties: Array<Any>

  public open fun clone(): AnimBlueprintFunctionData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintFunctionData

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintFunctionData
  }
}

public open external class AnimClassData(
  outer: UObject,
) : UObject {
  @JsName("BakedStateMachines")
  public open var bakedStateMachines: Array<BakedAnimationStateMachine>

  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("AnimNotifies")
  public open var animNotifies: Array<AnimNotifyEvent>

  @JsName("OrderedSavedPoseIndicesMap")
  public open var orderedSavedPoseIndicesMap: Any

  @JsName("AnimBlueprintFunctions")
  public open var animBlueprintFunctions: Array<AnimBlueprintFunction>

  @JsName("AnimBlueprintFunctionData")
  public open var animBlueprintFunctionData: Array<AnimBlueprintFunctionData>

  @JsName("AnimNodeProperties")
  public open var animNodeProperties: Array<Any>

  @JsName("LinkedAnimGraphNodeProperties")
  public open var linkedAnimGraphNodeProperties: Array<Any>

  @JsName("LinkedAnimLayerNodeProperties")
  public open var linkedAnimLayerNodeProperties: Array<Any>

  @JsName("PreUpdateNodeProperties")
  public open var preUpdateNodeProperties: Array<Any>

  @JsName("DynamicResetNodeProperties")
  public open var dynamicResetNodeProperties: Array<Any>

  @JsName("StateMachineNodeProperties")
  public open var stateMachineNodeProperties: Array<Any>

  @JsName("InitializationNodeProperties")
  public open var initializationNodeProperties: Array<Any>

  @JsName("GraphNameAssetPlayers")
  public open var graphNameAssetPlayers: Any

  @JsName("SyncGroupNames")
  public open var syncGroupNames: Array<String>

  @JsName("GraphBlendOptions")
  public open var graphBlendOptions: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimClassData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimClassData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimClassData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimClassData

    @JsName("C")
    public fun copy(other: UObject): AnimClassData

    @JsName("C")
    public fun copy(other: Any): AnimClassData
  }
}

public open external class AnimClassInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimClassInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimClassInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimClassInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimClassInterface

    @JsName("C")
    public fun copy(other: UObject): AnimClassInterface

    @JsName("C")
    public fun copy(other: Any): AnimClassInterface
  }
}

public open external class AnimComposite(
  outer: UObject,
) : AnimCompositeBase {
  @JsName("AnimationTrack")
  public open var animationTrack: AnimTrack

  @JsName("PreviewBasePose")
  public open var previewBasePose: AnimSequence

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimComposite

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimComposite

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimComposite

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimComposite

    @JsName("C")
    public fun copy(other: UObject): AnimComposite

    @JsName("C")
    public fun copy(other: Any): AnimComposite
  }
}

@JsName("AnimCompress_BitwiseCompressOnly")
public open external class AnimCompressBitwiseCompressOnly(
  outer: UObject,
) : AnimCompress {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompressBitwiseCompressOnly

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompressBitwiseCompressOnly

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompressBitwiseCompressOnly

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompressBitwiseCompressOnly

    @JsName("C")
    public fun copy(other: UObject): AnimCompressBitwiseCompressOnly

    @JsName("C")
    public fun copy(other: Any): AnimCompressBitwiseCompressOnly
  }
}

@JsName("AnimCompress_LeastDestructive")
public open external class AnimCompressLeastDestructive(
  outer: UObject,
) : AnimCompressBitwiseCompressOnly {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompressLeastDestructive

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompressLeastDestructive

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompressLeastDestructive

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompressLeastDestructive

    @JsName("C")
    public fun copy(other: UObject): AnimCompressLeastDestructive

    @JsName("C")
    public fun copy(other: Any): AnimCompressLeastDestructive
  }
}

@JsName("AnimCompress_RemoveLinearKeys")
public open external class AnimCompressRemoveLinearKeys(
  outer: UObject,
) : AnimCompress {
  @JsName("MaxPosDiff")
  public open var maxPosDiff: Number

  @JsName("MaxAngleDiff")
  public open var maxAngleDiff: Number

  @JsName("MaxScaleDiff")
  public open var maxScaleDiff: Number

  @JsName("MaxEffectorDiff")
  public open var maxEffectorDiff: Number

  @JsName("MinEffectorDiff")
  public open var minEffectorDiff: Number

  @JsName("EffectorDiffSocket")
  public open var effectorDiffSocket: Number

  @JsName("ParentKeyScale")
  public open var parentKeyScale: Number

  @JsName("bRetarget")
  public open var retarget: Boolean

  @JsName("bActuallyFilterLinearKeys")
  public open var actuallyFilterLinearKeys: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompressRemoveLinearKeys

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompressRemoveLinearKeys

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompressRemoveLinearKeys

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompressRemoveLinearKeys

    @JsName("C")
    public fun copy(other: UObject): AnimCompressRemoveLinearKeys

    @JsName("C")
    public fun copy(other: Any): AnimCompressRemoveLinearKeys
  }
}

@JsName("AnimCompress_PerTrackCompression")
public open external class AnimCompressPerTrackCompression(
  outer: UObject,
) : AnimCompressRemoveLinearKeys {
  @JsName("MaxZeroingThreshold")
  public open var maxZeroingThreshold: Number

  @JsName("MaxPosDiffBitwise")
  public open var maxPosDiffBitwise: Number

  @JsName("MaxAngleDiffBitwise")
  public open var maxAngleDiffBitwise: Number

  @JsName("MaxScaleDiffBitwise")
  public open var maxScaleDiffBitwise: Number

  @JsName("AllowedRotationFormats")
  public open var allowedRotationFormats: Array<String>

  @JsName("AllowedTranslationFormats")
  public open var allowedTranslationFormats: Array<String>

  @JsName("AllowedScaleFormats")
  public open var allowedScaleFormats: Array<String>

  @JsName("bResampleAnimation")
  public open var resampleAnimation: Boolean

  @JsName("ResampledFramerate")
  public open var resampledFramerate: Number

  @JsName("MinKeysForResampling")
  public open var minKeysForResampling: Number

  @JsName("bUseAdaptiveError")
  public open var useAdaptiveError: Boolean

  @JsName("bUseOverrideForEndEffectors")
  public open var useOverrideForEndEffectors: Boolean

  @JsName("TrackHeightBias")
  public open var trackHeightBias: Number

  @JsName("ParentingDivisor")
  public open var parentingDivisor: Number

  @JsName("ParentingDivisorExponent")
  public open var parentingDivisorExponent: Number

  @JsName("bUseAdaptiveError2")
  public open var useAdaptiveError2: Boolean

  @JsName("RotationErrorSourceRatio")
  public open var rotationErrorSourceRatio: Number

  @JsName("TranslationErrorSourceRatio")
  public open var translationErrorSourceRatio: Number

  @JsName("ScaleErrorSourceRatio")
  public open var scaleErrorSourceRatio: Number

  @JsName("MaxErrorPerTrackRatio")
  public open var maxErrorPerTrackRatio: Number

  @JsName("PerturbationProbeSize")
  public open var perturbationProbeSize: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompressPerTrackCompression

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompressPerTrackCompression

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompressPerTrackCompression

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompressPerTrackCompression

    @JsName("C")
    public fun copy(other: UObject): AnimCompressPerTrackCompression

    @JsName("C")
    public fun copy(other: Any): AnimCompressPerTrackCompression
  }
}

@JsName("AnimCompress_RemoveEverySecondKey")
public open external class AnimCompressRemoveEverySecondKey(
  outer: UObject,
) : AnimCompress {
  @JsName("MinKeys")
  public open var minKeys: Number

  @JsName("bStartAtSecondKey")
  public open var startAtSecondKey: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompressRemoveEverySecondKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompressRemoveEverySecondKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompressRemoveEverySecondKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompressRemoveEverySecondKey

    @JsName("C")
    public fun copy(other: UObject): AnimCompressRemoveEverySecondKey

    @JsName("C")
    public fun copy(other: Any): AnimCompressRemoveEverySecondKey
  }
}

@JsName("AnimCompress_RemoveTrivialKeys")
public open external class AnimCompressRemoveTrivialKeys(
  outer: UObject,
) : AnimCompress {
  @JsName("MaxPosDiff")
  public open var maxPosDiff: Number

  @JsName("MaxAngleDiff")
  public open var maxAngleDiff: Number

  @JsName("MaxScaleDiff")
  public open var maxScaleDiff: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompressRemoveTrivialKeys

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompressRemoveTrivialKeys

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompressRemoveTrivialKeys

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompressRemoveTrivialKeys

    @JsName("C")
    public fun copy(other: UObject): AnimCompressRemoveTrivialKeys

    @JsName("C")
    public fun copy(other: Any): AnimCompressRemoveTrivialKeys
  }
}

@JsName("AnimCurveCompressionCodec_CompressedRichCurve")
public open external class AnimCurveCompressionCodecCompressedRichCurve(
  outer: UObject,
) : AnimCurveCompressionCodec {
  @JsName("MaxCurveError")
  public open var maxCurveError: Number

  @JsName("UseAnimSequenceSampleRate")
  public open var useAnimSequenceSampleRate: Boolean

  @JsName("ErrorSampleRate")
  public open var errorSampleRate: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCurveCompressionCodecCompressedRichCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        AnimCurveCompressionCodecCompressedRichCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCurveCompressionCodecCompressedRichCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCurveCompressionCodecCompressedRichCurve

    @JsName("C")
    public fun copy(other: UObject): AnimCurveCompressionCodecCompressedRichCurve

    @JsName("C")
    public fun copy(other: Any): AnimCurveCompressionCodecCompressedRichCurve
  }
}

@JsName("AnimCurveCompressionCodec_UniformIndexable")
public open external class AnimCurveCompressionCodecUniformIndexable(
  outer: UObject,
) : AnimCurveCompressionCodec {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCurveCompressionCodecUniformIndexable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCurveCompressionCodecUniformIndexable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCurveCompressionCodecUniformIndexable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCurveCompressionCodecUniformIndexable

    @JsName("C")
    public fun copy(other: UObject): AnimCurveCompressionCodecUniformIndexable

    @JsName("C")
    public fun copy(other: Any): AnimCurveCompressionCodecUniformIndexable
  }
}

@JsName("AnimCurveCompressionCodec_UniformlySampled")
public open external class AnimCurveCompressionCodecUniformlySampled(
  outer: UObject,
) : AnimCurveCompressionCodec {
  @JsName("UseAnimSequenceSampleRate")
  public open var useAnimSequenceSampleRate: Boolean

  @JsName("SampleRate")
  public open var sampleRate: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCurveCompressionCodecUniformlySampled

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCurveCompressionCodecUniformlySampled

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCurveCompressionCodecUniformlySampled

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCurveCompressionCodecUniformlySampled

    @JsName("C")
    public fun copy(other: UObject): AnimCurveCompressionCodecUniformlySampled

    @JsName("C")
    public fun copy(other: Any): AnimCurveCompressionCodecUniformlySampled
  }
}

public open external class AnimationDataModelNotifiesExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationDataModelNotifiesExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationDataModelNotifiesExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationDataModelNotifiesExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationDataModelNotifiesExtensions

    @JsName("GetPayload")
    public fun getPayload(payload: AnimDataModelNotifPayload): EmptyPayload

    @JsName("CopyPayload")
    public fun copyPayload(
      payload: AnimDataModelNotifPayload,
      expectedStruct: ScriptStruct,
      outPayload: EmptyPayload,
    ): OutPayloadProvider

    @JsName("C")
    public fun copy(other: UObject): AnimationDataModelNotifiesExtensions

    @JsName("C")
    public fun copy(other: Any): AnimationDataModelNotifiesExtensions
  }
}

public open external class AnimNotifyMirrorInspectionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyMirrorInspectionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyMirrorInspectionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyMirrorInspectionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyMirrorInspectionLibrary

    @JsName("IsTriggeredByMirroredAnimation")
    public fun isTriggeredByMirroredAnimation(eventReference: AnimNotifyEventReference): Boolean

    @JsName("GetMirrorDataTable")
    public fun getMirrorDataTable(eventReference: AnimNotifyEventReference): MirrorDataTable

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyMirrorInspectionLibrary

    @JsName("C")
    public fun copy(other: Any): AnimNotifyMirrorInspectionLibrary
  }
}

public open external class AnimNotifyStateMachineInspectionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyStateMachineInspectionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyStateMachineInspectionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyStateMachineInspectionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyStateMachineInspectionLibrary

    @JsName("IsTriggeredByStateMachine")
    public fun isTriggeredByStateMachine(
      eventReference: AnimNotifyEventReference,
      animInstance: AnimInstance,
      stateMachineName: String,
    ): Boolean

    @JsName("IsTriggeredByStateInStateMachine")
    public fun isTriggeredByStateInStateMachine(
      eventReference: AnimNotifyEventReference,
      animInstance: AnimInstance,
      stateMachineName: String,
      stateName: String,
    ): Boolean

    @JsName("IsTriggeredByState")
    public fun isTriggeredByState(
      eventReference: AnimNotifyEventReference,
      animInstance: AnimInstance,
      stateName: String,
    ): Boolean

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyStateMachineInspectionLibrary

    @JsName("C")
    public fun copy(other: Any): AnimNotifyStateMachineInspectionLibrary
  }
}

@JsName("AnimNotifyState_DisableRootMotion")
public open external class AnimNotifyStateDisableRootMotion(
  outer: UObject,
) : AnimNotifyState {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyStateDisableRootMotion

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyStateDisableRootMotion

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyStateDisableRootMotion

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyStateDisableRootMotion

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyStateDisableRootMotion

    @JsName("C")
    public fun copy(other: Any): AnimNotifyStateDisableRootMotion
  }
}

@JsName("AnimNotifyState_TimedParticleEffect")
public open external class AnimNotifyStateTimedParticleEffect(
  outer: UObject,
) : AnimNotifyState {
  @JsName("PSTemplate")
  public open var psTemplate: ParticleSystem

  @JsName("SocketName")
  public open var socketName: String

  @JsName("LocationOffset")
  public open var locationOffset: Vector

  @JsName("RotationOffset")
  public open var rotationOffset: Rotator

  @JsName("bDestroyAtEnd")
  public open var destroyAtEnd: Boolean

  @JsName("PreviousPSTemplates")
  public open var previousPsTemplates: Array<ParticleSystem>

  @JsName("PreviousSocketNames")
  public open var previousSocketNames: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyStateTimedParticleEffect

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyStateTimedParticleEffect

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyStateTimedParticleEffect

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyStateTimedParticleEffect

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyStateTimedParticleEffect

    @JsName("C")
    public fun copy(other: Any): AnimNotifyStateTimedParticleEffect
  }
}

@JsName("AnimNotifyState_Trail")
public open external class AnimNotifyStateTrail(
  outer: UObject,
) : AnimNotifyState {
  @JsName("PSTemplate")
  public open var psTemplate: ParticleSystem

  @JsName("FirstSocketName")
  public open var firstSocketName: String

  @JsName("SecondSocketName")
  public open var secondSocketName: String

  @JsName("WidthScaleMode")
  public open var widthScaleMode: String

  @JsName("WidthScaleCurve")
  public open var widthScaleCurve: String

  @JsName("bRecycleSpawnedSystems")
  public open var recycleSpawnedSystems: Boolean

  @JsName("bRenderGeometry")
  public open var renderGeometry: Boolean

  @JsName("bRenderSpawnPoints")
  public open var renderSpawnPoints: Boolean

  @JsName("bRenderTangents")
  public open var renderTangents: Boolean

  @JsName("bRenderTessellation")
  public open var renderTessellation: Boolean

  @JsName("OverridePSTemplate")
  public open fun overridePsTemplate(meshComp: SkeletalMeshComponent, animation: AnimSequenceBase):
      ParticleSystem

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyStateTrail

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyStateTrail

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyStateTrail

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyStateTrail

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyStateTrail

    @JsName("C")
    public fun copy(other: Any): AnimNotifyStateTrail
  }
}

@JsName("AnimNotify_PauseClothingSimulation")
public open external class AnimNotifyPauseClothingSimulation(
  outer: UObject,
) : AnimNotify {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyPauseClothingSimulation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyPauseClothingSimulation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyPauseClothingSimulation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyPauseClothingSimulation

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyPauseClothingSimulation

    @JsName("C")
    public fun copy(other: Any): AnimNotifyPauseClothingSimulation
  }
}

@JsName("AnimNotify_PlayParticleEffect")
public open external class AnimNotifyPlayParticleEffect(
  outer: UObject,
) : AnimNotify {
  @JsName("PSTemplate")
  public open var psTemplate: ParticleSystem

  @JsName("LocationOffset")
  public open var locationOffset: Vector

  @JsName("RotationOffset")
  public open var rotationOffset: Rotator

  @JsName("Scale")
  public open var scale: Vector

  @JsName("Attached")
  public open var attached: Boolean

  @JsName("SocketName")
  public open var socketName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyPlayParticleEffect

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyPlayParticleEffect

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyPlayParticleEffect

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyPlayParticleEffect

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyPlayParticleEffect

    @JsName("C")
    public fun copy(other: Any): AnimNotifyPlayParticleEffect
  }
}

@JsName("AnimNotify_PlaySound")
public open external class AnimNotifyPlaySound(
  outer: UObject,
) : AnimNotify {
  @JsName("Sound")
  public open var sound: SoundBase

  @JsName("VolumeMultiplier")
  public open var volumeMultiplier: Number

  @JsName("PitchMultiplier")
  public open var pitchMultiplier: Number

  @JsName("bFollow")
  public open var follow: Boolean

  @JsName("bPreviewIgnoreAttenuation")
  public open var previewIgnoreAttenuation: Boolean

  @JsName("AttachName")
  public open var attachName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyPlaySound

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyPlaySound

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyPlaySound

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyPlaySound

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyPlaySound

    @JsName("C")
    public fun copy(other: Any): AnimNotifyPlaySound
  }
}

@JsName("AnimNotify_ResetClothingSimulation")
public open external class AnimNotifyResetClothingSimulation(
  outer: UObject,
) : AnimNotify {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyResetClothingSimulation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyResetClothingSimulation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyResetClothingSimulation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyResetClothingSimulation

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyResetClothingSimulation

    @JsName("C")
    public fun copy(other: Any): AnimNotifyResetClothingSimulation
  }
}

@JsName("AnimNotify_ResetDynamics")
public open external class AnimNotifyResetDynamics(
  outer: UObject,
) : AnimNotify {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyResetDynamics

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyResetDynamics

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyResetDynamics

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyResetDynamics

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyResetDynamics

    @JsName("C")
    public fun copy(other: Any): AnimNotifyResetDynamics
  }
}

@JsName("AnimNotify_ResumeClothingSimulation")
public open external class AnimNotifyResumeClothingSimulation(
  outer: UObject,
) : AnimNotify {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyResumeClothingSimulation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyResumeClothingSimulation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyResumeClothingSimulation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyResumeClothingSimulation

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyResumeClothingSimulation

    @JsName("C")
    public fun copy(other: Any): AnimNotifyResumeClothingSimulation
  }
}

public open external class AnimSetMeshLinkup {
  @JsName("BoneToTrackTable")
  public open var boneToTrackTable: Array<Number>

  public open fun clone(): AnimSetMeshLinkup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSetMeshLinkup

    @JsName("C")
    public fun copy(other: Any): AnimSetMeshLinkup
  }
}

public open external class AnimSet(
  outer: UObject,
) : UObject {
  @JsName("bAnimRotationOnly")
  public open var animRotationOnly: Boolean

  @JsName("TrackBoneNames")
  public open var trackBoneNames: Array<String>

  @JsName("Sequences")
  public open var sequences: Array<AnimSequence>

  @JsName("LinkupCache")
  public open var linkupCache: Array<AnimSetMeshLinkup>

  @JsName("BoneUseAnimTranslation")
  public open var boneUseAnimTranslation: Array<Number>

  @JsName("ForceUseMeshTranslation")
  public open var forceUseMeshTranslation: Array<Number>

  @JsName("UseTranslationBoneNames")
  public open var useTranslationBoneNames: Array<String>

  @JsName("ForceMeshTranslationBoneNames")
  public open var forceMeshTranslationBoneNames: Array<String>

  @JsName("PreviewSkelMeshName")
  public open var previewSkelMeshName: String

  @JsName("BestRatioSkelMeshName")
  public open var bestRatioSkelMeshName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSet

    @JsName("C")
    public fun copy(other: UObject): AnimSet

    @JsName("C")
    public fun copy(other: Any): AnimSet
  }
}

public open external class AnimStateMachineTypes(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStateMachineTypes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStateMachineTypes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStateMachineTypes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStateMachineTypes

    @JsName("C")
    public fun copy(other: UObject): AnimStateMachineTypes

    @JsName("C")
    public fun copy(other: Any): AnimStateMachineTypes
  }
}

public open external class AnimStreamable(
  outer: UObject,
) : AnimSequenceBase {
  @JsName("NumberOfKeys")
  public open var numberOfKeys: Number

  @JsName("Interpolation")
  public open var interpolation: String

  @JsName("RetargetSource")
  public open var retargetSource: String

  @JsName("SourceSequence")
  public open var sourceSequence: AnimSequence

  @JsName("RawDataGuid")
  public open var rawDataGuid: Guid

  @JsName("NumFrames")
  public open var numFrames: Number

  @JsName("RawAnimationData")
  public open var rawAnimationData: Array<RawAnimSequenceTrack>

  @JsName("TrackToSkeletonMapTable")
  public open var trackToSkeletonMapTable: Array<TrackToSkeletonMap>

  @JsName("AnimationTrackNames")
  public open var animationTrackNames: Array<String>

  @JsName("BoneCompressionSettings")
  public open var boneCompressionSettings: AnimBoneCompressionSettings

  @JsName("CurveCompressionSettings")
  public open var curveCompressionSettings: AnimCurveCompressionSettings

  @JsName("bEnableRootMotion")
  public open var enableRootMotion: Boolean

  @JsName("RootMotionRootLock")
  public open var rootMotionRootLock: String

  @JsName("bForceRootLock")
  public open var forceRootLock: Boolean

  @JsName("bUseNormalizedRootMotionScale")
  public open var useNormalizedRootMotionScale: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStreamable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStreamable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStreamable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStreamable

    @JsName("C")
    public fun copy(other: UObject): AnimStreamable

    @JsName("C")
    public fun copy(other: Any): AnimStreamable
  }
}

public open external class RawAnimSequenceTrackExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RawAnimSequenceTrackExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RawAnimSequenceTrackExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RawAnimSequenceTrackExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RawAnimSequenceTrackExtensions

    @JsName("GetScaleKeys")
    public fun getScaleKeys(track: RawAnimSequenceTrack): Array<Vector>

    @JsName("GetRotationalKeys")
    public fun getRotationalKeys(track: RawAnimSequenceTrack): Array<Quat>

    @JsName("GetPositionalKeys")
    public fun getPositionalKeys(track: RawAnimSequenceTrack): Array<Vector>

    @JsName("C")
    public fun copy(other: UObject): RawAnimSequenceTrackExtensions

    @JsName("C")
    public fun copy(other: Any): RawAnimSequenceTrackExtensions
  }
}

@JsName("ETemperatureSeverityType")
public external object TemperatureSeverityType {
  public var Unknown: String

  public var Good: String

  public var Bad: String

  public var Serious: String

  public var Critical: String

  public var NumSeverities: String

  @JsName("ETemperatureSeverityType_MAX")
  public var Max: String
}

public open external class ApplicationLifecycleComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("ApplicationWillDeactivateDelegate")
  public open var applicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationHasReactivatedDelegate")
  public open var applicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationWillEnterBackgroundDelegate")
  public open var applicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationHasEnteredForegroundDelegate")
  public open var applicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationWillTerminateDelegate")
  public open var applicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationShouldUnloadResourcesDelegate")
  public open var applicationShouldUnloadResourcesDelegate:
      UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationReceivedStartupArgumentsDelegate")
  public open var applicationReceivedStartupArgumentsDelegate:
      UnrealEngineMulticastDelegate<(StartupArguments: Array<String>) -> Unit>

  @JsName("OnTemperatureChangeDelegate")
  public open var onTemperatureChangeDelegate:
      UnrealEngineMulticastDelegate<(Severity: String) -> Unit>

  @JsName("OnLowPowerModeDelegate")
  public open var onLowPowerModeDelegate:
      UnrealEngineMulticastDelegate<(bInLowPowerMode: Boolean) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ApplicationLifecycleComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ApplicationLifecycleComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ApplicationLifecycleComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ApplicationLifecycleComponent

    @JsName("C")
    public fun copy(other: UObject): ApplicationLifecycleComponent

    @JsName("C")
    public fun copy(other: Any): ApplicationLifecycleComponent
  }
}

@JsName("EPrimaryAssetCookRule")
public external object PrimaryAssetCookRule {
  public var Unknown: String

  public var NeverCook: String

  public var DevelopmentCook: String

  public var DevelopmentAlwaysCook: String

  public var AlwaysCook: String

  @JsName("EPrimaryAssetCookRule_MAX")
  public var Max: String
}

public open external class PrimaryAssetRules {
  @JsName("Priority")
  public open var priority: Number

  @JsName("ChunkID")
  public open var chunkId: Number

  @JsName("bApplyRecursively")
  public open var applyRecursively: Boolean

  @JsName("CookRule")
  public open var cookRule: String

  public open fun clone(): PrimaryAssetRules

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PrimaryAssetRules

    @JsName("C")
    public fun copy(other: Any): PrimaryAssetRules
  }
}

public open external class PrimaryAssetTypeInfo {
  @JsName("PrimaryAssetType")
  public open var primaryAssetType: String

  @JsName("AssetBaseClass")
  public open var assetBaseClass: Class

  @JsName("AssetBaseClassLoaded")
  public open var assetBaseClassLoaded: UnrealEngineClass

  @JsName("bHasBlueprintClasses")
  public open var hasBlueprintClasses: Boolean

  @JsName("bIsEditorOnly")
  public open var isEditorOnly: Boolean

  @JsName("Directories")
  public open var directories: Array<DirectoryPath>

  @JsName("SpecificAssets")
  public open var specificAssets: Array<SoftObjectPath>

  @JsName("Rules")
  public open var rules: PrimaryAssetRules

  @JsName("AssetScanPaths")
  public open var assetScanPaths: Array<String>

  @JsName("bIsDynamicAsset")
  public open var isDynamicAsset: Boolean

  @JsName("NumberOfAssets")
  public open var numberOfAssets: Number

  public open fun clone(): PrimaryAssetTypeInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PrimaryAssetTypeInfo

    @JsName("C")
    public fun copy(other: Any): PrimaryAssetTypeInfo
  }
}

public open external class PrimaryAssetRulesOverride {
  @JsName("PrimaryAssetId")
  public open var primaryAssetId: PrimaryAssetId

  @JsName("Rules")
  public open var rules: PrimaryAssetRules

  public open fun clone(): PrimaryAssetRulesOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PrimaryAssetRulesOverride

    @JsName("C")
    public fun copy(other: Any): PrimaryAssetRulesOverride
  }
}

public open external class PrimaryAssetRulesCustomOverride {
  @JsName("PrimaryAssetType")
  public open var primaryAssetType: PrimaryAssetType

  @JsName("FilterDirectory")
  public open var filterDirectory: DirectoryPath

  @JsName("FilterString")
  public open var filterString: String

  @JsName("Rules")
  public open var rules: PrimaryAssetRules

  public open fun clone(): PrimaryAssetRulesCustomOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PrimaryAssetRulesCustomOverride

    @JsName("C")
    public fun copy(other: Any): PrimaryAssetRulesCustomOverride
  }
}

public open external class AssetManagerRedirect {
  @JsName("Old")
  public open var old: String

  @JsName("New")
  public open var new: String

  public open fun clone(): AssetManagerRedirect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetManagerRedirect

    @JsName("C")
    public fun copy(other: Any): AssetManagerRedirect
  }
}

public open external class AssetManagerSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("PrimaryAssetTypesToScan")
  public open var primaryAssetTypesToScan: Array<PrimaryAssetTypeInfo>

  @JsName("DirectoriesToExclude")
  public open var directoriesToExclude: Array<DirectoryPath>

  @JsName("PrimaryAssetRules")
  public open var primaryAssetRules: Array<PrimaryAssetRulesOverride>

  @JsName("CustomPrimaryAssetRules")
  public open var customPrimaryAssetRules: Array<PrimaryAssetRulesCustomOverride>

  @JsName("bOnlyCookProductionAssets")
  public open var onlyCookProductionAssets: Boolean

  @JsName("bShouldManagerDetermineTypeAndName")
  public open var shouldManagerDetermineTypeAndName: Boolean

  @JsName("bShouldGuessTypeAndNameInEditor")
  public open var shouldGuessTypeAndNameInEditor: Boolean

  @JsName("bShouldAcquireMissingChunksOnLoad")
  public open var shouldAcquireMissingChunksOnLoad: Boolean

  @JsName("bShouldWarnAboutInvalidAssets")
  public open var shouldWarnAboutInvalidAssets: Boolean

  @JsName("PrimaryAssetIdRedirects")
  public open var primaryAssetIdRedirects: Array<AssetManagerRedirect>

  @JsName("PrimaryAssetTypeRedirects")
  public open var primaryAssetTypeRedirects: Array<AssetManagerRedirect>

  @JsName("AssetPathRedirects")
  public open var assetPathRedirects: Array<AssetManagerRedirect>

  @JsName("MetaDataTagsForAssetRegistry")
  public open var metaDataTagsForAssetRegistry: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetManagerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetManagerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetManagerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetManagerSettings

    @JsName("C")
    public fun copy(other: UObject): AssetManagerSettings

    @JsName("C")
    public fun copy(other: Any): AssetManagerSettings
  }
}

public open external class AsyncActionHandleSaveGame(
  outer: UObject,
) : BlueprintAsyncActionBase {
  @JsName("Completed")
  public open var completed: UnrealEngineMulticastDelegate<(SaveGame: SaveGame,
      bSuccess: Boolean) -> Unit>

  @JsName("SaveGameObject")
  public open var saveGameObject: SaveGame

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncActionHandleSaveGame

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncActionHandleSaveGame

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncActionHandleSaveGame

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncActionHandleSaveGame

    @JsName("AsyncSaveGameToSlot")
    public fun asyncSaveGameToSlot(
      worldContextObject: UObject,
      saveGameObject: SaveGame,
      slotName: String,
      userIndex: Number,
    ): AsyncActionHandleSaveGame

    @JsName("AsyncLoadGameFromSlot")
    public fun asyncLoadGameFromSlot(
      worldContextObject: UObject,
      slotName: String,
      userIndex: Number,
    ): AsyncActionHandleSaveGame

    @JsName("C")
    public fun copy(other: UObject): AsyncActionHandleSaveGame

    @JsName("C")
    public fun copy(other: Any): AsyncActionHandleSaveGame
  }
}

public open external class AsyncActionLoadPrimaryAssetBase(
  outer: UObject,
) : BlueprintAsyncActionBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncActionLoadPrimaryAssetBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncActionLoadPrimaryAssetBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncActionLoadPrimaryAssetBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncActionLoadPrimaryAssetBase

    @JsName("C")
    public fun copy(other: UObject): AsyncActionLoadPrimaryAssetBase

    @JsName("C")
    public fun copy(other: Any): AsyncActionLoadPrimaryAssetBase
  }
}

public open external class AsyncActionLoadPrimaryAsset(
  outer: UObject,
) : AsyncActionLoadPrimaryAssetBase {
  @JsName("Completed")
  public open var completed: UnrealEngineMulticastDelegate<(Loaded: UObject) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncActionLoadPrimaryAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncActionLoadPrimaryAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncActionLoadPrimaryAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncActionLoadPrimaryAsset

    @JsName("AsyncLoadPrimaryAsset")
    public fun asyncLoadPrimaryAsset(
      worldContextObject: UObject,
      primaryAsset: PrimaryAssetId,
      loadBundles: Array<String>,
    ): AsyncActionLoadPrimaryAsset

    @JsName("C")
    public fun copy(other: UObject): AsyncActionLoadPrimaryAsset

    @JsName("C")
    public fun copy(other: Any): AsyncActionLoadPrimaryAsset
  }
}

public open external class AsyncActionLoadPrimaryAssetClass(
  outer: UObject,
) : AsyncActionLoadPrimaryAssetBase {
  @JsName("Completed")
  public open var completed: UnrealEngineMulticastDelegate<(Loaded: UnrealEngineClass) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncActionLoadPrimaryAssetClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncActionLoadPrimaryAssetClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncActionLoadPrimaryAssetClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncActionLoadPrimaryAssetClass

    @JsName("AsyncLoadPrimaryAssetClass")
    public fun asyncLoadPrimaryAssetClass(
      worldContextObject: UObject,
      primaryAsset: PrimaryAssetId,
      loadBundles: Array<String>,
    ): AsyncActionLoadPrimaryAssetClass

    @JsName("C")
    public fun copy(other: UObject): AsyncActionLoadPrimaryAssetClass

    @JsName("C")
    public fun copy(other: Any): AsyncActionLoadPrimaryAssetClass
  }
}

public open external class AsyncActionLoadPrimaryAssetList(
  outer: UObject,
) : AsyncActionLoadPrimaryAssetBase {
  @JsName("Completed")
  public open var completed: UnrealEngineMulticastDelegate<(Loaded: Array<UObject>) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncActionLoadPrimaryAssetList

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncActionLoadPrimaryAssetList

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncActionLoadPrimaryAssetList

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncActionLoadPrimaryAssetList

    @JsName("AsyncLoadPrimaryAssetList")
    public fun asyncLoadPrimaryAssetList(
      worldContextObject: UObject,
      primaryAssetList: Array<PrimaryAssetId>,
      loadBundles: Array<String>,
    ): AsyncActionLoadPrimaryAssetList

    @JsName("C")
    public fun copy(other: UObject): AsyncActionLoadPrimaryAssetList

    @JsName("C")
    public fun copy(other: Any): AsyncActionLoadPrimaryAssetList
  }
}

public open external class AsyncActionLoadPrimaryAssetClassList(
  outer: UObject,
) : AsyncActionLoadPrimaryAssetBase {
  @JsName("Completed")
  public open var completed:
      UnrealEngineMulticastDelegate<(Loaded: Array<UnrealEngineClass>) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncActionLoadPrimaryAssetClassList

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncActionLoadPrimaryAssetClassList

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncActionLoadPrimaryAssetClassList

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncActionLoadPrimaryAssetClassList

    @JsName("AsyncLoadPrimaryAssetClassList")
    public fun asyncLoadPrimaryAssetClassList(
      worldContextObject: UObject,
      primaryAssetList: Array<PrimaryAssetId>,
      loadBundles: Array<String>,
    ): AsyncActionLoadPrimaryAssetClassList

    @JsName("C")
    public fun copy(other: UObject): AsyncActionLoadPrimaryAssetClassList

    @JsName("C")
    public fun copy(other: Any): AsyncActionLoadPrimaryAssetClassList
  }
}

public open external class AsyncActionChangePrimaryAssetBundles(
  outer: UObject,
) : AsyncActionLoadPrimaryAssetBase {
  @JsName("Completed")
  public open var completed: UnrealEngineMulticastDelegate<() -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncActionChangePrimaryAssetBundles

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncActionChangePrimaryAssetBundles

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncActionChangePrimaryAssetBundles

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncActionChangePrimaryAssetBundles

    @JsName("AsyncChangeBundleStateForPrimaryAssetList")
    public fun asyncChangeBundleStateForPrimaryAssetList(
      worldContextObject: UObject,
      primaryAssetList: Array<PrimaryAssetId>,
      addBundles: Array<String>,
      removeBundles: Array<String>,
    ): AsyncActionChangePrimaryAssetBundles

    @JsName("AsyncChangeBundleStateForMatchingPrimaryAssets")
    public fun asyncChangeBundleStateForMatchingPrimaryAssets(
      worldContextObject: UObject,
      newBundles: Array<String>,
      oldBundles: Array<String>,
    ): AsyncActionChangePrimaryAssetBundles

    @JsName("C")
    public fun copy(other: UObject): AsyncActionChangePrimaryAssetBundles

    @JsName("C")
    public fun copy(other: Any): AsyncActionChangePrimaryAssetBundles
  }
}

@JsName("ESkyAtmosphereTransformMode")
public external object SkyAtmosphereTransformMode {
  @JsName("PlanetTopAtAbsoluteWorldOrigin")
  public var TopAtAbsoluteWorldOrigin: String

  @JsName("PlanetTopAtComponentTransform")
  public var TopAtComponentTransform: String

  @JsName("PlanetCenterAtComponentTransform")
  public var CenterAtComponentTransform: String

  @JsName("ESkyAtmosphereTransformMode_MAX")
  public var Max: String
}

public open external class TentDistribution {
  @JsName("TipAltitude")
  public open var tipAltitude: Number

  @JsName("TipValue")
  public open var tipValue: Number

  @JsName("Width")
  public open var width: Number

  public open fun clone(): TentDistribution

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TentDistribution

    @JsName("C")
    public fun copy(other: Any): TentDistribution
  }
}

public open external class LightmassDirectionalLightSettings : LightmassLightSettings {
  @JsName("LightSourceAngle")
  public open var lightSourceAngle: Number

  public override fun clone(): LightmassDirectionalLightSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassDirectionalLightSettings

    @JsName("C")
    public fun copy(other: Any): LightmassDirectionalLightSettings
  }
}

public open external class DirectionalLightComponent(
  outer: UObject,
) : LightComponent {
  @JsName("ShadowCascadeBiasDistribution")
  public open var shadowCascadeBiasDistribution: Number

  @JsName("bEnableLightShaftOcclusion")
  public open var enableLightShaftOcclusion: Boolean

  @JsName("OcclusionMaskDarkness")
  public open var occlusionMaskDarkness: Number

  @JsName("OcclusionDepthRange")
  public open var occlusionDepthRange: Number

  @JsName("LightShaftOverrideDirection")
  public open var lightShaftOverrideDirection: Vector

  @JsName("WholeSceneDynamicShadowRadius")
  public open var wholeSceneDynamicShadowRadius: Number

  @JsName("DynamicShadowDistanceMovableLight")
  public open var dynamicShadowDistanceMovableLight: Number

  @JsName("DynamicShadowDistanceStationaryLight")
  public open var dynamicShadowDistanceStationaryLight: Number

  @JsName("DynamicShadowCascades")
  public open var dynamicShadowCascades: Number

  @JsName("CascadeDistributionExponent")
  public open var cascadeDistributionExponent: Number

  @JsName("CascadeTransitionFraction")
  public open var cascadeTransitionFraction: Number

  @JsName("ShadowDistanceFadeoutFraction")
  public open var shadowDistanceFadeoutFraction: Number

  @JsName("bUseInsetShadowsForMovableObjects")
  public open var useInsetShadowsForMovableObjects: Boolean

  @JsName("FarShadowCascadeCount")
  public open var farShadowCascadeCount: Number

  @JsName("FarShadowDistance")
  public open var farShadowDistance: Number

  @JsName("DistanceFieldShadowDistance")
  public open var distanceFieldShadowDistance: Number

  @JsName("LightSourceAngle")
  public open var lightSourceAngle: Number

  @JsName("LightSourceSoftAngle")
  public open var lightSourceSoftAngle: Number

  @JsName("ShadowSourceAngleFactor")
  public open var shadowSourceAngleFactor: Number

  @JsName("TraceDistance")
  public open var traceDistance: Number

  @JsName("bUsedAsAtmosphereSunLight")
  public open var usedAsAtmosphereSunLight: Boolean

  @JsName("bAtmosphereSunLight")
  public open var atmosphereSunLight: Boolean

  @JsName("AtmosphereSunLightIndex")
  public open var atmosphereSunLightIndex: Number

  @JsName("AtmosphereSunDiskColorScale")
  public open var atmosphereSunDiskColorScale: LinearColor

  @JsName("bPerPixelAtmosphereTransmittance")
  public open var perPixelAtmosphereTransmittance: Boolean

  @JsName("bCastShadowsOnClouds")
  public open var castShadowsOnClouds: Boolean

  @JsName("bCastShadowsOnAtmosphere")
  public open var castShadowsOnAtmosphere: Boolean

  @JsName("bCastCloudShadows")
  public open var castCloudShadows: Boolean

  @JsName("CloudShadowStrength")
  public open var cloudShadowStrength: Number

  @JsName("CloudShadowOnAtmosphereStrength")
  public open var cloudShadowOnAtmosphereStrength: Number

  @JsName("CloudShadowOnSurfaceStrength")
  public open var cloudShadowOnSurfaceStrength: Number

  @JsName("CloudShadowDepthBias")
  public open var cloudShadowDepthBias: Number

  @JsName("CloudShadowExtent")
  public open var cloudShadowExtent: Number

  @JsName("CloudShadowMapResolutionScale")
  public open var cloudShadowMapResolutionScale: Number

  @JsName("CloudShadowRaySampleCountScale")
  public open var cloudShadowRaySampleCountScale: Number

  @JsName("CloudScatteredLuminanceScale")
  public open var cloudScatteredLuminanceScale: LinearColor

  @JsName("LightmassSettings")
  public open var lightmassSettings: LightmassDirectionalLightSettings

  @JsName("bCastModulatedShadows")
  public open var castModulatedShadows: Boolean

  @JsName("ModulatedShadowColor")
  public open var modulatedShadowColor: Color

  @JsName("ShadowAmount")
  public open var shadowAmount: Number

  @JsName("SetShadowSourceAngleFactor")
  public open fun setShadowSourceAngleFactor(newValue: Number): Unit

  @JsName("SetShadowDistanceFadeoutFraction")
  public open fun setShadowDistanceFadeoutFraction(newValue: Number): Unit

  @JsName("SetShadowCascadeBiasDistribution")
  public open fun setShadowCascadeBiasDistribution(newValue: Number): Unit

  @JsName("SetShadowAmount")
  public open fun setShadowAmount(newValue: Number): Unit

  @JsName("SetOcclusionMaskDarkness")
  public open fun setOcclusionMaskDarkness(newValue: Number): Unit

  @JsName("SetOcclusionDepthRange")
  public open fun setOcclusionDepthRange(newValue: Number): Unit

  @JsName("SetLightSourceSoftAngle")
  public open fun setLightSourceSoftAngle(newValue: Number): Unit

  @JsName("SetLightSourceAngle")
  public open fun setLightSourceAngle(newValue: Number): Unit

  @JsName("SetLightShaftOverrideDirection")
  public open fun setLightShaftOverrideDirection(newValue: Vector): Unit

  @JsName("SetEnableLightShaftOcclusion")
  public open fun setEnableLightShaftOcclusion(newValue: Boolean): Unit

  @JsName("SetDynamicShadowDistanceStationaryLight")
  public open fun setDynamicShadowDistanceStationaryLight(newValue: Number): Unit

  @JsName("SetDynamicShadowDistanceMovableLight")
  public open fun setDynamicShadowDistanceMovableLight(newValue: Number): Unit

  @JsName("SetDynamicShadowCascades")
  public open fun setDynamicShadowCascades(newValue: Number): Unit

  @JsName("SetCascadeTransitionFraction")
  public open fun setCascadeTransitionFraction(newValue: Number): Unit

  @JsName("SetCascadeDistributionExponent")
  public open fun setCascadeDistributionExponent(newValue: Number): Unit

  @JsName("SetAtmosphereSunLightIndex")
  public open fun setAtmosphereSunLightIndex(newValue: Number): Unit

  @JsName("SetAtmosphereSunLight")
  public open fun setAtmosphereSunLight(newValue: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DirectionalLightComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DirectionalLightComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DirectionalLightComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DirectionalLightComponent

    @JsName("C")
    public fun copy(other: UObject): DirectionalLightComponent

    @JsName("C")
    public fun copy(other: Any): DirectionalLightComponent
  }
}

public open external class SkyAtmosphereComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("TransformMode")
  public open var transformMode: String

  @JsName("BottomRadius")
  public open var bottomRadius: Number

  @JsName("GroundAlbedo")
  public open var groundAlbedo: Color

  @JsName("AtmosphereHeight")
  public open var atmosphereHeight: Number

  @JsName("MultiScatteringFactor")
  public open var multiScatteringFactor: Number

  @JsName("TraceSampleCountScale")
  public open var traceSampleCountScale: Number

  @JsName("RayleighScatteringScale")
  public open var rayleighScatteringScale: Number

  @JsName("RayleighScattering")
  public open var rayleighScattering: LinearColor

  @JsName("RayleighExponentialDistribution")
  public open var rayleighExponentialDistribution: Number

  @JsName("MieScatteringScale")
  public open var mieScatteringScale: Number

  @JsName("MieScattering")
  public open var mieScattering: LinearColor

  @JsName("MieAbsorptionScale")
  public open var mieAbsorptionScale: Number

  @JsName("MieAbsorption")
  public open var mieAbsorption: LinearColor

  @JsName("MieAnisotropy")
  public open var mieAnisotropy: Number

  @JsName("MieExponentialDistribution")
  public open var mieExponentialDistribution: Number

  @JsName("OtherAbsorptionScale")
  public open var otherAbsorptionScale: Number

  @JsName("OtherAbsorption")
  public open var otherAbsorption: LinearColor

  @JsName("OtherTentDistribution")
  public open var otherTentDistribution: TentDistribution

  @JsName("SkyLuminanceFactor")
  public open var skyLuminanceFactor: LinearColor

  @JsName("AerialPespectiveViewDistanceScale")
  public open var aerialPespectiveViewDistanceScale: Number

  @JsName("HeightFogContribution")
  public open var heightFogContribution: Number

  @JsName("TransmittanceMinLightElevationAngle")
  public open var transmittanceMinLightElevationAngle: Number

  @JsName("AerialPerspectiveStartDepth")
  public open var aerialPerspectiveStartDepth: Number

  @JsName("bStaticLightingBuiltGUID")
  public open var staticLightingBuiltGuid: Guid

  @JsName("SetSkyLuminanceFactor")
  public open fun setSkyLuminanceFactor(newValue: LinearColor): Unit

  @JsName("SetRayleighScatteringScale")
  public open fun setRayleighScatteringScale(newValue: Number): Unit

  @JsName("SetRayleighScattering")
  public open fun setRayleighScattering(newValue: LinearColor): Unit

  @JsName("SetRayleighExponentialDistribution")
  public open fun setRayleighExponentialDistribution(newValue: Number): Unit

  @JsName("SetOtherAbsorptionScale")
  public open fun setOtherAbsorptionScale(newValue: Number): Unit

  @JsName("SetOtherAbsorption")
  public open fun setOtherAbsorption(newValue: LinearColor): Unit

  @JsName("SetMultiScatteringFactor")
  public open fun setMultiScatteringFactor(newValue: Number): Unit

  @JsName("SetMieScatteringScale")
  public open fun setMieScatteringScale(newValue: Number): Unit

  @JsName("SetMieScattering")
  public open fun setMieScattering(newValue: LinearColor): Unit

  @JsName("SetMieExponentialDistribution")
  public open fun setMieExponentialDistribution(newValue: Number): Unit

  @JsName("SetMieAnisotropy")
  public open fun setMieAnisotropy(newValue: Number): Unit

  @JsName("SetMieAbsorptionScale")
  public open fun setMieAbsorptionScale(newValue: Number): Unit

  @JsName("SetMieAbsorption")
  public open fun setMieAbsorption(newValue: LinearColor): Unit

  @JsName("SetHeightFogContribution")
  public open fun setHeightFogContribution(newValue: Number): Unit

  @JsName("SetAtmosphereHeight")
  public open fun setAtmosphereHeight(newValue: Number): Unit

  @JsName("SetAerialPespectiveViewDistanceScale")
  public open fun setAerialPespectiveViewDistanceScale(newValue: Number): Unit

  @JsName("OverrideAtmosphereLightDirection")
  public open fun overrideAtmosphereLightDirection(atmosphereLightIndex: Number,
      lightDirection: Vector): Unit

  @JsName("GetAtmosphereTransmitanceOnGroundAtPlanetTop")
  public open
      fun getAtmosphereTransmitanceOnGroundAtPlanetTop(directionalLight: DirectionalLightComponent):
      LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkyAtmosphereComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkyAtmosphereComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkyAtmosphereComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkyAtmosphereComponent

    @JsName("C")
    public fun copy(other: UObject): SkyAtmosphereComponent

    @JsName("C")
    public fun copy(other: Any): SkyAtmosphereComponent
  }
}

public open external class AtmosphericFogComponent(
  outer: UObject,
) : SkyAtmosphereComponent {
  @JsName("SetSunMultiplier")
  public open fun setSunMultiplier(newSunMultiplier: Number): Unit

  @JsName("SetStartDistance")
  public open fun setStartDistance(newStartDistance: Number): Unit

  @JsName("SetPrecomputeParams")
  public open fun setPrecomputeParams(
    densityHeight: Number,
    maxScatteringOrder: Number,
    inscatterAltitudeSampleNum: Number,
  ): Unit

  @JsName("SetFogMultiplier")
  public open fun setFogMultiplier(newFogMultiplier: Number): Unit

  @JsName("SetDistanceScale")
  public open fun setDistanceScale(newDistanceScale: Number): Unit

  @JsName("SetDistanceOffset")
  public open fun setDistanceOffset(newDistanceOffset: Number): Unit

  @JsName("SetDensityOffset")
  public open fun setDensityOffset(newDensityOffset: Number): Unit

  @JsName("SetDensityMultiplier")
  public open fun setDensityMultiplier(newDensityMultiplier: Number): Unit

  @JsName("SetDefaultLightColor")
  public open fun setDefaultLightColor(newLightColor: LinearColor): Unit

  @JsName("SetDefaultBrightness")
  public open fun setDefaultBrightness(newBrightness: Number): Unit

  @JsName("SetAltitudeScale")
  public open fun setAltitudeScale(newAltitudeScale: Number): Unit

  @JsName("DisableSunDisk")
  public open fun disableSunDisk(newSunDisk: Boolean): Unit

  @JsName("DisableGroundScattering")
  public open fun disableGroundScattering(newGroundScattering: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AtmosphericFogComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AtmosphericFogComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AtmosphericFogComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AtmosphericFogComponent

    @JsName("C")
    public fun copy(other: UObject): AtmosphericFogComponent

    @JsName("C")
    public fun copy(other: Any): AtmosphericFogComponent
  }
}

public open external class AtmosphericFog(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("AtmosphericFogComponent")
  public open var atmosphericFogComponent: AtmosphericFogComponent

  @JsName("ArrowComponent")
  public open var arrowComponent: ArrowComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AtmosphericFog

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AtmosphericFog

    @JsName("C")
    public fun copy(other: UObject): AtmosphericFog

    @JsName("C")
    public fun copy(other: Any): AtmosphericFog
  }
}

public open external class AnimationAttributeIdentifierExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationAttributeIdentifierExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationAttributeIdentifierExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationAttributeIdentifierExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationAttributeIdentifierExtensions

    @JsName("IsValid")
    public fun isValid(identifier: AnimationAttributeIdentifier): Object80

    @JsName("CreateAttributeIdentifier")
    public fun createAttributeIdentifier(
      animationAsset: AnimationAsset,
      attributeName: String,
      boneName: String,
      attributeType: ScriptStruct,
      validateExistsOnAsset: Boolean,
    ): AnimationAttributeIdentifier

    @JsName("C")
    public fun copy(other: UObject): AnimationAttributeIdentifierExtensions

    @JsName("C")
    public fun copy(other: Any): AnimationAttributeIdentifierExtensions
  }
}

public open external class AudioSubsystemCollectionRoot(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioSubsystemCollectionRoot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioSubsystemCollectionRoot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioSubsystemCollectionRoot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioSubsystemCollectionRoot

    @JsName("C")
    public fun copy(other: UObject): AudioSubsystemCollectionRoot

    @JsName("C")
    public fun copy(other: Any): AudioSubsystemCollectionRoot
  }
}

public open external class AudioPanelWidgetInterface(
  outer: UObject,
) : Interface {
  @JsName("GetIconBrushName")
  public open fun getIconBrushName(): String

  @JsName("GetEditorName")
  public open fun getEditorName(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioPanelWidgetInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioPanelWidgetInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioPanelWidgetInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioPanelWidgetInterface

    @JsName("C")
    public fun copy(other: UObject): AudioPanelWidgetInterface

    @JsName("C")
    public fun copy(other: Any): AudioPanelWidgetInterface
  }
}

@JsName("EVoiceSampleRate")
public external object VoiceSampleRate {
  public var Low16000Hz: String

  public var Normal24000Hz: String

  @JsName("EVoiceSampleRate_MAX")
  public var Max: String
}

public open external class AudioQualitySettings {
  @JsName("DisplayName")
  public open var displayName: String

  @JsName("MaxChannels")
  public open var maxChannels: Number

  public open fun clone(): AudioQualitySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioQualitySettings

    @JsName("C")
    public fun copy(other: Any): AudioQualitySettings
  }
}

@JsName("EPanningMethod")
public external object PanningMethod {
  public var Linear: String

  public var EqualPower: String

  @JsName("EPanningMethod_MAX")
  public var Max: String
}

@JsName("EMonoChannelUpmixMethod")
public external object MonoChannelUpmixMethod {
  public var Linear: String

  public var EqualPower: String

  public var FullVolume: String

  @JsName("EMonoChannelUpmixMethod_MAX")
  public var Max: String
}

public open external class SoundDebugEntry {
  @JsName("DebugName")
  public open var debugName: String

  @JsName("Sound")
  public open var sound: SoftObjectPath

  public open fun clone(): SoundDebugEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundDebugEntry

    @JsName("C")
    public fun copy(other: Any): SoundDebugEntry
  }
}

public open external class DefaultAudioBusSettings {
  @JsName("AudioBus")
  public open var audioBus: SoftObjectPath

  public open fun clone(): DefaultAudioBusSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DefaultAudioBusSettings

    @JsName("C")
    public fun copy(other: Any): DefaultAudioBusSettings
  }
}

public open external class AudioSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("DefaultSoundClassName")
  public open var defaultSoundClassName: SoftObjectPath

  @JsName("DefaultMediaSoundClassName")
  public open var defaultMediaSoundClassName: SoftObjectPath

  @JsName("DefaultSoundConcurrencyName")
  public open var defaultSoundConcurrencyName: SoftObjectPath

  @JsName("DefaultBaseSoundMix")
  public open var defaultBaseSoundMix: SoftObjectPath

  @JsName("VoiPSoundClass")
  public open var voiPSoundClass: SoftObjectPath

  @JsName("MasterSubmix")
  public open var masterSubmix: SoftObjectPath

  @JsName("BaseDefaultSubmix")
  public open var baseDefaultSubmix: SoftObjectPath

  @JsName("ReverbSubmix")
  public open var reverbSubmix: SoftObjectPath

  @JsName("EQSubmix")
  public open var eqSubmix: SoftObjectPath

  @JsName("VoiPSampleRate")
  public open var voiPSampleRate: String

  @JsName("DefaultReverbSendLevel")
  public open var defaultReverbSendLevel: Number

  @JsName("MaximumConcurrentStreams")
  public open var maximumConcurrentStreams: Number

  @JsName("GlobalMinPitchScale")
  public open var globalMinPitchScale: Number

  @JsName("GlobalMaxPitchScale")
  public open var globalMaxPitchScale: Number

  @JsName("QualityLevels")
  public open var qualityLevels: Array<AudioQualitySettings>

  @JsName("bAllowPlayWhenSilent")
  public open var allowPlayWhenSilent: Boolean

  @JsName("bDisableMasterEQ")
  public open var disableMasterEq: Boolean

  @JsName("bAllowCenterChannel3DPanning")
  public open var allowCenterChannel3dPanning: Boolean

  @JsName("NumStoppingSources")
  public open var numStoppingSources: Any

  @JsName("PanningMethod")
  public open var panningMethod: String

  @JsName("MonoChannelUpmixMethod")
  public open var monoChannelUpmixMethod: String

  @JsName("DialogueFilenameFormat")
  public open var dialogueFilenameFormat: String

  @JsName("DebugSounds")
  public open var debugSounds: Array<SoundDebugEntry>

  @JsName("DefaultAudioBuses")
  public open var defaultAudioBuses: Array<DefaultAudioBusSettings>

  @JsName("DefaultSoundClass")
  public open var defaultSoundClass: SoundClass

  @JsName("DefaultMediaSoundClass")
  public open var defaultMediaSoundClass: SoundClass

  @JsName("DefaultSoundConcurrency")
  public open var defaultSoundConcurrency: SoundConcurrency

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioSettings

    @JsName("C")
    public fun copy(other: UObject): AudioSettings

    @JsName("C")
    public fun copy(other: Any): AudioSettings
  }
}

@JsName("EAudioVolumeLocationState")
public external object AudioVolumeLocationState {
  public var InsideTheVolume: String

  public var OutsideTheVolume: String

  @JsName("EAudioVolumeLocationState_MAX")
  public var Max: String
}

public open external class AudioVolumeSubmixSendSettings {
  @JsName("ListenerLocationState")
  public open var listenerLocationState: String

  @JsName("SourceLocationState")
  public open var sourceLocationState: String

  @JsName("SubmixSends")
  public open var submixSends: Array<SoundSubmixSendInfo>

  public open fun clone(): AudioVolumeSubmixSendSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioVolumeSubmixSendSettings

    @JsName("C")
    public fun copy(other: Any): AudioVolumeSubmixSendSettings
  }
}

public open external class AudioVolumeSubmixOverrideSettings {
  @JsName("Submix")
  public open var submix: SoundSubmix

  @JsName("SubmixEffectChain")
  public open var submixEffectChain: Array<SoundEffectSubmixPreset>

  @JsName("CrossfadeTime")
  public open var crossfadeTime: Number

  public open fun clone(): AudioVolumeSubmixOverrideSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioVolumeSubmixOverrideSettings

    @JsName("C")
    public fun copy(other: Any): AudioVolumeSubmixOverrideSettings
  }
}

public open external class AudioVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("Priority")
  public open var priority: Number

  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("Settings")
  public open var settings: ReverbSettings

  @JsName("AmbientZoneSettings")
  public open var ambientZoneSettings: InteriorSettings

  @JsName("SubmixSendSettings")
  public open var submixSendSettings: Array<AudioVolumeSubmixSendSettings>

  @JsName("SubmixOverrideSettings")
  public open var submixOverrideSettings: Array<AudioVolumeSubmixOverrideSettings>

  @JsName("SetSubmixSendSettings")
  public open
      fun setSubmixSendSettings(newSubmixSendSettings: Array<AudioVolumeSubmixSendSettings>): Unit

  @JsName("SetSubmixOverrideSettings")
  public open
      fun setSubmixOverrideSettings(newSubmixOverrideSettings: Array<AudioVolumeSubmixOverrideSettings>):
      Unit

  @JsName("SetReverbSettings")
  public open fun setReverbSettings(newReverbSettings: ReverbSettings): Unit

  @JsName("SetPriority")
  public open fun setPriority(newPriority: Number): Unit

  @JsName("SetInteriorSettings")
  public open fun setInteriorSettings(newInteriorSettings: InteriorSettings): Unit

  @JsName("SetEnabled")
  public open fun setEnabled(newEnabled: Boolean): Unit

  @JsName("OnRep_bEnabled")
  public open fun onRepbEnabled(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioVolume

    @JsName("C")
    public fun copy(other: UObject): AudioVolume

    @JsName("C")
    public fun copy(other: Any): AudioVolume
  }
}

public open external class AudioWidgetSubsystem(
  outer: UObject,
) : EngineSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioWidgetSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioWidgetSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioWidgetSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioWidgetSubsystem

    @JsName("C")
    public fun copy(other: UObject): AudioWidgetSubsystem

    @JsName("C")
    public fun copy(other: Any): AudioWidgetSubsystem
  }
}

public open external class AutoDestroySubsystem(
  outer: UObject,
) : TickableWorldSubsystem {
  @JsName("ActorsToPoll")
  public open var actorsToPoll: Array<Actor>

  @JsName("OnActorEndPlay")
  public open fun onActorEndPlay(actor: Actor, endPlayReason: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AutoDestroySubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AutoDestroySubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AutoDestroySubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AutoDestroySubsystem

    @JsName("C")
    public fun copy(other: UObject): AutoDestroySubsystem

    @JsName("C")
    public fun copy(other: Any): AutoDestroySubsystem
  }
}

public open external class EditorMapPerformanceTestDefinition {
  @JsName("PerformanceTestmap")
  public open var performanceTestmap: SoftObjectPath

  @JsName("TestTimer")
  public open var testTimer: Number

  public open fun clone(): EditorMapPerformanceTestDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorMapPerformanceTestDefinition

    @JsName("C")
    public fun copy(other: Any): EditorMapPerformanceTestDefinition
  }
}

public open external class ImportFactorySettingValues {
  @JsName("SettingName")
  public open var settingName: String

  @JsName("Value")
  public open var value: String

  public open fun clone(): ImportFactorySettingValues

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ImportFactorySettingValues

    @JsName("C")
    public fun copy(other: Any): ImportFactorySettingValues
  }
}

public open external class EditorImportWorkflowDefinition {
  @JsName("ImportFilePath")
  public open var importFilePath: FilePath

  @JsName("FactorySettings")
  public open var factorySettings: Array<ImportFactorySettingValues>

  public open fun clone(): EditorImportWorkflowDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorImportWorkflowDefinition

    @JsName("C")
    public fun copy(other: Any): EditorImportWorkflowDefinition
  }
}

public open external class BuildPromotionImportWorkflowSettings {
  @JsName("Diffuse")
  public open var diffuse: EditorImportWorkflowDefinition

  @JsName("Normal")
  public open var normal: EditorImportWorkflowDefinition

  @JsName("StaticMesh")
  public open var staticMesh: EditorImportWorkflowDefinition

  @JsName("ReimportStaticMesh")
  public open var reimportStaticMesh: EditorImportWorkflowDefinition

  @JsName("BlendShapeMesh")
  public open var blendShapeMesh: EditorImportWorkflowDefinition

  @JsName("MorphMesh")
  public open var morphMesh: EditorImportWorkflowDefinition

  @JsName("SkeletalMesh")
  public open var skeletalMesh: EditorImportWorkflowDefinition

  @JsName("Animation")
  public open var animation: EditorImportWorkflowDefinition

  @JsName("Sound")
  public open var sound: EditorImportWorkflowDefinition

  @JsName("SurroundSound")
  public open var surroundSound: EditorImportWorkflowDefinition

  @JsName("OtherAssetsToImport")
  public open var otherAssetsToImport: Array<EditorImportWorkflowDefinition>

  public open fun clone(): BuildPromotionImportWorkflowSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BuildPromotionImportWorkflowSettings

    @JsName("C")
    public fun copy(other: Any): BuildPromotionImportWorkflowSettings
  }
}

public open external class BuildPromotionOpenAssetSettings {
  @JsName("BlueprintAsset")
  public open var blueprintAsset: FilePath

  @JsName("MaterialAsset")
  public open var materialAsset: FilePath

  @JsName("ParticleSystemAsset")
  public open var particleSystemAsset: FilePath

  @JsName("SkeletalMeshAsset")
  public open var skeletalMeshAsset: FilePath

  @JsName("StaticMeshAsset")
  public open var staticMeshAsset: FilePath

  @JsName("TextureAsset")
  public open var textureAsset: FilePath

  public open fun clone(): BuildPromotionOpenAssetSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BuildPromotionOpenAssetSettings

    @JsName("C")
    public fun copy(other: Any): BuildPromotionOpenAssetSettings
  }
}

public open external class BuildPromotionNewProjectSettings {
  @JsName("NewProjectFolderOverride")
  public open var newProjectFolderOverride: DirectoryPath

  @JsName("NewProjectNameOverride")
  public open var newProjectNameOverride: String

  public open fun clone(): BuildPromotionNewProjectSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BuildPromotionNewProjectSettings

    @JsName("C")
    public fun copy(other: Any): BuildPromotionNewProjectSettings
  }
}

public open external class BuildPromotionTestSettings {
  @JsName("DefaultStaticMeshAsset")
  public open var defaultStaticMeshAsset: FilePath

  @JsName("ImportWorkflow")
  public open var importWorkflow: BuildPromotionImportWorkflowSettings

  @JsName("OpenAssets")
  public open var openAssets: BuildPromotionOpenAssetSettings

  @JsName("NewProjectSettings")
  public open var newProjectSettings: BuildPromotionNewProjectSettings

  @JsName("SourceControlMaterial")
  public open var sourceControlMaterial: FilePath

  public open fun clone(): BuildPromotionTestSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BuildPromotionTestSettings

    @JsName("C")
    public fun copy(other: Any): BuildPromotionTestSettings
  }
}

public open external class MaterialEditorPromotionSettings {
  @JsName("DefaultMaterialAsset")
  public open var defaultMaterialAsset: FilePath

  @JsName("DefaultDiffuseTexture")
  public open var defaultDiffuseTexture: FilePath

  @JsName("DefaultNormalTexture")
  public open var defaultNormalTexture: FilePath

  public open fun clone(): MaterialEditorPromotionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialEditorPromotionSettings

    @JsName("C")
    public fun copy(other: Any): MaterialEditorPromotionSettings
  }
}

public open external class ParticleEditorPromotionSettings {
  @JsName("DefaultParticleAsset")
  public open var defaultParticleAsset: FilePath

  public open fun clone(): ParticleEditorPromotionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParticleEditorPromotionSettings

    @JsName("C")
    public fun copy(other: Any): ParticleEditorPromotionSettings
  }
}

public open external class BlueprintEditorPromotionSettings {
  @JsName("FirstMeshPath")
  public open var firstMeshPath: FilePath

  @JsName("SecondMeshPath")
  public open var secondMeshPath: FilePath

  @JsName("DefaultParticleAsset")
  public open var defaultParticleAsset: FilePath

  public open fun clone(): BlueprintEditorPromotionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintEditorPromotionSettings

    @JsName("C")
    public fun copy(other: Any): BlueprintEditorPromotionSettings
  }
}

public open external class ExternalToolDefinition {
  @JsName("ToolName")
  public open var toolName: String

  @JsName("ExecutablePath")
  public open var executablePath: FilePath

  @JsName("CommandLineOptions")
  public open var commandLineOptions: String

  @JsName("WorkingDirectory")
  public open var workingDirectory: DirectoryPath

  @JsName("ScriptExtension")
  public open var scriptExtension: String

  @JsName("ScriptDirectory")
  public open var scriptDirectory: DirectoryPath

  public open fun clone(): ExternalToolDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExternalToolDefinition

    @JsName("C")
    public fun copy(other: Any): ExternalToolDefinition
  }
}

public open external class EditorImportExportTestDefinition {
  @JsName("ImportFilePath")
  public open var importFilePath: FilePath

  @JsName("ExportFileExtension")
  public open var exportFileExtension: String

  @JsName("bSkipExport")
  public open var skipExport: Boolean

  @JsName("FactorySettings")
  public open var factorySettings: Array<ImportFactorySettingValues>

  public open fun clone(): EditorImportExportTestDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorImportExportTestDefinition

    @JsName("C")
    public fun copy(other: Any): EditorImportExportTestDefinition
  }
}

public open external class LaunchOnTestSettings {
  @JsName("LaunchOnTestmap")
  public open var launchOnTestmap: FilePath

  @JsName("DeviceID")
  public open var deviceId: String

  public open fun clone(): LaunchOnTestSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LaunchOnTestSettings

    @JsName("C")
    public fun copy(other: Any): LaunchOnTestSettings
  }
}

public open external class AutomationTestSettings(
  outer: UObject,
) : UObject {
  @JsName("EngineTestModules")
  public open var engineTestModules: Array<String>

  @JsName("EditorTestModules")
  public open var editorTestModules: Array<String>

  @JsName("AutomationTestmap")
  public open var automationTestmap: SoftObjectPath

  @JsName("EditorPerformanceTestMaps")
  public open var editorPerformanceTestMaps: Array<EditorMapPerformanceTestDefinition>

  @JsName("AssetsToOpen")
  public open var assetsToOpen: Array<String>

  @JsName("MapsToPIETest")
  public open var mapsToPieTest: Array<String>

  @JsName("bUseAllProjectMapsToPlayInPIE")
  public open var useAllProjectMapsToPlayInPie: Boolean

  @JsName("BuildPromotionTest")
  public open var buildPromotionTest: BuildPromotionTestSettings

  @JsName("MaterialEditorPromotionTest")
  public open var materialEditorPromotionTest: MaterialEditorPromotionSettings

  @JsName("ParticleEditorPromotionTest")
  public open var particleEditorPromotionTest: ParticleEditorPromotionSettings

  @JsName("BlueprintEditorPromotionTest")
  public open var blueprintEditorPromotionTest: BlueprintEditorPromotionSettings

  @JsName("TestLevelFolders")
  public open var testLevelFolders: Array<String>

  @JsName("ExternalTools")
  public open var externalTools: Array<ExternalToolDefinition>

  @JsName("ImportExportTestDefinitions")
  public open var importExportTestDefinitions: Array<EditorImportExportTestDefinition>

  @JsName("LaunchOnSettings")
  public open var launchOnSettings: Array<LaunchOnTestSettings>

  @JsName("DefaultScreenshotResolution")
  public open var defaultScreenshotResolution: IntPoint

  @JsName("PIETestDuration")
  public open var pieTestDuration: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AutomationTestSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AutomationTestSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AutomationTestSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AutomationTestSettings

    @JsName("C")
    public fun copy(other: UObject): AutomationTestSettings

    @JsName("C")
    public fun copy(other: Any): AutomationTestSettings
  }
}

public open external class BandwidthTestItem {
  @JsName("Kilobyte")
  public open var kilobyte: Array<Number>

  public open fun clone(): BandwidthTestItem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BandwidthTestItem

    @JsName("C")
    public fun copy(other: Any): BandwidthTestItem
  }
}

public open external class BandwidthTestGenerator {
  @JsName("ReplicatedBuffers")
  public open var replicatedBuffers: Array<BandwidthTestItem>

  public open fun clone(): BandwidthTestGenerator

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BandwidthTestGenerator

    @JsName("C")
    public fun copy(other: Any): BandwidthTestGenerator
  }
}

public open external class BandwidthTestActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("BandwidthGenerator")
  public open var bandwidthGenerator: BandwidthTestGenerator

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BandwidthTestActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BandwidthTestActor

    @JsName("C")
    public fun copy(other: UObject): BandwidthTestActor

    @JsName("C")
    public fun copy(other: Any): BandwidthTestActor
  }
}

public open external class BlendableInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlendableInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlendableInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlendableInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlendableInterface

    @JsName("C")
    public fun copy(other: UObject): BlendableInterface

    @JsName("C")
    public fun copy(other: Any): BlendableInterface
  }
}

public open external class BlockingVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlockingVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlockingVolume

    @JsName("C")
    public fun copy(other: UObject): BlockingVolume

    @JsName("C")
    public fun copy(other: Any): BlockingVolume
  }
}

@JsName("T$720")
public external interface ValuesProvider {
  @JsName("Values")
  public var values: Array<Number>
}

@JsName("T$721")
public external interface KeysProvider {
  @JsName("Keys")
  public var keys: Array<Number>
}

@JsName("T$722")
public external interface NumberValueProvider {
  @JsName("Value")
  public var value: Number

  @JsName("$")
  public var value: Boolean
}

public open external class BlueprintMapLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintMapLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintMapLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintMapLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintMapLibrary

    @JsName("SetMapPropertyByName")
    public fun setMapPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("Map_Values")
    public fun mapValues(targetMap: Any, values: Array<Number>): ValuesProvider

    @JsName("Map_Remove")
    public fun mapRemove(targetMap: Any, key: Number): Boolean

    @JsName("Map_Length")
    public fun mapLength(targetMap: Any): Number

    @JsName("Map_Keys")
    public fun mapKeys(targetMap: Any, keys: Array<Number>): KeysProvider

    @JsName("Map_IsNotEmpty")
    public fun mapIsNotEmpty(targetMap: Any): Boolean

    @JsName("Map_IsEmpty")
    public fun mapIsEmpty(targetMap: Any): Boolean

    @JsName("Map_Find")
    public fun mapFind(
      targetMap: Any,
      key: Number,
      value: Number,
    ): NumberValueProvider

    @JsName("Map_Contains")
    public fun mapContains(targetMap: Any, key: Number): Boolean

    @JsName("Map_Clear")
    public fun mapClear(targetMap: Any): Unit

    @JsName("Map_Add")
    public fun mapAdd(
      targetMap: Any,
      key: Number,
      value: Number,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): BlueprintMapLibrary

    @JsName("C")
    public fun copy(other: Any): BlueprintMapLibrary
  }
}

@JsName("T$723")
public external interface Object723 {
  @JsName("bDidSucceed")
  public var didSucceed: Boolean

  @JsName("OutReason")
  public var outReason: String
}

@JsName("T$724")
public external interface Object724 {
  @JsName("PathPart")
  public var pathPart: String

  @JsName("FilenamePart")
  public var filenamePart: String

  @JsName("ExtensionPart")
  public var extensionPart: String
}

@JsName("T$725")
public external interface OutPathProvider {
  @JsName("OutPath")
  public var outPath: String
}

@JsName("T$726")
public external interface OutPathValueProvider {
  @JsName("OutPath")
  public var outPath: String

  @JsName("$")
  public var value: Boolean
}

public open external class BlueprintPathsLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintPathsLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintPathsLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintPathsLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintPathsLibrary

    @JsName("VideoCaptureDir")
    public fun videoCaptureDir(): String

    @JsName("ValidatePath")
    public fun validatePath(
      inPath: String,
      didSucceed: Boolean,
      outReason: String,
    ): Object723

    @JsName("Split")
    public fun split(
      inPath: String,
      pathPart: String,
      filenamePart: String,
      extensionPart: String,
    ): Object724

    @JsName("SourceConfigDir")
    public fun sourceConfigDir(): String

    @JsName("ShouldSaveToUserDir")
    public fun shouldSaveToUserDir(): Boolean

    @JsName("ShaderWorkingDir")
    public fun shaderWorkingDir(): String

    @JsName("SetProjectFilePath")
    public fun setProjectFilePath(newGameProjectFilePath: String): Unit

    @JsName("SetExtension")
    public fun setExtension(inPath: String, inNewExtension: String): String

    @JsName("ScreenShotDir")
    public fun screenShotDir(): String

    @JsName("SandboxesDir")
    public fun sandboxesDir(): String

    @JsName("RootDir")
    public fun rootDir(): String

    @JsName("RemoveDuplicateSlashes")
    public fun removeDuplicateSlashes(inPath: String, outPath: String): OutPathProvider

    @JsName("ProjectUserDir")
    public fun projectUserDir(): String

    @JsName("ProjectSavedDir")
    public fun projectSavedDir(): String

    @JsName("ProjectPluginsDir")
    public fun projectPluginsDir(): String

    @JsName("ProjectPersistentDownloadDir")
    public fun projectPersistentDownloadDir(): String

    @JsName("ProjectModsDir")
    public fun projectModsDir(): String

    @JsName("ProjectLogDir")
    public fun projectLogDir(): String

    @JsName("ProjectIntermediateDir")
    public fun projectIntermediateDir(): String

    @JsName("ProjectDir")
    public fun projectDir(): String

    @JsName("ProjectContentDir")
    public fun projectContentDir(): String

    @JsName("ProjectConfigDir")
    public fun projectConfigDir(): String

    @JsName("ProfilingDir")
    public fun profilingDir(): String

    @JsName("NormalizeFilename")
    public fun normalizeFilename(inPath: String, outPath: String): OutPathProvider

    @JsName("NormalizeDirectoryName")
    public fun normalizeDirectoryName(inPath: String, outPath: String): OutPathProvider

    @JsName("MakeValidFileName")
    public fun makeValidFileName(inString: String, inReplacementChar: String): String

    @JsName("MakeStandardFilename")
    public fun makeStandardFilename(inPath: String, outPath: String): OutPathProvider

    @JsName("MakePlatformFilename")
    public fun makePlatformFilename(inPath: String, outPath: String): OutPathProvider

    @JsName("MakePathRelativeTo")
    public fun makePathRelativeTo(
      inPath: String,
      inRelativeTo: String,
      outPath: String,
    ): OutPathValueProvider

    @JsName("LaunchDir")
    public fun launchDir(): String

    @JsName("IsSamePath")
    public fun isSamePath(pathA: String, pathB: String): Boolean

    @JsName("IsRestrictedPath")
    public fun isRestrictedPath(inPath: String): Boolean

    @JsName("IsRelative")
    public fun isRelative(inPath: String): Boolean

    @JsName("IsProjectFilePathSet")
    public fun isProjectFilePathSet(): Boolean

    @JsName("IsDrive")
    public fun isDrive(inPath: String): Boolean

    @JsName("HasProjectPersistentDownloadDir")
    public fun hasProjectPersistentDownloadDir(): Boolean

    @JsName("GetToolTipLocalizationPaths")
    public fun getToolTipLocalizationPaths(): Array<String>

    @JsName("GetRestrictedFolderNames")
    public fun getRestrictedFolderNames(): Array<String>

    @JsName("GetRelativePathToRoot")
    public fun getRelativePathToRoot(): String

    @JsName("GetPropertyNameLocalizationPaths")
    public fun getPropertyNameLocalizationPaths(): Array<String>

    @JsName("GetProjectFilePath")
    public fun getProjectFilePath(): String

    @JsName("GetPath")
    public fun getPath(inPath: String): String

    @JsName("GetInvalidFileSystemChars")
    public fun getInvalidFileSystemChars(): String

    @JsName("GetGameLocalizationPaths")
    public fun getGameLocalizationPaths(): Array<String>

    @JsName("GetExtension")
    public fun getExtension(inPath: String, includeDot: Boolean): String

    @JsName("GetEngineLocalizationPaths")
    public fun getEngineLocalizationPaths(): Array<String>

    @JsName("GetEditorLocalizationPaths")
    public fun getEditorLocalizationPaths(): Array<String>

    @JsName("GetCleanFilename")
    public fun getCleanFilename(inPath: String): String

    @JsName("GetBaseFilename")
    public fun getBaseFilename(inPath: String, removePath: Boolean): String

    @JsName("GeneratedConfigDir")
    public fun generatedConfigDir(): String

    @JsName("GameUserDeveloperDir")
    public fun gameUserDeveloperDir(): String

    @JsName("GameSourceDir")
    public fun gameSourceDir(): String

    @JsName("GameDevelopersDir")
    public fun gameDevelopersDir(): String

    @JsName("GameAgnosticSavedDir")
    public fun gameAgnosticSavedDir(): String

    @JsName("FileExists")
    public fun fileExists(inPath: String): Boolean

    @JsName("FeaturePackDir")
    public fun featurePackDir(): String

    @JsName("EnterprisePluginsDir")
    public fun enterprisePluginsDir(): String

    @JsName("EnterpriseFeaturePackDir")
    public fun enterpriseFeaturePackDir(): String

    @JsName("EnterpriseDir")
    public fun enterpriseDir(): String

    @JsName("EngineVersionAgnosticUserDir")
    public fun engineVersionAgnosticUserDir(): String

    @JsName("EngineUserDir")
    public fun engineUserDir(): String

    @JsName("EngineSourceDir")
    public fun engineSourceDir(): String

    @JsName("EngineSavedDir")
    public fun engineSavedDir(): String

    @JsName("EnginePluginsDir")
    public fun enginePluginsDir(): String

    @JsName("EngineIntermediateDir")
    public fun engineIntermediateDir(): String

    @JsName("EngineDir")
    public fun engineDir(): String

    @JsName("EngineContentDir")
    public fun engineContentDir(): String

    @JsName("EngineConfigDir")
    public fun engineConfigDir(): String

    @JsName("DirectoryExists")
    public fun directoryExists(inPath: String): Boolean

    @JsName("DiffDir")
    public fun diffDir(): String

    @JsName("CreateTempFilename")
    public fun createTempFilename(
      path: String,
      prefix: String,
      extension: String,
    ): String

    @JsName("ConvertToSandboxPath")
    public fun convertToSandboxPath(inPath: String, inSandboxName: String): String

    @JsName("ConvertRelativePathToFull")
    public fun convertRelativePathToFull(inPath: String, inBasePath: String): String

    @JsName("ConvertFromSandboxPath")
    public fun convertFromSandboxPath(inPath: String, inSandboxName: String): String

    @JsName("Combine")
    public fun combine(inPaths: Array<String>): String

    @JsName("CollapseRelativeDirectories")
    public fun collapseRelativeDirectories(inPath: String, outPath: String): OutPathValueProvider

    @JsName("CloudDir")
    public fun cloudDir(): String

    @JsName("ChangeExtension")
    public fun changeExtension(inPath: String, inNewExtension: String): String

    @JsName("BugItDir")
    public fun bugItDir(): String

    @JsName("AutomationTransientDir")
    public fun automationTransientDir(): String

    @JsName("AutomationLogDir")
    public fun automationLogDir(): String

    @JsName("AutomationDir")
    public fun automationDir(): String

    @JsName("C")
    public fun copy(other: UObject): BlueprintPathsLibrary

    @JsName("C")
    public fun copy(other: Any): BlueprintPathsLibrary
  }
}

@JsName("EApplicationState")
public external object ApplicationState {
  public var Unknown: String

  public var Inactive: String

  public var Background: String

  public var Active: String

  @JsName("EApplicationState_MAX")
  public var Max: String
}

@JsName("EScreenOrientation")
public external object ScreenOrientation {
  public var Unknown: String

  public var Portrait: String

  public var PortraitUpsideDown: String

  public var LandscapeLeft: String

  public var LandscapeRight: String

  public var FaceUp: String

  public var FaceDown: String

  @JsName("EScreenOrientation_MAX")
  public var Max: String
}

public open external class PlatformGameInstance(
  outer: UObject,
) : GameInstance {
  @JsName("ApplicationWillDeactivateDelegate")
  public open var applicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationHasReactivatedDelegate")
  public open var applicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationWillEnterBackgroundDelegate")
  public open var applicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationHasEnteredForegroundDelegate")
  public open var applicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationWillTerminateDelegate")
  public open var applicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationShouldUnloadResourcesDelegate")
  public open var applicationShouldUnloadResourcesDelegate:
      UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("ApplicationReceivedStartupArgumentsDelegate")
  public open var applicationReceivedStartupArgumentsDelegate:
      UnrealEngineMulticastDelegate<(StartupArguments: Array<String>) -> Unit>

  @JsName("ApplicationRegisteredForRemoteNotificationsDelegate")
  public open var applicationRegisteredForRemoteNotificationsDelegate:
      UnrealEngineMulticastDelegate<(inArray: Array<Number>) -> Unit>

  @JsName("ApplicationRegisteredForUserNotificationsDelegate")
  public open var applicationRegisteredForUserNotificationsDelegate:
      UnrealEngineMulticastDelegate<(inInt: Number) -> Unit>

  @JsName("ApplicationFailedToRegisterForRemoteNotificationsDelegate")
  public open var applicationFailedToRegisterForRemoteNotificationsDelegate:
      UnrealEngineMulticastDelegate<(InString: String) -> Unit>

  @JsName("ApplicationReceivedRemoteNotificationDelegate")
  public open var applicationReceivedRemoteNotificationDelegate:
      UnrealEngineMulticastDelegate<(InString: String, inAppState: String) -> Unit>

  @JsName("ApplicationReceivedLocalNotificationDelegate")
  public open var applicationReceivedLocalNotificationDelegate: UnrealEngineMulticastDelegate<(
    InString: String,
    inInt: Number,
    inAppState: String,
  ) -> Unit>

  @JsName("ApplicationReceivedScreenOrientationChangedNotificationDelegate")
  public open var applicationReceivedScreenOrientationChangedNotificationDelegate:
      UnrealEngineMulticastDelegate<(inScreenOrientation: String) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlatformGameInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlatformGameInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlatformGameInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlatformGameInstance

    @JsName("C")
    public fun copy(other: UObject): PlatformGameInstance

    @JsName("C")
    public fun copy(other: Any): PlatformGameInstance
  }
}

@JsName("T$727")
public external interface Object727 {
  @JsName("NotificationLaunchedApp")
  public var notificationLaunchedApp: Boolean

  @JsName("ActivationEvent")
  public var activationEvent: String

  @JsName("FireDate")
  public var fireDate: Number
}

public open external class BlueprintPlatformLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintPlatformLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintPlatformLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintPlatformLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintPlatformLibrary

    @JsName("ScheduleLocalNotificationFromNow")
    public fun scheduleLocalNotificationFromNow(
      inSecondsFromNow: Number,
      title: String,
      body: String,
      action: String,
      activationEvent: String,
    ): Number

    @JsName("ScheduleLocalNotificationBadgeFromNow")
    public fun scheduleLocalNotificationBadgeFromNow(inSecondsFromNow: Number,
        activationEvent: String): Unit

    @JsName("ScheduleLocalNotificationBadgeAtTime")
    public fun scheduleLocalNotificationBadgeAtTime(
      fireDateTime: DateTime,
      localTime: Boolean,
      activationEvent: String,
    ): Number

    @JsName("ScheduleLocalNotificationAtTime")
    public fun scheduleLocalNotificationAtTime(
      fireDateTime: DateTime,
      localTime: Boolean,
      title: String,
      body: String,
      action: String,
      activationEvent: String,
    ): Number

    @JsName("GetLaunchNotification")
    public fun getLaunchNotification(
      notificationLaunchedApp: Boolean,
      activationEvent: String,
      fireDate: Number,
    ): Object727

    @JsName("GetDeviceOrientation")
    public fun getDeviceOrientation(): String

    @JsName("ClearAllLocalNotifications")
    public fun clearAllLocalNotifications(): Unit

    @JsName("CancelLocalNotificationById")
    public fun cancelLocalNotificationById(notificationId: Number): Unit

    @JsName("CancelLocalNotification")
    public fun cancelLocalNotification(activationEvent: String): Unit

    @JsName("C")
    public fun copy(other: UObject): BlueprintPlatformLibrary

    @JsName("C")
    public fun copy(other: Any): BlueprintPlatformLibrary
  }
}

@JsName("T$728")
public external interface AnyResultProvider {
  @JsName("Result")
  public var result: Any
}

@JsName("T$729")
public external interface NumberArrayResultProvider {
  @JsName("Result")
  public var result: Array<Number>
}

public open external class BlueprintSetLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintSetLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintSetLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintSetLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintSetLibrary

    @JsName("SetSetPropertyByName")
    public fun setSetPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("Set_Union")
    public fun setUnion(
      a: Any,
      b: Any,
      result: Any,
    ): AnyResultProvider

    @JsName("Set_ToArray")
    public fun setToArray(a: Any, result: Array<Number>): NumberArrayResultProvider

    @JsName("Set_RemoveItems")
    public fun setRemoveItems(targetSet: Any, items: Array<Number>): Unit

    @JsName("Set_Remove")
    public fun setRemove(targetSet: Any, item: Number): Boolean

    @JsName("Set_Length")
    public fun setLength(targetSet: Any): Number

    @JsName("Set_IsNotEmpty")
    public fun setIsNotEmpty(targetSet: Any): Boolean

    @JsName("Set_IsEmpty")
    public fun setIsEmpty(targetSet: Any): Boolean

    @JsName("Set_Intersection")
    public fun setIntersection(
      a: Any,
      b: Any,
      result: Any,
    ): AnyResultProvider

    @JsName("Set_Difference")
    public fun setDifference(
      a: Any,
      b: Any,
      result: Any,
    ): AnyResultProvider

    @JsName("Set_Contains")
    public fun setContains(targetSet: Any, itemToFind: Number): Boolean

    @JsName("Set_Clear")
    public fun setClear(targetSet: Any): Unit

    @JsName("Set_AddItems")
    public fun setAddItems(targetSet: Any, newItems: Array<Number>): Unit

    @JsName("Set_Add")
    public fun setAdd(targetSet: Any, newItem: Number): Unit

    @JsName("C")
    public fun copy(other: UObject): BlueprintSetLibrary

    @JsName("C")
    public fun copy(other: Any): BlueprintSetLibrary
  }
}

public open external class BoneMaskFilter(
  outer: UObject,
) : UObject {
  @JsName("BlendPoses")
  public open var blendPoses: Array<InputBlendPose>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoneMaskFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoneMaskFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoneMaskFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoneMaskFilter

    @JsName("C")
    public fun copy(other: UObject): BoneMaskFilter

    @JsName("C")
    public fun copy(other: Any): BoneMaskFilter
  }
}

@JsName("BookMark2D")
public open external class BookMark2d(
  outer: UObject,
) : BookmarkBase {
  @JsName("Zoom2D")
  public open var zoom2d: Number

  @JsName("Location")
  public open var location: IntPoint

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BookMark2d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BookMark2d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BookMark2d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BookMark2d

    @JsName("C")
    public fun copy(other: UObject): BookMark2d

    @JsName("C")
    public fun copy(other: Any): BookMark2d
  }
}

public open external class BoundsCopyComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("BoundsSourceActor")
  public open var boundsSourceActor: Actor

  @JsName("bUseCollidingComponentsForSourceBounds")
  public open var useCollidingComponentsForSourceBounds: Boolean

  @JsName("bKeepOwnBoundsScale")
  public open var keepOwnBoundsScale: Boolean

  @JsName("bUseCollidingComponentsForOwnBounds")
  public open var useCollidingComponentsForOwnBounds: Boolean

  @JsName("PostTransform")
  public open var postTransform: Transform

  @JsName("bCopyXBounds")
  public open var copyXBounds: Boolean

  @JsName("bCopyYBounds")
  public open var copyYBounds: Boolean

  @JsName("bCopyZBounds")
  public open var copyZBounds: Boolean

  @JsName("SetTransformToBounds")
  public open fun setTransformToBounds(): Unit

  @JsName("SetRotation")
  public open fun setRotation(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoundsCopyComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoundsCopyComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoundsCopyComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoundsCopyComponent

    @JsName("C")
    public fun copy(other: UObject): BoundsCopyComponent

    @JsName("C")
    public fun copy(other: Any): BoundsCopyComponent
  }
}

public open external class BoxComponent(
  outer: UObject,
) : ShapeComponent {
  @JsName("BoxExtent")
  public open var boxExtent: Vector

  @JsName("LineThickness")
  public open var lineThickness: Number

  @JsName("SetBoxExtent")
  public open fun setBoxExtent(inBoxExtent: Vector, updateOverlaps: Boolean): Unit

  @JsName("GetUnscaledBoxExtent")
  public open fun getUnscaledBoxExtent(): Vector

  @JsName("GetScaledBoxExtent")
  public open fun getScaledBoxExtent(): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoxComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoxComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoxComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoxComponent

    @JsName("C")
    public fun copy(other: UObject): BoxComponent

    @JsName("C")
    public fun copy(other: Any): BoxComponent
  }
}

@JsName("EReflectionSourceType")
public external object ReflectionSourceType {
  public var CapturedScene: String

  public var SpecifiedCubemap: String

  @JsName("EReflectionSourceType_MAX")
  public var Max: String
}

@JsName("EMobileReflectionCompression")
public external object MobileReflectionCompression {
  public var Default: String

  public var On: String

  public var Off: String

  @JsName("EMobileReflectionCompression_MAX")
  public var Max: String
}

public open external class ReflectionCaptureComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("CaptureOffsetComponent")
  public open var captureOffsetComponent: BillboardComponent

  @JsName("ReflectionSourceType")
  public open var reflectionSourceType: String

  @JsName("MobileReflectionCompression")
  public open var mobileReflectionCompression: String

  @JsName("Cubemap")
  public open var cubemap: TextureCube

  @JsName("SourceCubemapAngle")
  public open var sourceCubemapAngle: Number

  @JsName("Brightness")
  public open var brightness: Number

  @JsName("bModifyMaxValueRGBM")
  public open var modifyMaxValueRgbm: Boolean

  @JsName("MaxValueRGBM")
  public open var maxValueRgbm: Number

  @JsName("CaptureOffset")
  public open var captureOffset: Vector

  @JsName("MapBuildDataId")
  public open var mapBuildDataId: Guid

  @JsName("CachedEncodedHDRCubemap")
  public open var cachedEncodedHdrCubemap: TextureCube

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReflectionCaptureComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReflectionCaptureComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReflectionCaptureComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReflectionCaptureComponent

    @JsName("C")
    public fun copy(other: UObject): ReflectionCaptureComponent

    @JsName("C")
    public fun copy(other: Any): ReflectionCaptureComponent
  }
}

public open external class ReflectionCapture(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("CaptureComponent")
  public open var captureComponent: ReflectionCaptureComponent

  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  @JsName("CaptureOffsetComponent")
  public open var captureOffsetComponent: BillboardComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReflectionCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReflectionCapture

    @JsName("C")
    public fun copy(other: UObject): ReflectionCapture

    @JsName("C")
    public fun copy(other: Any): ReflectionCapture
  }
}

public open external class BoxReflectionCapture(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : ReflectionCapture {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoxReflectionCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoxReflectionCapture

    @JsName("C")
    public fun copy(other: UObject): BoxReflectionCapture

    @JsName("C")
    public fun copy(other: Any): BoxReflectionCapture
  }
}

public open external class BoxReflectionCaptureComponent(
  outer: UObject,
) : ReflectionCaptureComponent {
  @JsName("BoxTransitionDistance")
  public open var boxTransitionDistance: Number

  @JsName("PreviewInfluenceBox")
  public open var previewInfluenceBox: BoxComponent

  @JsName("PreviewCaptureBox")
  public open var previewCaptureBox: BoxComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoxReflectionCaptureComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoxReflectionCaptureComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoxReflectionCaptureComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoxReflectionCaptureComponent

    @JsName("C")
    public fun copy(other: UObject): BoxReflectionCaptureComponent

    @JsName("C")
    public fun copy(other: Any): BoxReflectionCaptureComponent
  }
}

public open external class BrushShape(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Brush {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushShape

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushShape

    @JsName("C")
    public fun copy(other: UObject): BrushShape

    @JsName("C")
    public fun copy(other: Any): BrushShape
  }
}

public open external class BuiltInAttributesExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BuiltInAttributesExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BuiltInAttributesExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BuiltInAttributesExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BuiltInAttributesExtensions

    @JsName("AddTransformAttribute")
    public fun addTransformAttribute(
      animSequenceBase: AnimSequenceBase,
      attributeName: String,
      boneName: String,
      keys: Array<Number>,
      values: Array<Transform>,
    ): Boolean

    @JsName("C")
    public fun copy(other: UObject): BuiltInAttributesExtensions

    @JsName("C")
    public fun copy(other: Any): BuiltInAttributesExtensions
  }
}

public open external class ButtonStyleAsset(
  outer: UObject,
) : UObject {
  @JsName("ButtonStyle")
  public open var buttonStyle: ButtonStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ButtonStyleAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ButtonStyleAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ButtonStyleAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ButtonStyleAsset

    @JsName("C")
    public fun copy(other: UObject): ButtonStyleAsset

    @JsName("C")
    public fun copy(other: Any): ButtonStyleAsset
  }
}

public open external class CachedAnimDataLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CachedAnimDataLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CachedAnimDataLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CachedAnimDataLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CachedAnimDataLibrary

    @JsName("StateMachine_IsStateRelevant")
    public fun stateMachineIsStateRelevant(inAnimInstance: AnimInstance,
        cachedAnimStateData: CachedAnimStateData): Boolean

    @JsName("StateMachine_GetLocalWeight")
    public fun stateMachineGetLocalWeight(inAnimInstance: AnimInstance,
        cachedAnimStateData: CachedAnimStateData): Number

    @JsName("StateMachine_GetGlobalWeight")
    public fun stateMachineGetGlobalWeight(inAnimInstance: AnimInstance,
        cachedAnimStateData: CachedAnimStateData): Number

    @JsName("C")
    public fun copy(other: UObject): CachedAnimDataLibrary

    @JsName("C")
    public fun copy(other: Any): CachedAnimDataLibrary
  }
}

public open external class CameraBlockingVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraBlockingVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraBlockingVolume

    @JsName("C")
    public fun copy(other: UObject): CameraBlockingVolume

    @JsName("C")
    public fun copy(other: Any): CameraBlockingVolume
  }
}

public open external class CameraLensEffectInterface(
  outer: UObject,
) : Interface {
  @JsName("GetPrimaryParticleComponent")
  public open fun getPrimaryParticleComponent(): FxSystemComponent

  @JsName("GetParticleComponents")
  public open fun getParticleComponents(): Array<FxSystemComponent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraLensEffectInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraLensEffectInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraLensEffectInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraLensEffectInterface

    @JsName("C")
    public fun copy(other: UObject): CameraLensEffectInterface

    @JsName("C")
    public fun copy(other: Any): CameraLensEffectInterface
  }
}

public open external class CameraLensEffectInterfaceClassSupportLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraLensEffectInterfaceClassSupportLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        CameraLensEffectInterfaceClassSupportLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraLensEffectInterfaceClassSupportLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraLensEffectInterfaceClassSupportLibrary

    @JsName("SetInterfaceClass")
    public fun setInterfaceClass(
      `class`: UnrealEngineClass,
      `var`: CameraLensInterfaceClassSupport,
      result: String,
    ): Object284

    @JsName("IsInterfaceClassValid")
    public fun isInterfaceClassValid(cameraLens: CameraLensInterfaceClassSupport, result: String):
        StringResultProvider

    @JsName("GetInterfaceClass")
    public fun getInterfaceClass(cameraLens: CameraLensInterfaceClassSupport): UnrealEngineClass

    @JsName("C")
    public fun copy(other: UObject): CameraLensEffectInterfaceClassSupportLibrary

    @JsName("C")
    public fun copy(other: Any): CameraLensEffectInterfaceClassSupportLibrary
  }
}

public open external class CameraShakeSourceActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("CameraShakeSourceComponent")
  public open var cameraShakeSourceComponent: CameraShakeSourceComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraShakeSourceActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraShakeSourceActor

    @JsName("C")
    public fun copy(other: UObject): CameraShakeSourceActor

    @JsName("C")
    public fun copy(other: Any): CameraShakeSourceActor
  }
}

public open external class CancellableAsyncAction(
  outer: UObject,
) : BlueprintAsyncActionBase {
  @JsName("IsActive")
  public open fun isActive(): Boolean

  @JsName("Cancel")
  public open fun cancel(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CancellableAsyncAction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CancellableAsyncAction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CancellableAsyncAction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CancellableAsyncAction

    @JsName("C")
    public fun copy(other: UObject): CancellableAsyncAction

    @JsName("C")
    public fun copy(other: Any): CancellableAsyncAction
  }
}

@JsName("T$730")
public external interface Object730 {
  @JsName("Width")
  public var width: Number

  @JsName("Height")
  public var height: Number
}

@JsName("CanvasRenderTarget2D")
public open external class CanvasRenderTarget2d(
  outer: UObject,
) : TextureRenderTarget2d {
  @JsName("OnCanvasRenderTargetUpdate")
  public open var onCanvasRenderTargetUpdate: UnrealEngineMulticastDelegate<(
    Canvas: Canvas,
    Width: Number,
    Height: Number,
  ) -> Unit>

  @JsName("World")
  public open var world: Any

  @JsName("bShouldClearRenderTargetOnReceiveUpdate")
  public open var shouldClearRenderTargetOnReceiveUpdate: Boolean

  @JsName("UpdateResource")
  public open fun updateResource(): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(
    canvas: Canvas,
    width: Number,
    height: Number,
  ): Unit

  @JsName("GetSize")
  public open fun getSize(width: Number, height: Number): Object730

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CanvasRenderTarget2d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CanvasRenderTarget2d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CanvasRenderTarget2d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CanvasRenderTarget2d

    @JsName("CreateCanvasRenderTarget2D")
    public fun createCanvasRenderTarget2d(
      worldContextObject: UObject,
      canvasRenderTarget2dClass: UnrealEngineClass,
      width: Number,
      height: Number,
    ): CanvasRenderTarget2d

    @JsName("C")
    public fun copy(other: UObject): CanvasRenderTarget2d

    @JsName("C")
    public fun copy(other: Any): CanvasRenderTarget2d
  }
}

public open external class CheckBoxStyleAsset(
  outer: UObject,
) : UObject {
  @JsName("CheckBoxStyle")
  public open var checkBoxStyle: CheckBoxStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CheckBoxStyleAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CheckBoxStyleAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CheckBoxStyleAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CheckBoxStyleAsset

    @JsName("C")
    public fun copy(other: UObject): CheckBoxStyleAsset

    @JsName("C")
    public fun copy(other: Any): CheckBoxStyleAsset
  }
}

@JsName("EPlatformInterfaceDataType")
public external object PlatformInterfaceDataType {
  @JsName("PIDT_None")
  public var None: String

  @JsName("PIDT_Int")
  public var Int: String

  @JsName("PIDT_Float")
  public var Float: String

  @JsName("PIDT_String")
  public var String: String

  @JsName("PIDT_Object")
  public var Object: String

  @JsName("PIDT_Custom")
  public var Custom: String

  @JsName("PIDT_MAX")
  public var Max: String
}

public open external class PlatformInterfaceData {
  @JsName("DataName")
  public open var dataName: String

  @JsName("Type")
  public open var type: String

  @JsName("IntValue")
  public open var intValue: Number

  @JsName("FloatValue")
  public open var floatValue: Number

  @JsName("StringValue")
  public open var stringValue: String

  @JsName("ObjectValue")
  public open var objectValue: UObject

  public open fun clone(): PlatformInterfaceData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PlatformInterfaceData

    @JsName("C")
    public fun copy(other: Any): PlatformInterfaceData
  }
}

public open external class PlatformInterfaceDelegateResult {
  @JsName("bSuccessful")
  public open var successful: Boolean

  @JsName("Data")
  public open var data: PlatformInterfaceData

  public open fun clone(): PlatformInterfaceDelegateResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PlatformInterfaceDelegateResult

    @JsName("C")
    public fun copy(other: Any): PlatformInterfaceDelegateResult
  }
}

public open external class DelegateArray {
  @JsName("Delegates")
  public open var delegates:
      Array<UnrealEngineDelegate<(Result: PlatformInterfaceDelegateResult) -> Unit>>

  public open fun clone(): DelegateArray

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DelegateArray

    @JsName("C")
    public fun copy(other: Any): DelegateArray
  }
}

public open external class PlatformInterfaceBase(
  outer: UObject,
) : UObject {
  @JsName("AllDelegates")
  public open var allDelegates: Array<DelegateArray>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlatformInterfaceBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlatformInterfaceBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlatformInterfaceBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlatformInterfaceBase

    @JsName("C")
    public fun copy(other: UObject): PlatformInterfaceBase

    @JsName("C")
    public fun copy(other: Any): PlatformInterfaceBase
  }
}

public open external class CloudStorageBase(
  outer: UObject,
) : PlatformInterfaceBase {
  @JsName("LocalCloudFiles")
  public open var localCloudFiles: Array<String>

  @JsName("bSuppressDelegateCalls")
  public open var suppressDelegateCalls: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CloudStorageBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CloudStorageBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CloudStorageBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CloudStorageBase

    @JsName("C")
    public fun copy(other: UObject): CloudStorageBase

    @JsName("C")
    public fun copy(other: Any): CloudStorageBase
  }
}

public open external class CollisionResponseTemplate {
  @JsName("Name")
  public open var name: String

  @JsName("CollisionEnabled")
  public open var collisionEnabled: String

  @JsName("bCanModify")
  public open var canModify: Boolean

  @JsName("ObjectTypeName")
  public open var objectTypeName: String

  @JsName("CustomResponses")
  public open var customResponses: Array<ResponseChannel>

  @JsName("HelpMessage")
  public open var helpMessage: String

  public open fun clone(): CollisionResponseTemplate

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CollisionResponseTemplate

    @JsName("C")
    public fun copy(other: Any): CollisionResponseTemplate
  }
}

public open external class CustomChannelSetup {
  @JsName("Channel")
  public open var channel: String

  @JsName("DefaultResponse")
  public open var defaultResponse: String

  @JsName("bTraceType")
  public open var traceType: Boolean

  @JsName("bStaticObject")
  public open var staticObject: Boolean

  @JsName("Name")
  public open var name: String

  public open fun clone(): CustomChannelSetup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomChannelSetup

    @JsName("C")
    public fun copy(other: Any): CustomChannelSetup
  }
}

public open external class CustomProfile {
  @JsName("Name")
  public open var name: String

  @JsName("CustomResponses")
  public open var customResponses: Array<ResponseChannel>

  public open fun clone(): CustomProfile

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomProfile

    @JsName("C")
    public fun copy(other: Any): CustomProfile
  }
}

public open external class Redirector {
  @JsName("OldName")
  public open var oldName: String

  @JsName("NewName")
  public open var newName: String

  public open fun clone(): Redirector

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Redirector

    @JsName("C")
    public fun copy(other: Any): Redirector
  }
}

public open external class CollisionProfile(
  outer: UObject,
) : DeveloperSettings {
  @JsName("Profiles")
  public open var profiles: Array<CollisionResponseTemplate>

  @JsName("DefaultChannelResponses")
  public open var defaultChannelResponses: Array<CustomChannelSetup>

  @JsName("EditProfiles")
  public open var editProfiles: Array<CustomProfile>

  @JsName("ProfileRedirects")
  public open var profileRedirects: Array<Redirector>

  @JsName("CollisionChannelRedirects")
  public open var collisionChannelRedirects: Array<Redirector>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CollisionProfile

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CollisionProfile

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CollisionProfile

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CollisionProfile

    @JsName("C")
    public fun copy(other: UObject): CollisionProfile

    @JsName("C")
    public fun copy(other: Any): CollisionProfile
  }
}

public open external class BlueprintComponentDelegateBinding {
  @JsName("ComponentPropertyName")
  public open var componentPropertyName: String

  @JsName("DelegatePropertyName")
  public open var delegatePropertyName: String

  @JsName("FunctionNameToBind")
  public open var functionNameToBind: String

  public open fun clone(): BlueprintComponentDelegateBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintComponentDelegateBinding

    @JsName("C")
    public fun copy(other: Any): BlueprintComponentDelegateBinding
  }
}

public open external class ComponentDelegateBinding(
  outer: UObject,
) : DynamicBlueprintBinding {
  @JsName("ComponentDelegateBindings")
  public open var componentDelegateBindings: Array<BlueprintComponentDelegateBinding>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): ComponentDelegateBinding

    @JsName("C")
    public fun copy(other: Any): ComponentDelegateBinding
  }
}

public open external class ComponentElementCounterInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentElementCounterInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentElementCounterInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentElementCounterInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentElementCounterInterface

    @JsName("C")
    public fun copy(other: UObject): ComponentElementCounterInterface

    @JsName("C")
    public fun copy(other: Any): ComponentElementCounterInterface
  }
}

public open external class ComponentElementHierarchyInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentElementHierarchyInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentElementHierarchyInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentElementHierarchyInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentElementHierarchyInterface

    @JsName("C")
    public fun copy(other: UObject): ComponentElementHierarchyInterface

    @JsName("C")
    public fun copy(other: Any): ComponentElementHierarchyInterface
  }
}

public open external class ComponentElementObjectInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComponentElementObjectInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComponentElementObjectInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComponentElementObjectInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComponentElementObjectInterface

    @JsName("C")
    public fun copy(other: UObject): ComponentElementObjectInterface

    @JsName("C")
    public fun copy(other: Any): ComponentElementObjectInterface
  }
}

public open external class ActorComponentInstanceDataTransientOuter(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorComponentInstanceDataTransientOuter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorComponentInstanceDataTransientOuter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorComponentInstanceDataTransientOuter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorComponentInstanceDataTransientOuter

    @JsName("C")
    public fun copy(other: UObject): ActorComponentInstanceDataTransientOuter

    @JsName("C")
    public fun copy(other: Any): ActorComponentInstanceDataTransientOuter
  }
}

public open external class CompositeCurveTable(
  outer: UObject,
) : CurveTable {
  @JsName("ParentTables")
  public open var parentTables: Array<CurveTable>

  @JsName("OldParentTables")
  public open var oldParentTables: Array<CurveTable>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CompositeCurveTable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CompositeCurveTable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CompositeCurveTable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CompositeCurveTable

    @JsName("C")
    public fun copy(other: UObject): CompositeCurveTable

    @JsName("C")
    public fun copy(other: Any): CompositeCurveTable
  }
}

public open external class CompositeDataTable(
  outer: UObject,
) : DataTable {
  @JsName("ParentTables")
  public open var parentTables: Array<DataTable>

  @JsName("OldParentTables")
  public open var oldParentTables: Array<DataTable>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CompositeDataTable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CompositeDataTable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CompositeDataTable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CompositeDataTable

    @JsName("C")
    public fun copy(other: UObject): CompositeDataTable

    @JsName("C")
    public fun copy(other: Any): CompositeDataTable
  }
}

public open external class ConstraintInstanceBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConstraintInstanceBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConstraintInstanceBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConstraintInstanceBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConstraintInstanceBlueprintLibrary

    @JsName("SetProjectionParams")
    public fun setProjectionParams(
      accessor: ConstraintInstanceAccessor,
      enableProjection: Boolean,
      projectionLinearAlpha: Number,
      projectionAngularAlpha: Number,
    ): AccessorProvider

    @JsName("SetParentDominates")
    public fun setParentDominates(accessor: ConstraintInstanceAccessor, parentDominates: Boolean):
        AccessorProvider

    @JsName("SetOrientationDriveTwistAndSwing")
    public fun setOrientationDriveTwistAndSwing(
      accessor: ConstraintInstanceAccessor,
      enableTwistDrive: Boolean,
      enableSwingDrive: Boolean,
    ): AccessorProvider

    @JsName("SetOrientationDriveSLERP")
    public fun setOrientationDriveSlerp(accessor: ConstraintInstanceAccessor, enableSlerp: Boolean):
        AccessorProvider

    @JsName("SetLinearVelocityTarget")
    public fun setLinearVelocityTarget(accessor: ConstraintInstanceAccessor, inVelTarget: Vector):
        AccessorProvider

    @JsName("SetLinearVelocityDrive")
    public fun setLinearVelocityDrive(
      accessor: ConstraintInstanceAccessor,
      enableDriveX: Boolean,
      enableDriveY: Boolean,
      enableDriveZ: Boolean,
    ): AccessorProvider

    @JsName("SetLinearSoftLimitParams")
    public fun setLinearSoftLimitParams(
      accessor: ConstraintInstanceAccessor,
      softLinearLimit: Boolean,
      linearLimitStiffness: Number,
      linearLimitDamping: Number,
      linearLimitRestitution: Number,
      linearLimitContactDistance: Number,
    ): AccessorProvider

    @JsName("SetLinearPositionTarget")
    public fun setLinearPositionTarget(accessor: ConstraintInstanceAccessor, inPosTarget: Vector):
        AccessorProvider

    @JsName("SetLinearPositionDrive")
    public fun setLinearPositionDrive(
      accessor: ConstraintInstanceAccessor,
      enableDriveX: Boolean,
      enableDriveY: Boolean,
      enableDriveZ: Boolean,
    ): AccessorProvider

    @JsName("SetLinearPlasticity")
    public fun setLinearPlasticity(
      accessor: ConstraintInstanceAccessor,
      linearPlasticity: Boolean,
      linearPlasticityThreshold: Number,
      plasticityType: String,
    ): AccessorProvider

    @JsName("SetLinearLimits")
    public fun setLinearLimits(
      accessor: ConstraintInstanceAccessor,
      xMotion: String,
      yMotion: String,
      zMotion: String,
      limit: Number,
    ): AccessorProvider

    @JsName("SetLinearDriveParams")
    public fun setLinearDriveParams(
      accessor: ConstraintInstanceAccessor,
      positionStrength: Number,
      velocityStrength: Number,
      inForceLimit: Number,
    ): AccessorProvider

    @JsName("SetLinearBreakable")
    public fun setLinearBreakable(
      accessor: ConstraintInstanceAccessor,
      linearBreakable: Boolean,
      linearBreakThreshold: Number,
    ): AccessorProvider

    @JsName("SetDisableCollision")
    public fun setDisableCollision(accessor: ConstraintInstanceAccessor, disableCollision: Boolean):
        AccessorProvider

    @JsName("SetContactTransferScale")
    public fun setContactTransferScale(accessor: ConstraintInstanceAccessor,
        contactTransferScale: Number): AccessorProvider

    @JsName("SetAngularVelocityTarget")
    public fun setAngularVelocityTarget(accessor: ConstraintInstanceAccessor, inVelTarget: Vector):
        AccessorProvider

    @JsName("SetAngularVelocityDriveTwistAndSwing")
    public fun setAngularVelocityDriveTwistAndSwing(
      accessor: ConstraintInstanceAccessor,
      enableTwistDrive: Boolean,
      enableSwingDrive: Boolean,
    ): AccessorProvider

    @JsName("SetAngularVelocityDriveSLERP")
    public fun setAngularVelocityDriveSlerp(accessor: ConstraintInstanceAccessor,
        enableSlerp: Boolean): AccessorProvider

    @JsName("SetAngularSoftTwistLimitParams")
    public fun setAngularSoftTwistLimitParams(
      accessor: ConstraintInstanceAccessor,
      softTwistLimit: Boolean,
      twistLimitStiffness: Number,
      twistLimitDamping: Number,
      twistLimitRestitution: Number,
      twistLimitContactDistance: Number,
    ): AccessorProvider

    @JsName("SetAngularSoftSwingLimitParams")
    public fun setAngularSoftSwingLimitParams(
      accessor: ConstraintInstanceAccessor,
      softSwingLimit: Boolean,
      swingLimitStiffness: Number,
      swingLimitDamping: Number,
      swingLimitRestitution: Number,
      swingLimitContactDistance: Number,
    ): AccessorProvider

    @JsName("SetAngularPlasticity")
    public fun setAngularPlasticity(
      accessor: ConstraintInstanceAccessor,
      angularPlasticity: Boolean,
      angularPlasticityThreshold: Number,
    ): AccessorProvider

    @JsName("SetAngularOrientationTarget")
    public fun setAngularOrientationTarget(accessor: ConstraintInstanceAccessor,
        inPosTarget: Rotator): AccessorProvider

    @JsName("SetAngularLimits")
    public fun setAngularLimits(
      accessor: ConstraintInstanceAccessor,
      swing1MotionType: String,
      swing1LimitAngle: Number,
      swing2MotionType: String,
      swing2LimitAngle: Number,
      twistMotionType: String,
      twistLimitAngle: Number,
    ): AccessorProvider

    @JsName("SetAngularDriveParams")
    public fun setAngularDriveParams(
      accessor: ConstraintInstanceAccessor,
      positionStrength: Number,
      velocityStrength: Number,
      inForceLimit: Number,
    ): AccessorProvider

    @JsName("SetAngularDriveMode")
    public fun setAngularDriveMode(accessor: ConstraintInstanceAccessor, driveMode: String):
        AccessorProvider

    @JsName("SetAngularBreakable")
    public fun setAngularBreakable(
      accessor: ConstraintInstanceAccessor,
      angularBreakable: Boolean,
      angularBreakThreshold: Number,
    ): AccessorProvider

    @JsName("GetProjectionParams")
    public fun getProjectionParams(
      accessor: ConstraintInstanceAccessor,
      enableProjection: Boolean,
      projectionLinearAlpha: Number,
      projectionAngularAlpha: Number,
    ): Object175

    @JsName("GetParentDominates")
    public fun getParentDominates(accessor: ConstraintInstanceAccessor): Object168

    @JsName("GetOrientationDriveTwistAndSwing")
    public fun getOrientationDriveTwistAndSwing(
      accessor: ConstraintInstanceAccessor,
      outEnableTwistDrive: Boolean,
      outEnableSwingDrive: Boolean,
    ): Object164

    @JsName("GetOrientationDriveSLERP")
    public fun getOrientationDriveSlerp(accessor: ConstraintInstanceAccessor,
        outEnableSlerp: Boolean): Object163

    @JsName("GetLinearVelocityTarget")
    public fun getLinearVelocityTarget(accessor: ConstraintInstanceAccessor, outVelTarget: Vector):
        Object165

    @JsName("GetLinearVelocityDrive")
    public fun getLinearVelocityDrive(
      accessor: ConstraintInstanceAccessor,
      outEnableDriveX: Boolean,
      outEnableDriveY: Boolean,
      outEnableDriveZ: Boolean,
    ): Object172

    @JsName("GetLinearSoftLimitParams")
    public fun getLinearSoftLimitParams(
      accessor: ConstraintInstanceAccessor,
      softLinearLimit: Boolean,
      linearLimitStiffness: Number,
      linearLimitDamping: Number,
      linearLimitRestitution: Number,
      linearLimitContactDistance: Number,
    ): Object174

    @JsName("GetLinearPositionTarget")
    public fun getLinearPositionTarget(accessor: ConstraintInstanceAccessor, outPosTarget: Vector):
        Object173

    @JsName("GetLinearPositionDrive")
    public fun getLinearPositionDrive(
      accessor: ConstraintInstanceAccessor,
      outEnableDriveX: Boolean,
      outEnableDriveY: Boolean,
      outEnableDriveZ: Boolean,
    ): Object172

    @JsName("GetLinearPlasticity")
    public fun getLinearPlasticity(
      accessor: ConstraintInstanceAccessor,
      linearPlasticity: Boolean,
      linearPlasticityThreshold: Number,
      plasticityType: String,
    ): Object171

    @JsName("GetLinearLimits")
    public fun getLinearLimits(
      accessor: ConstraintInstanceAccessor,
      xMotion: String,
      yMotion: String,
      zMotion: String,
      limit: Number,
    ): Object170

    @JsName("GetLinearDriveParams")
    public fun getLinearDriveParams(
      accessor: ConstraintInstanceAccessor,
      outPositionStrength: Number,
      outVelocityStrength: Number,
      outForceLimit: Number,
    ): Object157

    @JsName("GetLinearBreakable")
    public fun getLinearBreakable(
      accessor: ConstraintInstanceAccessor,
      linearBreakable: Boolean,
      linearBreakThreshold: Number,
    ): Object169

    @JsName("GetDisableCollsion")
    public fun getDisableCollsion(accessor: ConstraintInstanceAccessor): Object168

    @JsName("GetContactTransferScale")
    public fun getContactTransferScale(accessor: ConstraintInstanceAccessor,
        contactTransferScale: Number): Object167

    @JsName("GetAttachedBodyNames")
    public fun getAttachedBodyNames(
      accessor: ConstraintInstanceAccessor,
      parentBody: String,
      childBody: String,
    ): Object166

    @JsName("GetAngularVelocityTarget")
    public fun getAngularVelocityTarget(accessor: ConstraintInstanceAccessor, outVelTarget: Vector):
        Object165

    @JsName("GetAngularVelocityDriveTwistAndSwing")
    public fun getAngularVelocityDriveTwistAndSwing(
      accessor: ConstraintInstanceAccessor,
      outEnableTwistDrive: Boolean,
      outEnableSwingDrive: Boolean,
    ): Object164

    @JsName("GetAngularVelocityDriveSLERP")
    public fun getAngularVelocityDriveSlerp(accessor: ConstraintInstanceAccessor,
        outEnableSlerp: Boolean): Object163

    @JsName("GetAngularSoftTwistLimitParams")
    public fun getAngularSoftTwistLimitParams(
      accessor: ConstraintInstanceAccessor,
      softTwistLimit: Boolean,
      twistLimitStiffness: Number,
      twistLimitDamping: Number,
      twistLimitRestitution: Number,
      twistLimitContactDistance: Number,
    ): Object162

    @JsName("GetAngularSoftSwingLimitParams")
    public fun getAngularSoftSwingLimitParams(
      accessor: ConstraintInstanceAccessor,
      softSwingLimit: Boolean,
      swingLimitStiffness: Number,
      swingLimitDamping: Number,
      swingLimitRestitution: Number,
      swingLimitContactDistance: Number,
    ): Object161

    @JsName("GetAngularPlasticity")
    public fun getAngularPlasticity(
      accessor: ConstraintInstanceAccessor,
      angularPlasticity: Boolean,
      angularPlasticityThreshold: Number,
    ): Object160

    @JsName("GetAngularOrientationTarget")
    public fun getAngularOrientationTarget(accessor: ConstraintInstanceAccessor,
        outPosTarget: Rotator): Object159

    @JsName("GetAngularLimits")
    public fun getAngularLimits(
      accessor: ConstraintInstanceAccessor,
      swing1MotionType: String,
      swing1LimitAngle: Number,
      swing2MotionType: String,
      swing2LimitAngle: Number,
      twistMotionType: String,
      twistLimitAngle: Number,
    ): Object158

    @JsName("GetAngularDriveParams")
    public fun getAngularDriveParams(
      accessor: ConstraintInstanceAccessor,
      outPositionStrength: Number,
      outVelocityStrength: Number,
      outForceLimit: Number,
    ): Object157

    @JsName("GetAngularDriveMode")
    public fun getAngularDriveMode(accessor: ConstraintInstanceAccessor, outDriveMode: String):
        Object156

    @JsName("GetAngularBreakable")
    public fun getAngularBreakable(
      accessor: ConstraintInstanceAccessor,
      angularBreakable: Boolean,
      angularBreakThreshold: Number,
    ): Object155

    @JsName("CopyParams")
    public fun copyParams(
      accessor: ConstraintInstanceAccessor,
      sourceAccessor: ConstraintInstanceAccessor,
      keepPosition: Boolean,
      keepRotation: Boolean,
    ): Object154

    @JsName("C")
    public fun copy(other: UObject): ConstraintInstanceBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): ConstraintInstanceBlueprintLibrary
  }
}

public open external class ControlChannel(
  outer: UObject,
) : Channel {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlChannel

    @JsName("C")
    public fun copy(other: UObject): ControlChannel

    @JsName("C")
    public fun copy(other: Any): ControlChannel
  }
}

public open external class StreamingSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("AsyncLoadingThreadEnabled")
  public open var asyncLoadingThreadEnabled: Boolean

  @JsName("WarnIfTimeLimitExceeded")
  public open var warnIfTimeLimitExceeded: Boolean

  @JsName("TimeLimitExceededMultiplier")
  public open var timeLimitExceededMultiplier: Number

  @JsName("TimeLimitExceededMinTime")
  public open var timeLimitExceededMinTime: Number

  @JsName("MinBulkDataSizeForAsyncLoading")
  public open var minBulkDataSizeForAsyncLoading: Number

  @JsName("UseBackgroundLevelStreaming")
  public open var useBackgroundLevelStreaming: Boolean

  @JsName("AsyncLoadingUseFullTimeLimit")
  public open var asyncLoadingUseFullTimeLimit: Boolean

  @JsName("AsyncLoadingTimeLimit")
  public open var asyncLoadingTimeLimit: Number

  @JsName("PriorityAsyncLoadingExtraTime")
  public open var priorityAsyncLoadingExtraTime: Number

  @JsName("LevelStreamingActorsUpdateTimeLimit")
  public open var levelStreamingActorsUpdateTimeLimit: Number

  @JsName("PriorityLevelStreamingActorsUpdateExtraTime")
  public open var priorityLevelStreamingActorsUpdateExtraTime: Number

  @JsName("LevelStreamingComponentsRegistrationGranularity")
  public open var levelStreamingComponentsRegistrationGranularity: Number

  @JsName("LevelStreamingAddPrimitiveGranularity")
  public open var levelStreamingAddPrimitiveGranularity: Number

  @JsName("LevelStreamingUnregisterComponentsTimeLimit")
  public open var levelStreamingUnregisterComponentsTimeLimit: Number

  @JsName("LevelStreamingComponentsUnregistrationGranularity")
  public open var levelStreamingComponentsUnregistrationGranularity: Number

  @JsName("FlushStreamingOnExit")
  public open var flushStreamingOnExit: Boolean

  @JsName("EventDrivenLoaderEnabled")
  public open var eventDrivenLoaderEnabled: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StreamingSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StreamingSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StreamingSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StreamingSettings

    @JsName("C")
    public fun copy(other: UObject): StreamingSettings

    @JsName("C")
    public fun copy(other: Any): StreamingSettings
  }
}

public open external class GarbageCollectionSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("TimeBetweenPurgingPendingKillObjects")
  public open var timeBetweenPurgingPendingKillObjects: Number

  @JsName("FlushStreamingOnGC")
  public open var flushStreamingOnGc: Boolean

  @JsName("AllowParallelGC")
  public open var allowParallelGc: Boolean

  @JsName("IncrementalBeginDestroyEnabled")
  public open var incrementalBeginDestroyEnabled: Boolean

  @JsName("MultithreadedDestructionEnabled")
  public open var multithreadedDestructionEnabled: Boolean

  @JsName("CreateGCClusters")
  public open var createGcClusters: Boolean

  @JsName("AssetClusteringEnabled")
  public open var assetClusteringEnabled: Boolean

  @JsName("ActorClusteringEnabled")
  public open var actorClusteringEnabled: Boolean

  @JsName("BlueprintClusteringEnabled")
  public open var blueprintClusteringEnabled: Boolean

  @JsName("UseDisregardForGCOnDedicatedServers")
  public open var useDisregardForGcOnDedicatedServers: Boolean

  @JsName("VerifyGCObjectNames")
  public open var verifyGcObjectNames: Boolean

  @JsName("VerifyUObjectsAreNotFGCObjects")
  public open var verifyUObjectsAreNotFgcObjects: Boolean

  @JsName("PendingKillEnabled")
  public open var pendingKillEnabled: Boolean

  @JsName("MinGCClusterSize")
  public open var minGcClusterSize: Number

  @JsName("NumRetriesBeforeForcingGC")
  public open var numRetriesBeforeForcingGc: Number

  @JsName("MaxObjectsNotConsideredByGC")
  public open var maxObjectsNotConsideredByGc: Number

  @JsName("SizeOfPermanentObjectPool")
  public open var sizeOfPermanentObjectPool: Number

  @JsName("MaxObjectsInGame")
  public open var maxObjectsInGame: Number

  @JsName("MaxObjectsInEditor")
  public open var maxObjectsInEditor: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GarbageCollectionSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GarbageCollectionSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GarbageCollectionSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GarbageCollectionSettings

    @JsName("C")
    public fun copy(other: UObject): GarbageCollectionSettings

    @JsName("C")
    public fun copy(other: Any): GarbageCollectionSettings
  }
}

public open external class CullDistanceSizePair {
  @JsName("Size")
  public open var size: Number

  @JsName("CullDistance")
  public open var cullDistance: Number

  public open fun clone(): CullDistanceSizePair

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CullDistanceSizePair

    @JsName("C")
    public fun copy(other: Any): CullDistanceSizePair
  }
}

public open external class CullDistanceVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("CullDistances")
  public open var cullDistances: Array<CullDistanceSizePair>

  @JsName("bEnabled")
  public open var enabled: Boolean

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CullDistanceVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CullDistanceVolume

    @JsName("C")
    public fun copy(other: UObject): CullDistanceVolume

    @JsName("C")
    public fun copy(other: Any): CullDistanceVolume
  }
}

public open external class CurveEdPresetCurve(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEdPresetCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEdPresetCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEdPresetCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEdPresetCurve

    @JsName("C")
    public fun copy(other: UObject): CurveEdPresetCurve

    @JsName("C")
    public fun copy(other: Any): CurveEdPresetCurve
  }
}

public open external class AnimationCurveIdentifierExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationCurveIdentifierExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationCurveIdentifierExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationCurveIdentifierExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationCurveIdentifierExtensions

    @JsName("IsValid")
    public fun isValid(identifier: AnimationCurveIdentifier): Object57

    @JsName("GetType")
    public fun getType(identifier: AnimationCurveIdentifier): Object54

    @JsName("GetTransformChildCurveIdentifier")
    public fun getTransformChildCurveIdentifier(
      inOutIdentifier: AnimationCurveIdentifier,
      channel: String,
      axis: String,
    ): Object55

    @JsName("GetName")
    public fun getName(identifier: AnimationCurveIdentifier): Object54

    @JsName("GetCurveIdentifiers")
    public fun getCurveIdentifiers(inSkeleton: Skeleton, curveType: String):
        Array<AnimationCurveIdentifier>

    @JsName("GetCurveIdentifier")
    public fun getCurveIdentifier(
      inSkeleton: Skeleton,
      name: String,
      curveType: String,
    ): AnimationCurveIdentifier

    @JsName("FindCurveIdentifier")
    public fun findCurveIdentifier(
      inSkeleton: Skeleton,
      name: String,
      curveType: String,
    ): AnimationCurveIdentifier

    @JsName("C")
    public fun copy(other: UObject): AnimationCurveIdentifierExtensions

    @JsName("C")
    public fun copy(other: Any): AnimationCurveIdentifierExtensions
  }
}

public open external class NamedCurveValue {
  @JsName("Name")
  public open var name: String

  @JsName("Value")
  public open var value: Number

  public open fun clone(): NamedCurveValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NamedCurveValue

    @JsName("C")
    public fun copy(other: Any): NamedCurveValue
  }
}

@JsName("T$731")
public external interface OutValuesProvider {
  @JsName("OutValues")
  public var outValues: Array<NamedCurveValue>
}

public open external class CurveSourceInterface(
  outer: UObject,
) : Interface {
  @JsName("GetCurveValue")
  public open fun getCurveValue(curveName: String): Number

  @JsName("GetCurves")
  public open fun getCurves(outValues: Array<NamedCurveValue>): OutValuesProvider

  @JsName("GetBindingName")
  public open fun getBindingName(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveSourceInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveSourceInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveSourceInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveSourceInterface

    @JsName("C")
    public fun copy(other: UObject): CurveSourceInterface

    @JsName("C")
    public fun copy(other: Any): CurveSourceInterface
  }
}

public open external class AssetBundleEntry {
  @JsName("BundleName")
  public open var bundleName: String

  @JsName("BundleAssets")
  public open var bundleAssets: Array<SoftObjectPath>

  public open fun clone(): AssetBundleEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetBundleEntry

    @JsName("C")
    public fun copy(other: Any): AssetBundleEntry
  }
}

public open external class AssetBundleData {
  @JsName("Bundles")
  public open var bundles: Array<AssetBundleEntry>

  public open fun clone(): AssetBundleData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetBundleData

    @JsName("C")
    public fun copy(other: Any): AssetBundleData
  }
}

public open external class PrimaryDataAsset(
  outer: UObject,
) : DataAsset {
  @JsName("AssetBundleData")
  public open var assetBundleData: AssetBundleData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PrimaryDataAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PrimaryDataAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PrimaryDataAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PrimaryDataAsset

    @JsName("C")
    public fun copy(other: UObject): PrimaryDataAsset

    @JsName("C")
    public fun copy(other: Any): PrimaryDataAsset
  }
}

public open external class DataDrivenCVarEngineSubsystem(
  outer: UObject,
) : EngineSubsystem {
  @JsName("OnDataDrivenCVarDelegate")
  public open var onDataDrivenCVarDelegate:
      UnrealEngineMulticastDelegate<(CVarName: String) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataDrivenCVarEngineSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataDrivenCVarEngineSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataDrivenCVarEngineSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataDrivenCVarEngineSubsystem

    @JsName("C")
    public fun copy(other: UObject): DataDrivenCVarEngineSubsystem

    @JsName("C")
    public fun copy(other: Any): DataDrivenCVarEngineSubsystem
  }
}

public external object FDataDrivenCVarType {
  @JsName("CVarFloat")
  public var cVarFloat: String

  @JsName("CVarInt")
  public var cVarInt: String

  @JsName("CVarBool")
  public var cVarBool: String

  @JsName("FDataDrivenCVarType_MAX")
  public var fDataDrivenCVarTypeMax: String
}

public open external class DataDrivenConsoleVariable {
  @JsName("Type")
  public open var type: String

  @JsName("Name")
  public open var name: String

  @JsName("Tooltip")
  public open var tooltip: String

  @JsName("DefaultValueFloat")
  public open var defaultValueFloat: Number

  @JsName("DefaultValueInt")
  public open var defaultValueInt: Number

  @JsName("DefaultValueBool")
  public open var defaultValueBool: Boolean

  public open fun clone(): DataDrivenConsoleVariable

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DataDrivenConsoleVariable

    @JsName("C")
    public fun copy(other: Any): DataDrivenConsoleVariable
  }
}

public open external class DataDrivenConsoleVariableSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("CVarsArray")
  public open var cVarsArray: Array<DataDrivenConsoleVariable>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataDrivenConsoleVariableSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataDrivenConsoleVariableSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataDrivenConsoleVariableSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataDrivenConsoleVariableSettings

    @JsName("C")
    public fun copy(other: UObject): DataDrivenConsoleVariableSettings

    @JsName("C")
    public fun copy(other: Any): DataDrivenConsoleVariableSettings
  }
}

public open external class DataLayerSubsystem(
  outer: UObject,
) : WorldSubsystem {
  @JsName("OnDataLayerRuntimeStateChanged")
  public open var onDataLayerRuntimeStateChanged:
      UnrealEngineMulticastDelegate<(DataLayer: DataLayer, State: String) -> Unit>

  @JsName("SetDataLayerStateByLabel")
  public open fun setDataLayerStateByLabel(inDataLayerLabel: String, inState: String): Unit

  @JsName("SetDataLayerState")
  public open fun setDataLayerState(inDataLayer: ActorDataLayer, inState: String): Unit

  @JsName("SetDataLayerRuntimeStateByLabel")
  public open fun setDataLayerRuntimeStateByLabel(
    inDataLayerLabel: String,
    inState: String,
    inIsRecursive: Boolean,
  ): Unit

  @JsName("SetDataLayerRuntimeState")
  public open fun setDataLayerRuntimeState(
    inDataLayer: ActorDataLayer,
    inState: String,
    inIsRecursive: Boolean,
  ): Unit

  @JsName("GetLoadedDataLayerNames")
  public open fun getLoadedDataLayerNames(): Any

  @JsName("GetDataLayerStateByLabel")
  public open fun getDataLayerStateByLabel(inDataLayerLabel: String): String

  @JsName("GetDataLayerState")
  public open fun getDataLayerState(inDataLayer: ActorDataLayer): String

  @JsName("GetDataLayerRuntimeStateByLabel")
  public open fun getDataLayerRuntimeStateByLabel(inDataLayerLabel: String): String

  @JsName("GetDataLayerRuntimeState")
  public open fun getDataLayerRuntimeState(inDataLayer: ActorDataLayer): String

  @JsName("GetDataLayerFromName")
  public open fun getDataLayerFromName(inDataLayerName: String): DataLayer

  @JsName("GetDataLayerFromLabel")
  public open fun getDataLayerFromLabel(inDataLayerLabel: String): DataLayer

  @JsName("GetDataLayerEffectiveRuntimeStateByLabel")
  public open fun getDataLayerEffectiveRuntimeStateByLabel(inDataLayerLabel: String): String

  @JsName("GetDataLayerEffectiveRuntimeState")
  public open fun getDataLayerEffectiveRuntimeState(inDataLayer: ActorDataLayer): String

  @JsName("GetDataLayer")
  public open fun getDataLayer(inDataLayer: ActorDataLayer): DataLayer

  @JsName("GetActiveDataLayerNames")
  public open fun getActiveDataLayerNames(): Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataLayerSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataLayerSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataLayerSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataLayerSubsystem

    @JsName("C")
    public fun copy(other: UObject): DataLayerSubsystem

    @JsName("C")
    public fun copy(other: Any): DataLayerSubsystem
  }
}

public open external class DataTableFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataTableFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataTableFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataTableFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataTableFunctionLibrary

    @JsName("GetDataTableRowNames")
    public fun getDataTableRowNames(table: DataTable, outRowNames: Array<String>):
        OutRowNamesProvider

    @JsName("GetDataTableRowFromName")
    public fun getDataTableRowFromName(
      table: DataTable,
      rowName: String,
      outRow: TableRowBase,
    ): Object58

    @JsName("GetDataTableColumnAsString")
    public fun getDataTableColumnAsString(dataTable: DataTable, propertyName: String): Array<String>

    @JsName("FillDataTableFromJSONString")
    public fun fillDataTableFromJsonString(dataTable: DataTable, jsonString: String): Boolean

    @JsName("FillDataTableFromJSONFile")
    public fun fillDataTableFromJsonFile(
      dataTable: DataTable,
      jsonFilePath: String,
      importRowStruct: ScriptStruct,
    ): Boolean

    @JsName("FillDataTableFromCSVString")
    public fun fillDataTableFromCsvString(dataTable: DataTable, csvString: String): Boolean

    @JsName("FillDataTableFromCSVFile")
    public fun fillDataTableFromCsvFile(dataTable: DataTable, csvFilePath: String): Boolean

    @JsName("EvaluateCurveTableRow")
    public fun evaluateCurveTableRow(
      curveTable: CurveTable,
      rowName: String,
      inXy: Number,
      outResult: String,
      outXy: Number,
      contextString: String,
    ): Object262

    @JsName("DoesDataTableRowExist")
    public fun doesDataTableRowExist(table: DataTable, rowName: String): Boolean

    @JsName("C")
    public fun copy(other: UObject): DataTableFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): DataTableFunctionLibrary
  }
}

public open external class DebugCameraControllerSettingsViewModeIndex {
  @JsName("ViewModeIndex")
  public open var viewModeIndex: String

  public open fun clone(): DebugCameraControllerSettingsViewModeIndex

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DebugCameraControllerSettingsViewModeIndex

    @JsName("C")
    public fun copy(other: Any): DebugCameraControllerSettingsViewModeIndex
  }
}

public open external class DebugCameraControllerSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("CycleViewModes")
  public open var cycleViewModes: Array<DebugCameraControllerSettingsViewModeIndex>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DebugCameraControllerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DebugCameraControllerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DebugCameraControllerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DebugCameraControllerSettings

    @JsName("C")
    public fun copy(other: UObject): DebugCameraControllerSettings

    @JsName("C")
    public fun copy(other: Any): DebugCameraControllerSettings
  }
}

@JsName("DebugCameraHUD")
public open external class DebugCameraHud(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : HUD {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DebugCameraHud

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DebugCameraHud

    @JsName("C")
    public fun copy(other: UObject): DebugCameraHud

    @JsName("C")
    public fun copy(other: Any): DebugCameraHud
  }
}

public open external class DebugDrawService(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DebugDrawService

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DebugDrawService

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DebugDrawService

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DebugDrawService

    @JsName("C")
    public fun copy(other: UObject): DebugDrawService

    @JsName("C")
    public fun copy(other: Any): DebugDrawService
  }
}

public open external class DecalActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("Decal")
  public open var decal: DecalComponent

  @JsName("ArrowComponent")
  public open var arrowComponent: ArrowComponent

  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  @JsName("BoxComponent")
  public open var boxComponent: BoxComponent

  @JsName("SetDecalMaterial")
  public open fun setDecalMaterial(newDecalMaterial: MaterialInterface): Unit

  @JsName("GetDecalMaterial")
  public open fun getDecalMaterial(): MaterialInterface

  @JsName("CreateDynamicMaterialInstance")
  public open fun createDynamicMaterialInstance(): MaterialInstanceDynamic

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DecalActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DecalActor

    @JsName("C")
    public fun copy(other: UObject): DecalActor

    @JsName("C")
    public fun copy(other: Any): DecalActor
  }
}

public open external class DemoNetConnection(
  outer: UObject,
) : NetConnection {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DemoNetConnection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DemoNetConnection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DemoNetConnection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DemoNetConnection

    @JsName("C")
    public fun copy(other: UObject): DemoNetConnection

    @JsName("C")
    public fun copy(other: Any): DemoNetConnection
  }
}

public open external class PendingNetGame(
  outer: UObject,
) : UObject {
  @JsName("NetDriver")
  public open var netDriver: NetDriver

  @JsName("DemoNetDriver")
  public open var demoNetDriver: DemoNetDriver

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PendingNetGame

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PendingNetGame

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PendingNetGame

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PendingNetGame

    @JsName("C")
    public fun copy(other: UObject): PendingNetGame

    @JsName("C")
    public fun copy(other: Any): PendingNetGame
  }
}

public open external class DemoPendingNetGame(
  outer: UObject,
) : PendingNetGame {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DemoPendingNetGame

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DemoPendingNetGame

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DemoPendingNetGame

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DemoPendingNetGame

    @JsName("C")
    public fun copy(other: UObject): DemoPendingNetGame

    @JsName("C")
    public fun copy(other: Any): DemoPendingNetGame
  }
}

public open external class DestructibleInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DestructibleInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DestructibleInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DestructibleInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DestructibleInterface

    @JsName("C")
    public fun copy(other: UObject): DestructibleInterface

    @JsName("C")
    public fun copy(other: Any): DestructibleInterface
  }
}

@JsName("TextureLODGroup")
public open external class TextureLodGroup {
  @JsName("Group")
  public open var group: String

  @JsName("LODBias")
  public open var lodBias: Number

  @JsName("LODBias_Smaller")
  public open var lodBiasSmaller: Number

  @JsName("LODBias_Smallest")
  public open var lodBiasSmallest: Number

  @JsName("NumStreamedMips")
  public open var numStreamedMips: Number

  @JsName("MipGenSettings")
  public open var mipGenSettings: String

  @JsName("MinLODSize")
  public open var minLodSize: Number

  @JsName("MaxLODSize")
  public open var maxLodSize: Number

  @JsName("MaxLODSize_Smaller")
  public open var maxLodSizeSmaller: Number

  @JsName("MaxLODSize_Smallest")
  public open var maxLodSizeSmallest: Number

  @JsName("MaxLODSize_VT")
  public open var maxLodSizeVt: Number

  @JsName("OptionalLODBias")
  public open var optionalLodBias: Number

  @JsName("OptionalMaxLODSize")
  public open var optionalMaxLodSize: Number

  @JsName("MinMagFilter")
  public open var minMagFilter: String

  @JsName("MipFilter")
  public open var mipFilter: String

  @JsName("MipLoadOptions")
  public open var mipLoadOptions: String

  @JsName("HighPriorityLoad")
  public open var highPriorityLoad: Boolean

  @JsName("DuplicateNonOptionalMips")
  public open var duplicateNonOptionalMips: Boolean

  @JsName("Downscale")
  public open var downscale: Number

  @JsName("DownscaleOptions")
  public open var downscaleOptions: String

  @JsName("VirtualTextureTileCountBias")
  public open var virtualTextureTileCountBias: Number

  @JsName("VirtualTextureTileSizeBias")
  public open var virtualTextureTileSizeBias: Number

  @JsName("LossyCompressionAmount")
  public open var lossyCompressionAmount: String

  public open fun clone(): TextureLodGroup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TextureLodGroup

    @JsName("C")
    public fun copy(other: Any): TextureLodGroup
  }
}

@JsName("TextureLODSettings")
public open external class TextureLodSettings(
  outer: UObject,
) : UObject {
  @JsName("TextureLODGroups")
  public open var textureLodGroups: Array<TextureLodGroup>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureLodSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureLodSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureLodSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureLodSettings

    @JsName("C")
    public fun copy(other: UObject): TextureLodSettings

    @JsName("C")
    public fun copy(other: Any): TextureLodSettings
  }
}

@JsName("DPMatchingIfCondition")
public open external class DpMatchingIfCondition {
  @JsName("Operator")
  public open var operator: String

  @JsName("Arg1")
  public open var arg1: String

  @JsName("Arg2")
  public open var arg2: String

  public open fun clone(): DpMatchingIfCondition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DpMatchingIfCondition

    @JsName("C")
    public fun copy(other: Any): DpMatchingIfCondition
  }
}

@JsName("DPMatchingRulestructBase")
public open external class DpMatchingRulestructBase {
  @JsName("RuleName")
  public open var ruleName: String

  @JsName("IfConditions")
  public open var ifConditions: Array<DpMatchingIfCondition>

  @JsName("AppendFragments")
  public open var appendFragments: String

  @JsName("SetUserVar")
  public open var setUserVar: String

  public open fun clone(): DpMatchingRulestructBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DpMatchingRulestructBase

    @JsName("C")
    public fun copy(other: Any): DpMatchingRulestructBase
  }
}

@JsName("DPMatchingRulestructA")
public open external class DpMatchingRulestructA : DpMatchingRulestructBase {
  @JsName("OnTrue")
  public open var onTrue: Array<DpMatchingRulestructBase>

  @JsName("OnFalse")
  public open var onFalse: Array<DpMatchingRulestructBase>

  public override fun clone(): DpMatchingRulestructA

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DpMatchingRulestructA

    @JsName("C")
    public fun copy(other: Any): DpMatchingRulestructA
  }
}

@JsName("DPMatchingRulestructB")
public open external class DpMatchingRulestructB : DpMatchingRulestructBase {
  @JsName("OnTrue")
  public open var onTrue: Array<DpMatchingRulestructA>

  @JsName("OnFalse")
  public open var onFalse: Array<DpMatchingRulestructA>

  public override fun clone(): DpMatchingRulestructB

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DpMatchingRulestructB

    @JsName("C")
    public fun copy(other: Any): DpMatchingRulestructB
  }
}

@JsName("DPMatchingRulestructC")
public open external class DpMatchingRulestructC : DpMatchingRulestructBase {
  @JsName("OnTrue")
  public open var onTrue: Array<DpMatchingRulestructB>

  @JsName("OnFalse")
  public open var onFalse: Array<DpMatchingRulestructB>

  public override fun clone(): DpMatchingRulestructC

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DpMatchingRulestructC

    @JsName("C")
    public fun copy(other: Any): DpMatchingRulestructC
  }
}

@JsName("DPMatchingRulestructD")
public open external class DpMatchingRulestructD : DpMatchingRulestructBase {
  @JsName("OnTrue")
  public open var onTrue: Array<DpMatchingRulestructC>

  @JsName("OnFalse")
  public open var onFalse: Array<DpMatchingRulestructC>

  public override fun clone(): DpMatchingRulestructD

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DpMatchingRulestructD

    @JsName("C")
    public fun copy(other: Any): DpMatchingRulestructD
  }
}

@JsName("DPMatchingRulestructE")
public open external class DpMatchingRulestructE : DpMatchingRulestructBase {
  @JsName("OnTrue")
  public open var onTrue: Array<DpMatchingRulestructD>

  @JsName("OnFalse")
  public open var onFalse: Array<DpMatchingRulestructD>

  public override fun clone(): DpMatchingRulestructE

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DpMatchingRulestructE

    @JsName("C")
    public fun copy(other: Any): DpMatchingRulestructE
  }
}

@JsName("DPMatchingRulestruct")
public open external class DpMatchingRulestruct : DpMatchingRulestructBase {
  @JsName("OnTrue")
  public open var onTrue: Array<DpMatchingRulestructE>

  @JsName("OnFalse")
  public open var onFalse: Array<DpMatchingRulestructE>

  public override fun clone(): DpMatchingRulestruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DpMatchingRulestruct

    @JsName("C")
    public fun copy(other: Any): DpMatchingRulestruct
  }
}

public open external class DeviceProfile(
  outer: UObject,
) : TextureLodSettings {
  @JsName("DeviceType")
  public open var deviceType: String

  @JsName("BaseProfileName")
  public open var baseProfileName: String

  @JsName("Parent")
  public open var parent: DeviceProfile

  @JsName("CVars")
  public open var cVars: Array<String>

  @JsName("MatchingRules")
  public open var matchingRules: Array<DpMatchingRulestruct>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DeviceProfile

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DeviceProfile

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DeviceProfile

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DeviceProfile

    @JsName("C")
    public fun copy(other: UObject): DeviceProfile

    @JsName("C")
    public fun copy(other: Any): DeviceProfile
  }
}

public open external class DeviceProfileFragment(
  outer: UObject,
) : UObject {
  @JsName("CVars")
  public open var cVars: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DeviceProfileFragment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DeviceProfileFragment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DeviceProfileFragment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DeviceProfileFragment

    @JsName("C")
    public fun copy(other: UObject): DeviceProfileFragment

    @JsName("C")
    public fun copy(other: Any): DeviceProfileFragment
  }
}

public open external class DeviceProfileManager(
  outer: UObject,
) : UObject {
  @JsName("Profiles")
  public open var profiles: Array<DeviceProfile>

  @JsName("BackupProfiles")
  public open var backupProfiles: Array<DeviceProfile>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DeviceProfileManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DeviceProfileManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DeviceProfileManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DeviceProfileManager

    @JsName("C")
    public fun copy(other: UObject): DeviceProfileManager

    @JsName("C")
    public fun copy(other: Any): DeviceProfileManager
  }
}

public open external class Light(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("LightComponent")
  public open var lightComponent: LightComponent

  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("ToggleEnabled")
  public open fun toggleEnabled(): Unit

  @JsName("SetLightFunctionScale")
  public open fun setLightFunctionScale(newLightFunctionScale: Vector): Unit

  @JsName("SetLightFunctionMaterial")
  public open fun setLightFunctionMaterial(newLightFunctionMaterial: MaterialInterface): Unit

  @JsName("SetLightFunctionFadeDistance")
  public open fun setLightFunctionFadeDistance(newLightFunctionFadeDistance: Number): Unit

  @JsName("SetLightColor")
  public open fun setLightColor(newLightColor: LinearColor): Unit

  @JsName("SetEnabled")
  public open fun setEnabled(setEnabled: Boolean): Unit

  @JsName("SetCastShadows")
  public open fun setCastShadows(newValue: Boolean): Unit

  @JsName("SetBrightness")
  public open fun setBrightness(newBrightness: Number): Unit

  @JsName("SetAffectTranslucentLighting")
  public open fun setAffectTranslucentLighting(newValue: Boolean): Unit

  @JsName("OnRep_bEnabled")
  public open fun onRepbEnabled(): Unit

  @JsName("IsEnabled")
  public open fun isEnabled(): Boolean

  @JsName("GetLightColor")
  public open fun getLightColor(): LinearColor

  @JsName("GetBrightness")
  public open fun getBrightness(): Number

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Light

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Light

    @JsName("C")
    public fun copy(other: UObject): Light

    @JsName("C")
    public fun copy(other: Any): Light
  }
}

public open external class DirectionalLight(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Light {
  @JsName("ArrowComponent")
  public open var arrowComponent: ArrowComponent

  @JsName("DirectionalLightComponent")
  public open var directionalLightComponent: DirectionalLightComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DirectionalLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DirectionalLight

    @JsName("C")
    public fun copy(other: UObject): DirectionalLight

    @JsName("C")
    public fun copy(other: Any): DirectionalLight
  }
}

public open external class DistributionFloatConstant(
  outer: UObject,
) : DistributionFloat {
  @JsName("Constant")
  public open var constant: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionFloatConstant

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionFloatConstant

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionFloatConstant

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionFloatConstant

    @JsName("C")
    public fun copy(other: UObject): DistributionFloatConstant

    @JsName("C")
    public fun copy(other: Any): DistributionFloatConstant
  }
}

public open external class DistributionFloatConstantCurve(
  outer: UObject,
) : DistributionFloat {
  @JsName("ConstantCurve")
  public open var constantCurve: InterpCurveFloat

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionFloatConstantCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionFloatConstantCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionFloatConstantCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionFloatConstantCurve

    @JsName("C")
    public fun copy(other: UObject): DistributionFloatConstantCurve

    @JsName("C")
    public fun copy(other: Any): DistributionFloatConstantCurve
  }
}

public external object DistributionParamMode {
  @JsName("DPM_Normal")
  public var dpmNormal: String

  @JsName("DPM_Abs")
  public var dpmAbs: String

  @JsName("DPM_Direct")
  public var dpmDirect: String

  @JsName("DPM_MAX")
  public var dpmmax: String
}

public open external class DistributionFloatParameterBase(
  outer: UObject,
) : DistributionFloatConstant {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("MinInput")
  public open var minInput: Number

  @JsName("MaxInput")
  public open var maxInput: Number

  @JsName("MinOutput")
  public open var minOutput: Number

  @JsName("MaxOutput")
  public open var maxOutput: Number

  @JsName("ParamMode")
  public open var paramMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionFloatParameterBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionFloatParameterBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionFloatParameterBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionFloatParameterBase

    @JsName("C")
    public fun copy(other: UObject): DistributionFloatParameterBase

    @JsName("C")
    public fun copy(other: Any): DistributionFloatParameterBase
  }
}

public open external class DistributionFloatParticleParameter(
  outer: UObject,
) : DistributionFloatParameterBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionFloatParticleParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionFloatParticleParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionFloatParticleParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionFloatParticleParameter

    @JsName("C")
    public fun copy(other: UObject): DistributionFloatParticleParameter

    @JsName("C")
    public fun copy(other: Any): DistributionFloatParticleParameter
  }
}

public open external class DistributionFloatUniform(
  outer: UObject,
) : DistributionFloat {
  @JsName("Min")
  public open var min: Number

  @JsName("Max")
  public open var max: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionFloatUniform

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionFloatUniform

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionFloatUniform

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionFloatUniform

    @JsName("C")
    public fun copy(other: UObject): DistributionFloatUniform

    @JsName("C")
    public fun copy(other: Any): DistributionFloatUniform
  }
}

@JsName("InterpCurvePointVector2D")
public open external class InterpCurvePointVector2d {
  @JsName("InVal")
  public open var inVal: Number

  @JsName("OutVal")
  public open var outVal: Vector2d

  @JsName("ArriveTangent")
  public open var arriveTangent: Vector2d

  @JsName("LeaveTangent")
  public open var leaveTangent: Vector2d

  @JsName("InterpMode")
  public open var interpMode: String

  public open fun clone(): InterpCurvePointVector2d

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurvePointVector2d

    @JsName("C")
    public fun copy(other: Any): InterpCurvePointVector2d
  }
}

@JsName("InterpCurveVector2D")
public open external class InterpCurveVector2d {
  @JsName("Points")
  public open var points: Array<InterpCurvePointVector2d>

  @JsName("bIsLooped")
  public open var isLooped: Boolean

  @JsName("LoopKeyOffset")
  public open var loopKeyOffset: Number

  public open fun clone(): InterpCurveVector2d

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurveVector2d

    @JsName("C")
    public fun copy(other: Any): InterpCurveVector2d
  }
}

public open external class DistributionFloatUniformCurve(
  outer: UObject,
) : DistributionFloat {
  @JsName("ConstantCurve")
  public open var constantCurve: InterpCurveVector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionFloatUniformCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionFloatUniformCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionFloatUniformCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionFloatUniformCurve

    @JsName("C")
    public fun copy(other: UObject): DistributionFloatUniformCurve

    @JsName("C")
    public fun copy(other: Any): DistributionFloatUniformCurve
  }
}

@JsName("EDistributionVectorLockFlags")
public external object DistributionVectorLockFlags {
  @JsName("EDVLF_None")
  public var None: String

  @JsName("EDVLF_XY")
  public var XY: String

  @JsName("EDVLF_XZ")
  public var XZ: String

  @JsName("EDVLF_YZ")
  public var YZ: String

  @JsName("EDVLF_XYZ")
  public var XYZ: String

  @JsName("EDVLF_MAX")
  public var Max: String
}

public open external class DistributionVectorConstant(
  outer: UObject,
) : DistributionVector {
  @JsName("Constant")
  public open var constant: Vector

  @JsName("bLockAxes")
  public open var lockAxes: Boolean

  @JsName("LockedAxes")
  public open var lockedAxes: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionVectorConstant

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionVectorConstant

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionVectorConstant

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionVectorConstant

    @JsName("C")
    public fun copy(other: UObject): DistributionVectorConstant

    @JsName("C")
    public fun copy(other: Any): DistributionVectorConstant
  }
}

public open external class DistributionVectorConstantCurve(
  outer: UObject,
) : DistributionVector {
  @JsName("ConstantCurve")
  public open var constantCurve: InterpCurveVector

  @JsName("bLockAxes")
  public open var lockAxes: Boolean

  @JsName("LockedAxes")
  public open var lockedAxes: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionVectorConstantCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionVectorConstantCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionVectorConstantCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionVectorConstantCurve

    @JsName("C")
    public fun copy(other: UObject): DistributionVectorConstantCurve

    @JsName("C")
    public fun copy(other: Any): DistributionVectorConstantCurve
  }
}

public open external class DistributionVectorParameterBase(
  outer: UObject,
) : DistributionVectorConstant {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("MinInput")
  public open var minInput: Vector

  @JsName("MaxInput")
  public open var maxInput: Vector

  @JsName("MinOutput")
  public open var minOutput: Vector

  @JsName("MaxOutput")
  public open var maxOutput: Vector

  @JsName("ParamModes")
  public open var paramModes: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionVectorParameterBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionVectorParameterBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionVectorParameterBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionVectorParameterBase

    @JsName("C")
    public fun copy(other: UObject): DistributionVectorParameterBase

    @JsName("C")
    public fun copy(other: Any): DistributionVectorParameterBase
  }
}

public open external class DistributionVectorParticleParameter(
  outer: UObject,
) : DistributionVectorParameterBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionVectorParticleParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionVectorParticleParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionVectorParticleParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionVectorParticleParameter

    @JsName("C")
    public fun copy(other: UObject): DistributionVectorParticleParameter

    @JsName("C")
    public fun copy(other: Any): DistributionVectorParticleParameter
  }
}

@JsName("EDistributionVectorMirrorFlags")
public external object DistributionVectorMirrorFlags {
  @JsName("EDVMF_Same")
  public var Same: String

  @JsName("EDVMF_Different")
  public var Different: String

  @JsName("EDVMF_Mirror")
  public var Mirror: String

  @JsName("EDVMF_MAX")
  public var Max: String
}

public open external class DistributionVectorUniform(
  outer: UObject,
) : DistributionVector {
  @JsName("Max")
  public open var max: Vector

  @JsName("Min")
  public open var min: Vector

  @JsName("bLockAxes")
  public open var lockAxes: Boolean

  @JsName("LockedAxes")
  public open var lockedAxes: String

  @JsName("MirrorFlags")
  public open var mirrorFlags: String

  @JsName("bUseExtremes")
  public open var useExtremes: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionVectorUniform

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionVectorUniform

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionVectorUniform

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionVectorUniform

    @JsName("C")
    public fun copy(other: UObject): DistributionVectorUniform

    @JsName("C")
    public fun copy(other: Any): DistributionVectorUniform
  }
}

public open external class TwoVectors {
  public open var v1: Vector

  public open var v2: Vector

  public open fun clone(): TwoVectors

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TwoVectors

    @JsName("C")
    public fun copy(other: Any): TwoVectors
  }
}

public open external class InterpCurvePointTwoVectors {
  @JsName("InVal")
  public open var inVal: Number

  @JsName("OutVal")
  public open var outVal: TwoVectors

  @JsName("ArriveTangent")
  public open var arriveTangent: TwoVectors

  @JsName("LeaveTangent")
  public open var leaveTangent: TwoVectors

  @JsName("InterpMode")
  public open var interpMode: String

  public open fun clone(): InterpCurvePointTwoVectors

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurvePointTwoVectors

    @JsName("C")
    public fun copy(other: Any): InterpCurvePointTwoVectors
  }
}

public open external class InterpCurveTwoVectors {
  @JsName("Points")
  public open var points: Array<InterpCurvePointTwoVectors>

  @JsName("bIsLooped")
  public open var isLooped: Boolean

  @JsName("LoopKeyOffset")
  public open var loopKeyOffset: Number

  public open fun clone(): InterpCurveTwoVectors

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurveTwoVectors

    @JsName("C")
    public fun copy(other: Any): InterpCurveTwoVectors
  }
}

public open external class DistributionVectorUniformCurve(
  outer: UObject,
) : DistributionVector {
  @JsName("ConstantCurve")
  public open var constantCurve: InterpCurveTwoVectors

  @JsName("bLockAxes1")
  public open var lockAxes1: Boolean

  @JsName("bLockAxes2")
  public open var lockAxes2: Boolean

  @JsName("LockedAxes")
  public open var lockedAxes: String

  @JsName("MirrorFlags")
  public open var mirrorFlags: String

  @JsName("bUseExtremes")
  public open var useExtremes: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionVectorUniformCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionVectorUniformCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionVectorUniformCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionVectorUniformCurve

    @JsName("C")
    public fun copy(other: UObject): DistributionVectorUniformCurve

    @JsName("C")
    public fun copy(other: Any): DistributionVectorUniformCurve
  }
}

public open external class MaterialSpriteElement {
  @JsName("Material")
  public open var material: MaterialInterface

  @JsName("DistanceToOpacityCurve")
  public open var distanceToOpacityCurve: CurveFloat

  @JsName("bSizeIsInScreenSpace")
  public open var sizeIsInScreenSpace: Boolean

  @JsName("BaseSizeX")
  public open var baseSizeX: Number

  @JsName("BaseSizeY")
  public open var baseSizeY: Number

  @JsName("DistanceToSizeCurve")
  public open var distanceToSizeCurve: CurveFloat

  public open fun clone(): MaterialSpriteElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialSpriteElement

    @JsName("C")
    public fun copy(other: Any): MaterialSpriteElement
  }
}

public open external class MaterialBillboardComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("Elements")
  public open var elements: Array<MaterialSpriteElement>

  @JsName("SetElements")
  public open fun setElements(newElements: Array<MaterialSpriteElement>): Unit

  @JsName("AddElement")
  public open fun addElement(
    material: MaterialInterface,
    distanceToOpacityCurve: CurveFloat,
    sizeIsInScreenSpace: Boolean,
    baseSizeX: Number,
    baseSizeY: Number,
    distanceToSizeCurve: CurveFloat,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialBillboardComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialBillboardComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialBillboardComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialBillboardComponent

    @JsName("C")
    public fun copy(other: UObject): MaterialBillboardComponent

    @JsName("C")
    public fun copy(other: Any): MaterialBillboardComponent
  }
}

public open external class DocumentationActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("DocumentLink")
  public open var documentLink: String

  @JsName("Billboard")
  public open var billboard: MaterialBillboardComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DocumentationActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DocumentationActor

    @JsName("C")
    public fun copy(other: UObject): DocumentationActor

    @JsName("C")
    public fun copy(other: Any): DocumentationActor
  }
}

@JsName("DPICustomScalingRule")
public open external class DpiCustomScalingRule(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DpiCustomScalingRule

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DpiCustomScalingRule

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DpiCustomScalingRule

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DpiCustomScalingRule

    @JsName("C")
    public fun copy(other: UObject): DpiCustomScalingRule

    @JsName("C")
    public fun copy(other: Any): DpiCustomScalingRule
  }
}

public open external class DrawSphereComponent(
  outer: UObject,
) : SphereComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawSphereComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawSphereComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawSphereComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawSphereComponent

    @JsName("C")
    public fun copy(other: UObject): DrawSphereComponent

    @JsName("C")
    public fun copy(other: Any): DrawSphereComponent
  }
}

public open external class GraphNodeContextMenuContext(
  outer: UObject,
) : UObject {
  @JsName("Blueprint")
  public open var blueprint: Blueprint

  @JsName("Graph")
  public open var graph: EdGraph

  @JsName("UNode")
  public open var uNode: EdGraphNode

  @JsName("bIsDebugging")
  public open var isDebugging: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GraphNodeContextMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GraphNodeContextMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GraphNodeContextMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GraphNodeContextMenuContext

    @JsName("C")
    public fun copy(other: UObject): GraphNodeContextMenuContext

    @JsName("C")
    public fun copy(other: Any): GraphNodeContextMenuContext
  }
}

@JsName("EdGraphNode_Documentation")
public open external class EdGraphNodeDocumentation(
  outer: UObject,
) : EdGraphNode {
  @JsName("Link")
  public open var link: String

  @JsName("Excerpt")
  public open var excerpt: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdGraphNodeDocumentation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdGraphNodeDocumentation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdGraphNodeDocumentation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdGraphNodeDocumentation

    @JsName("C")
    public fun copy(other: UObject): EdGraphNodeDocumentation

    @JsName("C")
    public fun copy(other: Any): EdGraphNodeDocumentation
  }
}

public open external class ViewModeUtils(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewModeUtils

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewModeUtils

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewModeUtils

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewModeUtils

    @JsName("C")
    public fun copy(other: UObject): ViewModeUtils

    @JsName("C")
    public fun copy(other: Any): ViewModeUtils
  }
}

public open external class EngineBaseTypes(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EngineBaseTypes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EngineBaseTypes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EngineBaseTypes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EngineBaseTypes

    @JsName("C")
    public fun copy(other: UObject): EngineBaseTypes

    @JsName("C")
    public fun copy(other: Any): EngineBaseTypes
  }
}

public open external class EngineElementsLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EngineElementsLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EngineElementsLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EngineElementsLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EngineElementsLibrary

    @JsName("K2_AcquireEditorSMInstanceElementHandle")
    public fun k2AcquireEditorSmInstanceElementHandle(
      ismComponent: InstancedStaticMeshComponent,
      instanceIndex: Number,
      allowCreate: Boolean,
    ): ScriptTypedElementHandle

    @JsName("K2_AcquireEditorObjectElementHandle")
    public fun k2AcquireEditorObjectElementHandle(uObject: UObject, allowCreate: Boolean):
        ScriptTypedElementHandle

    @JsName("K2_AcquireEditorComponentElementHandle")
    public fun k2AcquireEditorComponentElementHandle(component: ActorComponent,
        allowCreate: Boolean): ScriptTypedElementHandle

    @JsName("K2_AcquireEditorActorElementHandle")
    public fun k2AcquireEditorActorElementHandle(actor: Actor, allowCreate: Boolean):
        ScriptTypedElementHandle

    @JsName("C")
    public fun copy(other: UObject): EngineElementsLibrary

    @JsName("C")
    public fun copy(other: Any): EngineElementsLibrary
  }
}

public open external class EngineHandlerComponentFactory(
  outer: UObject,
) : HandlerComponentFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EngineHandlerComponentFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EngineHandlerComponentFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EngineHandlerComponentFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EngineHandlerComponentFactory

    @JsName("C")
    public fun copy(other: UObject): EngineHandlerComponentFactory

    @JsName("C")
    public fun copy(other: Any): EngineHandlerComponentFactory
  }
}

public open external class EngineMessage(
  outer: UObject,
) : LocalMessage {
  @JsName("FailedPlaceMessage")
  public open var failedPlaceMessage: String

  @JsName("MaxedOutMessage")
  public open var maxedOutMessage: String

  @JsName("EnteredMessage")
  public open var enteredMessage: String

  @JsName("LeftMessage")
  public open var leftMessage: String

  @JsName("GlobalNameChange")
  public open var globalNameChange: String

  @JsName("SpecEnteredMessage")
  public open var specEnteredMessage: String

  @JsName("NewPlayerMessage")
  public open var newPlayerMessage: String

  @JsName("NewSpecMessage")
  public open var newSpecMessage: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EngineMessage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EngineMessage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EngineMessage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EngineMessage

    @JsName("C")
    public fun copy(other: UObject): EngineMessage

    @JsName("C")
    public fun copy(other: Any): EngineMessage
  }
}

public open external class EngineTypes(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EngineTypes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EngineTypes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EngineTypes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EngineTypes

    @JsName("C")
    public fun copy(other: UObject): EngineTypes

    @JsName("C")
    public fun copy(other: Any): EngineTypes
  }
}

public open external class ExponentialHeightFogData {
  @JsName("FogDensity")
  public open var fogDensity: Number

  @JsName("FogHeightFalloff")
  public open var fogHeightFalloff: Number

  @JsName("FogHeightOffset")
  public open var fogHeightOffset: Number

  public open fun clone(): ExponentialHeightFogData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExponentialHeightFogData

    @JsName("C")
    public fun copy(other: Any): ExponentialHeightFogData
  }
}

public open external class ExponentialHeightFogComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("FogDensity")
  public open var fogDensity: Number

  @JsName("FogHeightFalloff")
  public open var fogHeightFalloff: Number

  @JsName("SecondFogData")
  public open var secondFogData: ExponentialHeightFogData

  @JsName("FogInscatteringColor")
  public open var fogInscatteringColor: LinearColor

  @JsName("FogInscatteringLuminance")
  public open var fogInscatteringLuminance: LinearColor

  @JsName("InscatteringColorCubemap")
  public open var inscatteringColorCubemap: TextureCube

  @JsName("InscatteringColorCubemapAngle")
  public open var inscatteringColorCubemapAngle: Number

  @JsName("InscatteringTextureTint")
  public open var inscatteringTextureTint: LinearColor

  @JsName("FullyDirectionalInscatteringColorDistance")
  public open var fullyDirectionalInscatteringColorDistance: Number

  @JsName("NonDirectionalInscatteringColorDistance")
  public open var nonDirectionalInscatteringColorDistance: Number

  @JsName("DirectionalInscatteringExponent")
  public open var directionalInscatteringExponent: Number

  @JsName("DirectionalInscatteringStartDistance")
  public open var directionalInscatteringStartDistance: Number

  @JsName("DirectionalInscatteringColor")
  public open var directionalInscatteringColor: LinearColor

  @JsName("DirectionalInscatteringLuminance")
  public open var directionalInscatteringLuminance: LinearColor

  @JsName("FogMaxOpacity")
  public open var fogMaxOpacity: Number

  @JsName("StartDistance")
  public open var startDistance: Number

  @JsName("FogCutoffDistance")
  public open var fogCutoffDistance: Number

  @JsName("bEnableVolumetricFog")
  public open var enableVolumetricFog: Boolean

  @JsName("VolumetricFogScatteringDistribution")
  public open var volumetricFogScatteringDistribution: Number

  @JsName("VolumetricFogAlbedo")
  public open var volumetricFogAlbedo: Color

  @JsName("VolumetricFogEmissive")
  public open var volumetricFogEmissive: LinearColor

  @JsName("VolumetricFogExtinctionScale")
  public open var volumetricFogExtinctionScale: Number

  @JsName("VolumetricFogDistance")
  public open var volumetricFogDistance: Number

  @JsName("VolumetricFogStaticLightingScatteringIntensity")
  public open var volumetricFogStaticLightingScatteringIntensity: Number

  @JsName("bOverrideLightColorsWithFogInscatteringColors")
  public open var overrideLightColorsWithFogInscatteringColors: Boolean

  @JsName("SetVolumetricFogScatteringDistribution")
  public open fun setVolumetricFogScatteringDistribution(newValue: Number): Unit

  @JsName("SetVolumetricFogExtinctionScale")
  public open fun setVolumetricFogExtinctionScale(newValue: Number): Unit

  @JsName("SetVolumetricFogEmissive")
  public open fun setVolumetricFogEmissive(newValue: LinearColor): Unit

  @JsName("SetVolumetricFogDistance")
  public open fun setVolumetricFogDistance(newValue: Number): Unit

  @JsName("SetVolumetricFogAlbedo")
  public open fun setVolumetricFogAlbedo(newValue: Color): Unit

  @JsName("SetVolumetricFog")
  public open fun setVolumetricFog(newValue: Boolean): Unit

  @JsName("SetStartDistance")
  public open fun setStartDistance(value: Number): Unit

  @JsName("SetNonDirectionalInscatteringColorDistance")
  public open fun setNonDirectionalInscatteringColorDistance(value: Number): Unit

  @JsName("SetInscatteringTextureTint")
  public open fun setInscatteringTextureTint(value: LinearColor): Unit

  @JsName("SetInscatteringColorCubemapAngle")
  public open fun setInscatteringColorCubemapAngle(value: Number): Unit

  @JsName("SetInscatteringColorCubemap")
  public open fun setInscatteringColorCubemap(value: TextureCube): Unit

  @JsName("SetFullyDirectionalInscatteringColorDistance")
  public open fun setFullyDirectionalInscatteringColorDistance(value: Number): Unit

  @JsName("SetFogMaxOpacity")
  public open fun setFogMaxOpacity(value: Number): Unit

  @JsName("SetFogInscatteringColor")
  public open fun setFogInscatteringColor(value: LinearColor): Unit

  @JsName("SetFogHeightFalloff")
  public open fun setFogHeightFalloff(value: Number): Unit

  @JsName("SetFogDensity")
  public open fun setFogDensity(value: Number): Unit

  @JsName("SetFogCutoffDistance")
  public open fun setFogCutoffDistance(value: Number): Unit

  @JsName("SetDirectionalInscatteringStartDistance")
  public open fun setDirectionalInscatteringStartDistance(value: Number): Unit

  @JsName("SetDirectionalInscatteringExponent")
  public open fun setDirectionalInscatteringExponent(value: Number): Unit

  @JsName("SetDirectionalInscatteringColor")
  public open fun setDirectionalInscatteringColor(value: LinearColor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExponentialHeightFogComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExponentialHeightFogComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExponentialHeightFogComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExponentialHeightFogComponent

    @JsName("C")
    public fun copy(other: UObject): ExponentialHeightFogComponent

    @JsName("C")
    public fun copy(other: Any): ExponentialHeightFogComponent
  }
}

public open external class ExponentialHeightFog(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("Component")
  public open var component: ExponentialHeightFogComponent

  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("OnRep_bEnabled")
  public open fun onRepbEnabled(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExponentialHeightFog

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExponentialHeightFog

    @JsName("C")
    public fun copy(other: UObject): ExponentialHeightFog

    @JsName("C")
    public fun copy(other: Any): ExponentialHeightFog
  }
}

public open external class FloatingPawnMovement(
  outer: UObject,
) : PawnMovementComponent {
  @JsName("MaxSpeed")
  public open var maxSpeed: Number

  @JsName("Acceleration")
  public open var acceleration: Number

  @JsName("Deceleration")
  public open var deceleration: Number

  @JsName("TurningBoost")
  public open var turningBoost: Number

  @JsName("bPositionCorrected")
  public open var positionCorrected: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FloatingPawnMovement

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FloatingPawnMovement

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FloatingPawnMovement

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FloatingPawnMovement

    @JsName("C")
    public fun copy(other: UObject): FloatingPawnMovement

    @JsName("C")
    public fun copy(other: Any): FloatingPawnMovement
  }
}

@JsName("EFontLayoutMethod")
public external object FontLayoutMethod {
  public var Metrics: String

  public var BoundingBox: String

  @JsName("EFontLayoutMethod_MAX")
  public var Max: String
}

public open external class FontFace(
  outer: UObject,
) : UObject {
  @JsName("SourceFilename")
  public open var sourceFilename: String

  @JsName("Hinting")
  public open var hinting: String

  @JsName("LoadingPolicy")
  public open var loadingPolicy: String

  @JsName("LayoutMethod")
  public open var layoutMethod: String

  @JsName("FontFaceData")
  public open var fontFaceData: Array<Number>

  @JsName("SubFaces")
  public open var subFaces: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FontFace

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FontFace

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FontFace

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FontFace

    @JsName("C")
    public fun copy(other: UObject): FontFace

    @JsName("C")
    public fun copy(other: Any): FontFace
  }
}

public open external class GameEngine(
  outer: UObject,
) : Engine {
  @JsName("MaxDeltaTime")
  public open var maxDeltaTime: Number

  @JsName("ServerFlushLogInterval")
  public open var serverFlushLogInterval: Number

  @JsName("GameInstance")
  public open var gameInstance: GameInstance

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameEngine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameEngine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameEngine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameEngine

    @JsName("C")
    public fun copy(other: UObject): GameEngine

    @JsName("C")
    public fun copy(other: Any): GameEngine
  }
}

@JsName("T$733")
public external interface Object733 {
  @JsName("Key")
  public var key: String

  @JsName("Value")
  public var value: String
}

@JsName("T$738")
public external interface Object738 {
  @JsName("Center")
  public var center: Vector

  @JsName("BoxExtent")
  public var boxExtent: Vector
}

@JsName("T$739")
public external interface Object739 {
  @JsName("Seconds")
  public var seconds: Number

  @JsName("PartialSeconds")
  public var partialSeconds: Number
}

public open external class GameplayStatics(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayStatics

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayStatics

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayStatics

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayStatics

    @JsName("UnRetainAllSoundsInSoundClass")
    public fun unRetainAllSoundsInSoundClass(inSoundClass: SoundClass): Unit

    @JsName("UnloadStreamLevelBySoftObjectPtr")
    public fun unloadStreamLevelBySoftObjectPtr(
      worldContextObject: UObject,
      level: World,
      latentInfo: LatentActionInfo,
      shouldBlockOnUnload: Boolean,
    ): Unit

    @JsName("UnloadStreamLevel")
    public fun unloadStreamLevel(
      worldContextObject: UObject,
      levelName: String,
      latentInfo: LatentActionInfo,
      shouldBlockOnUnload: Boolean,
    ): Unit

    @JsName("SuggestProjectileVelocity_CustomArc")
    public fun suggestProjectileVelocityCustomArc(
      worldContextObject: UObject,
      outLaunchVelocity: Vector,
      startPos: Vector,
      endPos: Vector,
      overrideGravityZ: Number,
      arcParam: Number,
    ): Object353

    @JsName("SpawnSoundAttached")
    public fun spawnSoundAttached(
      sound: SoundBase,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      stopWhenAttachedToDestroyed: Boolean,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      concurrencySettings: SoundConcurrency,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnSoundAtLocation")
    public fun spawnSoundAtLocation(
      worldContextObject: UObject,
      sound: SoundBase,
      location: Vector,
      rotation: Rotator,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      concurrencySettings: SoundConcurrency,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnSound2D")
    public fun spawnSound2d(
      worldContextObject: UObject,
      sound: SoundBase,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      concurrencySettings: SoundConcurrency,
      persistAcrossLevelTransition: Boolean,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnObject")
    public fun spawnObject(objectClass: UnrealEngineClass, outer: UObject): UObject

    @JsName("SpawnForceFeedbackAttached")
    public fun spawnForceFeedbackAttached(
      forceFeedbackEffect: ForceFeedbackEffect,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      stopWhenAttachedToDestroyed: Boolean,
      looping: Boolean,
      intensityMultiplier: Number,
      startTime: Number,
      attenuationSettings: ForceFeedbackAttenuation,
      autoDestroy: Boolean,
    ): ForceFeedbackComponent

    @JsName("SpawnForceFeedbackAtLocation")
    public fun spawnForceFeedbackAtLocation(
      worldContextObject: UObject,
      forceFeedbackEffect: ForceFeedbackEffect,
      location: Vector,
      rotation: Rotator,
      looping: Boolean,
      intensityMultiplier: Number,
      startTime: Number,
      attenuationSettings: ForceFeedbackAttenuation,
      autoDestroy: Boolean,
    ): ForceFeedbackComponent

    @JsName("SpawnEmitterAttached")
    public fun spawnEmitterAttached(
      emitterTemplate: ParticleSystem,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      scale: Vector,
      locationType: String,
      autoDestroy: Boolean,
      poolingMethod: String,
      autoActivate: Boolean,
    ): ParticleSystemComponent

    @JsName("SpawnEmitterAtLocation")
    public fun spawnEmitterAtLocation(
      worldContextObject: UObject,
      emitterTemplate: ParticleSystem,
      location: Vector,
      rotation: Rotator,
      scale: Vector,
      autoDestroy: Boolean,
      poolingMethod: String,
      autoActivateSystem: Boolean,
    ): ParticleSystemComponent

    @JsName("SpawnDialogueAttached")
    public fun spawnDialogueAttached(
      dialogue: DialogueWave,
      context: DialogueContext,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      stopWhenAttachedToDestroyed: Boolean,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnDialogueAtLocation")
    public fun spawnDialogueAtLocation(
      worldContextObject: UObject,
      dialogue: DialogueWave,
      context: DialogueContext,
      location: Vector,
      rotation: Rotator,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnDialogue2D")
    public fun spawnDialogue2d(
      worldContextObject: UObject,
      dialogue: DialogueWave,
      context: DialogueContext,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnDecalAttached")
    public fun spawnDecalAttached(
      decalMaterial: MaterialInterface,
      decalSize: Vector,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      lifeSpan: Number,
    ): DecalComponent

    @JsName("SpawnDecalAtLocation")
    public fun spawnDecalAtLocation(
      worldContextObject: UObject,
      decalMaterial: MaterialInterface,
      decalSize: Vector,
      location: Vector,
      rotation: Rotator,
      lifeSpan: Number,
    ): DecalComponent

    @JsName("SetWorldOriginLocation")
    public fun setWorldOriginLocation(worldContextObject: UObject, newLocation: IntVector): Unit

    @JsName("SetViewportMouseCaptureMode")
    public fun setViewportMouseCaptureMode(worldContextObject: UObject, mouseCaptureMode: String):
        Unit

    @JsName("SetSubtitlesEnabled")
    public fun setSubtitlesEnabled(enabled: Boolean): Unit

    @JsName("SetSoundMixClassOverride")
    public fun setSoundMixClassOverride(
      worldContextObject: UObject,
      inSoundMixModifier: SoundMix,
      inSoundClass: SoundClass,
      volume: Number,
      pitch: Number,
      fadeInTime: Number,
      applyToChildren: Boolean,
    ): Unit

    @JsName("SetSoundClassDistanceScale")
    public fun setSoundClassDistanceScale(
      worldContextObject: UObject,
      soundClass: SoundClass,
      distanceAttenuationScale: Number,
      timeSec: Number,
    ): Unit

    @JsName("SetPlayerControllerID")
    public fun setPlayerControllerId(player: PlayerController, controllerId: Number): Unit

    @JsName("SetMaxAudioChannelsScaled")
    public fun setMaxAudioChannelsScaled(worldContextObject: UObject, maxChannelCountScale: Number):
        Unit

    @JsName("SetGlobalTimeDilation")
    public fun setGlobalTimeDilation(worldContextObject: UObject, timeDilation: Number): Unit

    @JsName("SetGlobalPitchModulation")
    public fun setGlobalPitchModulation(
      worldContextObject: UObject,
      pitchModulation: Number,
      timeSec: Number,
    ): Unit

    @JsName("SetGlobalListenerFocusParameters")
    public fun setGlobalListenerFocusParameters(
      worldContextObject: UObject,
      focusAzimuthScale: Number,
      nonFocusAzimuthScale: Number,
      focusDistanceScale: Number,
      nonFocusDistanceScale: Number,
      focusVolumeScale: Number,
      nonFocusVolumeScale: Number,
      focusPriorityScale: Number,
      nonFocusPriorityScale: Number,
    ): Unit

    @JsName("SetGamePaused")
    public fun setGamePaused(worldContextObject: UObject, paused: Boolean): Boolean

    @JsName("SetForceDisableSplitscreen")
    public fun setForceDisableSplitscreen(worldContextObject: UObject, disable: Boolean): Unit

    @JsName("SetEnableWorldRendering")
    public fun setEnableWorldRendering(worldContextObject: UObject, enable: Boolean): Unit

    @JsName("SetBaseSoundMix")
    public fun setBaseSoundMix(worldContextObject: UObject, inSoundMix: SoundMix): Unit

    @JsName("SaveGameToSlot")
    public fun saveGameToSlot(
      saveGameObject: SaveGame,
      slotName: String,
      userIndex: Number,
    ): Boolean

    @JsName("RemovePlayer")
    public fun removePlayer(player: PlayerController, destroyPawn: Boolean): Unit

    @JsName("RebaseZeroOriginOntoLocal")
    public fun rebaseZeroOriginOntoLocal(worldContextObject: UObject, worldLocation: Vector): Vector

    @JsName("RebaseLocalOriginOntoZero")
    public fun rebaseLocalOriginOntoZero(worldContextObject: UObject, worldLocation: Vector): Vector

    @JsName("PushSoundMixModifier")
    public fun pushSoundMixModifier(worldContextObject: UObject, inSoundMixModifier: SoundMix): Unit

    @JsName("ProjectWorldToScreen")
    public fun projectWorldToScreen(
      player: PlayerController,
      worldPosition: Vector,
      screenPosition: Vector2d,
      playerViewportRelative: Boolean,
    ): Object279

    @JsName("PrimeSound")
    public fun primeSound(inSound: SoundBase): Unit

    @JsName("PrimeAllSoundsInSoundClass")
    public fun primeAllSoundsInSoundClass(inSoundClass: SoundClass): Unit

    @JsName("PopSoundMixModifier")
    public fun popSoundMixModifier(worldContextObject: UObject, inSoundMixModifier: SoundMix): Unit

    @JsName("PlayWorldCameraShake")
    public fun playWorldCameraShake(
      worldContextObject: UObject,
      shake: UnrealEngineClass,
      epicenter: Vector,
      innerRadius: Number,
      outerRadius: Number,
      falloff: Number,
      orientShakeTowardsEpicenter: Boolean,
    ): Unit

    @JsName("PlaySoundAtLocation")
    public fun playSoundAtLocation(
      worldContextObject: UObject,
      sound: SoundBase,
      location: Vector,
      rotation: Rotator,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      concurrencySettings: SoundConcurrency,
      owningActor: Actor,
      initialParams: InitialActiveSoundParams,
    ): Unit

    @JsName("PlaySound2D")
    public fun playSound2d(
      worldContextObject: UObject,
      sound: SoundBase,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      concurrencySettings: SoundConcurrency,
      owningActor: Actor,
      isUiSound: Boolean,
    ): Unit

    @JsName("PlayDialogueAtLocation")
    public fun playDialogueAtLocation(
      worldContextObject: UObject,
      dialogue: DialogueWave,
      context: DialogueContext,
      location: Vector,
      rotation: Rotator,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
    ): Unit

    @JsName("PlayDialogue2D")
    public fun playDialogue2d(
      worldContextObject: UObject,
      dialogue: DialogueWave,
      context: DialogueContext,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
    ): Unit

    @JsName("ParseOption")
    public fun parseOption(options: String, key: String): String

    @JsName("OpenLevelBySoftObjectPtr")
    public fun openLevelBySoftObjectPtr(
      worldContextObject: UObject,
      level: World,
      absolute: Boolean,
      options: String,
    ): Unit

    @JsName("OpenLevel")
    public fun openLevel(
      worldContextObject: UObject,
      levelName: String,
      absolute: Boolean,
      options: String,
    ): Unit

    @JsName("MakeHitResult")
    public fun makeHitResult(
      blockingHit: Boolean,
      initialOverlap: Boolean,
      time: Number,
      distance: Number,
      location: Vector,
      impactPoint: Vector,
      normal: Vector,
      impactNormal: Vector,
      physMat: PhysicalMaterial,
      hitActor: Actor,
      hitComponent: PrimitiveComponent,
      hitBoneName: String,
      boneName: String,
      hitItem: Number,
      elementIndex: Number,
      faceIndex: Number,
      traceStart: Vector,
      traceEnd: Vector,
    ): HitResult

    @JsName("LoadStreamLevelBySoftObjectPtr")
    public fun loadStreamLevelBySoftObjectPtr(
      worldContextObject: UObject,
      level: World,
      makeVisibleAfterLoad: Boolean,
      shouldBlockOnLoad: Boolean,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("LoadStreamLevel")
    public fun loadStreamLevel(
      worldContextObject: UObject,
      levelName: String,
      makeVisibleAfterLoad: Boolean,
      shouldBlockOnLoad: Boolean,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("LoadGameFromSlot")
    public fun loadGameFromSlot(slotName: String, userIndex: Number): SaveGame

    @JsName("IsSplitscreenForceDisabled")
    public fun isSplitscreenForceDisabled(worldContextObject: UObject): Boolean

    @JsName("IsGamePaused")
    public fun isGamePaused(worldContextObject: UObject): Boolean

    @JsName("HasOption")
    public fun hasOption(options: String, inKey: String): Boolean

    @JsName("HasLaunchOption")
    public fun hasLaunchOption(optionToCheck: String): Boolean

    @JsName("GrassOverlappingSphereCount")
    public fun grassOverlappingSphereCount(
      worldContextObject: UObject,
      staticMesh: StaticMesh,
      centerPosition: Vector,
      radius: Number,
    ): Number

    @JsName("GetWorldOriginLocation")
    public fun getWorldOriginLocation(worldContextObject: UObject): IntVector

    @JsName("GetWorldDeltaSeconds")
    public fun getWorldDeltaSeconds(worldContextObject: UObject): Number

    @JsName("GetViewProjectionMatrix")
    public fun getViewProjectionMatrix(
      desiredView: MinimalViewInfo,
      viewMatrix: Matrix,
      projectionMatrix: Matrix,
      viewProjectionMatrix: Matrix,
    ): Object199

    @JsName("GetViewportMouseCaptureMode")
    public fun getViewportMouseCaptureMode(worldContextObject: UObject): String

    @JsName("GetUnpausedTimeSeconds")
    public fun getUnpausedTimeSeconds(worldContextObject: UObject): Number

    @JsName("GetTimeSeconds")
    public fun getTimeSeconds(worldContextObject: UObject): Number

    @JsName("GetSurfaceType")
    public fun getSurfaceType(hit: HitResult): String

    @JsName("GetStreamingLevel")
    public fun getStreamingLevel(worldContextObject: UObject, packageName: String): LevelStreaming

    @JsName("GetRealTimeSeconds")
    public fun getRealTimeSeconds(worldContextObject: UObject): Number

    @JsName("GetPlayerStateFromUniqueNetId")
    public fun getPlayerStateFromUniqueNetId(worldContextObject: UObject,
        uniqueId: UniqueNetIdRepl): PlayerState

    @JsName("GetPlayerState")
    public fun getPlayerState(worldContextObject: UObject, playerStateIndex: Number): PlayerState

    @JsName("GetPlayerPawn")
    public fun getPlayerPawn(worldContextObject: UObject, playerIndex: Number): Pawn

    @JsName("GetPlayerControllerID")
    public fun getPlayerControllerId(player: PlayerController): Number

    @JsName("GetPlayerControllerFromID")
    public fun getPlayerControllerFromId(worldContextObject: UObject, controllerId: Number):
        PlayerController

    @JsName("GetPlayerController")
    public fun getPlayerController(worldContextObject: UObject, playerIndex: Number):
        PlayerController

    @JsName("GetPlayerCharacter")
    public fun getPlayerCharacter(worldContextObject: UObject, playerIndex: Number): Character

    @JsName("GetPlayerCameraManager")
    public fun getPlayerCameraManager(worldContextObject: UObject, playerIndex: Number):
        PlayerCameraManager

    @JsName("GetPlatformName")
    public fun getPlatformName(): String

    @JsName("GetObjectClass")
    public fun getObjectClass(uObject: UObject): UnrealEngineClass

    @JsName("GetNumPlayerStates")
    public fun getNumPlayerStates(worldContextObject: UObject): Number

    @JsName("GetNumPlayerControllers")
    public fun getNumPlayerControllers(worldContextObject: UObject): Number

    @JsName("GetNumLocalPlayerControllers")
    public fun getNumLocalPlayerControllers(worldContextObject: UObject): Number

    @JsName("GetMaxAudioChannelCount")
    public fun getMaxAudioChannelCount(worldContextObject: UObject): Number

    @JsName("GetKeyValue")
    public fun getKeyValue(
      pair: String,
      key: String,
      value: String,
    ): Object733

    @JsName("GetIntOption")
    public fun getIntOption(
      options: String,
      key: String,
      defaultValue: Number,
    ): Number

    @JsName("GetGlobalTimeDilation")
    public fun getGlobalTimeDilation(worldContextObject: UObject): Number

    @JsName("GetGameState")
    public fun getGameState(worldContextObject: UObject): GameStateBase

    @JsName("GetGameMode")
    public fun getGameMode(worldContextObject: UObject): GameModeBase

    @JsName("GetGameInstance")
    public fun getGameInstance(worldContextObject: UObject): GameInstance

    @JsName("GetEnableWorldRendering")
    public fun getEnableWorldRendering(worldContextObject: UObject): Boolean

    @JsName("GetCurrentReverbEffect")
    public fun getCurrentReverbEffect(worldContextObject: UObject): ReverbEffect

    @JsName("GetCurrentLevelName")
    public fun getCurrentLevelName(worldContextObject: UObject, removePrefixString: Boolean): String

    @JsName("GetClosestListenerLocation")
    public fun getClosestListenerLocation(
      worldContextObject: UObject,
      location: Vector,
      maximumRange: Number,
      allowAttenuationOverride: Boolean,
      listenerPosition: Vector,
    ): Object352

    @JsName("GetAudioTimeSeconds")
    public fun getAudioTimeSeconds(worldContextObject: UObject): Number

    @JsName("GetAllActorsWithTag")
    public fun getAllActorsWithTag(
      worldContextObject: UObject,
      tag: String,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAllActorsWithInterface")
    public fun getAllActorsWithInterface(
      worldContextObject: UObject,
      `interface`: UnrealEngineClass,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAllActorsOfClassWithTag")
    public fun getAllActorsOfClassWithTag(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      tag: String,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAllActorsOfClass")
    public fun getAllActorsOfClass(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetActorOfClass")
    public fun getActorOfClass(worldContextObject: UObject, actorClass: UnrealEngineClass): Actor

    @JsName("GetActorArrayBounds")
    public fun getActorArrayBounds(
      actors: Array<Actor>,
      onlyCollidingComponents: Boolean,
      center: Vector,
      boxExtent: Vector,
    ): Object738

    @JsName("GetActorArrayAverageLocation")
    public fun getActorArrayAverageLocation(actors: Array<Actor>): Vector

    @JsName("GetAccurateRealTime")
    public fun getAccurateRealTime(seconds: Number, partialSeconds: Number): Object739

    @JsName("FlushLevelStreaming")
    public fun flushLevelStreaming(worldContextObject: UObject): Unit

    @JsName("FinishSpawningActor")
    public fun finishSpawningActor(actor: Actor, spawnTransform: Transform): Actor

    @JsName("FindNearestActor")
    public fun findNearestActor(
      origin: Vector,
      actorsToCheck: Array<Actor>,
      distance: Number,
    ): Object554

    @JsName("FindCollisionUV")
    public fun findCollisionUv(
      hit: HitResult,
      uvChannel: Number,
      UV: Vector2d,
    ): Object52

    @JsName("EnableLiveStreaming")
    public fun enableLiveStreaming(enable: Boolean): Unit

    @JsName("DoesSaveGameExist")
    public fun doesSaveGameExist(slotName: String, userIndex: Number): Boolean

    @JsName("DeprojectScreenToWorld")
    public fun deprojectScreenToWorld(
      player: PlayerController,
      screenPosition: Vector2d,
      worldPosition: Vector,
      worldDirection: Vector,
    ): Object278

    @JsName("DeleteGameInSlot")
    public fun deleteGameInSlot(slotName: String, userIndex: Number): Boolean

    @JsName("DeactivateReverbEffect")
    public fun deactivateReverbEffect(worldContextObject: UObject, tagName: String): Unit

    @JsName("CreateSound2D")
    public fun createSound2d(
      worldContextObject: UObject,
      sound: SoundBase,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      concurrencySettings: SoundConcurrency,
      persistAcrossLevelTransition: Boolean,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("CreateSaveGameObject")
    public fun createSaveGameObject(saveGameClass: UnrealEngineClass): SaveGame

    @JsName("CreatePlayer")
    public fun createPlayer(
      worldContextObject: UObject,
      controllerId: Number,
      spawnPlayerController: Boolean,
    ): PlayerController

    @JsName("ClearSoundMixModifiers")
    public fun clearSoundMixModifiers(worldContextObject: UObject): Unit

    @JsName("ClearSoundMixClassOverride")
    public fun clearSoundMixClassOverride(
      worldContextObject: UObject,
      inSoundMixModifier: SoundMix,
      inSoundClass: SoundClass,
      fadeOutTime: Number,
    ): Unit

    @JsName("CancelAsyncLoading")
    public fun cancelAsyncLoading(): Unit

    @JsName("BreakHitResult")
    public fun breakHitResult(
      hit: HitResult,
      blockingHit: Boolean,
      initialOverlap: Boolean,
      time: Number,
      distance: Number,
      location: Vector,
      impactPoint: Vector,
      normal: Vector,
      impactNormal: Vector,
      physMat: PhysicalMaterial,
      hitActor: Actor,
      hitComponent: PrimitiveComponent,
      hitBoneName: String,
      boneName: String,
      hitItem: Number,
      elementIndex: Number,
      faceIndex: Number,
      traceStart: Vector,
      traceEnd: Vector,
    ): Object51

    @JsName("BlueprintSuggestProjectileVelocity")
    public fun blueprintSuggestProjectileVelocity(
      worldContextObject: UObject,
      tossVelocity: Vector,
      startLocation: Vector,
      endLocation: Vector,
      launchSpeed: Number,
      overrideGravityZ: Number,
      traceOption: String,
      collisionRadius: Number,
      favorHighArc: Boolean,
      drawDebug: Boolean,
    ): Object347

    @JsName("Blueprint_PredictProjectilePath_ByTraceChannel")
    public fun blueprintPredictProjectilePathByTraceChannel(
      worldContextObject: UObject,
      outHit: HitResult,
      outPathPositions: Array<Vector>,
      outLastTraceDestination: Vector,
      startPos: Vector,
      launchVelocity: Vector,
      tracePath: Boolean,
      projectileRadius: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      drawDebugTime: Number,
      simFrequency: Number,
      maxSimTime: Number,
      overrideGravityZ: Number,
    ): Object345

    @JsName("Blueprint_PredictProjectilePath_ByObjectType")
    public fun blueprintPredictProjectilePathByObjectType(
      worldContextObject: UObject,
      outHit: HitResult,
      outPathPositions: Array<Vector>,
      outLastTraceDestination: Vector,
      startPos: Vector,
      launchVelocity: Vector,
      tracePath: Boolean,
      projectileRadius: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      drawDebugTime: Number,
      simFrequency: Number,
      maxSimTime: Number,
      overrideGravityZ: Number,
    ): Object345

    @JsName("Blueprint_PredictProjectilePath_Advanced")
    public fun blueprintPredictProjectilePathAdvanced(
      worldContextObject: UObject,
      predictParams: PredictProjectilePathParams,
      predictResult: PredictProjectilePathResult,
    ): Object344

    @JsName("BeginSpawningActorFromBlueprint")
    public fun beginSpawningActorFromBlueprint(
      worldContextObject: UObject,
      blueprint: Blueprint,
      spawnTransform: Transform,
      noCollisionFail: Boolean,
    ): Actor

    @JsName("BeginDeferredActorSpawnFromClass")
    public fun beginDeferredActorSpawnFromClass(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      spawnTransform: Transform,
      collisionHandlingOverride: String,
      owner: Actor,
    ): Actor

    @JsName("AreSubtitlesEnabled")
    public fun areSubtitlesEnabled(): Boolean

    @JsName("AreAnyListenersWithinRange")
    public fun areAnyListenersWithinRange(
      worldContextObject: UObject,
      location: Vector,
      maximumRange: Number,
    ): Boolean

    @JsName("ApplyRadialDamageWithFalloff")
    public fun applyRadialDamageWithFalloff(
      worldContextObject: UObject,
      baseDamage: Number,
      minimumDamage: Number,
      origin: Vector,
      damageInnerRadius: Number,
      damageOuterRadius: Number,
      damageFalloff: Number,
      damageTypeClass: UnrealEngineClass,
      ignoreActors: Array<Actor>,
      damageCauser: Actor,
      instigatedByController: Controller,
      damagePreventionChannel: String,
    ): Boolean

    @JsName("ApplyRadialDamage")
    public fun applyRadialDamage(
      worldContextObject: UObject,
      baseDamage: Number,
      origin: Vector,
      damageRadius: Number,
      damageTypeClass: UnrealEngineClass,
      ignoreActors: Array<Actor>,
      damageCauser: Actor,
      instigatedByController: Controller,
      doFullDamage: Boolean,
      damagePreventionChannel: String,
    ): Boolean

    @JsName("ApplyPointDamage")
    public fun applyPointDamage(
      damagedActor: Actor,
      baseDamage: Number,
      hitFromDirection: Vector,
      hitInfo: HitResult,
      eventInstigator: Controller,
      damageCauser: Actor,
      damageTypeClass: UnrealEngineClass,
    ): Number

    @JsName("ApplyDamage")
    public fun applyDamage(
      damagedActor: Actor,
      baseDamage: Number,
      eventInstigator: Controller,
      damageCauser: Actor,
      damageTypeClass: UnrealEngineClass,
    ): Number

    @JsName("AnnounceAccessibleString")
    public fun announceAccessibleString(announcementString: String): Unit

    @JsName("ActivateReverbEffect")
    public fun activateReverbEffect(
      worldContextObject: UObject,
      reverbEffect: ReverbEffect,
      tagName: String,
      priority: Number,
      volume: Number,
      fadeTime: Number,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): GameplayStatics

    @JsName("C")
    public fun copy(other: Any): GameplayStatics
  }
}

public open external class SpotLightComponent(
  outer: UObject,
) : PointLightComponent {
  @JsName("InnerConeAngle")
  public open var innerConeAngle: Number

  @JsName("OuterConeAngle")
  public open var outerConeAngle: Number

  @JsName("SetOuterConeAngle")
  public open fun setOuterConeAngle(newOuterConeAngle: Number): Unit

  @JsName("SetInnerConeAngle")
  public open fun setInnerConeAngle(newInnerConeAngle: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpotLightComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpotLightComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpotLightComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpotLightComponent

    @JsName("C")
    public fun copy(other: UObject): SpotLightComponent

    @JsName("C")
    public fun copy(other: Any): SpotLightComponent
  }
}

public open external class SpotLight(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Light {
  @JsName("SpotLightComponent")
  public open var spotLightComponent: SpotLightComponent

  @JsName("ArrowComponent")
  public open var arrowComponent: ArrowComponent

  @JsName("SetOuterConeAngle")
  public open fun setOuterConeAngle(newOuterConeAngle: Number): Unit

  @JsName("SetInnerConeAngle")
  public open fun setInnerConeAngle(newInnerConeAngle: Number): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpotLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpotLight

    @JsName("C")
    public fun copy(other: UObject): SpotLight

    @JsName("C")
    public fun copy(other: Any): SpotLight
  }
}

public open external class GeneratedMeshAreaLight(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : SpotLight {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeneratedMeshAreaLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeneratedMeshAreaLight

    @JsName("C")
    public fun copy(other: UObject): GeneratedMeshAreaLight

    @JsName("C")
    public fun copy(other: Any): GeneratedMeshAreaLight
  }
}

@JsName("HapticFeedbackEffect_Buffer")
public open external class HapticFeedbackEffectBuffer(
  outer: UObject,
) : HapticFeedbackEffectBase {
  @JsName("Amplitudes")
  public open var amplitudes: Array<Number>

  @JsName("SampleRate")
  public open var sampleRate: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HapticFeedbackEffectBuffer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HapticFeedbackEffectBuffer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HapticFeedbackEffectBuffer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HapticFeedbackEffectBuffer

    @JsName("C")
    public fun copy(other: UObject): HapticFeedbackEffectBuffer

    @JsName("C")
    public fun copy(other: Any): HapticFeedbackEffectBuffer
  }
}

@JsName("HapticFeedbackDetails_Curve")
public open external class HapticFeedbackDetailsCurve {
  @JsName("Frequency")
  public open var frequency: RuntimeFloatCurve

  @JsName("Amplitude")
  public open var amplitude: RuntimeFloatCurve

  public open fun clone(): HapticFeedbackDetailsCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): HapticFeedbackDetailsCurve

    @JsName("C")
    public fun copy(other: Any): HapticFeedbackDetailsCurve
  }
}

@JsName("HapticFeedbackEffect_Curve")
public open external class HapticFeedbackEffectCurve(
  outer: UObject,
) : HapticFeedbackEffectBase {
  @JsName("HapticDetails")
  public open var hapticDetails: HapticFeedbackDetailsCurve

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HapticFeedbackEffectCurve

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HapticFeedbackEffectCurve

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HapticFeedbackEffectCurve

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HapticFeedbackEffectCurve

    @JsName("C")
    public fun copy(other: UObject): HapticFeedbackEffectCurve

    @JsName("C")
    public fun copy(other: Any): HapticFeedbackEffectCurve
  }
}

@JsName("HapticFeedbackEffect_SoundWave")
public open external class HapticFeedbackEffectSoundWave(
  outer: UObject,
) : HapticFeedbackEffectBase {
  @JsName("SoundWave")
  public open var soundWave: SoundWave

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HapticFeedbackEffectSoundWave

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HapticFeedbackEffectSoundWave

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HapticFeedbackEffectSoundWave

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HapticFeedbackEffectSoundWave

    @JsName("C")
    public fun copy(other: UObject): HapticFeedbackEffectSoundWave

    @JsName("C")
    public fun copy(other: Any): HapticFeedbackEffectSoundWave
  }
}

public open external class HealthSnapshotBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HealthSnapshotBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HealthSnapshotBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HealthSnapshotBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HealthSnapshotBlueprintLibrary

    @JsName("StopPerformanceSnapshots")
    public fun stopPerformanceSnapshots(): Unit

    @JsName("StartPerformanceSnapshots")
    public fun startPerformanceSnapshots(): Unit

    @JsName("LogPerformanceSnapshot")
    public fun logPerformanceSnapshot(snapshotTitle: String, resetStats: Boolean): Unit

    @JsName("C")
    public fun copy(other: UObject): HealthSnapshotBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): HealthSnapshotBlueprintLibrary
  }
}

@JsName("ActorContainerID")
public open external class ActorContainerId {
  public open var ID: Any

  public open fun clone(): ActorContainerId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorContainerId

    @JsName("C")
    public fun copy(other: Any): ActorContainerId
  }
}

@JsName("HLODSubActor")
public open external class HlodSubActor {
  @JsName("ActorGuid")
  public open var actorGuid: Guid

  @JsName("ActorPackage")
  public open var actorPackage: String

  @JsName("ActorPath")
  public open var actorPath: String

  @JsName("ContainerID")
  public open var containerId: ActorContainerId

  @JsName("ContainerPackage")
  public open var containerPackage: String

  @JsName("ContainerTransform")
  public open var containerTransform: Transform

  public open fun clone(): HlodSubActor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): HlodSubActor

    @JsName("C")
    public fun copy(other: Any): HlodSubActor
  }
}

public open external class WorldPartitionRuntimeCell(
  outer: UObject,
) : UObject {
  @JsName("bIsAlwaysLoaded")
  public open var isAlwaysLoaded: Boolean

  @JsName("DataLayers")
  public open var dataLayers: Array<String>

  @JsName("Coords")
  public open var coords: IntVector

  @JsName("GridName")
  public open var gridName: String

  @JsName("DebugName")
  public open var debugName: String

  @JsName("Priority")
  public open var priority: Number

  @JsName("bClientOnlyVisible")
  public open var clientOnlyVisible: Boolean

  @JsName("bIsHLOD")
  public open var isHlod: Boolean

  @JsName("bBlockOnSlowLoading")
  public open var blockOnSlowLoading: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionRuntimeCell

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionRuntimeCell

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionRuntimeCell

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionRuntimeCell

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionRuntimeCell

    @JsName("C")
    public fun copy(other: Any): WorldPartitionRuntimeCell
  }
}

@JsName("WorldPartitionHLOD")
public open external class WorldPartitionHlod(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("HLODSubActors")
  public open var hlodSubActors: Array<HlodSubActor>

  @JsName("SubActorsHLODLayer")
  public open var subActorsHlodLayer: HlodLayer

  @JsName("GridIndexX")
  public open var gridIndexX: Any

  @JsName("GridIndexY")
  public open var gridIndexY: Any

  @JsName("GridIndexZ")
  public open var gridIndexZ: Any

  @JsName("HLODBounds")
  public open var hlodBounds: Box

  @JsName("MinVisibleDistance")
  public open var minVisibleDistance: Any

  @JsName("HLODHash")
  public open var hlodHash: Any

  @JsName("LODLevel")
  public open var lodLevel: Any

  @JsName("bRequireWarmup")
  public open var requireWarmup: Boolean

  @JsName("SourceCell")
  public open var sourceCell: WorldPartitionRuntimeCell

  @JsName("SourceCellName")
  public open var sourceCellName: String

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionHlod

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionHlod

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionHlod

    @JsName("C")
    public fun copy(other: Any): WorldPartitionHlod
  }
}

@JsName("HLODEngineSubsystem")
public open external class HlodEngineSubsystem(
  outer: UObject,
) : EngineSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodEngineSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodEngineSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodEngineSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodEngineSubsystem

    @JsName("C")
    public fun copy(other: UObject): HlodEngineSubsystem

    @JsName("C")
    public fun copy(other: Any): HlodEngineSubsystem
  }
}

@JsName("HLODProxyMesh")
public open external class HlodProxyMesh {
  @JsName("LODActor")
  public open var lodActor: Any

  @JsName("StaticMesh")
  public open var staticMesh: StaticMesh

  @JsName("Key")
  public open var key: String

  public open fun clone(): HlodProxyMesh

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): HlodProxyMesh

    @JsName("C")
    public fun copy(other: Any): HlodProxyMesh
  }
}

@JsName("HLODProxy")
public open external class HlodProxy(
  outer: UObject,
) : UObject {
  @JsName("OwningMap")
  public open var owningMap: World

  @JsName("ProxyMeshes")
  public open var proxyMeshes: Array<HlodProxyMesh>

  @JsName("HLODActors")
  public open var hlodActors: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodProxy

    @JsName("C")
    public fun copy(other: UObject): HlodProxy

    @JsName("C")
    public fun copy(other: Any): HlodProxy
  }
}

@JsName("HLODISMComponentDesc")
public open external class HlodismComponentDesc {
  @JsName("StaticMesh")
  public open var staticMesh: StaticMesh

  @JsName("Material")
  public open var material: MaterialInterface

  @JsName("Instances")
  public open var instances: Array<Transform>

  public open fun clone(): HlodismComponentDesc

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): HlodismComponentDesc

    @JsName("C")
    public fun copy(other: Any): HlodismComponentDesc
  }
}

@JsName("HLODProxyDesc")
public open external class HlodProxyDesc(
  outer: UObject,
) : UObject {
  @JsName("SubActors")
  public open var subActors: Array<String>

  @JsName("StaticMesh")
  public open var staticMesh: StaticMesh

  @JsName("ISMComponentsDesc")
  public open var ismComponentsDesc: Array<HlodismComponentDesc>

  @JsName("LODDrawDistance")
  public open var lodDrawDistance: Number

  @JsName("bOverrideMaterialMergeSettings")
  public open var overrideMaterialMergeSettings: Boolean

  @JsName("MaterialSettings")
  public open var materialSettings: MaterialProxySettings

  @JsName("bOverrideTransitionScreenSize")
  public open var overrideTransitionScreenSize: Boolean

  @JsName("TransitionScreenSize")
  public open var transitionScreenSize: Number

  @JsName("bOverrideScreenSize")
  public open var overrideScreenSize: Boolean

  @JsName("ScreenSize")
  public open var screenSize: Number

  @JsName("Key")
  public open var key: String

  @JsName("LODLevel")
  public open var lodLevel: Number

  @JsName("LODActorTag")
  public open var lodActorTag: String

  @JsName("Location")
  public open var location: Vector

  @JsName("HLODBakingTransform")
  public open var hlodBakingTransform: Transform

  @JsName("SubHLODDescs")
  public open var subHlodDescs: Array<HlodProxyDesc>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodProxyDesc

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodProxyDesc

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodProxyDesc

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodProxyDesc

    @JsName("C")
    public fun copy(other: UObject): HlodProxyDesc

    @JsName("C")
    public fun copy(other: Any): HlodProxyDesc
  }
}

@JsName("HLODSubsystem")
public open external class HlodSubsystem(
  outer: UObject,
) : WorldSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodSubsystem

    @JsName("C")
    public fun copy(other: UObject): HlodSubsystem

    @JsName("C")
    public fun copy(other: Any): HlodSubsystem
  }
}

@JsName("EAnimAssetCurveFlags")
public external object AnimAssetCurveFlags {
  @JsName("AACF_NONE")
  public var NONE: String

  @JsName("AACF_DriveMorphTarget_DEPRECATED")
  public var DriveMorphTargetDeprecated: String

  @JsName("AACF_DriveAttribute_DEPRECATED")
  public var DriveAttributeDeprecated: String

  @JsName("AACF_Editable")
  public var Editable: String

  @JsName("AACF_DriveMaterial_DEPRECATED")
  public var DriveMaterialDeprecated: String

  @JsName("AACF_Metadata")
  public var Metadata: String

  @JsName("AACF_DriveTrack")
  public var DriveTrack: String

  @JsName("AACF_Disabled")
  public var Disabled: String

  @JsName("AACF_MAX")
  public var Max: String
}

public open external class AnimationDataController(
  outer: UObject,
) : Interface {
  @JsName("UpdateCurveNamesFromSkeleton")
  public open fun updateCurveNamesFromSkeleton(
    skeleton: Skeleton,
    supportedCurveType: String,
    shouldTransact: Boolean,
  ): Unit

  @JsName("SetTransformCurveKeys")
  public open fun setTransformCurveKeys(
    curveId: AnimationCurveIdentifier,
    transformValues: Array<Transform>,
    timeKeys: Array<Number>,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("SetTransformCurveKey")
  public open fun setTransformCurveKey(
    curveId: AnimationCurveIdentifier,
    time: Number,
    value: Transform,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("SetPlayLength")
  public open fun setPlayLength(length: Number, shouldTransact: Boolean): Unit

  @JsName("SetModel")
  public open fun setModel(inModel: AnimDataModel): Unit

  @JsName("SetFrameRate")
  public open fun setFrameRate(frameRate: FrameRate, shouldTransact: Boolean): Unit

  @JsName("SetCurveKeys")
  public open fun setCurveKeys(
    curveId: AnimationCurveIdentifier,
    curveKeys: Array<RichCurveKey>,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("SetCurveKey")
  public open fun setCurveKey(
    curveId: AnimationCurveIdentifier,
    key: RichCurveKey,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("SetCurveFlags")
  public open fun setCurveFlags(
    curveId: AnimationCurveIdentifier,
    flags: Number,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("SetCurveFlag")
  public open fun setCurveFlag(
    curveId: AnimationCurveIdentifier,
    flag: String,
    state: Boolean,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("SetCurveColor")
  public open fun setCurveColor(
    curveId: AnimationCurveIdentifier,
    color: LinearColor,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("SetBoneTrackKeys")
  public open fun setBoneTrackKeys(
    boneName: String,
    positionalKeys: Array<Vector>,
    rotationalKeys: Array<Quat>,
    scalingKeys: Array<Vector>,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("ScaleCurve")
  public open fun scaleCurve(
    curveId: AnimationCurveIdentifier,
    origin: Number,
    factor: Number,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("ResizePlayLength")
  public open fun resizePlayLength(
    newLength: Number,
    t0: Number,
    t1: Number,
    shouldTransact: Boolean,
  ): Unit

  @JsName("Resize")
  public open fun resize(
    length: Number,
    t0: Number,
    t1: Number,
    shouldTransact: Boolean,
  ): Unit

  @JsName("RenameCurve")
  public open fun renameCurve(
    curveToRenameId: AnimationCurveIdentifier,
    newCurveId: AnimationCurveIdentifier,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("RemoveTransformCurveKey")
  public open fun removeTransformCurveKey(
    curveId: AnimationCurveIdentifier,
    time: Number,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("RemoveCurveKey")
  public open fun removeCurveKey(
    curveId: AnimationCurveIdentifier,
    time: Number,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("RemoveCurve")
  public open fun removeCurve(curveId: AnimationCurveIdentifier, shouldTransact: Boolean): Boolean

  @JsName("RemoveBoneTrack")
  public open fun removeBoneTrack(boneName: String, shouldTransact: Boolean): Boolean

  @JsName("RemoveAttributeKey")
  public open fun removeAttributeKey(
    attributeIdentifier: AnimationAttributeIdentifier,
    time: Number,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("RemoveAttribute")
  public open fun removeAttribute(attributeIdentifier: AnimationAttributeIdentifier,
      shouldTransact: Boolean): Boolean

  @JsName("RemoveAllCurvesOfType")
  public open fun removeAllCurvesOfType(supportedCurveType: String, shouldTransact: Boolean): Unit

  @JsName("RemoveAllBoneTracks")
  public open fun removeAllBoneTracks(shouldTransact: Boolean): Unit

  @JsName("RemoveAllAttributesForBone")
  public open fun removeAllAttributesForBone(boneName: String, shouldTransact: Boolean): Number

  @JsName("RemoveAllAttributes")
  public open fun removeAllAttributes(shouldTransact: Boolean): Number

  @JsName("OpenBracket")
  public open fun openBracket(inTitle: String, shouldTransact: Boolean): Unit

  @JsName("InsertBoneTrack")
  public open fun insertBoneTrack(
    boneName: String,
    desiredIndex: Number,
    shouldTransact: Boolean,
  ): Number

  @JsName("GetModel")
  public open fun getModel(): AnimDataModel

  @JsName("FindOrAddCurveNamesOnSkeleton")
  public open fun findOrAddCurveNamesOnSkeleton(
    skeleton: Skeleton,
    supportedCurveType: String,
    shouldTransact: Boolean,
  ): Unit

  @JsName("DuplicateCurve")
  public open fun duplicateCurve(
    copyCurveId: AnimationCurveIdentifier,
    newCurveId: AnimationCurveIdentifier,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("DuplicateAttribute")
  public open fun duplicateAttribute(
    attributeIdentifier: AnimationAttributeIdentifier,
    newAttributeIdentifier: AnimationAttributeIdentifier,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("CloseBracket")
  public open fun closeBracket(shouldTransact: Boolean): Unit

  @JsName("AddCurve")
  public open fun addCurve(
    curveId: AnimationCurveIdentifier,
    curveFlags: Number,
    shouldTransact: Boolean,
  ): Boolean

  @JsName("AddBoneTrack")
  public open fun addBoneTrack(boneName: String, shouldTransact: Boolean): Number

  @JsName("AddAttribute")
  public open fun addAttribute(attributeIdentifier: AnimationAttributeIdentifier,
      shouldTransact: Boolean): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationDataController

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationDataController

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationDataController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationDataController

    @JsName("C")
    public fun copy(other: UObject): AnimationDataController

    @JsName("C")
    public fun copy(other: Any): AnimationDataController
  }
}

public open external class ImportanceSamplingLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImportanceSamplingLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImportanceSamplingLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImportanceSamplingLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImportanceSamplingLibrary

    @JsName("RandomSobolFloat")
    public fun randomSobolFloat(
      index: Number,
      dimension: Number,
      seed: Number,
    ): Number

    @JsName("RandomSobolCell3D")
    public fun randomSobolCell3d(
      index: Number,
      numCells: Number,
      cell: Vector,
      seed: Vector,
    ): Vector

    @JsName("RandomSobolCell2D")
    public fun randomSobolCell2d(
      index: Number,
      numCells: Number,
      cell: Vector2d,
      seed: Vector2d,
    ): Vector2d

    @JsName("NextSobolFloat")
    public fun nextSobolFloat(
      index: Number,
      dimension: Number,
      previousValue: Number,
    ): Number

    @JsName("NextSobolCell3D")
    public fun nextSobolCell3d(
      index: Number,
      numCells: Number,
      previousValue: Vector,
    ): Vector

    @JsName("NextSobolCell2D")
    public fun nextSobolCell2d(
      index: Number,
      numCells: Number,
      previousValue: Vector2d,
    ): Vector2d

    @JsName("MakeImportanceTexture")
    public fun makeImportanceTexture(texture: Texture2d, weightingFunc: String): ImportanceTexture

    @JsName("ImportanceSample")
    public fun importanceSample(
      texture: ImportanceTexture,
      rand: Vector2d,
      samples: Number,
      intensity: Number,
      samplePosition: Vector2d,
      sampleColor: LinearColor,
      sampleIntensity: Number,
      sampleSize: Number,
    ): Object25

    @JsName("BreakImportanceTexture")
    public fun breakImportanceTexture(
      importanceTexture: ImportanceTexture,
      texture: Texture2d,
      weightingFunc: String,
    ): Object24

    @JsName("C")
    public fun copy(other: UObject): ImportanceSamplingLibrary

    @JsName("C")
    public fun copy(other: Any): ImportanceSamplingLibrary
  }
}

public open external class ImportantToggleSettingInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImportantToggleSettingInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImportantToggleSettingInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImportantToggleSettingInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImportantToggleSettingInterface

    @JsName("C")
    public fun copy(other: UObject): ImportantToggleSettingInterface

    @JsName("C")
    public fun copy(other: Any): ImportantToggleSettingInterface
  }
}

public open external class InGameAdManager(
  outer: UObject,
) : PlatformInterfaceBase {
  @JsName("bShouldPauseWhileAdOpen")
  public open var shouldPauseWhileAdOpen: Boolean

  @JsName("ClickedBannerDelegates")
  public open var clickedBannerDelegates: Array<UnrealEngineDelegate<() -> Unit>>

  @JsName("ClosedAdDelegates")
  public open var closedAdDelegates: Array<UnrealEngineDelegate<() -> Unit>>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InGameAdManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InGameAdManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InGameAdManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InGameAdManager

    @JsName("C")
    public fun copy(other: UObject): InGameAdManager

    @JsName("C")
    public fun copy(other: Any): InGameAdManager
  }
}

public open external class InputDelegateBinding(
  outer: UObject,
) : DynamicBlueprintBinding {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): InputDelegateBinding

    @JsName("C")
    public fun copy(other: Any): InputDelegateBinding
  }
}

public open external class BlueprintInputDelegateBinding {
  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  public open fun clone(): BlueprintInputDelegateBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintInputDelegateBinding

    @JsName("C")
    public fun copy(other: Any): BlueprintInputDelegateBinding
  }
}

public open external class BlueprintInputActionDelegateBinding : BlueprintInputDelegateBinding {
  @JsName("InputActionName")
  public open var inputActionName: String

  @JsName("InputKeyEvent")
  public open var inputKeyEvent: String

  @JsName("FunctionNameToBind")
  public open var functionNameToBind: String

  public override fun clone(): BlueprintInputActionDelegateBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintInputActionDelegateBinding

    @JsName("C")
    public fun copy(other: Any): BlueprintInputActionDelegateBinding
  }
}

public open external class InputActionDelegateBinding(
  outer: UObject,
) : InputDelegateBinding {
  @JsName("InputActionDelegateBindings")
  public open var inputActionDelegateBindings: Array<BlueprintInputActionDelegateBinding>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputActionDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputActionDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputActionDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputActionDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): InputActionDelegateBinding

    @JsName("C")
    public fun copy(other: Any): InputActionDelegateBinding
  }
}

public open external class BlueprintInputAxisDelegateBinding : BlueprintInputDelegateBinding {
  @JsName("InputAxisName")
  public open var inputAxisName: String

  @JsName("FunctionNameToBind")
  public open var functionNameToBind: String

  public override fun clone(): BlueprintInputAxisDelegateBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintInputAxisDelegateBinding

    @JsName("C")
    public fun copy(other: Any): BlueprintInputAxisDelegateBinding
  }
}

public open external class InputAxisDelegateBinding(
  outer: UObject,
) : InputDelegateBinding {
  @JsName("InputAxisDelegateBindings")
  public open var inputAxisDelegateBindings: Array<BlueprintInputAxisDelegateBinding>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputAxisDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputAxisDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputAxisDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputAxisDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): InputAxisDelegateBinding

    @JsName("C")
    public fun copy(other: Any): InputAxisDelegateBinding
  }
}

public open external class BlueprintInputAxisKeyDelegateBinding : BlueprintInputDelegateBinding {
  @JsName("AxisKey")
  public open var axisKey: Key

  @JsName("FunctionNameToBind")
  public open var functionNameToBind: String

  public override fun clone(): BlueprintInputAxisKeyDelegateBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintInputAxisKeyDelegateBinding

    @JsName("C")
    public fun copy(other: Any): BlueprintInputAxisKeyDelegateBinding
  }
}

public open external class InputAxisKeyDelegateBinding(
  outer: UObject,
) : InputDelegateBinding {
  @JsName("InputAxisKeyDelegateBindings")
  public open var inputAxisKeyDelegateBindings: Array<BlueprintInputAxisKeyDelegateBinding>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputAxisKeyDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputAxisKeyDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputAxisKeyDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputAxisKeyDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): InputAxisKeyDelegateBinding

    @JsName("C")
    public fun copy(other: Any): InputAxisKeyDelegateBinding
  }
}

public open external class BlueprintInputKeyDelegateBinding : BlueprintInputDelegateBinding {
  @JsName("InputChord")
  public open var inputChord: InputChord

  @JsName("InputKeyEvent")
  public open var inputKeyEvent: String

  @JsName("FunctionNameToBind")
  public open var functionNameToBind: String

  public override fun clone(): BlueprintInputKeyDelegateBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintInputKeyDelegateBinding

    @JsName("C")
    public fun copy(other: Any): BlueprintInputKeyDelegateBinding
  }
}

public open external class InputKeyDelegateBinding(
  outer: UObject,
) : InputDelegateBinding {
  @JsName("InputKeyDelegateBindings")
  public open var inputKeyDelegateBindings: Array<BlueprintInputKeyDelegateBinding>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputKeyDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputKeyDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputKeyDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputKeyDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): InputKeyDelegateBinding

    @JsName("C")
    public fun copy(other: Any): InputKeyDelegateBinding
  }
}

public open external class InputAxisProperties {
  @JsName("DeadZone")
  public open var deadZone: Number

  @JsName("Sensitivity")
  public open var sensitivity: Number

  @JsName("Exponent")
  public open var exponent: Number

  @JsName("bInvert")
  public open var invert: Boolean

  public open fun clone(): InputAxisProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputAxisProperties

    @JsName("C")
    public fun copy(other: Any): InputAxisProperties
  }
}

public open external class InputAxisConfigEntry {
  @JsName("AxisKeyName")
  public open var axisKeyName: String

  @JsName("AxisProperties")
  public open var axisProperties: InputAxisProperties

  public open fun clone(): InputAxisConfigEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputAxisConfigEntry

    @JsName("C")
    public fun copy(other: Any): InputAxisConfigEntry
  }
}

public open external class InputActionKeyMapping {
  @JsName("ActionName")
  public open var actionName: String

  @JsName("bShift")
  public open var shift: Boolean

  @JsName("bCtrl")
  public open var ctrl: Boolean

  @JsName("bAlt")
  public open var alt: Boolean

  @JsName("bCmd")
  public open var cmd: Boolean

  @JsName("Key")
  public open var key: Key

  public open fun clone(): InputActionKeyMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputActionKeyMapping

    @JsName("C")
    public fun copy(other: Any): InputActionKeyMapping
  }
}

public open external class InputAxisKeyMapping {
  @JsName("AxisName")
  public open var axisName: String

  @JsName("Scale")
  public open var scale: Number

  @JsName("Key")
  public open var key: Key

  public open fun clone(): InputAxisKeyMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputAxisKeyMapping

    @JsName("C")
    public fun copy(other: Any): InputAxisKeyMapping
  }
}

public open external class InputActionSpeechMapping {
  @JsName("ActionName")
  public open var actionName: String

  @JsName("SpeechKeyword")
  public open var speechKeyword: String

  public open fun clone(): InputActionSpeechMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputActionSpeechMapping

    @JsName("C")
    public fun copy(other: Any): InputActionSpeechMapping
  }
}

@JsName("T$742")
public external interface AxisNamesProvider {
  @JsName("AxisNames")
  public var axisNames: Array<String>
}

@JsName("T$743")
public external interface InputAxisKeyMappingOutProvider {
  @JsName("OutMappings")
  public var outMappings: Array<InputAxisKeyMapping>
}

@JsName("T$744")
public external interface ActionNamesProvider {
  @JsName("ActionNames")
  public var actionNames: Array<String>
}

@JsName("T$745")
public external interface InputActionKeyMappingOutProvider {
  @JsName("OutMappings")
  public var outMappings: Array<InputActionKeyMapping>
}

public open external class InputSettings(
  outer: UObject,
) : UObject {
  @JsName("AxisConfig")
  public open var axisConfig: Array<InputAxisConfigEntry>

  @JsName("bAltEnterTogglesFullscreen")
  public open var altEnterTogglesFullscreen: Boolean

  @JsName("bF11TogglesFullscreen")
  public open var f11TogglesFullscreen: Boolean

  @JsName("bUseMouseForTouch")
  public open var useMouseForTouch: Boolean

  @JsName("bEnableMouseSmoothing")
  public open var enableMouseSmoothing: Boolean

  @JsName("bEnableFOVScaling")
  public open var enableFovScaling: Boolean

  @JsName("bCaptureMouseOnLaunch")
  public open var captureMouseOnLaunch: Boolean

  @JsName("bDefaultViewportMouseLock")
  public open var defaultViewportMouseLock: Boolean

  @JsName("bEnableLegacyInputScales")
  public open var enableLegacyInputScales: Boolean

  @JsName("bAlwaysShowTouchInterface")
  public open var alwaysShowTouchInterface: Boolean

  @JsName("bShowConsoleOnFourFingerTap")
  public open var showConsoleOnFourFingerTap: Boolean

  @JsName("bEnableGestureRecognizer")
  public open var enableGestureRecognizer: Boolean

  @JsName("bUseAutocorrect")
  public open var useAutocorrect: Boolean

  @JsName("ExcludedAutocorrectOS")
  public open var excludedAutocorrectOs: Array<String>

  @JsName("ExcludedAutocorrectCultures")
  public open var excludedAutocorrectCultures: Array<String>

  @JsName("ExcludedAutocorrectDeviceModels")
  public open var excludedAutocorrectDeviceModels: Array<String>

  @JsName("DefaultViewportMouseCaptureMode")
  public open var defaultViewportMouseCaptureMode: String

  @JsName("DefaultViewportMouseLockMode")
  public open var defaultViewportMouseLockMode: String

  @JsName("FOVScale")
  public open var fovScale: Number

  @JsName("DoubleClickTime")
  public open var doubleClickTime: Number

  @JsName("ActionMappings")
  public open var actionMappings: Array<InputActionKeyMapping>

  @JsName("AxisMappings")
  public open var axisMappings: Array<InputAxisKeyMapping>

  @JsName("SpeechMappings")
  public open var speechMappings: Array<InputActionSpeechMapping>

  @JsName("DefaultPlayerInputClass")
  public open var defaultPlayerInputClass: Class

  @JsName("DefaultInputComponentClass")
  public open var defaultInputComponentClass: Class

  @JsName("DefaultTouchInterface")
  public open var defaultTouchInterface: SoftObjectPath

  @JsName("ConsoleKey")
  public open var consoleKey: Key

  @JsName("ConsoleKeys")
  public open var consoleKeys: Array<Key>

  @JsName("SaveKeyMappings")
  public open fun saveKeyMappings(): Unit

  @JsName("RemoveAxisMapping")
  public open fun removeAxisMapping(keyMapping: InputAxisKeyMapping, forceRebuildKeymaps: Boolean):
      Unit

  @JsName("RemoveActionMapping")
  public open fun removeActionMapping(keyMapping: InputActionKeyMapping,
      forceRebuildKeymaps: Boolean): Unit

  @JsName("GetAxisNames")
  public open fun getAxisNames(axisNames: Array<String>): AxisNamesProvider

  @JsName("GetAxisMappingByName")
  public open fun getAxisMappingByName(inAxisName: String, outMappings: Array<InputAxisKeyMapping>):
      InputAxisKeyMappingOutProvider

  @JsName("GetActionNames")
  public open fun getActionNames(actionNames: Array<String>): ActionNamesProvider

  @JsName("GetActionMappingByName")
  public open fun getActionMappingByName(inActionName: String,
      outMappings: Array<InputActionKeyMapping>): InputActionKeyMappingOutProvider

  @JsName("ForceRebuildKeymaps")
  public open fun forceRebuildKeymaps(): Unit

  @JsName("AddAxisMapping")
  public open fun addAxisMapping(keyMapping: InputAxisKeyMapping, forceRebuildKeymaps: Boolean):
      Unit

  @JsName("AddActionMapping")
  public open fun addActionMapping(keyMapping: InputActionKeyMapping, forceRebuildKeymaps: Boolean):
      Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputSettings

    @JsName("GetInputSettings")
    public fun getInputSettings(): InputSettings

    @JsName("C")
    public fun copy(other: UObject): InputSettings

    @JsName("C")
    public fun copy(other: Any): InputSettings
  }
}

public open external class BlueprintInputTouchDelegateBinding : BlueprintInputDelegateBinding {
  @JsName("InputKeyEvent")
  public open var inputKeyEvent: String

  @JsName("FunctionNameToBind")
  public open var functionNameToBind: String

  public override fun clone(): BlueprintInputTouchDelegateBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintInputTouchDelegateBinding

    @JsName("C")
    public fun copy(other: Any): BlueprintInputTouchDelegateBinding
  }
}

public open external class InputTouchDelegateBinding(
  outer: UObject,
) : InputDelegateBinding {
  @JsName("InputTouchDelegateBindings")
  public open var inputTouchDelegateBindings: Array<BlueprintInputTouchDelegateBinding>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputTouchDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputTouchDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputTouchDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputTouchDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): InputTouchDelegateBinding

    @JsName("C")
    public fun copy(other: Any): InputTouchDelegateBinding
  }
}

public open external class InputVectorAxisDelegateBinding(
  outer: UObject,
) : InputAxisKeyDelegateBinding {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputVectorAxisDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputVectorAxisDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputVectorAxisDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputVectorAxisDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): InputVectorAxisDelegateBinding

    @JsName("C")
    public fun copy(other: Any): InputVectorAxisDelegateBinding
  }
}

public open external class InstancedPlacementPartitionActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : IsmPartitionActor {
  @JsName("PlacementGridGuid")
  public open var placementGridGuid: Guid

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InstancedPlacementPartitionActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InstancedPlacementPartitionActor

    @JsName("C")
    public fun copy(other: UObject): InstancedPlacementPartitionActor

    @JsName("C")
    public fun copy(other: Any): InstancedPlacementPartitionActor
  }
}

@JsName("Interface_ActorSubobject")
public open external class InterfaceActorSubobject(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterfaceActorSubobject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterfaceActorSubobject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterfaceActorSubobject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterfaceActorSubobject

    @JsName("C")
    public fun copy(other: UObject): InterfaceActorSubobject

    @JsName("C")
    public fun copy(other: Any): InterfaceActorSubobject
  }
}

@JsName("Interface_AssetUserData")
public open external class InterfaceAssetUserData(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterfaceAssetUserData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterfaceAssetUserData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterfaceAssetUserData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterfaceAssetUserData

    @JsName("C")
    public fun copy(other: UObject): InterfaceAssetUserData

    @JsName("C")
    public fun copy(other: Any): InterfaceAssetUserData
  }
}

@JsName("Interface_AsyncCompilation")
public open external class InterfaceAsyncCompilation(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterfaceAsyncCompilation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterfaceAsyncCompilation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterfaceAsyncCompilation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterfaceAsyncCompilation

    @JsName("C")
    public fun copy(other: UObject): InterfaceAsyncCompilation

    @JsName("C")
    public fun copy(other: Any): InterfaceAsyncCompilation
  }
}

public open external class BoneReferenceSkeletonProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoneReferenceSkeletonProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoneReferenceSkeletonProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoneReferenceSkeletonProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoneReferenceSkeletonProvider

    @JsName("C")
    public fun copy(other: UObject): BoneReferenceSkeletonProvider

    @JsName("C")
    public fun copy(other: Any): BoneReferenceSkeletonProvider
  }
}

@JsName("Interface_CollisionDataProvider")
public open external class InterfaceCollisionDataProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterfaceCollisionDataProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterfaceCollisionDataProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterfaceCollisionDataProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterfaceCollisionDataProvider

    @JsName("C")
    public fun copy(other: UObject): InterfaceCollisionDataProvider

    @JsName("C")
    public fun copy(other: Any): InterfaceCollisionDataProvider
  }
}

@JsName("Interface_PostProcessVolume")
public open external class InterfacePostProcessVolume(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterfacePostProcessVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterfacePostProcessVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterfacePostProcessVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterfacePostProcessVolume

    @JsName("C")
    public fun copy(other: UObject): InterfacePostProcessVolume

    @JsName("C")
    public fun copy(other: Any): InterfacePostProcessVolume
  }
}

@JsName("Interface_PreviewMeshProvider")
public open external class InterfacePreviewMeshProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterfacePreviewMeshProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterfacePreviewMeshProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterfacePreviewMeshProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterfacePreviewMeshProvider

    @JsName("C")
    public fun copy(other: UObject): InterfacePreviewMeshProvider

    @JsName("C")
    public fun copy(other: Any): InterfacePreviewMeshProvider
  }
}

@JsName("InterpFilter_Classes")
public open external class InterpFilterClasses(
  outer: UObject,
) : InterpFilter {
  @JsName("ClassToFilterBy")
  public open var classToFilterBy: UnrealEngineClass

  @JsName("TrackClasses")
  public open var trackClasses: Array<UnrealEngineClass>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpFilterClasses

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpFilterClasses

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpFilterClasses

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpFilterClasses

    @JsName("C")
    public fun copy(other: UObject): InterpFilterClasses

    @JsName("C")
    public fun copy(other: Any): InterpFilterClasses
  }
}

@JsName("InterpFilter_Custom")
public open external class InterpFilterCustom(
  outer: UObject,
) : InterpFilter {
  @JsName("GroupsToInclude")
  public open var groupsToInclude: Array<InterpGroup>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpFilterCustom

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpFilterCustom

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpFilterCustom

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpFilterCustom

    @JsName("C")
    public fun copy(other: UObject): InterpFilterCustom

    @JsName("C")
    public fun copy(other: Any): InterpFilterCustom
  }
}

public open external class CameraPreviewInfo {
  @JsName("PawnClass")
  public open var pawnClass: UnrealEngineClass

  @JsName("AnimSeq")
  public open var animSeq: AnimSequence

  @JsName("Location")
  public open var location: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("PawnInst")
  public open var pawnInst: Pawn

  public open fun clone(): CameraPreviewInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraPreviewInfo

    @JsName("C")
    public fun copy(other: Any): CameraPreviewInfo
  }
}

public open external class InterpGroupCamera(
  outer: UObject,
) : InterpGroup {
  @JsName("CameraAnimInst")
  public open var cameraAnimInst: CameraAnim

  @JsName("Target")
  public open var target: CameraPreviewInfo

  @JsName("CompressTolerance")
  public open var compressTolerance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpGroupCamera

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpGroupCamera

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpGroupCamera

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpGroupCamera

    @JsName("C")
    public fun copy(other: UObject): InterpGroupCamera

    @JsName("C")
    public fun copy(other: Any): InterpGroupCamera
  }
}

public open external class InterpGroupInstCamera(
  outer: UObject,
) : InterpGroupInst {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpGroupInstCamera

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpGroupInstCamera

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpGroupInstCamera

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpGroupInstCamera

    @JsName("C")
    public fun copy(other: UObject): InterpGroupInstCamera

    @JsName("C")
    public fun copy(other: Any): InterpGroupInstCamera
  }
}

public open external class InterpGroupInstDirector(
  outer: UObject,
) : InterpGroupInst {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpGroupInstDirector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpGroupInstDirector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpGroupInstDirector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpGroupInstDirector

    @JsName("C")
    public fun copy(other: UObject): InterpGroupInstDirector

    @JsName("C")
    public fun copy(other: Any): InterpGroupInstDirector
  }
}

@JsName("EInterpToBehaviourType")
public external object InterpToBehaviourType {
  public var OneShot: String

  @JsName("OneShot_Reverse")
  public var OneShotReverse: String

  @JsName("Loop_Reset")
  public var LoopReset: String

  public var PingPong: String

  @JsName("EInterpToBehaviourType_MAX")
  public var Max: String
}

public open external class InterpControlPoint {
  @JsName("PositionControlPoint")
  public open var positionControlPoint: Vector

  @JsName("bPositionIsRelative")
  public open var positionIsRelative: Boolean

  public open fun clone(): InterpControlPoint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpControlPoint

    @JsName("C")
    public fun copy(other: Any): InterpControlPoint
  }
}

public open external class InterpToMovementComponent(
  outer: UObject,
) : MovementComponent {
  @JsName("Duration")
  public open var duration: Number

  @JsName("bPauseOnImpact")
  public open var pauseOnImpact: Boolean

  @JsName("bSweep")
  public open var sweep: Boolean

  @JsName("TeleportType")
  public open var teleportType: String

  @JsName("BehaviourType")
  public open var behaviourType: String

  @JsName("bCheckIfStillInWorld")
  public open var checkIfStillInWorld: Boolean

  @JsName("bForceSubStepping")
  public open var forceSubStepping: Boolean

  @JsName("OnInterpToReverse")
  public open var onInterpToReverse: UnrealEngineMulticastDelegate<(ImpactResult: HitResult,
      Time: Number) -> Unit>

  @JsName("OnInterpToStop")
  public open var onInterpToStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult,
      Time: Number) -> Unit>

  @JsName("OnWaitBeginDelegate")
  public open var onWaitBeginDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult,
      Time: Number) -> Unit>

  @JsName("OnWaitEndDelegate")
  public open var onWaitEndDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult,
      Time: Number) -> Unit>

  @JsName("OnResetDelegate")
  public open var onResetDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult,
      Time: Number) -> Unit>

  @JsName("MaxSimulationTimeStep")
  public open var maxSimulationTimeStep: Number

  @JsName("MaxSimulationIterations")
  public open var maxSimulationIterations: Number

  @JsName("ControlPoints")
  public open var controlPoints: Array<InterpControlPoint>

  @JsName("StopSimulating")
  public open fun stopSimulating(hitResult: HitResult): Unit

  @JsName("RestartMovement")
  public open fun restartMovement(initialDirection: Number): Unit

  @JsName("ResetControlPoints")
  public open fun resetControlPoints(): Unit

  @JsName("FinaliseControlPoints")
  public open fun finaliseControlPoints(): Unit

  @JsName("AddControlPointPosition")
  public open fun addControlPointPosition(pos: Vector, positionIsRelative: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpToMovementComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpToMovementComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpToMovementComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpToMovementComponent

    @JsName("C")
    public fun copy(other: UObject): InterpToMovementComponent

    @JsName("C")
    public fun copy(other: Any): InterpToMovementComponent
  }
}

public open external class InterpTrackFloatBase(
  outer: UObject,
) : InterpTrack {
  @JsName("FloatTrack")
  public open var floatTrack: InterpCurveFloat

  @JsName("CurveTension")
  public open var curveTension: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackFloatBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackFloatBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackFloatBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackFloatBase

    @JsName("C")
    public fun copy(other: UObject): InterpTrackFloatBase

    @JsName("C")
    public fun copy(other: Any): InterpTrackFloatBase
  }
}

public open external class AnimControlTrackKey {
  @JsName("StartTime")
  public open var startTime: Number

  @JsName("AnimSeq")
  public open var animSeq: AnimSequence

  @JsName("AnimStartOffset")
  public open var animStartOffset: Number

  @JsName("AnimEndOffset")
  public open var animEndOffset: Number

  @JsName("AnimPlayRate")
  public open var animPlayRate: Number

  @JsName("bLooping")
  public open var looping: Boolean

  @JsName("bReverse")
  public open var reverse: Boolean

  public open fun clone(): AnimControlTrackKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimControlTrackKey

    @JsName("C")
    public fun copy(other: Any): AnimControlTrackKey
  }
}

public open external class InterpTrackAnimControl(
  outer: UObject,
) : InterpTrackFloatBase {
  @JsName("SlotName")
  public open var slotName: String

  @JsName("AnimSeqs")
  public open var animSeqs: Array<AnimControlTrackKey>

  @JsName("bSkipAnimNotifiers")
  public open var skipAnimNotifiers: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackAnimControl

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackAnimControl

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackAnimControl

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackAnimControl

    @JsName("C")
    public fun copy(other: UObject): InterpTrackAnimControl

    @JsName("C")
    public fun copy(other: Any): InterpTrackAnimControl
  }
}

public open external class InterpTrackVectorBase(
  outer: UObject,
) : InterpTrack {
  @JsName("VectorTrack")
  public open var vectorTrack: InterpCurveVector

  @JsName("CurveTension")
  public open var curveTension: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackVectorBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackVectorBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackVectorBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackVectorBase

    @JsName("C")
    public fun copy(other: UObject): InterpTrackVectorBase

    @JsName("C")
    public fun copy(other: Any): InterpTrackVectorBase
  }
}

public open external class InterpTrackAudioMaster(
  outer: UObject,
) : InterpTrackVectorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackAudioMaster

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackAudioMaster

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackAudioMaster

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackAudioMaster

    @JsName("C")
    public fun copy(other: UObject): InterpTrackAudioMaster

    @JsName("C")
    public fun copy(other: Any): InterpTrackAudioMaster
  }
}

public open external class BoolTrackKey {
  @JsName("Time")
  public open var time: Number

  @JsName("Value")
  public open var value: Boolean

  public open fun clone(): BoolTrackKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoolTrackKey

    @JsName("C")
    public fun copy(other: Any): BoolTrackKey
  }
}

public open external class InterpTrackBoolProp(
  outer: UObject,
) : InterpTrack {
  @JsName("BoolTrack")
  public open var boolTrack: Array<BoolTrackKey>

  @JsName("PropertyName")
  public open var propertyName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackBoolProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackBoolProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackBoolProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackBoolProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackBoolProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackBoolProp
  }
}

public open external class InterpTrackColorProp(
  outer: UObject,
) : InterpTrackVectorBase {
  @JsName("PropertyName")
  public open var propertyName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackColorProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackColorProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackColorProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackColorProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackColorProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackColorProp
  }
}

public open external class InterpTrackColorScale(
  outer: UObject,
) : InterpTrackVectorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackColorScale

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackColorScale

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackColorScale

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackColorScale

    @JsName("C")
    public fun copy(other: UObject): InterpTrackColorScale

    @JsName("C")
    public fun copy(other: Any): InterpTrackColorScale
  }
}

public open external class DirectorTrackCut {
  @JsName("Time")
  public open var time: Number

  @JsName("TransitionTime")
  public open var transitionTime: Number

  @JsName("TargetCamGroup")
  public open var targetCamGroup: String

  @JsName("ShotNumber")
  public open var shotNumber: Number

  public open fun clone(): DirectorTrackCut

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DirectorTrackCut

    @JsName("C")
    public fun copy(other: Any): DirectorTrackCut
  }
}

public open external class InterpTrackDirector(
  outer: UObject,
) : InterpTrack {
  @JsName("CutTrack")
  public open var cutTrack: Array<DirectorTrackCut>

  @JsName("bSimulateCameraCutsOnClients")
  public open var simulateCameraCutsOnClients: Boolean

  @JsName("PreviewCamera")
  public open var previewCamera: CameraActor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackDirector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackDirector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackDirector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackDirector

    @JsName("C")
    public fun copy(other: UObject): InterpTrackDirector

    @JsName("C")
    public fun copy(other: Any): InterpTrackDirector
  }
}

public open external class EventTrackKey {
  @JsName("Time")
  public open var time: Number

  @JsName("EventName")
  public open var eventName: String

  public open fun clone(): EventTrackKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EventTrackKey

    @JsName("C")
    public fun copy(other: Any): EventTrackKey
  }
}

public open external class InterpTrackEvent(
  outer: UObject,
) : InterpTrack {
  @JsName("EventTrack")
  public open var eventTrack: Array<EventTrackKey>

  @JsName("bFireEventsWhenForwards")
  public open var fireEventsWhenForwards: Boolean

  @JsName("bFireEventsWhenBackwards")
  public open var fireEventsWhenBackwards: Boolean

  @JsName("bFireEventsWhenJumpingForwards")
  public open var fireEventsWhenJumpingForwards: Boolean

  @JsName("bUseCustomEventName")
  public open var useCustomEventName: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackEvent

    @JsName("C")
    public fun copy(other: UObject): InterpTrackEvent

    @JsName("C")
    public fun copy(other: Any): InterpTrackEvent
  }
}

public open external class InterpTrackFade(
  outer: UObject,
) : InterpTrackFloatBase {
  @JsName("bPersistFade")
  public open var persistFade: Boolean

  @JsName("bFadeAudio")
  public open var fadeAudio: Boolean

  @JsName("FadeColor")
  public open var fadeColor: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackFade

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackFade

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackFade

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackFade

    @JsName("C")
    public fun copy(other: UObject): InterpTrackFade

    @JsName("C")
    public fun copy(other: Any): InterpTrackFade
  }
}

@JsName("InterpTrackFloatAnimBPParam")
public open external class InterpTrackFloatAnimBpParam(
  outer: UObject,
) : InterpTrackFloatBase {
  @JsName("AnimBlueprintClass")
  public open var animBlueprintClass: UnrealEngineClass

  @JsName("AnimClass")
  public open var animClass: UnrealEngineClass

  @JsName("ParamName")
  public open var paramName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackFloatAnimBpParam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackFloatAnimBpParam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackFloatAnimBpParam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackFloatAnimBpParam

    @JsName("C")
    public fun copy(other: UObject): InterpTrackFloatAnimBpParam

    @JsName("C")
    public fun copy(other: Any): InterpTrackFloatAnimBpParam
  }
}

public open external class InterpTrackFloatMaterialParam(
  outer: UObject,
) : InterpTrackFloatBase {
  @JsName("TargetMaterials")
  public open var targetMaterials: Array<MaterialInterface>

  @JsName("ParamName")
  public open var paramName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackFloatMaterialParam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackFloatMaterialParam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackFloatMaterialParam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackFloatMaterialParam

    @JsName("C")
    public fun copy(other: UObject): InterpTrackFloatMaterialParam

    @JsName("C")
    public fun copy(other: Any): InterpTrackFloatMaterialParam
  }
}

public open external class InterpTrackFloatParticleParam(
  outer: UObject,
) : InterpTrackFloatBase {
  @JsName("ParamName")
  public open var paramName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackFloatParticleParam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackFloatParticleParam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackFloatParticleParam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackFloatParticleParam

    @JsName("C")
    public fun copy(other: UObject): InterpTrackFloatParticleParam

    @JsName("C")
    public fun copy(other: Any): InterpTrackFloatParticleParam
  }
}

public open external class InterpTrackFloatProp(
  outer: UObject,
) : InterpTrackFloatBase {
  @JsName("PropertyName")
  public open var propertyName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackFloatProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackFloatProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackFloatProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackFloatProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackFloatProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackFloatProp
  }
}

public open external class InterpTrackInstAnimControl(
  outer: UObject,
) : InterpTrackInst {
  @JsName("LastUpdatePosition")
  public open var lastUpdatePosition: Number

  @JsName("InitPosition")
  public open var initPosition: Vector

  @JsName("InitRotation")
  public open var initRotation: Rotator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstAnimControl

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstAnimControl

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstAnimControl

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstAnimControl

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstAnimControl

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstAnimControl
  }
}

public open external class InterpTrackInstAudioMaster(
  outer: UObject,
) : InterpTrackInst {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstAudioMaster

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstAudioMaster

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstAudioMaster

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstAudioMaster

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstAudioMaster

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstAudioMaster
  }
}

public open external class InterpTrackInstProperty(
  outer: UObject,
) : InterpTrackInst {
  @JsName("InterpProperty")
  public open var interpProperty: Any

  @JsName("PropertyOuterObjectInst")
  public open var propertyOuterObjectInst: UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstProperty

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstProperty

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstProperty
  }
}

public open external class InterpTrackInstBoolProp(
  outer: UObject,
) : InterpTrackInstProperty {
  @JsName("ResetBool")
  public open var resetBool: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstBoolProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstBoolProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstBoolProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstBoolProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstBoolProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstBoolProp
  }
}

public open external class InterpTrackInstColorProp(
  outer: UObject,
) : InterpTrackInstProperty {
  @JsName("ResetColor")
  public open var resetColor: Color

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstColorProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstColorProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstColorProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstColorProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstColorProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstColorProp
  }
}

public open external class InterpTrackInstColorScale(
  outer: UObject,
) : InterpTrackInst {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstColorScale

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstColorScale

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstColorScale

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstColorScale

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstColorScale

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstColorScale
  }
}

public open external class InterpTrackInstEvent(
  outer: UObject,
) : InterpTrackInst {
  @JsName("LastUpdatePosition")
  public open var lastUpdatePosition: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstEvent

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstEvent

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstEvent
  }
}

public open external class InterpTrackInstFade(
  outer: UObject,
) : InterpTrackInst {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstFade

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstFade

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstFade

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstFade

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstFade

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstFade
  }
}

@JsName("InterpTrackInstFloatAnimBPParam")
public open external class InterpTrackInstFloatAnimBpParam(
  outer: UObject,
) : InterpTrackInst {
  @JsName("AnimScriptInstance")
  public open var animScriptInstance: AnimInstance

  @JsName("ResetFloat")
  public open var resetFloat: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstFloatAnimBpParam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstFloatAnimBpParam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstFloatAnimBpParam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstFloatAnimBpParam

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstFloatAnimBpParam

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstFloatAnimBpParam
  }
}

public open external class PrimitiveMaterialRef {
  @JsName("Primitive")
  public open var primitive: PrimitiveComponent

  @JsName("Decal")
  public open var decal: DecalComponent

  @JsName("ElementIndex")
  public open var elementIndex: Number

  public open fun clone(): PrimitiveMaterialRef

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PrimitiveMaterialRef

    @JsName("C")
    public fun copy(other: Any): PrimitiveMaterialRef
  }
}

public open external class InterpTrackInstFloatMaterialParam(
  outer: UObject,
) : InterpTrackInst {
  @JsName("MaterialInstances")
  public open var materialInstances: Array<MaterialInstanceDynamic>

  @JsName("ResetFloats")
  public open var resetFloats: Array<Number>

  @JsName("PrimitiveMaterialRefs")
  public open var primitiveMaterialRefs: Array<PrimitiveMaterialRef>

  @JsName("InstancedTrack")
  public open var instancedTrack: InterpTrackFloatMaterialParam

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstFloatMaterialParam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstFloatMaterialParam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstFloatMaterialParam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstFloatMaterialParam

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstFloatMaterialParam

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstFloatMaterialParam
  }
}

public open external class InterpTrackInstFloatParticleParam(
  outer: UObject,
) : InterpTrackInst {
  @JsName("ResetFloat")
  public open var resetFloat: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstFloatParticleParam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstFloatParticleParam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstFloatParticleParam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstFloatParticleParam

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstFloatParticleParam

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstFloatParticleParam
  }
}

public open external class InterpTrackInstFloatProp(
  outer: UObject,
) : InterpTrackInstProperty {
  @JsName("ResetFloat")
  public open var resetFloat: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstFloatProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstFloatProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstFloatProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstFloatProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstFloatProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstFloatProp
  }
}

public open external class InterpTrackInstLinearColorProp(
  outer: UObject,
) : InterpTrackInstProperty {
  @JsName("ResetColor")
  public open var resetColor: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstLinearColorProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstLinearColorProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstLinearColorProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstLinearColorProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstLinearColorProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstLinearColorProp
  }
}

public open external class InterpTrackInstParticleReplay(
  outer: UObject,
) : InterpTrackInst {
  @JsName("LastUpdatePosition")
  public open var lastUpdatePosition: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstParticleReplay

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstParticleReplay

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstParticleReplay

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstParticleReplay

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstParticleReplay

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstParticleReplay
  }
}

public open external class InterpTrackInstSlomo(
  outer: UObject,
) : InterpTrackInst {
  @JsName("OldTimeDilation")
  public open var oldTimeDilation: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstSlomo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstSlomo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstSlomo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstSlomo

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstSlomo

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstSlomo
  }
}

public open external class InterpTrackInstSound(
  outer: UObject,
) : InterpTrackInst {
  @JsName("LastUpdatePosition")
  public open var lastUpdatePosition: Number

  @JsName("PlayAudioComp")
  public open var playAudioComp: AudioComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstSound

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstSound

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstSound

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstSound

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstSound

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstSound
  }
}

@JsName("ETrackToggleAction")
public external object TrackToggleAction {
  @JsName("ETTA_Off")
  public var Off: String

  @JsName("ETTA_On")
  public var On: String

  @JsName("ETTA_Toggle")
  public var Toggle: String

  @JsName("ETTA_Trigger")
  public var Trigger: String

  @JsName("ETTA_MAX")
  public var Max: String
}

public open external class InterpTrackInstToggle(
  outer: UObject,
) : InterpTrackInst {
  @JsName("Action")
  public open var action: String

  @JsName("LastUpdatePosition")
  public open var lastUpdatePosition: Number

  @JsName("bSavedActiveState")
  public open var savedActiveState: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstToggle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstToggle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstToggle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstToggle

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstToggle

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstToggle
  }
}

public open external class InterpTrackVectorMaterialParam(
  outer: UObject,
) : InterpTrackVectorBase {
  @JsName("TargetMaterials")
  public open var targetMaterials: Array<MaterialInterface>

  @JsName("ParamName")
  public open var paramName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackVectorMaterialParam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackVectorMaterialParam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackVectorMaterialParam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackVectorMaterialParam

    @JsName("C")
    public fun copy(other: UObject): InterpTrackVectorMaterialParam

    @JsName("C")
    public fun copy(other: Any): InterpTrackVectorMaterialParam
  }
}

public open external class InterpTrackInstVectorMaterialParam(
  outer: UObject,
) : InterpTrackInst {
  @JsName("MaterialInstances")
  public open var materialInstances: Array<MaterialInstanceDynamic>

  @JsName("ResetVectors")
  public open var resetVectors: Array<Vector>

  @JsName("PrimitiveMaterialRefs")
  public open var primitiveMaterialRefs: Array<PrimitiveMaterialRef>

  @JsName("InstancedTrack")
  public open var instancedTrack: InterpTrackVectorMaterialParam

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstVectorMaterialParam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstVectorMaterialParam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstVectorMaterialParam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstVectorMaterialParam

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstVectorMaterialParam

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstVectorMaterialParam
  }
}

public open external class InterpTrackInstVectorProp(
  outer: UObject,
) : InterpTrackInstProperty {
  @JsName("ResetVector")
  public open var resetVector: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstVectorProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstVectorProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstVectorProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstVectorProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstVectorProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstVectorProp
  }
}

@JsName("EVisibilityTrackAction")
public external object VisibilityTrackAction {
  @JsName("EVTA_Hide")
  public var Hide: String

  @JsName("EVTA_Show")
  public var Show: String

  @JsName("EVTA_Toggle")
  public var Toggle: String

  @JsName("EVTA_MAX")
  public var Max: String
}

public open external class InterpTrackInstVisibility(
  outer: UObject,
) : InterpTrackInst {
  @JsName("Action")
  public open var action: String

  @JsName("LastUpdatePosition")
  public open var lastUpdatePosition: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstVisibility

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstVisibility

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstVisibility

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstVisibility

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstVisibility

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstVisibility
  }
}

public open external class InterpCurvePointLinearColor {
  @JsName("InVal")
  public open var inVal: Number

  @JsName("OutVal")
  public open var outVal: LinearColor

  @JsName("ArriveTangent")
  public open var arriveTangent: LinearColor

  @JsName("LeaveTangent")
  public open var leaveTangent: LinearColor

  @JsName("InterpMode")
  public open var interpMode: String

  public open fun clone(): InterpCurvePointLinearColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurvePointLinearColor

    @JsName("C")
    public fun copy(other: Any): InterpCurvePointLinearColor
  }
}

public open external class InterpCurveLinearColor {
  @JsName("Points")
  public open var points: Array<InterpCurvePointLinearColor>

  @JsName("bIsLooped")
  public open var isLooped: Boolean

  @JsName("LoopKeyOffset")
  public open var loopKeyOffset: Number

  public open fun clone(): InterpCurveLinearColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurveLinearColor

    @JsName("C")
    public fun copy(other: Any): InterpCurveLinearColor
  }
}

public open external class InterpTrackLinearColorBase(
  outer: UObject,
) : InterpTrack {
  @JsName("LinearColorTrack")
  public open var linearColorTrack: InterpCurveLinearColor

  @JsName("CurveTension")
  public open var curveTension: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackLinearColorBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackLinearColorBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackLinearColorBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackLinearColorBase

    @JsName("C")
    public fun copy(other: UObject): InterpTrackLinearColorBase

    @JsName("C")
    public fun copy(other: Any): InterpTrackLinearColorBase
  }
}

public open external class InterpTrackLinearColorProp(
  outer: UObject,
) : InterpTrackLinearColorBase {
  @JsName("PropertyName")
  public open var propertyName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackLinearColorProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackLinearColorProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackLinearColorProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackLinearColorProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackLinearColorProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackLinearColorProp
  }
}

@JsName("EInterpMoveAxis")
public external object InterpMoveAxis {
  @JsName("AXIS_TranslationX")
  public var TranslationX: String

  @JsName("AXIS_TranslationY")
  public var TranslationY: String

  @JsName("AXIS_TranslationZ")
  public var TranslationZ: String

  @JsName("AXIS_RotationX")
  public var RotationX: String

  @JsName("AXIS_RotationY")
  public var RotationY: String

  @JsName("AXIS_RotationZ")
  public var RotationZ: String

  @JsName("AXIS_MAX")
  public var Max: String
}

public open external class InterpTrackMoveAxis(
  outer: UObject,
) : InterpTrackFloatBase {
  @JsName("MoveAxis")
  public open var moveAxis: String

  @JsName("LookupTrack")
  public open var lookupTrack: InterpLookupTrack

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackMoveAxis

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackMoveAxis

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackMoveAxis

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackMoveAxis

    @JsName("C")
    public fun copy(other: UObject): InterpTrackMoveAxis

    @JsName("C")
    public fun copy(other: Any): InterpTrackMoveAxis
  }
}

public open external class ParticleReplayTrackKey {
  @JsName("Time")
  public open var time: Number

  @JsName("Duration")
  public open var duration: Number

  @JsName("ClipIDNumber")
  public open var clipIdNumber: Number

  public open fun clone(): ParticleReplayTrackKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParticleReplayTrackKey

    @JsName("C")
    public fun copy(other: Any): ParticleReplayTrackKey
  }
}

public open external class InterpTrackParticleReplay(
  outer: UObject,
) : InterpTrack {
  @JsName("TrackKeys")
  public open var trackKeys: Array<ParticleReplayTrackKey>

  @JsName("bIsCapturingReplay")
  public open var isCapturingReplay: Boolean

  @JsName("FixedTimeStep")
  public open var fixedTimeStep: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackParticleReplay

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackParticleReplay

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackParticleReplay

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackParticleReplay

    @JsName("C")
    public fun copy(other: UObject): InterpTrackParticleReplay

    @JsName("C")
    public fun copy(other: Any): InterpTrackParticleReplay
  }
}

public open external class InterpTrackSlomo(
  outer: UObject,
) : InterpTrackFloatBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackSlomo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackSlomo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackSlomo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackSlomo

    @JsName("C")
    public fun copy(other: UObject): InterpTrackSlomo

    @JsName("C")
    public fun copy(other: Any): InterpTrackSlomo
  }
}

public open external class SoundTrackKey {
  @JsName("Time")
  public open var time: Number

  @JsName("Volume")
  public open var volume: Number

  @JsName("Pitch")
  public open var pitch: Number

  @JsName("Sound")
  public open var sound: SoundBase

  public open fun clone(): SoundTrackKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundTrackKey

    @JsName("C")
    public fun copy(other: Any): SoundTrackKey
  }
}

public open external class InterpTrackSound(
  outer: UObject,
) : InterpTrackVectorBase {
  @JsName("Sounds")
  public open var sounds: Array<SoundTrackKey>

  @JsName("bPlayOnReverse")
  public open var playOnReverse: Boolean

  @JsName("bContinueSoundOnMatineeEnd")
  public open var continueSoundOnMatineeEnd: Boolean

  @JsName("bSuppressSubtitles")
  public open var suppressSubtitles: Boolean

  @JsName("bTreatAsDialogue")
  public open var treatAsDialogue: Boolean

  @JsName("bAttach")
  public open var attach: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackSound

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackSound

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackSound

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackSound

    @JsName("C")
    public fun copy(other: UObject): InterpTrackSound

    @JsName("C")
    public fun copy(other: Any): InterpTrackSound
  }
}

public open external class ToggleTrackKey {
  @JsName("Time")
  public open var time: Number

  @JsName("ToggleAction")
  public open var toggleAction: String

  public open fun clone(): ToggleTrackKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToggleTrackKey

    @JsName("C")
    public fun copy(other: Any): ToggleTrackKey
  }
}

public open external class InterpTrackToggle(
  outer: UObject,
) : InterpTrack {
  @JsName("ToggleTrack")
  public open var toggleTrack: Array<ToggleTrackKey>

  @JsName("bActivateSystemEachUpdate")
  public open var activateSystemEachUpdate: Boolean

  @JsName("bActivateWithJustAttachedFlag")
  public open var activateWithJustAttachedFlag: Boolean

  @JsName("bFireEventsWhenForwards")
  public open var fireEventsWhenForwards: Boolean

  @JsName("bFireEventsWhenBackwards")
  public open var fireEventsWhenBackwards: Boolean

  @JsName("bFireEventsWhenJumpingForwards")
  public open var fireEventsWhenJumpingForwards: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackToggle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackToggle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackToggle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackToggle

    @JsName("C")
    public fun copy(other: UObject): InterpTrackToggle

    @JsName("C")
    public fun copy(other: Any): InterpTrackToggle
  }
}

public open external class InterpTrackVectorProp(
  outer: UObject,
) : InterpTrackVectorBase {
  @JsName("PropertyName")
  public open var propertyName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackVectorProp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackVectorProp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackVectorProp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackVectorProp

    @JsName("C")
    public fun copy(other: UObject): InterpTrackVectorProp

    @JsName("C")
    public fun copy(other: Any): InterpTrackVectorProp
  }
}

@JsName("EVisibilityTrackCondition")
public external object VisibilityTrackCondition {
  @JsName("EVTC_Always")
  public var Always: String

  @JsName("EVTC_GoreEnabled")
  public var GoreEnabled: String

  @JsName("EVTC_GoreDisabled")
  public var GoreDisabled: String

  @JsName("EVTC_MAX")
  public var Max: String
}

public open external class VisibilityTrackKey {
  @JsName("Time")
  public open var time: Number

  @JsName("Action")
  public open var action: String

  @JsName("ActiveCondition")
  public open var activeCondition: String

  public open fun clone(): VisibilityTrackKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VisibilityTrackKey

    @JsName("C")
    public fun copy(other: Any): VisibilityTrackKey
  }
}

public open external class InterpTrackVisibility(
  outer: UObject,
) : InterpTrack {
  @JsName("VisibilityTrack")
  public open var visibilityTrack: Array<VisibilityTrackKey>

  @JsName("bFireEventsWhenForwards")
  public open var fireEventsWhenForwards: Boolean

  @JsName("bFireEventsWhenBackwards")
  public open var fireEventsWhenBackwards: Boolean

  @JsName("bFireEventsWhenJumpingForwards")
  public open var fireEventsWhenJumpingForwards: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackVisibility

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackVisibility

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackVisibility

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackVisibility

    @JsName("C")
    public fun copy(other: UObject): InterpTrackVisibility

    @JsName("C")
    public fun copy(other: Any): InterpTrackVisibility
  }
}

public open external class IntSerialization(
  outer: UObject,
) : UObject {
  @JsName("UnsignedInt16Variable")
  public open var unsignedInt16Variable: Any

  @JsName("UnsignedInt32Variable")
  public open var unsignedInt32Variable: Any

  @JsName("UnsignedInt64Variable")
  public open var unsignedInt64Variable: Any

  @JsName("SignedInt8Variable")
  public open var signedInt8Variable: Any

  @JsName("SignedInt16Variable")
  public open var signedInt16Variable: Any

  @JsName("SignedInt64Variable")
  public open var signedInt64Variable: Any

  @JsName("UnsignedInt8Variable")
  public open var unsignedInt8Variable: Number

  @JsName("SignedInt32Variable")
  public open var signedInt32Variable: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IntSerialization

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IntSerialization

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IntSerialization

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IntSerialization

    @JsName("C")
    public fun copy(other: UObject): IntSerialization

    @JsName("C")
    public fun copy(other: Any): IntSerialization
  }
}

@JsName("ISMPartitionInstanceManager")
public open external class IsmPartitionInstanceManager(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IsmPartitionInstanceManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IsmPartitionInstanceManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IsmPartitionInstanceManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IsmPartitionInstanceManager

    @JsName("C")
    public fun copy(other: UObject): IsmPartitionInstanceManager

    @JsName("C")
    public fun copy(other: Any): IsmPartitionInstanceManager
  }
}

@JsName("ISMPartitionInstanceManagerProvider")
public open external class IsmPartitionInstanceManagerProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IsmPartitionInstanceManagerProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IsmPartitionInstanceManagerProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IsmPartitionInstanceManagerProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IsmPartitionInstanceManagerProvider

    @JsName("C")
    public fun copy(other: UObject): IsmPartitionInstanceManagerProvider

    @JsName("C")
    public fun copy(other: Any): IsmPartitionInstanceManagerProvider
  }
}

public open external class KillZVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : PhysicsVolume {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KillZVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KillZVolume

    @JsName("C")
    public fun copy(other: UObject): KillZVolume

    @JsName("C")
    public fun copy(other: Any): KillZVolume
  }
}

@JsName("T$746")
public external interface FilteredArrayProvider {
  @JsName("FilteredArray")
  public var filteredArray: Array<Actor>
}

@JsName("T$747")
public external interface Object747 {
  @JsName("RandomStream")
  public var randomStream: RandomStream

  @JsName("OutItem")
  public var outItem: Number

  @JsName("OutIndex")
  public var outIndex: Number
}

@JsName("T$748")
public external interface Object748 {
  @JsName("OutItem")
  public var outItem: Number

  @JsName("OutIndex")
  public var outIndex: Number
}

@JsName("T$749")
public external interface ItemProvider {
  @JsName("Item")
  public var item: Number
}

public open external class KismetArrayLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetArrayLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetArrayLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetArrayLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetArrayLibrary

    @JsName("SetArrayPropertyByName")
    public fun setArrayPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Array<Number>,
    ): Unit

    @JsName("FilterArray")
    public fun filterArray(
      targetArray: Array<Actor>,
      filterClass: UnrealEngineClass,
      filteredArray: Array<Actor>,
    ): FilteredArrayProvider

    @JsName("Array_Swap")
    public fun arraySwap(
      targetArray: Array<Number>,
      firstIndex: Number,
      secondIndex: Number,
    ): Unit

    @JsName("Array_Shuffle")
    public fun arrayShuffle(targetArray: Array<Number>): Unit

    @JsName("Array_Set")
    public fun arraySet(
      targetArray: Array<Number>,
      index: Number,
      item: Number,
      sizeToFit: Boolean,
    ): Unit

    @JsName("Array_Reverse")
    public fun arrayReverse(targetArray: Array<Number>): Unit

    @JsName("Array_Resize")
    public fun arrayResize(targetArray: Array<Number>, size: Number): Unit

    @JsName("Array_RemoveItem")
    public fun arrayRemoveItem(targetArray: Array<Number>, item: Number): Boolean

    @JsName("Array_Remove")
    public fun arrayRemove(targetArray: Array<Number>, indexToRemove: Number): Unit

    @JsName("Array_RandomFromStream")
    public fun arrayRandomFromStream(
      targetArray: Array<Number>,
      randomStream: RandomStream,
      outItem: Number,
      outIndex: Number,
    ): Object747

    @JsName("Array_Random")
    public fun arrayRandom(
      targetArray: Array<Number>,
      outItem: Number,
      outIndex: Number,
    ): Object748

    @JsName("Array_Length")
    public fun arrayLength(targetArray: Array<Number>): Number

    @JsName("Array_LastIndex")
    public fun arrayLastIndex(targetArray: Array<Number>): Number

    @JsName("Array_IsValidIndex")
    public fun arrayIsValidIndex(targetArray: Array<Number>, indexToTest: Number): Boolean

    @JsName("Array_IsNotEmpty")
    public fun arrayIsNotEmpty(targetArray: Array<Number>): Boolean

    @JsName("Array_IsEmpty")
    public fun arrayIsEmpty(targetArray: Array<Number>): Boolean

    @JsName("Array_Insert")
    public fun arrayInsert(
      targetArray: Array<Number>,
      newItem: Number,
      index: Number,
    ): Unit

    @JsName("Array_Identical")
    public fun arrayIdentical(arrayA: Array<Number>, arrayB: Array<Number>): Boolean

    @JsName("Array_Get")
    public fun arrayGet(
      targetArray: Array<Number>,
      index: Number,
      item: Number,
    ): ItemProvider

    @JsName("Array_Find")
    public fun arrayFind(targetArray: Array<Number>, itemToFind: Number): Number

    @JsName("Array_Contains")
    public fun arrayContains(targetArray: Array<Number>, itemToFind: Number): Boolean

    @JsName("Array_Clear")
    public fun arrayClear(targetArray: Array<Number>): Unit

    @JsName("Array_Append")
    public fun arrayAppend(targetArray: Array<Number>, sourceArray: Array<Number>): Unit

    @JsName("Array_AddUnique")
    public fun arrayAddUnique(targetArray: Array<Number>, newItem: Number): Number

    @JsName("Array_Add")
    public fun arrayAdd(targetArray: Array<Number>, newItem: Number): Number

    @JsName("C")
    public fun copy(other: UObject): KismetArrayLibrary

    @JsName("C")
    public fun copy(other: Any): KismetArrayLibrary
  }
}

@JsName("T$750")
public external interface Object750 {
  @JsName("OutGuid")
  public var outGuid: Guid

  @JsName("Success")
  public var success: Boolean
}

public open external class KismetGuidLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetGuidLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetGuidLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetGuidLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetGuidLibrary

    @JsName("Parse_StringToGuid")
    public fun parseStringToGuid(
      guidString: String,
      outGuid: Guid,
      success: Boolean,
    ): Object750

    @JsName("NotEqual_GuidGuid")
    public fun notEqualGuidGuid(a: Guid, b: Guid): Boolean

    @JsName("NewGuid")
    public fun newGuid(): Guid

    @JsName("IsValid_Guid")
    public fun isValidGuid(inGuid: Guid): Boolean

    @JsName("Invalidate_Guid")
    public fun invalidateGuid(inGuid: Guid): GuidProvider

    @JsName("EqualEqual_GuidGuid")
    public fun equalEqualGuidGuid(a: Guid, b: Guid): Boolean

    @JsName("Conv_GuidToString")
    public fun convertGuidToString(inGuid: Guid): String

    @JsName("C")
    public fun copy(other: UObject): KismetGuidLibrary

    @JsName("C")
    public fun copy(other: Any): KismetGuidLibrary
  }
}

public open external class KismetInputLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetInputLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetInputLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetInputLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetInputLibrary

    @JsName("PointerEvent_IsTouchEvent")
    public fun isTouchEvent(input: UPointerEvent): Boolean

    @JsName("PointerEvent_IsMouseButtonDown")
    public fun isMouseButtonDown(input: UPointerEvent, mouseButton: Key): Boolean

    @JsName("PointerEvent_GetWheelDelta")
    public fun getWheelDelta(input: UPointerEvent): Number

    @JsName("PointerEvent_GetUserIndex")
    public fun getUserIndex(input: UPointerEvent): Number

    @JsName("PointerEvent_GetTouchpadIndex")
    public fun getTouchpadIndex(input: UPointerEvent): Number

    @JsName("PointerEvent_GetScreenSpacePosition")
    public fun getScreenSpacePosition(input: UPointerEvent): Vector2d

    @JsName("PointerEvent_GetPointerIndex")
    public fun getPointerIndex(input: UPointerEvent): Number

    @JsName("PointerEvent_GetLastScreenSpacePosition")
    public fun getLastScreenSpacePosition(input: UPointerEvent): Vector2d

    @JsName("PointerEvent_GetGestureType")
    public fun getGestureType(input: UPointerEvent): String

    @JsName("PointerEvent_GetGestureDelta")
    public fun getGestureDelta(input: UPointerEvent): Vector2d

    @JsName("PointerEvent_GetEffectingButton")
    public fun getEffectingButton(input: UPointerEvent): Key

    @JsName("PointerEvent_GetCursorDelta")
    public fun getCursorDelta(input: UPointerEvent): Vector2d

    @JsName("Key_IsVectorAxis")
    public fun keyIsVectorAxis(key: Key): Boolean

    @JsName("Key_IsValid")
    public fun keyIsValid(key: Key): Boolean

    @JsName("Key_IsMouseButton")
    public fun keyIsMouseButton(key: Key): Boolean

    @JsName("Key_IsModifierKey")
    public fun keyIsModifierKey(key: Key): Boolean

    @JsName("Key_IsKeyboardKey")
    public fun keyIsKeyboardKey(key: Key): Boolean

    @JsName("Key_IsGamepadKey")
    public fun keyIsGamepadKey(key: Key): Boolean

    @JsName("Key_IsDigital")
    public fun keyIsDigital(key: Key): Boolean

    @JsName("Key_IsButtonAxis")
    public fun keyIsButtonAxis(key: Key): Boolean

    @JsName("Key_IsAxis3D")
    public fun keyIsAxis3d(key: Key): Boolean

    @JsName("Key_IsAxis2D")
    public fun keyIsAxis2d(key: Key): Boolean

    @JsName("Key_IsAxis1D")
    public fun keyIsAxis1d(key: Key): Boolean

    @JsName("Key_IsAnalog")
    public fun keyIsAnalog(key: Key): Boolean

    @JsName("Key_GetNavigationDirectionFromKey")
    public fun keyGetNavigationDirectionFromKey(inKeyEvent: KeyEvent): String

    @JsName("Key_GetNavigationDirectionFromAnalog")
    public fun keyGetNavigationDirectionFromAnalog(inAnalogEvent: AnalogInputEvent): String

    @JsName("Key_GetNavigationActionFromKey")
    public fun keyGetNavigationActionFromKey(inKeyEvent: KeyEvent): String

    @JsName("Key_GetNavigationAction")
    public fun keyGetNavigationAction(inKey: Key): String

    @JsName("Key_GetDisplayName")
    public fun keyGetDisplayName(key: Key): String

    @JsName("InputEvent_IsShiftDown")
    public fun inputEventIsShiftDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRightShiftDown")
    public fun inputEventIsRightShiftDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRightControlDown")
    public fun inputEventIsRightControlDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRightCommandDown")
    public fun inputEventIsRightCommandDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRightAltDown")
    public fun inputEventIsRightAltDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRepeat")
    public fun inputEventIsRepeat(input: InputEvent): Boolean

    @JsName("InputEvent_IsLeftShiftDown")
    public fun inputEventIsLeftShiftDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsLeftControlDown")
    public fun inputEventIsLeftControlDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsLeftCommandDown")
    public fun inputEventIsLeftCommandDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsLeftAltDown")
    public fun inputEventIsLeftAltDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsControlDown")
    public fun inputEventIsControlDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsCommandDown")
    public fun inputEventIsCommandDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsAltDown")
    public fun inputEventIsAltDown(input: InputEvent): Boolean

    @JsName("InputChord_GetDisplayName")
    public fun inputChordGetDisplayName(key: InputChord): String

    @JsName("GetUserIndex")
    public fun getUserIndex(input: KeyEvent): Number

    @JsName("GetKey")
    public fun getKey(input: KeyEvent): Key

    @JsName("GetAnalogValue")
    public fun getAnalogValue(input: AnalogInputEvent): Number

    @JsName("EqualEqual_KeyKey")
    public fun equalEqualKeyKey(a: Key, b: Key): Boolean

    @JsName("EqualEqual_InputChordInputChord")
    public fun equalEqualInputChordInputChord(a: InputChord, b: InputChord): Boolean

    @JsName("CalibrateTilt")
    public fun calibrateTilt(): Unit

    @JsName("C")
    public fun copy(other: UObject): KismetInputLibrary

    @JsName("C")
    public fun copy(other: Any): KismetInputLibrary
  }
}

@JsName("ELocalizedTextSourceCategory")
public external object LocalizedTextSourceCategory {
  public var Game: String

  public var Engine: String

  public var Editor: String

  @JsName("ELocalizedTextSourceCategory_MAX")
  public var Max: String
}

public open external class KismetInternationalizationLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetInternationalizationLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetInternationalizationLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetInternationalizationLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetInternationalizationLibrary

    @JsName("SetCurrentLocale")
    public fun setCurrentLocale(culture: String, saveToConfig: Boolean): Boolean

    @JsName("SetCurrentLanguageAndLocale")
    public fun setCurrentLanguageAndLocale(culture: String, saveToConfig: Boolean): Boolean

    @JsName("SetCurrentLanguage")
    public fun setCurrentLanguage(culture: String, saveToConfig: Boolean): Boolean

    @JsName("SetCurrentCulture")
    public fun setCurrentCulture(culture: String, saveToConfig: Boolean): Boolean

    @JsName("SetCurrentAssetGroupCulture")
    public fun setCurrentAssetGroupCulture(
      assetGroup: String,
      culture: String,
      saveToConfig: Boolean,
    ): Boolean

    @JsName("GetSuitableCulture")
    public fun getSuitableCulture(
      availableCultures: Array<String>,
      cultureToMatch: String,
      fallbackCulture: String,
    ): String

    @JsName("GetNativeCulture")
    public fun getNativeCulture(textCategory: String): String

    @JsName("GetLocalizedCultures")
    public fun getLocalizedCultures(
      includeGame: Boolean,
      includeEngine: Boolean,
      includeEditor: Boolean,
      includeAdditional: Boolean,
    ): Array<String>

    @JsName("GetCurrentLocale")
    public fun getCurrentLocale(): String

    @JsName("GetCurrentLanguage")
    public fun getCurrentLanguage(): String

    @JsName("GetCurrentCulture")
    public fun getCurrentCulture(): String

    @JsName("GetCurrentAssetGroupCulture")
    public fun getCurrentAssetGroupCulture(assetGroup: String): String

    @JsName("GetCultureDisplayName")
    public fun getCultureDisplayName(culture: String, localized: Boolean): String

    @JsName("ClearCurrentAssetGroupCulture")
    public fun clearCurrentAssetGroupCulture(assetGroup: String, saveToConfig: Boolean): Unit

    @JsName("C")
    public fun copy(other: UObject): KismetInternationalizationLibrary

    @JsName("C")
    public fun copy(other: Any): KismetInternationalizationLibrary
  }
}

public open external class KismetMaterialLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetMaterialLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetMaterialLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetMaterialLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetMaterialLibrary

    @JsName("SetVectorParameterValue")
    public fun setVectorParameterValue(
      worldContextObject: UObject,
      collection: MaterialParameterCollection,
      parameterName: String,
      parameterValue: LinearColor,
    ): Unit

    @JsName("SetScalarParameterValue")
    public fun setScalarParameterValue(
      worldContextObject: UObject,
      collection: MaterialParameterCollection,
      parameterName: String,
      parameterValue: Number,
    ): Unit

    @JsName("GetVectorParameterValue")
    public fun getVectorParameterValue(
      worldContextObject: UObject,
      collection: MaterialParameterCollection,
      parameterName: String,
    ): LinearColor

    @JsName("GetScalarParameterValue")
    public fun getScalarParameterValue(
      worldContextObject: UObject,
      collection: MaterialParameterCollection,
      parameterName: String,
    ): Number

    @JsName("CreateDynamicMaterialInstance")
    public fun createDynamicMaterialInstance(
      worldContextObject: UObject,
      parent: MaterialInterface,
      optionalName: String,
      creationFlags: String,
    ): MaterialInstanceDynamic

    @JsName("C")
    public fun copy(other: UObject): KismetMaterialLibrary

    @JsName("C")
    public fun copy(other: Any): KismetMaterialLibrary
  }
}

@JsName("T$751")
public external interface Object751 {
  @JsName("SpringState")
  public var springState: FloatSpringState
}

public open external class FloatSpringState {
  public open fun clone(): FloatSpringState

  @JsName("ResetFloatSpringState")
  public open fun resetFloatSpringState(): Object751

  @JsName("SetFloatSpringStateVelocity")
  public open fun setFloatSpringStateVelocity(velocity: Number): Object751

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FloatSpringState

    @JsName("C")
    public fun copy(other: Any): FloatSpringState

    @JsName("ResetFloatSpringState")
    public fun resetFloatSpringState(springState: FloatSpringState): Object751

    @JsName("SetFloatSpringStateVelocity")
    public fun setFloatSpringStateVelocity(springState: FloatSpringState, velocity: Number):
        Object751
  }
}

@JsName("T$752")
public external interface Object752 {
  @JsName("Result")
  public var result: Timespan

  @JsName("$")
  public var value: Boolean
}

@JsName("T$753")
public external interface Object753 {
  @JsName("IndexOfMinValue")
  public var indexOfMinValue: Number

  @JsName("MinValue")
  public var minValue: Number
}

@JsName("T$754")
public external interface Object754 {
  @JsName("IndexOfMaxValue")
  public var indexOfMaxValue: Number

  @JsName("MaxValue")
  public var maxValue: Number
}

@JsName("T$755")
public external interface Object755 {
  @JsName("Remainder")
  public var remainder: Any

  @JsName("$")
  public var value: Any
}

@JsName("T$756")
public external interface Object756 {
  @JsName("Remainder")
  public var remainder: Any

  @JsName("$")
  public var value: Number
}

@JsName("T$757")
public external interface Object757 {
  @JsName("SpringState")
  public var springState: FloatSpringState

  @JsName("$")
  public var value: Number
}

@JsName("T$758")
public external interface Object758 {
  @JsName("Result")
  public var result: DateTime

  @JsName("$")
  public var value: Boolean
}

public open external class KismetMathLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetMathLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetMathLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetMathLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetMathLibrary

    @JsName("Xor_IntInt")
    public fun xorIntInt(a: Number, b: Number): Number

    @JsName("Xor_Int64Int64")
    public fun xorInt64Int64(a: Any, b: Any): Any

    @JsName("Wrap")
    public fun wrap(
      value: Number,
      min: Number,
      max: Number,
    ): Number

    @JsName("WeightedMovingAverage_FVector")
    public fun weightedMovingAverageFVector(
      currentSample: Vector,
      previousSample: Vector,
      weight: Number,
    ): Vector

    @JsName("WeightedMovingAverage_FRotator")
    public fun weightedMovingAverageFRotator(
      currentSample: Rotator,
      previousSample: Rotator,
      weight: Number,
    ): Rotator

    @JsName("WeightedMovingAverage_Float")
    public fun weightedMovingAverageFloat(
      currentSample: Number,
      previousSample: Number,
      weight: Number,
    ): Number

    @JsName("VSizeXYSquared")
    public fun vSizeXySquared(a: Vector): Any

    @JsName("VSizeXY")
    public fun vSizeXy(a: Vector): Any

    @JsName("VSizeSquared")
    public fun vSizeSquared(a: Vector): Any

    @JsName("VSize2DSquared")
    public fun vSize2dSquared(a: Vector2d): Any

    @JsName("VSize2D")
    public fun vSize2d(a: Vector2d): Any

    @JsName("VSize")
    public fun vSize(a: Vector): Any

    @JsName("VLerp")
    public fun vLerp(
      a: Vector,
      b: Vector,
      alpha: Number,
    ): Vector

    @JsName("VInterpTo_Constant")
    public fun vInterpToConstant(
      current: Vector,
      target: Vector,
      deltaTime: Number,
      interpSpeed: Number,
    ): Vector

    @JsName("VInterpTo")
    public fun vInterpTo(
      current: Vector,
      target: Vector,
      deltaTime: Number,
      interpSpeed: Number,
    ): Vector

    @JsName("VectorSpringInterp")
    public fun vectorSpringInterp(
      current: Vector,
      target: Vector,
      springState: VectorSpringState,
      stiffness: Number,
      criticalDampingFactor: Number,
      deltaTime: Number,
      mass: Number,
      targetVelocityAmount: Number,
      clamp: Boolean,
      minValue: Vector,
      maxValue: Vector,
      initializeFromTarget: Boolean,
    ): Object553

    @JsName("Vector_Zero")
    public fun vectorZero(): Vector

    @JsName("Vector_Up")
    public fun vectorUp(): Vector

    @JsName("Vector_UnwindEuler")
    public fun vectorUnwindEuler(a: Vector): VectorProvider

    @JsName("Vector_UnitCartesianToSpherical")
    public fun vectorUnitCartesianToSpherical(a: Vector): Vector2d

    @JsName("Vector_ToRadians")
    public fun vectorToRadians(a: Vector): Vector

    @JsName("Vector_ToDegrees")
    public fun vectorToDegrees(a: Vector): Vector

    @JsName("Vector_SnappedToGrid")
    public fun vectorSnappedToGrid(inVect: Vector, inGridSize: Number): Vector

    @JsName("Vector_Set")
    public fun vectorSet(
      a: Vector,
      x: Any,
      y: Any,
      z: Any,
    ): VectorProvider

    @JsName("Vector_Right")
    public fun vectorRight(): Vector

    @JsName("Vector_Reciprocal")
    public fun vectorReciprocal(a: Vector): Vector

    @JsName("Vector_ProjectOnToNormal")
    public fun vectorProjectOnToNormal(v: Vector, inNormal: Vector): Vector

    @JsName("Vector_One")
    public fun vectorOne(): Vector

    @JsName("Vector_NormalUnsafe")
    public fun vectorNormalUnsafe(a: Vector): Vector

    @JsName("Vector_Normalize")
    public fun vectorNormalize(a: Vector, tolerance: Number): VectorProvider

    @JsName("Vector_Normal2D")
    public fun vectorNormal2d(a: Vector, tolerance: Number): Vector

    @JsName("Vector_MirrorByPlane")
    public fun vectorMirrorByPlane(a: Vector, inPlane: Plane): Vector

    @JsName("Vector_Left")
    public fun vectorLeft(): Vector

    @JsName("Vector_IsZero")
    public fun vectorIsZero(a: Vector): Boolean

    @JsName("Vector_IsUnit")
    public fun vectorIsUnit(a: Vector, squaredLenthTolerance: Number): Boolean

    @JsName("Vector_IsUniform")
    public fun vectorIsUniform(a: Vector, tolerance: Number): Boolean

    @JsName("Vector_IsNormal")
    public fun vectorIsNormal(a: Vector): Boolean

    @JsName("Vector_IsNearlyZero")
    public fun vectorIsNearlyZero(a: Vector, tolerance: Number): Boolean

    @JsName("Vector_IsNAN")
    public fun vectorIsNan(a: Vector): Boolean

    @JsName("Vector_HeadingAngle")
    public fun vectorHeadingAngle(a: Vector): Any

    @JsName("Vector_GetSignVector")
    public fun vectorGetSignVector(a: Vector): Vector

    @JsName("Vector_GetProjection")
    public fun vectorGetProjection(a: Vector): Vector

    @JsName("Vector_GetAbsMin")
    public fun vectorGetAbsMin(a: Vector): Any

    @JsName("Vector_GetAbsMax")
    public fun vectorGetAbsMax(a: Vector): Any

    @JsName("Vector_GetAbs")
    public fun vectorGetAbs(a: Vector): Vector

    @JsName("Vector_Forward")
    public fun vectorForward(): Vector

    @JsName("Vector_Down")
    public fun vectorDown(): Vector

    @JsName("Vector_DistanceSquared")
    public fun vectorDistanceSquared(v1: Vector, v2: Vector): Any

    @JsName("Vector_Distance2DSquared")
    public fun vectorDistance2dSquared(v1: Vector, v2: Vector): Any

    @JsName("Vector_Distance2D")
    public fun vectorDistance2d(v1: Vector, v2: Vector): Any

    @JsName("Vector_Distance")
    public fun vectorDistance(v1: Vector, v2: Vector): Any

    @JsName("Vector_CosineAngle2D")
    public fun vectorCosineAngle2d(a: Vector, b: Vector): Any

    @JsName("Vector_ComponentMin")
    public fun vectorComponentMin(a: Vector, b: Vector): Vector

    @JsName("Vector_ComponentMax")
    public fun vectorComponentMax(a: Vector, b: Vector): Vector

    @JsName("Vector_ClampSizeMax2D")
    public fun vectorClampSizeMax2d(a: Vector, max: Any): Vector

    @JsName("Vector_ClampSizeMax")
    public fun vectorClampSizeMax(a: Vector, max: Any): Vector

    @JsName("Vector_ClampSize2D")
    public fun vectorClampSize2d(
      a: Vector,
      min: Any,
      max: Any,
    ): Vector

    @JsName("Vector_BoundedToCube")
    public fun vectorBoundedToCube(inVect: Vector, inRadius: Number): Vector

    @JsName("Vector_BoundedToBox")
    public fun vectorBoundedToBox(
      inVect: Vector,
      inBoxMin: Vector,
      inBoxMax: Vector,
    ): Vector

    @JsName("Vector_Backward")
    public fun vectorBackward(): Vector

    @JsName("Vector_Assign")
    public fun vectorAssign(a: Vector, inVector: Vector): VectorProvider

    @JsName("Vector_AddBounded")
    public fun vectorAddBounded(
      a: Vector,
      inAddVect: Vector,
      inRadius: Number,
    ): VectorProvider

    @JsName("Vector4_Zero")
    public fun vector4Zero(): Vector4

    @JsName("Vector4_SizeSquared3")
    public fun vector4SizeSquared3(a: Vector4): Any

    @JsName("Vector4_SizeSquared")
    public fun vector4SizeSquared(a: Vector4): Any

    @JsName("Vector4_Size3")
    public fun vector4Size3(a: Vector4): Any

    @JsName("Vector4_Size")
    public fun vector4Size(a: Vector4): Any

    @JsName("Vector4_Set")
    public fun vector4Set(
      a: Vector4,
      x: Any,
      y: Any,
      z: Any,
      w: Any,
    ): Vector4Provider

    @JsName("Vector4_NormalUnsafe3")
    public fun vector4NormalUnsafe3(a: Vector4): Vector4

    @JsName("Vector4_Normalize3")
    public fun vector4Normalize3(a: Vector4, tolerance: Number): Vector4Provider

    @JsName("Vector4_Normal3")
    public fun vector4Normal3(a: Vector4, tolerance: Number): Vector4

    @JsName("Vector4_Negated")
    public fun vector4Negated(a: Vector4): Vector4

    @JsName("Vector4_MirrorByVector3")
    public fun vector4MirrorByVector3(direction: Vector4, surfaceNormal: Vector4): Vector4

    @JsName("Vector4_IsZero")
    public fun vector4IsZero(a: Vector4): Boolean

    @JsName("Vector4_IsUnit3")
    public fun vector4IsUnit3(a: Vector4, squaredLenthTolerance: Number): Boolean

    @JsName("Vector4_IsNormal3")
    public fun vector4IsNormal3(a: Vector4): Boolean

    @JsName("Vector4_IsNearlyZero3")
    public fun vector4IsNearlyZero3(a: Vector4, tolerance: Number): Boolean

    @JsName("Vector4_IsNAN")
    public fun vector4IsNan(a: Vector4): Boolean

    @JsName("Vector4_DotProduct3")
    public fun vector4DotProduct3(a: Vector4, b: Vector4): Any

    @JsName("Vector4_DotProduct")
    public fun vector4DotProduct(a: Vector4, b: Vector4): Any

    @JsName("Vector4_CrossProduct3")
    public fun vector4CrossProduct3(a: Vector4, b: Vector4): Vector4

    @JsName("Vector4_Assign")
    public fun vector4Assign(a: Vector4, inVector: Vector4): Vector4Provider

    @JsName("Vector2DInterpTo_Constant")
    public fun vector2dInterpToConstant(
      current: Vector2d,
      target: Vector2d,
      deltaTime: Number,
      interpSpeed: Number,
    ): Vector2d

    @JsName("Vector2DInterpTo")
    public fun vector2dInterpTo(
      current: Vector2d,
      target: Vector2d,
      deltaTime: Number,
      interpSpeed: Number,
    ): Vector2d

    @JsName("Vector2D_Zero")
    public fun vector2dZero(): Vector2d

    @JsName("Vector2D_Unit45Deg")
    public fun vector2dUnit45Deg(): Vector2d

    @JsName("Vector2D_One")
    public fun vector2dOne(): Vector2d

    @JsName("VEase")
    public fun vEase(
      a: Vector,
      b: Vector,
      alpha: Number,
      easingFunc: String,
      blendExp: Number,
      steps: Number,
    ): Vector

    @JsName("UtcNow")
    public fun utcNow(): DateTime

    @JsName("TransformVector4")
    public fun transformVector4(matrix: Matrix, vec4: Vector4): Vector4

    @JsName("TransformRotation")
    public fun transformRotation(t: Transform, rotation: Rotator): Rotator

    @JsName("TransformLocation")
    public fun transformLocation(t: Transform, location: Vector): Vector

    @JsName("TransformDirection")
    public fun transformDirection(t: Transform, direction: Vector): Vector

    @JsName("Transform_Determinant")
    public fun transformDeterminant(transform: Transform): Number

    @JsName("ToSign2D")
    public fun toSign2d(a: Vector2d): Vector2d

    @JsName("ToRounded2D")
    public fun toRounded2d(a: Vector2d): Vector2d

    @JsName("ToDirectionAndLength2D")
    public fun toDirectionAndLength2d(
      a: Vector2d,
      outDir: Vector2d,
      outLength: Any,
    ): Object544

    @JsName("Today")
    public fun today(): DateTime

    @JsName("TLerp")
    public fun tLerp(
      a: Transform,
      b: Transform,
      alpha: Number,
      interpMode: String,
    ): Transform

    @JsName("TInterpTo")
    public fun tInterpTo(
      current: Transform,
      target: Transform,
      deltaTime: Number,
      interpSpeed: Number,
    ): Transform

    @JsName("TimespanZeroValue")
    public fun timespanZeroValue(): Timespan

    @JsName("TimespanRatio")
    public fun timespanRatio(a: Timespan, b: Timespan): Number

    @JsName("TimespanMinValue")
    public fun timespanMinValue(): Timespan

    @JsName("TimespanMaxValue")
    public fun timespanMaxValue(): Timespan

    @JsName("TimespanFromString")
    public fun timespanFromString(timespanString: String, result: Timespan): Object752

    @JsName("TEase")
    public fun tEase(
      a: Transform,
      b: Transform,
      alpha: Number,
      easingFunc: String,
      blendExp: Number,
      steps: Number,
    ): Transform

    @JsName("Tan")
    public fun tan(a: Any): Any

    @JsName("Subtract_VectorVector")
    public fun subtractVectorVector(a: Vector, b: Vector): Vector

    @JsName("Subtract_VectorInt")
    public fun subtractVectorInt(a: Vector, b: Number): Vector

    @JsName("Subtract_VectorFloat")
    public fun subtractVectorFloat(a: Vector, b: Any): Vector

    @JsName("Subtract_Vector4Vector4")
    public fun subtractVector4Vector4(a: Vector4, b: Vector4): Vector4

    @JsName("Subtract_Vector2DVector2D")
    public fun subtractVector2dVector2d(a: Vector2d, b: Vector2d): Vector2d

    @JsName("Subtract_Vector2DFloat")
    public fun subtractVector2dFloat(a: Vector2d, b: Any): Vector2d

    @JsName("Subtract_TimespanTimespan")
    public fun subtractTimespanTimespan(a: Timespan, b: Timespan): Timespan

    @JsName("Subtract_QuatQuat")
    public fun subtractQuatQuat(a: Quat, b: Quat): Quat

    @JsName("Subtract_LinearColorLinearColor")
    public fun subtractLinearColorLinearColor(a: LinearColor, b: LinearColor): LinearColor

    @JsName("Subtract_IntPointIntPoint")
    public fun subtractIntPointIntPoint(a: IntPoint, b: IntPoint): IntPoint

    @JsName("Subtract_IntPointInt")
    public fun subtractIntPointInt(a: IntPoint, b: Number): IntPoint

    @JsName("Subtract_IntInt")
    public fun subtractIntInt(a: Number, b: Number): Number

    @JsName("Subtract_Int64Int64")
    public fun subtractInt64Int64(a: Any, b: Any): Any

    @JsName("Subtract_DoubleDouble")
    public fun subtractDoubleDouble(a: Any, b: Any): Any

    @JsName("Subtract_DateTimeTimespan")
    public fun subtractDateTimeTimespan(a: DateTime, b: Timespan): DateTime

    @JsName("Subtract_DateTimeDateTime")
    public fun subtractDateTimeDateTime(a: DateTime, b: DateTime): Timespan

    @JsName("Subtract_ByteByte")
    public fun subtractByteByte(a: Number, b: Number): Number

    @JsName("Square")
    public fun square(a: Any): Any

    @JsName("Sqrt")
    public fun sqrt(a: Any): Any

    @JsName("Spherical2DToUnitCartesian")
    public fun spherical2dToUnitCartesian(a: Vector2d): Vector

    @JsName("Sin")
    public fun sin(a: Any): Any

    @JsName("SignOfInteger64")
    public fun signOfInteger64(a: Any): Any

    @JsName("SignOfInteger")
    public fun signOfInteger(a: Number): Number

    @JsName("SignOfFloat")
    public fun signOfFloat(a: Any): Any

    @JsName("SetVectorSpringStateVelocity")
    public fun setVectorSpringStateVelocity(springState: VectorSpringState, velocity: Vector):
        Object545

    @JsName("SetRandomStreamSeed")
    public fun setRandomStreamSeed(stream: RandomStream, newSeed: Number): RandomStreamProvider

    @JsName("SetQuaternionSpringStateAngularVelocity")
    public fun setQuaternionSpringStateAngularVelocity(springState: QuaternionSpringState,
        angularVelocity: Vector): SpringStateProvider

    @JsName("SetFloatSpringStateVelocity")
    public fun setFloatSpringStateVelocity(springState: FloatSpringState, velocity: Number):
        Object751

    @JsName("Set2D")
    public fun set2d(
      a: Vector2d,
      x: Any,
      y: Any,
    ): Vector2DProvider

    @JsName("SelectVector")
    public fun selectVector(
      a: Vector,
      b: Vector,
      pickA: Boolean,
    ): Vector

    @JsName("SelectTransform")
    public fun selectTransform(
      a: Transform,
      b: Transform,
      pickA: Boolean,
    ): Transform

    @JsName("SelectString")
    public fun selectString(
      a: String,
      b: String,
      pickA: Boolean,
    ): String

    @JsName("SelectRotator")
    public fun selectRotator(
      a: Rotator,
      b: Rotator,
      pickA: Boolean,
    ): Rotator

    @JsName("SelectObject")
    public fun selectObject(
      a: UObject,
      b: UObject,
      selectA: Boolean,
    ): UObject

    @JsName("SelectInt")
    public fun selectInt(
      a: Number,
      b: Number,
      pickA: Boolean,
    ): Number

    @JsName("SelectFloat")
    public fun selectFloat(
      a: Any,
      b: Any,
      pickA: Boolean,
    ): Any

    @JsName("SelectColor")
    public fun selectColor(
      a: LinearColor,
      b: LinearColor,
      pickA: Boolean,
    ): LinearColor

    @JsName("SelectClass")
    public fun selectClass(
      a: UnrealEngineClass,
      b: UnrealEngineClass,
      selectA: Boolean,
    ): UnrealEngineClass

    @JsName("SeedRandomStream")
    public fun seedRandomStream(stream: RandomStream): RandomStreamProvider

    @JsName("SafeDivide")
    public fun safeDivide(a: Any, b: Any): Any

    @JsName("Round64")
    public fun round64(a: Any): Any

    @JsName("Round")
    public fun round(a: Any): Number

    @JsName("RotatorFromAxisAndAngle")
    public fun rotatorFromAxisAndAngle(axis: Vector, angle: Number): Rotator

    @JsName("RotateAngleAxis")
    public fun rotateAngleAxis(
      inVect: Vector,
      angleDeg: Number,
      axis: Vector,
    ): Vector

    @JsName("RLerp")
    public fun rLerp(
      a: Rotator,
      b: Rotator,
      alpha: Number,
      shortestPath: Boolean,
    ): Rotator

    @JsName("RInterpTo_Constant")
    public fun rInterpToConstant(
      current: Rotator,
      target: Rotator,
      deltaTime: Number,
      interpSpeed: Number,
    ): Rotator

    @JsName("RInterpTo")
    public fun rInterpTo(
      current: Rotator,
      target: Rotator,
      deltaTime: Number,
      interpSpeed: Number,
    ): Rotator

    @JsName("RGBToHSV_Vector")
    public fun rgbToHsvVector(RGB: LinearColor, HSV: LinearColor): HSVProvider

    @JsName("RGBToHSV")
    public fun rgbToHsv(
      inColor: LinearColor,
      h: Number,
      s: Number,
      v: Number,
      a: Number,
    ): Object20

    @JsName("RGBLinearToHSV")
    public fun rgbLinearToHsv(RGB: LinearColor): LinearColor

    @JsName("ResetVectorSpringState")
    public fun resetVectorSpringState(springState: VectorSpringState): Object545

    @JsName("ResetRandomStream")
    public fun resetRandomStream(stream: RandomStream): Unit

    @JsName("ResetQuaternionSpringState")
    public fun resetQuaternionSpringState(springState: QuaternionSpringState): SpringStateProvider

    @JsName("ResetFloatSpringState")
    public fun resetFloatSpringState(springState: FloatSpringState): Object751

    @JsName("REase")
    public fun rEase(
      a: Rotator,
      b: Rotator,
      alpha: Number,
      shortestPath: Boolean,
      easingFunc: String,
      blendExp: Number,
      steps: Number,
    ): Rotator

    @JsName("RandomUnitVectorInEllipticalConeInRadiansFromStream")
    public fun randomUnitVectorInEllipticalConeInRadiansFromStream(
      coneDir: Vector,
      maxYawInRadians: Number,
      maxPitchInRadians: Number,
      stream: RandomStream,
    ): Vector

    @JsName("RandomUnitVectorInEllipticalConeInRadians")
    public fun randomUnitVectorInEllipticalConeInRadians(
      coneDir: Vector,
      maxYawInRadians: Number,
      maxPitchInRadians: Number,
    ): Vector

    @JsName("RandomUnitVectorInEllipticalConeInDegreesFromStream")
    public fun randomUnitVectorInEllipticalConeInDegreesFromStream(
      coneDir: Vector,
      maxYawInDegrees: Number,
      maxPitchInDegrees: Number,
      stream: RandomStream,
    ): Vector

    @JsName("RandomUnitVectorInEllipticalConeInDegrees")
    public fun randomUnitVectorInEllipticalConeInDegrees(
      coneDir: Vector,
      maxYawInDegrees: Number,
      maxPitchInDegrees: Number,
    ): Vector

    @JsName("RandomUnitVectorInConeInRadiansFromStream")
    public fun randomUnitVectorInConeInRadiansFromStream(
      coneDir: Vector,
      coneHalfAngleInRadians: Number,
      stream: RandomStream,
    ): Vector

    @JsName("RandomUnitVectorInConeInRadians")
    public fun randomUnitVectorInConeInRadians(coneDir: Vector, coneHalfAngleInRadians: Number):
        Vector

    @JsName("RandomUnitVectorInConeInDegreesFromStream")
    public fun randomUnitVectorInConeInDegreesFromStream(
      coneDir: Vector,
      coneHalfAngleInDegrees: Number,
      stream: RandomStream,
    ): Vector

    @JsName("RandomUnitVectorInConeInDegrees")
    public fun randomUnitVectorInConeInDegrees(coneDir: Vector, coneHalfAngleInDegrees: Number):
        Vector

    @JsName("RandomUnitVectorFromStream")
    public fun randomUnitVectorFromStream(stream: RandomStream): Vector

    @JsName("RandomUnitVector")
    public fun randomUnitVector(): Vector

    @JsName("RandomRotatorFromStream")
    public fun randomRotatorFromStream(roll: Boolean, stream: RandomStream): Rotator

    @JsName("RandomRotator")
    public fun randomRotator(roll: Boolean): Rotator

    @JsName("RandomPointInBoundingBoxFromStream")
    public fun randomPointInBoundingBoxFromStream(
      center: Vector,
      halfSize: Vector,
      stream: RandomStream,
    ): Vector

    @JsName("RandomPointInBoundingBox")
    public fun randomPointInBoundingBox(center: Vector, halfSize: Vector): Vector

    @JsName("RandomIntegerInRangeFromStream")
    public fun randomIntegerInRangeFromStream(
      min: Number,
      max: Number,
      stream: RandomStream,
    ): Number

    @JsName("RandomIntegerInRange")
    public fun randomIntegerInRange(min: Number, max: Number): Number

    @JsName("RandomIntegerFromStream")
    public fun randomIntegerFromStream(max: Number, stream: RandomStream): Number

    @JsName("RandomInteger64InRange")
    public fun randomInteger64InRange(min: Any, max: Any): Any

    @JsName("RandomInteger64")
    public fun randomInteger64(max: Any): Any

    @JsName("RandomInteger")
    public fun randomInteger(max: Number): Number

    @JsName("RandomFloatInRangeFromStream")
    public fun randomFloatInRangeFromStream(
      min: Number,
      max: Number,
      stream: RandomStream,
    ): Number

    @JsName("RandomFloatInRange")
    public fun randomFloatInRange(min: Any, max: Any): Any

    @JsName("RandomFloatFromStream")
    public fun randomFloatFromStream(stream: RandomStream): Number

    @JsName("RandomFloat")
    public fun randomFloat(): Any

    @JsName("RandomBoolWithWeightFromStream")
    public fun randomBoolWithWeightFromStream(weight: Number, randomStream: RandomStream): Boolean

    @JsName("RandomBoolWithWeight")
    public fun randomBoolWithWeight(weight: Number): Boolean

    @JsName("RandomBoolFromStream")
    public fun randomBoolFromStream(stream: RandomStream): Boolean

    @JsName("RandomBool")
    public fun randomBool(): Boolean

    @JsName("RadiansToDegrees")
    public fun radiansToDegrees(a: Any): Any

    @JsName("QuaternionSpringInterp")
    public fun quaternionSpringInterp(
      current: Quat,
      target: Quat,
      springState: QuaternionSpringState,
      stiffness: Number,
      criticalDampingFactor: Number,
      deltaTime: Number,
      mass: Number,
      targetVelocityAmount: Number,
      initializeFromTarget: Boolean,
    ): Object10

    @JsName("Quat_VectorUp")
    public fun quatVectorUp(q: Quat): Vector

    @JsName("Quat_VectorRight")
    public fun quatVectorRight(q: Quat): Vector

    @JsName("Quat_VectorForward")
    public fun quatVectorForward(q: Quat): Vector

    @JsName("Quat_UnrotateVector")
    public fun quatUnrotateVector(q: Quat, v: Vector): Vector

    @JsName("Quat_SizeSquared")
    public fun quatSizeSquared(q: Quat): Number

    @JsName("Quat_Size")
    public fun quatSize(q: Quat): Number

    @JsName("Quat_SetFromEuler")
    public fun quatSetFromEuler(q: Quat, euler: Vector): QuatProvider

    @JsName("Quat_SetComponents")
    public fun quatSetComponents(
      q: Quat,
      x: Number,
      y: Number,
      z: Number,
      w: Number,
    ): QuatProvider

    @JsName("Quat_Rotator")
    public fun quatRotator(q: Quat): Rotator

    @JsName("Quat_RotateVector")
    public fun quatRotateVector(q: Quat, v: Vector): Vector

    @JsName("Quat_Normalized")
    public fun quatNormalized(q: Quat, tolerance: Number): Quat

    @JsName("Quat_Normalize")
    public fun quatNormalize(q: Quat, tolerance: Number): QuatProvider

    @JsName("Quat_MakeFromEuler")
    public fun quatMakeFromEuler(euler: Vector): Quat

    @JsName("Quat_Log")
    public fun quatLog(q: Quat): Quat

    @JsName("Quat_IsNormalized")
    public fun quatIsNormalized(q: Quat): Boolean

    @JsName("Quat_IsNonFinite")
    public fun quatIsNonFinite(q: Quat): Boolean

    @JsName("Quat_IsIdentity")
    public fun quatIsIdentity(q: Quat, tolerance: Number): Boolean

    @JsName("Quat_IsFinite")
    public fun quatIsFinite(q: Quat): Boolean

    @JsName("Quat_Inversed")
    public fun quatInversed(q: Quat): Quat

    @JsName("Quat_Identity")
    public fun quatIdentity(): Quat

    @JsName("Quat_GetRotationAxis")
    public fun quatGetRotationAxis(q: Quat): Vector

    @JsName("Quat_GetAxisZ")
    public fun quatGetAxisZ(q: Quat): Vector

    @JsName("Quat_GetAxisY")
    public fun quatGetAxisY(q: Quat): Vector

    @JsName("Quat_GetAxisX")
    public fun quatGetAxisX(q: Quat): Vector

    @JsName("Quat_GetAngle")
    public fun quatGetAngle(q: Quat): Number

    @JsName("Quat_Exp")
    public fun quatExp(q: Quat): Quat

    @JsName("Quat_Euler")
    public fun quatEuler(q: Quat): Vector

    @JsName("Quat_EnforceShortestArcWith")
    public fun quatEnforceShortestArcWith(a: Quat, b: Quat): Object8

    @JsName("Quat_AngularDistance")
    public fun quatAngularDistance(a: Quat, b: Quat): Number

    @JsName("ProjectVectorOnToVector")
    public fun projectVectorOnToVector(v: Vector, target: Vector): Vector

    @JsName("ProjectVectorOnToPlane")
    public fun projectVectorOnToPlane(v: Vector, planeNormal: Vector): Vector

    @JsName("ProjectPointOnToPlane")
    public fun projectPointOnToPlane(
      point: Vector,
      planeBase: Vector,
      planeNormal: Vector,
    ): Vector

    @JsName("PointsAreCoplanar")
    public fun pointsAreCoplanar(points: Array<Vector>, tolerance: Number): Boolean

    @JsName("PerlinNoise1D")
    public fun perlinNoise1d(value: Number): Number

    @JsName("Percent_IntInt")
    public fun percentIntInt(a: Number, b: Number): Number

    @JsName("Percent_FloatFloat")
    public fun percentFloatFloat(a: Any, b: Any): Any

    @JsName("Percent_ByteByte")
    public fun percentByteByte(a: Number, b: Number): Number

    @JsName("Or_IntInt")
    public fun orIntInt(a: Number, b: Number): Number

    @JsName("Or_Int64Int64")
    public fun orInt64Int64(a: Any, b: Any): Any

    @JsName("Now")
    public fun now(): DateTime

    @JsName("NotEqualExactly_VectorVector")
    public fun notEqualExactlyVectorVector(a: Vector, b: Vector): Boolean

    @JsName("NotEqualExactly_Vector4Vector4")
    public fun notEqualExactlyVector4Vector4(a: Vector4, b: Vector4): Boolean

    @JsName("NotEqualExactly_Vector2DVector2D")
    public fun notEqualExactlyVector2dVector2d(a: Vector2d, b: Vector2d): Boolean

    @JsName("NotEqual_VectorVector")
    public fun notEqualVectorVector(
      a: Vector,
      b: Vector,
      errorTolerance: Number,
    ): Boolean

    @JsName("NotEqual_Vector4Vector4")
    public fun notEqualVector4Vector4(
      a: Vector4,
      b: Vector4,
      errorTolerance: Number,
    ): Boolean

    @JsName("NotEqual_Vector2DVector2D")
    public fun notEqualVector2dVector2d(
      a: Vector2d,
      b: Vector2d,
      errorTolerance: Number,
    ): Boolean

    @JsName("NotEqual_TimespanTimespan")
    public fun notEqualTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("NotEqual_RotatorRotator")
    public fun notEqualRotatorRotator(
      a: Rotator,
      b: Rotator,
      errorTolerance: Number,
    ): Boolean

    @JsName("NotEqual_QuatQuat")
    public fun notEqualQuatQuat(
      a: Quat,
      b: Quat,
      errorTolerance: Number,
    ): Boolean

    @JsName("NotEqual_ObjectObject")
    public fun notEqualObjectObject(a: UObject, b: UObject): Boolean

    @JsName("NotEqual_NameName")
    public fun notEqualNameName(a: String, b: String): Boolean

    @JsName("NotEqual_MatrixMatrix")
    public fun notEqualMatrixMatrix(
      a: Matrix,
      b: Matrix,
      tolerance: Number,
    ): Boolean

    @JsName("NotEqual_LinearColorLinearColor")
    public fun notEqualLinearColorLinearColor(a: LinearColor, b: LinearColor): Boolean

    @JsName("NotEqual_IntPointIntPoint")
    public fun notEqualIntPointIntPoint(a: IntPoint, b: IntPoint): Boolean

    @JsName("NotEqual_IntInt")
    public fun notEqualIntInt(a: Number, b: Number): Boolean

    @JsName("NotEqual_Int64Int64")
    public fun notEqualInt64Int64(a: Any, b: Any): Boolean

    @JsName("NotEqual_DoubleDouble")
    public fun notEqualDoubleDouble(a: Any, b: Any): Boolean

    @JsName("NotEqual_DateTimeDateTime")
    public fun notEqualDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("NotEqual_ClassClass")
    public fun notEqualClassClass(a: UnrealEngineClass, b: UnrealEngineClass): Boolean

    @JsName("NotEqual_ByteByte")
    public fun notEqualByteByte(a: Number, b: Number): Boolean

    @JsName("NotEqual_BoolBool")
    public fun notEqualBoolBool(a: Boolean, b: Boolean): Boolean

    @JsName("Not_PreBool")
    public fun notPreBool(a: Boolean): Boolean

    @JsName("Not_Int64")
    public fun notInt64(a: Any): Any

    @JsName("Not_Int")
    public fun notInt(a: Number): Number

    @JsName("NormalSafe2D")
    public fun normalSafe2d(a: Vector2d, tolerance: Number): Vector2d

    @JsName("NormalizeToRange")
    public fun normalizeToRange(
      value: Any,
      rangeMin: Any,
      rangeMax: Any,
    ): Any

    @JsName("NormalizedDeltaRotator")
    public fun normalizedDeltaRotator(a: Rotator, b: Rotator): Rotator

    @JsName("NormalizeAxis")
    public fun normalizeAxis(angle: Number): Number

    @JsName("Normalize2D")
    public fun normalize2d(a: Vector2d, tolerance: Number): Vector2DProvider

    @JsName("Normal2D")
    public fun normal2d(a: Vector2d): Vector2d

    @JsName("Normal")
    public fun normal(a: Vector, tolerance: Number): Vector

    @JsName("NegateVector")
    public fun negateVector(a: Vector): Vector

    @JsName("NegateRotator")
    public fun negateRotator(a: Rotator): Rotator

    @JsName("Negated2D")
    public fun negated2d(a: Vector2d): Vector2d

    @JsName("NearlyEqual_TransformTransform")
    public fun nearlyEqualTransformTransform(
      a: Transform,
      b: Transform,
      locationTolerance: Number,
      rotationTolerance: Number,
      scale3dTolerance: Number,
    ): Boolean

    @JsName("NearlyEqual_FloatFloat")
    public fun nearlyEqualFloatFloat(
      a: Any,
      b: Any,
      errorTolerance: Any,
    ): Boolean

    @JsName("MultiplyMultiply_FloatFloat")
    public fun multiplyMultiplyFloatFloat(base: Any, exp: Any): Any

    @JsName("MultiplyByPi")
    public fun multiplyByPi(value: Any): Any

    @JsName("Multiply_VectorVector")
    public fun multiplyVectorVector(a: Vector, b: Vector): Vector

    @JsName("Multiply_VectorInt")
    public fun multiplyVectorInt(a: Vector, b: Number): Vector

    @JsName("Multiply_VectorFloat")
    public fun multiplyVectorFloat(a: Vector, b: Any): Vector

    @JsName("Multiply_Vector4Vector4")
    public fun multiplyVector4Vector4(a: Vector4, b: Vector4): Vector4

    @JsName("Multiply_Vector2DVector2D")
    public fun multiplyVector2dVector2d(a: Vector2d, b: Vector2d): Vector2d

    @JsName("Multiply_Vector2DFloat")
    public fun multiplyVector2dFloat(a: Vector2d, b: Any): Vector2d

    @JsName("Multiply_TimespanFloat")
    public fun multiplyTimespanFloat(a: Timespan, scalar: Number): Timespan

    @JsName("Multiply_RotatorInt")
    public fun multiplyRotatorInt(a: Rotator, b: Number): Rotator

    @JsName("Multiply_RotatorFloat")
    public fun multiplyRotatorFloat(a: Rotator, b: Number): Rotator

    @JsName("Multiply_QuatQuat")
    public fun multiplyQuatQuat(a: Quat, b: Quat): Quat

    @JsName("Multiply_MatrixMatrix")
    public fun multiplyMatrixMatrix(a: Matrix, b: Matrix): Matrix

    @JsName("Multiply_MatrixFloat")
    public fun multiplyMatrixFloat(a: Matrix, b: Any): Matrix

    @JsName("Multiply_LinearColorLinearColor")
    public fun multiplyLinearColorLinearColor(a: LinearColor, b: LinearColor): LinearColor

    @JsName("Multiply_LinearColorFloat")
    public fun multiplyLinearColorFloat(a: LinearColor, b: Number): LinearColor

    @JsName("Multiply_IntPointIntPoint")
    public fun multiplyIntPointIntPoint(a: IntPoint, b: IntPoint): IntPoint

    @JsName("Multiply_IntPointInt")
    public fun multiplyIntPointInt(a: IntPoint, b: Number): IntPoint

    @JsName("Multiply_IntInt")
    public fun multiplyIntInt(a: Number, b: Number): Number

    @JsName("Multiply_IntFloat")
    public fun multiplyIntFloat(a: Number, b: Any): Any

    @JsName("Multiply_Int64Int64")
    public fun multiplyInt64Int64(a: Any, b: Any): Any

    @JsName("Multiply_DoubleDouble")
    public fun multiplyDoubleDouble(a: Any, b: Any): Any

    @JsName("Multiply_ByteByte")
    public fun multiplyByteByte(a: Number, b: Number): Number

    @JsName("MirrorVectorByNormal")
    public fun mirrorVectorByNormal(inVect: Vector, inNormal: Vector): Vector

    @JsName("MinOfIntArray")
    public fun minOfIntArray(
      intArray: Array<Number>,
      indexOfMinValue: Number,
      minValue: Number,
    ): Object753

    @JsName("MinOfFloatArray")
    public fun minOfFloatArray(
      floatArray: Array<Number>,
      indexOfMinValue: Number,
      minValue: Number,
    ): Object753

    @JsName("MinOfByteArray")
    public fun minOfByteArray(
      byteArray: Array<Number>,
      indexOfMinValue: Number,
      minValue: Number,
    ): Object753

    @JsName("MinInt64")
    public fun minInt64(a: Any, b: Any): Any

    @JsName("MinimumAreaRectangle")
    public fun minimumAreaRectangle(
      worldContextObject: UObject,
      inVerts: Array<Vector>,
      sampleSurfaceNormal: Vector,
      outRectCenter: Vector,
      outRectRotation: Rotator,
      outSideLengthX: Number,
      outSideLengthY: Number,
      debugDraw: Boolean,
    ): Object343

    @JsName("MinAreaRectangle")
    public fun minAreaRectangle(
      worldContextObject: UObject,
      inPoints: Array<Vector>,
      sampleSurfaceNormal: Vector,
      outRectCenter: Vector,
      outRectRotation: Rotator,
      outRectLengthX: Number,
      outRectLengthY: Number,
      debugDraw: Boolean,
    ): Object342

    @JsName("Min")
    public fun min(a: Number, b: Number): Number

    @JsName("MaxOfIntArray")
    public fun maxOfIntArray(
      intArray: Array<Number>,
      indexOfMaxValue: Number,
      maxValue: Number,
    ): Object754

    @JsName("MaxOfFloatArray")
    public fun maxOfFloatArray(
      floatArray: Array<Number>,
      indexOfMaxValue: Number,
      maxValue: Number,
    ): Object754

    @JsName("MaxOfByteArray")
    public fun maxOfByteArray(
      byteArray: Array<Number>,
      indexOfMaxValue: Number,
      maxValue: Number,
    ): Object754

    @JsName("MaxInt64")
    public fun maxInt64(a: Any, b: Any): Any

    @JsName("Max")
    public fun max(a: Number, b: Number): Number

    @JsName("Matrix_TransformVector4")
    public fun matrixTransformVector4(m: Matrix, v: Vector4): Vector4

    @JsName("Matrix_TransformVector")
    public fun matrixTransformVector(m: Matrix, v: Vector): Vector4

    @JsName("Matrix_TransformPosition")
    public fun matrixTransformPosition(m: Matrix, v: Vector): Vector4

    @JsName("Matrix_ToQuat")
    public fun matrixToQuat(m: Matrix): Quat

    @JsName("Matrix_SetOrigin")
    public fun matrixSetOrigin(m: Matrix, newOrigin: Vector): MatrixProvider

    @JsName("Matrix_SetColumn")
    public fun matrixSetColumn(
      m: Matrix,
      column: String,
      value: Vector,
    ): MatrixProvider

    @JsName("Matrix_SetAxis")
    public fun matrixSetAxis(
      m: Matrix,
      axis: String,
      axisVector: Vector,
    ): MatrixProvider

    @JsName("Matrix_ScaleTranslation")
    public fun matrixScaleTranslation(m: Matrix, scale3d: Vector): Matrix

    @JsName("Matrix_RemoveTranslation")
    public fun matrixRemoveTranslation(m: Matrix): Matrix

    @JsName("Matrix_RemoveScaling")
    public fun matrixRemoveScaling(m: Matrix, tolerance: Number): MatrixProvider

    @JsName("Matrix_Mirror")
    public fun matrixMirror(
      m: Matrix,
      mirrorAxis: String,
      flipAxis: String,
    ): Matrix

    @JsName("Matrix_InverseTransformVector")
    public fun matrixInverseTransformVector(m: Matrix, v: Vector): Vector

    @JsName("Matrix_InverseTransformPosition")
    public fun matrixInverseTransformPosition(m: Matrix, v: Vector): Vector

    @JsName("Matrix_Identity")
    public fun matrixIdentity(): Matrix

    @JsName("Matrix_GetUnitAxis")
    public fun matrixGetUnitAxis(m: Matrix, axis: String): Vector

    @JsName("Matrix_GetUnitAxes")
    public fun matrixGetUnitAxes(
      m: Matrix,
      x: Vector,
      y: Vector,
      z: Vector,
    ): AxesProvider

    @JsName("Matrix_GetTransposed")
    public fun matrixGetTransposed(m: Matrix): Matrix

    @JsName("Matrix_GetTransposeAdjoint")
    public fun matrixGetTransposeAdjoint(m: Matrix): Matrix

    @JsName("Matrix_GetScaleVector")
    public fun matrixGetScaleVector(m: Matrix, tolerance: Number): Vector

    @JsName("Matrix_GetScaledAxis")
    public fun matrixGetScaledAxis(m: Matrix, axis: String): Vector

    @JsName("Matrix_GetScaledAxes")
    public fun matrixGetScaledAxes(
      m: Matrix,
      x: Vector,
      y: Vector,
      z: Vector,
    ): AxesProvider

    @JsName("Matrix_GetRotDeterminant")
    public fun matrixGetRotDeterminant(m: Matrix): Number

    @JsName("Matrix_GetRotator")
    public fun matrixGetRotator(m: Matrix): Rotator

    @JsName("Matrix_GetOrigin")
    public fun matrixGetOrigin(inMatrix: Matrix): Vector

    @JsName("Matrix_GetMaximumAxisScale")
    public fun matrixGetMaximumAxisScale(m: Matrix): Number

    @JsName("Matrix_GetMatrixWithoutScale")
    public fun matrixGetMatrixWithoutScale(m: Matrix, tolerance: Number): Matrix

    @JsName("Matrix_GetInverse")
    public fun matrixGetInverse(m: Matrix): Matrix

    @JsName("Matrix_GetFrustumTopPlane")
    public fun matrixGetFrustumTopPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumRightPlane")
    public fun matrixGetFrustumRightPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumNearPlane")
    public fun matrixGetFrustumNearPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumLeftPlane")
    public fun matrixGetFrustumLeftPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumFarPlane")
    public fun matrixGetFrustumFarPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumBottomPlane")
    public fun matrixGetFrustumBottomPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetDeterminant")
    public fun matrixGetDeterminant(m: Matrix): Number

    @JsName("Matrix_GetColumn")
    public fun matrixGetColumn(m: Matrix, column: String): Vector

    @JsName("Matrix_ContainsNaN")
    public fun matrixContainsNaN(m: Matrix): Boolean

    @JsName("Matrix_ConcatenateTranslation")
    public fun matrixConcatenateTranslation(m: Matrix, translation: Vector): Matrix

    @JsName("Matrix_ApplyScale")
    public fun matrixApplyScale(m: Matrix, scale: Number): Matrix

    @JsName("MapRangeUnclamped")
    public fun mapRangeUnclamped(
      value: Any,
      inRangeA: Any,
      inRangeB: Any,
      outRangeA: Any,
      outRangeB: Any,
    ): Any

    @JsName("MapRangeClamped")
    public fun mapRangeClamped(
      value: Any,
      inRangeA: Any,
      inRangeB: Any,
      outRangeA: Any,
      outRangeB: Any,
    ): Any

    @JsName("MakeVector_NetQuantizeNormal")
    public fun makeVectorNetQuantizeNormal(
      x: Any,
      y: Any,
      z: Any,
    ): VectorNetQuantizeNormal

    @JsName("MakeVector_NetQuantize100")
    public fun makeVectorNetQuantize100(
      x: Any,
      y: Any,
      z: Any,
    ): VectorNetQuantize100

    @JsName("MakeVector_NetQuantize10")
    public fun makeVectorNetQuantize10(
      x: Any,
      y: Any,
      z: Any,
    ): VectorNetQuantize10

    @JsName("MakeVector_NetQuantize")
    public fun makeVectorNetQuantize(
      x: Any,
      y: Any,
      z: Any,
    ): VectorNetQuantize

    @JsName("MakeVector4")
    public fun makeVector4(
      x: Any,
      y: Any,
      z: Any,
      w: Any,
    ): Vector4

    @JsName("MakeVector2D")
    public fun makeVector2d(x: Any, y: Any): Vector2d

    @JsName("MakeVector")
    public fun makeVector(
      x: Any,
      y: Any,
      z: Any,
    ): Vector

    @JsName("MakeTransform")
    public fun makeTransform(
      location: Vector,
      rotation: Rotator,
      scale: Vector,
    ): Transform

    @JsName("MakeTimespan2")
    public fun makeTimespan2(
      days: Number,
      hours: Number,
      minutes: Number,
      seconds: Number,
      fractionNano: Number,
    ): Timespan

    @JsName("MakeTimespan")
    public fun makeTimespan(
      days: Number,
      hours: Number,
      minutes: Number,
      seconds: Number,
      milliseconds: Number,
    ): Timespan

    @JsName("MakeRotFromZY")
    public fun makeRotFromZy(z: Vector, y: Vector): Rotator

    @JsName("MakeRotFromZX")
    public fun makeRotFromZx(z: Vector, x: Vector): Rotator

    @JsName("MakeRotFromZ")
    public fun makeRotFromZ(z: Vector): Rotator

    @JsName("MakeRotFromYZ")
    public fun makeRotFromYz(y: Vector, z: Vector): Rotator

    @JsName("MakeRotFromYX")
    public fun makeRotFromYx(y: Vector, x: Vector): Rotator

    @JsName("MakeRotFromY")
    public fun makeRotFromY(y: Vector): Rotator

    @JsName("MakeRotFromXZ")
    public fun makeRotFromXz(x: Vector, z: Vector): Rotator

    @JsName("MakeRotFromXY")
    public fun makeRotFromXy(x: Vector, y: Vector): Rotator

    @JsName("MakeRotFromX")
    public fun makeRotFromX(x: Vector): Rotator

    @JsName("MakeRotator")
    public fun makeRotator(
      roll: Number,
      pitch: Number,
      yaw: Number,
    ): Rotator

    @JsName("MakeRotationFromAxes")
    public fun makeRotationFromAxes(
      forward: Vector,
      right: Vector,
      up: Vector,
    ): Rotator

    @JsName("MakeRelativeTransform")
    public fun makeRelativeTransform(a: Transform, relativeTo: Transform): Transform

    @JsName("MakeRandomStream")
    public fun makeRandomStream(initialSeed: Number): RandomStream

    @JsName("MakeQuat")
    public fun makeQuat(
      x: Number,
      y: Number,
      z: Number,
      w: Number,
    ): Quat

    @JsName("MakeQualifiedFrameTime")
    public fun makeQualifiedFrameTime(
      frame: FrameNumber,
      frameRate: FrameRate,
      subFrame: Number,
    ): QualifiedFrameTime

    @JsName("MakePulsatingValue")
    public fun makePulsatingValue(
      inCurrentTime: Number,
      inPulsesPerSecond: Number,
      inPhase: Number,
    ): Number

    @JsName("MakePlaneFromPointAndNormal")
    public fun makePlaneFromPointAndNormal(point: Vector, normal: Vector): Plane

    @JsName("MakeFrameRate")
    public fun makeFrameRate(numerator: Number, denominator: Number): FrameRate

    @JsName("MakeDateTime")
    public fun makeDateTime(
      year: Number,
      month: Number,
      day: Number,
      hour: Number,
      minute: Number,
      second: Number,
      millisecond: Number,
    ): DateTime

    @JsName("MakeColor")
    public fun makeColor(
      r: Number,
      g: Number,
      b: Number,
      a: Number,
    ): LinearColor

    @JsName("MakeBoxSphereBounds")
    public fun makeBoxSphereBounds(
      origin: Vector,
      boxExtent: Vector,
      sphereRadius: Number,
    ): BoxSphereBounds

    @JsName("MakeBox2D")
    public fun makeBox2d(min: Vector2d, max: Vector2d): Box2d

    @JsName("MakeBox")
    public fun makeBox(min: Vector, max: Vector): Box

    @JsName("Loge")
    public fun loge(a: Any): Any

    @JsName("Log")
    public fun log(a: Any, base: Any): Any

    @JsName("LinePlaneIntersection_OriginNormal")
    public fun linePlaneIntersectionOriginNormal(
      lineStart: Vector,
      lineEnd: Vector,
      planeOrigin: Vector,
      planeNormal: Vector,
      t: Number,
      intersection: Vector,
    ): Object551

    @JsName("LinePlaneIntersection")
    public fun linePlaneIntersection(
      lineStart: Vector,
      lineEnd: Vector,
      aPlane: Plane,
      t: Number,
      intersection: Vector,
    ): Object551

    @JsName("LinearColorLerpUsingHSV")
    public fun linearColorLerpUsingHsv(
      a: LinearColor,
      b: LinearColor,
      alpha: Number,
    ): LinearColor

    @JsName("LinearColorLerp")
    public fun linearColorLerp(
      a: LinearColor,
      b: LinearColor,
      alpha: Number,
    ): LinearColor

    @JsName("LinearColor_Yellow")
    public fun linearColorYellow(): LinearColor

    @JsName("LinearColor_White")
    public fun linearColorWhite(): LinearColor

    @JsName("LinearColor_Transparent")
    public fun linearColorTransparent(): LinearColor

    @JsName("LinearColor_ToRGBE")
    public fun linearColorToRgbe(inLinearColor: LinearColor): Color

    @JsName("LinearColor_ToNewOpacity")
    public fun linearColorToNewOpacity(inColor: LinearColor, inOpacity: Number): LinearColor

    @JsName("LinearColor_SetTemperature")
    public fun linearColorSetTemperature(inOutColor: LinearColor, inTemperature: Number):
        InOutColorProvider

    @JsName("LinearColor_SetRGBA")
    public fun linearColorSetRgba(
      inOutColor: LinearColor,
      r: Number,
      g: Number,
      b: Number,
      a: Number,
    ): InOutColorProvider

    @JsName("LinearColor_SetRandomHue")
    public fun linearColorSetRandomHue(inOutColor: LinearColor): InOutColorProvider

    @JsName("LinearColor_SetFromSRGB")
    public fun linearColorSetFromSrgb(inOutColor: LinearColor, inSrgb: Color): InOutColorProvider

    @JsName("LinearColor_SetFromPow22")
    public fun linearColorSetFromPow22(inOutColor: LinearColor, inColor: Color): InOutColorProvider

    @JsName("LinearColor_SetFromHSV")
    public fun linearColorSetFromHsv(
      inOutColor: LinearColor,
      h: Number,
      s: Number,
      v: Number,
      a: Number,
    ): InOutColorProvider

    @JsName("LinearColor_Set")
    public fun linearColorSet(inOutColor: LinearColor, inColor: LinearColor): InOutColorProvider

    @JsName("LinearColor_Red")
    public fun linearColorRed(): LinearColor

    @JsName("LinearColor_QuantizeRound")
    public fun linearColorQuantizeRound(inColor: LinearColor): Color

    @JsName("LinearColor_Quantize")
    public fun linearColorQuantize(inColor: LinearColor): Color

    @JsName("LinearColor_IsNearEqual")
    public fun linearColorIsNearEqual(
      a: LinearColor,
      b: LinearColor,
      tolerance: Number,
    ): Boolean

    @JsName("LinearColor_Green")
    public fun linearColorGreen(): LinearColor

    @JsName("LinearColor_Gray")
    public fun linearColorGray(): LinearColor

    @JsName("LinearColor_GetMin")
    public fun linearColorGetMin(inColor: LinearColor): Number

    @JsName("LinearColor_GetMax")
    public fun linearColorGetMax(inColor: LinearColor): Number

    @JsName("LinearColor_GetLuminance")
    public fun linearColorGetLuminance(inColor: LinearColor): Number

    @JsName("LinearColor_Distance")
    public fun linearColorDistance(c1: LinearColor, c2: LinearColor): Number

    @JsName("LinearColor_Desaturated")
    public fun linearColorDesaturated(inColor: LinearColor, inDesaturation: Number): LinearColor

    @JsName("LinearColor_Blue")
    public fun linearColorBlue(): LinearColor

    @JsName("LinearColor_Black")
    public fun linearColorBlack(): LinearColor

    @JsName("LessLess_VectorRotator")
    public fun lessLessVectorRotator(a: Vector, b: Rotator): Vector

    @JsName("LessEqual_TimespanTimespan")
    public fun lessEqualTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("LessEqual_IntInt")
    public fun lessEqualIntInt(a: Number, b: Number): Boolean

    @JsName("LessEqual_Int64Int64")
    public fun lessEqualInt64Int64(a: Any, b: Any): Boolean

    @JsName("LessEqual_DoubleDouble")
    public fun lessEqualDoubleDouble(a: Any, b: Any): Boolean

    @JsName("LessEqual_DateTimeDateTime")
    public fun lessEqualDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("LessEqual_ByteByte")
    public fun lessEqualByteByte(a: Number, b: Number): Boolean

    @JsName("Less_TimespanTimespan")
    public fun lessTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("Less_IntInt")
    public fun lessIntInt(a: Number, b: Number): Boolean

    @JsName("Less_Int64Int64")
    public fun lessInt64Int64(a: Any, b: Any): Boolean

    @JsName("Less_DoubleDouble")
    public fun lessDoubleDouble(a: Any, b: Any): Boolean

    @JsName("Less_DateTimeDateTime")
    public fun lessDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("Less_ByteByte")
    public fun lessByteByte(a: Number, b: Number): Boolean

    @JsName("Lerp")
    public fun lerp(
      a: Any,
      b: Any,
      alpha: Any,
    ): Any

    @JsName("IsZero2D")
    public fun isZero2d(a: Vector2d): Boolean

    @JsName("IsPointInBoxWithTransform")
    public fun isPointInBoxWithTransform(
      point: Vector,
      boxWorldTransform: Transform,
      boxExtent: Vector,
    ): Boolean

    @JsName("IsPointInBox")
    public fun isPointInBox(
      point: Vector,
      boxOrigin: Vector,
      boxExtent: Vector,
    ): Boolean

    @JsName("IsNearlyZero2D")
    public fun isNearlyZero2d(a: Vector2d, tolerance: Number): Boolean

    @JsName("IsMorning")
    public fun isMorning(a: DateTime): Boolean

    @JsName("IsLeapYear")
    public fun isLeapYear(year: Number): Boolean

    @JsName("IsAfternoon")
    public fun isAfternoon(a: DateTime): Boolean

    @JsName("InvertTransform")
    public fun invertTransform(t: Transform): Transform

    @JsName("InverseTransformRotation")
    public fun inverseTransformRotation(t: Transform, rotation: Rotator): Rotator

    @JsName("InverseTransformLocation")
    public fun inverseTransformLocation(t: Transform, location: Vector): Vector

    @JsName("InverseTransformDirection")
    public fun inverseTransformDirection(t: Transform, direction: Vector): Vector

    @JsName("IntPoint_Zero")
    public fun intPointZero(): IntPoint

    @JsName("IntPoint_Up")
    public fun intPointUp(): IntPoint

    @JsName("IntPoint_Right")
    public fun intPointRight(): IntPoint

    @JsName("IntPoint_One")
    public fun intPointOne(): IntPoint

    @JsName("IntPoint_Left")
    public fun intPointLeft(): IntPoint

    @JsName("IntPoint_Down")
    public fun intPointDown(): IntPoint

    @JsName("InRange_IntInt")
    public fun inRangeIntInt(
      value: Number,
      min: Number,
      max: Number,
      inclusiveMin: Boolean,
      inclusiveMax: Boolean,
    ): Boolean

    @JsName("InRange_Int64Int64")
    public fun inRangeInt64Int64(
      value: Any,
      min: Any,
      max: Any,
      inclusiveMin: Boolean,
      inclusiveMax: Boolean,
    ): Boolean

    @JsName("InRange_FloatFloat")
    public fun inRangeFloatFloat(
      value: Any,
      min: Any,
      max: Any,
      inclusiveMin: Boolean,
      inclusiveMax: Boolean,
    ): Boolean

    @JsName("Hypotenuse")
    public fun hypotenuse(width: Any, height: Any): Any

    @JsName("HSVToRGBLinear")
    public fun hsvToRgbLinear(HSV: LinearColor): LinearColor

    @JsName("HSVToRGB_Vector")
    public fun hsvToRgbVector(HSV: LinearColor, RGB: LinearColor): RGBProvider

    @JsName("HSVToRGB")
    public fun hsvToRgb(
      h: Number,
      s: Number,
      v: Number,
      a: Number,
    ): LinearColor

    @JsName("GridSnap_Float")
    public fun gridSnapFloat(location: Any, gridSize: Any): Any

    @JsName("GreaterGreater_VectorRotator")
    public fun greaterGreaterVectorRotator(a: Vector, b: Rotator): Vector

    @JsName("GreaterEqual_TimespanTimespan")
    public fun greaterEqualTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("GreaterEqual_IntInt")
    public fun greaterEqualIntInt(a: Number, b: Number): Boolean

    @JsName("GreaterEqual_Int64Int64")
    public fun greaterEqualInt64Int64(a: Any, b: Any): Boolean

    @JsName("GreaterEqual_DoubleDouble")
    public fun greaterEqualDoubleDouble(a: Any, b: Any): Boolean

    @JsName("GreaterEqual_DateTimeDateTime")
    public fun greaterEqualDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("GreaterEqual_ByteByte")
    public fun greaterEqualByteByte(a: Number, b: Number): Boolean

    @JsName("Greater_TimespanTimespan")
    public fun greaterTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("Greater_IntInt")
    public fun greaterIntInt(a: Number, b: Number): Boolean

    @JsName("Greater_Int64Int64")
    public fun greaterInt64Int64(a: Any, b: Any): Boolean

    @JsName("Greater_DoubleDouble")
    public fun greaterDoubleDouble(a: Any, b: Any): Boolean

    @JsName("Greater_DateTimeDateTime")
    public fun greaterDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("Greater_ByteByte")
    public fun greaterByteByte(a: Number, b: Number): Boolean

    @JsName("GetYear")
    public fun getYear(a: DateTime): Number

    @JsName("GetYawPitchFromVector")
    public fun getYawPitchFromVector(
      inVec: Vector,
      yaw: Number,
      pitch: Number,
    ): Object550

    @JsName("GetVectorArrayAverage")
    public fun getVectorArrayAverage(vectors: Array<Vector>): Vector

    @JsName("GetUpVector")
    public fun getUpVector(inRot: Rotator): Vector

    @JsName("GetTotalSeconds")
    public fun getTotalSeconds(a: Timespan): Number

    @JsName("GetTotalMinutes")
    public fun getTotalMinutes(a: Timespan): Number

    @JsName("GetTotalMilliseconds")
    public fun getTotalMilliseconds(a: Timespan): Number

    @JsName("GetTotalHours")
    public fun getTotalHours(a: Timespan): Number

    @JsName("GetTotalDays")
    public fun getTotalDays(a: Timespan): Number

    @JsName("GetTimeOfDay")
    public fun getTimeOfDay(a: DateTime): Timespan

    @JsName("GetTAU")
    public fun getTau(): Any

    @JsName("GetSlopeDegreeAngles")
    public fun getSlopeDegreeAngles(
      myRightYAxis: Vector,
      floorNormal: Vector,
      upVector: Vector,
      outSlopePitchDegreeAngle: Number,
      outSlopeRollDegreeAngle: Number,
    ): Object549

    @JsName("GetSeconds")
    public fun getSeconds(a: Timespan): Number

    @JsName("GetSecond")
    public fun getSecond(a: DateTime): Number

    @JsName("GetRotated2D")
    public fun getRotated2d(a: Vector2d, angleDeg: Number): Vector2d

    @JsName("GetRightVector")
    public fun getRightVector(inRot: Rotator): Vector

    @JsName("GetReflectionVector")
    public fun getReflectionVector(direction: Vector, surfaceNormal: Vector): Vector

    @JsName("GetPointDistanceToSegment")
    public fun getPointDistanceToSegment(
      point: Vector,
      segmentStart: Vector,
      segmentEnd: Vector,
    ): Number

    @JsName("GetPointDistanceToLine")
    public fun getPointDistanceToLine(
      point: Vector,
      lineOrigin: Vector,
      lineDirection: Vector,
    ): Number

    @JsName("GetPI")
    public fun getPi(): Any

    @JsName("GetMonth")
    public fun getMonth(a: DateTime): Number

    @JsName("GetMinutes")
    public fun getMinutes(a: Timespan): Number

    @JsName("GetMinute")
    public fun getMinute(a: DateTime): Number

    @JsName("GetMinElement")
    public fun getMinElement(a: Vector): Any

    @JsName("GetMin2D")
    public fun getMin2d(a: Vector2d): Any

    @JsName("GetMilliseconds")
    public fun getMilliseconds(a: Timespan): Number

    @JsName("GetMillisecond")
    public fun getMillisecond(a: DateTime): Number

    @JsName("GetMaxElement")
    public fun getMaxElement(a: Vector): Any

    @JsName("GetMax2D")
    public fun getMax2d(a: Vector2d): Any

    @JsName("GetHours")
    public fun getHours(a: Timespan): Number

    @JsName("GetHour12")
    public fun getHour12(a: DateTime): Number

    @JsName("GetHour")
    public fun getHour(a: DateTime): Number

    @JsName("GetForwardVector")
    public fun getForwardVector(inRot: Rotator): Vector

    @JsName("GetDuration")
    public fun getDuration(a: Timespan): Timespan

    @JsName("GetDirectionUnitVector")
    public fun getDirectionUnitVector(from: Vector, to: Vector): Vector

    @JsName("GetDays")
    public fun getDays(a: Timespan): Number

    @JsName("GetDayOfYear")
    public fun getDayOfYear(a: DateTime): Number

    @JsName("GetDay")
    public fun getDay(a: DateTime): Number

    @JsName("GetDate")
    public fun getDate(a: DateTime): DateTime

    @JsName("GetAzimuthAndElevation")
    public fun getAzimuthAndElevation(
      inDirection: Vector,
      referenceFrame: Transform,
      azimuth: Number,
      elevation: Number,
    ): Object548

    @JsName("GetAxes")
    public fun getAxes(
      a: Rotator,
      x: Vector,
      y: Vector,
      z: Vector,
    ): AxesProvider

    @JsName("GetAbsMax2D")
    public fun getAbsMax2d(a: Vector2d): Any

    @JsName("GetAbs2D")
    public fun getAbs2d(a: Vector2d): Vector2d

    @JsName("FWrap")
    public fun fWrap(
      value: Any,
      min: Any,
      max: Any,
    ): Any

    @JsName("FTruncVector")
    public fun fTruncVector(inVector: Vector): IntVector

    @JsName("FTrunc64")
    public fun fTrunc64(a: Any): Any

    @JsName("FTrunc")
    public fun fTrunc(a: Any): Number

    @JsName("FromSeconds")
    public fun fromSeconds(seconds: Number): Timespan

    @JsName("FromMinutes")
    public fun fromMinutes(minutes: Number): Timespan

    @JsName("FromMilliseconds")
    public fun fromMilliseconds(milliseconds: Number): Timespan

    @JsName("FromHours")
    public fun fromHours(hours: Number): Timespan

    @JsName("FromDays")
    public fun fromDays(days: Number): Timespan

    @JsName("Fraction")
    public fun fraction(a: Any): Any

    @JsName("FMod64")
    public fun fMod64(
      dividend: Any,
      divisor: Any,
      remainder: Any,
    ): Object755

    @JsName("FMod")
    public fun fMod(
      dividend: Any,
      divisor: Any,
      remainder: Any,
    ): Object756

    @JsName("FMin")
    public fun fMin(a: Any, b: Any): Any

    @JsName("FMax")
    public fun fMax(a: Any, b: Any): Any

    @JsName("FloatSpringInterp")
    public fun floatSpringInterp(
      current: Number,
      target: Number,
      springState: FloatSpringState,
      stiffness: Number,
      criticalDampingFactor: Number,
      deltaTime: Number,
      mass: Number,
      targetVelocityAmount: Number,
      clamp: Boolean,
      minValue: Number,
      maxValue: Number,
      initializeFromTarget: Boolean,
    ): Object757

    @JsName("FixedTurn")
    public fun fixedTurn(
      inCurrent: Number,
      inDesired: Number,
      inDeltaRate: Number,
    ): Number

    @JsName("FInterpTo_Constant")
    public fun fInterpToConstant(
      current: Any,
      target: Any,
      deltaTime: Any,
      interpSpeed: Any,
    ): Any

    @JsName("FInterpTo")
    public fun fInterpTo(
      current: Any,
      target: Any,
      deltaTime: Any,
      interpSpeed: Any,
    ): Any

    @JsName("FInterpEaseInOut")
    public fun fInterpEaseInOut(
      a: Any,
      b: Any,
      alpha: Any,
      exponent: Any,
    ): Any

    @JsName("FindRelativeLookAtRotation")
    public fun findRelativeLookAtRotation(startTransform: Transform, targetLocation: Vector):
        Rotator

    @JsName("FindNearestPointsOnLineSegments")
    public fun findNearestPointsOnLineSegments(
      segment1Start: Vector,
      segment1End: Vector,
      segment2Start: Vector,
      segment2End: Vector,
      segment1Point: Vector,
      segment2Point: Vector,
    ): Object547

    @JsName("FindLookAtRotation")
    public fun findLookAtRotation(start: Vector, target: Vector): Rotator

    @JsName("FindClosestPointOnSegment")
    public fun findClosestPointOnSegment(
      point: Vector,
      segmentStart: Vector,
      segmentEnd: Vector,
    ): Vector

    @JsName("FindClosestPointOnLine")
    public fun findClosestPointOnLine(
      point: Vector,
      lineOrigin: Vector,
      lineDirection: Vector,
    ): Vector

    @JsName("FFloor64")
    public fun fFloor64(a: Any): Any

    @JsName("FFloor")
    public fun fFloor(a: Any): Number

    @JsName("FClamp")
    public fun fClamp(
      value: Any,
      min: Any,
      max: Any,
    ): Any

    @JsName("FCeil64")
    public fun fCeil64(a: Any): Any

    @JsName("FCeil")
    public fun fCeil(a: Any): Number

    @JsName("Exp")
    public fun exp(a: Any): Any

    @JsName("EqualExactly_VectorVector")
    public fun equalExactlyVectorVector(a: Vector, b: Vector): Boolean

    @JsName("EqualExactly_Vector4Vector4")
    public fun equalExactlyVector4Vector4(a: Vector4, b: Vector4): Boolean

    @JsName("EqualExactly_Vector2DVector2D")
    public fun equalExactlyVector2dVector2d(a: Vector2d, b: Vector2d): Boolean

    @JsName("EqualEqual_VectorVector")
    public fun equalEqualVectorVector(
      a: Vector,
      b: Vector,
      errorTolerance: Number,
    ): Boolean

    @JsName("EqualEqual_Vector4Vector4")
    public fun equalEqualVector4Vector4(
      a: Vector4,
      b: Vector4,
      errorTolerance: Number,
    ): Boolean

    @JsName("EqualEqual_Vector2DVector2D")
    public fun equalEqualVector2dVector2d(
      a: Vector2d,
      b: Vector2d,
      errorTolerance: Number,
    ): Boolean

    @JsName("EqualEqual_TransformTransform")
    public fun equalEqualTransformTransform(a: Transform, b: Transform): Boolean

    @JsName("EqualEqual_TimespanTimespan")
    public fun equalEqualTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("EqualEqual_RotatorRotator")
    public fun equalEqualRotatorRotator(
      a: Rotator,
      b: Rotator,
      errorTolerance: Number,
    ): Boolean

    @JsName("EqualEqual_QuatQuat")
    public fun equalEqualQuatQuat(
      a: Quat,
      b: Quat,
      tolerance: Number,
    ): Boolean

    @JsName("EqualEqual_ObjectObject")
    public fun equalEqualObjectObject(a: UObject, b: UObject): Boolean

    @JsName("EqualEqual_NameName")
    public fun equalEqualNameName(a: String, b: String): Boolean

    @JsName("EqualEqual_MatrixMatrix")
    public fun equalEqualMatrixMatrix(
      a: Matrix,
      b: Matrix,
      tolerance: Number,
    ): Boolean

    @JsName("EqualEqual_LinearColorLinearColor")
    public fun equalEqualLinearColorLinearColor(a: LinearColor, b: LinearColor): Boolean

    @JsName("EqualEqual_IntInt")
    public fun equalEqualIntInt(a: Number, b: Number): Boolean

    @JsName("EqualEqual_Int64Int64")
    public fun equalEqualInt64Int64(a: Any, b: Any): Boolean

    @JsName("EqualEqual_DoubleDouble")
    public fun equalEqualDoubleDouble(a: Any, b: Any): Boolean

    @JsName("EqualEqual_DateTimeDateTime")
    public fun equalEqualDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("EqualEqual_ClassClass")
    public fun equalEqualClassClass(a: UnrealEngineClass, b: UnrealEngineClass): Boolean

    @JsName("EqualEqual_ByteByte")
    public fun equalEqualByteByte(a: Number, b: Number): Boolean

    @JsName("EqualEqual_BoolBool")
    public fun equalEqualBoolBool(a: Boolean, b: Boolean): Boolean

    @JsName("Equal_IntPointIntPoint")
    public fun equalIntPointIntPoint(a: IntPoint, b: IntPoint): Boolean

    @JsName("Ease")
    public fun ease(
      a: Any,
      b: Any,
      alpha: Any,
      easingFunc: String,
      blendExp: Any,
      steps: Number,
    ): Any

    @JsName("DynamicWeightedMovingAverage_FVector")
    public fun dynamicWeightedMovingAverageFVector(
      currentSample: Vector,
      previousSample: Vector,
      maxDistance: Number,
      minWeight: Number,
      maxWeight: Number,
    ): Vector

    @JsName("DynamicWeightedMovingAverage_FRotator")
    public fun dynamicWeightedMovingAverageFRotator(
      currentSample: Rotator,
      previousSample: Rotator,
      maxDistance: Number,
      minWeight: Number,
      maxWeight: Number,
    ): Rotator

    @JsName("DynamicWeightedMovingAverage_Float")
    public fun dynamicWeightedMovingAverageFloat(
      currentSample: Number,
      previousSample: Number,
      maxDistance: Number,
      minWeight: Number,
      maxWeight: Number,
    ): Number

    @JsName("DotProduct2D")
    public fun dotProduct2d(a: Vector2d, b: Vector2d): Any

    @JsName("Dot_VectorVector")
    public fun dotVectorVector(a: Vector, b: Vector): Any

    @JsName("Divide_VectorVector")
    public fun divideVectorVector(a: Vector, b: Vector): Vector

    @JsName("Divide_VectorInt")
    public fun divideVectorInt(a: Vector, b: Number): Vector

    @JsName("Divide_VectorFloat")
    public fun divideVectorFloat(a: Vector, b: Any): Vector

    @JsName("Divide_Vector4Vector4")
    public fun divideVector4Vector4(a: Vector4, b: Vector4): Vector4

    @JsName("Divide_Vector2DVector2D")
    public fun divideVector2dVector2d(a: Vector2d, b: Vector2d): Vector2d

    @JsName("Divide_Vector2DFloat")
    public fun divideVector2dFloat(a: Vector2d, b: Any): Vector2d

    @JsName("Divide_TimespanFloat")
    public fun divideTimespanFloat(a: Timespan, scalar: Number): Timespan

    @JsName("Divide_LinearColorLinearColor")
    public fun divideLinearColorLinearColor(a: LinearColor, b: LinearColor): LinearColor

    @JsName("Divide_IntPointIntPoint")
    public fun divideIntPointIntPoint(a: IntPoint, b: IntPoint): IntPoint

    @JsName("Divide_IntPointInt")
    public fun divideIntPointInt(a: IntPoint, b: Number): IntPoint

    @JsName("Divide_IntInt")
    public fun divideIntInt(a: Number, b: Number): Number

    @JsName("Divide_Int64Int64")
    public fun divideInt64Int64(a: Any, b: Any): Any

    @JsName("Divide_DoubleDouble")
    public fun divideDoubleDouble(a: Any, b: Any): Any

    @JsName("Divide_ByteByte")
    public fun divideByteByte(a: Number, b: Number): Number

    @JsName("DistanceSquared2D")
    public fun distanceSquared2d(v1: Vector2d, v2: Vector2d): Any

    @JsName("Distance2D")
    public fun distance2d(v1: Vector2d, v2: Vector2d): Any

    @JsName("DegTan")
    public fun degTan(a: Any): Any

    @JsName("DegSin")
    public fun degSin(a: Any): Any

    @JsName("DegreesToRadians")
    public fun degreesToRadians(a: Any): Any

    @JsName("DegCos")
    public fun degCos(a: Any): Any

    @JsName("DegAtan2")
    public fun degAtan2(y: Any, x: Any): Any

    @JsName("DegAtan")
    public fun degAtan(a: Any): Any

    @JsName("DegAsin")
    public fun degAsin(a: Any): Any

    @JsName("DegAcos")
    public fun degAcos(a: Any): Any

    @JsName("DaysInYear")
    public fun daysInYear(year: Number): Number

    @JsName("DaysInMonth")
    public fun daysInMonth(year: Number, month: Number): Number

    @JsName("DateTimeMinValue")
    public fun dateTimeMinValue(): DateTime

    @JsName("DateTimeMaxValue")
    public fun dateTimeMaxValue(): DateTime

    @JsName("DateTimeFromString")
    public fun dateTimeFromString(dateTimeString: String, result: DateTime): Object758

    @JsName("DateTimeFromIsoString")
    public fun dateTimeFromIsoString(isoString: String, result: DateTime): Object758

    @JsName("CrossProduct2D")
    public fun crossProduct2d(a: Vector2d, b: Vector2d): Any

    @JsName("Cross_VectorVector")
    public fun crossVectorVector(a: Vector, b: Vector): Vector

    @JsName("CreateVectorFromYawPitch")
    public fun createVectorFromYawPitch(
      yaw: Number,
      pitch: Number,
      length: Number,
    ): Vector

    @JsName("Cos")
    public fun cos(a: Any): Any

    @JsName("ConvertTransformToRelative")
    public fun convertTransformToRelative(transform: Transform, parentTransform: Transform):
        Transform

    @JsName("Conv_VectorToVector2D")
    public fun convertVectorToVector2d(inVector: Vector): Vector2d

    @JsName("Conv_VectorToTransform")
    public fun convertVectorToTransform(inLocation: Vector): Transform

    @JsName("Conv_VectorToRotator")
    public fun convertVectorToRotator(inVec: Vector): Rotator

    @JsName("Conv_VectorToQuaternion")
    public fun convertVectorToQuaternion(inVec: Vector): Quat

    @JsName("Conv_VectorToLinearColor")
    public fun convertVectorToLinearColor(inVec: Vector): LinearColor

    @JsName("Conv_Vector4ToVector")
    public fun convertVector4ToVector(inVector4: Vector4): Vector

    @JsName("Conv_Vector4ToRotator")
    public fun convertVector4ToRotator(inVec: Vector4): Rotator

    @JsName("Conv_Vector4ToQuaternion")
    public fun convertVector4ToQuaternion(inVec: Vector4): Quat

    @JsName("Conv_Vector2DToVector")
    public fun convertVector2dToVector(inVector2d: Vector2d, z: Number): Vector

    @JsName("Conv_Vector2DToIntPoint")
    public fun convertVector2dToIntPoint(inVector2d: Vector2d): IntPoint

    @JsName("Conv_TransformToMatrix")
    public fun convertTransformToMatrix(transform: Transform): Matrix

    @JsName("Conv_RotatorToVector")
    public fun convertRotatorToVector(inRot: Rotator): Vector

    @JsName("Conv_RotatorToTransform")
    public fun convertRotatorToTransform(inRotator: Rotator): Transform

    @JsName("Conv_RotatorToQuaternion")
    public fun convertRotatorToQuaternion(inRot: Rotator): Quat

    @JsName("Conv_MatrixToTransform")
    public fun convertMatrixToTransform(inMatrix: Matrix): Transform

    @JsName("Conv_MatrixToRotator")
    public fun convertMatrixToRotator(inMatrix: Matrix): Rotator

    @JsName("Conv_LinearColorToVector")
    public fun convertLinearColorToVector(inLinearColor: LinearColor): Vector

    @JsName("Conv_LinearColorToColor")
    public fun convertLinearColorToColor(inLinearColor: LinearColor, inUseSrgb: Boolean): Color

    @JsName("Conv_IntVectorToVector")
    public fun convertIntVectorToVector(inIntVector: IntVector): Vector

    @JsName("Conv_IntToVector")
    public fun convertIntToVector(inInt: Number): Vector

    @JsName("Conv_IntToIntVector")
    public fun convertIntToIntVector(inInt: Number): IntVector

    @JsName("Conv_IntToInt64")
    public fun convertIntToInt64(inInt: Number): Any

    @JsName("Conv_IntToFloat")
    public fun convertIntToFloat(inInt: Number): Number

    @JsName("Conv_IntToDouble")
    public fun convertIntToDouble(inInt: Number): Any

    @JsName("Conv_IntToByte")
    public fun convertIntToByte(inInt: Number): Number

    @JsName("Conv_IntToBool")
    public fun convertIntToBool(inInt: Number): Boolean

    @JsName("Conv_IntPointToVector2D")
    public fun convertIntPointToVector2d(inIntPoint: IntPoint): Vector2d

    @JsName("Conv_Int64ToInt")
    public fun convertInt64ToInt(inInt: Any): Number

    @JsName("Conv_Int64ToDouble")
    public fun convertInt64ToDouble(inInt: Any): Any

    @JsName("Conv_Int64ToByte")
    public fun convertInt64ToByte(inInt: Any): Number

    @JsName("Conv_FloatToVector")
    public fun convertFloatToVector(inFloat: Number): Vector

    @JsName("Conv_FloatToLinearColor")
    public fun convertFloatToLinearColor(inFloat: Number): LinearColor

    @JsName("Conv_FloatToDouble")
    public fun convertFloatToDouble(inFloat: Number): Any

    @JsName("Conv_DoubleToVector")
    public fun convertDoubleToVector(inDouble: Any): Vector

    @JsName("Conv_DoubleToLinearColor")
    public fun convertDoubleToLinearColor(inDouble: Any): LinearColor

    @JsName("Conv_DoubleToInt64")
    public fun convertDoubleToInt64(inDouble: Any): Any

    @JsName("Conv_DoubleToFloat")
    public fun convertDoubleToFloat(inDouble: Any): Number

    @JsName("Conv_ColorToLinearColor")
    public fun convertColorToLinearColor(inColor: Color): LinearColor

    @JsName("Conv_ByteToInt64")
    public fun convertByteToInt64(inByte: Number): Any

    @JsName("Conv_ByteToInt")
    public fun convertByteToInt(inByte: Number): Number

    @JsName("Conv_ByteToFloat")
    public fun convertByteToFloat(inByte: Number): Number

    @JsName("Conv_ByteToDouble")
    public fun convertByteToDouble(inByte: Number): Any

    @JsName("Conv_BoolToInt")
    public fun convertBoolToInt(inBool: Boolean): Number

    @JsName("Conv_BoolToFloat")
    public fun convertBoolToFloat(inBool: Boolean): Number

    @JsName("Conv_BoolToByte")
    public fun convertBoolToByte(inBool: Boolean): Number

    @JsName("ComposeTransforms")
    public fun composeTransforms(a: Transform, b: Transform): Transform

    @JsName("ComposeRotators")
    public fun composeRotators(a: Rotator, b: Rotator): Rotator

    @JsName("ClassIsChildOf")
    public fun classIsChildOf(testClass: UnrealEngineClass, parentClass: UnrealEngineClass): Boolean

    @JsName("ClampVectorSize")
    public fun clampVectorSize(
      a: Vector,
      min: Any,
      max: Any,
    ): Vector

    @JsName("ClampInt64")
    public fun clampInt64(
      value: Any,
      min: Any,
      max: Any,
    ): Any

    @JsName("ClampAxis")
    public fun clampAxis(angle: Number): Number

    @JsName("ClampAxes2D")
    public fun clampAxes2d(
      a: Vector2d,
      minAxisVal: Any,
      maxAxisVal: Any,
    ): Vector2d

    @JsName("ClampAngle")
    public fun clampAngle(
      angleDegrees: Any,
      minAngleDegrees: Any,
      maxAngleDegrees: Any,
    ): Any

    @JsName("Clamp")
    public fun clamp(
      value: Number,
      min: Number,
      max: Number,
    ): Number

    @JsName("CInterpTo")
    public fun cInterpTo(
      current: LinearColor,
      target: LinearColor,
      deltaTime: Number,
      interpSpeed: Number,
    ): LinearColor

    @JsName("BreakVector_NetQuantizeNormal")
    public fun breakVectorNetQuantizeNormal(
      inVec: VectorNetQuantizeNormal,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("BreakVector_NetQuantize100")
    public fun breakVectorNetQuantize100(
      inVec: VectorNetQuantize100,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("BreakVector_NetQuantize10")
    public fun breakVectorNetQuantize10(
      inVec: VectorNetQuantize10,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("BreakVector_NetQuantize")
    public fun breakVectorNetQuantize(
      inVec: VectorNetQuantize,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("BreakVector4")
    public fun breakVector4(
      inVec: Vector4,
      x: Any,
      y: Any,
      z: Any,
      w: Any,
    ): Vector4ComponentsProvider

    @JsName("BreakVector3f")
    public fun breakVector3f(
      inVec: Vector3f,
      x: Number,
      y: Number,
      z: Number,
    ): Object27

    @JsName("BreakVector2D")
    public fun breakVector2d(
      inVec: Vector2d,
      x: Any,
      y: Any,
    ): Object542

    @JsName("BreakVector")
    public fun breakVector(
      inVec: Vector,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("BreakTransform")
    public fun breakTransform(
      inTransform: Transform,
      location: Vector,
      rotation: Rotator,
      scale: Vector,
    ): Object15

    @JsName("BreakTimespan2")
    public fun breakTimespan2(
      inTimespan: Timespan,
      days: Number,
      hours: Number,
      minutes: Number,
      seconds: Number,
      fractionNano: Number,
    ): Object311

    @JsName("BreakTimespan")
    public fun breakTimespan(
      inTimespan: Timespan,
      days: Number,
      hours: Number,
      minutes: Number,
      seconds: Number,
      milliseconds: Number,
    ): Object310

    @JsName("BreakRotIntoAxes")
    public fun breakRotIntoAxes(
      inRot: Rotator,
      x: Vector,
      y: Vector,
      z: Vector,
    ): AxesProvider

    @JsName("BreakRotator")
    public fun breakRotator(
      inRot: Rotator,
      roll: Number,
      pitch: Number,
      yaw: Number,
    ): RotationProvider

    @JsName("BreakRandomStream")
    public fun breakRandomStream(inRandomStream: RandomStream, initialSeed: Number):
        InitialSeedProvider

    @JsName("BreakQuat")
    public fun breakQuat(
      inQuat: Quat,
      x: Number,
      y: Number,
      z: Number,
      w: Number,
    ): Object7

    @JsName("BreakQualifiedFrameTime")
    public fun breakQualifiedFrameTime(
      inFrameTime: QualifiedFrameTime,
      frame: FrameNumber,
      frameRate: FrameRate,
      subFrame: Number,
    ): Object82

    @JsName("BreakFrameRate")
    public fun breakFrameRate(
      inFrameRate: FrameRate,
      numerator: Number,
      denominator: Number,
    ): Object79

    @JsName("BreakDateTime")
    public fun breakDateTime(
      inDateTime: DateTime,
      year: Number,
      month: Number,
      day: Number,
      hour: Number,
      minute: Number,
      second: Number,
      millisecond: Number,
    ): Object621

    @JsName("BreakColor")
    public fun breakColor(
      inColor: LinearColor,
      r: Number,
      g: Number,
      b: Number,
      a: Number,
    ): Object17

    @JsName("BreakBoxSphereBounds")
    public fun breakBoxSphereBounds(
      inBoxSphereBounds: BoxSphereBounds,
      origin: Vector,
      boxExtent: Vector,
      sphereRadius: Number,
    ): Object153

    @JsName("BooleanXOR")
    public fun booleanXor(a: Boolean, b: Boolean): Boolean

    @JsName("BooleanOR")
    public fun booleanOr(a: Boolean, b: Boolean): Boolean

    @JsName("BooleanNOR")
    public fun booleanNor(a: Boolean, b: Boolean): Boolean

    @JsName("BooleanNAND")
    public fun booleanNand(a: Boolean, b: Boolean): Boolean

    @JsName("BooleanAND")
    public fun booleanAnd(a: Boolean, b: Boolean): Boolean

    @JsName("BMin")
    public fun bMin(a: Number, b: Number): Number

    @JsName("BMax")
    public fun bMax(a: Number, b: Number): Number

    @JsName("Atan2")
    public fun atan2(y: Any, x: Any): Any

    @JsName("Atan")
    public fun atan(a: Any): Any

    @JsName("Asin")
    public fun asin(a: Any): Any

    @JsName("And_IntInt")
    public fun andIntInt(a: Number, b: Number): Number

    @JsName("And_Int64Int64")
    public fun andInt64Int64(a: Any, b: Any): Any

    @JsName("Add_VectorVector")
    public fun addVectorVector(a: Vector, b: Vector): Vector

    @JsName("Add_VectorInt")
    public fun addVectorInt(a: Vector, b: Number): Vector

    @JsName("Add_VectorFloat")
    public fun addVectorFloat(a: Vector, b: Any): Vector

    @JsName("Add_Vector4Vector4")
    public fun addVector4Vector4(a: Vector4, b: Vector4): Vector4

    @JsName("Add_Vector2DVector2D")
    public fun addVector2dVector2d(a: Vector2d, b: Vector2d): Vector2d

    @JsName("Add_Vector2DFloat")
    public fun addVector2dFloat(a: Vector2d, b: Any): Vector2d

    @JsName("Add_TimespanTimespan")
    public fun addTimespanTimespan(a: Timespan, b: Timespan): Timespan

    @JsName("Add_QuatQuat")
    public fun addQuatQuat(a: Quat, b: Quat): Quat

    @JsName("Add_MatrixMatrix")
    public fun addMatrixMatrix(a: Matrix, b: Matrix): Matrix

    @JsName("Add_LinearColorLinearColor")
    public fun addLinearColorLinearColor(a: LinearColor, b: LinearColor): LinearColor

    @JsName("Add_IntPointIntPoint")
    public fun addIntPointIntPoint(a: IntPoint, b: IntPoint): IntPoint

    @JsName("Add_IntPointInt")
    public fun addIntPointInt(a: IntPoint, b: Number): IntPoint

    @JsName("Add_IntInt")
    public fun addIntInt(a: Number, b: Number): Number

    @JsName("Add_Int64Int64")
    public fun addInt64Int64(a: Any, b: Any): Any

    @JsName("Add_DoubleDouble")
    public fun addDoubleDouble(a: Any, b: Any): Any

    @JsName("Add_DateTimeTimespan")
    public fun addDateTimeTimespan(a: DateTime, b: Timespan): DateTime

    @JsName("Add_DateTimeDateTime")
    public fun addDateTimeDateTime(a: DateTime, b: DateTime): DateTime

    @JsName("Add_ByteByte")
    public fun addByteByte(a: Number, b: Number): Number

    @JsName("Acos")
    public fun acos(a: Any): Any

    @JsName("Abs_Int64")
    public fun absInt64(a: Any): Any

    @JsName("Abs_Int")
    public fun absInt(a: Number): Number

    @JsName("Abs")
    public fun abs(a: Any): Any

    @JsName("C")
    public fun copy(other: UObject): KismetMathLibrary

    @JsName("C")
    public fun copy(other: Any): KismetMathLibrary
  }
}

@JsName("T$759")
public external interface DataProvider {
  @JsName("Data")
  public var data: Number
}

public open external class KismetNodeHelperLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetNodeHelperLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetNodeHelperLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetNodeHelperLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetNodeHelperLibrary

    @JsName("MarkBit")
    public fun markBit(data: Number, index: Number): DataProvider

    @JsName("HasUnmarkedBit")
    public fun hasUnmarkedBit(data: Number, numBits: Number): Boolean

    @JsName("HasMarkedBit")
    public fun hasMarkedBit(data: Number, numBits: Number): Boolean

    @JsName("GetValidValue")
    public fun getValidValue(enum: Enum, enumeratorValue: Number): Number

    @JsName("GetUnmarkedBit")
    public fun getUnmarkedBit(
      data: Number,
      startIdx: Number,
      numBits: Number,
      random: Boolean,
    ): Number

    @JsName("GetRandomUnmarkedBit")
    public fun getRandomUnmarkedBit(
      data: Number,
      startIdx: Number,
      numBits: Number,
    ): Number

    @JsName("GetFirstUnmarkedBit")
    public fun getFirstUnmarkedBit(
      data: Number,
      startIdx: Number,
      numBits: Number,
    ): Number

    @JsName("GetEnumeratorValueFromIndex")
    public fun getEnumeratorValueFromIndex(enum: Enum, enumeratorIndex: Number): Number

    @JsName("GetEnumeratorUserFriendlyName")
    public fun getEnumeratorUserFriendlyName(enum: Enum, enumeratorValue: Number): String

    @JsName("GetEnumeratorName")
    public fun getEnumeratorName(enum: Enum, enumeratorValue: Number): String

    @JsName("ClearBit")
    public fun clearBit(data: Number, index: Number): DataProvider

    @JsName("ClearAllBits")
    public fun clearAllBits(data: Number): DataProvider

    @JsName("BitIsMarked")
    public fun bitIsMarked(data: Number, index: Number): Boolean

    @JsName("C")
    public fun copy(other: UObject): KismetNodeHelperLibrary

    @JsName("C")
    public fun copy(other: Any): KismetNodeHelperLibrary
  }
}

public open external class KismetRenderingLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetRenderingLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetRenderingLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetRenderingLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetRenderingLibrary

    @JsName("SetCastInsetShadowForAllAttachments")
    public fun setCastInsetShadowForAllAttachments(
      primitiveComponent: PrimitiveComponent,
      castInsetShadow: Boolean,
      lightAttachmentsAsGroup: Boolean,
    ): Unit

    @JsName("RenderTargetCreateStaticTexture2DEditorOnly")
    public fun renderTargetCreateStaticTexture2dEditorOnly(
      renderTarget: TextureRenderTarget2d,
      name: String,
      compressionSettings: String,
      mipSettings: String,
    ): Texture2d

    @JsName("ReleaseRenderTarget2D")
    public fun releaseRenderTarget2d(textureRenderTarget: TextureRenderTarget2d): Unit

    @JsName("ReadRenderTargetUV")
    public fun readRenderTargetUv(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      u: Number,
      v: Number,
    ): Color

    @JsName("ReadRenderTargetRawUVArea")
    public fun readRenderTargetRawUvArea(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      area: Box2d,
      normalize: Boolean,
    ): Array<LinearColor>

    @JsName("ReadRenderTargetRawUV")
    public fun readRenderTargetRawUv(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      u: Number,
      v: Number,
      normalize: Boolean,
    ): LinearColor

    @JsName("ReadRenderTargetRawPixelArea")
    public fun readRenderTargetRawPixelArea(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
      normalize: Boolean,
    ): Array<LinearColor>

    @JsName("ReadRenderTargetRawPixel")
    public fun readRenderTargetRawPixel(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      x: Number,
      y: Number,
      normalize: Boolean,
    ): LinearColor

    @JsName("ReadRenderTargetRaw")
    public fun readRenderTargetRaw(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      outLinearSamples: Array<LinearColor>,
      normalize: Boolean,
    ): Object341

    @JsName("ReadRenderTargetPixel")
    public fun readRenderTargetPixel(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      x: Number,
      y: Number,
    ): Color

    @JsName("ReadRenderTarget")
    public fun readRenderTarget(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      outSamples: Array<Color>,
      normalize: Boolean,
    ): Object340

    @JsName("MakeSkinWeightInfo")
    public fun makeSkinWeightInfo(
      bone0: Number,
      weight0: Number,
      bone1: Number,
      weight1: Number,
      bone2: Number,
      weight2: Number,
      bone3: Number,
      weight3: Number,
    ): SkelMeshSkinWeightInfo

    @JsName("ImportFileAsTexture2D")
    public fun importFileAsTexture2d(worldContextObject: UObject, filename: String): Texture2d

    @JsName("ImportBufferAsTexture2D")
    public fun importBufferAsTexture2d(worldContextObject: UObject, buffer: Array<Number>):
        Texture2d

    @JsName("ExportTexture2D")
    public fun exportTexture2d(
      worldContextObject: UObject,
      texture: Texture2d,
      filePath: String,
      filename: String,
    ): Unit

    @JsName("ExportRenderTarget")
    public fun exportRenderTarget(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      filePath: String,
      filename: String,
    ): Unit

    @JsName("EndDrawCanvasToRenderTarget")
    public fun endDrawCanvasToRenderTarget(worldContextObject: UObject,
        context: DrawToRenderTargetContext): Unit

    @JsName("DrawMaterialToRenderTarget")
    public fun drawMaterialToRenderTarget(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      material: MaterialInterface,
    ): Unit

    @JsName("CreateRenderTargetVolume")
    public fun createRenderTargetVolume(
      worldContextObject: UObject,
      width: Number,
      height: Number,
      depth: Number,
      format: String,
      clearColor: LinearColor,
      autoGenerateMipMaps: Boolean,
    ): TextureRenderTargetVolume

    @JsName("CreateRenderTarget2DArray")
    public fun createRenderTarget2dArray(
      worldContextObject: UObject,
      width: Number,
      height: Number,
      slices: Number,
      format: String,
      clearColor: LinearColor,
      autoGenerateMipMaps: Boolean,
    ): TextureRenderTarget2dArray

    @JsName("CreateRenderTarget2D")
    public fun createRenderTarget2d(
      worldContextObject: UObject,
      width: Number,
      height: Number,
      format: String,
      clearColor: LinearColor,
      autoGenerateMipMaps: Boolean,
    ): TextureRenderTarget2d

    @JsName("ConvertRenderTargetToTexture2DEditorOnly")
    public fun convertRenderTargetToTexture2dEditorOnly(
      worldContextObject: UObject,
      renderTarget: TextureRenderTarget2d,
      texture: Texture2d,
    ): Unit

    @JsName("ClearRenderTarget2D")
    public fun clearRenderTarget2d(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      clearColor: LinearColor,
    ): Unit

    @JsName("CalculateProjectionMatrix")
    public fun calculateProjectionMatrix(minimalViewInfo: MinimalViewInfo): Matrix

    @JsName("BreakSkinWeightInfo")
    public fun breakSkinWeightInfo(
      inWeight: SkelMeshSkinWeightInfo,
      bone0: Number,
      weight0: Number,
      bone1: Number,
      weight1: Number,
      bone2: Number,
      weight2: Number,
      bone3: Number,
      weight3: Number,
    ): Object181

    @JsName("BeginDrawCanvasToRenderTarget")
    public fun beginDrawCanvasToRenderTarget(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      canvas: Canvas,
      size: Vector2d,
      context: DrawToRenderTargetContext,
    ): Object339

    @JsName("C")
    public fun copy(other: UObject): KismetRenderingLibrary

    @JsName("C")
    public fun copy(other: Any): KismetRenderingLibrary
  }
}

@JsName("ESearchCase")
public external object SearchCase {
  public var CaseSensitive: String

  public var IgnoreCase: String

  @JsName("ESearchCase_MAX")
  public var Max: String
}

@JsName("ESearchDir")
public external object SearchDir {
  @JsName("FromStart")
  public var Start: String

  @JsName("FromEnd")
  public var End: String

  @JsName("ESearchDir_MAX")
  public var Max: String
}

@JsName("T$762")
public external interface Object762 {
  @JsName("LeftS")
  public var leftS: String

  @JsName("RightS")
  public var rightS: String

  @JsName("$")
  public var value: Boolean
}

@JsName("T$763")
public external interface Object763 {
  @JsName("SourceString")
  public var sourceString: String

  @JsName("$")
  public var value: Number
}

@JsName("T$764")
public external interface Object764 {
  public var inArray: Array<String>

  @JsName("$")
  public var value: Number
}

@JsName("T$765")
public external interface Object765 {
  @JsName("OutConvertedVector")
  public var outConvertedVector: Vector3f

  @JsName("OutIsValid")
  public var outIsValid: Boolean
}

@JsName("T$766")
public external interface Object766 {
  @JsName("OutConvertedVector2D")
  public var outConvertedVector2d: Vector2d

  @JsName("OutIsValid")
  public var outIsValid: Boolean
}

@JsName("T$767")
public external interface Object767 {
  @JsName("OutConvertedVector")
  public var outConvertedVector: Vector

  @JsName("OutIsValid")
  public var outIsValid: Boolean
}

@JsName("T$768")
public external interface Object768 {
  @JsName("OutConvertedRotator")
  public var outConvertedRotator: Rotator

  @JsName("OutIsValid")
  public var outIsValid: Boolean
}

@JsName("T$769")
public external interface Object769 {
  @JsName("OutConvertedColor")
  public var outConvertedColor: LinearColor

  @JsName("OutIsValid")
  public var outIsValid: Boolean
}

public open external class KismetStringLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetStringLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetStringLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetStringLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetStringLibrary

    @JsName("TrimTrailing")
    public fun trimTrailing(sourceString: String): String

    @JsName("Trim")
    public fun trim(sourceString: String): String

    @JsName("ToUpper")
    public fun toUpper(sourceString: String): String

    @JsName("ToLower")
    public fun toLower(sourceString: String): String

    @JsName("TimeSecondsToString")
    public fun timeSecondsToString(inSeconds: Number): String

    @JsName("StartsWith")
    public fun startsWith(
      sourceString: String,
      inPrefix: String,
      searchCase: String,
    ): Boolean

    @JsName("Split")
    public fun split(
      sourceString: String,
      inStr: String,
      leftS: String,
      rightS: String,
      searchCase: String,
      searchDir: String,
    ): Object762

    @JsName("RightPad")
    public fun rightPad(sourceString: String, chCount: Number): String

    @JsName("RightChop")
    public fun rightChop(sourceString: String, count: Number): String

    @JsName("Right")
    public fun right(sourceString: String, count: Number): String

    @JsName("Reverse")
    public fun reverse(sourceString: String): String

    @JsName("ReplaceInline")
    public fun replaceInline(
      sourceString: String,
      searchText: String,
      replacementText: String,
      searchCase: String,
    ): Object763

    @JsName("Replace")
    public fun replace(
      sourceString: String,
      from: String,
      to: String,
      searchCase: String,
    ): String

    @JsName("ParseIntoArray")
    public fun parseIntoArray(
      sourceString: String,
      delimiter: String,
      cullEmptyStrings: Boolean,
    ): Array<String>

    @JsName("NotEqual_StrStr")
    public fun notEqualStrStr(a: String, b: String): Boolean

    @JsName("NotEqual_StriStri")
    public fun notEqualStriStri(a: String, b: String): Boolean

    @JsName("Mid")
    public fun mid(
      sourceString: String,
      start: Number,
      count: Number,
    ): String

    @JsName("MatchesWildcard")
    public fun matchesWildcard(
      sourceString: String,
      wildcard: String,
      searchCase: String,
    ): Boolean

    @JsName("Len")
    public fun len(s: String): Number

    @JsName("LeftPad")
    public fun leftPad(sourceString: String, chCount: Number): String

    @JsName("LeftChop")
    public fun leftChop(sourceString: String, count: Number): String

    @JsName("Left")
    public fun left(sourceString: String, count: Number): String

    @JsName("JoinStringArray")
    public fun joinStringArray(sourceArray: Array<String>, separator: String): String

    @JsName("IsNumeric")
    public fun isNumeric(sourceString: String): Boolean

    @JsName("IsEmpty")
    public fun isEmpty(inString: String): Boolean

    @JsName("GetSubstring")
    public fun getSubstring(
      sourceString: String,
      startIndex: Number,
      length: Number,
    ): String

    @JsName("GetCharacterAsNumber")
    public fun getCharacterAsNumber(sourceString: String, index: Number): Number

    @JsName("GetCharacterArrayFromString")
    public fun getCharacterArrayFromString(sourceString: String): Array<String>

    @JsName("FindSubstring")
    public fun findSubstring(
      searchIn: String,
      substring: String,
      useCase: Boolean,
      searchFromEnd: Boolean,
      startPosition: Number,
    ): Number

    @JsName("EqualEqual_StrStr")
    public fun equalEqualStrStr(a: String, b: String): Boolean

    @JsName("EqualEqual_StriStri")
    public fun equalEqualStriStri(a: String, b: String): Boolean

    @JsName("EndsWith")
    public fun endsWith(
      sourceString: String,
      inSuffix: String,
      searchCase: String,
    ): Boolean

    @JsName("CullArray")
    public fun cullArray(sourceString: String, inArray: Array<String>): Object764

    @JsName("Conv_VectorToString")
    public fun convertVectorToString(inVec: Vector): String

    @JsName("Conv_Vector3fToString")
    public fun convertVector3fToString(inVec: Vector3f): String

    @JsName("Conv_Vector2dToString")
    public fun convertVector2dToString(inVec: Vector2d): String

    @JsName("Conv_TransformToString")
    public fun convertTransformToString(inTrans: Transform): String

    @JsName("Conv_StringToVector3f")
    public fun convertStringToVector3f(
      inString: String,
      outConvertedVector: Vector3f,
      outIsValid: Boolean,
    ): Object765

    @JsName("Conv_StringToVector2D")
    public fun convertStringToVector2d(
      inString: String,
      outConvertedVector2d: Vector2d,
      outIsValid: Boolean,
    ): Object766

    @JsName("Conv_StringToVector")
    public fun convertStringToVector(
      inString: String,
      outConvertedVector: Vector,
      outIsValid: Boolean,
    ): Object767

    @JsName("Conv_StringToRotator")
    public fun convertStringToRotator(
      inString: String,
      outConvertedRotator: Rotator,
      outIsValid: Boolean,
    ): Object768

    @JsName("Conv_StringToName")
    public fun convertStringToName(inString: String): String

    @JsName("Conv_StringToInt")
    public fun convertStringToInt(inString: String): Number

    @JsName("Conv_StringToDouble")
    public fun convertStringToDouble(inString: String): Any

    @JsName("Conv_StringToColor")
    public fun convertStringToColor(
      inString: String,
      outConvertedColor: LinearColor,
      outIsValid: Boolean,
    ): Object769

    @JsName("Conv_RotatorToString")
    public fun convertRotatorToString(inRot: Rotator): String

    @JsName("Conv_ObjectToString")
    public fun convertObjectToString(inObj: UObject): String

    @JsName("Conv_NameToString")
    public fun convertNameToString(inName: String): String

    @JsName("Conv_MatrixToString")
    public fun convertMatrixToString(inMatrix: Matrix): String

    @JsName("Conv_IntVectorToString")
    public fun convertIntVectorToString(inIntVec: IntVector): String

    @JsName("Conv_IntToString")
    public fun convertIntToString(inInt: Number): String

    @JsName("Conv_IntPointToString")
    public fun convertIntPointToString(inIntPoint: IntPoint): String

    @JsName("Conv_Int64ToString")
    public fun convertInt64ToString(inInt: Any): String

    @JsName("Conv_DoubleToString")
    public fun convertDoubleToString(inDouble: Any): String

    @JsName("Conv_ColorToString")
    public fun convertColorToString(inColor: LinearColor): String

    @JsName("Conv_ByteToString")
    public fun convertByteToString(inByte: Number): String

    @JsName("Conv_BoolToString")
    public fun convertBoolToString(inBool: Boolean): String

    @JsName("Contains")
    public fun contains(
      searchIn: String,
      substring: String,
      useCase: Boolean,
      searchFromEnd: Boolean,
    ): Boolean

    @JsName("Concat_StrStr")
    public fun concatStrStr(a: String, b: String): String

    @JsName("BuildString_Vector2d")
    public fun buildStringVector2d(
      appendTo: String,
      prefix: String,
      inVector2d: Vector2d,
      suffix: String,
    ): String

    @JsName("BuildString_Vector")
    public fun buildStringVector(
      appendTo: String,
      prefix: String,
      inVector: Vector,
      suffix: String,
    ): String

    @JsName("BuildString_Rotator")
    public fun buildStringRotator(
      appendTo: String,
      prefix: String,
      inRot: Rotator,
      suffix: String,
    ): String

    @JsName("BuildString_Object")
    public fun buildStringObject(
      appendTo: String,
      prefix: String,
      inObj: UObject,
      suffix: String,
    ): String

    @JsName("BuildString_Name")
    public fun buildStringName(
      appendTo: String,
      prefix: String,
      inName: String,
      suffix: String,
    ): String

    @JsName("BuildString_IntVector")
    public fun buildStringIntVector(
      appendTo: String,
      prefix: String,
      inIntVector: IntVector,
      suffix: String,
    ): String

    @JsName("BuildString_Int")
    public fun buildStringInt(
      appendTo: String,
      prefix: String,
      inInt: Number,
      suffix: String,
    ): String

    @JsName("BuildString_Double")
    public fun buildStringDouble(
      appendTo: String,
      prefix: String,
      inDouble: Any,
      suffix: String,
    ): String

    @JsName("BuildString_Color")
    public fun buildStringColor(
      appendTo: String,
      prefix: String,
      inColor: LinearColor,
      suffix: String,
    ): String

    @JsName("BuildString_Bool")
    public fun buildStringBool(
      appendTo: String,
      prefix: String,
      inBool: Boolean,
      suffix: String,
    ): String

    @JsName("C")
    public fun copy(other: UObject): KismetStringLibrary

    @JsName("C")
    public fun copy(other: Any): KismetStringLibrary
  }
}

public open external class KismetStringTableLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetStringTableLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetStringTableLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetStringTableLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetStringTableLibrary

    @JsName("IsRegisteredTableId")
    public fun isRegisteredTableId(tableId: String): Boolean

    @JsName("IsRegisteredTableEntry")
    public fun isRegisteredTableEntry(tableId: String, key: String): Boolean

    @JsName("GetTableNamespace")
    public fun getTableNamespace(tableId: String): String

    @JsName("GetTableEntrySourceString")
    public fun getTableEntrySourceString(tableId: String, key: String): String

    @JsName("GetTableEntryMetaData")
    public fun getTableEntryMetaData(
      tableId: String,
      key: String,
      metaDataId: String,
    ): String

    @JsName("GetRegisteredStringTables")
    public fun getRegisteredStringTables(): Array<String>

    @JsName("GetMetaDataIdsFromStringTableEntry")
    public fun getMetaDataIdsFromStringTableEntry(tableId: String, key: String): Array<String>

    @JsName("GetKeysFromStringTable")
    public fun getKeysFromStringTable(tableId: String): Array<String>

    @JsName("C")
    public fun copy(other: UObject): KismetStringTableLibrary

    @JsName("C")
    public fun copy(other: Any): KismetStringTableLibrary
  }
}

public open external class UserActivity {
  @JsName("ActionName")
  public open var actionName: String

  public open fun clone(): UserActivity

  @JsName("SetUserActivity")
  public open fun setUserActivity(): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UserActivity

    @JsName("C")
    public fun copy(other: Any): UserActivity

    @JsName("SetUserActivity")
    public fun setUserActivity(userActivity: UserActivity): Unit
  }
}

@JsName("T$775")
public external interface Object775 {
  @JsName("OutTokens")
  public var outTokens: Array<String>

  @JsName("OutSwitches")
  public var outSwitches: Array<String>

  @JsName("OutParams")
  public var outParams: Any
}

@JsName("T$779")
public external interface Object779 {
  @JsName("Resolutions")
  public var resolutions: Array<IntPoint>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$784")
public external interface OutActorListProvider {
  @JsName("OutActorList")
  public var outActorList: Array<Actor>
}

public open external class KismetSystemLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetSystemLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetSystemLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetSystemLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetSystemLibrary

    @JsName("UnregisterForRemoteNotifications")
    public fun unregisterForRemoteNotifications(): Unit

    @JsName("UnloadPrimaryAssetList")
    public fun unloadPrimaryAssetList(primaryAssetIdList: Array<PrimaryAssetId>): Unit

    @JsName("UnloadPrimaryAsset")
    public fun unloadPrimaryAsset(primaryAssetId: PrimaryAssetId): Unit

    @JsName("TransactObject")
    public fun transactObject(uObject: UObject): Unit

    @JsName("StackTrace")
    public fun stackTrace(): Unit

    @JsName("SphereTraceSingleForObjects")
    public fun sphereTraceSingleForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("SphereTraceSingleByProfile")
    public fun sphereTraceSingleByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("SphereTraceSingle")
    public fun sphereTraceSingle(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("SphereTraceMultiForObjects")
    public fun sphereTraceMultiForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("SphereTraceMultiByProfile")
    public fun sphereTraceMultiByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("SphereTraceMulti")
    public fun sphereTraceMulti(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("SphereOverlapComponents")
    public fun sphereOverlapComponents(
      worldContextObject: UObject,
      spherePos: Vector,
      sphereRadius: Number,
      objectTypes: Array<String>,
      componentClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outComponents: Array<PrimitiveComponent>,
    ): Object321

    @JsName("SphereOverlapActors")
    public fun sphereOverlapActors(
      worldContextObject: UObject,
      spherePos: Vector,
      sphereRadius: Number,
      objectTypes: Array<String>,
      actorClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outActors: Array<Actor>,
    ): Object320

    @JsName("SnapshotObject")
    public fun snapshotObject(uObject: UObject): Unit

    @JsName("ShowPlatformSpecificLeaderboardScreen")
    public fun showPlatformSpecificLeaderboardScreen(categoryName: String): Unit

    @JsName("ShowPlatformSpecificAchievementsScreen")
    public fun showPlatformSpecificAchievementsScreen(specificPlayer: PlayerController): Unit

    @JsName("ShowInterstitialAd")
    public fun showInterstitialAd(): Unit

    @JsName("ShowAdBanner")
    public fun showAdBanner(adIdIndex: Number, showOnBottomOfScreen: Boolean): Unit

    @JsName("SetWindowTitle")
    public fun setWindowTitle(title: String): Unit

    @JsName("SetVolumeButtonsHandledBySystem")
    public fun setVolumeButtonsHandledBySystem(enabled: Boolean): Unit

    @JsName("SetVectorPropertyByName")
    public fun setVectorPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Vector,
    ): Unit

    @JsName("SetVector3fPropertyByName")
    public fun setVector3fPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Vector3f,
    ): Unit

    @JsName("SetUserActivity")
    public fun setUserActivity(userActivity: UserActivity): Unit

    @JsName("SetTransformPropertyByName")
    public fun setTransformPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Transform,
    ): Unit

    @JsName("SetTextPropertyByName")
    public fun setTextPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: String,
    ): Unit

    @JsName("SetSuppressViewportTransitionMessage")
    public fun setSuppressViewportTransitionMessage(worldContextObject: UObject, state: Boolean):
        Unit

    @JsName("SetStructurePropertyByName")
    public fun setStructurePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: GenericStruct,
    ): Unit

    @JsName("SetStringPropertyByName")
    public fun setStringPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: String,
    ): Unit

    @JsName("SetSoftObjectPropertyByName")
    public fun setSoftObjectPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: UObject,
    ): Unit

    @JsName("SetSoftClassPropertyByName")
    public fun setSoftClassPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Class,
    ): Unit

    @JsName("SetRotatorPropertyByName")
    public fun setRotatorPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Rotator,
    ): Unit

    @JsName("SetObjectPropertyByName")
    public fun setObjectPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: UObject,
    ): Unit

    @JsName("SetNamePropertyByName")
    public fun setNamePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: String,
    ): Unit

    @JsName("SetLinearColorPropertyByName")
    public fun setLinearColorPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: LinearColor,
    ): Unit

    @JsName("SetIntPropertyByName")
    public fun setIntPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Number,
    ): Unit

    @JsName("SetInt64PropertyByName")
    public fun setInt64PropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("SetGamepadsBlockDeviceFeedback")
    public fun setGamepadsBlockDeviceFeedback(block: Boolean): Unit

    @JsName("SetFieldPathPropertyByName")
    public fun setFieldPathPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("SetEditorProperty")
    public fun setEditorProperty(
      uObject: UObject,
      propertyName: String,
      propertyValue: Number,
      changeNotifyMode: String,
    ): Boolean

    @JsName("SetDoublePropertyByName")
    public fun setDoublePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("SetColorPropertyByName")
    public fun setColorPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Color,
    ): Unit

    @JsName("SetCollisionProfileNameProperty")
    public fun setCollisionProfileNameProperty(
      uObject: UObject,
      propertyName: String,
      value: CollisionProfileName,
    ): Unit

    @JsName("SetClassPropertyByName")
    public fun setClassPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: UnrealEngineClass,
    ): Unit

    @JsName("SetBytePropertyByName")
    public fun setBytePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Number,
    ): Unit

    @JsName("SetBoolPropertyByName")
    public fun setBoolPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Boolean,
    ): Unit

    @JsName("RetriggerableDelay")
    public fun retriggerableDelay(
      worldContextObject: UObject,
      duration: Number,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("ResetGamepadAssignmentToController")
    public fun resetGamepadAssignmentToController(controllerId: Number): Unit

    @JsName("ResetGamepadAssignments")
    public fun resetGamepadAssignments(): Unit

    @JsName("RegisterForRemoteNotifications")
    public fun registerForRemoteNotifications(): Unit

    @JsName("QuitGame")
    public fun quitGame(
      worldContextObject: UObject,
      specificPlayer: PlayerController,
      quitPreference: String,
      ignorePlatformRestrictions: Boolean,
    ): Unit

    @JsName("QuitEditor")
    public fun quitEditor(): Unit

    @JsName("PrintWarning")
    public fun printWarning(inString: String): Unit

    @JsName("PrintText")
    public fun printText(
      worldContextObject: UObject,
      inText: String,
      printToScreen: Boolean,
      printToLog: Boolean,
      textColor: LinearColor,
      duration: Number,
      key: String,
    ): Unit

    @JsName("PrintString")
    public fun printString(
      worldContextObject: UObject,
      inString: String,
      printToScreen: Boolean,
      printToLog: Boolean,
      textColor: LinearColor,
      duration: Number,
      key: String,
    ): Unit

    @JsName("ParseParamValue")
    public fun parseParamValue(
      inString: String,
      inParam: String,
      outValue: String,
    ): Object187

    @JsName("ParseParam")
    public fun parseParam(inString: String, inParam: String): Boolean

    @JsName("ParseCommandLine")
    public fun parseCommandLine(
      inCmdLine: String,
      outTokens: Array<String>,
      outSwitches: Array<String>,
      outParams: Any,
    ): Object775

    @JsName("NotEqual_SoftObjectReference")
    public fun notEqualSoftObjectReference(a: UObject, b: UObject): Boolean

    @JsName("NotEqual_SoftClassReference")
    public fun notEqualSoftClassReference(a: Class, b: Class): Boolean

    @JsName("NotEqual_PrimaryAssetType")
    public fun notEqualPrimaryAssetType(a: PrimaryAssetType, b: PrimaryAssetType): Boolean

    @JsName("NotEqual_PrimaryAssetId")
    public fun notEqualPrimaryAssetId(a: PrimaryAssetId, b: PrimaryAssetId): Boolean

    @JsName("NormalizeFilename")
    public fun normalizeFilename(inFilename: String): String

    @JsName("MoveComponentTo")
    public fun moveComponentTo(
      component: SceneComponent,
      targetRelativeLocation: Vector,
      targetRelativeRotation: Rotator,
      easeOut: Boolean,
      easeIn: Boolean,
      overTime: Number,
      forceShortestRotationPath: Boolean,
      moveAction: String,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("MakeSoftObjectPath")
    public fun makeSoftObjectPath(pathString: String): SoftObjectPath

    @JsName("MakeSoftClassPath")
    public fun makeSoftClassPath(pathString: String): SoftClassPath

    @JsName("MakeLiteralText")
    public fun makeLiteralText(value: String): String

    @JsName("MakeLiteralString")
    public fun makeLiteralString(value: String): String

    @JsName("MakeLiteralName")
    public fun makeLiteralName(value: String): String

    @JsName("MakeLiteralInt64")
    public fun makeLiteralInt64(value: Any): Any

    @JsName("MakeLiteralInt")
    public fun makeLiteralInt(value: Number): Number

    @JsName("MakeLiteralFloat")
    public fun makeLiteralFloat(value: Number): Number

    @JsName("MakeLiteralDouble")
    public fun makeLiteralDouble(value: Any): Any

    @JsName("MakeLiteralByte")
    public fun makeLiteralByte(value: Number): Number

    @JsName("MakeLiteralBool")
    public fun makeLiteralBool(value: Boolean): Boolean

    @JsName("LogString")
    public fun logString(inString: String, printToLog: Boolean): Unit

    @JsName("LoadInterstitialAd")
    public fun loadInterstitialAd(adIdIndex: Number): Unit

    @JsName("LoadClassAsset_Blocking")
    public fun loadClassAssetBlocking(assetClass: Class): UnrealEngineClass

    @JsName("LoadAsset_Blocking")
    public fun loadAssetBlocking(asset: UObject): UObject

    @JsName("LineTraceSingleForObjects")
    public fun lineTraceSingleForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("LineTraceSingleByProfile")
    public fun lineTraceSingleByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("LineTraceSingle")
    public fun lineTraceSingle(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("LineTraceMultiForObjects")
    public fun lineTraceMultiForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("LineTraceMultiByProfile")
    public fun lineTraceMultiByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("LineTraceMulti")
    public fun lineTraceMulti(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("LaunchURL")
    public fun launchUrl(URL: String): Unit

    @JsName("K2_UnPauseTimerHandle")
    public fun k2UnPauseTimerHandle(worldContextObject: UObject, handle: TimerHandle): Unit

    @JsName("K2_UnPauseTimer")
    public fun k2UnPauseTimer(uObject: UObject, functionName: String): Unit

    @JsName("K2_TimerExistsHandle")
    public fun k2TimerExistsHandle(worldContextObject: UObject, handle: TimerHandle): Boolean

    @JsName("K2_TimerExists")
    public fun k2TimerExists(uObject: UObject, functionName: String): Boolean

    @JsName("K2_SetTimerForNextTick")
    public fun k2SetTimerForNextTick(uObject: UObject, functionName: String): TimerHandle

    @JsName("K2_SetTimer")
    public fun k2SetTimer(
      uObject: UObject,
      functionName: String,
      time: Number,
      looping: Boolean,
      initialStartDelay: Number,
      initialStartDelayVariance: Number,
    ): TimerHandle

    @JsName("K2_PauseTimerHandle")
    public fun k2PauseTimerHandle(worldContextObject: UObject, handle: TimerHandle): Unit

    @JsName("K2_PauseTimer")
    public fun k2PauseTimer(uObject: UObject, functionName: String): Unit

    @JsName("K2_IsValidTimerHandle")
    public fun k2IsValidTimerHandle(handle: TimerHandle): Boolean

    @JsName("K2_IsTimerPausedHandle")
    public fun k2IsTimerPausedHandle(worldContextObject: UObject, handle: TimerHandle): Boolean

    @JsName("K2_IsTimerPaused")
    public fun k2IsTimerPaused(uObject: UObject, functionName: String): Boolean

    @JsName("K2_IsTimerActiveHandle")
    public fun k2IsTimerActiveHandle(worldContextObject: UObject, handle: TimerHandle): Boolean

    @JsName("K2_IsTimerActive")
    public fun k2IsTimerActive(uObject: UObject, functionName: String): Boolean

    @JsName("K2_InvalidateTimerHandle")
    public fun k2InvalidateTimerHandle(handle: TimerHandle): Object292

    @JsName("K2_GetTimerRemainingTimeHandle")
    public fun k2GetTimerRemainingTimeHandle(worldContextObject: UObject, handle: TimerHandle):
        Number

    @JsName("K2_GetTimerRemainingTime")
    public fun k2GetTimerRemainingTime(uObject: UObject, functionName: String): Number

    @JsName("K2_GetTimerElapsedTimeHandle")
    public fun k2GetTimerElapsedTimeHandle(worldContextObject: UObject, handle: TimerHandle): Number

    @JsName("K2_GetTimerElapsedTime")
    public fun k2GetTimerElapsedTime(uObject: UObject, functionName: String): Number

    @JsName("K2_ClearTimerHandle")
    public fun k2ClearTimerHandle(worldContextObject: UObject, handle: TimerHandle): Unit

    @JsName("K2_ClearTimer")
    public fun k2ClearTimer(uObject: UObject, functionName: String): Unit

    @JsName("K2_ClearAndInvalidateTimerHandle")
    public fun k2ClearAndInvalidateTimerHandle(worldContextObject: UObject, handle: TimerHandle):
        HandleProvider

    @JsName("IsValidSoftObjectReference")
    public fun isValidSoftObjectReference(softObjectReference: UObject): Boolean

    @JsName("IsValidSoftClassReference")
    public fun isValidSoftClassReference(softClassReference: Class): Boolean

    @JsName("IsValidPrimaryAssetType")
    public fun isValidPrimaryAssetType(primaryAssetType: PrimaryAssetType): Boolean

    @JsName("IsValidPrimaryAssetId")
    public fun isValidPrimaryAssetId(primaryAssetId: PrimaryAssetId): Boolean

    @JsName("IsValidClass")
    public fun isValidClass(`class`: UnrealEngineClass): Boolean

    @JsName("IsValid")
    public fun isValid(uObject: UObject): Boolean

    @JsName("IsUnattended")
    public fun isUnattended(): Boolean

    @JsName("IsStandalone")
    public fun isStandalone(worldContextObject: UObject): Boolean

    @JsName("IsSplitScreen")
    public fun isSplitScreen(worldContextObject: UObject): Boolean

    @JsName("IsServer")
    public fun isServer(worldContextObject: UObject): Boolean

    @JsName("IsScreensaverEnabled")
    public fun isScreensaverEnabled(): Boolean

    @JsName("IsPackagedForDistribution")
    public fun isPackagedForDistribution(): Boolean

    @JsName("IsLoggedIn")
    public fun isLoggedIn(specificPlayer: PlayerController): Boolean

    @JsName("IsInterstitialAdRequested")
    public fun isInterstitialAdRequested(): Boolean

    @JsName("IsInterstitialAdAvailable")
    public fun isInterstitialAdAvailable(): Boolean

    @JsName("IsDedicatedServer")
    public fun isDedicatedServer(worldContextObject: UObject): Boolean

    @JsName("IsControllerAssignedToGamepad")
    public fun isControllerAssignedToGamepad(controllerId: Number): Boolean

    @JsName("HideAdBanner")
    public fun hideAdBanner(): Unit

    @JsName("HasMultipleLocalPlayers")
    public fun hasMultipleLocalPlayers(worldContextObject: UObject): Boolean

    @JsName("GetVolumeButtonsHandledBySystem")
    public fun getVolumeButtonsHandledBySystem(): Boolean

    @JsName("GetUniqueDeviceId")
    public fun getUniqueDeviceId(): String

    @JsName("GetSystemPath")
    public fun getSystemPath(uObject: UObject): String

    @JsName("GetSupportedFullscreenResolutions")
    public fun getSupportedFullscreenResolutions(resolutions: Array<IntPoint>): Object779

    @JsName("GetSoftObjectReferenceFromPrimaryAssetId")
    public fun getSoftObjectReferenceFromPrimaryAssetId(primaryAssetId: PrimaryAssetId): UObject

    @JsName("GetSoftClassReferenceFromPrimaryAssetId")
    public fun getSoftClassReferenceFromPrimaryAssetId(primaryAssetId: PrimaryAssetId): Class

    @JsName("GetRenderingMaterialQualityLevel")
    public fun getRenderingMaterialQualityLevel(): Number

    @JsName("GetRenderingDetailMode")
    public fun getRenderingDetailMode(): Number

    @JsName("GetProjectSavedDirectory")
    public fun getProjectSavedDirectory(): String

    @JsName("GetProjectDirectory")
    public fun getProjectDirectory(): String

    @JsName("GetProjectContentDirectory")
    public fun getProjectContentDirectory(): String

    @JsName("GetPrimaryAssetsWithBundleState")
    public fun getPrimaryAssetsWithBundleState(
      requiredBundles: Array<String>,
      excludedBundles: Array<String>,
      validTypes: Array<PrimaryAssetType>,
      forceCurrentState: Boolean,
      outPrimaryAssetIdList: Array<PrimaryAssetId>,
    ): OutPrimaryAssetIdListProvider

    @JsName("GetPrimaryAssetIdList")
    public fun getPrimaryAssetIdList(primaryAssetType: PrimaryAssetType,
        outPrimaryAssetIdList: Array<PrimaryAssetId>): OutPrimaryAssetIdListProvider

    @JsName("GetPrimaryAssetIdFromSoftObjectReference")
    public fun getPrimaryAssetIdFromSoftObjectReference(softObjectReference: UObject):
        PrimaryAssetId

    @JsName("GetPrimaryAssetIdFromSoftClassReference")
    public fun getPrimaryAssetIdFromSoftClassReference(softClassReference: Class): PrimaryAssetId

    @JsName("GetPrimaryAssetIdFromObject")
    public fun getPrimaryAssetIdFromObject(uObject: UObject): PrimaryAssetId

    @JsName("GetPrimaryAssetIdFromClass")
    public fun getPrimaryAssetIdFromClass(`class`: UnrealEngineClass): PrimaryAssetId

    @JsName("GetPreferredLanguages")
    public fun getPreferredLanguages(): Array<String>

    @JsName("GetPlatformUserName")
    public fun getPlatformUserName(): String

    @JsName("GetPlatformUserDir")
    public fun getPlatformUserDir(): String

    @JsName("GetPathName")
    public fun getPathName(uObject: UObject): String

    @JsName("GetOuterObject")
    public fun getOuterObject(uObject: UObject): UObject

    @JsName("GetObjectName")
    public fun getObjectName(uObject: UObject): String

    @JsName("GetObjectFromPrimaryAssetId")
    public fun getObjectFromPrimaryAssetId(primaryAssetId: PrimaryAssetId): UObject

    @JsName("GetMinYResolutionForUI")
    public fun getMinYResolutionForUi(): Number

    @JsName("GetMinYResolutionFor3DView")
    public fun getMinYResolutionFor3dView(): Number

    @JsName("GetLocalCurrencySymbol")
    public fun getLocalCurrencySymbol(): String

    @JsName("GetLocalCurrencyCode")
    public fun getLocalCurrencyCode(): String

    @JsName("GetGameTimeInSeconds")
    public fun getGameTimeInSeconds(worldContextObject: UObject): Number

    @JsName("GetGamepadControllerName")
    public fun getGamepadControllerName(controllerId: Number): String

    @JsName("GetGamepadButtonGlyph")
    public fun getGamepadButtonGlyph(buttonKey: String, controllerIndex: Number): Texture2d

    @JsName("GetGameName")
    public fun getGameName(): String

    @JsName("GetGameBundleId")
    public fun getGameBundleId(): String

    @JsName("GetFrameCount")
    public fun getFrameCount(): Any

    @JsName("GetEngineVersion")
    public fun getEngineVersion(): String

    @JsName("GetEditorProperty")
    public fun getEditorProperty(
      uObject: UObject,
      propertyName: String,
      propertyValue: Number,
    ): Object571

    @JsName("GetDisplayName")
    public fun getDisplayName(uObject: UObject): String

    @JsName("GetDeviceId")
    public fun getDeviceId(): String

    @JsName("GetDefaultLocale")
    public fun getDefaultLocale(): String

    @JsName("GetDefaultLanguage")
    public fun getDefaultLanguage(): String

    @JsName("GetCurrentBundleState")
    public fun getCurrentBundleState(
      primaryAssetId: PrimaryAssetId,
      forceCurrentState: Boolean,
      outBundles: Array<String>,
    ): Object47

    @JsName("GetConvenientWindowedResolutions")
    public fun getConvenientWindowedResolutions(resolutions: Array<IntPoint>): Object779

    @JsName("GetConsoleVariableIntValue")
    public fun getConsoleVariableIntValue(variableName: String): Number

    @JsName("GetConsoleVariableFloatValue")
    public fun getConsoleVariableFloatValue(variableName: String): Number

    @JsName("GetConsoleVariableBoolValue")
    public fun getConsoleVariableBoolValue(variableName: String): Boolean

    @JsName("GetComponentBounds")
    public fun getComponentBounds(
      component: SceneComponent,
      origin: Vector,
      boxExtent: Vector,
      sphereRadius: Number,
    ): Object153

    @JsName("GetCommandLine")
    public fun getCommandLine(): String

    @JsName("GetClassFromPrimaryAssetId")
    public fun getClassFromPrimaryAssetId(primaryAssetId: PrimaryAssetId): UnrealEngineClass

    @JsName("GetClassDisplayName")
    public fun getClassDisplayName(`class`: UnrealEngineClass): String

    @JsName("GetBuildVersion")
    public fun getBuildVersion(): String

    @JsName("GetBuildConfiguration")
    public fun getBuildConfiguration(): String

    @JsName("GetAdIDCount")
    public fun getAdIdCount(): Number

    @JsName("GetActorListFromComponentList")
    public fun getActorListFromComponentList(
      componentList: Array<PrimitiveComponent>,
      actorClassFilter: UnrealEngineClass,
      outActorList: Array<Actor>,
    ): OutActorListProvider

    @JsName("GetActorBounds")
    public fun getActorBounds(
      actor: Actor,
      origin: Vector,
      boxExtent: Vector,
    ): Object565

    @JsName("ForceCloseAdBanner")
    public fun forceCloseAdBanner(): Unit

    @JsName("FlushPersistentDebugLines")
    public fun flushPersistentDebugLines(worldContextObject: UObject): Unit

    @JsName("FlushDebugStrings")
    public fun flushDebugStrings(worldContextObject: UObject): Unit

    @JsName("ExecuteConsoleCommand")
    public fun executeConsoleCommand(
      worldContextObject: UObject,
      command: String,
      specificPlayer: PlayerController,
    ): Unit

    @JsName("EqualEqual_SoftObjectReference")
    public fun equalEqualSoftObjectReference(a: UObject, b: UObject): Boolean

    @JsName("EqualEqual_SoftClassReference")
    public fun equalEqualSoftClassReference(a: Class, b: Class): Boolean

    @JsName("EqualEqual_PrimaryAssetType")
    public fun equalEqualPrimaryAssetType(a: PrimaryAssetType, b: PrimaryAssetType): Boolean

    @JsName("EqualEqual_PrimaryAssetId")
    public fun equalEqualPrimaryAssetId(a: PrimaryAssetId, b: PrimaryAssetId): Boolean

    @JsName("EndTransaction")
    public fun endTransaction(): Number

    @JsName("DrawDebugString")
    public fun drawDebugString(
      worldContextObject: UObject,
      textLocation: Vector,
      text: String,
      testBaseActor: Actor,
      textColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugSphere")
    public fun drawDebugSphere(
      worldContextObject: UObject,
      center: Vector,
      radius: Number,
      segments: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugPoint")
    public fun drawDebugPoint(
      worldContextObject: UObject,
      position: Vector,
      size: Number,
      pointColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugPlane")
    public fun drawDebugPlane(
      worldContextObject: UObject,
      planeCoordinates: Plane,
      location: Vector,
      size: Number,
      planeColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugLine")
    public fun drawDebugLine(
      worldContextObject: UObject,
      lineStart: Vector,
      lineEnd: Vector,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugFrustum")
    public fun drawDebugFrustum(
      worldContextObject: UObject,
      frustumTransform: Transform,
      frustumColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugFloatHistoryTransform")
    public fun drawDebugFloatHistoryTransform(
      worldContextObject: UObject,
      floatHistory: DebugFloatHistory,
      drawTransform: Transform,
      drawSize: Vector2d,
      drawColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugFloatHistoryLocation")
    public fun drawDebugFloatHistoryLocation(
      worldContextObject: UObject,
      floatHistory: DebugFloatHistory,
      drawLocation: Vector,
      drawSize: Vector2d,
      drawColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugCylinder")
    public fun drawDebugCylinder(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      segments: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugCoordinateSystem")
    public fun drawDebugCoordinateSystem(
      worldContextObject: UObject,
      axisLoc: Vector,
      axisRot: Rotator,
      scale: Number,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugConeInDegrees")
    public fun drawDebugConeInDegrees(
      worldContextObject: UObject,
      origin: Vector,
      direction: Vector,
      length: Number,
      angleWidth: Number,
      angleHeight: Number,
      numSides: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugCone")
    public fun drawDebugCone(
      worldContextObject: UObject,
      origin: Vector,
      direction: Vector,
      length: Number,
      angleWidth: Number,
      angleHeight: Number,
      numSides: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugCircle")
    public fun drawDebugCircle(
      worldContextObject: UObject,
      center: Vector,
      radius: Number,
      numSegments: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
      yAxis: Vector,
      zAxis: Vector,
      drawAxis: Boolean,
    ): Unit

    @JsName("DrawDebugCapsule")
    public fun drawDebugCapsule(
      worldContextObject: UObject,
      center: Vector,
      halfHeight: Number,
      radius: Number,
      rotation: Rotator,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugCamera")
    public fun drawDebugCamera(
      cameraActor: CameraActor,
      cameraColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugBox")
    public fun drawDebugBox(
      worldContextObject: UObject,
      center: Vector,
      extent: Vector,
      lineColor: LinearColor,
      rotation: Rotator,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugArrow")
    public fun drawDebugArrow(
      worldContextObject: UObject,
      lineStart: Vector,
      lineEnd: Vector,
      arrowSize: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DoesImplementInterface")
    public fun doesImplementInterface(testObject: UObject, `interface`: UnrealEngineClass): Boolean

    @JsName("DelayUntilNextTick")
    public fun delayUntilNextTick(worldContextObject: UObject, latentInfo: LatentActionInfo): Unit

    @JsName("Delay")
    public fun delay(
      worldContextObject: UObject,
      duration: Number,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("CreateCopyForUndoBuffer")
    public fun createCopyForUndoBuffer(objectToModify: UObject): Unit

    @JsName("ConvertToRelativePath")
    public fun convertToRelativePath(filename: String): String

    @JsName("ConvertToAbsolutePath")
    public fun convertToAbsolutePath(filename: String): String

    @JsName("Conv_SoftObjPathToSoftObjRef")
    public fun convertSoftObjPathToSoftObjRef(softObjectPath: SoftObjectPath): UObject

    @JsName("Conv_SoftObjectReferenceToString")
    public fun convertSoftObjectReferenceToString(softObjectReference: UObject): String

    @JsName("Conv_SoftObjectReferenceToObject")
    public fun convertSoftObjectReferenceToObject(softobject: UObject): UObject

    @JsName("Conv_SoftClassReferenceToString")
    public fun convertSoftClassReferenceToString(softClassReference: Class): String

    @JsName("Conv_SoftClassReferenceToClass")
    public fun convertSoftClassReferenceToClass(softclass: Class): UnrealEngineClass

    @JsName("Conv_SoftClassPathToSoftClassRef")
    public fun convertSoftClassPathToSoftClassRef(softClassPath: SoftClassPath): Class

    @JsName("Conv_PrimaryAssetTypeToString")
    public fun convertPrimaryAssetTypeToString(primaryAssetType: PrimaryAssetType): String

    @JsName("Conv_PrimaryAssetIdToString")
    public fun convertPrimaryAssetIdToString(primaryAssetId: PrimaryAssetId): String

    @JsName("Conv_ObjectToSoftObjectReference")
    public fun convertObjectToSoftObjectReference(uObject: UObject): UObject

    @JsName("Conv_ObjectToClass")
    public fun convertObjectToClass(uObject: UObject, `class`: UnrealEngineClass): UnrealEngineClass

    @JsName("Conv_ClassToSoftClassReference")
    public fun convertClassToSoftClassReference(`class`: UnrealEngineClass): Class

    @JsName("ControlScreensaver")
    public fun controlScreensaver(allowScreenSaver: Boolean): Unit

    @JsName("ComponentOverlapComponents")
    public fun componentOverlapComponents(
      component: PrimitiveComponent,
      componentTransform: Transform,
      objectTypes: Array<String>,
      componentClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outComponents: Array<PrimitiveComponent>,
    ): Object321

    @JsName("ComponentOverlapActors")
    public fun componentOverlapActors(
      component: PrimitiveComponent,
      componentTransform: Transform,
      objectTypes: Array<String>,
      actorClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outActors: Array<Actor>,
    ): Object320

    @JsName("CollectGarbage")
    public fun collectGarbage(): Unit

    @JsName("CapsuleTraceSingleForObjects")
    public fun capsuleTraceSingleForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("CapsuleTraceSingleByProfile")
    public fun capsuleTraceSingleByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("CapsuleTraceSingle")
    public fun capsuleTraceSingle(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("CapsuleTraceMultiForObjects")
    public fun capsuleTraceMultiForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("CapsuleTraceMultiByProfile")
    public fun capsuleTraceMultiByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("CapsuleTraceMulti")
    public fun capsuleTraceMulti(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("CapsuleOverlapComponents")
    public fun capsuleOverlapComponents(
      worldContextObject: UObject,
      capsulePos: Vector,
      radius: Number,
      halfHeight: Number,
      objectTypes: Array<String>,
      componentClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outComponents: Array<PrimitiveComponent>,
    ): Object321

    @JsName("CapsuleOverlapActors")
    public fun capsuleOverlapActors(
      worldContextObject: UObject,
      capsulePos: Vector,
      radius: Number,
      halfHeight: Number,
      objectTypes: Array<String>,
      actorClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outActors: Array<Actor>,
    ): Object320

    @JsName("CanLaunchURL")
    public fun canLaunchUrl(URL: String): Boolean

    @JsName("CancelTransaction")
    public fun cancelTransaction(index: Number): Unit

    @JsName("BreakSoftObjectPath")
    public fun breakSoftObjectPath(inSoftObjectPath: SoftObjectPath, pathString: String):
        PathStringProvider

    @JsName("BreakSoftClassPath")
    public fun breakSoftClassPath(inSoftClassPath: SoftClassPath, pathString: String):
        PathStringProvider

    @JsName("BoxTraceSingleForObjects")
    public fun boxTraceSingleForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("BoxTraceSingleByProfile")
    public fun boxTraceSingleByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("BoxTraceSingle")
    public fun boxTraceSingle(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("BoxTraceMultiForObjects")
    public fun boxTraceMultiForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("BoxTraceMultiByProfile")
    public fun boxTraceMultiByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("BoxTraceMulti")
    public fun boxTraceMulti(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("BoxOverlapComponents")
    public fun boxOverlapComponents(
      worldContextObject: UObject,
      boxPos: Vector,
      extent: Vector,
      objectTypes: Array<String>,
      componentClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outComponents: Array<PrimitiveComponent>,
    ): Object321

    @JsName("BoxOverlapActors")
    public fun boxOverlapActors(
      worldContextObject: UObject,
      boxPos: Vector,
      boxExtent: Vector,
      objectTypes: Array<String>,
      actorClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outActors: Array<Actor>,
    ): Object320

    @JsName("BeginTransaction")
    public fun beginTransaction(
      context: String,
      description: String,
      primaryObject: UObject,
    ): Number

    @JsName("AddFloatHistorySample")
    public fun addFloatHistorySample(value: Number, floatHistory: DebugFloatHistory):
        DebugFloatHistory

    @JsName("C")
    public fun copy(other: UObject): KismetSystemLibrary

    @JsName("C")
    public fun copy(other: Any): KismetSystemLibrary
  }
}

@JsName("T$797")
public external interface Object797 {
  @JsName("IsValid")
  public var isValid: Boolean

  @JsName("ErrorMessage")
  public var errorMessage: String
}

public open external class PolyglotTextData {
  @JsName("Category")
  public open var category: String

  @JsName("NativeCulture")
  public open var nativeCulture: String

  @JsName("Namespace")
  public open var namespace: String

  @JsName("Key")
  public open var key: String

  @JsName("NativeString")
  public open var nativeString: String

  @JsName("LocalizedStrings")
  public open var localizedStrings: Any

  @JsName("bIsMinimalPatch")
  public open var isMinimalPatch: Boolean

  @JsName("CachedText")
  public open var cachedText: String

  public open fun clone(): PolyglotTextData

  @JsName("IsPolyglotDataValid")
  public open fun isPolyglotDataValid(isValid: Boolean, errorMessage: String): Object797

  @JsName("PolyglotDataToText")
  public open fun polyglotDataToText(): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PolyglotTextData

    @JsName("C")
    public fun copy(other: Any): PolyglotTextData

    @JsName("IsPolyglotDataValid")
    public fun isPolyglotDataValid(
      polyglotData: PolyglotTextData,
      isValid: Boolean,
      errorMessage: String,
    ): Object797

    @JsName("PolyglotDataToText")
    public fun polyglotDataToText(polyglotData: PolyglotTextData): String
  }
}

@JsName("EFormatArgumentType")
public external object FormatArgumentType {
  public var Int: String

  public var UInt: String

  public var Float: String

  public var Double: String

  public var Text: String

  public var Gender: String

  @JsName("EFormatArgumentType_MAX")
  public var Max: String
}

@JsName("ETextGender")
public external object TextGender {
  public var Masculine: String

  public var Feminine: String

  public var Neuter: String

  @JsName("ETextGender_MAX")
  public var Max: String
}

public open external class FormatArgumentData {
  @JsName("ArgumentName")
  public open var argumentName: String

  @JsName("ArgumentValueType")
  public open var argumentValueType: String

  @JsName("ArgumentValue")
  public open var argumentValue: String

  @JsName("ArgumentValueInt")
  public open var argumentValueInt: Any

  @JsName("ArgumentValueFloat")
  public open var argumentValueFloat: Number

  @JsName("ArgumentValueDouble")
  public open var argumentValueDouble: Any

  @JsName("ArgumentValueGender")
  public open var argumentValueGender: String

  public open fun clone(): FormatArgumentData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FormatArgumentData

    @JsName("C")
    public fun copy(other: Any): FormatArgumentData
  }
}

@JsName("ERoundingMode")
public external object RoundingMode {
  public var HalfToEven: String

  public var HalfFromZero: String

  public var HalfToZero: String

  public var FromZero: String

  public var ToZero: String

  public var ToNegativeInfinity: String

  public var ToPositiveInfinity: String

  @JsName("ERoundingMode_MAX")
  public var Max: String
}

@JsName("T$798")
public external interface Object798 {
  @JsName("OutTableId")
  public var outTableId: String

  @JsName("OutKey")
  public var outKey: String

  @JsName("$")
  public var value: Boolean
}

@JsName("T$799")
public external interface Object799 {
  @JsName("OutText")
  public var outText: String

  @JsName("$")
  public var value: Boolean
}

public open external class KismetTextLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetTextLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetTextLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetTextLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetTextLibrary

    @JsName("TextTrimTrailing")
    public fun textTrimTrailing(inText: String): String

    @JsName("TextTrimPrecedingAndTrailing")
    public fun textTrimPrecedingAndTrailing(inText: String): String

    @JsName("TextTrimPreceding")
    public fun textTrimPreceding(inText: String): String

    @JsName("TextToUpper")
    public fun textToUpper(inText: String): String

    @JsName("TextToLower")
    public fun textToLower(inText: String): String

    @JsName("TextIsTransient")
    public fun textIsTransient(inText: String): Boolean

    @JsName("TextIsFromStringTable")
    public fun textIsFromStringTable(text: String): Boolean

    @JsName("TextIsEmpty")
    public fun textIsEmpty(inText: String): Boolean

    @JsName("TextIsCultureInvariant")
    public fun textIsCultureInvariant(inText: String): Boolean

    @JsName("TextFromStringTable")
    public fun textFromStringTable(tableId: String, key: String): String

    @JsName("StringTableIdAndKeyFromText")
    public fun stringTableIdAndKeyFromText(
      text: String,
      outTableId: String,
      outKey: String,
    ): Object798

    @JsName("PolyglotDataToText")
    public fun polyglotDataToText(polyglotData: PolyglotTextData): String

    @JsName("NotEqual_TextText")
    public fun notEqualTextText(a: String, b: String): Boolean

    @JsName("NotEqual_IgnoreCase_TextText")
    public fun notEqualIgnoreCaseTextText(a: String, b: String): Boolean

    @JsName("IsPolyglotDataValid")
    public fun isPolyglotDataValid(
      polyglotData: PolyglotTextData,
      isValid: Boolean,
      errorMessage: String,
    ): Object797

    @JsName("GetEmptyText")
    public fun getEmptyText(): String

    @JsName("Format")
    public fun format(inPattern: String, inArgs: Array<FormatArgumentData>): String

    @JsName("FindTextInLocalizationTable")
    public fun findTextInLocalizationTable(
      namespace: String,
      key: String,
      outText: String,
    ): Object799

    @JsName("EqualEqual_TextText")
    public fun equalEqualTextText(a: String, b: String): Boolean

    @JsName("EqualEqual_IgnoreCase_TextText")
    public fun equalEqualIgnoreCaseTextText(a: String, b: String): Boolean

    @JsName("Conv_VectorToText")
    public fun convertVectorToText(inVec: Vector): String

    @JsName("Conv_Vector2dToText")
    public fun convertVector2dToText(inVec: Vector2d): String

    @JsName("Conv_TransformToText")
    public fun convertTransformToText(inTrans: Transform): String

    @JsName("Conv_TextToString")
    public fun convertTextToString(inText: String): String

    @JsName("Conv_StringToText")
    public fun convertStringToText(inString: String): String

    @JsName("Conv_RotatorToText")
    public fun convertRotatorToText(inRot: Rotator): String

    @JsName("Conv_ObjectToText")
    public fun convertObjectToText(inObj: UObject): String

    @JsName("Conv_NameToText")
    public fun convertNameToText(inName: String): String

    @JsName("Conv_IntToText")
    public fun convertIntToText(
      value: Number,
      alwaysSign: Boolean,
      useGrouping: Boolean,
      minimumIntegralDigits: Number,
      maximumIntegralDigits: Number,
    ): String

    @JsName("Conv_Int64ToText")
    public fun convertInt64ToText(
      value: Any,
      alwaysSign: Boolean,
      useGrouping: Boolean,
      minimumIntegralDigits: Number,
      maximumIntegralDigits: Number,
    ): String

    @JsName("Conv_FloatToText")
    public fun convertFloatToText(
      value: Number,
      roundingMode: String,
      alwaysSign: Boolean,
      useGrouping: Boolean,
      minimumIntegralDigits: Number,
      maximumIntegralDigits: Number,
      minimumFractionalDigits: Number,
      maximumFractionalDigits: Number,
    ): String

    @JsName("Conv_DoubleToText")
    public fun convertDoubleToText(
      inDouble: Any,
      roundingMode: String,
      alwaysSign: Boolean,
      useGrouping: Boolean,
      minimumIntegralDigits: Number,
      maximumIntegralDigits: Number,
      minimumFractionalDigits: Number,
      maximumFractionalDigits: Number,
    ): String

    @JsName("Conv_ColorToText")
    public fun convertColorToText(inColor: LinearColor): String

    @JsName("Conv_ByteToText")
    public fun convertByteToText(value: Number): String

    @JsName("Conv_BoolToText")
    public fun convertBoolToText(inBool: Boolean): String

    @JsName("AsTimeZoneTime_DateTime")
    public fun asTimeZoneTimeDateTime(inDateTime: DateTime, inTimeZone: String): String

    @JsName("AsTimeZoneDateTime_DateTime")
    public fun asTimeZoneDateTimeDateTime(inDateTime: DateTime, inTimeZone: String): String

    @JsName("AsTimeZoneDate_DateTime")
    public fun asTimeZoneDateDateTime(inDateTime: DateTime, inTimeZone: String): String

    @JsName("AsTimespan_Timespan")
    public fun asTimespanTimespan(inTimespan: Timespan): String

    @JsName("AsTime_DateTime")
    public fun asTimeDateTime(`in`: DateTime): String

    @JsName("AsPercent_Float")
    public fun asPercentFloat(
      value: Number,
      roundingMode: String,
      alwaysSign: Boolean,
      useGrouping: Boolean,
      minimumIntegralDigits: Number,
      maximumIntegralDigits: Number,
      minimumFractionalDigits: Number,
      maximumFractionalDigits: Number,
    ): String

    @JsName("AsDateTime_DateTime")
    public fun asDateTimeDateTime(`in`: DateTime): String

    @JsName("AsDate_DateTime")
    public fun asDateDateTime(inDateTime: DateTime): String

    @JsName("AsCurrencyBase")
    public fun asCurrencyBase(baseValue: Number, currencyCode: String): String

    @JsName("AsCurrency_Integer")
    public fun asCurrencyInteger(
      value: Number,
      roundingMode: String,
      alwaysSign: Boolean,
      useGrouping: Boolean,
      minimumIntegralDigits: Number,
      maximumIntegralDigits: Number,
      minimumFractionalDigits: Number,
      maximumFractionalDigits: Number,
      currencyCode: String,
    ): String

    @JsName("AsCurrency_Float")
    public fun asCurrencyFloat(
      value: Number,
      roundingMode: String,
      alwaysSign: Boolean,
      useGrouping: Boolean,
      minimumIntegralDigits: Number,
      maximumIntegralDigits: Number,
      minimumFractionalDigits: Number,
      maximumFractionalDigits: Number,
      currencyCode: String,
    ): String

    @JsName("C")
    public fun copy(other: UObject): KismetTextLibrary

    @JsName("C")
    public fun copy(other: Any): KismetTextLibrary
  }
}

public open external class LevelPartitionInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelPartitionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelPartitionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelPartitionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelPartitionInterface

    @JsName("C")
    public fun copy(other: UObject): LevelPartitionInterface

    @JsName("C")
    public fun copy(other: Any): LevelPartitionInterface
  }
}

public open external class ActorContainer(
  outer: UObject,
) : UObject {
  @JsName("Actors")
  public open var actors: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorContainer

    @JsName("C")
    public fun copy(other: UObject): ActorContainer

    @JsName("C")
    public fun copy(other: Any): ActorContainer
  }
}

public open external class LevelBounds(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("BoxComponent")
  public open var boxComponent: BoxComponent

  @JsName("bAutoUpdateBounds")
  public open var autoUpdateBounds: Boolean

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelBounds

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelBounds

    @JsName("C")
    public fun copy(other: UObject): LevelBounds

    @JsName("C")
    public fun copy(other: Any): LevelBounds
  }
}

@JsName("ELevelInstanceRuntimeBehavior")
public external object LevelInstanceRuntimeBehavior {
  public var None: String

  @JsName("Embedded_Deprecated")
  public var EmbeddedDeprecated: String

  public var Partitioned: String

  public var LevelStreaming: String

  @JsName("ELevelInstanceRuntimeBehavior_MAX")
  public var Max: String
}

public open external class LevelInstance(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("WorldAsset")
  public open var worldAsset: World

  @JsName("CookedWorldAsset")
  public open var cookedWorldAsset: World

  @JsName("DesiredRuntimeBehavior")
  public open var desiredRuntimeBehavior: String

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelInstance

    @JsName("C")
    public fun copy(other: UObject): LevelInstance

    @JsName("C")
    public fun copy(other: Any): LevelInstance
  }
}

public open external class LevelInstanceComponent(
  outer: UObject,
) : SceneComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelInstanceComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelInstanceComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelInstanceComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelInstanceComponent

    @JsName("C")
    public fun copy(other: UObject): LevelInstanceComponent

    @JsName("C")
    public fun copy(other: Any): LevelInstanceComponent
  }
}

public open external class LevelInstanceEditorInstanceActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelInstanceEditorInstanceActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelInstanceEditorInstanceActor

    @JsName("C")
    public fun copy(other: UObject): LevelInstanceEditorInstanceActor

    @JsName("C")
    public fun copy(other: Any): LevelInstanceEditorInstanceActor
  }
}

public open external class LevelStreamingAlwaysLoaded(
  outer: UObject,
) : LevelStreaming {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelStreamingAlwaysLoaded

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelStreamingAlwaysLoaded

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelStreamingAlwaysLoaded

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelStreamingAlwaysLoaded

    @JsName("C")
    public fun copy(other: UObject): LevelStreamingAlwaysLoaded

    @JsName("C")
    public fun copy(other: Any): LevelStreamingAlwaysLoaded
  }
}

public open external class LevelStreamingLevelInstanceEditor(
  outer: UObject,
) : LevelStreamingAlwaysLoaded {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelStreamingLevelInstanceEditor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelStreamingLevelInstanceEditor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelStreamingLevelInstanceEditor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelStreamingLevelInstanceEditor

    @JsName("C")
    public fun copy(other: UObject): LevelStreamingLevelInstanceEditor

    @JsName("C")
    public fun copy(other: Any): LevelStreamingLevelInstanceEditor
  }
}

public open external class LevelInstanceEditorObject(
  outer: UObject,
) : UObject {
  @JsName("bMovedActors")
  public open var movedActors: Boolean

  @JsName("OtherPackagesToSave")
  public open var otherPackagesToSave: Array<Any>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelInstanceEditorObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelInstanceEditorObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelInstanceEditorObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelInstanceEditorObject

    @JsName("C")
    public fun copy(other: UObject): LevelInstanceEditorObject

    @JsName("C")
    public fun copy(other: Any): LevelInstanceEditorObject
  }
}

public open external class LevelInstancePivot(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelInstancePivot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelInstancePivot

    @JsName("C")
    public fun copy(other: UObject): LevelInstancePivot

    @JsName("C")
    public fun copy(other: Any): LevelInstancePivot
  }
}

@JsName("T$800")
public external interface Object800 {
  @JsName("bOutSuccess")
  public var outSuccess: Boolean

  @JsName("$")
  public var value: LevelStreamingDynamic
}

public open external class LevelStreamingDynamic(
  outer: UObject,
) : LevelStreaming {
  @JsName("bInitiallyLoaded")
  public open var initiallyLoaded: Boolean

  @JsName("bInitiallyVisible")
  public open var initiallyVisible: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelStreamingDynamic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelStreamingDynamic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelStreamingDynamic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelStreamingDynamic

    @JsName("LoadLevelInstanceBySoftObjectPtr")
    public fun loadLevelInstanceBySoftObjectPtr(
      worldContextObject: UObject,
      level: World,
      location: Vector,
      rotation: Rotator,
      outSuccess: Boolean,
      optionalLevelNameOverride: String,
      optionalLevelStreamingClass: UnrealEngineClass,
      loadAsTempPackage: Boolean,
    ): Object800

    @JsName("LoadLevelInstance")
    public fun loadLevelInstance(
      worldContextObject: UObject,
      levelName: String,
      location: Vector,
      rotation: Rotator,
      outSuccess: Boolean,
      optionalLevelNameOverride: String,
      optionalLevelStreamingClass: UnrealEngineClass,
      loadAsTempPackage: Boolean,
    ): Object800

    @JsName("C")
    public fun copy(other: UObject): LevelStreamingDynamic

    @JsName("C")
    public fun copy(other: Any): LevelStreamingDynamic
  }
}

public open external class LevelStreamingLevelInstance(
  outer: UObject,
) : LevelStreamingDynamic {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelStreamingLevelInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelStreamingLevelInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelStreamingLevelInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelStreamingLevelInstance

    @JsName("C")
    public fun copy(other: UObject): LevelStreamingLevelInstance

    @JsName("C")
    public fun copy(other: Any): LevelStreamingLevelInstance
  }
}

public open external class LevelInstanceSubsystem(
  outer: UObject,
) : WorldSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelInstanceSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelInstanceSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelInstanceSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelInstanceSubsystem

    @JsName("C")
    public fun copy(other: UObject): LevelInstanceSubsystem

    @JsName("C")
    public fun copy(other: Any): LevelInstanceSubsystem
  }
}

public open external class LevelStreamingPersistent(
  outer: UObject,
) : LevelStreaming {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelStreamingPersistent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelStreamingPersistent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelStreamingPersistent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelStreamingPersistent

    @JsName("C")
    public fun copy(other: UObject): LevelStreamingPersistent

    @JsName("C")
    public fun copy(other: Any): LevelStreamingPersistent
  }
}

public open external class LightmappedSurfaceCollection(
  outer: UObject,
) : UObject {
  @JsName("SourceModel")
  public open var sourceModel: Model

  @JsName("Surfaces")
  public open var surfaces: Array<Number>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightmappedSurfaceCollection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightmappedSurfaceCollection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightmappedSurfaceCollection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightmappedSurfaceCollection

    @JsName("C")
    public fun copy(other: UObject): LightmappedSurfaceCollection

    @JsName("C")
    public fun copy(other: Any): LightmappedSurfaceCollection
  }
}

@JsName("LightMapTexture2D")
public open external class LightMapTexture2d(
  outer: UObject,
) : Texture2d {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightMapTexture2d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightMapTexture2d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightMapTexture2d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightMapTexture2d

    @JsName("C")
    public fun copy(other: UObject): LightMapTexture2d

    @JsName("C")
    public fun copy(other: Any): LightMapTexture2d
  }
}

@JsName("LightMapVirtualTexture2D")
public open external class LightMapVirtualTexture2d(
  outer: UObject,
) : Texture2d {
  @JsName("TypeToLayer")
  public open var typeToLayer: Array<Any>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightMapVirtualTexture2d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightMapVirtualTexture2d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightMapVirtualTexture2d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightMapVirtualTexture2d

    @JsName("C")
    public fun copy(other: UObject): LightMapVirtualTexture2d

    @JsName("C")
    public fun copy(other: Any): LightMapVirtualTexture2d
  }
}

public open external class LightmassCharacterIndirectDetailVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightmassCharacterIndirectDetailVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightmassCharacterIndirectDetailVolume

    @JsName("C")
    public fun copy(other: UObject): LightmassCharacterIndirectDetailVolume

    @JsName("C")
    public fun copy(other: Any): LightmassCharacterIndirectDetailVolume
  }
}

public open external class LightmassImportanceVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightmassImportanceVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightmassImportanceVolume

    @JsName("C")
    public fun copy(other: UObject): LightmassImportanceVolume

    @JsName("C")
    public fun copy(other: Any): LightmassImportanceVolume
  }
}

public open external class LightmassPortalComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("PreviewBox")
  public open var previewBox: BoxComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightmassPortalComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightmassPortalComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightmassPortalComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightmassPortalComponent

    @JsName("C")
    public fun copy(other: UObject): LightmassPortalComponent

    @JsName("C")
    public fun copy(other: Any): LightmassPortalComponent
  }
}

public open external class LightmassPortal(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("PortalComponent")
  public open var portalComponent: LightmassPortalComponent

  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightmassPortal

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightmassPortal

    @JsName("C")
    public fun copy(other: UObject): LightmassPortal

    @JsName("C")
    public fun copy(other: Any): LightmassPortal
  }
}

public open external class LightmassPrimitiveSettingsObject(
  outer: UObject,
) : UObject {
  @JsName("LightmassSettings")
  public open var lightmassSettings: LightmassPrimitiveSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightmassPrimitiveSettingsObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightmassPrimitiveSettingsObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightmassPrimitiveSettingsObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightmassPrimitiveSettingsObject

    @JsName("C")
    public fun copy(other: UObject): LightmassPrimitiveSettingsObject

    @JsName("C")
    public fun copy(other: Any): LightmassPrimitiveSettingsObject
  }
}

public open external class LightWeightInstanceBlueprintFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightWeightInstanceBlueprintFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        LightWeightInstanceBlueprintFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightWeightInstanceBlueprintFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightWeightInstanceBlueprintFunctionLibrary

    @JsName("CreateNewLightWeightInstance")
    public fun createNewLightWeightInstance(
      actorClass: UnrealEngineClass,
      transform: Transform,
      layer: DataLayer,
      world: World,
    ): ActorInstanceHandle

    @JsName("ConvertActorToLightWeightInstance")
    public fun convertActorToLightWeightInstance(actor: Actor): ActorInstanceHandle

    @JsName("C")
    public fun copy(other: UObject): LightWeightInstanceBlueprintFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): LightWeightInstanceBlueprintFunctionLibrary
  }
}

public open external class ActorInstanceHandleInterface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorInstanceHandleInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorInstanceHandleInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorInstanceHandleInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorInstanceHandleInterface

    @JsName("C")
    public fun copy(other: UObject): ActorInstanceHandleInterface

    @JsName("C")
    public fun copy(other: Any): ActorInstanceHandleInterface
  }
}

public open external class LightWeightInstanceManager(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("RepresentedClass")
  public open var representedClass: UnrealEngineClass

  @JsName("AcceptedClass")
  public open var acceptedClass: UnrealEngineClass

  @JsName("InstanceTransforms")
  public open var instanceTransforms: Array<Transform>

  @JsName("FreeIndices")
  public open var freeIndices: Array<Number>

  @JsName("ValidIndices")
  public open var validIndices: Array<Boolean>

  @JsName("OnRep_Transforms")
  public open fun onRepTransforms(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightWeightInstanceManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightWeightInstanceManager

    @JsName("C")
    public fun copy(other: UObject): LightWeightInstanceManager

    @JsName("C")
    public fun copy(other: Any): LightWeightInstanceManager
  }
}

public open external class LightWeightInstanceStaticMeshManager(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : LightWeightInstanceManager {
  @JsName("StaticMesh")
  public open var staticMesh: StaticMesh

  @JsName("InstancedStaticMeshComponent")
  public open var instancedStaticMeshComponent: HierarchicalInstancedStaticMeshComponent

  @JsName("RenderingIndicesToDataIndices")
  public open var renderingIndicesToDataIndices: Array<Number>

  @JsName("DataIndicesToRenderingIndices")
  public open var dataIndicesToRenderingIndices: Array<Number>

  @JsName("OnRep_StaticMesh")
  public open fun onRepStaticMesh(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightWeightInstanceStaticMeshManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightWeightInstanceStaticMeshManager

    @JsName("C")
    public fun copy(other: UObject): LightWeightInstanceStaticMeshManager

    @JsName("C")
    public fun copy(other: Any): LightWeightInstanceStaticMeshManager
  }
}

@JsName("LODActor")
public open external class LodActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("StaticMeshComponent")
  public open var staticMeshComponent: StaticMeshComponent

  @JsName("InstancedStaticMeshComponents")
  public open var instancedStaticMeshComponents: Any

  @JsName("Proxy")
  public open var proxy: HlodProxy

  @JsName("Key")
  public open var key: String

  @JsName("LODDrawDistance")
  public open var lodDrawDistance: Number

  @JsName("LODLevel")
  public open var lodLevel: Number

  @JsName("SubActors")
  public open var subActors: Array<Actor>

  @JsName("CachedNumHLODLevels")
  public open var cachedNumHlodLevels: Number

  @JsName("NumTrianglesInSubActors")
  public open var numTrianglesInSubActors: Any

  @JsName("NumTrianglesInMergedMesh")
  public open var numTrianglesInMergedMesh: Any

  @JsName("bOverrideMaterialMergeSettings")
  public open var overrideMaterialMergeSettings: Boolean

  @JsName("MaterialSettings")
  public open var materialSettings: MaterialProxySettings

  @JsName("bOverrideTransitionScreenSize")
  public open var overrideTransitionScreenSize: Boolean

  @JsName("TransitionScreenSize")
  public open var transitionScreenSize: Number

  @JsName("bOverrideScreenSize")
  public open var overrideScreenSize: Boolean

  @JsName("ScreenSize")
  public open var screenSize: Number

  @JsName("LODActorTag")
  public open var lodActorTag: String

  @JsName("bBuiltFromHLODDesc")
  public open var builtFromHlodDesc: Boolean

  @JsName("ProxyDesc")
  public open var proxyDesc: HlodProxyDesc

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodActor

    @JsName("C")
    public fun copy(other: UObject): LodActor

    @JsName("C")
    public fun copy(other: Any): LodActor
  }
}

@JsName("ESyncOption")
public external object SyncOption {
  public var Drive: String

  public var Passive: String

  public var Disabled: String

  @JsName("ESyncOption_MAX")
  public var Max: String
}

public open external class ComponentSync {
  @JsName("Name")
  public open var name: String

  @JsName("SyncOption")
  public open var syncOption: String

  public open fun clone(): ComponentSync

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ComponentSync

    @JsName("C")
    public fun copy(other: Any): ComponentSync
  }
}

@JsName("LODSyncComponent")
public open external class LodSyncComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("NumLODs")
  public open var numLoDs: Number

  @JsName("ForcedLOD")
  public open var forcedLod: Number

  @JsName("MinLOD")
  public open var minLod: Number

  @JsName("ComponentsToSync")
  public open var componentsToSync: Array<ComponentSync>

  @JsName("CustomLODMapping")
  public open var customLodMapping: Any

  @JsName("CurrentLOD")
  public open var currentLod: Number

  @JsName("CurrentNumLODs")
  public open var currentNumLoDs: Number

  @JsName("DriveComponents")
  public open var driveComponents: Array<PrimitiveComponent>

  @JsName("SubComponents")
  public open var subComponents: Array<PrimitiveComponent>

  @JsName("GetLODSyncDebugText")
  public open fun getLodSyncDebugText(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodSyncComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodSyncComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodSyncComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodSyncComponent

    @JsName("C")
    public fun copy(other: UObject): LodSyncComponent

    @JsName("C")
    public fun copy(other: Any): LodSyncComponent
  }
}

@JsName("LODSyncInterface")
public open external class LodSyncInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodSyncInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodSyncInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodSyncInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodSyncInterface

    @JsName("C")
    public fun copy(other: UObject): LodSyncInterface

    @JsName("C")
    public fun copy(other: Any): LodSyncInterface
  }
}

public open external class MaterialExpressionAbs(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionAbs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionAbs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionAbs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionAbs

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionAbs

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionAbs
  }
}

public open external class MaterialExpressionAbsorptionMediumMaterialOutput(
  outer: UObject,
) : MaterialExpressionCustomOutput {
  @JsName("TransmittanceColor")
  public open var transmittanceColor: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionAbsorptionMediumMaterialOutput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MaterialExpressionAbsorptionMediumMaterialOutput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionAbsorptionMediumMaterialOutput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionAbsorptionMediumMaterialOutput

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionAbsorptionMediumMaterialOutput

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionAbsorptionMediumMaterialOutput
  }
}

@JsName("MaterialExpressionActorPositionWS")
public open external class MaterialExpressionActorPositionWs(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionActorPositionWs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionActorPositionWs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionActorPositionWs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionActorPositionWs

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionActorPositionWs

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionActorPositionWs
  }
}

public open external class MaterialExpressionAdd(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: ExpressionInput

  @JsName("B")
  public open var b: ExpressionInput

  @JsName("ConstA")
  public open var constA: Number

  @JsName("ConstB")
  public open var constB: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionAdd

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionAdd

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionAdd

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionAdd

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionAdd

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionAdd
  }
}

@JsName("EMaterialSamplerType")
public external object MaterialSamplerType {
  @JsName("SAMPLERTYPE_Color")
  public var Color: String

  @JsName("SAMPLERTYPE_Grayscale")
  public var Grayscale: String

  @JsName("SAMPLERTYPE_Alpha")
  public var Alpha: String

  @JsName("SAMPLERTYPE_Normal")
  public var Normal: String

  @JsName("SAMPLERTYPE_Masks")
  public var Masks: String

  @JsName("SAMPLERTYPE_DistanceFieldFont")
  public var DistanceFieldFont: String

  @JsName("SAMPLERTYPE_LinearColor")
  public var LinearColor: String

  @JsName("SAMPLERTYPE_LinearGrayscale")
  public var LinearGrayscale: String

  @JsName("SAMPLERTYPE_Data")
  public var Data: String

  @JsName("SAMPLERTYPE_External")
  public var External: String

  @JsName("SAMPLERTYPE_VirtualColor")
  public var VirtualColor: String

  @JsName("SAMPLERTYPE_VirtualGrayscale")
  public var VirtualGrayscale: String

  @JsName("SAMPLERTYPE_VirtualAlpha")
  public var VirtualAlpha: String

  @JsName("SAMPLERTYPE_VirtualNormal")
  public var VirtualNormal: String

  @JsName("SAMPLERTYPE_VirtualMasks")
  public var VirtualMasks: String

  @JsName("SAMPLERTYPE_VirtualLinearColor")
  public var VirtualLinearColor: String

  @JsName("SAMPLERTYPE_VirtualLinearGrayscale")
  public var VirtualLinearGrayscale: String

  @JsName("SAMPLERTYPE_MAX")
  public var Max: String
}

public open external class MaterialExpressionTextureBase(
  outer: UObject,
) : MaterialExpression {
  @JsName("Texture")
  public open var texture: Texture

  @JsName("SamplerType")
  public open var samplerType: String

  @JsName("IsDefaultMeshpaintTexture")
  public open var isDefaultMeshpaintTexture: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionTextureBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionTextureBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionTextureBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionTextureBase

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionTextureBase

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionTextureBase
  }
}

@JsName("ETextureMipValueMode")
public external object TextureMipValueMode {
  @JsName("TMVM_None")
  public var None: String

  @JsName("TMVM_MipLevel")
  public var MipLevel: String

  @JsName("TMVM_MipBias")
  public var MipBias: String

  @JsName("TMVM_Derivative")
  public var Derivative: String

  @JsName("TMVM_MAX")
  public var Max: String
}

@JsName("ESamplerSourceMode")
public external object SamplerSourceMode {
  @JsName("SSM_FromTextureAsset")
  public var FromTextureAsset: String

  @JsName("SSM_Wrap_WorldGroupSettings")
  public var WrapWorldGroupSettings: String

  @JsName("SSM_Clamp_WorldGroupSettings")
  public var ClampWorldGroupSettings: String

  @JsName("SSM_MAX")
  public var Max: String
}

public open external class MaterialExpressionTextureSample(
  outer: UObject,
) : MaterialExpressionTextureBase {
  @JsName("Coordinates")
  public open var coordinates: ExpressionInput

  @JsName("TextureObject")
  public open var textureObject: ExpressionInput

  @JsName("MipValue")
  public open var mipValue: ExpressionInput

  @JsName("CoordinatesDX")
  public open var coordinatesDx: ExpressionInput

  @JsName("CoordinatesDY")
  public open var coordinatesDy: ExpressionInput

  @JsName("AutomaticViewMipBiasValue")
  public open var automaticViewMipBiasValue: ExpressionInput

  @JsName("MipValueMode")
  public open var mipValueMode: String

  @JsName("SamplerSource")
  public open var samplerSource: String

  @JsName("AutomaticViewMipBias")
  public open var automaticViewMipBias: Boolean

  @JsName("ConstCoordinate")
  public open var constCoordinate: Number

  @JsName("ConstMipValue")
  public open var constMipValue: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionTextureSample

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionTextureSample

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionTextureSample

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionTextureSample

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionTextureSample

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionTextureSample
  }
}

public open external class MaterialExpressionTextureSampleParameter(
  outer: UObject,
) : MaterialExpressionTextureSample {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  @JsName("Group")
  public open var group: String

  @JsName("SortPriority")
  public open var sortPriority: Number

  @JsName("ChannelNames")
  public open var channelNames: ParameterChannelNames

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionTextureSampleParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionTextureSampleParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionTextureSampleParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionTextureSampleParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionTextureSampleParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionTextureSampleParameter
  }
}

@JsName("MaterialExpressionTextureSampleParameter2D")
public open external class MaterialExpressionTextureSampleParameter2d(
  outer: UObject,
) : MaterialExpressionTextureSampleParameter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionTextureSampleParameter2d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MaterialExpressionTextureSampleParameter2d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionTextureSampleParameter2d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionTextureSampleParameter2d

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionTextureSampleParameter2d

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionTextureSampleParameter2d
  }
}

@JsName("ETextureColorChannel")
public external object TextureColorChannel {
  @JsName("TCC_Red")
  public var Red: String

  @JsName("TCC_Green")
  public var Green: String

  @JsName("TCC_Blue")
  public var Blue: String

  @JsName("TCC_Alpha")
  public var Alpha: String

  @JsName("TCC_MAX")
  public var Max: String
}

public open external class MaterialExpressionAntialiasedTextureMask(
  outer: UObject,
) : MaterialExpressionTextureSampleParameter2d {
  @JsName("Threshold")
  public open var threshold: Number

  @JsName("Channel")
  public open var channel: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionAntialiasedTextureMask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionAntialiasedTextureMask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionAntialiasedTextureMask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionAntialiasedTextureMask

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionAntialiasedTextureMask

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionAntialiasedTextureMask
  }
}

public open external class MaterialExpressionAppendVector(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: ExpressionInput

  @JsName("B")
  public open var b: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionAppendVector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionAppendVector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionAppendVector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionAppendVector

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionAppendVector

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionAppendVector
  }
}

public open external class MaterialExpressionArccosine(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionArccosine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionArccosine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionArccosine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionArccosine

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionArccosine

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionArccosine
  }
}

public open external class MaterialExpressionArccosineFast(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionArccosineFast

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionArccosineFast

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionArccosineFast

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionArccosineFast

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionArccosineFast

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionArccosineFast
  }
}

public open external class MaterialExpressionArcsine(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionArcsine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionArcsine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionArcsine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionArcsine

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionArcsine

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionArcsine
  }
}

public open external class MaterialExpressionArcsineFast(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionArcsineFast

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionArcsineFast

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionArcsineFast

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionArcsineFast

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionArcsineFast

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionArcsineFast
  }
}

public open external class MaterialExpressionArctangent(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionArctangent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionArctangent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionArctangent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionArctangent

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionArctangent

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionArctangent
  }
}

public open external class MaterialExpressionArctangent2(
  outer: UObject,
) : MaterialExpression {
  @JsName("Y")
  public open var y: ExpressionInput

  @JsName("X")
  public open var x: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionArctangent2

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionArctangent2

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionArctangent2

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionArctangent2

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionArctangent2

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionArctangent2
  }
}

public open external class MaterialExpressionArctangent2Fast(
  outer: UObject,
) : MaterialExpression {
  @JsName("Y")
  public open var y: ExpressionInput

  @JsName("X")
  public open var x: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionArctangent2Fast

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionArctangent2Fast

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionArctangent2Fast

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionArctangent2Fast

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionArctangent2Fast

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionArctangent2Fast
  }
}

public open external class MaterialExpressionArctangentFast(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionArctangentFast

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionArctangentFast

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionArctangentFast

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionArctangentFast

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionArctangentFast

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionArctangentFast
  }
}

public open external class MaterialExpressionAtmosphericFogColor(
  outer: UObject,
) : MaterialExpression {
  @JsName("WorldPosition")
  public open var worldPosition: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionAtmosphericFogColor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionAtmosphericFogColor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionAtmosphericFogColor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionAtmosphericFogColor

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionAtmosphericFogColor

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionAtmosphericFogColor
  }
}

public open external class MaterialExpressionAtmosphericLightColor(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionAtmosphericLightColor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionAtmosphericLightColor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionAtmosphericLightColor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionAtmosphericLightColor

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionAtmosphericLightColor

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionAtmosphericLightColor
  }
}

public open external class MaterialExpressionAtmosphericLightVector(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionAtmosphericLightVector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionAtmosphericLightVector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionAtmosphericLightVector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionAtmosphericLightVector

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionAtmosphericLightVector

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionAtmosphericLightVector
  }
}

public open external class MaterialExpressionBentNormalCustomOutput(
  outer: UObject,
) : MaterialExpressionCustomOutput {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionBentNormalCustomOutput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionBentNormalCustomOutput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionBentNormalCustomOutput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionBentNormalCustomOutput

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionBentNormalCustomOutput

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionBentNormalCustomOutput
  }
}

public open external class MaterialExpressionBinaryOp(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: ExpressionInput

  @JsName("B")
  public open var b: ExpressionInput

  @JsName("ConstA")
  public open var constA: Number

  @JsName("ConstB")
  public open var constB: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionBinaryOp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionBinaryOp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionBinaryOp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionBinaryOp

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionBinaryOp

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionBinaryOp
  }
}

public open external class MaterialExpressionLess(
  outer: UObject,
) : MaterialExpressionBinaryOp {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionLess

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionLess

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionLess

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionLess

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionLess

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionLess
  }
}

public open external class MaterialExpressionBlackBody(
  outer: UObject,
) : MaterialExpression {
  @JsName("Temp")
  public open var temp: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionBlackBody

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionBlackBody

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionBlackBody

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionBlackBody

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionBlackBody

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionBlackBody
  }
}

@JsName("EMaterialAttributeBlend")
public external object MaterialAttributeBlend {
  public var Blend: String

  public var UseA: String

  public var UseB: String

  @JsName("EMaterialAttributeBlend_MAX")
  public var Max: String
}

public open external class MaterialExpressionBlendMaterialAttributes(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: MaterialAttributesInput

  @JsName("B")
  public open var b: MaterialAttributesInput

  @JsName("Alpha")
  public open var alpha: ExpressionInput

  @JsName("PixelAttributeBlendType")
  public open var pixelAttributeBlendType: String

  @JsName("VertexAttributeBlendType")
  public open var vertexAttributeBlendType: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionBlendMaterialAttributes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionBlendMaterialAttributes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionBlendMaterialAttributes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionBlendMaterialAttributes

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionBlendMaterialAttributes

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionBlendMaterialAttributes
  }
}

public open external class MaterialExpressionBreakMaterialAttributes(
  outer: UObject,
) : MaterialExpression {
  @JsName("MaterialAttributes")
  public open var materialAttributes: MaterialAttributesInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionBreakMaterialAttributes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionBreakMaterialAttributes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionBreakMaterialAttributes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionBreakMaterialAttributes

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionBreakMaterialAttributes

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionBreakMaterialAttributes
  }
}

public open external class MaterialExpressionBumpOffset(
  outer: UObject,
) : MaterialExpression {
  @JsName("Coordinate")
  public open var coordinate: ExpressionInput

  @JsName("Height")
  public open var height: ExpressionInput

  @JsName("HeightRatioInput")
  public open var heightRatioInput: ExpressionInput

  @JsName("HeightRatio")
  public open var heightRatio: Number

  @JsName("ReferencePlane")
  public open var referencePlane: Number

  @JsName("ConstCoordinate")
  public open var constCoordinate: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionBumpOffset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionBumpOffset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionBumpOffset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionBumpOffset

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionBumpOffset

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionBumpOffset
  }
}

@JsName("MaterialExpressionCameraPositionWS")
public open external class MaterialExpressionCameraPositionWs(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCameraPositionWs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCameraPositionWs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCameraPositionWs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCameraPositionWs

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCameraPositionWs

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCameraPositionWs
  }
}

@JsName("MaterialExpressionCameraVectorWS")
public open external class MaterialExpressionCameraVectorWs(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCameraVectorWs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCameraVectorWs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCameraVectorWs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCameraVectorWs

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCameraVectorWs

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCameraVectorWs
  }
}

public open external class MaterialExpressionCeil(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCeil

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCeil

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCeil

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCeil

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCeil

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCeil
  }
}

public open external class MaterialExpressionParameter(
  outer: UObject,
) : MaterialExpression {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  @JsName("Group")
  public open var group: String

  @JsName("SortPriority")
  public open var sortPriority: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionParameter
  }
}

public open external class MaterialExpressionVectorParameter(
  outer: UObject,
) : MaterialExpressionParameter {
  @JsName("DefaultValue")
  public open var defaultValue: LinearColor

  @JsName("bUseCustomPrimitiveData")
  public open var useCustomPrimitiveData: Boolean

  @JsName("PrimitiveDataIndex")
  public open var primitiveDataIndex: Number

  @JsName("ChannelNames")
  public open var channelNames: ParameterChannelNames

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionVectorParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionVectorParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionVectorParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionVectorParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionVectorParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionVectorParameter
  }
}

@JsName("EChannelMaskParameterColor")
public external object ChannelMaskParameterColor {
  public var Red: String

  public var Green: String

  public var Blue: String

  public var Alpha: String

  @JsName("EChannelMaskParameterColor_MAX")
  public var Max: String
}

public open external class MaterialExpressionChannelMaskParameter(
  outer: UObject,
) : MaterialExpressionVectorParameter {
  @JsName("MaskChannel")
  public open var maskChannel: String

  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionChannelMaskParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionChannelMaskParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionChannelMaskParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionChannelMaskParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionChannelMaskParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionChannelMaskParameter
  }
}

@JsName("EClampMode")
public external object ClampMode {
  @JsName("CMODE_Clamp")
  public var Clamp: String

  @JsName("CMODE_ClampMin")
  public var ClampMin: String

  @JsName("CMODE_ClampMax")
  public var ClampMax: String

  @JsName("CMODE_MAX")
  public var Max: String
}

public open external class MaterialExpressionClamp(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  @JsName("Min")
  public open var min: ExpressionInput

  @JsName("Max")
  public open var max: ExpressionInput

  @JsName("ClampMode")
  public open var clampMode: String

  @JsName("MinDefault")
  public open var minDefault: Number

  @JsName("MaxDefault")
  public open var maxDefault: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionClamp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionClamp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionClamp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionClamp

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionClamp

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionClamp
  }
}

public open external class MaterialExpressionClearCoatNormalCustomOutput(
  outer: UObject,
) : MaterialExpressionCustomOutput {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionClearCoatNormalCustomOutput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MaterialExpressionClearCoatNormalCustomOutput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionClearCoatNormalCustomOutput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionClearCoatNormalCustomOutput

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionClearCoatNormalCustomOutput

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionClearCoatNormalCustomOutput
  }
}

public open external class MaterialExpressionCloudSampleAttribute(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCloudSampleAttribute

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCloudSampleAttribute

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCloudSampleAttribute

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCloudSampleAttribute

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCloudSampleAttribute

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCloudSampleAttribute
  }
}

public open external class MaterialExpressionCollectionParameter(
  outer: UObject,
) : MaterialExpression {
  @JsName("Collection")
  public open var collection: MaterialParameterCollection

  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterId")
  public open var parameterId: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCollectionParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCollectionParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCollectionParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCollectionParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCollectionParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCollectionParameter
  }
}

public open external class MaterialExpressionComponentMask(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  @JsName("R")
  public open var r: Boolean

  @JsName("G")
  public open var g: Boolean

  @JsName("B")
  public open var b: Boolean

  @JsName("A")
  public open var a: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionComponentMask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionComponentMask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionComponentMask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionComponentMask

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionComponentMask

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionComponentMask
  }
}

public open external class MaterialExpressionRerouteBase(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionRerouteBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionRerouteBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionRerouteBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionRerouteBase

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionRerouteBase

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionRerouteBase
  }
}

public open external class MaterialExpressionReroute(
  outer: UObject,
) : MaterialExpressionRerouteBase {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionReroute

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionReroute

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionReroute

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionReroute

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionReroute

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionReroute
  }
}

public open external class CompositeReroute {
  @JsName("Name")
  public open var name: String

  @JsName("Expression")
  public open var expression: MaterialExpressionReroute

  public open fun clone(): CompositeReroute

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CompositeReroute

    @JsName("C")
    public fun copy(other: Any): CompositeReroute
  }
}

public open external class MaterialExpressionPinBase(
  outer: UObject,
) : MaterialExpression {
  @JsName("ReroutePins")
  public open var reroutePins: Array<CompositeReroute>

  @JsName("PinDirection")
  public open var pinDirection: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionPinBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionPinBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionPinBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionPinBase

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionPinBase

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionPinBase
  }
}

public open external class MaterialExpressionComposite(
  outer: UObject,
) : MaterialExpression {
  @JsName("SubgraphName")
  public open var subgraphName: String

  @JsName("InputExpressions")
  public open var inputExpressions: MaterialExpressionPinBase

  @JsName("OutputExpressions")
  public open var outputExpressions: MaterialExpressionPinBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionComposite

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionComposite

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionComposite

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionComposite

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionComposite

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionComposite
  }
}

public open external class MaterialExpressionConstant(
  outer: UObject,
) : MaterialExpression {
  @JsName("R")
  public open var r: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionConstant

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionConstant

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionConstant

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionConstant

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionConstant

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionConstant
  }
}

public open external class MaterialExpressionConstant2Vector(
  outer: UObject,
) : MaterialExpression {
  @JsName("R")
  public open var r: Number

  @JsName("G")
  public open var g: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionConstant2Vector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionConstant2Vector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionConstant2Vector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionConstant2Vector

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionConstant2Vector

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionConstant2Vector
  }
}

public open external class MaterialExpressionConstant3Vector(
  outer: UObject,
) : MaterialExpression {
  @JsName("Constant")
  public open var constant: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionConstant3Vector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionConstant3Vector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionConstant3Vector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionConstant3Vector

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionConstant3Vector

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionConstant3Vector
  }
}

public open external class MaterialExpressionConstant4Vector(
  outer: UObject,
) : MaterialExpression {
  @JsName("Constant")
  public open var constant: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionConstant4Vector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionConstant4Vector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionConstant4Vector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionConstant4Vector

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionConstant4Vector

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionConstant4Vector
  }
}

public open external class MaterialExpressionConstantBiasScale(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  @JsName("Bias")
  public open var bias: Number

  @JsName("Scale")
  public open var scale: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionConstantBiasScale

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionConstantBiasScale

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionConstantBiasScale

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionConstantBiasScale

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionConstantBiasScale

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionConstantBiasScale
  }
}

public open external class MaterialExpressionCosine(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  @JsName("Period")
  public open var period: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCosine

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCosine

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCosine

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCosine

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCosine

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCosine
  }
}

public open external class MaterialExpressionCrossProduct(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: ExpressionInput

  @JsName("B")
  public open var b: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCrossProduct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCrossProduct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCrossProduct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCrossProduct

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCrossProduct

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCrossProduct
  }
}

public open external class MaterialExpressionScalarParameter(
  outer: UObject,
) : MaterialExpressionParameter {
  @JsName("DefaultValue")
  public open var defaultValue: Number

  @JsName("bUseCustomPrimitiveData")
  public open var useCustomPrimitiveData: Boolean

  @JsName("PrimitiveDataIndex")
  public open var primitiveDataIndex: Number

  @JsName("SliderMin")
  public open var sliderMin: Number

  @JsName("SliderMax")
  public open var sliderMax: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionScalarParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionScalarParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionScalarParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionScalarParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionScalarParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionScalarParameter
  }
}

public open external class MaterialExpressionCurveAtlasRowParameter(
  outer: UObject,
) : MaterialExpressionScalarParameter {
  @JsName("Curve")
  public open var curve: CurveLinearColor

  @JsName("Atlas")
  public open var atlas: CurveLinearColorAtlas

  @JsName("InputTime")
  public open var inputTime: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCurveAtlasRowParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCurveAtlasRowParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCurveAtlasRowParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCurveAtlasRowParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCurveAtlasRowParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCurveAtlasRowParameter
  }
}

@JsName("ECustomMaterialOutputType")
public external object CustomMaterialOutputType {
  @JsName("CMOT_Float1")
  public var Float1: String

  @JsName("CMOT_Float2")
  public var Float2: String

  @JsName("CMOT_Float3")
  public var Float3: String

  @JsName("CMOT_Float4")
  public var Float4: String

  @JsName("CMOT_MaterialAttributes")
  public var MaterialAttributes: String

  @JsName("CMOT_MAX")
  public var Max: String
}

public open external class CustomInput {
  @JsName("InputName")
  public open var inputName: String

  @JsName("Input")
  public open var input: ExpressionInput

  public open fun clone(): CustomInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomInput

    @JsName("C")
    public fun copy(other: Any): CustomInput
  }
}

public open external class CustomOutput {
  @JsName("OutputName")
  public open var outputName: String

  @JsName("OutputType")
  public open var outputType: String

  public open fun clone(): CustomOutput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomOutput

    @JsName("C")
    public fun copy(other: Any): CustomOutput
  }
}

public open external class CustomDefine {
  @JsName("DefineName")
  public open var defineName: String

  @JsName("DefineValue")
  public open var defineValue: String

  public open fun clone(): CustomDefine

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomDefine

    @JsName("C")
    public fun copy(other: Any): CustomDefine
  }
}

public open external class MaterialExpressionCustom(
  outer: UObject,
) : MaterialExpression {
  @JsName("Code")
  public open var code: String

  @JsName("OutputType")
  public open var outputType: String

  @JsName("Description")
  public open var description: String

  @JsName("Inputs")
  public open var inputs: Array<CustomInput>

  @JsName("AdditionalOutputs")
  public open var additionalOutputs: Array<CustomOutput>

  @JsName("AdditionalDefines")
  public open var additionalDefines: Array<CustomDefine>

  @JsName("IncludeFilePaths")
  public open var includeFilePaths: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionCustom

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionCustom

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionCustom

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionCustom

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionCustom

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionCustom
  }
}

@JsName("EDBufferTextureId")
public external object DBufferTextureId {
  @JsName("DBT_A")
  public var a: String

  @JsName("DBT_B")
  public var b: String

  @JsName("DBT_C")
  public var c: String

  @JsName("DBT_MAX")
  public var Max: String
}

public open external class MaterialExpressionDBufferTexture(
  outer: UObject,
) : MaterialExpression {
  @JsName("Coordinates")
  public open var coordinates: ExpressionInput

  @JsName("DBufferTextureId")
  public open var dBufferTextureId: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDBufferTexture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDBufferTexture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDBufferTexture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDBufferTexture

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDBufferTexture

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDBufferTexture
  }
}

@JsName("MaterialExpressionDDX")
public open external class MaterialExpressionDdx(
  outer: UObject,
) : MaterialExpression {
  @JsName("Value")
  public open var value: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDdx

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDdx

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDdx

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDdx

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDdx

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDdx
  }
}

@JsName("MaterialExpressionDDY")
public open external class MaterialExpressionDdy(
  outer: UObject,
) : MaterialExpression {
  @JsName("Value")
  public open var value: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDdy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDdy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDdy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDdy

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDdy

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDdy
  }
}

public open external class MaterialExpressionDecalDerivative(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDecalDerivative

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDecalDerivative

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDecalDerivative

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDecalDerivative

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDecalDerivative

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDecalDerivative
  }
}

public open external class MaterialExpressionDecalLifetimeOpacity(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDecalLifetimeOpacity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDecalLifetimeOpacity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDecalLifetimeOpacity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDecalLifetimeOpacity

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDecalLifetimeOpacity

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDecalLifetimeOpacity
  }
}

public open external class MaterialExpressionDecalMipmapLevel(
  outer: UObject,
) : MaterialExpression {
  @JsName("TextureSize")
  public open var textureSize: ExpressionInput

  @JsName("ConstWidth")
  public open var constWidth: Number

  @JsName("ConstHeight")
  public open var constHeight: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDecalMipmapLevel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDecalMipmapLevel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDecalMipmapLevel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDecalMipmapLevel

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDecalMipmapLevel

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDecalMipmapLevel
  }
}

public open external class MaterialExpressionDeltaTime(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDeltaTime

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDeltaTime

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDeltaTime

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDeltaTime

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDeltaTime

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDeltaTime
  }
}

public open external class MaterialExpressionDepthFade(
  outer: UObject,
) : MaterialExpression {
  @JsName("InOpacity")
  public open var inOpacity: ExpressionInput

  @JsName("FadeDistance")
  public open var fadeDistance: ExpressionInput

  @JsName("OpacityDefault")
  public open var opacityDefault: Number

  @JsName("FadeDistanceDefault")
  public open var fadeDistanceDefault: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDepthFade

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDepthFade

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDepthFade

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDepthFade

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDepthFade

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDepthFade
  }
}

@JsName("EDepthOfFieldFunctionValue")
public external object DepthOfFieldFunctionValue {
  @JsName("TDOF_NearAndFarMask")
  public var NearAndFarMask: String

  @JsName("TDOF_NearMask")
  public var NearMask: String

  @JsName("TDOF_FarMask")
  public var FarMask: String

  @JsName("TDOF_CircleOfConfusionRadius")
  public var CircleOfConfusionRadius: String

  @JsName("TDOF_MAX")
  public var Max: String
}

public open external class MaterialExpressionDepthOfFieldFunction(
  outer: UObject,
) : MaterialExpression {
  @JsName("FunctionValue")
  public open var functionValue: String

  @JsName("Depth")
  public open var depth: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDepthOfFieldFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDepthOfFieldFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDepthOfFieldFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDepthOfFieldFunction

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDepthOfFieldFunction

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDepthOfFieldFunction
  }
}

public open external class MaterialExpressionDeriveNormalZ(
  outer: UObject,
) : MaterialExpression {
  @JsName("InXY")
  public open var inXy: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDeriveNormalZ

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDeriveNormalZ

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDeriveNormalZ

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDeriveNormalZ

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDeriveNormalZ

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDeriveNormalZ
  }
}

public open external class MaterialExpressionDesaturation(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  @JsName("Fraction")
  public open var fraction: ExpressionInput

  @JsName("LuminanceFactors")
  public open var luminanceFactors: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDesaturation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDesaturation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDesaturation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDesaturation

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDesaturation

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDesaturation
  }
}

public open external class MaterialExpressionDistance(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: ExpressionInput

  @JsName("B")
  public open var b: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDistance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDistance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDistance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDistance

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDistance

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDistance
  }
}

public open external class MaterialExpressionDistanceCullFade(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDistanceCullFade

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDistanceCullFade

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDistanceCullFade

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDistanceCullFade

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDistanceCullFade

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDistanceCullFade
  }
}

public open external class MaterialExpressionDistanceFieldGradient(
  outer: UObject,
) : MaterialExpression {
  public open var position: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDistanceFieldGradient

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDistanceFieldGradient

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDistanceFieldGradient

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDistanceFieldGradient

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDistanceFieldGradient

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDistanceFieldGradient
  }
}

public open external class MaterialExpressionDistanceFieldsRenderingSwitch(
  outer: UObject,
) : MaterialExpression {
  @JsName("No")
  public open var no: ExpressionInput

  @JsName("Yes")
  public open var yes: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDistanceFieldsRenderingSwitch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MaterialExpressionDistanceFieldsRenderingSwitch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDistanceFieldsRenderingSwitch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDistanceFieldsRenderingSwitch

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDistanceFieldsRenderingSwitch

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDistanceFieldsRenderingSwitch
  }
}

public open external class MaterialExpressionDistanceToNearestSurface(
  outer: UObject,
) : MaterialExpression {
  public open var position: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDistanceToNearestSurface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MaterialExpressionDistanceToNearestSurface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDistanceToNearestSurface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDistanceToNearestSurface

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDistanceToNearestSurface

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDistanceToNearestSurface
  }
}

public open external class MaterialExpressionDivide(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: ExpressionInput

  @JsName("B")
  public open var b: ExpressionInput

  @JsName("ConstA")
  public open var constA: Number

  @JsName("ConstB")
  public open var constB: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDivide

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDivide

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDivide

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDivide

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDivide

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDivide
  }
}

public open external class MaterialExpressionDotProduct(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: ExpressionInput

  @JsName("B")
  public open var b: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDotProduct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDotProduct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDotProduct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDotProduct

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDotProduct

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDotProduct
  }
}

public open external class MaterialExpressionDoubleVectorParameter(
  outer: UObject,
) : MaterialExpressionParameter {
  @JsName("DefaultValue")
  public open var defaultValue: Vector4d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDoubleVectorParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDoubleVectorParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDoubleVectorParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDoubleVectorParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDoubleVectorParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDoubleVectorParameter
  }
}

public open external class MaterialExpressionDynamicParameter(
  outer: UObject,
) : MaterialExpression {
  @JsName("ParamNames")
  public open var paramNames: Array<String>

  @JsName("DefaultValue")
  public open var defaultValue: LinearColor

  @JsName("ParameterIndex")
  public open var parameterIndex: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionDynamicParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionDynamicParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionDynamicParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionDynamicParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionDynamicParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionDynamicParameter
  }
}

public open external class MaterialExpressionEyeAdaptation(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionEyeAdaptation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionEyeAdaptation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionEyeAdaptation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionEyeAdaptation

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionEyeAdaptation

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionEyeAdaptation
  }
}

public open external class MaterialExpressionEyeAdaptationInverse(
  outer: UObject,
) : MaterialExpression {
  @JsName("LightValueInput")
  public open var lightValueInput: ExpressionInput

  @JsName("AlphaInput")
  public open var alphaInput: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionEyeAdaptationInverse

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionEyeAdaptationInverse

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionEyeAdaptationInverse

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionEyeAdaptationInverse

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionEyeAdaptationInverse

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionEyeAdaptationInverse
  }
}

public open external class MaterialExpressionFeatureLevelSwitch(
  outer: UObject,
) : MaterialExpression {
  @JsName("Default")
  public open var default: ExpressionInput

  @JsName("Inputs")
  public open var inputs: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFeatureLevelSwitch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFeatureLevelSwitch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFeatureLevelSwitch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFeatureLevelSwitch

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFeatureLevelSwitch

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFeatureLevelSwitch
  }
}

public open external class MaterialExpressionFloor(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFloor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFloor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFloor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFloor

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFloor

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFloor
  }
}

public open external class MaterialExpressionFmod(
  outer: UObject,
) : MaterialExpression {
  @JsName("A")
  public open var a: ExpressionInput

  @JsName("B")
  public open var b: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFmod

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFmod

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFmod

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFmod

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFmod

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFmod
  }
}

public open external class MaterialExpressionFontSample(
  outer: UObject,
) : MaterialExpression {
  @JsName("Font")
  public open var font: Font

  @JsName("FontTexturePage")
  public open var fontTexturePage: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFontSample

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFontSample

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFontSample

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFontSample

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFontSample

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFontSample
  }
}

public open external class MaterialExpressionFontSampleParameter(
  outer: UObject,
) : MaterialExpressionFontSample {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  @JsName("Group")
  public open var group: String

  @JsName("SortPriority")
  public open var sortPriority: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFontSampleParameter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFontSampleParameter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFontSampleParameter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFontSampleParameter

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFontSampleParameter

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFontSampleParameter
  }
}

public open external class MaterialExpressionForLoop(
  outer: UObject,
) : MaterialExpression {
  @JsName("LoopBody")
  public open var loopBody: ExpressionExecOutput

  @JsName("Completed")
  public open var completed: ExpressionExecOutput

  @JsName("StartIndex")
  public open var startIndex: ExpressionInput

  @JsName("EndIndex")
  public open var endIndex: ExpressionInput

  @JsName("IndexStep")
  public open var indexStep: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionForLoop

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionForLoop

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionForLoop

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionForLoop

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionForLoop

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionForLoop
  }
}

public open external class MaterialExpressionFrac(
  outer: UObject,
) : MaterialExpression {
  @JsName("Input")
  public open var input: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFrac

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFrac

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFrac

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFrac

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFrac

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFrac
  }
}

public open external class MaterialExpressionFresnel(
  outer: UObject,
) : MaterialExpression {
  @JsName("ExponentIn")
  public open var exponentIn: ExpressionInput

  @JsName("Exponent")
  public open var exponent: Number

  @JsName("BaseReflectFractionIn")
  public open var baseReflectFractionIn: ExpressionInput

  @JsName("BaseReflectFraction")
  public open var baseReflectFraction: Number

  @JsName("Normal")
  public open var normal: ExpressionInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFresnel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFresnel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFresnel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFresnel

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFresnel

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFresnel
  }
}

public open external class MaterialExpressionGenericConstant(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionGenericConstant

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionGenericConstant

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionGenericConstant

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionGenericConstant

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionGenericConstant

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionGenericConstant
  }
}

public open external class MaterialExpressionConstantDouble(
  outer: UObject,
) : MaterialExpressionGenericConstant {
  @JsName("Value")
  public open var value: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionConstantDouble

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionConstantDouble

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionConstantDouble

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionConstantDouble

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionConstantDouble

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionConstantDouble
  }
}

public open external class MaterialExpressionGetLocal(
  outer: UObject,
) : MaterialExpression {
  @JsName("LocalName")
  public open var localName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionGetLocal

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionGetLocal

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionGetLocal

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionGetLocal

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionGetLocal

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionGetLocal
  }
}

public open external class MaterialExpressionGetMaterialAttributes(
  outer: UObject,
) : MaterialExpression {
  @JsName("MaterialAttributes")
  public open var materialAttributes: MaterialAttributesInput

  @JsName("AttributeGetTypes")
  public open var attributeGetTypes: Array<Guid>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionGetMaterialAttributes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionGetMaterialAttributes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionGetMaterialAttributes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionGetMaterialAttributes

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionGetMaterialAttributes

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionGetMaterialAttributes
  }
}
