// Generated by Detonate Productions Declaration Generation, do not edit manually!
@file:Suppress(
  "INTERFACE_WITH_SUPERCLASS",
  "OVERRIDING_FINAL_MEMBER",
  "RETURN_TYPE_MISMATCH_ON_OVERRIDE",
  "CONFLICTING_OVERLOADS",
)

package ue





public open external class NiagaraStackRoot(
  outer: UObject,
) : NiagaraStackEntry {
  @JsName("SystemPropertiesGroup")
  public open var systemPropertiesGroup: NiagaraStackSystemPropertiesGroup

  @JsName("SystemUserParametersGroup")
  public open var systemUserParametersGroup: NiagaraStackSystemUserParametersGroup

  @JsName("SystemSpawnGroup")
  public open var systemSpawnGroup: NiagaraStackScriptItemGroup

  @JsName("SystemUpdateGroup")
  public open var systemUpdateGroup: NiagaraStackScriptItemGroup

  @JsName("EmitterPropertiesGroup")
  public open var emitterPropertiesGroup: NiagaraStackEmitterPropertiesGroup

  @JsName("EmitterSummaryGroup")
  public open var emitterSummaryGroup: NiagaraStackEmitterSummaryGroup

  @JsName("EmitterSpawnGroup")
  public open var emitterSpawnGroup: NiagaraStackScriptItemGroup

  @JsName("EmitterUpdateGroup")
  public open var emitterUpdateGroup: NiagaraStackScriptItemGroup

  @JsName("ParticleSpawnGroup")
  public open var particleSpawnGroup: NiagaraStackScriptItemGroup

  @JsName("ParticleUpdateGroup")
  public open var particleUpdateGroup: NiagaraStackScriptItemGroup

  @JsName("RenderGroup")
  public open var renderGroup: NiagaraStackRenderItemGroup

  @JsName("SummaryCollapseButton")
  public open var summaryCollapseButton: NiagaraStackSummaryViewCollapseButton

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraStackRoot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraStackRoot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraStackRoot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraStackRoot

    @JsName("C")
    public fun copy(other: UObject): NiagaraStackRoot

    @JsName("C")
    public fun copy(other: Any): NiagaraStackRoot
  }
}

public open external class NiagaraStackSelection(
  outer: UObject,
) : NiagaraStackEntry {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraStackSelection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraStackSelection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraStackSelection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraStackSelection

    @JsName("C")
    public fun copy(other: UObject): NiagaraStackSelection

    @JsName("C")
    public fun copy(other: Any): NiagaraStackSelection
  }
}

public open external class NiagaraStackSimulationStagePropertiesItem(
  outer: UObject,
) : NiagaraStackItem {
  @JsName("SimulationStageObject")
  public open var simulationStageObject: NiagaraStackObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraStackSimulationStagePropertiesItem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraStackSimulationStagePropertiesItem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraStackSimulationStagePropertiesItem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraStackSimulationStagePropertiesItem

    @JsName("C")
    public fun copy(other: UObject): NiagaraStackSimulationStagePropertiesItem

    @JsName("C")
    public fun copy(other: Any): NiagaraStackSimulationStagePropertiesItem
  }
}

public open external class NiagaraStackSimulationStageGroup(
  outer: UObject,
) : NiagaraStackScriptItemGroup {
  @JsName("SimulationStageProperties")
  public open var simulationStageProperties: NiagaraStackSimulationStagePropertiesItem

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraStackSimulationStageGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraStackSimulationStageGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraStackSimulationStageGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraStackSimulationStageGroup

    @JsName("C")
    public fun copy(other: UObject): NiagaraStackSimulationStageGroup

    @JsName("C")
    public fun copy(other: Any): NiagaraStackSimulationStageGroup
  }
}

public open external class NiagaraStackSystemPropertiesItem(
  outer: UObject,
) : NiagaraStackItem {
  @JsName("SystemObject")
  public open var systemObject: NiagaraStackObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraStackSystemPropertiesItem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraStackSystemPropertiesItem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraStackSystemPropertiesItem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraStackSystemPropertiesItem

    @JsName("C")
    public fun copy(other: UObject): NiagaraStackSystemPropertiesItem

    @JsName("C")
    public fun copy(other: Any): NiagaraStackSystemPropertiesItem
  }
}

public open external class NiagaraStackParameterStoreItem(
  outer: UObject,
) : NiagaraStackItem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraStackParameterStoreItem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraStackParameterStoreItem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraStackParameterStoreItem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraStackParameterStoreItem

    @JsName("C")
    public fun copy(other: UObject): NiagaraStackParameterStoreItem

    @JsName("C")
    public fun copy(other: Any): NiagaraStackParameterStoreItem
  }
}

public open external class NiagaraStackViewModel(
  outer: UObject,
) : UObject {
  @JsName("RootEntry")
  public open var rootEntry: NiagaraStackEntry

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraStackViewModel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraStackViewModel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraStackViewModel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraStackViewModel

    @JsName("C")
    public fun copy(other: UObject): NiagaraStackViewModel

    @JsName("C")
    public fun copy(other: Any): NiagaraStackViewModel
  }
}

public open external class NiagaraSystemAuditCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSystemAuditCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSystemAuditCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSystemAuditCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSystemAuditCommandlet

    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemAuditCommandlet

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemAuditCommandlet
  }
}

public open external class NiagaraSystemEditorFolder(
  outer: UObject,
) : UObject {
  @JsName("FolderName")
  public open var folderName: String

  @JsName("ChildFolders")
  public open var childFolders: Array<NiagaraSystemEditorFolder>

  @JsName("ChildEmitterHandleIds")
  public open var childEmitterHandleIds: Array<Guid>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSystemEditorFolder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSystemEditorFolder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSystemEditorFolder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSystemEditorFolder

    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemEditorFolder

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemEditorFolder
  }
}

public open external class NiagaraGraphViewSettings {
  @JsName("Location")
  public open var location: Vector2d

  @JsName("Zoom")
  public open var zoom: Number

  @JsName("bIsValid")
  public open var isValid: Boolean

  public open fun clone(): NiagaraGraphViewSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraGraphViewSettings

    @JsName("C")
    public fun copy(other: Any): NiagaraGraphViewSettings
  }
}

public open external class NiagaraSystemEditorData(
  outer: UObject,
) : NiagaraEditorDataBase {
  @JsName("bSetOrbitModeByAsset")
  public open var setOrbitModeByAsset: Boolean

  @JsName("bSystemViewportInOrbitMode")
  public open var systemViewportInOrbitMode: Boolean

  @JsName("RootFolder")
  public open var rootFolder: NiagaraSystemEditorFolder

  @JsName("StackEditorData")
  public open var stackEditorData: NiagaraStackEditorData

  @JsName("OwnerTransform")
  public open var ownerTransform: Transform

  @JsName("PlaybackRangeMin")
  public open var playbackRangeMin: Number

  @JsName("PlaybackRangeMax")
  public open var playbackRangeMax: Number

  @JsName("SystemOverviewGraph")
  public open var systemOverviewGraph: EdGraph

  @JsName("OverviewGraphViewSettings")
  public open var overviewGraphViewSettings: NiagaraGraphViewSettings

  @JsName("bSystemIsPlaceholder")
  public open var systemIsPlaceholder: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSystemEditorData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSystemEditorData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSystemEditorData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSystemEditorData

    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemEditorData

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemEditorData
  }
}

public open external class NiagaraSystemFactoryNew(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSystemFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSystemFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSystemFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSystemFactoryNew

    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemFactoryNew

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemFactoryNew
  }
}

public open external class NiagaraSystemSelectionViewModel(
  outer: UObject,
) : UObject {
  @JsName("StackSelection")
  public open var stackSelection: NiagaraStackSelection

  @JsName("SelectionStackViewModel")
  public open var selectionStackViewModel: NiagaraStackViewModel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSystemSelectionViewModel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSystemSelectionViewModel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSystemSelectionViewModel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSystemSelectionViewModel

    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemSelectionViewModel

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemSelectionViewModel
  }
}

public open external class NiagaraThumbnailRendererBase(
  outer: UObject,
) : TextureThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraThumbnailRendererBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraThumbnailRendererBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraThumbnailRendererBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraThumbnailRendererBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraThumbnailRendererBase

    @JsName("C")
    public fun copy(other: Any): NiagaraThumbnailRendererBase
  }
}

public open external class NiagaraEmitterThumbnailRenderer(
  outer: UObject,
) : NiagaraThumbnailRendererBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraEmitterThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraEmitterThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraEmitterThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraEmitterThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): NiagaraEmitterThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): NiagaraEmitterThumbnailRenderer
  }
}

public open external class NiagaraSystemThumbnailRenderer(
  outer: UObject,
) : NiagaraThumbnailRendererBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSystemThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSystemThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSystemThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSystemThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemThumbnailRenderer
  }
}

public open external class NiagaraVersionMetaData(
  outer: UObject,
) : UObject {
  @JsName("bIsExposedVersion")
  public open var isExposedVersion: Boolean

  @JsName("ChangeDescription")
  public open var changeDescription: String

  @JsName("bIsVisibleInVersionSelector")
  public open var isVisibleInVersionSelector: Boolean

  @JsName("VersionGuid")
  public open var versionGuid: Guid

  @JsName("UpdateScriptExecution")
  public open var updateScriptExecution: String

  @JsName("PythonUpdateScript")
  public open var pythonUpdateScript: String

  @JsName("ScriptAsset")
  public open var scriptAsset: FilePath

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraVersionMetaData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraVersionMetaData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraVersionMetaData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraVersionMetaData

    @JsName("C")
    public fun copy(other: UObject): NiagaraVersionMetaData

    @JsName("C")
    public fun copy(other: Any): NiagaraVersionMetaData
  }
}

public open external class NiagaraPythonScriptModuleInput(
  outer: UObject,
) : UObject {
  @JsName("Input")
  public open var input: NiagaraClipboardFunctionInput

  @JsName("IsSet")
  public open fun isSet(): Boolean

  @JsName("IsLocalValue")
  public open fun isLocalValue(): Boolean

  @JsName("AsVec4")
  public open fun asVec4(): Vector4

  @JsName("AsVec3")
  public open fun asVec3(): Vector

  @JsName("AsVec2")
  public open fun asVec2(): Vector2d

  @JsName("AsQuat")
  public open fun asQuat(): Quat

  @JsName("AsInt")
  public open fun asInt(): Number

  @JsName("AsFloat")
  public open fun asFloat(): Number

  @JsName("AsEnum")
  public open fun asEnum(): String

  @JsName("AsColor")
  public open fun asColor(): LinearColor

  @JsName("AsBool")
  public open fun asBool(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraPythonScriptModuleInput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraPythonScriptModuleInput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraPythonScriptModuleInput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraPythonScriptModuleInput

    @JsName("C")
    public fun copy(other: UObject): NiagaraPythonScriptModuleInput

    @JsName("C")
    public fun copy(other: Any): NiagaraPythonScriptModuleInput
  }
}

public open external class UpgradeNiagaraScriptResults(
  outer: UObject,
) : UObject {
  @JsName("bCancelledByPythonError")
  public open var cancelledByPythonError: Boolean

  @JsName("OldInputs")
  public open var oldInputs: Array<NiagaraPythonScriptModuleInput>

  @JsName("NewInputs")
  public open var newInputs: Array<NiagaraPythonScriptModuleInput>

  @JsName("DummyInput")
  public open var dummyInput: NiagaraPythonScriptModuleInput

  @JsName("SetVec4Input")
  public open fun setVec4Input(inputName: String, value: Vector4): Unit

  @JsName("SetVec3Input")
  public open fun setVec3Input(inputName: String, value: Vector): Unit

  @JsName("SetVec2Input")
  public open fun setVec2Input(inputName: String, value: Vector2d): Unit

  @JsName("SetQuatInput")
  public open fun setQuatInput(inputName: String, value: Quat): Unit

  @JsName("SetIntInput")
  public open fun setIntInput(inputName: String, value: Number): Unit

  @JsName("SetFloatInput")
  public open fun setFloatInput(inputName: String, value: Number): Unit

  @JsName("SetEnumInput")
  public open fun setEnumInput(inputName: String, value: String): Unit

  @JsName("SetColorInput")
  public open fun setColorInput(inputName: String, value: LinearColor): Unit

  @JsName("SetBoolInput")
  public open fun setBoolInput(inputName: String, value: Boolean): Unit

  @JsName("GetOldInput")
  public open fun getOldInput(inputName: String): NiagaraPythonScriptModuleInput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UpgradeNiagaraScriptResults

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UpgradeNiagaraScriptResults

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UpgradeNiagaraScriptResults

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UpgradeNiagaraScriptResults

    @JsName("C")
    public fun copy(other: UObject): UpgradeNiagaraScriptResults

    @JsName("C")
    public fun copy(other: Any): UpgradeNiagaraScriptResults
  }
}

@JsName("OnPastedFunctionCallNode__PythonCallable")
public open external class OnPastedFunctionCallNodePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnPastedFunctionCallNodePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnPastedFunctionCallNodePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnPastedFunctionCallNodePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnPastedFunctionCallNodePythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnPastedFunctionCallNodePythonCallable

    @JsName("C")
    public fun copy(other: Any): OnPastedFunctionCallNodePythonCallable
  }
}

@JsName("AnimNotifyState_TimedNiagaraEffect")
public open external class AnimNotifyStateTimedNiagaraEffect(
  outer: UObject,
) : AnimNotifyState {
  @JsName("Template")
  public open var template: NiagaraSystem

  @JsName("SocketName")
  public open var socketName: String

  @JsName("LocationOffset")
  public open var locationOffset: Vector

  @JsName("RotationOffset")
  public open var rotationOffset: Rotator

  @JsName("bDestroyAtEnd")
  public open var destroyAtEnd: Boolean

  @JsName("GetSpawnedEffect")
  public open fun getSpawnedEffect(meshComp: MeshComponent): FxSystemComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyStateTimedNiagaraEffect

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyStateTimedNiagaraEffect

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyStateTimedNiagaraEffect

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyStateTimedNiagaraEffect

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyStateTimedNiagaraEffect

    @JsName("C")
    public fun copy(other: Any): AnimNotifyStateTimedNiagaraEffect
  }
}

public open external class CurveParameterPair {
  @JsName("AnimCurveName")
  public open var animCurveName: String

  @JsName("UserVariableName")
  public open var userVariableName: String

  public open fun clone(): CurveParameterPair

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CurveParameterPair

    @JsName("C")
    public fun copy(other: Any): CurveParameterPair
  }
}

@JsName("AnimNotifyState_TimedNiagaraEffectAdvanced")
public open external class AnimNotifyStateTimedNiagaraEffectAdvanced(
  outer: UObject,
) : AnimNotifyStateTimedNiagaraEffect {
  @JsName("bEnableNormalizedNotifyProgress")
  public open var enableNormalizedNotifyProgress: Boolean

  @JsName("NotifyProgressUserParameter")
  public open var notifyProgressUserParameter: String

  @JsName("AnimCurves")
  public open var animCurves: Array<CurveParameterPair>

  @JsName("GetNotifyProgress")
  public open fun getNotifyProgress(meshComp: MeshComponent): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyStateTimedNiagaraEffectAdvanced

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyStateTimedNiagaraEffectAdvanced

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyStateTimedNiagaraEffectAdvanced

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyStateTimedNiagaraEffectAdvanced

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyStateTimedNiagaraEffectAdvanced

    @JsName("C")
    public fun copy(other: Any): AnimNotifyStateTimedNiagaraEffectAdvanced
  }
}

@JsName("AnimNotify_PlayNiagaraEffect")
public open external class AnimNotifyPlayNiagaraEffect(
  outer: UObject,
) : AnimNotify {
  @JsName("Template")
  public open var template: NiagaraSystem

  @JsName("LocationOffset")
  public open var locationOffset: Vector

  @JsName("RotationOffset")
  public open var rotationOffset: Rotator

  @JsName("Scale")
  public open var scale: Vector

  @JsName("bAbsoluteScale")
  public open var absoluteScale: Boolean

  @JsName("Attached")
  public open var attached: Boolean

  @JsName("SocketName")
  public open var socketName: String

  @JsName("GetSpawnedEffect")
  public open fun getSpawnedEffect(): FxSystemComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyPlayNiagaraEffect

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyPlayNiagaraEffect

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyPlayNiagaraEffect

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyPlayNiagaraEffect

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyPlayNiagaraEffect

    @JsName("C")
    public fun copy(other: Any): AnimNotifyPlayNiagaraEffect
  }
}

public open external class ImgMediaPlaybackComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("Width")
  public open var width: Number

  @JsName("LODBias")
  public open var lodBias: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImgMediaPlaybackComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImgMediaPlaybackComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImgMediaPlaybackComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImgMediaPlaybackComponent

    @JsName("C")
    public fun copy(other: UObject): ImgMediaPlaybackComponent

    @JsName("C")
    public fun copy(other: Any): ImgMediaPlaybackComponent
  }
}

public open external class V8Config(
  outer: UObject,
) : UObject {
  @JsName("bGenAltPropAccessorForAllProp")
  public open var genAltPropAccessorForAllProp: Boolean

  @JsName("bGenGetStructRefArrayFunction")
  public open var genGetStructRefArrayFunction: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): V8Config

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): V8Config

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): V8Config

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): V8Config

    @JsName("C")
    public fun copy(other: UObject): V8Config

    @JsName("C")
    public fun copy(other: Any): V8Config
  }
}

public open external class DirectoryWatcher(
  outer: UObject,
) : UObject {
  @JsName("Added")
  public open var added: Array<String>

  @JsName("Modified")
  public open var modified: Array<String>

  @JsName("Removed")
  public open var removed: Array<String>

  @JsName("OnChanged")
  public open var onChanged: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("Watch")
  public open fun watch(directory: String): Unit

  @JsName("Unwatch")
  public open fun unwatch(): Unit

  @JsName("Contains")
  public open fun contains(file: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DirectoryWatcher

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DirectoryWatcher

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DirectoryWatcher

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DirectoryWatcher

    @JsName("C")
    public fun copy(other: UObject): DirectoryWatcher

    @JsName("C")
    public fun copy(other: Any): DirectoryWatcher
  }
}

@JsName("T$402")
public external interface OutFilesProvider {
  @JsName("OutFiles")
  public var outFiles: Array<String>
}

public open external class JavascriptContext(
  outer: UObject,
) : UObject {
  @JsName("Paths")
  public open var paths: Array<String>

  @JsName("WriteDTS")
  public open fun writeDts(target: String, includingTooltip: Boolean): Boolean

  @JsName("WriteAliases")
  public open fun writeAliases(target: String): Boolean

  @JsName("UnregisterConsoleCommand")
  public open fun unregisterConsoleCommand(command: String): Unit

  @JsName("SetContextId")
  public open fun setContextId(name: String): Unit

  @JsName("RunScript")
  public open fun runScript(script: String, output: Boolean): String

  @JsName("RunFileWithArgs")
  public open fun runFileWithArgs(filename: String, args: Array<String>): String

  @JsName("RunFile")
  public open fun runFile(filename: String): String

  @JsName("ResetUnrealConsoleDelegate")
  public open fun resetUnrealConsoleDelegate(): Unit

  @JsName("RequestV8GarbageCollection")
  public open fun requestV8GarbageCollection(): Unit

  @JsName("RegisterConsoleCommand")
  public open fun registerConsoleCommand(
    command: String,
    help: String,
    uFunction: JavascriptFunction,
  ): Unit

  @JsName("ReadScriptFile")
  public open fun readScriptFile(filename: String): String

  @JsName("IsDebugContext")
  public open fun isDebugContext(): Boolean

  @JsName("GetScriptFileFullPath")
  public open fun getScriptFileFullPath(filename: String): String

  @JsName("FindPathFile")
  public open fun findPathFile(
    targetRootPath: String,
    targetFileName: String,
    outFiles: Array<String>,
  ): OutFilesProvider

  @JsName("Expose")
  public open fun expose(name: String, uObject: UObject): Unit

  @JsName("DestroyInspector")
  public open fun destroyInspector(): Unit

  @JsName("CreateInspector")
  public open fun createInspector(port: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptContext

    @JsName("C")
    public fun copy(other: UObject): JavascriptContext

    @JsName("C")
    public fun copy(other: Any): JavascriptContext
  }
}

public open external class JavascriptHeapStatistics {
  @JsName("TotalHeapSize")
  public open var totalHeapSize: Number

  @JsName("TotalHeapSizeExecutable")
  public open var totalHeapSizeExecutable: Number

  @JsName("TotalPhysicalSize")
  public open var totalPhysicalSize: Number

  @JsName("TotalAvailableSize")
  public open var totalAvailableSize: Number

  @JsName("UsedHeapSize")
  public open var usedHeapSize: Number

  @JsName("HeapSizeLimit")
  public open var heapSizeLimit: Number

  @JsName("MallocedMemory")
  public open var mallocedMemory: Number

  @JsName("bDoesZapGarbage")
  public open var doesZapGarbage: Boolean

  public open fun clone(): JavascriptHeapStatistics

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptHeapStatistics

    @JsName("C")
    public fun copy(other: Any): JavascriptHeapStatistics
  }
}

@JsName("T$403")
public external interface StatisticsProvider {
  @JsName("Statistics")
  public var statistics: JavascriptHeapStatistics
}

public open external class JavascriptIsolate(
  outer: UObject,
) : UObject {
  @JsName("Init")
  public open fun init(isEditor: Boolean): Unit

  @JsName("GetHeapStatistics")
  public open fun getHeapStatistics(statistics: JavascriptHeapStatistics): StatisticsProvider

  @JsName("CreateContext")
  public open fun createContext(): JavascriptContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptIsolate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptIsolate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptIsolate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptIsolate

    @JsName("C")
    public fun copy(other: UObject): JavascriptIsolate

    @JsName("C")
    public fun copy(other: Any): JavascriptIsolate
  }
}

public open external class JavascriptAsset {
  @JsName("Name")
  public open var name: String

  @JsName("Asset")
  public open var asset: SoftObjectPath

  public open fun clone(): JavascriptAsset

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptAsset

    @JsName("C")
    public fun copy(other: Any): JavascriptAsset
  }
}

public open external class JavascriptClassAsset {
  @JsName("Name")
  public open var name: String

  @JsName("Class")
  public open var `class`: UnrealEngineClass

  public open fun clone(): JavascriptClassAsset

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptClassAsset

    @JsName("C")
    public fun copy(other: Any): JavascriptClassAsset
  }
}

public open external class JavascriptComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("ScriptSourceFile")
  public open var scriptSourceFile: String

  @JsName("bActiveWithinEditor")
  public open var activeWithinEditor: Boolean

  @JsName("JavascriptContext")
  public open var javascriptContext: JavascriptContext

  @JsName("JavascriptIsolate")
  public open var javascriptIsolate: JavascriptIsolate

  @JsName("OnTick")
  public open var onTick: UnrealEngineDelegate<(DeltaSeconds: Number) -> Unit>

  @JsName("OnBeginPlay")
  public open var onBeginPlay: UnrealEngineDelegate<() -> Unit>

  @JsName("OnEndPlay")
  public open var onEndPlay: UnrealEngineDelegate<() -> Unit>

  @JsName("OnInvoke")
  public open var onInvoke: UnrealEngineDelegate<(Name: String) -> Unit>

  @JsName("Assets")
  public open var assets: Array<JavascriptAsset>

  @JsName("ClassAssets")
  public open var classAssets: Array<JavascriptClassAsset>

  @JsName("ResolveClass")
  public open fun resolveClass(name: String): UnrealEngineClass

  @JsName("ResolveAsset")
  public open fun resolveAsset(name: String, tryLoad: Boolean): UObject

  @JsName("Invoke")
  public open fun invoke(name: String): Unit

  @JsName("ForceGC")
  public open fun forceGc(): Unit

  @JsName("Expose")
  public open fun expose(exposedAs: String, uObject: UObject): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptComponent

    @JsName("C")
    public fun copy(other: UObject): JavascriptComponent

    @JsName("C")
    public fun copy(other: Any): JavascriptComponent
  }
}

public open external class JavascriptDelegate(
  outer: UObject,
) : UObject {
  @JsName("Fire")
  public open fun fire(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptDelegate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptDelegate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptDelegate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptDelegate

    @JsName("C")
    public fun copy(other: UObject): JavascriptDelegate

    @JsName("C")
    public fun copy(other: Any): JavascriptDelegate
  }
}

public open external class JavascriptGeneratedClass(
  outer: UObject,
) : BlueprintGeneratedClass {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGeneratedClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGeneratedClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGeneratedClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGeneratedClass

    @JsName("C")
    public fun copy(other: UObject): JavascriptGeneratedClass

    @JsName("C")
    public fun copy(other: Any): JavascriptGeneratedClass
  }
}

@JsName("JavascriptGeneratedClass_Native")
public open external class JavascriptGeneratedClassNative(
  outer: UObject,
) : BlueprintGeneratedClass {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGeneratedClassNative

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGeneratedClassNative

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGeneratedClassNative

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGeneratedClassNative

    @JsName("C")
    public fun copy(other: UObject): JavascriptGeneratedClassNative

    @JsName("C")
    public fun copy(other: Any): JavascriptGeneratedClassNative
  }
}

public open external class JavascriptGeneratedFunction(
  outer: UObject,
) : UFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGeneratedFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGeneratedFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGeneratedFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGeneratedFunction

    @JsName("C")
    public fun copy(other: UObject): JavascriptGeneratedFunction

    @JsName("C")
    public fun copy(other: Any): JavascriptGeneratedFunction
  }
}

public open external class JavascriptGlobalDelegates(
  outer: UObject,
) : UObject {
  @JsName("UnbindAll")
  public open fun unbindAll(): Unit

  @JsName("Unbind")
  public open fun unbind(key: String): Unit

  @JsName("RedirectorFollowed")
  public open fun redirectorFollowed(packageName: String, redirector: UObject): Unit

  @JsName("PreLoadMap")
  public open fun preLoadMap(mapName: String): Unit

  @JsName("PreGarbageCollectDelegate")
  public open fun preGarbageCollectDelegate(): Unit

  @JsName("PostLoadMapWithWorld")
  public open fun postLoadMapWithWorld(world: World): Unit

  @JsName("PostGarbageCollect")
  public open fun postGarbageCollect(): Unit

  @JsName("PostDemoPlay")
  public open fun postDemoPlay(): Unit

  @JsName("PostApplyLevelOffset")
  public open fun postApplyLevelOffset(
    level: Level,
    world: World,
    offset: Vector,
    flag: Boolean,
  ): Unit

  @JsName("PackageCreatedForLoad")
  public open fun packageCreatedForLoad(inPackage: Package): Unit

  @JsName("OnWorldCleanup")
  public open fun onWorldCleanup(
    world: World,
    sessionEnded: Boolean,
    cleanupResources: Boolean,
  ): Unit

  @JsName("OnPreWorldInitialization_Friendly")
  public open fun onPreWorldInitializationFriendly(world: World): Unit

  @JsName("OnPreWorldFinishDestroy")
  public open fun onPreWorldFinishDestroy(world: World): Unit

  @JsName("OnPreObjectPropertyChanged_Friendly")
  public open fun onPreObjectPropertyChangedFriendly(
    inObject: UObject,
    property: Any,
    memberProperty: Any,
  ): Unit

  @JsName("OnPostWorldInitialization_Friendly")
  public open fun onPostWorldInitializationFriendly(world: World): Unit

  @JsName("OnPostWorldCreation")
  public open fun onPostWorldCreation(world: World): Unit

  @JsName("OnPostDuplicate_Friendly")
  public open fun onPostDuplicateFriendly(world: World, duplicateForPie: Boolean): Unit

  @JsName("OnObjectPropertyChanged_Friendly")
  public open fun onObjectPropertyChangedFriendly(
    inObject: UObject,
    property: Any,
    memberProperty: Any,
    changeType: Number,
  ): Unit

  @JsName("OnObjectPreSave_Friendly")
  public open fun onObjectPreSaveFriendly(objectSaved: UObject): Unit

  @JsName("OnObjectModified")
  public open fun onObjectModified(uObject: UObject): Unit

  @JsName("OnAssetLoaded")
  public open fun onAssetLoaded(uObject: UObject): Unit

  @JsName("OnActorLabelChanged")
  public open fun onActorLabelChanged(actor: Actor): Unit

  @JsName("LevelRemovedFromWorld")
  public open fun levelRemovedFromWorld(level: Level, world: World): Unit

  @JsName("LevelAddedToWorld")
  public open fun levelAddedToWorld(level: Level, world: World): Unit

  @JsName("Bind")
  public open fun bind(key: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGlobalDelegates

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGlobalDelegates

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGlobalDelegates

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGlobalDelegates

    @JsName("C")
    public fun copy(other: UObject): JavascriptGlobalDelegates

    @JsName("C")
    public fun copy(other: Any): JavascriptGlobalDelegates
  }
}

public open external class JavascriptStaticCache(
  outer: UObject,
) : UObject {
  @JsName("Isolates")
  public open var isolates: Array<JavascriptIsolate>

  @JsName("bExecuteTestModePIE")
  public open var executeTestModePie: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptStaticCache

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptStaticCache

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptStaticCache

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptStaticCache

    @JsName("C")
    public fun copy(other: UObject): JavascriptStaticCache

    @JsName("C")
    public fun copy(other: Any): JavascriptStaticCache
  }
}

public open external class JavascriptRow {
  @JsName("Values")
  public open var values: Array<String>

  public open fun clone(): JavascriptRow

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptRow

    @JsName("C")
    public fun copy(other: Any): JavascriptRow
  }
}

public open external class JavascriptStreamableManager {
  public open fun clone(): JavascriptStreamableManager

  @JsName("IsAsyncLoadComplete")
  public open fun isAsyncLoadComplete(target: SoftObjectPath): Boolean

  @JsName("RequestAsyncLoad")
  public open fun requestAsyncLoad(
    targetsToStream: Array<SoftObjectPath>,
    delegateToCall: JavascriptFunction,
    priority: Number,
  ): Unit

  @JsName("SimpleAsyncLoad")
  public open fun simpleAsyncLoad(target: SoftObjectPath, priority: Number): Unit

  @JsName("Unload")
  public open fun unload(target: SoftObjectPath): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptStreamableManager

    @JsName("C")
    public fun copy(other: Any): JavascriptStreamableManager

    @JsName("IsAsyncLoadComplete")
    public fun isAsyncLoadComplete(manager: JavascriptStreamableManager, target: SoftObjectPath):
        Boolean

    @JsName("RequestAsyncLoad")
    public fun requestAsyncLoad(
      manager: JavascriptStreamableManager,
      targetsToStream: Array<SoftObjectPath>,
      delegateToCall: JavascriptFunction,
      priority: Number,
    ): Unit

    @JsName("SimpleAsyncLoad")
    public fun simpleAsyncLoad(
      manager: JavascriptStreamableManager,
      target: SoftObjectPath,
      priority: Number,
    ): Unit

    @JsName("Unload")
    public fun unload(manager: JavascriptStreamableManager, target: SoftObjectPath): Unit

    @JsName("CreateStreamableManager")
    public fun createStreamableManager(): JavascriptStreamableManager
  }
}

@JsName("T$404")
public external interface Object404 {
  @JsName("Addr")
  public var addr: JavascriptInternetAddr

  @JsName("bValid")
  public var valid: Boolean
}

@JsName("T$405")
public external interface AddrProvider {
  @JsName("Addr")
  public var addr: JavascriptInternetAddr
}

public open external class JavascriptInternetAddr {
  public open fun clone(): JavascriptInternetAddr

  @JsName("SetIp")
  public open fun setIp(resolvedAddress: String, valid: Boolean): Object404

  @JsName("SetPort")
  public open fun setPort(port: Number): AddrProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptInternetAddr

    @JsName("C")
    public fun copy(other: Any): JavascriptInternetAddr

    @JsName("SetIp")
    public fun setIp(
      addr: JavascriptInternetAddr,
      resolvedAddress: String,
      valid: Boolean,
    ): Object404

    @JsName("SetPort")
    public fun setPort(addr: JavascriptInternetAddr, port: Number): AddrProvider

    @JsName("CreateInternetAddr")
    public fun createInternetAddr(): JavascriptInternetAddr
  }
}

@JsName("T$406")
public external interface Object406 {
  @JsName("Socket")
  public var socket: JavascriptSocket

  @JsName("BytesSent")
  public var bytesSent: Number

  @JsName("$")
  public var value: Boolean
}

public open external class JavascriptSocket {
  public open fun clone(): JavascriptSocket

  @JsName("SendMemoryTo")
  public open fun sendMemoryTo(
    toAddr: JavascriptInternetAddr,
    numBytes: Number,
    bytesSent: Number,
  ): Object406

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptSocket

    @JsName("C")
    public fun copy(other: Any): JavascriptSocket

    @JsName("SendMemoryTo")
    public fun sendMemoryTo(
      socket: JavascriptSocket,
      toAddr: JavascriptInternetAddr,
      numBytes: Number,
      bytesSent: Number,
    ): Object406

    @JsName("CreateSocket")
    public fun createSocket(
      socketType: String,
      description: String,
      forceUdp: Boolean,
    ): JavascriptSocket
  }
}

@JsName("EJavascriptStatDataType")
public external object JavascriptStatDataType {
  public var Invalid: String

  @JsName("ST_None")
  public var StNone: String

  @JsName("ST_int64")
  public var STint64: String

  @JsName("ST_double")
  public var STdouble: String

  @JsName("ST_FName")
  public var StfName: String

  @JsName("ST_Ptr")
  public var StPtr: String

  @JsName("EJavascriptStatDataType_MAX")
  public var Max: String
}

@JsName("EJavascriptStatOperation")
public external object JavascriptStatOperation {
  public var Invalid: String

  public var SetLongName: String

  public var AdvanceFrameEventGameThread: String

  public var AdvanceFrameEventRenderThread: String

  public var CycleScopeStart: String

  public var CycleScopeEnd: String

  public var SpecialMessageMarker: String

  public var Set: String

  public var Clear: String

  public var Add: String

  public var Subtract: String

  public var ChildrenStart: String

  public var ChildrenEnd: String

  public var Leaf: String

  public var MaxVal: String

  public var Memory: String

  @JsName("EJavascriptStatOperation_MAX")
  public var Max: String
}

public open external class JavascriptStat {
  public open fun clone(): JavascriptStat

  @JsName("AddMessage")
  public open fun addMessage(inStatOperation: String): Unit

  @JsName("AddMessage_float")
  public open fun addMessagefloat(
    inStatOperation: String,
    value: Number,
    isCycle: Boolean,
  ): Unit

  @JsName("AddMessage_int")
  public open fun addMessageint(
    inStatOperation: String,
    value: Number,
    isCycle: Boolean,
  ): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptStat

    @JsName("C")
    public fun copy(other: Any): JavascriptStat

    @JsName("AddMessage")
    public fun addMessage(stat: JavascriptStat, inStatOperation: String): Unit

    @JsName("AddMessage_float")
    public fun addMessagefloat(
      stat: JavascriptStat,
      inStatOperation: String,
      value: Number,
      isCycle: Boolean,
    ): Unit

    @JsName("AddMessage_int")
    public fun addMessageint(
      stat: JavascriptStat,
      inStatOperation: String,
      value: Number,
      isCycle: Boolean,
    ): Unit

    @JsName("NewStat")
    public fun newStat(
      inStatName: String,
      inStatDesc: String,
      inGroupName: String,
      inGroupCategory: String,
      inGroupDesc: String,
      defaultEnable: Boolean,
      shouldClearEveryFrame: Boolean,
      inStatType: String,
      cycleStat: Boolean,
      sortByName: Boolean,
    ): JavascriptStat
  }
}

@JsName("ELogVerbosity_JS")
public external object LogVerbosity_JS {
  public var NoLogging: String

  public var Fatal: String

  public var Error: String

  public var Warning: String

  public var Display: String

  public var Log: String

  public var Verbose: String

  public var VeryVerbose: String

  @JsName("ELogVerbosity_MAX")
  public var ELogVerbosityMax: String
}

public open external class JavascriptLogCategory {
  public open fun clone(): JavascriptLogCategory

  @JsName("GetCategoryName")
  public open fun getCategoryName(): String

  @JsName("IsSuppressed")
  public open fun isSuppressed(verbosity: String): Boolean

  @JsName("Log")
  public open fun log(
    verbosity: String,
    message: String,
    filename: String,
    lineNumber: Number,
  ): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptLogCategory

    @JsName("C")
    public fun copy(other: Any): JavascriptLogCategory

    @JsName("GetCategoryName")
    public fun getCategoryName(category: JavascriptLogCategory): String

    @JsName("IsSuppressed")
    public fun isSuppressed(category: JavascriptLogCategory, verbosity: String): Boolean

    @JsName("Log")
    public fun log(
      category: JavascriptLogCategory,
      verbosity: String,
      message: String,
      filename: String,
      lineNumber: Number,
    ): Unit

    @JsName("CreateLogCategory")
    public fun createLogCategory(categoryName: String, inDefaultVerbosity: String):
        JavascriptLogCategory
  }
}

public open external class JavscriptProperty {
  @JsName("Type")
  public open var type: String

  @JsName("Name")
  public open var name: String

  public open fun clone(): JavscriptProperty

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavscriptProperty

    @JsName("C")
    public fun copy(other: Any): JavscriptProperty
  }
}

public open external class JavascriptProfileNode {
  public open fun clone(): JavascriptProfileNode

  @JsName("GetBailoutReason")
  public open fun getBailoutReason(): String

  @JsName("GetChild")
  public open fun getChild(index: Number): JavascriptProfileNode

  @JsName("GetChildrenCount")
  public open fun getChildrenCount(): Number

  @JsName("GetColumnNumber")
  public open fun getColumnNumber(): Number

  @JsName("GetDeoptInfo_Reason")
  public open fun getDeoptInfoReason(index: Number): String

  @JsName("GetDeoptInfo_Stack")
  public open fun getDeoptInfoStack(index: Number): String

  @JsName("GetDeoptInfosCount")
  public open fun getDeoptInfosCount(index: Number): Number

  @JsName("GetFunctionName")
  public open fun getFunctionName(): String

  @JsName("GetHitCount")
  public open fun getHitCount(): Number

  @JsName("GetHitLineCount")
  public open fun getHitLineCount(): Number

  @JsName("GetLineNumber")
  public open fun getLineNumber(): Number

  @JsName("GetNodeId")
  public open fun getNodeId(): Number

  @JsName("GetScriptId")
  public open fun getScriptId(): Number

  @JsName("GetScriptResourceName")
  public open fun getScriptResourceName(): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptProfileNode

    @JsName("C")
    public fun copy(other: Any): JavascriptProfileNode

    @JsName("GetBailoutReason")
    public fun getBailoutReason(uNode: JavascriptProfileNode): String

    @JsName("GetChild")
    public fun getChild(uNode: JavascriptProfileNode, index: Number): JavascriptProfileNode

    @JsName("GetChildrenCount")
    public fun getChildrenCount(uNode: JavascriptProfileNode): Number

    @JsName("GetColumnNumber")
    public fun getColumnNumber(uNode: JavascriptProfileNode): Number

    @JsName("GetDeoptInfo_Reason")
    public fun getDeoptInfoReason(uNode: JavascriptProfileNode, index: Number): String

    @JsName("GetDeoptInfo_Stack")
    public fun getDeoptInfoStack(uNode: JavascriptProfileNode, index: Number): String

    @JsName("GetDeoptInfosCount")
    public fun getDeoptInfosCount(uNode: JavascriptProfileNode, index: Number): Number

    @JsName("GetFunctionName")
    public fun getFunctionName(uNode: JavascriptProfileNode): String

    @JsName("GetHitCount")
    public fun getHitCount(uNode: JavascriptProfileNode): Number

    @JsName("GetHitLineCount")
    public fun getHitLineCount(uNode: JavascriptProfileNode): Number

    @JsName("GetLineNumber")
    public fun getLineNumber(uNode: JavascriptProfileNode): Number

    @JsName("GetNodeId")
    public fun getNodeId(uNode: JavascriptProfileNode): Number

    @JsName("GetScriptId")
    public fun getScriptId(uNode: JavascriptProfileNode): Number

    @JsName("GetScriptResourceName")
    public fun getScriptResourceName(uNode: JavascriptProfileNode): String
  }
}

@JsName("T$407")
public external interface Object407 {
  @JsName("InData")
  public var inData: Array<JavascriptRow>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$408")
public external interface Object408 {
  @JsName("IntersectionPoint")
  public var intersectionPoint: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$409")
public external interface Object409 {
  @JsName("OutIp")
  public var outIp: String

  @JsName("$")
  public var value: Boolean
}

@JsName("T$411")
public external interface Object411 {
  @JsName("OutData")
  public var outData: Array<JavascriptRow>

  @JsName("$")
  public var value: Boolean
}

public open external class JavascriptLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptLibrary

    @JsName("WriteStringToFile")
    public fun writeStringToFile(
      uObject: UObject,
      filename: String,
      data: String,
      encodingOptions: String,
    ): Boolean

    @JsName("WriteFile")
    public fun writeFile(uObject: UObject, filename: String): Boolean

    @JsName("WriteCSV")
    public fun writeCsv(
      inPath: String,
      inData: Array<JavascriptRow>,
      encodingOptions: String,
    ): Object407

    @JsName("V8_SetIdleTaskBudget")
    public fun v8SetIdleTaskBudget(budgetInSeconds: Number): Unit

    @JsName("V8_SetFlagsFromString")
    public fun v8SetFlagsFromString(v8Flags: String): Unit

    @JsName("V8_IsEnableHotReload")
    public fun v8IsEnableHotReload(): Boolean

    @JsName("UnregisterComponent")
    public fun unregisterComponent(actorComponent: ActorComponent): Unit

    @JsName("Unload")
    public fun unload(manager: JavascriptStreamableManager, target: SoftObjectPath): Unit

    @JsName("TryLoadByPath")
    public fun tryLoadByPath(path: String): UObject

    @JsName("SimpleAsyncLoad")
    public fun simpleAsyncLoad(
      manager: JavascriptStreamableManager,
      target: SoftObjectPath,
      priority: Number,
    ): Unit

    @JsName("SetRootComponent")
    public fun setRootComponent(actor: Actor, component: SceneComponent): Unit

    @JsName("SetPort")
    public fun setPort(addr: JavascriptInternetAddr, port: Number): AddrProvider

    @JsName("SetObjectFlags")
    public fun setObjectFlags(obj: UObject, flags: Number): Unit

    @JsName("SetMobility")
    public fun setMobility(sceneComponent: SceneComponent, type: String): Unit

    @JsName("SetMobile")
    public fun setMobile(sceneComponent: SceneComponent): Unit

    @JsName("SetIp")
    public fun setIp(
      addr: JavascriptInternetAddr,
      resolvedAddress: String,
      valid: Boolean,
    ): Object404

    @JsName("SetClientTravel")
    public fun setClientTravel(
      engine: Engine,
      inWorld: World,
      nextUrl: String,
      inTravelType: String,
    ): Unit

    @JsName("SetActorFlags")
    public fun setActorFlags(actor: Actor, flags: Number): Unit

    @JsName("SendMemoryTo")
    public fun sendMemoryTo(
      socket: JavascriptSocket,
      toAddr: JavascriptInternetAddr,
      numBytes: Number,
      bytesSent: Number,
    ): Object406

    @JsName("SegmentIntersection2D")
    public fun segmentIntersection2d(
      segmentStartA: Vector,
      segmentEndA: Vector,
      segmentStartB: Vector,
      segmentEndB: Vector,
      intersectionPoint: Vector,
    ): Object408

    @JsName("ResolveIp")
    public fun resolveIp(hostName: String, outIp: String): Object409

    @JsName("ReregisterComponent")
    public fun reregisterComponent(actorComponent: ActorComponent): Unit

    @JsName("ReregisterAllComponents")
    public fun reregisterAllComponents(actor: Actor): Unit

    @JsName("RequestAsyncLoad")
    public fun requestAsyncLoad(
      manager: JavascriptStreamableManager,
      targetsToStream: Array<SoftObjectPath>,
      delegateToCall: JavascriptFunction,
      priority: Number,
    ): Unit

    @JsName("RegisterComponent")
    public fun registerComponent(actorComponent: ActorComponent): Unit

    @JsName("ReadStringFromFileAsync")
    public fun readStringFromFileAsync(
      uObject: UObject,
      filename: String,
      uFunction: JavascriptFunction,
    ): ReadStringFromFileHandle

    @JsName("ReadStringFromFile")
    public fun readStringFromFile(
      uObject: UObject,
      filename: String,
      readFlags: String,
    ): String

    @JsName("ReadFile")
    public fun readFile(uObject: UObject, filename: String): Boolean

    @JsName("ReadDirectory")
    public fun readDirectory(
      uObject: UObject,
      directory: String,
      outItems: Array<DirectoryItem>,
    ): Object569

    @JsName("ReadCSV")
    public fun readCsv(
      inPath: String,
      outData: Array<JavascriptRow>,
      readFlags: String,
    ): Object411

    @JsName("NewStat")
    public fun newStat(
      inStatName: String,
      inStatDesc: String,
      inGroupName: String,
      inGroupCategory: String,
      inGroupDesc: String,
      defaultEnable: Boolean,
      shouldClearEveryFrame: Boolean,
      inStatType: String,
      cycleStat: Boolean,
      sortByName: Boolean,
    ): JavascriptStat

    @JsName("MarkRenderStateDirty")
    public fun markRenderStateDirty(component: ActorComponent): Unit

    @JsName("MakeDirectory")
    public fun makeDirectory(path: String, tree: Boolean): Boolean

    @JsName("Log")
    public fun log(
      category: JavascriptLogCategory,
      verbosity: String,
      message: String,
      filename: String,
      lineNumber: Number,
    ): Unit

    @JsName("LoadPackage")
    public fun loadPackage(inOuter: Package, packageName: String): Package

    @JsName("IsSuppressed")
    public fun isSuppressed(category: JavascriptLogCategory, verbosity: String): Boolean

    @JsName("IsRegistered")
    public fun isRegistered(actorComponent: ActorComponent): Boolean

    @JsName("IsPlayInPreview")
    public fun isPlayInPreview(world: World): Boolean

    @JsName("IsPlayInEditor")
    public fun isPlayInEditor(world: World): Boolean

    @JsName("IsPendingKill")
    public fun isPendingKill(inActor: Actor): Boolean

    @JsName("IsGeneratedByBlueprint")
    public fun isGeneratedByBlueprint(inClass: UnrealEngineClass): Boolean

    @JsName("IsGameWorld")
    public fun isGameWorld(world: World): Boolean

    @JsName("IsAsyncLoadComplete")
    public fun isAsyncLoadComplete(manager: JavascriptStreamableManager, target: SoftObjectPath):
        Boolean

    @JsName("HasUndo")
    public fun hasUndo(engine: Engine): Boolean

    @JsName("HasAnyPackageFlags")
    public fun hasAnyPackageFlags(`package`: Package, flags: Number): Boolean

    @JsName("HasAnyFlags")
    public fun hasAnyFlags(uObject: UObject, flags: Number): Boolean

    @JsName("HandleSeamlessTravelPlayer")
    public fun handleSeamlessTravelPlayer(gameMode: GameModeBase, c: Controller): ControllerProvider

    @JsName("GetWorldBounds")
    public fun getWorldBounds(inWorld: World): Box

    @JsName("GetSuperClasses")
    public fun getSuperClasses(inClass: UnrealEngineClass): Array<UnrealEngineClass>

    @JsName("GetStructProperties")
    public fun getStructProperties(structName: String, includeSuper: Boolean):
        Array<JavscriptProperty>

    @JsName("GetScriptResourceName")
    public fun getScriptResourceName(uNode: JavascriptProfileNode): String

    @JsName("GetScriptId")
    public fun getScriptId(uNode: JavascriptProfileNode): Number

    @JsName("GetPlatformName")
    public fun getPlatformName(): String

    @JsName("GetOutermost")
    public fun getOutermost(uObject: UObject): UObject

    @JsName("GetOuter")
    public fun getOuter(uObject: UObject): UObject

    @JsName("GetObjectsWithOuter")
    public fun getObjectsWithOuter(
      outer: UObject,
      results: Array<UObject>,
      includeNestedObjects: Boolean,
      exclusionFlags: Number,
      exclusionInternalFlags: Number,
    ): ResultsProvider

    @JsName("GetObjectsOfClass")
    public fun getObjectsOfClass(
      classToLookFor: UnrealEngineClass,
      results: Array<UObject>,
      includeDerivedClasses: Boolean,
      excludeFlags: Number,
      exclusionInternalFlags: Number,
    ): ResultsProvider

    @JsName("GetNodeId")
    public fun getNodeId(uNode: JavascriptProfileNode): Number

    @JsName("GetName")
    public fun getName(uObject: UObject): String

    @JsName("GetModel")
    public fun getModel(world: World): Model

    @JsName("GetMetaData")
    public fun getMetaData(field: Field, key: String): String

    @JsName("GetLineNumber")
    public fun getLineNumber(uNode: JavascriptProfileNode): Number

    @JsName("GetLevels")
    public fun getLevels(world: World): Array<Level>

    @JsName("GetLevel")
    public fun getLevel(actor: Actor): Level

    @JsName("GetLastRenderTime")
    public fun getLastRenderTime(actor: Actor): Number

    @JsName("GetHitLineCount")
    public fun getHitLineCount(uNode: JavascriptProfileNode): Number

    @JsName("GetHitCount")
    public fun getHitCount(uNode: JavascriptProfileNode): Number

    @JsName("GetFunctionParmsSize")
    public fun getFunctionParmsSize(uFunction: UFunction): Number

    @JsName("GetFunctionName")
    public fun getFunctionName(uNode: JavascriptProfileNode): String

    @JsName("GetFileSize")
    public fun getFileSize(uObject: UObject, filename: String): Number

    @JsName("GetFields")
    public fun getFields(uObject: UObject, includeSuper: Boolean): Array<Field>

    @JsName("GetEnumListByEnumName")
    public fun getEnumListByEnumName(enumName: String): Array<String>

    @JsName("GetDynamicBinding")
    public fun getDynamicBinding(outer: UnrealEngineClass, bindingObjectClass: UnrealEngineClass):
        DynamicBlueprintBinding

    @JsName("GetDir")
    public fun getDir(uObject: UObject, whichDir: String): String

    @JsName("GetDerivedClasses")
    public fun getDerivedClasses(
      classToLookFor: UnrealEngineClass,
      results: Array<UnrealEngineClass>,
      recursive: Boolean,
    ): UnrealEngineClassesResultProvider

    @JsName("GetDeoptInfosCount")
    public fun getDeoptInfosCount(uNode: JavascriptProfileNode, index: Number): Number

    @JsName("GetDeoptInfo_Stack")
    public fun getDeoptInfoStack(uNode: JavascriptProfileNode, index: Number): String

    @JsName("GetDeoptInfo_Reason")
    public fun getDeoptInfoReason(uNode: JavascriptProfileNode, index: Number): String

    @JsName("GetCurrentProcessId")
    public fun getCurrentProcessId(): Number

    @JsName("GetComponentsByClass")
    public fun getComponentsByClass(actor: Actor, componentClass: UnrealEngineClass):
        Array<ActorComponent>

    @JsName("GetColumnNumber")
    public fun getColumnNumber(uNode: JavascriptProfileNode): Number

    @JsName("GetClassPathName")
    public fun getClassPathName(`class`: UnrealEngineClass): String

    @JsName("GetChildrenCount")
    public fun getChildrenCount(uNode: JavascriptProfileNode): Number

    @JsName("GetChild")
    public fun getChild(uNode: JavascriptProfileNode, index: Number): JavascriptProfileNode

    @JsName("GetCategoryName")
    public fun getCategoryName(category: JavascriptLogCategory): String

    @JsName("GetBlueprintGeneratedClassFromPath")
    public fun getBlueprintGeneratedClassFromPath(path: String): UnrealEngineClass

    @JsName("GetBlueprintGeneratedClass")
    public fun getBlueprintGeneratedClass(blueprint: Blueprint): UnrealEngineClass

    @JsName("GetBailoutReason")
    public fun getBailoutReason(uNode: JavascriptProfileNode): String

    @JsName("GetArchetypePathName")
    public fun getArchetypePathName(uObject: UObject): String

    @JsName("GetAllActorsOfClassAndTagsInCurrentLevel")
    public fun getAllActorsOfClassAndTagsInCurrentLevel(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      tagsAccept: Array<String>,
      tagsDeny: Array<String>,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAllActorsOfClassAndTags")
    public fun getAllActorsOfClassAndTags(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      tagsAccept: Array<String>,
      tagsDeny: Array<String>,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GenerateNavigation")
    public fun generateNavigation(inWorld: World, navData: RecastNavMesh): Unit

    @JsName("FindPackage")
    public fun findPackage(inOuter: UObject, packageName: String): Package

    @JsName("FindObjectWithOuter")
    public fun findObjectWithOuter(
      outer: UObject,
      classToLookFor: UnrealEngineClass,
      nameToLookFor: String,
    ): UObject

    @JsName("FileExists")
    public fun fileExists(filename: String): Boolean

    @JsName("Duplicate")
    public fun duplicate(
      uObject: UObject,
      outer: UObject,
      name: String,
    ): UObject

    @JsName("DirectoryExists")
    public fun directoryExists(inDirectory: String): Boolean

    @JsName("DeleteFile")
    public fun deleteFile(filename: String, readOnly: Boolean): Boolean

    @JsName("DeleteDirectory")
    public fun deleteDirectory(
      path: String,
      requireExists: Boolean,
      tree: Boolean,
    ): Boolean

    @JsName("CreateStreamableManager")
    public fun createStreamableManager(): JavascriptStreamableManager

    @JsName("CreateSocket")
    public fun createSocket(
      socketType: String,
      description: String,
      forceUdp: Boolean,
    ): JavascriptSocket

    @JsName("CreatePackage")
    public fun createPackage(outer: UObject, packageName: String): Package

    @JsName("CreateLogCategory")
    public fun createLogCategory(categoryName: String, inDefaultVerbosity: String):
        JavascriptLogCategory

    @JsName("CreateInternetAddr")
    public fun createInternetAddr(): JavascriptInternetAddr

    @JsName("CreateEnum")
    public fun createEnum(
      outer: UObject,
      name: String,
      displayNames: Array<String>,
      flags: Array<String>,
    ): Enum

    @JsName("ConvertRelativePathToFull")
    public fun convertRelativePathToFull(uObject: UObject, relativePath: String): String

    @JsName("ClipboardPaste")
    public fun clipboardPaste(): String

    @JsName("ClipboardCopy")
    public fun clipboardCopy(string: String): Unit

    @JsName("CallJS")
    public fun callJs(uFunction: JavascriptFunction, customStruct: JavascriptStubStruct): Unit

    @JsName("AddMessage_int")
    public fun addMessageint(
      stat: JavascriptStat,
      inStatOperation: String,
      value: Number,
      isCycle: Boolean,
    ): Unit

    @JsName("AddMessage_float")
    public fun addMessagefloat(
      stat: JavascriptStat,
      inStatOperation: String,
      value: Number,
      isCycle: Boolean,
    ): Unit

    @JsName("AddMessage")
    public fun addMessage(stat: JavascriptStat, inStatOperation: String): Unit

    @JsName("AddDynamicBinding")
    public fun addDynamicBinding(outer: UnrealEngineClass, bindingObject: DynamicBlueprintBinding):
        Unit

    @JsName("Actor_GetWorld")
    public fun actorGetWorld(actor: Actor): World

    @JsName("C")
    public fun copy(other: UObject): JavascriptLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptLibrary
  }
}

public open external class JavascriptMemoryObject(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptMemoryObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptMemoryObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptMemoryObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptMemoryObject

    @JsName("C")
    public fun copy(other: UObject): JavascriptMemoryObject

    @JsName("C")
    public fun copy(other: Any): JavascriptMemoryObject
  }
}

public open external class JavascriptRef {
  public open fun clone(): JavascriptRef

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptRef

    @JsName("C")
    public fun copy(other: Any): JavascriptRef
  }
}

public open external class JavascriptObject(
  outer: UObject,
) : UObject {
  @JsName("Ref")
  public open var ref: JavascriptRef

  @JsName("Func")
  public open var func: JavascriptFunction

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptObject

    @JsName("C")
    public fun copy(other: UObject): JavascriptObject

    @JsName("C")
    public fun copy(other: Any): JavascriptObject
  }
}

public open external class JavascriptOutputDevice(
  outer: UObject,
) : UObject {
  @JsName("OnMessage")
  public open fun onMessage(
    message: String,
    verbosity: String,
    category: String,
  ): Unit

  @JsName("Kill")
  public open fun kill(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptOutputDevice

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptOutputDevice

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptOutputDevice

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptOutputDevice

    @JsName("Log")
    public fun log(
      category: String,
      verbosity: String,
      filename: String,
      lineNumber: Number,
      message: String,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptOutputDevice

    @JsName("C")
    public fun copy(other: Any): JavascriptOutputDevice
  }
}

@JsName("T$417")
public external interface Object417 {
  @JsName("OutWritten")
  public var outWritten: String

  @JsName("$")
  public var value: Boolean
}

@JsName("T$418")
public external interface Object418 {
  @JsName("Array")
  public var array: Array<Number>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$419")
public external interface ErrorProvider {
  @JsName("Error")
  public var error: String
}

@JsName("T$420")
public external interface Object420 {
  @JsName("ReturnCode")
  public var returnCode: Number

  @JsName("$")
  public var value: Boolean
}

public open external class JavascriptProcess(
  outer: UObject,
) : UObject {
  @JsName("WriteToPipe")
  public open fun writeToPipe(message: String, outWritten: String): Object417

  @JsName("Wait")
  public open fun wait(): Unit

  @JsName("Terminate")
  public open fun terminate(killTree: Boolean): Unit

  @JsName("ReadFromPipe")
  public open fun readFromPipe(): String

  @JsName("ReadArrayFromPipe")
  public open fun readArrayFromPipe(array: Array<Number>): Object418

  @JsName("IsRunning")
  public open fun isRunning(): Boolean

  @JsName("GetReturnCode")
  public open fun getReturnCode(returnCode: Number): Object420

  @JsName("Close")
  public open fun close(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptProcess

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptProcess

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptProcess

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptProcess

    @JsName("Sleep")
    public fun sleep(seconds: Number): Unit

    @JsName("SimulateKeypress")
    public fun simulateKeypress(keyEvent: Number): Unit

    @JsName("SetEnvironmentVar")
    public fun setEnvironmentVar(varName: String, varValue: String): Unit

    @JsName("Open_PID")
    public fun openPid(processId: Number): JavascriptProcess

    @JsName("Open")
    public fun open(procName: String): JavascriptProcess

    @JsName("LaunchURL")
    public fun launchUrl(
      URL: String,
      parms: String,
      error: String,
    ): ErrorProvider

    @JsName("IsApplicationRunning_PID")
    public fun isApplicationRunningPid(processId: Number): Boolean

    @JsName("IsApplicationRunning")
    public fun isApplicationRunning(procName: String): Boolean

    @JsName("GetString")
    public fun getString(key: String, flag: Boolean): String

    @JsName("GetEnvironmentVar")
    public fun getEnvironmentVar(varName: String): String

    @JsName("GetCurrentProcessId")
    public fun getCurrentProcessId(): Number

    @JsName("GetApplicationName")
    public fun getApplicationName(processId: Number): String

    @JsName("Create")
    public fun create(
      URL: String,
      parms: String,
      launchDetached: Boolean,
      launchHidden: Boolean,
      launchReallyHidden: Boolean,
      priorityModifier: Number,
      optionalWorkingDirectory: String,
      usePipe: Boolean,
    ): JavascriptProcess

    @JsName("CanLaunchURL")
    public fun canLaunchUrl(URL: String): Boolean

    @JsName("C")
    public fun copy(other: UObject): JavascriptProcess

    @JsName("C")
    public fun copy(other: Any): JavascriptProcess
  }
}

public open external class JavascriptCpuProfiler {
  public open fun clone(): JavascriptCpuProfiler

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptCpuProfiler

    @JsName("C")
    public fun copy(other: Any): JavascriptCpuProfiler
  }
}

public open external class JavascriptProfile(
  outer: UObject,
) : UObject {
  @JsName("GetTopDownRoot")
  public open fun getTopDownRoot(): JavascriptProfileNode

  @JsName("GetSampleTimestamp")
  public open fun getSampleTimestamp(index: Number): Number

  @JsName("GetSamplesCount")
  public open fun getSamplesCount(): Number

  @JsName("GetSample")
  public open fun getSample(index: Number): JavascriptProfileNode

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptProfile

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptProfile

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptProfile

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptProfile

    @JsName("Stop")
    public fun stop(profiler: JavascriptCpuProfiler, title: String): JavascriptProfile

    @JsName("Start")
    public fun start(title: String, recordSamples: Boolean): JavascriptCpuProfiler

    @JsName("SetSamplingInterval")
    public fun setSamplingInterval(profiler: JavascriptCpuProfiler, us: Number): Unit

    @JsName("SetIdle")
    public fun setIdle(profiler: JavascriptCpuProfiler, isidle: Boolean): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptProfile

    @JsName("C")
    public fun copy(other: Any): JavascriptProfile
  }
}

public open external class JavascriptSemaphore(
  outer: UObject,
) : UObject {
  @JsName("Unlock")
  public open fun unlock(): Unit

  @JsName("TryLock")
  public open fun tryLock(nanosecondsToWait: Number): Boolean

  @JsName("Lock")
  public open fun lock(): Unit

  @JsName("Dispose")
  public open fun dispose(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptSemaphore

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptSemaphore

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptSemaphore

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptSemaphore

    @JsName("Create")
    public fun create(
      name: String,
      create: Boolean,
      maxLocks: Number,
    ): JavascriptSemaphore

    @JsName("C")
    public fun copy(other: UObject): JavascriptSemaphore

    @JsName("C")
    public fun copy(other: Any): JavascriptSemaphore
  }
}

public open external class JavascriptSettings(
  outer: UObject,
) : UObject {
  @JsName("V8Flags")
  public open var v8Flags: String

  @JsName("bEnableHotReload")
  public open var enableHotReload: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptSettings

    @JsName("C")
    public fun copy(other: UObject): JavascriptSettings

    @JsName("C")
    public fun copy(other: Any): JavascriptSettings
  }
}

public open external class JavascriptSharedMemoryRegion(
  outer: UObject,
) : JavascriptMemoryObject {
  @JsName("Dispose")
  public open fun dispose(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptSharedMemoryRegion

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptSharedMemoryRegion

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptSharedMemoryRegion

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptSharedMemoryRegion

    @JsName("Create")
    public fun create(
      name: String,
      create: Boolean,
      read: Boolean,
      write: Boolean,
      size: Number,
    ): JavascriptSharedMemoryRegion

    @JsName("C")
    public fun copy(other: UObject): JavascriptSharedMemoryRegion

    @JsName("C")
    public fun copy(other: Any): JavascriptSharedMemoryRegion
  }
}

@JsName("T$421")
public external interface TestProvider {
  @JsName("Test")
  public var test: JavascriptAutomatedTestInstance
}

public open external class JavascriptAutomatedTestInstance {
  public open fun clone(): JavascriptAutomatedTestInstance

  @JsName("AddAnalyticsItem")
  public open fun addAnalyticsItem(inAnalyticsItem: String): Unit

  @JsName("AddError")
  public open fun addError(inError: String): Unit

  @JsName("AddLogItem")
  public open fun addLogItem(inLogItem: String): Unit

  @JsName("AddWarning")
  public open fun addWarning(inWarning: String): Unit

  @JsName("ClearExecutionInfo")
  public open fun clearExecutionInfo(): Unit

  @JsName("Destroy")
  public open fun destroy(): TestProvider

  @JsName("SetContinue")
  public open fun setContinue(inContinue: Boolean): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptAutomatedTestInstance

    @JsName("C")
    public fun copy(other: Any): JavascriptAutomatedTestInstance

    @JsName("AddAnalyticsItem")
    public fun addAnalyticsItem(test: JavascriptAutomatedTestInstance, inAnalyticsItem: String):
        Unit

    @JsName("AddError")
    public fun addError(test: JavascriptAutomatedTestInstance, inError: String): Unit

    @JsName("AddLogItem")
    public fun addLogItem(test: JavascriptAutomatedTestInstance, inLogItem: String): Unit

    @JsName("AddWarning")
    public fun addWarning(test: JavascriptAutomatedTestInstance, inWarning: String): Unit

    @JsName("ClearExecutionInfo")
    public fun clearExecutionInfo(test: JavascriptAutomatedTestInstance): Unit

    @JsName("Destroy")
    public fun destroy(test: JavascriptAutomatedTestInstance): TestProvider

    @JsName("SetContinue")
    public fun setContinue(test: JavascriptAutomatedTestInstance, inContinue: Boolean): Unit
  }
}

public open external class JavascriptAutomatedTest {
  @JsName("Name")
  public open var name: String

  @JsName("bComplexTask")
  public open var complexTask: Boolean

  @JsName("TestFlags")
  public open var testFlags: Number

  @JsName("RequiredDeviceNum")
  public open var requiredDeviceNum: Number

  @JsName("TestFunctionNames")
  public open var testFunctionNames: Array<String>

  @JsName("UFunction")
  public open var uFunction: JavascriptFunction

  public open fun clone(): JavascriptAutomatedTest

  @JsName("Create")
  public open fun create(): JavascriptAutomatedTestInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptAutomatedTest

    @JsName("C")
    public fun copy(other: Any): JavascriptAutomatedTest

    @JsName("Create")
    public fun create(test: JavascriptAutomatedTest): JavascriptAutomatedTestInstance
  }
}

public open external class JavascriptTestLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptTestLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptTestLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptTestLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptTestLibrary

    @JsName("SetContinue")
    public fun setContinue(test: JavascriptAutomatedTestInstance, inContinue: Boolean): Unit

    @JsName("PushFrameCounter")
    public fun pushFrameCounter(): Unit

    @JsName("PopFrameCounter")
    public fun popFrameCounter(): Unit

    @JsName("NewWorld")
    public fun newWorld(): World

    @JsName("InitializeActorsForPlay")
    public fun initializeActorsForPlay(world: World, URL: URL): Unit

    @JsName("DestroyWorld")
    public fun destroyWorld(world: World): Unit

    @JsName("DestroyUObject")
    public fun destroyUObject(uObject: UObject): Unit

    @JsName("Destroy")
    public fun destroy(test: JavascriptAutomatedTestInstance): TestProvider

    @JsName("Create")
    public fun create(test: JavascriptAutomatedTest): JavascriptAutomatedTestInstance

    @JsName("ClearExecutionInfo")
    public fun clearExecutionInfo(test: JavascriptAutomatedTestInstance): Unit

    @JsName("BeginPlay")
    public fun beginPlay(world: World): Unit

    @JsName("AddWarning")
    public fun addWarning(test: JavascriptAutomatedTestInstance, inWarning: String): Unit

    @JsName("AddLogItem")
    public fun addLogItem(test: JavascriptAutomatedTestInstance, inLogItem: String): Unit

    @JsName("AddError")
    public fun addError(test: JavascriptAutomatedTestInstance, inError: String): Unit

    @JsName("AddAnalyticsItem")
    public fun addAnalyticsItem(test: JavascriptAutomatedTestInstance, inAnalyticsItem: String):
        Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptTestLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptTestLibrary
  }
}

@JsName("DirectoryWatcherCallback__PythonCallable")
public open external class DirectoryWatcherCallbackPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DirectoryWatcherCallbackPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DirectoryWatcherCallbackPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DirectoryWatcherCallbackPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DirectoryWatcherCallbackPythonCallable

    @JsName("C")
    public fun copy(other: UObject): DirectoryWatcherCallbackPythonCallable

    @JsName("C")
    public fun copy(other: Any): DirectoryWatcherCallbackPythonCallable
  }
}

@JsName("JavascriptNameSignature__PythonCallable")
public open external class JavascriptNameSignaturePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptNameSignaturePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptNameSignaturePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptNameSignaturePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptNameSignaturePythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptNameSignaturePythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptNameSignaturePythonCallable
  }
}

@JsName("JavascriptNoParamSignature__PythonCallable")
public open external class JavascriptNoParamSignaturePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptNoParamSignaturePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptNoParamSignaturePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptNoParamSignaturePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptNoParamSignaturePythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptNoParamSignaturePythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptNoParamSignaturePythonCallable
  }
}

@JsName("JavascriptTickSignature__PythonCallable")
public open external class JavascriptTickSignaturePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptTickSignaturePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptTickSignaturePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptTickSignaturePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptTickSignaturePythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptTickSignaturePythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptTickSignaturePythonCallable
  }
}

public open external class JavascriptComboButton(
  outer: UObject,
) : ContentWidget {
  @JsName("ComboButtonStyle")
  public open var comboButtonStyle: ComboButtonStyle

  @JsName("ButtonStyle")
  public open var buttonStyle: ButtonStyle

  @JsName("OnGetMenuContent")
  public open var onGetMenuContent: UnrealEngineDelegate<() -> JavascriptSlateWidget>

  @JsName("OnMenuOpenChanged")
  public open var onMenuOpenChanged: UnrealEngineDelegate<(Value: Boolean) -> Unit>

  @JsName("OnComboBoxOpened")
  public open var onComboBoxOpened: UnrealEngineDelegate<() -> Unit>

  @JsName("bIsFocusable")
  public open var isFocusable: Boolean

  @JsName("bHasDownArrow")
  public open var hasDownArrow: Boolean

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("ButtonColorAndOpacity")
  public open var buttonColorAndOpacity: SlateColor

  @JsName("ContentPadding")
  public open var contentPadding: Margin

  @JsName("MenuPlacement")
  public open var menuPlacement: String

  @JsName("HAlign")
  public open var hAlign: String

  @JsName("VAlign")
  public open var vAlign: String

  @JsName("SetIsOpen")
  public open fun setIsOpen(inIsOpen: Boolean, focusMenu: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptComboButton

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptComboButton

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptComboButton

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptComboButton

    @JsName("C")
    public fun copy(other: UObject): JavascriptComboButton

    @JsName("C")
    public fun copy(other: Any): JavascriptComboButton
  }
}

public open external class JavascriptSlateIcon {
  @JsName("StyleSetName")
  public open var styleSetName: String

  @JsName("StyleName")
  public open var styleName: String

  @JsName("SmallStyleName")
  public open var smallStyleName: String

  public open fun clone(): JavascriptSlateIcon

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptSlateIcon

    @JsName("C")
    public fun copy(other: Any): JavascriptSlateIcon
  }
}

public open external class JavascriptComboButtonContext(
  outer: UObject,
) : UObject {
  @JsName("OnGetLabel")
  public open var onGetLabel: UnrealEngineDelegate<() -> String>

  @JsName("OnGetTooltip")
  public open var onGetTooltip: UnrealEngineDelegate<() -> String>

  @JsName("OnGetIcon")
  public open var onGetIcon: UnrealEngineDelegate<() -> JavascriptSlateIcon>

  @JsName("OnGetWidget")
  public open var onGetWidget:
      UnrealEngineDelegate<(EditingObject: UObject) -> JavascriptSlateWidget>

  @JsName("OnCanExecute")
  public open var onCanExecute: UnrealEngineDelegate<() -> Boolean>

  @JsName("UnmarkReferencedObject")
  public open fun unmarkReferencedObject(): Unit

  @JsName("MarkReferencedObject")
  public open fun markReferencedObject(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptComboButtonContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptComboButtonContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptComboButtonContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptComboButtonContext

    @JsName("C")
    public fun copy(other: UObject): JavascriptComboButtonContext

    @JsName("C")
    public fun copy(other: Any): JavascriptComboButtonContext
  }
}

public open external class JavascriptTextProperty {
  @JsName("Key")
  public open var key: String

  @JsName("Namespace")
  public open var namespace: String

  @JsName("Value")
  public open var value: String

  @JsName("TableId")
  public open var tableId: String

  public open fun clone(): JavascriptTextProperty

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptTextProperty

    @JsName("C")
    public fun copy(other: Any): JavascriptTextProperty

    @JsName("FromStringTable")
    public fun fromStringTable(inTableId: String, inKey: String): JavascriptTextProperty
  }
}

public open external class JavascriptFTextBox(
  outer: UObject,
) : Widget {
  @JsName("OnIsReadOnly")
  public open var onIsReadOnly: UnrealEngineDelegate<() -> Boolean>

  @JsName("OnIsValidText")
  public open var onIsValidText: UnrealEngineDelegate<(TextValue: String) -> String>

  @JsName("OnGetDefaultValue")
  public open var onGetDefaultValue: UnrealEngineDelegate<() -> JavascriptTextProperty>

  @JsName("OnTextCommitted")
  public open var onTextCommitted:
      UnrealEngineMulticastDelegate<(TextProperty: JavascriptTextProperty) -> Unit>

  @JsName("WidgetStyle")
  public open var widgetStyle: EditableTextBoxStyle

  @JsName("WrapTextAt")
  public open var wrapTextAt: Number

  @JsName("AutoWrapText")
  public open var autoWrapText: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptFTextBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptFTextBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptFTextBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptFTextBox

    @JsName("C")
    public fun copy(other: UObject): JavascriptFTextBox

    @JsName("C")
    public fun copy(other: Any): JavascriptFTextBox
  }
}

public open external class JavascriptGameViewport(
  outer: UObject,
) : ContentWidget {
  @JsName("BackgroundColor")
  public open var backgroundColor: LinearColor

  @JsName("Spawn")
  public open fun spawn(actorClass: UnrealEngineClass): Actor

  @JsName("SetViewRotation")
  public open fun setViewRotation(rotation: Rotator): Unit

  @JsName("SetViewLocation")
  public open fun setViewLocation(location: Vector): Unit

  @JsName("GetViewRotation")
  public open fun getViewRotation(): Rotator

  @JsName("GetViewportWorld")
  public open fun getViewportWorld(): World

  @JsName("GetViewLocation")
  public open fun getViewLocation(): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGameViewport

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGameViewport

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGameViewport

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGameViewport

    @JsName("C")
    public fun copy(other: UObject): JavascriptGameViewport

    @JsName("C")
    public fun copy(other: Any): JavascriptGameViewport
  }
}

public open external class JavascriptIntSpinBox(
  outer: UObject,
) : Widget {
  @JsName("Value")
  public open var value: Number

  @JsName("ValueDelegate")
  public open var valueDelegate: UnrealEngineDelegate<() -> Number>

  @JsName("WidgetStyle")
  public open var widgetStyle: SpinBoxStyle

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("Delta")
  public open var delta: Number

  @JsName("SliderExponent")
  public open var sliderExponent: Number

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("Justification")
  public open var justification: String

  @JsName("MinDesiredWidth")
  public open var minDesiredWidth: Number

  @JsName("ClearKeyboardFocusOnCommit")
  public open var clearKeyboardFocusOnCommit: Boolean

  @JsName("SelectAllTextOnCommit")
  public open var selectAllTextOnCommit: Boolean

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("OnValueChanged")
  public open var onValueChanged: UnrealEngineMulticastDelegate<(InValue: Number) -> Unit>

  @JsName("OnValueCommitted")
  public open var onValueCommitted: UnrealEngineMulticastDelegate<(InValue: Number,
      CommitMethod: String) -> Unit>

  @JsName("OnBeginSliderMovement")
  public open var onBeginSliderMovement: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnEndSliderMovement")
  public open var onEndSliderMovement: UnrealEngineMulticastDelegate<(InValue: Number) -> Unit>

  @JsName("bOverride_MinValue")
  public open var overrideMinValue: Boolean

  @JsName("bOverride_MaxValue")
  public open var overrideMaxValue: Boolean

  @JsName("bOverride_MinSliderValue")
  public open var overrideMinSliderValue: Boolean

  @JsName("bOverride_MaxSliderValue")
  public open var overrideMaxSliderValue: Boolean

  @JsName("MinValue")
  public open var minValue: Number

  @JsName("MaxValue")
  public open var maxValue: Number

  @JsName("MinSliderValue")
  public open var minSliderValue: Number

  @JsName("MaxSliderValue")
  public open var maxSliderValue: Number

  @JsName("SetValue")
  public open fun setValue(newValue: Number): Unit

  @JsName("SetMinValue")
  public open fun setMinValue(newValue: Number): Unit

  @JsName("SetMinSliderValue")
  public open fun setMinSliderValue(newValue: Number): Unit

  @JsName("SetMaxValue")
  public open fun setMaxValue(newValue: Number): Unit

  @JsName("SetMaxSliderValue")
  public open fun setMaxSliderValue(newValue: Number): Unit

  @JsName("SetForegroundColor")
  public open fun setForegroundColor(inForegroundColor: SlateColor): Unit

  @JsName("GetValue")
  public open fun getValue(): Number

  @JsName("GetMinValue")
  public open fun getMinValue(): Number

  @JsName("GetMinSliderValue")
  public open fun getMinSliderValue(): Number

  @JsName("GetMaxValue")
  public open fun getMaxValue(): Number

  @JsName("GetMaxSliderValue")
  public open fun getMaxSliderValue(): Number

  @JsName("ClearMinValue")
  public open fun clearMinValue(): Unit

  @JsName("ClearMinSliderValue")
  public open fun clearMinSliderValue(): Unit

  @JsName("ClearMaxValue")
  public open fun clearMaxValue(): Unit

  @JsName("ClearMaxSliderValue")
  public open fun clearMaxSliderValue(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptIntSpinBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptIntSpinBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptIntSpinBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptIntSpinBox

    @JsName("C")
    public fun copy(other: UObject): JavascriptIntSpinBox

    @JsName("C")
    public fun copy(other: Any): JavascriptIntSpinBox
  }
}

public open external class TableColumnHeaderStyle : SlateWidgetStyle {
  @JsName("SortPrimaryAscendingImage")
  public open var sortPrimaryAscendingImage: SlateBrush

  @JsName("SortPrimaryDescendingImage")
  public open var sortPrimaryDescendingImage: SlateBrush

  @JsName("SortSecondaryAscendingImage")
  public open var sortSecondaryAscendingImage: SlateBrush

  @JsName("SortSecondaryDescendingImage")
  public open var sortSecondaryDescendingImage: SlateBrush

  @JsName("NormalBrush")
  public open var normalBrush: SlateBrush

  @JsName("HoveredBrush")
  public open var hoveredBrush: SlateBrush

  @JsName("MenuDropdownImage")
  public open var menuDropdownImage: SlateBrush

  @JsName("MenuDropdownNormalBorderBrush")
  public open var menuDropdownNormalBorderBrush: SlateBrush

  @JsName("MenuDropdownHoveredBorderBrush")
  public open var menuDropdownHoveredBorderBrush: SlateBrush

  public override fun clone(): TableColumnHeaderStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TableColumnHeaderStyle

    @JsName("C")
    public fun copy(other: Any): TableColumnHeaderStyle
  }
}

public open external class SplitterStyle : SlateWidgetStyle {
  @JsName("HandleNormalBrush")
  public open var handleNormalBrush: SlateBrush

  @JsName("HandleHighlightBrush")
  public open var handleHighlightBrush: SlateBrush

  public override fun clone(): SplitterStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SplitterStyle

    @JsName("C")
    public fun copy(other: Any): SplitterStyle
  }
}

public open external class HeaderRowStyle : SlateWidgetStyle {
  @JsName("ColumnStyle")
  public open var columnStyle: TableColumnHeaderStyle

  @JsName("LastColumnStyle")
  public open var lastColumnStyle: TableColumnHeaderStyle

  @JsName("ColumnSplitterStyle")
  public open var columnSplitterStyle: SplitterStyle

  @JsName("SplitterHandleSize")
  public open var splitterHandleSize: Number

  @JsName("BackgroundBrush")
  public open var backgroundBrush: SlateBrush

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("HorizontalSeparatorBrush")
  public open var horizontalSeparatorBrush: SlateBrush

  @JsName("HorizontalSeparatorThickness")
  public open var horizontalSeparatorThickness: Number

  public override fun clone(): HeaderRowStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): HeaderRowStyle

    @JsName("C")
    public fun copy(other: Any): HeaderRowStyle
  }
}

public open external class JavascriptColumn {
  public open var ID: String

  @JsName("Width")
  public open var width: Number

  @JsName("Widget")
  public open var widget: Widget

  public open fun clone(): JavascriptColumn

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptColumn

    @JsName("C")
    public fun copy(other: Any): JavascriptColumn
  }
}

@JsName("T$422")
public external interface Object422 {
  @JsName("OutItems")
  public var outItems: Array<UObject>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$423")
public external interface OutItemsProvider {
  @JsName("OutItems")
  public var outItems: Array<UObject>
}

public open external class JavascriptTreeView(
  outer: UObject,
) : ListViewBase {
  @JsName("OnGenerateRowEvent")
  public open var onGenerateRowEvent: UnrealEngineDelegate<(
    UObject: UObject,
    ID: String,
    Instance: JavascriptTreeView,
  ) -> Widget>

  @JsName("OnExpansionChanged")
  public open var onExpansionChanged: UnrealEngineDelegate<(
    Item: UObject,
    bExpanded: Boolean,
    Instance: JavascriptTreeView,
  ) -> Unit>

  @JsName("OnContextMenuOpening")
  public open var onContextMenuOpening:
      UnrealEngineDelegate<(Instance: JavascriptTreeView) -> Widget>

  @JsName("OnGetChildren")
  public open var onGetChildren: UnrealEngineDelegate<(Item: UObject,
      Instance: JavascriptTreeView) -> Unit>

  @JsName("JavascriptContext")
  public open var javascriptContext: JavascriptContext

  @JsName("Items")
  public open var items: Array<UObject>

  @JsName("HeaderRowStyle")
  public open var headerRowStyle: HeaderRowStyle

  @JsName("TableRowStyle")
  public open var tableRowStyle: TableRowStyle

  @JsName("ScrollBarStyle")
  public open var scrollBarStyle: ScrollBarStyle

  @JsName("SelectionMode")
  public open var selectionMode: String

  @JsName("Children")
  public open var children: Array<UObject>

  @JsName("Columns")
  public open var columns: Array<JavascriptColumn>

  @JsName("ColumnWidgets")
  public open var columnWidgets: Array<Widget>

  @JsName("SetSingleExpandedItem")
  public open fun setSingleExpandedItem(inItem: UObject): Unit

  @JsName("SetSelection")
  public open fun setSelection(soleSelectedItem: UObject): Unit

  @JsName("SetItemSelection")
  public open fun setItemSelection(multiSelectedItems: Array<UObject>, isSelected: Boolean): Unit

  @JsName("SetItemExpansion")
  public open fun setItemExpansion(inItem: UObject, inShouldExpandItem: Boolean): Unit

  @JsName("SetDoubleClickSelection")
  public open fun setDoubleClickSelection(selectedItem: UObject): Unit

  @JsName("RequestTreeRefresh")
  public open fun requestTreeRefresh(): Unit

  @JsName("RequestNavigateToItem")
  public open fun requestNavigateToItem(item: UObject): Unit

  @JsName("OnSelectionChanged")
  public open fun onSelectionChanged(uObject: UObject, type: String): Unit

  @JsName("OnDoubleClick")
  public open fun onDoubleClick(uObject: UObject): Unit

  @JsName("IsItemExpanded")
  public open fun isItemExpanded(inItem: UObject): Boolean

  @JsName("IsDoubleClickSelection")
  public open fun isDoubleClickSelection(selectedItem: UObject): Boolean

  @JsName("GetSelectedItems")
  public open fun getSelectedItems(outItems: Array<UObject>): Object422

  @JsName("GetDoubleClickedItems")
  public open fun getDoubleClickedItems(outItems: Array<UObject>): OutItemsProvider

  @JsName("ClearSelection")
  public open fun clearSelection(): Unit

  @JsName("ClearDoubleClickSelection")
  public open fun clearDoubleClickSelection(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptTreeView

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptTreeView

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptTreeView

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptTreeView

    @JsName("C")
    public fun copy(other: UObject): JavascriptTreeView

    @JsName("C")
    public fun copy(other: Any): JavascriptTreeView
  }
}

public open external class JavascriptListView(
  outer: UObject,
) : JavascriptTreeView {
  @JsName("ItemHeight")
  public open var itemHeight: Number

  @JsName("RequestListRefresh")
  public open fun requestListRefresh(): Unit

  @JsName("OnClick")
  public open fun onClick(uObject: UObject): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptListView

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptListView

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptListView

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptListView

    @JsName("C")
    public fun copy(other: UObject): JavascriptListView

    @JsName("C")
    public fun copy(other: Any): JavascriptListView
  }
}

@JsName("EJavasrciptUserInterfaceActionType")
public external object JavasrciptUserInterfaceActionType {
  public var None: String

  public var Button: String

  public var ToggleButton: String

  public var RadioButton: String

  public var Check: String

  public var CollapsedButton: String

  @JsName("EJavasrciptUserInterfaceActionType_MAX")
  public var Max: String
}

public open external class JavascriptMenuContext(
  outer: UObject,
) : UObject {
  @JsName("Description")
  public open var description: String

  @JsName("Tooltip")
  public open var tooltip: String

  @JsName("Icon")
  public open var icon: JavascriptSlateIcon

  @JsName("ActionType")
  public open var actionType: String

  @JsName("OnCanExecute")
  public open var onCanExecute: UnrealEngineDelegate<() -> Boolean>

  @JsName("OnExecute")
  public open var onExecute: UnrealEngineDelegate<() -> Unit>

  @JsName("OnGetActionCheckState")
  public open var onGetActionCheckState: UnrealEngineDelegate<() -> String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptMenuContext

    @JsName("C")
    public fun copy(other: UObject): JavascriptMenuContext

    @JsName("C")
    public fun copy(other: Any): JavascriptMenuContext
  }
}

public open external class JavascriptSlateTextRun {
  public open fun clone(): JavascriptSlateTextRun

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptSlateTextRun

    @JsName("C")
    public fun copy(other: Any): JavascriptSlateTextRun
  }
}

public open external class JavascriptTextModel(
  outer: UObject,
) : UObject {
  @JsName("SetString")
  public open fun setString(string: String): Unit

  @JsName("GetString")
  public open fun getString(): String

  @JsName("CreateRun")
  public open fun createRun(
    messageTextStyle: TextBlockStyle,
    beginIndex: Number,
    endIndex: Number,
  ): JavascriptSlateTextRun

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptTextModel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptTextModel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptTextModel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptTextModel

    @JsName("C")
    public fun copy(other: UObject): JavascriptTextModel

    @JsName("C")
    public fun copy(other: Any): JavascriptTextModel
  }
}

@JsName("T$424")
public external interface TextLayoutProvider {
  @JsName("TextLayout")
  public var textLayout: JavascriptTextLayout
}

public open external class JavascriptTextLayout {
  public open fun clone(): JavascriptTextLayout

  @JsName("AddLine")
  public open fun addLine(model: JavascriptTextModel, runs: Array<JavascriptSlateTextRun>):
      TextLayoutProvider

  @JsName("ClearLines")
  public open fun clearLines(): TextLayoutProvider

  @JsName("GetAsText")
  public open fun getAsText(): String

  @JsName("GetLineLength")
  public open fun getLineLength(): Number

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptTextLayout

    @JsName("C")
    public fun copy(other: Any): JavascriptTextLayout

    @JsName("AddLine")
    public fun addLine(
      textLayout: JavascriptTextLayout,
      model: JavascriptTextModel,
      runs: Array<JavascriptSlateTextRun>,
    ): TextLayoutProvider

    @JsName("ClearLines")
    public fun clearLines(textLayout: JavascriptTextLayout): TextLayoutProvider

    @JsName("GetAsText")
    public fun getAsText(textLayout: JavascriptTextLayout): String

    @JsName("GetLineLength")
    public fun getLineLength(targetTextLayout: JavascriptTextLayout): Number
  }
}

public open external class JavascriptMultiLineEditableTextBox(
  outer: UObject,
) : MultiLineEditableTextBox {
  @JsName("OnVScrollBarUserScrolled")
  public open var onVScrollBarUserScrolled: UnrealEngineMulticastDelegate<(Offset: Number) -> Unit>

  @JsName("GetTextDelegate")
  public open var getTextDelegate:
      UnrealEngineDelegate<(TextLayout: JavascriptTextLayout) -> String>

  @JsName("SetTextDelegate")
  public open var setTextDelegate: UnrealEngineDelegate<(InText: String,
      TextLayout: JavascriptTextLayout) -> Unit>

  @JsName("bAlwaysShowScrollbars")
  public open var alwaysShowScrollbars: Boolean

  @JsName("ScrollTo")
  public open fun scrollTo(line: Number, offset: Number): Unit

  @JsName("Refresh")
  public open fun refresh(): Unit

  @JsName("GoTo")
  public open fun goTo(line: Number, offset: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptMultiLineEditableTextBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptMultiLineEditableTextBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptMultiLineEditableTextBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptMultiLineEditableTextBox

    @JsName("C")
    public fun copy(other: UObject): JavascriptMultiLineEditableTextBox

    @JsName("C")
    public fun copy(other: Any): JavascriptMultiLineEditableTextBox
  }
}

public open external class JavascriptRichTextBlockHyperlinkDecorator(
  outer: UObject,
) : RichTextBlockDecorator {
  @JsName("HyperlinkId")
  public open var hyperlinkId: String

  @JsName("OnClick")
  public open var onClick:
      UnrealEngineMulticastDelegate<(Self: JavascriptRichTextBlockHyperlinkDecorator) -> Unit>

  @JsName("GetMetadata")
  public open fun getMetadata(key: String): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptRichTextBlockHyperlinkDecorator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptRichTextBlockHyperlinkDecorator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptRichTextBlockHyperlinkDecorator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptRichTextBlockHyperlinkDecorator

    @JsName("C")
    public fun copy(other: UObject): JavascriptRichTextBlockHyperlinkDecorator

    @JsName("C")
    public fun copy(other: Any): JavascriptRichTextBlockHyperlinkDecorator
  }
}

public open external class JavascriptSearchBox(
  outer: UObject,
) : Widget {
  @JsName("JavascriptContext")
  public open var javascriptContext: JavascriptContext

  @JsName("OnTextChanged")
  public open var onTextChanged: UnrealEngineMulticastDelegate<(text: String) -> Unit>

  @JsName("OnTextCommitted")
  public open var onTextCommitted: UnrealEngineMulticastDelegate<(text: String,
      CommitMethod: String) -> Unit>

  public open var text: String

  @JsName("TextDelegate")
  public open var textDelegate: UnrealEngineDelegate<() -> String>

  @JsName("HintText")
  public open var hintText: String

  @JsName("HintTextDelegate")
  public open var hintTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("SetText")
  public open fun setText(inText: String): Unit

  @JsName("SetHintText")
  public open fun setHintText(inHintText: String): Unit

  @JsName("OnKeyDown")
  public open fun onKeyDown(myGeometry: Geometry, inKeyEvent: KeyEvent): EventReply

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptSearchBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptSearchBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptSearchBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptSearchBox

    @JsName("C")
    public fun copy(other: UObject): JavascriptSearchBox

    @JsName("C")
    public fun copy(other: Any): JavascriptSearchBox
  }
}

public open external class JavascriptStyleSet {
  @JsName("StyleSetName")
  public open var styleSetName: String

  public open fun clone(): JavascriptStyleSet

  @JsName("GetBrush")
  public open fun getBrush(styleName: String): SlateBrush

  @JsName("GetButtonStyle")
  public open fun getButtonStyle(styleName: String): ButtonStyle

  @JsName("GetCheckBoxStyle")
  public open fun getCheckBoxStyle(styleName: String): CheckBoxStyle

  @JsName("GetColor")
  public open fun getColor(styleName: String): LinearColor

  @JsName("GetComboBoxStyle")
  public open fun getComboBoxStyle(styleName: String): ComboBoxStyle

  @JsName("GetComboButtonStyle")
  public open fun getComboButtonStyle(styleName: String): ComboButtonStyle

  @JsName("GetEditableTextBoxStyle")
  public open fun getEditableTextBoxStyle(styleName: String): EditableTextBoxStyle

  @JsName("GetEditableTextStyle")
  public open fun getEditableTextStyle(styleName: String): EditableTextStyle

  @JsName("GetFloat")
  public open fun getFloat(styleName: String): Number

  @JsName("GetFontStyle")
  public open fun getFontStyle(styleName: String): SlateFontInfo

  @JsName("GetMargin")
  public open fun getMargin(styleName: String): Margin

  @JsName("GetProgressBarStyle")
  public open fun getProgressBarStyle(styleName: String): ProgressBarStyle

  @JsName("GetSlateColor")
  public open fun getSlateColor(styleName: String): SlateColor

  @JsName("GetSound")
  public open fun getSound(styleName: String): SlateSound

  @JsName("GetSpinBoxStyle")
  public open fun getSpinBoxStyle(styleName: String): SpinBoxStyle

  @JsName("GetTableRowStyle")
  public open fun getTableRowStyle(styleName: String): TableRowStyle

  @JsName("GetTextBlockStyle")
  public open fun getTextBlockStyle(styleName: String): TextBlockStyle

  @JsName("GetVector")
  public open fun getVector(styleName: String): Vector2d

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptStyleSet

    @JsName("C")
    public fun copy(other: Any): JavascriptStyleSet

    @JsName("GetBrush")
    public fun getBrush(handle: JavascriptStyleSet, styleName: String): SlateBrush

    @JsName("GetButtonStyle")
    public fun getButtonStyle(handle: JavascriptStyleSet, styleName: String): ButtonStyle

    @JsName("GetCheckBoxStyle")
    public fun getCheckBoxStyle(handle: JavascriptStyleSet, styleName: String): CheckBoxStyle

    @JsName("GetColor")
    public fun getColor(handle: JavascriptStyleSet, styleName: String): LinearColor

    @JsName("GetComboBoxStyle")
    public fun getComboBoxStyle(handle: JavascriptStyleSet, styleName: String): ComboBoxStyle

    @JsName("GetComboButtonStyle")
    public fun getComboButtonStyle(handle: JavascriptStyleSet, styleName: String): ComboButtonStyle

    @JsName("GetEditableTextBoxStyle")
    public fun getEditableTextBoxStyle(handle: JavascriptStyleSet, styleName: String):
        EditableTextBoxStyle

    @JsName("GetEditableTextStyle")
    public fun getEditableTextStyle(handle: JavascriptStyleSet, styleName: String):
        EditableTextStyle

    @JsName("GetFloat")
    public fun getFloat(handle: JavascriptStyleSet, styleName: String): Number

    @JsName("GetFontStyle")
    public fun getFontStyle(handle: JavascriptStyleSet, styleName: String): SlateFontInfo

    @JsName("GetMargin")
    public fun getMargin(handle: JavascriptStyleSet, styleName: String): Margin

    @JsName("GetProgressBarStyle")
    public fun getProgressBarStyle(handle: JavascriptStyleSet, styleName: String): ProgressBarStyle

    @JsName("GetSlateColor")
    public fun getSlateColor(handle: JavascriptStyleSet, styleName: String): SlateColor

    @JsName("GetSound")
    public fun getSound(handle: JavascriptStyleSet, styleName: String): SlateSound

    @JsName("GetSpinBoxStyle")
    public fun getSpinBoxStyle(handle: JavascriptStyleSet, styleName: String): SpinBoxStyle

    @JsName("GetTableRowStyle")
    public fun getTableRowStyle(handle: JavascriptStyleSet, styleName: String): TableRowStyle

    @JsName("GetTextBlockStyle")
    public fun getTextBlockStyle(handle: JavascriptStyleSet, styleName: String): TextBlockStyle

    @JsName("GetVector")
    public fun getVector(handle: JavascriptStyleSet, styleName: String): Vector2d
  }
}

public open external class JavascriptStyleSetLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  @JsName("SlateColor")
  public open var slateColor: SlateColor

  @JsName("SlateBrush")
  public open var slateBrush: SlateBrush

  @JsName("ButtonStyle")
  public open var buttonStyle: ButtonStyle

  @JsName("TextBlockStyle")
  public open var textBlockStyle: TextBlockStyle

  @JsName("EditableTextStyle")
  public open var editableTextStyle: EditableTextStyle

  @JsName("EditableTextBoxStyle")
  public open var editableTextBoxStyle: EditableTextBoxStyle

  @JsName("CheckBoxStyle")
  public open var checkBoxStyle: CheckBoxStyle

  @JsName("ComboBoxStyle")
  public open var comboBoxStyle: ComboBoxStyle

  @JsName("ComboButtonStyle")
  public open var comboButtonStyle: ComboButtonStyle

  @JsName("ProgressBarStyle")
  public open var progressBarStyle: ProgressBarStyle

  @JsName("SpinBoxStyle")
  public open var spinBoxStyle: SpinBoxStyle

  @JsName("TableRowStyle")
  public open var tableRowStyle: TableRowStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptStyleSetLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptStyleSetLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptStyleSetLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptStyleSetLibrary

    @JsName("GetVector")
    public fun getVector(handle: JavascriptStyleSet, styleName: String): Vector2d

    @JsName("GetTextBlockStyle")
    public fun getTextBlockStyle(handle: JavascriptStyleSet, styleName: String): TextBlockStyle

    @JsName("GetTableRowStyle")
    public fun getTableRowStyle(handle: JavascriptStyleSet, styleName: String): TableRowStyle

    @JsName("GetSpinBoxStyle")
    public fun getSpinBoxStyle(handle: JavascriptStyleSet, styleName: String): SpinBoxStyle

    @JsName("GetSound")
    public fun getSound(handle: JavascriptStyleSet, styleName: String): SlateSound

    @JsName("GetSlateColor")
    public fun getSlateColor(handle: JavascriptStyleSet, styleName: String): SlateColor

    @JsName("GetProgressBarStyle")
    public fun getProgressBarStyle(handle: JavascriptStyleSet, styleName: String): ProgressBarStyle

    @JsName("GetMargin")
    public fun getMargin(handle: JavascriptStyleSet, styleName: String): Margin

    @JsName("GetFontStyle")
    public fun getFontStyle(handle: JavascriptStyleSet, styleName: String): SlateFontInfo

    @JsName("GetFloat")
    public fun getFloat(handle: JavascriptStyleSet, styleName: String): Number

    @JsName("GetEditableTextStyle")
    public fun getEditableTextStyle(handle: JavascriptStyleSet, styleName: String):
        EditableTextStyle

    @JsName("GetEditableTextBoxStyle")
    public fun getEditableTextBoxStyle(handle: JavascriptStyleSet, styleName: String):
        EditableTextBoxStyle

    @JsName("GetComboButtonStyle")
    public fun getComboButtonStyle(handle: JavascriptStyleSet, styleName: String): ComboButtonStyle

    @JsName("GetComboBoxStyle")
    public fun getComboBoxStyle(handle: JavascriptStyleSet, styleName: String): ComboBoxStyle

    @JsName("GetColor")
    public fun getColor(handle: JavascriptStyleSet, styleName: String): LinearColor

    @JsName("GetCheckBoxStyle")
    public fun getCheckBoxStyle(handle: JavascriptStyleSet, styleName: String): CheckBoxStyle

    @JsName("GetButtonStyle")
    public fun getButtonStyle(handle: JavascriptStyleSet, styleName: String): ButtonStyle

    @JsName("GetBrush")
    public fun getBrush(handle: JavascriptStyleSet, styleName: String): SlateBrush

    @JsName("C")
    public fun copy(other: UObject): JavascriptStyleSetLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptStyleSetLibrary
  }
}

public open external class JavascriptTextBlock(
  outer: UObject,
) : TextBlock {
  @JsName("HighlightText")
  public open var highlightText: String

  @JsName("HighlightTextDelegate")
  public open var highlightTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("SetHighlightText")
  public open fun setHighlightText(inHighlightText: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptTextBlock

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptTextBlock

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptTextBlock

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptTextBlock

    @JsName("C")
    public fun copy(other: UObject): JavascriptTextBlock

    @JsName("C")
    public fun copy(other: Any): JavascriptTextBlock
  }
}

public open external class JavascriptTileView(
  outer: UObject,
) : TileView {
  @JsName("JavascriptContext")
  public open var javascriptContext: JavascriptContext

  @JsName("TileListItems")
  public open var tileListItems: Array<UObject>

  @JsName("OnSelectionChanged")
  public open fun onSelectionChanged(uObject: UObject, type: String): Unit

  @JsName("OnDoubleClick")
  public open fun onDoubleClick(uObject: UObject): Unit

  @JsName("OnClick")
  public open fun onClick(uObject: UObject): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptTileView

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptTileView

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptTileView

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptTileView

    @JsName("C")
    public fun copy(other: UObject): JavascriptTileView

    @JsName("C")
    public fun copy(other: Any): JavascriptTileView
  }
}

public open external class JavascriptToolbarButtonContext(
  outer: UObject,
) : UObject {
  @JsName("OnGetLabel")
  public open var onGetLabel: UnrealEngineDelegate<() -> String>

  @JsName("OnGetTooltip")
  public open var onGetTooltip: UnrealEngineDelegate<() -> String>

  @JsName("OnGetIcon")
  public open var onGetIcon: UnrealEngineDelegate<() -> JavascriptSlateIcon>

  @JsName("OnExecuteAction")
  public open var onExecuteAction: UnrealEngineDelegate<(EditingObject: UObject) -> Unit>

  @JsName("OnCanExecuteAction")
  public open var onCanExecuteAction: UnrealEngineDelegate<(EditingObject: UObject) -> Boolean>

  @JsName("OnIsActionChecked")
  public open var onIsActionChecked: UnrealEngineDelegate<(EditingObject: UObject) -> Boolean>

  @JsName("OnIsActionButtonVisible")
  public open var onIsActionButtonVisible: UnrealEngineDelegate<(EditingObject: UObject) -> Boolean>

  @JsName("UnmarkReferencedObject")
  public open fun unmarkReferencedObject(): Unit

  @JsName("MarkReferencedObject")
  public open fun markReferencedObject(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptToolbarButtonContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptToolbarButtonContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptToolbarButtonContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptToolbarButtonContext

    @JsName("C")
    public fun copy(other: UObject): JavascriptToolbarButtonContext

    @JsName("C")
    public fun copy(other: Any): JavascriptToolbarButtonContext
  }
}

@JsName("JavascriptUMGBlueprintLibrary")
public open external class JavascriptUmgBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptUmgBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptUmgBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptUmgBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptUmgBlueprintLibrary

    @JsName("SlateColor_UseSubduedForeground")
    public fun slateColorUseSubduedForeground(): SlateColor

    @JsName("SlateColor_UseForeground")
    public fun slateColorUseForeground(): SlateColor

    @JsName("GetLineLength")
    public fun getLineLength(targetTextLayout: JavascriptTextLayout): Number

    @JsName("GetAsText")
    public fun getAsText(textLayout: JavascriptTextLayout): String

    @JsName("DrawSpaceSpline")
    public fun drawSpaceSpline(
      context: PaintContext,
      inStart: Vector2d,
      inStartDir: Vector2d,
      inEnd: Vector2d,
      inEndDir: Vector2d,
      inThickness: Number,
      inTint: LinearColor,
    ): ContextProvider

    @JsName("ClearLines")
    public fun clearLines(textLayout: JavascriptTextLayout): TextLayoutProvider

    @JsName("AddLine")
    public fun addLine(
      textLayout: JavascriptTextLayout,
      model: JavascriptTextModel,
      runs: Array<JavascriptSlateTextRun>,
    ): TextLayoutProvider

    @JsName("C")
    public fun copy(other: UObject): JavascriptUmgBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptUmgBlueprintLibrary
  }
}

public open external class JavascriptSlateStyle {
  public open fun clone(): JavascriptSlateStyle

  @JsName("AddBorderBrush")
  public open fun addBorderBrush(
    propertyName: String,
    inImageName: String,
    inMargin: Margin,
    inColorAndOpacity: LinearColor,
    inImageType: String,
  ): Unit

  @JsName("AddBoxBrush")
  public open fun addBoxBrush(
    propertyName: String,
    inImageName: String,
    inMargin: Margin,
    inColorAndOpacity: LinearColor,
    inImageType: String,
  ): Unit

  @JsName("AddButtonStyle")
  public open fun addButtonStyle(propertyName: String, buttonStyle: ButtonStyle): Unit

  @JsName("AddFontInfo")
  public open fun addFontInfo(propertyName: String, fontInfo: SlateFontInfo): Unit

  @JsName("AddImageBrush")
  public open fun addImageBrush(
    propertyName: String,
    inImageName: String,
    inImageSize: Vector2d,
    inTint: LinearColor,
    inTiling: String,
    inImageType: String,
  ): Unit

  @JsName("AddSound")
  public open fun addSound(propertyName: String, sound: SlateSound): Unit

  @JsName("Register")
  public open fun register(): Unit

  @JsName("RootToContentDir")
  public open fun rootToContentDir(relativePath: String): String

  @JsName("RootToCoreContentDir")
  public open fun rootToCoreContentDir(relativePath: String): String

  @JsName("SetContentRoot")
  public open fun setContentRoot(inContentRootDir: String): Unit

  @JsName("SetCoreContentRoot")
  public open fun setCoreContentRoot(inCoreContentRootDir: String): Unit

  @JsName("SetParentStyleName")
  public open fun setParentStyleName(inParentStyleName: String): Unit

  @JsName("Unregister")
  public open fun unregister(): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptSlateStyle

    @JsName("C")
    public fun copy(other: Any): JavascriptSlateStyle

    @JsName("AddBorderBrush")
    public fun addBorderBrush(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      inImageName: String,
      inMargin: Margin,
      inColorAndOpacity: LinearColor,
      inImageType: String,
    ): Unit

    @JsName("AddBoxBrush")
    public fun addBoxBrush(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      inImageName: String,
      inMargin: Margin,
      inColorAndOpacity: LinearColor,
      inImageType: String,
    ): Unit

    @JsName("AddButtonStyle")
    public fun addButtonStyle(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      buttonStyle: ButtonStyle,
    ): Unit

    @JsName("AddFontInfo")
    public fun addFontInfo(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      fontInfo: SlateFontInfo,
    ): Unit

    @JsName("AddImageBrush")
    public fun addImageBrush(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      inImageName: String,
      inImageSize: Vector2d,
      inTint: LinearColor,
      inTiling: String,
      inImageType: String,
    ): Unit

    @JsName("AddSound")
    public fun addSound(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      sound: SlateSound,
    ): Unit

    @JsName("Register")
    public fun register(styleSet: JavascriptSlateStyle): Unit

    @JsName("RootToContentDir")
    public fun rootToContentDir(styleSet: JavascriptSlateStyle, relativePath: String): String

    @JsName("RootToCoreContentDir")
    public fun rootToCoreContentDir(styleSet: JavascriptSlateStyle, relativePath: String): String

    @JsName("SetContentRoot")
    public fun setContentRoot(styleSet: JavascriptSlateStyle, inContentRootDir: String): Unit

    @JsName("SetCoreContentRoot")
    public fun setCoreContentRoot(styleSet: JavascriptSlateStyle, inCoreContentRootDir: String):
        Unit

    @JsName("SetParentStyleName")
    public fun setParentStyleName(styleSet: JavascriptSlateStyle, inParentStyleName: String): Unit

    @JsName("Unregister")
    public fun unregister(styleSet: JavascriptSlateStyle): Unit

    @JsName("CreateSlateStyle")
    public fun createSlateStyle(inStyleSetName: String): JavascriptSlateStyle
  }
}

@JsName("JavascriptUMGLibrary")
public open external class JavascriptUmgLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptUmgLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptUmgLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptUmgLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptUmgLibrary

    @JsName("Unregister")
    public fun unregister(styleSet: JavascriptSlateStyle): Unit

    @JsName("TakeWidget")
    public fun takeWidget(widget: Widget): JavascriptSlateWidget

    @JsName("ShowWindow")
    public fun showWindow(newWindow: JavascriptSlateWidget): Unit

    @JsName("SetParentStyleName")
    public fun setParentStyleName(styleSet: JavascriptSlateStyle, inParentStyleName: String): Unit

    @JsName("SetCoreContentRoot")
    public fun setCoreContentRoot(styleSet: JavascriptSlateStyle, inCoreContentRootDir: String):
        Unit

    @JsName("SetContentRoot")
    public fun setContentRoot(styleSet: JavascriptSlateStyle, inContentRootDir: String): Unit

    @JsName("SetContent")
    public fun setContent(targetWidget: NativeWidgetHost, slateWidget: JavascriptSlateWidget):
        Widget

    @JsName("RootToCoreContentDir")
    public fun rootToCoreContentDir(styleSet: JavascriptSlateStyle, relativePath: String): String

    @JsName("RootToContentDir")
    public fun rootToContentDir(styleSet: JavascriptSlateStyle, relativePath: String): String

    @JsName("Register")
    public fun register(styleSet: JavascriptSlateStyle): Unit

    @JsName("GetUIGeometry")
    public fun getUiGeometry(widget: Widget): Geometry

    @JsName("GetRootWindow")
    public fun getRootWindow(): JavascriptSlateWidget

    @JsName("GenerateDynamicImageResource")
    public fun generateDynamicImageResource(inDynamicBrushName: String): Vector2d

    @JsName("CreateSlateStyle")
    public fun createSlateStyle(inStyleSetName: String): JavascriptSlateStyle

    @JsName("AddWindowAsNativeChild")
    public fun addWindowAsNativeChild(newWindow: JavascriptSlateWidget,
        rootWindow: JavascriptSlateWidget): Unit

    @JsName("AddWindow")
    public fun addWindow(newWindow: JavascriptSlateWidget, showImmediately: Boolean): Unit

    @JsName("AddSound")
    public fun addSound(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      sound: SlateSound,
    ): Unit

    @JsName("AddImageBrush")
    public fun addImageBrush(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      inImageName: String,
      inImageSize: Vector2d,
      inTint: LinearColor,
      inTiling: String,
      inImageType: String,
    ): Unit

    @JsName("AddFontInfo")
    public fun addFontInfo(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      fontInfo: SlateFontInfo,
    ): Unit

    @JsName("AddButtonStyle")
    public fun addButtonStyle(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      buttonStyle: ButtonStyle,
    ): Unit

    @JsName("AddBoxBrush")
    public fun addBoxBrush(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      inImageName: String,
      inMargin: Margin,
      inColorAndOpacity: LinearColor,
      inImageType: String,
    ): Unit

    @JsName("AddBorderBrush")
    public fun addBorderBrush(
      styleSet: JavascriptSlateStyle,
      propertyName: String,
      inImageName: String,
      inMargin: Margin,
      inColorAndOpacity: LinearColor,
      inImageType: String,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptUmgLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptUmgLibrary
  }
}

public open external class JavascriptWidget(
  outer: UObject,
) : UserWidget {
  @JsName("JavascriptContext")
  public open var javascriptContext: JavascriptContext

  @JsName("OnInputActionEvent")
  public open var onInputActionEvent: UnrealEngineMulticastDelegate<(ActionName: String) -> Unit>

  @JsName("OnReleaseActionEvent")
  public open var onReleaseActionEvent: UnrealEngineMulticastDelegate<(ActionName: String) -> Unit>

  @JsName("OnInputAxisEvent")
  public open var onInputAxisEvent: UnrealEngineMulticastDelegate<(Axis: Number,
      AxisName: String) -> Unit>

  @JsName("ContentSlot")
  public open var contentSlot: PanelSlot

  @JsName("SetRootWidget")
  public open fun setRootWidget(widget: Widget): Unit

  @JsName("RemoveChild")
  public open fun removeChild(): Boolean

  @JsName("OnReleaseInputActionByName")
  public open fun onReleaseInputActionByName(actionName: String): Unit

  @JsName("OnListenForInputAxis")
  public open fun onListenForInputAxis(
    axisName: String,
    eventType: String,
    consume: Boolean,
  ): Unit

  @JsName("OnListenForInputAction")
  public open fun onListenForInputAction(
    actionName: String,
    eventType: String,
    consume: Boolean,
  ): Unit

  @JsName("OnInputAxisByName")
  public open fun onInputAxisByName(axis: Number, actionName: String): Unit

  @JsName("OnInputActionByName")
  public open fun onInputActionByName(actionName: String): Unit

  @JsName("OnDestroy")
  public open fun onDestroy(releaseChildren: Boolean): Unit

  @JsName("AddChild")
  public open fun addChild(content: Widget): PanelSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptWidget

    @JsName("HasValidCachedWidget")
    public fun hasValidCachedWidget(widget: Widget): Boolean

    @JsName("CallSynchronizeProperties")
    public fun callSynchronizeProperties(widgetOrSlot: Visual): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptWidget

    @JsName("C")
    public fun copy(other: Any): JavascriptWidget
  }
}

@JsName("EJavascriptWindowType")
public external object JavascriptWindowType {
  public var Normal: String

  public var Menu: String

  public var ToolTip: String

  public var Notification: String

  public var CursorDecorator: String

  @JsName("EJavascriptWindowType_MAX")
  public var Max: String
}

public open external class WindowStyle : SlateWidgetStyle {
  @JsName("MinimizeButtonStyle")
  public open var minimizeButtonStyle: ButtonStyle

  @JsName("MaximizeButtonStyle")
  public open var maximizeButtonStyle: ButtonStyle

  @JsName("RestoreButtonStyle")
  public open var restoreButtonStyle: ButtonStyle

  @JsName("CloseButtonStyle")
  public open var closeButtonStyle: ButtonStyle

  @JsName("TitleTextStyle")
  public open var titleTextStyle: TextBlockStyle

  @JsName("ActiveTitleBrush")
  public open var activeTitleBrush: SlateBrush

  @JsName("InactiveTitleBrush")
  public open var inactiveTitleBrush: SlateBrush

  @JsName("FlashTitleBrush")
  public open var flashTitleBrush: SlateBrush

  @JsName("BackgroundColor")
  public open var backgroundColor: SlateColor

  @JsName("OutlineBrush")
  public open var outlineBrush: SlateBrush

  @JsName("OutlineColor")
  public open var outlineColor: SlateColor

  @JsName("BorderBrush")
  public open var borderBrush: SlateBrush

  @JsName("BorderColor")
  public open var borderColor: SlateColor

  @JsName("BackgroundBrush")
  public open var backgroundBrush: SlateBrush

  @JsName("ChildBackgroundBrush")
  public open var childBackgroundBrush: SlateBrush

  @JsName("WindowCornerRadius")
  public open var windowCornerRadius: Number

  @JsName("BorderPadding")
  public open var borderPadding: Margin

  public override fun clone(): WindowStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WindowStyle

    @JsName("C")
    public fun copy(other: Any): WindowStyle
  }
}

@JsName("EJavascriptAutoCenter")
public external object JavascriptAutoCenter {
  public var None: String

  public var PrimaryWorkArea: String

  public var PreferredWorkArea: String

  @JsName("EJavascriptAutoCenter_MAX")
  public var Max: String
}

@JsName("EJavascriptWindowTransparency")
public external object JavascriptWindowTransparency {
  public var None: String

  public var PerWindow: String

  @JsName("EJavascriptWindowTransparency_MAX")
  public var Max: String
}

@JsName("EJavascriptSizingRule")
public external object JavascriptSizingRule {
  public var FixedSize: String

  public var Autosized: String

  public var UserSized: String

  @JsName("EJavascriptSizingRule_MAX")
  public var Max: String
}

@JsName("EJavascriptWindowActivationPolicy")
public external object JavascriptWindowActivationPolicy {
  public var Never: String

  public var Always: String

  public var FirstShown: String

  @JsName("EJavascriptWindowActivationPolicy_MAX")
  public var Max: String
}

@JsName("T$425")
public external interface Object425 {
  @JsName("OutFolderName")
  public var outFolderName: String

  @JsName("$")
  public var value: Boolean
}

@JsName("T$426")
public external interface Object426 {
  @JsName("OutFilenames")
  public var outFilenames: Array<String>

  @JsName("$")
  public var value: Boolean
}

public open external class JavascriptWindow(
  outer: UObject,
) : ContentWidget {
  @JsName("Type")
  public open var type: String

  @JsName("Style")
  public open var style: WindowStyle

  @JsName("Title")
  public open var title: String

  @JsName("bDragAnywhere")
  public open var dragAnywhere: Boolean

  @JsName("AutoCenter")
  public open var autoCenter: String

  @JsName("ScreenPosition")
  public open var screenPosition: Vector2d

  @JsName("ClientSize")
  public open var clientSize: Vector2d

  @JsName("SupportsTransparency")
  public open var supportsTransparency: String

  @JsName("InitialOpacity")
  public open var initialOpacity: Number

  @JsName("IsInitiallyMaximized")
  public open var isInitiallyMaximized: Boolean

  @JsName("SizingRule")
  public open var sizingRule: String

  @JsName("IsPopupWindow")
  public open var isPopupWindow: Boolean

  @JsName("FocusWhenFirstShown")
  public open var focusWhenFirstShown: Boolean

  @JsName("ActivateWhenFirstShown")
  public open var activateWhenFirstShown: Boolean

  @JsName("UseOSWindowBorder")
  public open var useOsWindowBorder: Boolean

  @JsName("HasCloseButton")
  public open var hasCloseButton: Boolean

  @JsName("SupportsMaximize")
  public open var supportsMaximize: Boolean

  @JsName("SupportsMinimize")
  public open var supportsMinimize: Boolean

  @JsName("CreateTitleBar")
  public open var createTitleBar: Boolean

  @JsName("SaneWindowPlacement")
  public open var saneWindowPlacement: Boolean

  @JsName("LayoutBorder")
  public open var layoutBorder: Margin

  @JsName("UserResizeBorder")
  public open var userResizeBorder: Margin

  @JsName("OnWindowClosed")
  public open var onWindowClosed: UnrealEngineDelegate<() -> Unit>

  @JsName("OnWindowDeactivated")
  public open var onWindowDeactivated: UnrealEngineDelegate<() -> Unit>

  @JsName("IsTopmostWindow")
  public open var isTopmostWindow: Boolean

  @JsName("AdjustInitialSizeAndPositionForDPIScale")
  public open var adjustInitialSizeAndPositionForDpiScale: Boolean

  @JsName("ActivationPolicy")
  public open var activationPolicy: String

  @JsName("ShowWindow")
  public open fun showWindow(): Unit

  @JsName("SetOpacity")
  public open fun setOpacity(inOpacity: Number): Unit

  @JsName("Resize")
  public open fun resize(newSize: Vector2d): Unit

  @JsName("ReshapeWindow")
  public open fun reshapeWindow(newPosition: Vector2d, newSize: Vector2d): Unit

  @JsName("RequestDestroyWindow")
  public open fun requestDestroyWindow(): Unit

  @JsName("MoveWindowTo")
  public open fun moveWindowTo(newPosition: Vector2d): Unit

  @JsName("HideWindow")
  public open fun hideWindow(): Unit

  @JsName("FlashWindow")
  public open fun flashWindow(): Unit

  @JsName("EnableWindow")
  public open fun enableWindow(enable: Boolean): Unit

  @JsName("DestroyWindowImmediately")
  public open fun destroyWindowImmediately(): Unit

  @JsName("BringToFront")
  public open fun bringToFront(): Unit

  @JsName("OpenDirectoryDialog")
  public open fun openDirectoryDialog(
    dialogTitle: String,
    defaultPath: String,
    outFolderName: String,
  ): Object425

  @JsName("OpenFileDialog")
  public open fun openFileDialog(
    dialogTitle: String,
    defaultPath: String,
    defaultFile: String,
    fileTypes: String,
    flags: Number,
    outFilenames: Array<String>,
  ): Object426

  @JsName("SaveFileDialog")
  public open fun saveFileDialog(
    dialogTitle: String,
    defaultPath: String,
    defaultFile: String,
    fileTypes: String,
    flags: Number,
    outFilenames: Array<String>,
  ): Object426

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptWindow

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptWindow

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptWindow

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptWindow

    @JsName("C")
    public fun copy(other: UObject): JavascriptWindow

    @JsName("C")
    public fun copy(other: Any): JavascriptWindow

    @JsName("OpenDirectoryDialog")
    public fun openDirectoryDialog(
      windowHandle: JavascriptWindow,
      dialogTitle: String,
      defaultPath: String,
      outFolderName: String,
    ): Object425

    @JsName("OpenFileDialog")
    public fun openFileDialog(
      windowHandle: JavascriptWindow,
      dialogTitle: String,
      defaultPath: String,
      defaultFile: String,
      fileTypes: String,
      flags: Number,
      outFilenames: Array<String>,
    ): Object426

    @JsName("SaveFileDialog")
    public fun saveFileDialog(
      windowHandle: JavascriptWindow,
      dialogTitle: String,
      defaultPath: String,
      defaultFile: String,
      fileTypes: String,
      flags: Number,
      outFilenames: Array<String>,
    ): Object426
  }
}

@JsName("JavascriptHyperlinkSignature__PythonCallable")
public open external class JavascriptHyperlinkSignaturePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptHyperlinkSignaturePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        JavascriptHyperlinkSignaturePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptHyperlinkSignaturePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptHyperlinkSignaturePythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptHyperlinkSignaturePythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptHyperlinkSignaturePythonCallable
  }
}

@JsName("OnInputActionEvent__PythonCallable")
public open external class OnInputActionEventPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnInputActionEventPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnInputActionEventPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnInputActionEventPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnInputActionEventPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnInputActionEventPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnInputActionEventPythonCallable
  }
}

@JsName("OnInputAxisEvent__PythonCallable")
public open external class OnInputAxisEventPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnInputAxisEventPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnInputAxisEventPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnInputAxisEventPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnInputAxisEventPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnInputAxisEventPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnInputAxisEventPythonCallable
  }
}

@JsName("OnWindowDeactivated__PythonCallable")
public open external class OnWindowDeactivatedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnWindowDeactivatedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnWindowDeactivatedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnWindowDeactivatedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnWindowDeactivatedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnWindowDeactivatedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnWindowDeactivatedPythonCallable
  }
}

@JsName("OnWindowWidgetClosed__PythonCallable")
public open external class OnWindowWidgetClosedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnWindowWidgetClosedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnWindowWidgetClosedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnWindowWidgetClosedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnWindowWidgetClosedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnWindowWidgetClosedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnWindowWidgetClosedPythonCallable
  }
}

@JsName("BoolDelegate__PythonCallable")
public open external class BoolDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoolDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoolDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoolDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoolDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): BoolDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): BoolDelegatePythonCallable
  }
}

@JsName("IconDelegate__PythonCallable")
public open external class IconDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IconDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IconDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IconDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IconDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): IconDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): IconDelegatePythonCallable
  }
}

@JsName("JavascriptCanExecuteActionWithEditingObject__PythonCallable")
public open external class JavascriptCanExecuteActionWithEditingObjectPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptCanExecuteActionWithEditingObjectPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        JavascriptCanExecuteActionWithEditingObjectPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptCanExecuteActionWithEditingObjectPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptCanExecuteActionWithEditingObjectPythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptCanExecuteActionWithEditingObjectPythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptCanExecuteActionWithEditingObjectPythonCallable
  }
}

@JsName("JavascriptExecuteActionWithEditingObject__PythonCallable")
public open external class JavascriptExecuteActionWithEditingObjectPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptExecuteActionWithEditingObjectPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        JavascriptExecuteActionWithEditingObjectPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptExecuteActionWithEditingObjectPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptExecuteActionWithEditingObjectPythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptExecuteActionWithEditingObjectPythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptExecuteActionWithEditingObjectPythonCallable
  }
}

@JsName("TextDelegate__PythonCallable")
public open external class TextDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): TextDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): TextDelegatePythonCallable
  }
}

@JsName("OnVScrollBarUserScrolled__PythonCallable")
public open external class OnVScrollBarUserScrolledPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnVScrollBarUserScrolledPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnVScrollBarUserScrolledPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnVScrollBarUserScrolledPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnVScrollBarUserScrolledPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnVScrollBarUserScrolledPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnVScrollBarUserScrolledPythonCallable
  }
}

@JsName("SetText__PythonCallable")
public open external class SetTextPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SetTextPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SetTextPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SetTextPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SetTextPythonCallable

    @JsName("C")
    public fun copy(other: UObject): SetTextPythonCallable

    @JsName("C")
    public fun copy(other: Any): SetTextPythonCallable
  }
}

@JsName("ActionCheckStateDelegate__PythonCallable")
public open external class ActionCheckStateDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActionCheckStateDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActionCheckStateDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActionCheckStateDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActionCheckStateDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): ActionCheckStateDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): ActionCheckStateDelegatePythonCallable
  }
}

@JsName("ExecuteAction__PythonCallable")
public open external class ExecuteActionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExecuteActionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExecuteActionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExecuteActionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExecuteActionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): ExecuteActionPythonCallable

    @JsName("C")
    public fun copy(other: Any): ExecuteActionPythonCallable
  }
}

@JsName("OnContextMenuOpening__PythonCallable")
public open external class OnContextMenuOpeningPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnContextMenuOpeningPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnContextMenuOpeningPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnContextMenuOpeningPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnContextMenuOpeningPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnContextMenuOpeningPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnContextMenuOpeningPythonCallable
  }
}

@JsName("OnExpansionChanged__PythonCallable")
public open external class OnExpansionChangedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnExpansionChangedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnExpansionChangedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnExpansionChangedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnExpansionChangedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnExpansionChangedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnExpansionChangedPythonCallable
  }
}

@JsName("OnGenerateRow__PythonCallable")
public open external class OnGenerateRowPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGenerateRowPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGenerateRowPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGenerateRowPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGenerateRowPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGenerateRowPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGenerateRowPythonCallable
  }
}

@JsName("OnGetChildrenUObject__PythonCallable")
public open external class OnGetChildrenUObjectPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetChildrenUObjectPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetChildrenUObjectPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetChildrenUObjectPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetChildrenUObjectPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetChildrenUObjectPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetChildrenUObjectPythonCallable
  }
}

@JsName("OnGetDefaultValue__PythonCallable")
public open external class OnGetDefaultValuePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetDefaultValuePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetDefaultValuePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetDefaultValuePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetDefaultValuePythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetDefaultValuePythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetDefaultValuePythonCallable
  }
}

@JsName("OnIsReadOnly__PythonCallable")
public open external class OnIsReadOnlyPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnIsReadOnlyPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnIsReadOnlyPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnIsReadOnlyPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnIsReadOnlyPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnIsReadOnlyPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnIsReadOnlyPythonCallable
  }
}

@JsName("OnIsValidText__PythonCallable")
public open external class OnIsValidTextPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnIsValidTextPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnIsValidTextPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnIsValidTextPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnIsValidTextPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnIsValidTextPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnIsValidTextPythonCallable
  }
}

@JsName("JavascriptGetWidgetWithEditingObject__PythonCallable")
public open external class JavascriptGetWidgetWithEditingObjectPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGetWidgetWithEditingObjectPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        JavascriptGetWidgetWithEditingObjectPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGetWidgetWithEditingObjectPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGetWidgetWithEditingObjectPythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptGetWidgetWithEditingObjectPythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptGetWidgetWithEditingObjectPythonCallable
  }
}

@JsName("OnComboBoxOpened__PythonCallable")
public open external class OnComboBoxOpenedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnComboBoxOpenedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnComboBoxOpenedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnComboBoxOpenedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnComboBoxOpenedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnComboBoxOpenedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnComboBoxOpenedPythonCallable
  }
}

@JsName("OnGetContent__PythonCallable")
public open external class OnGetContentPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetContentPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetContentPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetContentPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetContentPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetContentPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetContentPythonCallable
  }
}

@JsName("OnIsOpenChanged__PythonCallable")
public open external class OnIsOpenChangedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnIsOpenChangedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnIsOpenChangedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnIsOpenChangedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnIsOpenChangedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnIsOpenChangedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnIsOpenChangedPythonCallable
  }
}

@JsName("EJavascriptHttpRequestStatus")
public external object JavascriptHttpRequestStatus {
  public var NotStarted: String

  public var Processing: String

  public var Failed: String

  public var Succeeded: String

  @JsName("EJavascriptHttpRequestStatus_MAX")
  public var Max: String
}

public open external class JavascriptHttpRequest(
  outer: UObject,
) : UObject {
  @JsName("OnComplete")
  public open var onComplete: UnrealEngineDelegate<(successful: Boolean) -> Unit>

  @JsName("OnProgress")
  public open var onProgress: UnrealEngineDelegate<(sent: Number, recv: Number) -> Unit>

  @JsName("SetVerb")
  public open fun setVerb(verb: String): Unit

  @JsName("SetURL")
  public open fun setUrl(URL: String): Unit

  @JsName("SetHeader")
  public open fun setHeader(headerName: String, headerValue: String): Unit

  @JsName("SetContentWithFiles")
  public open fun setContentWithFiles(
    filePaths: Array<String>,
    boundary: String,
    content: String,
  ): Unit

  @JsName("SetContentFromMemory")
  public open fun setContentFromMemory(): Unit

  @JsName("SetContentAsString")
  public open fun setContentAsString(contentString: String): Unit

  @JsName("ProcessRequest")
  public open fun processRequest(): Boolean

  @JsName("GetVerb")
  public open fun getVerb(): String

  @JsName("GetStatus")
  public open fun getStatus(): String

  @JsName("GetResponseCode")
  public open fun getResponseCode(): Number

  @JsName("GetElapsedTime")
  public open fun getElapsedTime(): Number

  @JsName("GetContentToMemory")
  public open fun getContentToMemory(): Unit

  @JsName("GetContentLength")
  public open fun getContentLength(): Number

  @JsName("GetContentAsString")
  public open fun getContentAsString(): String

  @JsName("CancelRequest")
  public open fun cancelRequest(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptHttpRequest

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptHttpRequest

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptHttpRequest

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptHttpRequest

    @JsName("C")
    public fun copy(other: UObject): JavascriptHttpRequest

    @JsName("C")
    public fun copy(other: Any): JavascriptHttpRequest
  }
}

@JsName("JavascriptHttpRequestCompleteDelegate__PythonCallable")
public open external class JavascriptHttpRequestCompleteDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptHttpRequestCompleteDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        JavascriptHttpRequestCompleteDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptHttpRequestCompleteDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptHttpRequestCompleteDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptHttpRequestCompleteDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptHttpRequestCompleteDelegatePythonCallable
  }
}

@JsName("JavascriptHttpRequestProgressDelegate__PythonCallable")
public open external class JavascriptHttpRequestProgressDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptHttpRequestProgressDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        JavascriptHttpRequestProgressDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptHttpRequestProgressDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptHttpRequestProgressDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptHttpRequestProgressDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptHttpRequestProgressDelegatePythonCallable
  }
}

public open external class JavascriptWebSocket(
  outer: UObject,
) : UObject {
  @JsName("OnReceived")
  public open var onReceived: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnConnected")
  public open var onConnected: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnError")
  public open var onError: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("Tick")
  public open fun tick(): Unit

  @JsName("SendMemory")
  public open fun sendMemory(numBytes: Number): Unit

  @JsName("RemoteEndPoint")
  public open fun remoteEndPoint(appendPort: Boolean): String

  @JsName("LocalEndPoint")
  public open fun localEndPoint(appendPort: Boolean): String

  @JsName("GetReceivedBytes")
  public open fun getReceivedBytes(): Number

  @JsName("Flush")
  public open fun flush(): Unit

  @JsName("Dispose")
  public open fun dispose(): Unit

  @JsName("CopyBuffer")
  public open fun copyBuffer(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptWebSocket

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptWebSocket

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptWebSocket

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptWebSocket

    @JsName("Connect")
    public fun connect(endpoint: String): JavascriptWebSocket

    @JsName("C")
    public fun copy(other: UObject): JavascriptWebSocket

    @JsName("C")
    public fun copy(other: Any): JavascriptWebSocket
  }
}

public open external class JavascriptWebSocketServer(
  outer: UObject,
) : UObject {
  @JsName("OnConnected")
  public open var onConnected:
      UnrealEngineMulticastDelegate<(WebSocket: JavascriptWebSocket) -> Unit>

  @JsName("Connections")
  public open var connections: Array<JavascriptWebSocket>

  @JsName("Tick")
  public open fun tick(): Unit

  @JsName("Info")
  public open fun info(): String

  @JsName("Dispose")
  public open fun dispose(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptWebSocketServer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptWebSocketServer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptWebSocketServer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptWebSocketServer

    @JsName("Create")
    public fun create(port: Number): JavascriptWebSocketServer

    @JsName("C")
    public fun copy(other: UObject): JavascriptWebSocketServer

    @JsName("C")
    public fun copy(other: Any): JavascriptWebSocketServer
  }
}

@JsName("OnWebSocketServerDelegate__PythonCallable")
public open external class OnWebSocketServerDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnWebSocketServerDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnWebSocketServerDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnWebSocketServerDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnWebSocketServerDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnWebSocketServerDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): OnWebSocketServerDelegatePythonCallable
  }
}

@JsName("OnWebSocketDelegate__PythonCallable")
public open external class OnWebSocketDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnWebSocketDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnWebSocketDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnWebSocketDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnWebSocketDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnWebSocketDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): OnWebSocketDelegatePythonCallable
  }
}

public open external class TcpMessagingSettings(
  outer: UObject,
) : UObject {
  @JsName("EnableTransport")
  public open var enableTransport: Boolean

  @JsName("ListenEndpoint")
  public open var listenEndpoint: String

  @JsName("ConnectToEndpoints")
  public open var connectToEndpoints: Array<String>

  @JsName("ConnectionRetryDelay")
  public open var connectionRetryDelay: Number

  @JsName("bStopServiceWhenAppDeactivates")
  public open var stopServiceWhenAppDeactivates: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TcpMessagingSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TcpMessagingSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TcpMessagingSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TcpMessagingSettings

    @JsName("C")
    public fun copy(other: UObject): TcpMessagingSettings

    @JsName("C")
    public fun copy(other: Any): TcpMessagingSettings
  }
}

@JsName("EUdpMessageFormat")
public external object UdpMessageFormat {
  public var None: String

  public var Json: String

  public var TaggedProperty: String

  public var CborPlatformEndianness: String

  public var CborStandardEndianness: String

  @JsName("EUdpMessageFormat_MAX")
  public var Max: String
}

public open external class UdpMessagingSettings(
  outer: UObject,
) : UObject {
  @JsName("EnabledByDefault")
  public open var enabledByDefault: Boolean

  @JsName("EnableTransport")
  public open var enableTransport: Boolean

  @JsName("bAutoRepair")
  public open var autoRepair: Boolean

  @JsName("MaxSendRate")
  public open var maxSendRate: Number

  @JsName("AutoRepairAttemptLimit")
  public open var autoRepairAttemptLimit: Any

  @JsName("bStopServiceWhenAppDeactivates")
  public open var stopServiceWhenAppDeactivates: Boolean

  @JsName("UnicastEndpoint")
  public open var unicastEndpoint: String

  @JsName("MulticastEndpoint")
  public open var multicastEndpoint: String

  @JsName("MessageFormat")
  public open var messageFormat: String

  @JsName("MulticastTimeToLive")
  public open var multicastTimeToLive: Number

  @JsName("StaticEndpoints")
  public open var staticEndpoints: Array<String>

  @JsName("EnableTunnel")
  public open var enableTunnel: Boolean

  @JsName("TunnelUnicastEndpoint")
  public open var tunnelUnicastEndpoint: String

  @JsName("TunnelMulticastEndpoint")
  public open var tunnelMulticastEndpoint: String

  @JsName("RemoteTunnelEndpoints")
  public open var remoteTunnelEndpoints: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UdpMessagingSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UdpMessagingSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UdpMessagingSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UdpMessagingSettings

    @JsName("C")
    public fun copy(other: UObject): UdpMessagingSettings

    @JsName("C")
    public fun copy(other: Any): UdpMessagingSettings
  }
}

@JsName("EActorSequenceObjectReferenceType")
public external object ActorSequenceObjectReferenceType {
  public var ContextActor: String

  public var ExternalActor: String

  public var Component: String

  @JsName("EActorSequenceObjectReferenceType_MAX")
  public var Max: String
}

public open external class ActorSequenceObjectReference {
  @JsName("Type")
  public open var type: String

  @JsName("ActorId")
  public open var actorId: Guid

  @JsName("PathToComponent")
  public open var pathToComponent: String

  public open fun clone(): ActorSequenceObjectReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorSequenceObjectReference

    @JsName("C")
    public fun copy(other: Any): ActorSequenceObjectReference
  }
}

public open external class ActorSequenceObjectReferences {
  @JsName("Array")
  public open var array: Array<ActorSequenceObjectReference>

  public open fun clone(): ActorSequenceObjectReferences

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorSequenceObjectReferences

    @JsName("C")
    public fun copy(other: Any): ActorSequenceObjectReferences
  }
}

public open external class ActorSequenceObjectReferenceMap {
  @JsName("BindingIds")
  public open var bindingIds: Array<Guid>

  @JsName("References")
  public open var references: Array<ActorSequenceObjectReferences>

  public open fun clone(): ActorSequenceObjectReferenceMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorSequenceObjectReferenceMap

    @JsName("C")
    public fun copy(other: Any): ActorSequenceObjectReferenceMap
  }
}

public open external class ActorSequence(
  outer: UObject,
) : MovieSceneSequence {
  @JsName("MovieScene")
  public open var movieScene: MovieScene

  @JsName("ObjectReferences")
  public open var objectReferences: ActorSequenceObjectReferenceMap

  @JsName("bHasBeenInitialized")
  public open var hasBeenInitialized: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorSequence

    @JsName("C")
    public fun copy(other: UObject): ActorSequence

    @JsName("C")
    public fun copy(other: Any): ActorSequence
  }
}

public open external class ActorSequencePlayer(
  outer: UObject,
) : MovieSceneSequencePlayer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorSequencePlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorSequencePlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorSequencePlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorSequencePlayer

    @JsName("C")
    public fun copy(other: UObject): ActorSequencePlayer

    @JsName("C")
    public fun copy(other: Any): ActorSequencePlayer
  }
}

public open external class ActorSequenceComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("PlaybackSettings")
  public open var playbackSettings: MovieSceneSequencePlaybackSettings

  @JsName("Sequence")
  public open var sequence: ActorSequence

  @JsName("SequencePlayer")
  public open var sequencePlayer: ActorSequencePlayer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorSequenceComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorSequenceComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorSequenceComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorSequenceComponent

    @JsName("C")
    public fun copy(other: UObject): ActorSequenceComponent

    @JsName("C")
    public fun copy(other: Any): ActorSequenceComponent
  }
}

public open external class AudioAnalyzerAssetBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioAnalyzerAssetBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioAnalyzerAssetBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioAnalyzerAssetBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioAnalyzerAssetBase

    @JsName("C")
    public fun copy(other: UObject): AudioAnalyzerAssetBase

    @JsName("C")
    public fun copy(other: Any): AudioAnalyzerAssetBase
  }
}

public open external class AudioAnalyzerSettings(
  outer: UObject,
) : AudioAnalyzerAssetBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioAnalyzerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioAnalyzerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioAnalyzerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioAnalyzerSettings

    @JsName("C")
    public fun copy(other: UObject): AudioAnalyzerSettings

    @JsName("C")
    public fun copy(other: Any): AudioAnalyzerSettings
  }
}

public open external class AudioAnalyzerSubsystem(
  outer: UObject,
) : EngineSubsystem {
  @JsName("AudioAnalyzers")
  public open var audioAnalyzers: Array<AudioAnalyzer>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioAnalyzerSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioAnalyzerSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioAnalyzerSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioAnalyzerSubsystem

    @JsName("C")
    public fun copy(other: UObject): AudioAnalyzerSubsystem

    @JsName("C")
    public fun copy(other: Any): AudioAnalyzerSubsystem
  }
}

public open external class AudioAnalyzer(
  outer: UObject,
) : UObject {
  @JsName("AudioBus")
  public open var audioBus: AudioBus

  @JsName("AudioAnalyzerSubsystem")
  public open var audioAnalyzerSubsystem: AudioAnalyzerSubsystem

  @JsName("StopAnalyzing")
  public open fun stopAnalyzing(worldContextObject: UObject): Unit

  @JsName("StartAnalyzing")
  public open fun startAnalyzing(worldContextObject: UObject, audioBusToAnalyze: AudioBus): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioAnalyzer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioAnalyzer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioAnalyzer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioAnalyzer

    @JsName("C")
    public fun copy(other: UObject): AudioAnalyzer

    @JsName("C")
    public fun copy(other: Any): AudioAnalyzer
  }
}

@JsName("AudioAnalyzerNRTSettings")
public open external class AudioAnalyzerNrtSettings(
  outer: UObject,
) : AudioAnalyzerAssetBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioAnalyzerNrtSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioAnalyzerNrtSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioAnalyzerNrtSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioAnalyzerNrtSettings

    @JsName("C")
    public fun copy(other: UObject): AudioAnalyzerNrtSettings

    @JsName("C")
    public fun copy(other: Any): AudioAnalyzerNrtSettings
  }
}

@JsName("AudioAnalyzerNRT")
public open external class AudioAnalyzerNrt(
  outer: UObject,
) : AudioAnalyzerAssetBase {
  @JsName("Sound")
  public open var sound: SoundWave

  @JsName("DurationInSeconds")
  public open var durationInSeconds: Number

  @JsName("AnalyzeAudio")
  public open fun analyzeAudio(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioAnalyzerNrt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioAnalyzerNrt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioAnalyzerNrt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioAnalyzerNrt

    @JsName("C")
    public fun copy(other: UObject): AudioAnalyzerNrt

    @JsName("C")
    public fun copy(other: Any): AudioAnalyzerNrt
  }
}

public open external class AudioSynesthesiaSettings(
  outer: UObject,
) : AudioAnalyzerSettings {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioSynesthesiaSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioSynesthesiaSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioSynesthesiaSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioSynesthesiaSettings

    @JsName("C")
    public fun copy(other: UObject): AudioSynesthesiaSettings

    @JsName("C")
    public fun copy(other: Any): AudioSynesthesiaSettings
  }
}

@JsName("AudioSynesthesiaNRTSettings")
public open external class AudioSynesthesiaNrtSettings(
  outer: UObject,
) : AudioAnalyzerNrtSettings {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioSynesthesiaNrtSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioSynesthesiaNrtSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioSynesthesiaNrtSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioSynesthesiaNrtSettings

    @JsName("C")
    public fun copy(other: UObject): AudioSynesthesiaNrtSettings

    @JsName("C")
    public fun copy(other: Any): AudioSynesthesiaNrtSettings
  }
}

@JsName("AudioSynesthesiaNRT")
public open external class AudioSynesthesiaNrt(
  outer: UObject,
) : AudioAnalyzerNrt {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioSynesthesiaNrt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioSynesthesiaNrt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioSynesthesiaNrt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioSynesthesiaNrt

    @JsName("C")
    public fun copy(other: UObject): AudioSynesthesiaNrt

    @JsName("C")
    public fun copy(other: Any): AudioSynesthesiaNrt
  }
}

@JsName("EConstantQFFTSizeEnum")
public external object ConstantQFFTSizeEnum {
  public var Min: String

  @JsName("XXSmall")
  public var XxSmall: String

  public var XSmall: String

  public var Small: String

  public var Medium: String

  public var Large: String

  public var XLarge: String

  @JsName("XXLarge")
  public var XxLarge: String

  public var Max: String

  @JsName("EConstantQFFTSizeEnum_MAX")
  public var _Max: String
}

@JsName("EConstantQNormalizationEnum")
public external object ConstantQNormalizationEnum {
  @JsName("EqualEuclideanNorm")
  public var EuclideanNorm: String

  @JsName("EqualEnergy")
  public var Energy: String

  @JsName("EqualAmplitude")
  public var Amplitude: String

  @JsName("EConstantQNormalizationEnum_MAX")
  public var Max: String
}

@JsName("ConstantQNRTSettings")
public open external class ConstantQnrtSettings(
  outer: UObject,
) : AudioSynesthesiaNrtSettings {
  @JsName("StartingFrequency")
  public open var startingFrequency: Number

  @JsName("NumBands")
  public open var numBands: Number

  @JsName("NumBandsPerOctave")
  public open var numBandsPerOctave: Number

  @JsName("AnalysisPeriod")
  public open var analysisPeriod: Number

  @JsName("bDownmixToMono")
  public open var downmixToMono: Boolean

  @JsName("FFTSize")
  public open var fftSize: String

  @JsName("WindowType")
  public open var windowType: String

  @JsName("SpectrumType")
  public open var spectrumType: String

  @JsName("BandWidthStretch")
  public open var bandWidthStretch: Number

  @JsName("CQTNormalization")
  public open var cqtNormalization: String

  @JsName("NoiseFloorDb")
  public open var noiseFloorDb: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConstantQnrtSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConstantQnrtSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConstantQnrtSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConstantQnrtSettings

    @JsName("C")
    public fun copy(other: UObject): ConstantQnrtSettings

    @JsName("C")
    public fun copy(other: Any): ConstantQnrtSettings
  }
}

@JsName("T$430")
public external interface OutConstantQProvider {
  @JsName("OutConstantQ")
  public var outConstantQ: Array<Number>
}

@JsName("ConstantQNRT")
public open external class ConstantQnrt(
  outer: UObject,
) : AudioSynesthesiaNrt {
  @JsName("Settings")
  public open var settings: ConstantQnrtSettings

  @JsName("GetNormalizedChannelConstantQAtTime")
  public open fun getNormalizedChannelConstantQAtTime(
    inSeconds: Number,
    inChannel: Number,
    outConstantQ: Array<Number>,
  ): OutConstantQProvider

  @JsName("GetChannelConstantQAtTime")
  public open fun getChannelConstantQAtTime(
    inSeconds: Number,
    inChannel: Number,
    outConstantQ: Array<Number>,
  ): OutConstantQProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConstantQnrt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConstantQnrt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConstantQnrt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConstantQnrt

    @JsName("C")
    public fun copy(other: UObject): ConstantQnrt

    @JsName("C")
    public fun copy(other: Any): ConstantQnrt
  }
}

@JsName("ELoudnessCurveTypeEnum")
public external object LoudnessCurveTypeEnum {
  @JsName("A")
  public var a: String

  @JsName("B")
  public var b: String

  @JsName("C")
  public var c: String

  @JsName("D")
  public var d: String

  public var None: String

  @JsName("ELoudnessCurveTypeEnum_MAX")
  public var Max: String
}

public open external class LoudnessSettings(
  outer: UObject,
) : AudioSynesthesiaSettings {
  @JsName("AnalysisPeriod")
  public open var analysisPeriod: Number

  @JsName("MinimumFrequency")
  public open var minimumFrequency: Number

  @JsName("MaximumFrequency")
  public open var maximumFrequency: Number

  @JsName("CurveType")
  public open var curveType: String

  @JsName("NoiseFloorDb")
  public open var noiseFloorDb: Number

  @JsName("ExpectedMaxLoudness")
  public open var expectedMaxLoudness: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LoudnessSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LoudnessSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LoudnessSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LoudnessSettings

    @JsName("C")
    public fun copy(other: UObject): LoudnessSettings

    @JsName("C")
    public fun copy(other: Any): LoudnessSettings
  }
}

public open external class LoudnessResults {
  @JsName("Loudness")
  public open var loudness: Number

  @JsName("NormalizedLoudness")
  public open var normalizedLoudness: Number

  @JsName("PerceptualEnergy")
  public open var perceptualEnergy: Number

  @JsName("TimeSeconds")
  public open var timeSeconds: Number

  public open fun clone(): LoudnessResults

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LoudnessResults

    @JsName("C")
    public fun copy(other: Any): LoudnessResults
  }
}

public open external class LoudnessAnalyzer(
  outer: UObject,
) : AudioAnalyzer {
  @JsName("Settings")
  public open var settings: LoudnessSettings

  @JsName("OnOverallLoudnessResults")
  public open var onOverallLoudnessResults:
      UnrealEngineMulticastDelegate<(OverallLoudnessResults: Array<LoudnessResults>) -> Unit>

  @JsName("OnPerChannelLoudnessResults")
  public open var onPerChannelLoudnessResults: UnrealEngineMulticastDelegate<(ChannelIndex: Number,
      LoudnessResults: Array<LoudnessResults>) -> Unit>

  @JsName("OnLatestOverallLoudnessResults")
  public open var onLatestOverallLoudnessResults:
      UnrealEngineMulticastDelegate<(LatestOverallLoudnessResults: LoudnessResults) -> Unit>

  @JsName("OnLatestPerChannelLoudnessResults")
  public open var onLatestPerChannelLoudnessResults:
      UnrealEngineMulticastDelegate<(ChannelIndex: Number,
      LatestLoudnessResults: LoudnessResults) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LoudnessAnalyzer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LoudnessAnalyzer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LoudnessAnalyzer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LoudnessAnalyzer

    @JsName("C")
    public fun copy(other: UObject): LoudnessAnalyzer

    @JsName("C")
    public fun copy(other: Any): LoudnessAnalyzer
  }
}

@JsName("ELoudnessNRTCurveTypeEnum")
public external object LoudnessNRTCurveTypeEnum {
  @JsName("A")
  public var a: String

  @JsName("B")
  public var b: String

  @JsName("C")
  public var c: String

  @JsName("D")
  public var d: String

  public var None: String

  @JsName("ELoudnessNRTCurveTypeEnum_MAX")
  public var Max: String
}

@JsName("LoudnessNRTSettings")
public open external class LoudnessNrtSettings(
  outer: UObject,
) : AudioSynesthesiaNrtSettings {
  @JsName("AnalysisPeriod")
  public open var analysisPeriod: Number

  @JsName("MinimumFrequency")
  public open var minimumFrequency: Number

  @JsName("MaximumFrequency")
  public open var maximumFrequency: Number

  @JsName("CurveType")
  public open var curveType: String

  @JsName("NoiseFloorDb")
  public open var noiseFloorDb: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LoudnessNrtSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LoudnessNrtSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LoudnessNrtSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LoudnessNrtSettings

    @JsName("C")
    public fun copy(other: UObject): LoudnessNrtSettings

    @JsName("C")
    public fun copy(other: Any): LoudnessNrtSettings
  }
}

@JsName("T$432")
public external interface OutLoudnessProvider {
  @JsName("OutLoudness")
  public var outLoudness: Number
}

@JsName("LoudnessNRT")
public open external class LoudnessNrt(
  outer: UObject,
) : AudioSynesthesiaNrt {
  @JsName("Settings")
  public open var settings: LoudnessNrtSettings

  @JsName("GetNormalizedLoudnessAtTime")
  public open fun getNormalizedLoudnessAtTime(inSeconds: Number, outLoudness: Number):
      OutLoudnessProvider

  @JsName("GetNormalizedChannelLoudnessAtTime")
  public open fun getNormalizedChannelLoudnessAtTime(
    inSeconds: Number,
    inChannel: Number,
    outLoudness: Number,
  ): OutLoudnessProvider

  @JsName("GetLoudnessAtTime")
  public open fun getLoudnessAtTime(inSeconds: Number, outLoudness: Number): OutLoudnessProvider

  @JsName("GetChannelLoudnessAtTime")
  public open fun getChannelLoudnessAtTime(
    inSeconds: Number,
    inChannel: Number,
    outLoudness: Number,
  ): OutLoudnessProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LoudnessNrt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LoudnessNrt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LoudnessNrt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LoudnessNrt

    @JsName("C")
    public fun copy(other: UObject): LoudnessNrt

    @JsName("C")
    public fun copy(other: Any): LoudnessNrt
  }
}

@JsName("EMeterPeakType")
public external object MeterPeakType {
  public var MeanSquared: String

  public var RootMeanSquared: String

  public var Peak: String

  public var Count: String

  @JsName("EMeterPeakType_MAX")
  public var Max: String
}

public open external class MeterSettings(
  outer: UObject,
) : AudioSynesthesiaSettings {
  @JsName("AnalysisPeriod")
  public open var analysisPeriod: Number

  @JsName("PeakMode")
  public open var peakMode: String

  @JsName("MeterAttackTime")
  public open var meterAttackTime: Number

  @JsName("MeterReleaseTime")
  public open var meterReleaseTime: Number

  @JsName("PeakHoldTime")
  public open var peakHoldTime: Number

  @JsName("ClippingThreshold")
  public open var clippingThreshold: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeterSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeterSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeterSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeterSettings

    @JsName("C")
    public fun copy(other: UObject): MeterSettings

    @JsName("C")
    public fun copy(other: Any): MeterSettings
  }
}

public open external class MeterResults {
  @JsName("TimeSeconds")
  public open var timeSeconds: Number

  @JsName("MeterValue")
  public open var meterValue: Number

  @JsName("PeakValue")
  public open var peakValue: Number

  @JsName("NumSamplesClipping")
  public open var numSamplesClipping: Number

  @JsName("ClippingValue")
  public open var clippingValue: Number

  public open fun clone(): MeterResults

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeterResults

    @JsName("C")
    public fun copy(other: Any): MeterResults
  }
}

public open external class MeterAnalyzer(
  outer: UObject,
) : AudioAnalyzer {
  @JsName("Settings")
  public open var settings: MeterSettings

  @JsName("OnOverallMeterResults")
  public open var onOverallMeterResults:
      UnrealEngineMulticastDelegate<(MeterResults: Array<MeterResults>) -> Unit>

  @JsName("OnPerChannelMeterResults")
  public open var onPerChannelMeterResults: UnrealEngineMulticastDelegate<(ChannelIndex: Number,
      MeterResults: Array<MeterResults>) -> Unit>

  @JsName("OnLatestOverallMeterResults")
  public open var onLatestOverallMeterResults:
      UnrealEngineMulticastDelegate<(LatestOverallMeterResults: MeterResults) -> Unit>

  @JsName("OnLatestPerChannelMeterResults")
  public open var onLatestPerChannelMeterResults:
      UnrealEngineMulticastDelegate<(ChannelIndex: Number,
      LatestMeterResults: MeterResults) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeterAnalyzer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeterAnalyzer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeterAnalyzer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeterAnalyzer

    @JsName("C")
    public fun copy(other: UObject): MeterAnalyzer

    @JsName("C")
    public fun copy(other: Any): MeterAnalyzer
  }
}

@JsName("OnsetNRTSettings")
public open external class OnsetNrtSettings(
  outer: UObject,
) : AudioSynesthesiaNrtSettings {
  @JsName("bDownmixToMono")
  public open var downmixToMono: Boolean

  @JsName("GranularityInSeconds")
  public open var granularityInSeconds: Number

  @JsName("Sensitivity")
  public open var sensitivity: Number

  @JsName("MinimumFrequency")
  public open var minimumFrequency: Number

  @JsName("MaximumFrequency")
  public open var maximumFrequency: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnsetNrtSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnsetNrtSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnsetNrtSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnsetNrtSettings

    @JsName("C")
    public fun copy(other: UObject): OnsetNrtSettings

    @JsName("C")
    public fun copy(other: Any): OnsetNrtSettings
  }
}

@JsName("T$433")
public external interface Object433 {
  @JsName("OutOnsetTimestamps")
  public var outOnsetTimestamps: Array<Number>

  @JsName("OutOnsetStrengths")
  public var outOnsetStrengths: Array<Number>
}

@JsName("OnsetNRT")
public open external class OnsetNrt(
  outer: UObject,
) : AudioSynesthesiaNrt {
  @JsName("Settings")
  public open var settings: OnsetNrtSettings

  @JsName("GetNormalizedChannelOnsetsBetweenTimes")
  public open fun getNormalizedChannelOnsetsBetweenTimes(
    inStartSeconds: Number,
    inEndSeconds: Number,
    inChannel: Number,
    outOnsetTimestamps: Array<Number>,
    outOnsetStrengths: Array<Number>,
  ): Object433

  @JsName("GetChannelOnsetsBetweenTimes")
  public open fun getChannelOnsetsBetweenTimes(
    inStartSeconds: Number,
    inEndSeconds: Number,
    inChannel: Number,
    outOnsetTimestamps: Array<Number>,
    outOnsetStrengths: Array<Number>,
  ): Object433

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnsetNrt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnsetNrt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnsetNrt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnsetNrt

    @JsName("C")
    public fun copy(other: UObject): OnsetNrt

    @JsName("C")
    public fun copy(other: Any): OnsetNrt
  }
}

@JsName("OnLatestOverallLoudnessResults__PythonCallable")
public open external class OnLatestOverallLoudnessResultsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnLatestOverallLoudnessResultsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnLatestOverallLoudnessResultsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnLatestOverallLoudnessResultsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnLatestOverallLoudnessResultsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnLatestOverallLoudnessResultsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnLatestOverallLoudnessResultsPythonCallable
  }
}

@JsName("OnLatestOverallMeterResults__PythonCallable")
public open external class OnLatestOverallMeterResultsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnLatestOverallMeterResultsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnLatestOverallMeterResultsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnLatestOverallMeterResultsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnLatestOverallMeterResultsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnLatestOverallMeterResultsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnLatestOverallMeterResultsPythonCallable
  }
}

@JsName("OnLatestPerChannelLoudnessResults__PythonCallable")
public open external class OnLatestPerChannelLoudnessResultsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnLatestPerChannelLoudnessResultsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnLatestPerChannelLoudnessResultsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnLatestPerChannelLoudnessResultsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnLatestPerChannelLoudnessResultsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnLatestPerChannelLoudnessResultsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnLatestPerChannelLoudnessResultsPythonCallable
  }
}

@JsName("OnLatestPerChannelMeterResults__PythonCallable")
public open external class OnLatestPerChannelMeterResultsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnLatestPerChannelMeterResultsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnLatestPerChannelMeterResultsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnLatestPerChannelMeterResultsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnLatestPerChannelMeterResultsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnLatestPerChannelMeterResultsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnLatestPerChannelMeterResultsPythonCallable
  }
}

@JsName("OnOverallLoudnessResults__PythonCallable")
public open external class OnOverallLoudnessResultsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnOverallLoudnessResultsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnOverallLoudnessResultsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnOverallLoudnessResultsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnOverallLoudnessResultsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnOverallLoudnessResultsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnOverallLoudnessResultsPythonCallable
  }
}

@JsName("OnOverallMeterResults__PythonCallable")
public open external class OnOverallMeterResultsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnOverallMeterResultsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnOverallMeterResultsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnOverallMeterResultsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnOverallMeterResultsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnOverallMeterResultsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnOverallMeterResultsPythonCallable
  }
}

@JsName("OnPerChannelLoudnessResults__PythonCallable")
public open external class OnPerChannelLoudnessResultsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnPerChannelLoudnessResultsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnPerChannelLoudnessResultsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnPerChannelLoudnessResultsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnPerChannelLoudnessResultsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnPerChannelLoudnessResultsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnPerChannelLoudnessResultsPythonCallable
  }
}

@JsName("OnPerChannelMeterResults__PythonCallable")
public open external class OnPerChannelMeterResultsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnPerChannelMeterResultsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnPerChannelMeterResultsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnPerChannelMeterResultsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnPerChannelMeterResultsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnPerChannelMeterResultsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnPerChannelMeterResultsPythonCallable
  }
}

@JsName("ELocationAccuracy")
public external object LocationAccuracy {
  @JsName("LA_ThreeKilometers")
  public var ThreeKilometers: String

  @JsName("LA_OneKilometer")
  public var OneKilometer: String

  @JsName("LA_HundredMeters")
  public var HundredMeters: String

  @JsName("LA_TenMeters")
  public var TenMeters: String

  @JsName("LA_Best")
  public var Best: String

  @JsName("LA_Navigation")
  public var Navigation: String

  @JsName("LA_MAX")
  public var Max: String
}

public open external class LocationServicesData {
  @JsName("Timestamp")
  public open var timestamp: Number

  @JsName("Longitude")
  public open var longitude: Number

  @JsName("Latitude")
  public open var latitude: Number

  @JsName("HorizontalAccuracy")
  public open var horizontalAccuracy: Number

  @JsName("VerticalAccuracy")
  public open var verticalAccuracy: Number

  @JsName("Altitude")
  public open var altitude: Number

  public open fun clone(): LocationServicesData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LocationServicesData

    @JsName("C")
    public fun copy(other: Any): LocationServicesData

    @JsName("GetLastKnownLocation")
    public fun getLastKnownLocation(): LocationServicesData
  }
}

public open external class LocationServicesImpl(
  outer: UObject,
) : UObject {
  @JsName("OnLocationChanged")
  public open var onLocationChanged:
      UnrealEngineMulticastDelegate<(LocationData: LocationServicesData) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocationServicesImpl

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocationServicesImpl

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocationServicesImpl

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocationServicesImpl

    @JsName("C")
    public fun copy(other: UObject): LocationServicesImpl

    @JsName("C")
    public fun copy(other: Any): LocationServicesImpl
  }
}

public open external class LocationServices(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocationServices

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocationServices

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocationServices

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocationServices

    @JsName("StopLocationServices")
    public fun stopLocationServices(): Boolean

    @JsName("StartLocationServices")
    public fun startLocationServices(): Boolean

    @JsName("IsLocationAccuracyAvailable")
    public fun isLocationAccuracyAvailable(accuracy: String): Boolean

    @JsName("InitLocationServices")
    public fun initLocationServices(
      accuracy: String,
      updateFrequency: Number,
      minDistanceFilter: Number,
    ): Boolean

    @JsName("GetLocationServicesImpl")
    public fun getLocationServicesImpl(): LocationServicesImpl

    @JsName("GetLastKnownLocation")
    public fun getLastKnownLocation(): LocationServicesData

    @JsName("AreLocationServicesEnabled")
    public fun areLocationServicesEnabled(): Boolean

    @JsName("C")
    public fun copy(other: UObject): LocationServices

    @JsName("C")
    public fun copy(other: Any): LocationServices
  }
}

@JsName("LocationServicesData_OnLocationChanged__PythonCallable")
public open external class LocationServicesDataOnLocationChangedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocationServicesDataOnLocationChangedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        LocationServicesDataOnLocationChangedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocationServicesDataOnLocationChangedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocationServicesDataOnLocationChangedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): LocationServicesDataOnLocationChangedPythonCallable

    @JsName("C")
    public fun copy(other: Any): LocationServicesDataOnLocationChangedPythonCallable
  }
}

public open external class AmbisonicsEncodingSettings(
  outer: UObject,
) : SoundfieldEncodingSettingsBase {
  @JsName("AmbisonicsOrder")
  public open var ambisonicsOrder: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AmbisonicsEncodingSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AmbisonicsEncodingSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AmbisonicsEncodingSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AmbisonicsEncodingSettings

    @JsName("C")
    public fun copy(other: UObject): AmbisonicsEncodingSettings

    @JsName("C")
    public fun copy(other: Any): AmbisonicsEncodingSettings
  }
}

public open external class KotlinAsset {
  @JsName("Name")
  public open var name: String

  @JsName("Asset")
  public open var asset: SoftObjectPath

  public open fun clone(): KotlinAsset

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KotlinAsset

    @JsName("C")
    public fun copy(other: Any): KotlinAsset
  }
}

public open external class KotlinClassAsset {
  @JsName("Name")
  public open var name: String

  @JsName("Class")
  public open var `class`: UnrealEngineClass

  public open fun clone(): KotlinClassAsset

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KotlinClassAsset

    @JsName("C")
    public fun copy(other: Any): KotlinClassAsset
  }
}

@JsName("KotlinObject")
public open external class InternalKotlinObject(
  outer: UObject,
) : UObject {
  @JsName("Root")
  public open var root: ActorComponent

  @JsName("Tick")
  public open fun tick(deltaTime: Number): Unit

  @JsName("OnDestroyed")
  public open fun onDestroyed(): Unit

  @JsName("EndOverlap")
  public open fun endOverlap(other: Actor): String

  @JsName("BeginOverlap")
  public open fun beginOverlap(other: Actor): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InternalKotlinObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InternalKotlinObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InternalKotlinObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InternalKotlinObject

    @JsName("C")
    public fun copy(other: UObject): InternalKotlinObject

    @JsName("C")
    public fun copy(other: Any): InternalKotlinObject
  }
}

public open external class KotlinComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("KotlinClass")
  public open var kotlinClass: String

  @JsName("Assets")
  public open var assets: Array<KotlinAsset>

  @JsName("ClassAssets")
  public open var classAssets: Array<KotlinClassAsset>

  @JsName("JavascriptContext")
  public open var javascriptContext: JavascriptContext

  @JsName("KotlinObject")
  public open var kotlinObject: InternalKotlinObject

  @JsName("Spawn")
  public open fun spawn(
    classF: UnrealEngineClass,
    location: Vector,
    rotation: Rotator,
  ): Actor

  @JsName("SetKotlinObject")
  public open fun setKotlinObject(kotlinObject: InternalKotlinObject): Unit

  @JsName("ResolveClass")
  public open fun resolveClass(name: String): UnrealEngineClass

  @JsName("ResolveAsset")
  public open fun resolveAsset(name: String, tryLoad: Boolean): UObject

  @JsName("OnTick")
  public open fun onTick(deltaTime: Number): Unit

  @JsName("OnDestroyed")
  public open fun onDestroyed(): Unit

  @JsName("LoadKotlinObject")
  public open fun loadKotlinObject(): Unit

  @JsName("GetKotlinObject")
  public open fun getKotlinObject(): InternalKotlinObject

  @JsName("EndOverlap")
  public open fun endOverlap(other: Actor): Unit

  @JsName("BeginOverlap")
  public open fun beginOverlap(other: Actor): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KotlinComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KotlinComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KotlinComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KotlinComponent

    @JsName("C")
    public fun copy(other: UObject): KotlinComponent

    @JsName("C")
    public fun copy(other: Any): KotlinComponent
  }
}

public open external class KotlinGameInstance(
  outer: UObject,
) : GameInstance {
  @JsName("OnTick")
  public open var onTick: UnrealEngineDelegate<(DeltaSeconds: Number) -> Unit>

  @JsName("Isolate")
  public open var isolate: JavascriptIsolate

  @JsName("JavascriptContext")
  public open var javascriptContext: JavascriptContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KotlinGameInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KotlinGameInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KotlinGameInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KotlinGameInstance

    @JsName("C")
    public fun copy(other: UObject): KotlinGameInstance

    @JsName("C")
    public fun copy(other: Any): KotlinGameInstance
  }
}

public open external class MeshPaintingSubsystem(
  outer: UObject,
) : EngineSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshPaintingSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshPaintingSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshPaintingSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshPaintingSubsystem

    @JsName("C")
    public fun copy(other: UObject): MeshPaintingSubsystem

    @JsName("C")
    public fun copy(other: Any): MeshPaintingSubsystem
  }
}

public open external class MeshPaintSelectionInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshPaintSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshPaintSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshPaintSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshPaintSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): MeshPaintSelectionInterface

    @JsName("C")
    public fun copy(other: Any): MeshPaintSelectionInterface
  }
}

public open external class MeshPaintSelectionMechanic(
  outer: UObject,
) : InteractionMechanic {
  @JsName("CachedClickedComponents")
  public open var cachedClickedComponents: Array<MeshComponent>

  @JsName("CachedClickedActors")
  public open var cachedClickedActors: Array<Actor>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshPaintSelectionMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshPaintSelectionMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshPaintSelectionMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshPaintSelectionMechanic

    @JsName("C")
    public fun copy(other: UObject): MeshPaintSelectionMechanic

    @JsName("C")
    public fun copy(other: Any): MeshPaintSelectionMechanic
  }
}

public open external class VertexAdapterClickToolBuilder(
  outer: UObject,
) : SingleClickToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VertexAdapterClickToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VertexAdapterClickToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VertexAdapterClickToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VertexAdapterClickToolBuilder

    @JsName("C")
    public fun copy(other: UObject): VertexAdapterClickToolBuilder

    @JsName("C")
    public fun copy(other: Any): VertexAdapterClickToolBuilder
  }
}

public open external class TextureAdapterClickToolBuilder(
  outer: UObject,
) : SingleClickToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureAdapterClickToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureAdapterClickToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureAdapterClickToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureAdapterClickToolBuilder

    @JsName("C")
    public fun copy(other: UObject): TextureAdapterClickToolBuilder

    @JsName("C")
    public fun copy(other: Any): TextureAdapterClickToolBuilder
  }
}

public open external class MeshClickTool(
  outer: UObject,
) : SingleClickTool {
  @JsName("SelectionMechanic")
  public open var selectionMechanic: MeshPaintSelectionMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshClickTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshClickTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshClickTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshClickTool

    @JsName("C")
    public fun copy(other: UObject): MeshClickTool

    @JsName("C")
    public fun copy(other: Any): MeshClickTool
  }
}

public open external class VertexAdapterClickTool(
  outer: UObject,
) : MeshClickTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VertexAdapterClickTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VertexAdapterClickTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VertexAdapterClickTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VertexAdapterClickTool

    @JsName("C")
    public fun copy(other: UObject): VertexAdapterClickTool

    @JsName("C")
    public fun copy(other: Any): VertexAdapterClickTool
  }
}

public open external class TextureAdapterClickTool(
  outer: UObject,
) : MeshClickTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureAdapterClickTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureAdapterClickTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureAdapterClickTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureAdapterClickTool

    @JsName("C")
    public fun copy(other: UObject): TextureAdapterClickTool

    @JsName("C")
    public fun copy(other: Any): TextureAdapterClickTool
  }
}

public open external class MeshTexturePaintingToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshTexturePaintingToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshTexturePaintingToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshTexturePaintingToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshTexturePaintingToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshTexturePaintingToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshTexturePaintingToolBuilder
  }
}

public open external class MeshTexturePaintingToolProperties(
  outer: UObject,
) : BrushBaseProperties {
  @JsName("PaintColor")
  public open var paintColor: LinearColor

  @JsName("EraseColor")
  public open var eraseColor: LinearColor

  @JsName("bWriteRed")
  public open var writeRed: Boolean

  @JsName("bWriteGreen")
  public open var writeGreen: Boolean

  @JsName("bWriteBlue")
  public open var writeBlue: Boolean

  @JsName("bWriteAlpha")
  public open var writeAlpha: Boolean

  @JsName("UVChannel")
  public open var uvChannel: Number

  @JsName("bEnableSeamPainting")
  public open var enableSeamPainting: Boolean

  @JsName("PaintTexture")
  public open var paintTexture: Texture2d

  @JsName("bEnableFlow")
  public open var enableFlow: Boolean

  @JsName("bOnlyFrontFacingTriangles")
  public open var onlyFrontFacingTriangles: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshTexturePaintingToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshTexturePaintingToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshTexturePaintingToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshTexturePaintingToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshTexturePaintingToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshTexturePaintingToolProperties
  }
}

public open external class MeshTexturePaintingTool(
  outer: UObject,
) : BaseBrushTool {
  @JsName("SelectionMechanic")
  public open var selectionMechanic: MeshPaintSelectionMechanic

  @JsName("TextureProperties")
  public open var textureProperties: MeshTexturePaintingToolProperties

  @JsName("Textures")
  public open var textures: Array<Texture>

  @JsName("BrushRenderTargetTexture")
  public open var brushRenderTargetTexture: TextureRenderTarget2d

  @JsName("BrushMaskRenderTargetTexture")
  public open var brushMaskRenderTargetTexture: TextureRenderTarget2d

  @JsName("SeamMaskRenderTargetTexture")
  public open var seamMaskRenderTargetTexture: TextureRenderTarget2d

  @JsName("PaintTargetData")
  public open var paintTargetData: Any

  @JsName("TexturePaintingCurrentMeshComponent")
  public open var texturePaintingCurrentMeshComponent: MeshComponent

  @JsName("PaintingTexture2D")
  public open var paintingTexture2d: Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshTexturePaintingTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshTexturePaintingTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshTexturePaintingTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshTexturePaintingTool

    @JsName("C")
    public fun copy(other: UObject): MeshTexturePaintingTool

    @JsName("C")
    public fun copy(other: Any): MeshTexturePaintingTool
  }
}

public open external class MeshColorPaintingToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshColorPaintingToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshColorPaintingToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshColorPaintingToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshColorPaintingToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshColorPaintingToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshColorPaintingToolBuilder
  }
}

public open external class MeshWeightPaintingToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshWeightPaintingToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshWeightPaintingToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshWeightPaintingToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshWeightPaintingToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshWeightPaintingToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshWeightPaintingToolBuilder
  }
}

public open external class MeshVertexPaintingToolProperties(
  outer: UObject,
) : BrushBaseProperties {
  @JsName("PaintColor")
  public open var paintColor: LinearColor

  @JsName("EraseColor")
  public open var eraseColor: LinearColor

  @JsName("bEnableFlow")
  public open var enableFlow: Boolean

  @JsName("bOnlyFrontFacingTriangles")
  public open var onlyFrontFacingTriangles: Boolean

  @JsName("VertexPreviewSize")
  public open var vertexPreviewSize: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshVertexPaintingToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshVertexPaintingToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshVertexPaintingToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshVertexPaintingToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshVertexPaintingToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshVertexPaintingToolProperties
  }
}

public open external class MeshColorPaintingToolProperties(
  outer: UObject,
) : MeshVertexPaintingToolProperties {
  @JsName("bWriteRed")
  public open var writeRed: Boolean

  @JsName("bWriteGreen")
  public open var writeGreen: Boolean

  @JsName("bWriteBlue")
  public open var writeBlue: Boolean

  @JsName("bWriteAlpha")
  public open var writeAlpha: Boolean

  @JsName("bPaintOnSpecificLOD")
  public open var paintOnSpecificLod: Boolean

  @JsName("LODIndex")
  public open var lodIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshColorPaintingToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshColorPaintingToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshColorPaintingToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshColorPaintingToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshColorPaintingToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshColorPaintingToolProperties
  }
}

@JsName("EMeshPaintWeightTypes")
public external object MeshPaintWeightTypes {
  public var AlphaLerp: String

  public var RGB: String

  public var ARGB: String

  @JsName("OneMinusARGB")
  public var OneMinusArgb: String

  @JsName("EMeshPaintWeightTypes_MAX")
  public var Max: String
}

@JsName("EMeshPaintTextureIndex")
public external object MeshPaintTextureIndex {
  @JsName("TextureOne")
  public var One: String

  @JsName("TextureTwo")
  public var Two: String

  @JsName("TextureThree")
  public var Three: String

  @JsName("TextureFour")
  public var Four: String

  @JsName("TextureFive")
  public var Five: String

  @JsName("EMeshPaintTextureIndex_MAX")
  public var Max: String
}

public open external class MeshWeightPaintingToolProperties(
  outer: UObject,
) : MeshVertexPaintingToolProperties {
  @JsName("TextureWeightType")
  public open var textureWeightType: String

  @JsName("PaintTextureWeightIndex")
  public open var paintTextureWeightIndex: String

  @JsName("EraseTextureWeightIndex")
  public open var eraseTextureWeightIndex: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshWeightPaintingToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshWeightPaintingToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshWeightPaintingToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshWeightPaintingToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshWeightPaintingToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshWeightPaintingToolProperties
  }
}

public open external class MeshVertexPaintingTool(
  outer: UObject,
) : BaseBrushTool {
  @JsName("SelectionMechanic")
  public open var selectionMechanic: MeshPaintSelectionMechanic

  @JsName("VertexProperties")
  public open var vertexProperties: MeshVertexPaintingToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshVertexPaintingTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshVertexPaintingTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshVertexPaintingTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshVertexPaintingTool

    @JsName("C")
    public fun copy(other: UObject): MeshVertexPaintingTool

    @JsName("C")
    public fun copy(other: Any): MeshVertexPaintingTool
  }
}

public open external class MeshColorPaintingTool(
  outer: UObject,
) : MeshVertexPaintingTool {
  @JsName("ColorProperties")
  public open var colorProperties: MeshColorPaintingToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshColorPaintingTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshColorPaintingTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshColorPaintingTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshColorPaintingTool

    @JsName("C")
    public fun copy(other: UObject): MeshColorPaintingTool

    @JsName("C")
    public fun copy(other: Any): MeshColorPaintingTool
  }
}

public open external class MeshWeightPaintingTool(
  outer: UObject,
) : MeshVertexPaintingTool {
  @JsName("WeightProperties")
  public open var weightProperties: MeshWeightPaintingToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshWeightPaintingTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshWeightPaintingTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshWeightPaintingTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshWeightPaintingTool

    @JsName("C")
    public fun copy(other: UObject): MeshWeightPaintingTool

    @JsName("C")
    public fun copy(other: Any): MeshWeightPaintingTool
  }
}

public open external class TexturePaintToolset(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TexturePaintToolset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TexturePaintToolset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TexturePaintToolset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TexturePaintToolset

    @JsName("C")
    public fun copy(other: UObject): TexturePaintToolset

    @JsName("C")
    public fun copy(other: Any): TexturePaintToolset
  }
}

public open external class ImportVertexColorOptions(
  outer: UObject,
) : UObject {
  @JsName("UVIndex")
  public open var uvIndex: Number

  @JsName("LODIndex")
  public open var lodIndex: Number

  @JsName("bRed")
  public open var red: Boolean

  @JsName("bBlue")
  public open var blue: Boolean

  @JsName("bGreen")
  public open var green: Boolean

  @JsName("bAlpha")
  public open var alpha: Boolean

  @JsName("bImportToInstance")
  public open var importToInstance: Boolean

  @JsName("bCanImportToInstance")
  public open var canImportToInstance: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImportVertexColorOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImportVertexColorOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImportVertexColorOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImportVertexColorOptions

    @JsName("C")
    public fun copy(other: UObject): ImportVertexColorOptions

    @JsName("C")
    public fun copy(other: Any): ImportVertexColorOptions
  }
}

@JsName("EMeshPaintDataColorViewMode")
public external object MeshPaintDataColorViewMode {
  public var Normal: String

  public var RGB: String

  public var Alpha: String

  public var Red: String

  public var Green: String

  public var Blue: String

  @JsName("EMeshPaintDataColorViewMode_MAX")
  public var Max: String
}

public open external class MeshPaintModeSettings(
  outer: UObject,
) : UObject {
  @JsName("ColorViewMode")
  public open var colorViewMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshPaintModeSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshPaintModeSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshPaintModeSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshPaintModeSettings

    @JsName("C")
    public fun copy(other: UObject): MeshPaintModeSettings

    @JsName("C")
    public fun copy(other: Any): MeshPaintModeSettings
  }
}

public open external class MeshPaintMode(
  outer: UObject,
) : EdMode {
  @JsName("ModeSettings")
  public open var modeSettings: MeshPaintModeSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshPaintMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshPaintMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshPaintMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshPaintMode

    @JsName("C")
    public fun copy(other: UObject): MeshPaintMode

    @JsName("C")
    public fun copy(other: Any): MeshPaintMode
  }
}

public open external class OodleNetworkTrainerCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("bCompressionTest")
  public open var compressionTest: Boolean

  @JsName("bWriteV5Dictionaries")
  public open var writeV5Dictionaries: Boolean

  @JsName("HashTableSize")
  public open var hashTableSize: Number

  @JsName("DictionarySize")
  public open var dictionarySize: Number

  @JsName("DictionaryTrials")
  public open var dictionaryTrials: Number

  @JsName("TrialRandomness")
  public open var trialRandomness: Number

  @JsName("TrialGenerations")
  public open var trialGenerations: Number

  @JsName("bNoTrials")
  public open var noTrials: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OodleNetworkTrainerCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OodleNetworkTrainerCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OodleNetworkTrainerCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OodleNetworkTrainerCommandlet

    @JsName("C")
    public fun copy(other: UObject): OodleNetworkTrainerCommandlet

    @JsName("C")
    public fun copy(other: Any): OodleNetworkTrainerCommandlet
  }
}

public open external class AnimationSharingSetupFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationSharingSetupFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationSharingSetupFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationSharingSetupFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationSharingSetupFactory

    @JsName("C")
    public fun copy(other: UObject): AnimationSharingSetupFactory

    @JsName("C")
    public fun copy(other: Any): AnimationSharingSetupFactory
  }
}

public open external class MyPluginStruct {
  @JsName("TestString")
  public open var testString: String

  public open fun clone(): MyPluginStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MyPluginStruct

    @JsName("C")
    public fun copy(other: Any): MyPluginStruct
  }
}

public open external class MyPluginObject(
  outer: UObject,
) : UObject {
  @JsName("MyStruct")
  public open var myStruct: MyPluginStruct

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MyPluginObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MyPluginObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MyPluginObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MyPluginObject

    @JsName("C")
    public fun copy(other: UObject): MyPluginObject

    @JsName("C")
    public fun copy(other: Any): MyPluginObject
  }
}

@JsName("EMeshPaintColorViewMode")
public external object MeshPaintColorViewMode {
  public var Normal: String

  public var RGB: String

  public var Alpha: String

  public var Red: String

  public var Green: String

  public var Blue: String

  @JsName("EMeshPaintColorViewMode_MAX")
  public var Max: String
}

public open external class PaintBrushSettings(
  outer: UObject,
) : UObject {
  @JsName("BrushRadius")
  public open var brushRadius: Number

  @JsName("BrushStrength")
  public open var brushStrength: Number

  @JsName("BrushFalloffAmount")
  public open var brushFalloffAmount: Number

  @JsName("bEnableFlow")
  public open var enableFlow: Boolean

  @JsName("bOnlyFrontFacingTriangles")
  public open var onlyFrontFacingTriangles: Boolean

  @JsName("ColorViewMode")
  public open var colorViewMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaintBrushSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaintBrushSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaintBrushSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaintBrushSettings

    @JsName("C")
    public fun copy(other: UObject): PaintBrushSettings

    @JsName("C")
    public fun copy(other: Any): PaintBrushSettings
  }
}

public open external class MeshPaintSettings(
  outer: UObject,
) : UObject {
  @JsName("VertexPreviewSize")
  public open var vertexPreviewSize: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshPaintSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshPaintSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshPaintSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshPaintSettings

    @JsName("C")
    public fun copy(other: UObject): MeshPaintSettings

    @JsName("C")
    public fun copy(other: Any): MeshPaintSettings
  }
}

public open external class VertexColorImportOptions(
  outer: UObject,
) : UObject {
  @JsName("UVIndex")
  public open var uvIndex: Number

  @JsName("LODIndex")
  public open var lodIndex: Number

  @JsName("bRed")
  public open var red: Boolean

  @JsName("bBlue")
  public open var blue: Boolean

  @JsName("bGreen")
  public open var green: Boolean

  @JsName("bAlpha")
  public open var alpha: Boolean

  @JsName("bImportToInstance")
  public open var importToInstance: Boolean

  @JsName("bCanImportToInstance")
  public open var canImportToInstance: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VertexColorImportOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VertexColorImportOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VertexColorImportOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VertexColorImportOptions

    @JsName("C")
    public fun copy(other: UObject): VertexColorImportOptions

    @JsName("C")
    public fun copy(other: Any): VertexColorImportOptions
  }
}

@JsName("ETutorialContent")
public external object TutorialContentEnum {
  public var None: String

  public var Text: String

  @JsName("UDNExcerpt")
  public var UdnExcerpt: String

  public var RichText: String

  @JsName("ETutorialContent_MAX")
  public var Max: String
}

public open external class TutorialContent {
  @JsName("Type")
  public open var type: String

  @JsName("Content")
  public open var content: String

  @JsName("ExcerptName")
  public open var excerptName: String

  public open var text: String

  public open fun clone(): TutorialContent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TutorialContent

    @JsName("C")
    public fun copy(other: Any): TutorialContent
  }
}

@JsName("ETutorialAnchorIdentifier")
public external object TutorialAnchorIdentifier {
  public var None: String

  public var NamedWidget: String

  public var Asset: String

  @JsName("ETutorialAnchorIdentifier_MAX")
  public var Max: String
}

public open external class TutorialContentAnchor {
  @JsName("Type")
  public open var type: String

  @JsName("WrapperIdentifier")
  public open var wrapperIdentifier: String

  @JsName("Asset")
  public open var asset: SoftObjectPath

  @JsName("bDrawHighlight")
  public open var drawHighlight: Boolean

  @JsName("TabToFocusOrOpen")
  public open var tabToFocusOrOpen: String

  @JsName("FriendlyName")
  public open var friendlyName: String

  @JsName("GuidString")
  public open var guidString: String

  @JsName("OuterName")
  public open var outerName: String

  public open fun clone(): TutorialContentAnchor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TutorialContentAnchor

    @JsName("C")
    public fun copy(other: Any): TutorialContentAnchor
  }
}

public open external class TutorialWidgetContent {
  @JsName("Content")
  public open var content: TutorialContent

  @JsName("WidgetAnchor")
  public open var widgetAnchor: TutorialContentAnchor

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("Offset")
  public open var offset: Vector2d

  @JsName("ContentWidth")
  public open var contentWidth: Number

  @JsName("bAutoFocus")
  public open var autoFocus: Boolean

  public open fun clone(): TutorialWidgetContent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TutorialWidgetContent

    @JsName("C")
    public fun copy(other: Any): TutorialWidgetContent
  }
}

public open external class TutorialStage {
  @JsName("Name")
  public open var name: String

  @JsName("Content")
  public open var content: TutorialContent

  @JsName("WidgetContent")
  public open var widgetContent: Array<TutorialWidgetContent>

  @JsName("NextButtonText")
  public open var nextButtonText: String

  @JsName("BackButtonText")
  public open var backButtonText: String

  @JsName("PlatformsToTest")
  public open var platformsToTest: Array<String>

  @JsName("bInvertPlatformTest")
  public open var invertPlatformTest: Boolean

  public open fun clone(): TutorialStage

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TutorialStage

    @JsName("C")
    public fun copy(other: Any): TutorialStage
  }
}

public open external class EditorTutorial(
  outer: UObject,
) : UObject {
  @JsName("Title")
  public open var title: String

  @JsName("SortOrder")
  public open var sortOrder: Number

  @JsName("Icon")
  public open var icon: String

  @JsName("Texture")
  public open var texture: Texture2d

  @JsName("Category")
  public open var category: String

  @JsName("SummaryContent")
  public open var summaryContent: TutorialContent

  @JsName("Stages")
  public open var stages: Array<TutorialStage>

  @JsName("PreviousTutorial")
  public open var previousTutorial: SoftClassPath

  @JsName("NextTutorial")
  public open var nextTutorial: SoftClassPath

  @JsName("bIsStandalone")
  public open var isStandalone: Boolean

  @JsName("AssetToUse")
  public open var assetToUse: SoftObjectPath

  @JsName("ImportPath")
  public open var importPath: String

  @JsName("bHideInBrowser")
  public open var hideInBrowser: Boolean

  @JsName("SearchTags")
  public open var searchTags: String

  @JsName("OnTutorialStageStarted")
  public open fun onTutorialStageStarted(stageName: String): Unit

  @JsName("OnTutorialStageEnded")
  public open fun onTutorialStageEnded(stageName: String): Unit

  @JsName("OnTutorialLaunched")
  public open fun onTutorialLaunched(): Unit

  @JsName("OnTutorialClosed")
  public open fun onTutorialClosed(): Unit

  @JsName("GetActorReference")
  public open fun getActorReference(pathToActor: String): Actor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorTutorial

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorTutorial

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorTutorial

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorTutorial

    @JsName("SetEngineFolderVisibilty")
    public fun setEngineFolderVisibilty(newVisibility: Boolean): Unit

    @JsName("OpenAsset")
    public fun openAsset(asset: UObject): Unit

    @JsName("GoToPreviousTutorialStage")
    public fun goToPreviousTutorialStage(): Unit

    @JsName("GoToNextTutorialStage")
    public fun goToNextTutorialStage(): Unit

    @JsName("GetEngineFolderVisibilty")
    public fun getEngineFolderVisibilty(): Boolean

    @JsName("BeginTutorial")
    public fun beginTutorial(tutorialToStart: EditorTutorial, restart: Boolean): Unit

    @JsName("C")
    public fun copy(other: UObject): EditorTutorial

    @JsName("C")
    public fun copy(other: Any): EditorTutorial
  }
}

public open external class EditorTutorialFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorTutorialFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorTutorialFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorTutorialFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorTutorialFactory

    @JsName("C")
    public fun copy(other: UObject): EditorTutorialFactory

    @JsName("C")
    public fun copy(other: Any): EditorTutorialFactory
  }
}

public open external class EditorTutorialImportFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorTutorialImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorTutorialImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorTutorialImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorTutorialImportFactory

    @JsName("C")
    public fun copy(other: UObject): EditorTutorialImportFactory

    @JsName("C")
    public fun copy(other: Any): EditorTutorialImportFactory
  }
}

public open external class TutorialCategory {
  @JsName("Identifier")
  public open var identifier: String

  @JsName("Title")
  public open var title: String

  @JsName("SortOrder")
  public open var sortOrder: Number

  @JsName("Description")
  public open var description: String

  @JsName("Icon")
  public open var icon: String

  @JsName("Texture")
  public open var texture: SoftObjectPath

  public open fun clone(): TutorialCategory

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TutorialCategory

    @JsName("C")
    public fun copy(other: Any): TutorialCategory
  }
}

public open external class TutorialContext {
  @JsName("Context")
  public open var context: String

  @JsName("BrowserFilter")
  public open var browserFilter: String

  @JsName("AttractTutorial")
  public open var attractTutorial: SoftClassPath

  @JsName("LaunchTutorial")
  public open var launchTutorial: SoftClassPath

  public open fun clone(): TutorialContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TutorialContext

    @JsName("C")
    public fun copy(other: Any): TutorialContext
  }
}

public open external class EditorTutorialSettings(
  outer: UObject,
) : UObject {
  @JsName("bDisableAllTutorialAlerts")
  public open var disableAllTutorialAlerts: Boolean

  @JsName("Categories")
  public open var categories: Array<TutorialCategory>

  @JsName("StartupTutorial")
  public open var startupTutorial: SoftClassPath

  @JsName("TutorialContexts")
  public open var tutorialContexts: Array<TutorialContext>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorTutorialSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorTutorialSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorTutorialSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorTutorialSettings

    @JsName("C")
    public fun copy(other: UObject): EditorTutorialSettings

    @JsName("C")
    public fun copy(other: Any): EditorTutorialSettings
  }
}

public open external class TutorialSettings(
  outer: UObject,
) : UObject {
  @JsName("Categories")
  public open var categories: Array<TutorialCategory>

  @JsName("StartupTutorial")
  public open var startupTutorial: SoftClassPath

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TutorialSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TutorialSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TutorialSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TutorialSettings

    @JsName("C")
    public fun copy(other: UObject): TutorialSettings

    @JsName("C")
    public fun copy(other: Any): TutorialSettings
  }
}

public open external class TutorialProgress {
  @JsName("Tutorial")
  public open var tutorial: SoftClassPath

  @JsName("CurrentStage")
  public open var currentStage: Number

  @JsName("bUserDismissed")
  public open var userDismissed: Boolean

  public open fun clone(): TutorialProgress

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TutorialProgress

    @JsName("C")
    public fun copy(other: Any): TutorialProgress
  }
}

public open external class TutorialStateSettings(
  outer: UObject,
) : UObject {
  @JsName("TutorialsProgress")
  public open var tutorialsProgress: Array<TutorialProgress>

  @JsName("bDismissedAllTutorials")
  public open var dismissedAllTutorials: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TutorialStateSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TutorialStateSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TutorialStateSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TutorialStateSettings

    @JsName("C")
    public fun copy(other: UObject): TutorialStateSettings

    @JsName("C")
    public fun copy(other: Any): TutorialStateSettings
  }
}

public open external class FlipbookEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("BackgroundColor")
  public open var backgroundColor: Color

  @JsName("bShowGridByDefault")
  public open var showGridByDefault: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FlipbookEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FlipbookEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FlipbookEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FlipbookEditorSettings

    @JsName("C")
    public fun copy(other: UObject): FlipbookEditorSettings

    @JsName("C")
    public fun copy(other: Any): FlipbookEditorSettings
  }
}

@JsName("ESpriteExtractMode")
public external object SpriteExtractMode {
  public var Auto: String

  public var Grid: String

  @JsName("ESpriteExtractMode_MAX")
  public var Max: String
}

public open external class PaperExtractSpritesSettings(
  outer: UObject,
) : UObject {
  @JsName("SpriteExtractMode")
  public open var spriteExtractMode: String

  @JsName("OutlineColor")
  public open var outlineColor: LinearColor

  @JsName("ViewportTextureTint")
  public open var viewportTextureTint: LinearColor

  @JsName("BackgroundColor")
  public open var backgroundColor: LinearColor

  @JsName("NamingTemplate")
  public open var namingTemplate: String

  @JsName("NamingStartIndex")
  public open var namingStartIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperExtractSpritesSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperExtractSpritesSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperExtractSpritesSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperExtractSpritesSettings

    @JsName("C")
    public fun copy(other: UObject): PaperExtractSpritesSettings

    @JsName("C")
    public fun copy(other: Any): PaperExtractSpritesSettings
  }
}

public open external class PaperExtractSpriteGridSettings(
  outer: UObject,
) : UObject {
  @JsName("CellWidth")
  public open var cellWidth: Number

  @JsName("CellHeight")
  public open var cellHeight: Number

  @JsName("NumCellsX")
  public open var numCellsX: Number

  @JsName("NumCellsY")
  public open var numCellsY: Number

  @JsName("MarginX")
  public open var marginX: Number

  @JsName("MarginY")
  public open var marginY: Number

  @JsName("SpacingX")
  public open var spacingX: Number

  @JsName("SpacingY")
  public open var spacingY: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperExtractSpriteGridSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperExtractSpriteGridSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperExtractSpriteGridSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperExtractSpriteGridSettings

    @JsName("C")
    public fun copy(other: UObject): PaperExtractSpriteGridSettings

    @JsName("C")
    public fun copy(other: Any): PaperExtractSpriteGridSettings
  }
}

public open external class PaperFlipbookActorFactory(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperFlipbookActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperFlipbookActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperFlipbookActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperFlipbookActorFactory

    @JsName("C")
    public fun copy(other: UObject): PaperFlipbookActorFactory

    @JsName("C")
    public fun copy(other: Any): PaperFlipbookActorFactory
  }
}

public open external class PaperFlipbookFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperFlipbookFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperFlipbookFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperFlipbookFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperFlipbookFactory

    @JsName("C")
    public fun copy(other: UObject): PaperFlipbookFactory

    @JsName("C")
    public fun copy(other: Any): PaperFlipbookFactory
  }
}

public open external class PaperSpriteThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperSpriteThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperSpriteThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperSpriteThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperSpriteThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): PaperSpriteThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): PaperSpriteThumbnailRenderer
  }
}

public open external class PaperFlipbookThumbnailRenderer(
  outer: UObject,
) : PaperSpriteThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperFlipbookThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperFlipbookThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperFlipbookThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperFlipbookThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): PaperFlipbookThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): PaperFlipbookThumbnailRenderer
  }
}

public open external class PaperImporterSettings(
  outer: UObject,
) : UObject {
  @JsName("bPickBestMaterialWhenCreatingSprites")
  public open var pickBestMaterialWhenCreatingSprites: Boolean

  @JsName("bPickBestMaterialWhenCreatingTileMaps")
  public open var pickBestMaterialWhenCreatingTileMaps: Boolean

  @JsName("bAnalysisCanUseOpaque")
  public open var analysisCanUseOpaque: Boolean

  @JsName("DefaultPixelsPerUnrealUnit")
  public open var defaultPixelsPerUnrealUnit: Number

  @JsName("NormalMapTextureSuffixes")
  public open var normalMapTextureSuffixes: Array<String>

  @JsName("BaseMapTextureSuffixes")
  public open var baseMapTextureSuffixes: Array<String>

  @JsName("DefaultSpriteTextureGroup")
  public open var defaultSpriteTextureGroup: String

  @JsName("bOverrideTextureCompression")
  public open var overrideTextureCompression: Boolean

  @JsName("DefaultSpriteTextureCompression")
  public open var defaultSpriteTextureCompression: String

  @JsName("UnlitDefaultMaskedMaterialName")
  public open var unlitDefaultMaskedMaterialName: SoftObjectPath

  @JsName("UnlitDefaultTranslucentMaterialName")
  public open var unlitDefaultTranslucentMaterialName: SoftObjectPath

  @JsName("UnlitDefaultOpaqueMaterialName")
  public open var unlitDefaultOpaqueMaterialName: SoftObjectPath

  @JsName("LitDefaultMaskedMaterialName")
  public open var litDefaultMaskedMaterialName: SoftObjectPath

  @JsName("LitDefaultTranslucentMaterialName")
  public open var litDefaultTranslucentMaterialName: SoftObjectPath

  @JsName("LitDefaultOpaqueMaterialName")
  public open var litDefaultOpaqueMaterialName: SoftObjectPath

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperImporterSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperImporterSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperImporterSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperImporterSettings

    @JsName("C")
    public fun copy(other: UObject): PaperImporterSettings

    @JsName("C")
    public fun copy(other: Any): PaperImporterSettings
  }
}

public open external class PaperSpriteActorFactory(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperSpriteActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperSpriteActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperSpriteActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperSpriteActorFactory

    @JsName("C")
    public fun copy(other: UObject): PaperSpriteActorFactory

    @JsName("C")
    public fun copy(other: Any): PaperSpriteActorFactory
  }
}

public open external class PaperSpriteAtlasFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperSpriteAtlasFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperSpriteAtlasFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperSpriteAtlasFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperSpriteAtlasFactory

    @JsName("C")
    public fun copy(other: UObject): PaperSpriteAtlasFactory

    @JsName("C")
    public fun copy(other: Any): PaperSpriteAtlasFactory
  }
}

public open external class PaperSpriteFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperSpriteFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperSpriteFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperSpriteFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperSpriteFactory

    @JsName("C")
    public fun copy(other: UObject): PaperSpriteFactory

    @JsName("C")
    public fun copy(other: Any): PaperSpriteFactory
  }
}

public open external class PaperTileMapFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperTileMapFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperTileMapFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperTileMapFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperTileMapFactory

    @JsName("C")
    public fun copy(other: UObject): PaperTileMapFactory

    @JsName("C")
    public fun copy(other: Any): PaperTileMapFactory
  }
}

public open external class PaperTileMapPromotionFactory(
  outer: UObject,
) : Factory {
  @JsName("AssetToRename")
  public open var assetToRename: PaperTileMap

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperTileMapPromotionFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperTileMapPromotionFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperTileMapPromotionFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperTileMapPromotionFactory

    @JsName("C")
    public fun copy(other: UObject): PaperTileMapPromotionFactory

    @JsName("C")
    public fun copy(other: Any): PaperTileMapPromotionFactory
  }
}

public open external class PaperTileSetFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperTileSetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperTileSetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperTileSetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperTileSetFactory

    @JsName("C")
    public fun copy(other: UObject): PaperTileSetFactory

    @JsName("C")
    public fun copy(other: Any): PaperTileSetFactory
  }
}

public open external class PaperTileSetThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperTileSetThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperTileSetThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperTileSetThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperTileSetThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): PaperTileSetThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): PaperTileSetThumbnailRenderer
  }
}

public open external class SpriteEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("BackgroundColor")
  public open var backgroundColor: Color

  @JsName("bShowGridByDefault")
  public open var showGridByDefault: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpriteEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpriteEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpriteEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpriteEditorSettings

    @JsName("C")
    public fun copy(other: UObject): SpriteEditorSettings

    @JsName("C")
    public fun copy(other: Any): SpriteEditorSettings
  }
}

public open external class TerrainSplineActorFactory(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TerrainSplineActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TerrainSplineActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TerrainSplineActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TerrainSplineActorFactory

    @JsName("C")
    public fun copy(other: UObject): TerrainSplineActorFactory

    @JsName("C")
    public fun copy(other: Any): TerrainSplineActorFactory
  }
}

public open external class TileMapActorFactory(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TileMapActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TileMapActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TileMapActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TileMapActorFactory

    @JsName("C")
    public fun copy(other: UObject): TileMapActorFactory

    @JsName("C")
    public fun copy(other: Any): TileMapActorFactory
  }
}

public open external class TileSetImportMapping {
  @JsName("SourceName")
  public open var sourceName: String

  @JsName("ImportedTileSet")
  public open var importedTileSet: Any

  @JsName("ImportedTexture")
  public open var importedTexture: Any

  public open fun clone(): TileSetImportMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TileSetImportMapping

    @JsName("C")
    public fun copy(other: Any): TileSetImportMapping
  }
}

public open external class TileMapAssetImportData(
  outer: UObject,
) : AssetImportData {
  @JsName("TileSetMap")
  public open var tileSetMap: Array<TileSetImportMapping>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TileMapAssetImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TileMapAssetImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TileMapAssetImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TileMapAssetImportData

    @JsName("C")
    public fun copy(other: UObject): TileMapAssetImportData

    @JsName("C")
    public fun copy(other: Any): TileMapAssetImportData
  }
}

public open external class TileMapEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("DefaultBackgroundColor")
  public open var defaultBackgroundColor: Color

  @JsName("bShowGridByDefault")
  public open var showGridByDefault: Boolean

  @JsName("DefaultTileGridColor")
  public open var defaultTileGridColor: Color

  @JsName("DefaultMultiTileGridColor")
  public open var defaultMultiTileGridColor: Color

  @JsName("DefaultMultiTileGridWidth")
  public open var defaultMultiTileGridWidth: Number

  @JsName("DefaultMultiTileGridHeight")
  public open var defaultMultiTileGridHeight: Number

  @JsName("DefaultMultiTileGridOffsetX")
  public open var defaultMultiTileGridOffsetX: Number

  @JsName("DefaultMultiTileGridOffsetY")
  public open var defaultMultiTileGridOffsetY: Number

  @JsName("DefaultLayerGridColor")
  public open var defaultLayerGridColor: Color

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TileMapEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TileMapEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TileMapEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TileMapEditorSettings

    @JsName("C")
    public fun copy(other: UObject): TileMapEditorSettings

    @JsName("C")
    public fun copy(other: Any): TileMapEditorSettings
  }
}

public open external class TileSetEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("DefaultBackgroundColor")
  public open var defaultBackgroundColor: Color

  @JsName("bShowGridByDefault")
  public open var showGridByDefault: Boolean

  @JsName("ExtrusionAmount")
  public open var extrusionAmount: Number

  @JsName("bPadToPowerOf2")
  public open var padToPowerOf2: Boolean

  @JsName("bFillWithTransparentBlack")
  public open var fillWithTransparentBlack: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TileSetEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TileSetEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TileSetEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TileSetEditorSettings

    @JsName("C")
    public fun copy(other: UObject): TileSetEditorSettings

    @JsName("C")
    public fun copy(other: Any): TileSetEditorSettings
  }
}

public open external class TileSheetPaddingFactory(
  outer: UObject,
) : Factory {
  @JsName("SourceTileSet")
  public open var sourceTileSet: PaperTileSet

  @JsName("ExtrusionAmount")
  public open var extrusionAmount: Number

  @JsName("bPadToPowerOf2")
  public open var padToPowerOf2: Boolean

  @JsName("bFillWithTransparentBlack")
  public open var fillWithTransparentBlack: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TileSheetPaddingFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TileSheetPaddingFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TileSheetPaddingFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TileSheetPaddingFactory

    @JsName("C")
    public fun copy(other: UObject): TileSheetPaddingFactory

    @JsName("C")
    public fun copy(other: Any): TileSheetPaddingFactory
  }
}

public open external class PaperSpriteSheet(
  outer: UObject,
) : UObject {
  @JsName("SpriteNames")
  public open var spriteNames: Array<String>

  @JsName("Sprites")
  public open var sprites: Array<PaperSprite>

  @JsName("TextureName")
  public open var textureName: String

  @JsName("Texture")
  public open var texture: Texture2d

  @JsName("NormalMapTextureName")
  public open var normalMapTextureName: String

  @JsName("NormalMapTexture")
  public open var normalMapTexture: Texture2d

  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperSpriteSheet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperSpriteSheet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperSpriteSheet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperSpriteSheet

    @JsName("C")
    public fun copy(other: UObject): PaperSpriteSheet

    @JsName("C")
    public fun copy(other: Any): PaperSpriteSheet
  }
}

public open external class PaperSpriteSheetImportFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperSpriteSheetImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperSpriteSheetImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperSpriteSheetImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperSpriteSheetImportFactory

    @JsName("C")
    public fun copy(other: UObject): PaperSpriteSheetImportFactory

    @JsName("C")
    public fun copy(other: Any): PaperSpriteSheetImportFactory
  }
}

public open external class PaperSpriteSheetReimportFactory(
  outer: UObject,
) : PaperSpriteSheetImportFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperSpriteSheetReimportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperSpriteSheetReimportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperSpriteSheetReimportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperSpriteSheetReimportFactory

    @JsName("C")
    public fun copy(other: UObject): PaperSpriteSheetReimportFactory

    @JsName("C")
    public fun copy(other: Any): PaperSpriteSheetReimportFactory
  }
}

public open external class PaperTiledImporterFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PaperTiledImporterFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PaperTiledImporterFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PaperTiledImporterFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PaperTiledImporterFactory

    @JsName("C")
    public fun copy(other: UObject): PaperTiledImporterFactory

    @JsName("C")
    public fun copy(other: Any): PaperTiledImporterFactory
  }
}

public open external class CryptoKeysCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CryptoKeysCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CryptoKeysCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CryptoKeysCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CryptoKeysCommandlet

    @JsName("C")
    public fun copy(other: UObject): CryptoKeysCommandlet

    @JsName("C")
    public fun copy(other: Any): CryptoKeysCommandlet
  }
}

public open external class CryptoEncryptionKey {
  @JsName("Guid")
  public open var guid: Guid

  @JsName("Name")
  public open var name: String

  @JsName("Key")
  public open var key: String

  public open fun clone(): CryptoEncryptionKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CryptoEncryptionKey

    @JsName("C")
    public fun copy(other: Any): CryptoEncryptionKey
  }
}

public open external class CryptoKeysSettings(
  outer: UObject,
) : UObject {
  @JsName("EncryptionKey")
  public open var encryptionKey: String

  @JsName("SecondaryEncryptionKeys")
  public open var secondaryEncryptionKeys: Array<CryptoEncryptionKey>

  @JsName("bEncryptPakIniFiles")
  public open var encryptPakIniFiles: Boolean

  @JsName("bEncryptPakIndex")
  public open var encryptPakIndex: Boolean

  @JsName("bEncryptUAssetFiles")
  public open var encryptUAssetFiles: Boolean

  @JsName("bEncryptAllAssetFiles")
  public open var encryptAllAssetFiles: Boolean

  @JsName("SigningPublicExponent")
  public open var signingPublicExponent: String

  @JsName("SigningModulus")
  public open var signingModulus: String

  @JsName("SigningPrivateExponent")
  public open var signingPrivateExponent: String

  @JsName("bEnablePakSigning")
  public open var enablePakSigning: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CryptoKeysSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CryptoKeysSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CryptoKeysSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CryptoKeysSettings

    @JsName("C")
    public fun copy(other: UObject): CryptoKeysSettings

    @JsName("C")
    public fun copy(other: Any): CryptoKeysSettings
  }
}

@JsName("EMotionExtractor_MotionType")
public external object MotionExtractor_MotionType {
  public var Translation: String

  public var Rotation: String

  public var Scale: String

  public var TranslationSpeed: String

  public var RotationSpeed: String

  @JsName("EMotionExtractor_MAX")
  public var EMotionExtractorMax: String
}

@JsName("EMotionExtractor_Axis")
public external object MotionExtractor_Axis {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  public var XY: String

  public var XZ: String

  public var YZ: String

  public var XYZ: String

  @JsName("EMotionExtractor_MAX")
  public var EMotionExtractorMax: String
}

@JsName("EMotionExtractor_MathOperation")
public external object MotionExtractor_MathOperation {
  public var None: String

  public var Addition: String

  public var Subtraction: String

  public var Division: String

  public var Multiplication: String

  @JsName("EMotionExtractor_MAX")
  public var EMotionExtractorMax: String
}

public open external class MotionExtractorModifier(
  outer: UObject,
) : AnimationModifier {
  @JsName("BoneName")
  public open var boneName: String

  @JsName("MotionType")
  public open var motionType: String

  @JsName("Axis")
  public open var axis: String

  @JsName("bComponentSpace")
  public open var componentSpace: Boolean

  @JsName("bAbsoluteValue")
  public open var absoluteValue: Boolean

  @JsName("MathOperation")
  public open var mathOperation: String

  @JsName("Modifier")
  public open var modifier: Number

  @JsName("SampleRate")
  public open var sampleRate: Number

  @JsName("bUseCustomCurveName")
  public open var useCustomCurveName: Boolean

  @JsName("CustomCurveName")
  public open var customCurveName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MotionExtractorModifier

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MotionExtractorModifier

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MotionExtractorModifier

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MotionExtractorModifier

    @JsName("C")
    public fun copy(other: UObject): MotionExtractorModifier

    @JsName("C")
    public fun copy(other: Any): MotionExtractorModifier
  }
}

@JsName("ECurveEditorFFTFilterType")
public external object CurveEditorFFTFilterType {
  public var Lowpass: String

  public var Highpass: String

  @JsName("ECurveEditorFFTFilterType_MAX")
  public var Max: String
}

@JsName("ECurveEditorFFTFilterClass")
public external object CurveEditorFFTFilterClass {
  public var Butterworth: String

  public var Chebyshev: String

  @JsName("ECurveEditorFFTFilterClass_MAX")
  public var Max: String
}

@JsName("CurveEditorFFTFilter")
public open external class CurveEditorFftFilter(
  outer: UObject,
) : CurveEditorFilterBase {
  @JsName("CutoffFrequency")
  public open var cutoffFrequency: Number

  @JsName("Type")
  public open var type: String

  @JsName("Response")
  public open var response: String

  @JsName("Order")
  public open var order: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorFftFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorFftFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorFftFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorFftFilter

    @JsName("C")
    public fun copy(other: UObject): CurveEditorFftFilter

    @JsName("C")
    public fun copy(other: Any): CurveEditorFftFilter
  }
}

public open external class CurveEditorRetimeAnchor {
  @JsName("ValueInSeconds")
  public open var valueInSeconds: Any

  @JsName("bIsSelected")
  public open var isSelected: Boolean

  public open fun clone(): CurveEditorRetimeAnchor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CurveEditorRetimeAnchor

    @JsName("C")
    public fun copy(other: Any): CurveEditorRetimeAnchor
  }
}

public open external class CurveEditorRetimeToolData(
  outer: UObject,
) : UObject {
  @JsName("RetimingAnchors")
  public open var retimingAnchors: Array<CurveEditorRetimeAnchor>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorRetimeToolData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorRetimeToolData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorRetimeToolData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorRetimeToolData

    @JsName("C")
    public fun copy(other: UObject): CurveEditorRetimeToolData

    @JsName("C")
    public fun copy(other: Any): CurveEditorRetimeToolData
  }
}

public open external class SkeletalMeshEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("GetNumVerts")
  public open fun getNumVerts(skeletalMesh: SkeletalMesh, lodIndex: Number): Number

  @JsName("GetNumSections")
  public open fun getNumSections(skeletalMesh: SkeletalMesh, lodIndex: Number): Number

  @JsName("GetLODMaterialSlot")
  public open fun getLodMaterialSlot(
    skeletalMesh: SkeletalMesh,
    lodIndex: Number,
    sectionIndex: Number,
  ): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshEditorSubsystem

    @JsName("SetLodBuildSettings")
    public fun setLodBuildSettings(
      skeletalMesh: SkeletalMesh,
      lodIndex: Number,
      buildOptions: SkeletalMeshBuildSettings,
    ): Unit

    @JsName("RenameSocket")
    public fun renameSocket(
      skeletalMesh: SkeletalMesh,
      oldName: String,
      newName: String,
    ): Boolean

    @JsName("ReimportAllCustomLODs")
    public fun reimportAllCustomLoDs(skeletalMesh: SkeletalMesh): Boolean

    @JsName("RegenerateLOD")
    public fun regenerateLod(
      skeletalMesh: SkeletalMesh,
      newLodCount: Number,
      regenerateEvenIfImported: Boolean,
      generateBaseLod: Boolean,
    ): Boolean

    @JsName("ImportLOD")
    public fun importLod(
      baseMesh: SkeletalMesh,
      lodIndex: Number,
      sourceFilename: String,
    ): Number

    @JsName("GetLODCount")
    public fun getLodCount(skeletalMesh: SkeletalMesh): Number

    @JsName("GetLodBuildSettings")
    public fun getLodBuildSettings(
      skeletalMesh: SkeletalMesh,
      lodIndex: Number,
      outBuildOptions: SkeletalMeshBuildSettings,
    ): SkeletalMeshOutBuildOptionsProvider

    @JsName("CreatePhysicsAsset")
    public fun createPhysicsAsset(skeletalMesh: SkeletalMesh): PhysicsAsset

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshEditorSubsystem
  }
}

@JsName("StaticMeshEditorUISubsystem")
public open external class StaticMeshEditorUiSubsystem(
  outer: UObject,
) : AssetEditorUiSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshEditorUiSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshEditorUiSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshEditorUiSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshEditorUiSubsystem

    @JsName("C")
    public fun copy(other: UObject): StaticMeshEditorUiSubsystem

    @JsName("C")
    public fun copy(other: Any): StaticMeshEditorUiSubsystem
  }
}

public open external class JoinStaticMeshActorsOptions {
  @JsName("bDestroySourceActors")
  public open var destroySourceActors: Boolean

  @JsName("NewActorLabel")
  public open var newActorLabel: String

  @JsName("bRenameComponentsFromSource")
  public open var renameComponentsFromSource: Boolean

  public open fun clone(): JoinStaticMeshActorsOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JoinStaticMeshActorsOptions

    @JsName("C")
    public fun copy(other: Any): JoinStaticMeshActorsOptions
  }
}

public open external class MergeStaticMeshActorsOptions : JoinStaticMeshActorsOptions {
  @JsName("bSpawnMergedActor")
  public open var spawnMergedActor: Boolean

  @JsName("BasePackageName")
  public open var basePackageName: String

  @JsName("MeshMergingSettings")
  public open var meshMergingSettings: MeshMergingSettings

  public override fun clone(): MergeStaticMeshActorsOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MergeStaticMeshActorsOptions

    @JsName("C")
    public fun copy(other: Any): MergeStaticMeshActorsOptions
  }
}

public open external class CreateProxyMeshActorOptions : JoinStaticMeshActorsOptions {
  @JsName("bSpawnMergedActor")
  public open var spawnMergedActor: Boolean

  @JsName("BasePackageName")
  public open var basePackageName: String

  @JsName("MeshProxySettings")
  public open var meshProxySettings: MeshProxySettings

  public override fun clone(): CreateProxyMeshActorOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CreateProxyMeshActorOptions

    @JsName("C")
    public fun copy(other: Any): CreateProxyMeshActorOptions
  }
}

@JsName("T$435")
public external interface Object435 {
  @JsName("OutMergedActor")
  public var outMergedActor: StaticMeshActor

  @JsName("$")
  public var value: Boolean
}

public open external class StaticMeshEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("SetNaniteSettings")
  public open fun setNaniteSettings(
    staticMesh: StaticMesh,
    naniteSettings: MeshNaniteSettings,
    applyChanges: Boolean,
  ): Unit

  @JsName("SetLodsWithNotification")
  public open fun setLodsWithNotification(
    staticMesh: StaticMesh,
    reductionOptions: StaticMeshReductionOptions,
    applyChanges: Boolean,
  ): Number

  @JsName("SetLods")
  public open fun setLods(staticMesh: StaticMesh, reductionOptions: StaticMeshReductionOptions):
      Number

  @JsName("SetLodReductionSettings")
  public open fun setLodReductionSettings(
    staticMesh: StaticMesh,
    lodIndex: Number,
    reductionOptions: MeshReductionSettings,
  ): Unit

  @JsName("SetLODMaterialSlot")
  public open fun setLodMaterialSlot(
    staticMesh: StaticMesh,
    materialSlotIndex: Number,
    lodIndex: Number,
    sectionIndex: Number,
  ): Unit

  @JsName("SetLODGroup")
  public open fun setLodGroup(
    staticMesh: StaticMesh,
    lodGroup: String,
    rebuildImmediately: Boolean,
  ): Boolean

  @JsName("SetLodFromStaticMesh")
  public open fun setLodFromStaticMesh(
    destinationStaticMesh: StaticMesh,
    destinationLodIndex: Number,
    sourceStaticMesh: StaticMesh,
    sourceLodIndex: Number,
    reuseExistingMaterialSlots: Boolean,
  ): Number

  @JsName("SetLodBuildSettings")
  public open fun setLodBuildSettings(
    staticMesh: StaticMesh,
    lodIndex: Number,
    buildOptions: MeshBuildSettings,
  ): Unit

  @JsName("SetGenerateLightmapUVs")
  public open fun setGenerateLightmapUVs(staticMesh: StaticMesh, generateLightmapUVs: Boolean):
      Boolean

  @JsName("SetConvexDecompositionCollisionsWithNotification")
  public open fun setConvexDecompositionCollisionsWithNotification(
    staticMesh: StaticMesh,
    hullCount: Number,
    maxHullVerts: Number,
    hullPrecision: Number,
    applyChanges: Boolean,
  ): Boolean

  @JsName("SetConvexDecompositionCollisions")
  public open fun setConvexDecompositionCollisions(
    staticMesh: StaticMesh,
    hullCount: Number,
    maxHullVerts: Number,
    hullPrecision: Number,
  ): Boolean

  @JsName("SetAllowCPUAccess")
  public open fun setAllowCpuAccess(staticMesh: StaticMesh, allowCpuAccess: Boolean): Unit

  @JsName("ReplaceMeshComponentsMeshesOnActors")
  public open fun replaceMeshComponentsMeshesOnActors(
    actors: Array<Actor>,
    meshToBeReplaced: StaticMesh,
    newMesh: StaticMesh,
  ): Unit

  @JsName("ReplaceMeshComponentsMeshes")
  public open fun replaceMeshComponentsMeshes(
    meshComponents: Array<StaticMeshComponent>,
    meshToBeReplaced: StaticMesh,
    newMesh: StaticMesh,
  ): Unit

  @JsName("ReplaceMeshComponentsMaterialsOnActors")
  public open fun replaceMeshComponentsMaterialsOnActors(
    actors: Array<Actor>,
    materialToBeReplaced: MaterialInterface,
    newMaterial: MaterialInterface,
  ): Unit

  @JsName("ReplaceMeshComponentsMaterials")
  public open fun replaceMeshComponentsMaterials(
    meshComponents: Array<MeshComponent>,
    materialToBeReplaced: MaterialInterface,
    newMaterial: MaterialInterface,
  ): Unit

  @JsName("RemoveUVChannel")
  public open fun removeUvChannel(
    staticMesh: StaticMesh,
    lodIndex: Number,
    uvChannelIndex: Number,
  ): Boolean

  @JsName("RemoveLods")
  public open fun removeLods(staticMesh: StaticMesh): Boolean

  @JsName("RemoveCollisionsWithNotification")
  public open fun removeCollisionsWithNotification(staticMesh: StaticMesh, applyChanges: Boolean):
      Boolean

  @JsName("RemoveCollisions")
  public open fun removeCollisions(staticMesh: StaticMesh): Boolean

  @JsName("ReimportAllCustomLODs")
  public open fun reimportAllCustomLoDs(staticMesh: StaticMesh): Boolean

  @JsName("MergeStaticMeshActors")
  public open fun mergeStaticMeshActors(
    actorsToMerge: Array<StaticMeshActor>,
    mergeOptions: MergeStaticMeshActorsOptions,
    outMergedActor: StaticMeshActor,
  ): Object435

  @JsName("JoinStaticMeshActors")
  public open fun joinStaticMeshActors(actorsToJoin: Array<StaticMeshActor>,
      joinOptions: JoinStaticMeshActorsOptions): Actor

  @JsName("IsSectionCollisionEnabled")
  public open fun isSectionCollisionEnabled(
    staticMesh: StaticMesh,
    lodIndex: Number,
    sectionIndex: Number,
  ): Boolean

  @JsName("InsertUVChannel")
  public open fun insertUvChannel(
    staticMesh: StaticMesh,
    lodIndex: Number,
    uvChannelIndex: Number,
  ): Boolean

  @JsName("ImportLOD")
  public open fun importLod(
    baseStaticMesh: StaticMesh,
    lodIndex: Number,
    sourceFilename: String,
  ): Number

  @JsName("HasVertexColors")
  public open fun hasVertexColors(staticMesh: StaticMesh): Boolean

  @JsName("HasInstanceVertexColors")
  public open fun hasInstanceVertexColors(staticMeshComponent: StaticMeshComponent): Boolean

  @JsName("GetSimpleCollisionCount")
  public open fun getSimpleCollisionCount(staticMesh: StaticMesh): Number

  @JsName("GetNumUVChannels")
  public open fun getNumUvChannels(staticMesh: StaticMesh, lodIndex: Number): Number

  @JsName("GetNumberVerts")
  public open fun getNumberVerts(staticMesh: StaticMesh, lodIndex: Number): Number

  @JsName("GetNumberMaterials")
  public open fun getNumberMaterials(staticMesh: StaticMesh): Number

  @JsName("GetNaniteSettings")
  public open fun getNaniteSettings(staticMesh: StaticMesh): MeshNaniteSettings

  @JsName("GetLodScreenSizes")
  public open fun getLodScreenSizes(staticMesh: StaticMesh): Array<Number>

  @JsName("GetLodReductionSettings")
  public open fun getLodReductionSettings(
    staticMesh: StaticMesh,
    lodIndex: Number,
    outReductionOptions: MeshReductionSettings,
  ): OutReductionOptionsProvider

  @JsName("GetLODMaterialSlot")
  public open fun getLodMaterialSlot(
    staticMesh: StaticMesh,
    lodIndex: Number,
    sectionIndex: Number,
  ): Number

  @JsName("GetLODGroup")
  public open fun getLodGroup(staticMesh: StaticMesh): String

  @JsName("GetLodCount")
  public open fun getLodCount(staticMesh: StaticMesh): Number

  @JsName("GetLodBuildSettings")
  public open fun getLodBuildSettings(
    staticMesh: StaticMesh,
    lodIndex: Number,
    outBuildOptions: MeshBuildSettings,
  ): MeshOutBuildOptionsProvider

  @JsName("GetConvexCollisionCount")
  public open fun getConvexCollisionCount(staticMesh: StaticMesh): Number

  @JsName("GetCollisionComplexity")
  public open fun getCollisionComplexity(staticMesh: StaticMesh): String

  @JsName("GeneratePlanarUVChannel")
  public open fun generatePlanarUvChannel(
    staticMesh: StaticMesh,
    lodIndex: Number,
    uvChannelIndex: Number,
    position: Vector,
    orientation: Rotator,
    tiling: Vector2d,
  ): Boolean

  @JsName("GenerateCylindricalUVChannel")
  public open fun generateCylindricalUvChannel(
    staticMesh: StaticMesh,
    lodIndex: Number,
    uvChannelIndex: Number,
    position: Vector,
    orientation: Rotator,
    tiling: Vector2d,
  ): Boolean

  @JsName("GenerateBoxUVChannel")
  public open fun generateBoxUvChannel(
    staticMesh: StaticMesh,
    lodIndex: Number,
    uvChannelIndex: Number,
    position: Vector,
    orientation: Rotator,
    size: Vector,
  ): Boolean

  @JsName("EnableSectionCollision")
  public open fun enableSectionCollision(
    staticMesh: StaticMesh,
    collisionEnabled: Boolean,
    lodIndex: Number,
    sectionIndex: Number,
  ): Unit

  @JsName("EnableSectionCastShadow")
  public open fun enableSectionCastShadow(
    staticMesh: StaticMesh,
    castShadow: Boolean,
    lodIndex: Number,
    sectionIndex: Number,
  ): Unit

  @JsName("CreateProxyMeshActor")
  public open fun createProxyMeshActor(
    actorsToMerge: Array<StaticMeshActor>,
    mergeOptions: CreateProxyMeshActorOptions,
    outMergedActor: StaticMeshActor,
  ): Object435

  @JsName("BulkSetConvexDecompositionCollisionsWithNotification")
  public open fun bulkSetConvexDecompositionCollisionsWithNotification(
    staticMeshes: Array<StaticMesh>,
    hullCount: Number,
    maxHullVerts: Number,
    hullPrecision: Number,
    applyChanges: Boolean,
  ): Boolean

  @JsName("BulkSetConvexDecompositionCollisions")
  public open fun bulkSetConvexDecompositionCollisions(
    staticMeshes: Array<StaticMesh>,
    hullCount: Number,
    maxHullVerts: Number,
    hullPrecision: Number,
  ): Boolean

  @JsName("AddUVChannel")
  public open fun addUvChannel(staticMesh: StaticMesh, lodIndex: Number): Boolean

  @JsName("AddSimpleCollisionsWithNotification")
  public open fun addSimpleCollisionsWithNotification(
    staticMesh: StaticMesh,
    shapeType: String,
    applyChanges: Boolean,
  ): Number

  @JsName("AddSimpleCollisions")
  public open fun addSimpleCollisions(staticMesh: StaticMesh, shapeType: String): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): StaticMeshEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): StaticMeshEditorSubsystem
  }
}

public open external class EditorAssetLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorAssetLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorAssetLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorAssetLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorAssetLibrary

    @JsName("SyncBrowserToObjects")
    public fun syncBrowserToObjects(assetPaths: Array<String>): Unit

    @JsName("SetMetadataTag")
    public fun setMetadataTag(
      uObject: UObject,
      tag: String,
      value: String,
    ): Unit

    @JsName("SaveLoadedAssets")
    public fun saveLoadedAssets(assetsToSave: Array<UObject>, onlyIfIsDirty: Boolean): Boolean

    @JsName("SaveLoadedAsset")
    public fun saveLoadedAsset(assetToSave: UObject, onlyIfIsDirty: Boolean): Boolean

    @JsName("SaveDirectory")
    public fun saveDirectory(
      directoryPath: String,
      onlyIfIsDirty: Boolean,
      recursive: Boolean,
    ): Boolean

    @JsName("SaveAsset")
    public fun saveAsset(assetToSave: String, onlyIfIsDirty: Boolean): Boolean

    @JsName("RenameLoadedAsset")
    public fun renameLoadedAsset(sourceAsset: UObject, destinationAssetPath: String): Boolean

    @JsName("RenameDirectory")
    public fun renameDirectory(sourceDirectoryPath: String, destinationDirectoryPath: String):
        Boolean

    @JsName("RenameAsset")
    public fun renameAsset(sourceAssetPath: String, destinationAssetPath: String): Boolean

    @JsName("RemoveMetadataTag")
    public fun removeMetadataTag(uObject: UObject, tag: String): Unit

    @JsName("MakeDirectory")
    public fun makeDirectory(directoryPath: String): Boolean

    @JsName("LoadBlueprintClass")
    public fun loadBlueprintClass(assetPath: String): UnrealEngineClass

    @JsName("LoadAsset")
    public fun loadAsset(assetPath: String): UObject

    @JsName("ListAssets")
    public fun listAssets(
      directoryPath: String,
      recursive: Boolean,
      includeFolder: Boolean,
    ): Array<String>

    @JsName("ListAssetByTagValue")
    public fun listAssetByTagValue(tagName: String, tagValue: String): Array<String>

    @JsName("GetTagValues")
    public fun getTagValues(assetPath: String): Any

    @JsName("GetPathNameForLoadedAsset")
    public fun getPathNameForLoadedAsset(loadedAsset: UObject): String

    @JsName("GetMetadataTagValues")
    public fun getMetadataTagValues(uObject: UObject): Any

    @JsName("GetMetadataTag")
    public fun getMetadataTag(uObject: UObject, tag: String): String

    @JsName("FindPackageReferencersForAsset")
    public fun findPackageReferencersForAsset(assetPath: String, loadAssetsToConfirm: Boolean):
        Array<String>

    @JsName("FindAssetData")
    public fun findAssetData(assetPath: String): AssetData

    @JsName("DuplicateLoadedAsset")
    public fun duplicateLoadedAsset(sourceAsset: UObject, destinationAssetPath: String): UObject

    @JsName("DuplicateDirectory")
    public fun duplicateDirectory(sourceDirectoryPath: String, destinationDirectoryPath: String):
        Boolean

    @JsName("DuplicateAsset")
    public fun duplicateAsset(sourceAssetPath: String, destinationAssetPath: String): UObject

    @JsName("DoesDirectoryHaveAssets")
    public fun doesDirectoryHaveAssets(directoryPath: String, recursive: Boolean): Boolean

    @JsName("DoesDirectoryExist")
    public fun doesDirectoryExist(directoryPath: String): Boolean

    @JsName("DoesAssetExist")
    public fun doesAssetExist(assetPath: String): Boolean

    @JsName("DoAssetsExist")
    public fun doAssetsExist(assetPaths: Array<String>): Boolean

    @JsName("DeleteLoadedAssets")
    public fun deleteLoadedAssets(assetsToDelete: Array<UObject>): Boolean

    @JsName("DeleteLoadedAsset")
    public fun deleteLoadedAsset(assetToDelete: UObject): Boolean

    @JsName("DeleteDirectory")
    public fun deleteDirectory(directoryPath: String): Boolean

    @JsName("DeleteAsset")
    public fun deleteAsset(assetPathToDelete: String): Boolean

    @JsName("ConsolidateAssets")
    public fun consolidateAssets(assetToConsolidateTo: UObject,
        assetsToConsolidate: Array<UObject>): Boolean

    @JsName("CheckoutLoadedAssets")
    public fun checkoutLoadedAssets(assetsToCheckout: Array<UObject>): Boolean

    @JsName("CheckoutLoadedAsset")
    public fun checkoutLoadedAsset(assetToCheckout: UObject): Boolean

    @JsName("CheckoutDirectory")
    public fun checkoutDirectory(directoryPath: String, recursive: Boolean): Boolean

    @JsName("CheckoutAsset")
    public fun checkoutAsset(assetToCheckout: String): Boolean

    @JsName("C")
    public fun copy(other: UObject): EditorAssetLibrary

    @JsName("C")
    public fun copy(other: Any): EditorAssetLibrary
  }
}

public open external class EditorDialogLibraryObjectDetailsViewOptions {
  @JsName("bShowObjectName")
  public open var showObjectName: Boolean

  @JsName("bAllowSearch")
  public open var allowSearch: Boolean

  public open fun clone(): EditorDialogLibraryObjectDetailsViewOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorDialogLibraryObjectDetailsViewOptions

    @JsName("C")
    public fun copy(other: Any): EditorDialogLibraryObjectDetailsViewOptions
  }
}

@JsName("EAppMsgType")
public external object AppMsgType {
  public var Ok: String

  public var YesNo: String

  public var OkCancel: String

  public var YesNoCancel: String

  public var CancelRetryContinue: String

  public var YesNoYesAllNoAll: String

  public var YesNoYesAllNoAllCancel: String

  public var YesNoYesAll: String

  @JsName("EAppMsgType_MAX")
  public var Max: String
}

@JsName("EAppReturnType")
public external object AppReturnType {
  public var No: String

  public var Yes: String

  public var YesAll: String

  public var NoAll: String

  public var Cancel: String

  public var Ok: String

  public var Retry: String

  public var Continue: String

  @JsName("EAppReturnType_MAX")
  public var Max: String
}

public open external class EditorDialogLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorDialogLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorDialogLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorDialogLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorDialogLibrary

    @JsName("ShowSuppressableWarningDialog")
    public fun showSuppressableWarningDialog(
      title: String,
      message: String,
      inIniSettingName: String,
      inIniSettingFileNameOverride: String,
      defaultValue: Boolean,
    ): Boolean

    @JsName("ShowObjectsDetailsView")
    public fun showObjectsDetailsView(
      title: String,
      inOutObjects: Array<UObject>,
      options: EditorDialogLibraryObjectDetailsViewOptions,
    ): Boolean

    @JsName("ShowObjectDetailsView")
    public fun showObjectDetailsView(
      title: String,
      inOutObject: UObject,
      options: EditorDialogLibraryObjectDetailsViewOptions,
    ): Boolean

    @JsName("ShowMessage")
    public fun showMessage(
      title: String,
      message: String,
      messageType: String,
      defaultValue: String,
    ): String

    @JsName("C")
    public fun copy(other: UObject): EditorDialogLibrary

    @JsName("C")
    public fun copy(other: Any): EditorDialogLibrary
  }
}

@JsName("EEditorScriptingFilterType")
public external object EditorScriptingFilterType {
  public var Include: String

  public var Exclude: String

  @JsName("EEditorScriptingFilterType_MAX")
  public var Max: String
}

@JsName("EEditorScriptingStringMatchType")
public external object EditorScriptingStringMatchType {
  public var Contains: String

  public var MatchesWildcard: String

  public var ExactMatch: String

  @JsName("EEditorScriptingStringMatchType_MAX")
  public var Max: String
}

public open external class EditorFilterLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorFilterLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorFilterLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorFilterLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorFilterLibrary

    @JsName("BySelection")
    public fun bySelection(targetArray: Array<Actor>, filterType: String): Array<Actor>

    @JsName("ByLevelName")
    public fun byLevelName(
      targetArray: Array<Actor>,
      levelName: String,
      filterType: String,
    ): Array<Actor>

    @JsName("ByLayer")
    public fun byLayer(
      targetArray: Array<Actor>,
      layerName: String,
      filterType: String,
    ): Array<Actor>

    @JsName("ByIDName")
    public fun byIdName(
      targetArray: Array<UObject>,
      nameSubString: String,
      stringMatch: String,
      filterType: String,
    ): Array<UObject>

    @JsName("ByClass")
    public fun byClass(
      targetArray: Array<UObject>,
      objectClass: UnrealEngineClass,
      filterType: String,
    ): Array<UObject>

    @JsName("ByActorTag")
    public fun byActorTag(
      targetArray: Array<Actor>,
      tag: String,
      filterType: String,
    ): Array<Actor>

    @JsName("ByActorLabel")
    public fun byActorLabel(
      targetArray: Array<Actor>,
      nameSubString: String,
      stringMatch: String,
      filterType: String,
      ignoreCase: Boolean,
    ): Array<Actor>

    @JsName("C")
    public fun copy(other: UObject): EditorFilterLibrary

    @JsName("C")
    public fun copy(other: Any): EditorFilterLibrary
  }
}

@JsName("T$436")
public external interface Object436 {
  @JsName("CameraLocation")
  public var cameraLocation: Vector

  @JsName("CameraRotation")
  public var cameraRotation: Rotator

  @JsName("$")
  public var value: Boolean
}

public open external class EditorLevelLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorLevelLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorLevelLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorLevelLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorLevelLibrary

    @JsName("SpawnActorFromObject")
    public fun spawnActorFromObject(
      objectToUse: UObject,
      location: Vector,
      rotation: Rotator,
      transient: Boolean,
    ): Actor

    @JsName("SpawnActorFromClass")
    public fun spawnActorFromClass(
      actorClass: UnrealEngineClass,
      location: Vector,
      rotation: Rotator,
      transient: Boolean,
    ): Actor

    @JsName("SetSelectedLevelActors")
    public fun setSelectedLevelActors(actorsToSelect: Array<Actor>): Unit

    @JsName("SetLevelViewportCameraInfo")
    public fun setLevelViewportCameraInfo(cameraLocation: Vector, cameraRotation: Rotator): Unit

    @JsName("SetCurrentLevelByName")
    public fun setCurrentLevelByName(levelName: String): Boolean

    @JsName("SetActorSelectionState")
    public fun setActorSelectionState(actor: Actor, shouldBeSelected: Boolean): Unit

    @JsName("SelectNothing")
    public fun selectNothing(): Unit

    @JsName("SaveCurrentLevel")
    public fun saveCurrentLevel(): Boolean

    @JsName("SaveAllDirtyLevels")
    public fun saveAllDirtyLevels(): Boolean

    @JsName("ReplaceSelectedActors")
    public fun replaceSelectedActors(inAssetPath: String): Unit

    @JsName("ReplaceMeshComponentsMeshesOnActors")
    public fun replaceMeshComponentsMeshesOnActors(
      actors: Array<Actor>,
      meshToBeReplaced: StaticMesh,
      newMesh: StaticMesh,
    ): Unit

    @JsName("ReplaceMeshComponentsMeshes")
    public fun replaceMeshComponentsMeshes(
      meshComponents: Array<StaticMeshComponent>,
      meshToBeReplaced: StaticMesh,
      newMesh: StaticMesh,
    ): Unit

    @JsName("ReplaceMeshComponentsMaterialsOnActors")
    public fun replaceMeshComponentsMaterialsOnActors(
      actors: Array<Actor>,
      materialToBeReplaced: MaterialInterface,
      newMaterial: MaterialInterface,
    ): Unit

    @JsName("ReplaceMeshComponentsMaterials")
    public fun replaceMeshComponentsMaterials(
      meshComponents: Array<MeshComponent>,
      materialToBeReplaced: MaterialInterface,
      newMaterial: MaterialInterface,
    ): Unit

    @JsName("PilotLevelActor")
    public fun pilotLevelActor(actorToPilot: Actor): Unit

    @JsName("NewLevelFromTemplate")
    public fun newLevelFromTemplate(assetPath: String, templateAssetPath: String): Boolean

    @JsName("NewLevel")
    public fun newLevel(assetPath: String): Boolean

    @JsName("MergeStaticMeshActors")
    public fun mergeStaticMeshActors(
      actorsToMerge: Array<StaticMeshActor>,
      mergeOptions: MergeStaticMeshActorsOptions,
      outMergedActor: StaticMeshActor,
    ): Object435

    @JsName("LoadLevel")
    public fun loadLevel(assetPath: String): Boolean

    @JsName("JoinStaticMeshActors")
    public fun joinStaticMeshActors(actorsToJoin: Array<StaticMeshActor>,
        joinOptions: JoinStaticMeshActorsOptions): Actor

    @JsName("GetSelectedLevelActors")
    public fun getSelectedLevelActors(): Array<Actor>

    @JsName("GetPIEWorlds")
    public fun getPieWorlds(includeDedicatedServer: Boolean): Array<World>

    @JsName("GetLevelViewportCameraInfo")
    public fun getLevelViewportCameraInfo(cameraLocation: Vector, cameraRotation: Rotator):
        Object436

    @JsName("GetGameWorld")
    public fun getGameWorld(): World

    @JsName("GetEditorWorld")
    public fun getEditorWorld(): World

    @JsName("GetAllLevelActorsComponents")
    public fun getAllLevelActorsComponents(): Array<ActorComponent>

    @JsName("GetAllLevelActors")
    public fun getAllLevelActors(): Array<Actor>

    @JsName("GetActorReference")
    public fun getActorReference(pathToActor: String): Actor

    @JsName("EjectPilotLevelActor")
    public fun ejectPilotLevelActor(): Unit

    @JsName("EditorSetGameView")
    public fun editorSetGameView(gameView: Boolean): Unit

    @JsName("EditorPlaySimulate")
    public fun editorPlaySimulate(): Unit

    @JsName("EditorInvalidateViewports")
    public fun editorInvalidateViewports(): Unit

    @JsName("EditorEndPlay")
    public fun editorEndPlay(): Unit

    @JsName("DestroyActor")
    public fun destroyActor(actorToDestroy: Actor): Boolean

    @JsName("CreateProxyMeshActor")
    public fun createProxyMeshActor(
      actorsToMerge: Array<StaticMeshActor>,
      mergeOptions: CreateProxyMeshActorOptions,
      outMergedActor: StaticMeshActor,
    ): Object435

    @JsName("ConvertActors")
    public fun convertActors(
      actors: Array<Actor>,
      actorClass: UnrealEngineClass,
      staticMeshPackagePath: String,
    ): Array<Actor>

    @JsName("ClearActorSelectionSet")
    public fun clearActorSelectionSet(): Unit

    @JsName("C")
    public fun copy(other: UObject): EditorLevelLibrary

    @JsName("C")
    public fun copy(other: Any): EditorLevelLibrary
  }
}

public open external class EditorSkeletalMeshLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorSkeletalMeshLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorSkeletalMeshLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorSkeletalMeshLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorSkeletalMeshLibrary

    @JsName("StripLODGeometry")
    public fun stripLodGeometry(
      skeletalMesh: SkeletalMesh,
      lodIndex: Number,
      textureMask: Texture2d,
      threshold: Number,
    ): Boolean

    @JsName("SetLodBuildSettings")
    public fun setLodBuildSettings(
      skeletalMesh: SkeletalMesh,
      lodIndex: Number,
      buildOptions: SkeletalMeshBuildSettings,
    ): Unit

    @JsName("RenameSocket")
    public fun renameSocket(
      skeletalMesh: SkeletalMesh,
      oldName: String,
      newName: String,
    ): Boolean

    @JsName("RemoveLODs")
    public fun removeLoDs(skeletalMesh: SkeletalMesh, toRemoveLoDs: Array<Number>): Boolean

    @JsName("ReimportAllCustomLODs")
    public fun reimportAllCustomLoDs(skeletalMesh: SkeletalMesh): Boolean

    @JsName("RegenerateLOD")
    public fun regenerateLod(
      skeletalMesh: SkeletalMesh,
      newLodCount: Number,
      regenerateEvenIfImported: Boolean,
      generateBaseLod: Boolean,
    ): Boolean

    @JsName("ImportLOD")
    public fun importLod(
      baseMesh: SkeletalMesh,
      lodIndex: Number,
      sourceFilename: String,
    ): Number

    @JsName("GetNumVerts")
    public fun getNumVerts(skeletalMesh: SkeletalMesh, lodIndex: Number): Number

    @JsName("GetLODCount")
    public fun getLodCount(skeletalMesh: SkeletalMesh): Number

    @JsName("GetLodBuildSettings")
    public fun getLodBuildSettings(
      skeletalMesh: SkeletalMesh,
      lodIndex: Number,
      outBuildOptions: SkeletalMeshBuildSettings,
    ): SkeletalMeshOutBuildOptionsProvider

    @JsName("CreatePhysicsAsset")
    public fun createPhysicsAsset(skeletalMesh: SkeletalMesh): PhysicsAsset

    @JsName("C")
    public fun copy(other: UObject): EditorSkeletalMeshLibrary

    @JsName("C")
    public fun copy(other: Any): EditorSkeletalMeshLibrary
  }
}

public open external class EditorStaticMeshLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorStaticMeshLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorStaticMeshLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorStaticMeshLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorStaticMeshLibrary

    @JsName("SetLodsWithNotification")
    public fun setLodsWithNotification(
      staticMesh: StaticMesh,
      reductionOptions: StaticMeshReductionOptions,
      applyChanges: Boolean,
    ): Number

    @JsName("SetLods")
    public fun setLods(staticMesh: StaticMesh, reductionOptions: StaticMeshReductionOptions): Number

    @JsName("SetLodReductionSettings")
    public fun setLodReductionSettings(
      staticMesh: StaticMesh,
      lodIndex: Number,
      reductionOptions: MeshReductionSettings,
    ): Unit

    @JsName("SetLodFromStaticMesh")
    public fun setLodFromStaticMesh(
      destinationStaticMesh: StaticMesh,
      destinationLodIndex: Number,
      sourceStaticMesh: StaticMesh,
      sourceLodIndex: Number,
      reuseExistingMaterialSlots: Boolean,
    ): Number

    @JsName("SetLodBuildSettings")
    public fun setLodBuildSettings(
      staticMesh: StaticMesh,
      lodIndex: Number,
      buildOptions: MeshBuildSettings,
    ): Unit

    @JsName("SetGenerateLightmapUVs")
    public fun setGenerateLightmapUVs(staticMesh: StaticMesh, generateLightmapUVs: Boolean): Boolean

    @JsName("SetConvexDecompositionCollisionsWithNotification")
    public fun setConvexDecompositionCollisionsWithNotification(
      staticMesh: StaticMesh,
      hullCount: Number,
      maxHullVerts: Number,
      hullPrecision: Number,
      applyChanges: Boolean,
    ): Boolean

    @JsName("SetConvexDecompositionCollisions")
    public fun setConvexDecompositionCollisions(
      staticMesh: StaticMesh,
      hullCount: Number,
      maxHullVerts: Number,
      hullPrecision: Number,
    ): Boolean

    @JsName("SetAllowCPUAccess")
    public fun setAllowCpuAccess(staticMesh: StaticMesh, allowCpuAccess: Boolean): Unit

    @JsName("RemoveUVChannel")
    public fun removeUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
    ): Boolean

    @JsName("RemoveLods")
    public fun removeLods(staticMesh: StaticMesh): Boolean

    @JsName("RemoveCollisionsWithNotification")
    public fun removeCollisionsWithNotification(staticMesh: StaticMesh, applyChanges: Boolean):
        Boolean

    @JsName("RemoveCollisions")
    public fun removeCollisions(staticMesh: StaticMesh): Boolean

    @JsName("ReimportAllCustomLODs")
    public fun reimportAllCustomLoDs(staticMesh: StaticMesh): Boolean

    @JsName("IsSectionCollisionEnabled")
    public fun isSectionCollisionEnabled(
      staticMesh: StaticMesh,
      lodIndex: Number,
      sectionIndex: Number,
    ): Boolean

    @JsName("InsertUVChannel")
    public fun insertUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
    ): Boolean

    @JsName("ImportLOD")
    public fun importLod(
      baseStaticMesh: StaticMesh,
      lodIndex: Number,
      sourceFilename: String,
    ): Number

    @JsName("HasVertexColors")
    public fun hasVertexColors(staticMesh: StaticMesh): Boolean

    @JsName("HasInstanceVertexColors")
    public fun hasInstanceVertexColors(staticMeshComponent: StaticMeshComponent): Boolean

    @JsName("GetSimpleCollisionCount")
    public fun getSimpleCollisionCount(staticMesh: StaticMesh): Number

    @JsName("GetNumUVChannels")
    public fun getNumUvChannels(staticMesh: StaticMesh, lodIndex: Number): Number

    @JsName("GetNumberVerts")
    public fun getNumberVerts(staticMesh: StaticMesh, lodIndex: Number): Number

    @JsName("GetNumberMaterials")
    public fun getNumberMaterials(staticMesh: StaticMesh): Number

    @JsName("GetLodScreenSizes")
    public fun getLodScreenSizes(staticMesh: StaticMesh): Array<Number>

    @JsName("GetLodReductionSettings")
    public fun getLodReductionSettings(
      staticMesh: StaticMesh,
      lodIndex: Number,
      outReductionOptions: MeshReductionSettings,
    ): OutReductionOptionsProvider

    @JsName("GetLodCount")
    public fun getLodCount(staticMesh: StaticMesh): Number

    @JsName("GetLodBuildSettings")
    public fun getLodBuildSettings(
      staticMesh: StaticMesh,
      lodIndex: Number,
      outBuildOptions: MeshBuildSettings,
    ): MeshOutBuildOptionsProvider

    @JsName("GetConvexCollisionCount")
    public fun getConvexCollisionCount(staticMesh: StaticMesh): Number

    @JsName("GetCollisionComplexity")
    public fun getCollisionComplexity(staticMesh: StaticMesh): String

    @JsName("GeneratePlanarUVChannel")
    public fun generatePlanarUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
      position: Vector,
      orientation: Rotator,
      tiling: Vector2d,
    ): Boolean

    @JsName("GenerateCylindricalUVChannel")
    public fun generateCylindricalUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
      position: Vector,
      orientation: Rotator,
      tiling: Vector2d,
    ): Boolean

    @JsName("GenerateBoxUVChannel")
    public fun generateBoxUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
      position: Vector,
      orientation: Rotator,
      size: Vector,
    ): Boolean

    @JsName("EnableSectionCollision")
    public fun enableSectionCollision(
      staticMesh: StaticMesh,
      collisionEnabled: Boolean,
      lodIndex: Number,
      sectionIndex: Number,
    ): Unit

    @JsName("EnableSectionCastShadow")
    public fun enableSectionCastShadow(
      staticMesh: StaticMesh,
      castShadow: Boolean,
      lodIndex: Number,
      sectionIndex: Number,
    ): Unit

    @JsName("BulkSetConvexDecompositionCollisionsWithNotification")
    public fun bulkSetConvexDecompositionCollisionsWithNotification(
      staticMeshes: Array<StaticMesh>,
      hullCount: Number,
      maxHullVerts: Number,
      hullPrecision: Number,
      applyChanges: Boolean,
    ): Boolean

    @JsName("BulkSetConvexDecompositionCollisions")
    public fun bulkSetConvexDecompositionCollisions(
      staticMeshes: Array<StaticMesh>,
      hullCount: Number,
      maxHullVerts: Number,
      hullPrecision: Number,
    ): Boolean

    @JsName("AddUVChannel")
    public fun addUvChannel(staticMesh: StaticMesh, lodIndex: Number): Boolean

    @JsName("AddSimpleCollisionsWithNotification")
    public fun addSimpleCollisionsWithNotification(
      staticMesh: StaticMesh,
      shapeType: String,
      applyChanges: Boolean,
    ): Number

    @JsName("AddSimpleCollisions")
    public fun addSimpleCollisions(staticMesh: StaticMesh, shapeType: String): Number

    @JsName("C")
    public fun copy(other: UObject): EditorStaticMeshLibrary

    @JsName("C")
    public fun copy(other: Any): EditorStaticMeshLibrary
  }
}

public open external class CachedMotionAnalysisProperties(
  outer: UObject,
) : CachedAnalysisProperties {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CachedMotionAnalysisProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CachedMotionAnalysisProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CachedMotionAnalysisProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CachedMotionAnalysisProperties

    @JsName("C")
    public fun copy(other: UObject): CachedMotionAnalysisProperties

    @JsName("C")
    public fun copy(other: Any): CachedMotionAnalysisProperties
  }
}

@JsName("EAnalysisLocomotionAxis")
public external object AnalysisLocomotionAxis {
  public var Speed: String

  public var Direction: String

  public var ForwardSpeed: String

  public var RightwardSpeed: String

  public var UpwardSpeed: String

  public var ForwardSlope: String

  public var RightwardSlope: String

  @JsName("EAnalysisLocomotionAxis_MAX")
  public var Max: String
}

public open external class LocomotionAnalysisProperties(
  outer: UObject,
) : AnalysisProperties {
  @JsName("FunctionAxis")
  public open var functionAxis: String

  @JsName("PrimaryBoneSocket")
  public open var primaryBoneSocket: BoneSocketTarget

  @JsName("SecondaryBoneSocket")
  public open var secondaryBoneSocket: BoneSocketTarget

  @JsName("CharacterFacingAxis")
  public open var characterFacingAxis: String

  @JsName("CharacterUpAxis")
  public open var characterUpAxis: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocomotionAnalysisProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocomotionAnalysisProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocomotionAnalysisProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocomotionAnalysisProperties

    @JsName("C")
    public fun copy(other: UObject): LocomotionAnalysisProperties

    @JsName("C")
    public fun copy(other: Any): LocomotionAnalysisProperties
  }
}

@JsName("EAnalysisRootMotionAxis")
public external object AnalysisRootMotionAxis {
  public var Speed: String

  public var Direction: String

  public var ForwardSpeed: String

  public var RightwardSpeed: String

  public var UpwardSpeed: String

  public var ForwardSlope: String

  public var RightwardSlope: String

  @JsName("EAnalysisRootMotionAxis_MAX")
  public var Max: String
}

public open external class RootMotionAnalysisProperties(
  outer: UObject,
) : AnalysisProperties {
  @JsName("FunctionAxis")
  public open var functionAxis: String

  @JsName("BoneSocket")
  public open var boneSocket: BoneSocketTarget

  @JsName("Space")
  public open var space: String

  @JsName("SpaceBoneSocket")
  public open var spaceBoneSocket: BoneSocketTarget

  @JsName("CharacterFacingAxis")
  public open var characterFacingAxis: String

  @JsName("CharacterUpAxis")
  public open var characterUpAxis: String

  @JsName("StartTimeFraction")
  public open var startTimeFraction: Number

  @JsName("EndTimeFraction")
  public open var endTimeFraction: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RootMotionAnalysisProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RootMotionAnalysisProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RootMotionAnalysisProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RootMotionAnalysisProperties

    @JsName("C")
    public fun copy(other: UObject): RootMotionAnalysisProperties

    @JsName("C")
    public fun copy(other: Any): RootMotionAnalysisProperties
  }
}

public open external class DynamicMeshGenerator(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshGenerator

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshGenerator

    @JsName("C")
    public fun copy(other: Any): DynamicMeshGenerator
  }
}

public open external class DynamicMesh(
  outer: UObject,
) : UObject {
  @JsName("MeshModifiedBPEvent")
  public open var meshModifiedBpEvent: UnrealEngineMulticastDelegate<(Mesh: DynamicMesh) -> Unit>

  @JsName("MeshGenerator")
  public open var meshGenerator: DynamicMeshGenerator

  @JsName("bEnableMeshGenerator")
  public open var enableMeshGenerator: Boolean

  @JsName("ResetToCube")
  public open fun resetToCube(): DynamicMesh

  @JsName("Reset")
  public open fun reset(): DynamicMesh

  @JsName("IsEmpty")
  public open fun isEmpty(): Boolean

  @JsName("GetTriangleCount")
  public open fun getTriangleCount(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMesh

    @JsName("C")
    public fun copy(other: UObject): DynamicMesh

    @JsName("C")
    public fun copy(other: Any): DynamicMesh
  }
}

public open external class BaseDynamicMeshComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("bExplicitShowWireframe")
  public open var explicitShowWireframe: Boolean

  @JsName("bEnableViewModeOverrides")
  public open var enableViewModeOverrides: Boolean

  @JsName("OverrideRenderMaterial")
  public open var overrideRenderMaterial: MaterialInterface

  @JsName("SecondaryRenderMaterial")
  public open var secondaryRenderMaterial: MaterialInterface

  @JsName("bEnableRayTracing")
  public open var enableRayTracing: Boolean

  @JsName("BaseMaterials")
  public open var baseMaterials: Array<MaterialInterface>

  @JsName("SetViewModeOverridesEnabled")
  public open fun setViewModeOverridesEnabled(enabled: Boolean): Unit

  @JsName("SetShadowsEnabled")
  public open fun setShadowsEnabled(enabled: Boolean): Unit

  @JsName("SetSecondaryRenderMaterial")
  public open fun setSecondaryRenderMaterial(material: MaterialInterface): Unit

  @JsName("SetSecondaryBuffersVisibility")
  public open fun setSecondaryBuffersVisibility(setVisible: Boolean): Unit

  @JsName("SetOverrideRenderMaterial")
  public open fun setOverrideRenderMaterial(material: MaterialInterface): Unit

  @JsName("SetEnableWireframeRenderPass")
  public open fun setEnableWireframeRenderPass(enable: Boolean): Unit

  @JsName("SetEnableRaytracing")
  public open fun setEnableRaytracing(setEnabled: Boolean): Unit

  @JsName("HasOverrideRenderMaterial")
  public open fun hasOverrideRenderMaterial(k: Number): Boolean

  @JsName("GetViewModeOverridesEnabled")
  public open fun getViewModeOverridesEnabled(): Boolean

  @JsName("GetShadowsEnabled")
  public open fun getShadowsEnabled(): Boolean

  @JsName("GetSecondaryRenderMaterial")
  public open fun getSecondaryRenderMaterial(): MaterialInterface

  @JsName("GetSecondaryBuffersVisibility")
  public open fun getSecondaryBuffersVisibility(): Boolean

  @JsName("GetOverrideRenderMaterial")
  public open fun getOverrideRenderMaterial(materialIndex: Number): MaterialInterface

  @JsName("GetEnableWireframeRenderPass")
  public open fun getEnableWireframeRenderPass(): Boolean

  @JsName("GetEnableRaytracing")
  public open fun getEnableRaytracing(): Boolean

  @JsName("GetDynamicMesh")
  public open fun getDynamicMesh(): DynamicMesh

  @JsName("ClearSecondaryRenderMaterial")
  public open fun clearSecondaryRenderMaterial(): Unit

  @JsName("ClearOverrideRenderMaterial")
  public open fun clearOverrideRenderMaterial(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseDynamicMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseDynamicMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseDynamicMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseDynamicMeshComponent

    @JsName("C")
    public fun copy(other: UObject): BaseDynamicMeshComponent

    @JsName("C")
    public fun copy(other: Any): BaseDynamicMeshComponent
  }
}

@JsName("EDynamicMeshComponentTangentsMode")
public external object DynamicMeshComponentTangentsMode {
  public var NoTangents: String

  public var AutoCalculated: String

  public var ExternallyProvided: String

  @JsName("EDynamicMeshComponentTangentsMode_MAX")
  public var Max: String
}

public open external class DynamicMeshComponent(
  outer: UObject,
) : BaseDynamicMeshComponent {
  @JsName("MeshObject")
  public open var meshObject: DynamicMesh

  @JsName("TangentsType")
  public open var tangentsType: String

  @JsName("CollisionType")
  public open var collisionType: String

  @JsName("bEnableComplexCollision")
  public open var enableComplexCollision: Boolean

  @JsName("bDeferCollisionUpdates")
  public open var deferCollisionUpdates: Boolean

  @JsName("MeshBodySetup")
  public open var meshBodySetup: BodySetup

  @JsName("ValidateMaterialSlots")
  public open fun validateMaterialSlots(createIfMissing: Boolean, deleteExtraSlots: Boolean):
      Boolean

  @JsName("UpdateCollision")
  public open fun updateCollision(onlyIfPending: Boolean): Unit

  @JsName("SetTangentsType")
  public open fun setTangentsType(newTangentsType: String): Unit

  @JsName("SetDynamicMesh")
  public open fun setDynamicMesh(newMesh: DynamicMesh): Unit

  @JsName("SetDeferredCollisionUpdatesEnabled")
  public open fun setDeferredCollisionUpdatesEnabled(enabled: Boolean, immediateUpdate: Boolean):
      Unit

  @JsName("SetComplexAsSimpleCollisionEnabled")
  public open fun setComplexAsSimpleCollisionEnabled(enabled: Boolean, immediateUpdate: Boolean):
      Unit

  @JsName("GetTangentsType")
  public open fun getTangentsType(): String

  @JsName("EnableComplexAsSimpleCollision")
  public open fun enableComplexAsSimpleCollision(): Unit

  @JsName("ConfigureMaterialSet")
  public open fun configureMaterialSet(newMaterialSet: Array<MaterialInterface>): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshComponent

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshComponent

    @JsName("C")
    public fun copy(other: Any): DynamicMeshComponent
  }
}

public open external class DynamicMeshPool(
  outer: UObject,
) : UObject {
  @JsName("CachedMeshes")
  public open var cachedMeshes: Array<DynamicMesh>

  @JsName("AllCreatedMeshes")
  public open var allCreatedMeshes: Array<DynamicMesh>

  @JsName("ReturnMesh")
  public open fun returnMesh(mesh: DynamicMesh): Unit

  @JsName("ReturnAllMeshes")
  public open fun returnAllMeshes(): Unit

  @JsName("RequestMesh")
  public open fun requestMesh(): DynamicMesh

  @JsName("FreeAllMeshes")
  public open fun freeAllMeshes(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshPool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshPool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshPool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshPool

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshPool

    @JsName("C")
    public fun copy(other: Any): DynamicMeshPool
  }
}

public open external class DynamicMeshActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("DynamicMeshComponent")
  public open var dynamicMeshComponent: DynamicMeshComponent

  @JsName("bEnableComputeMeshPool")
  public open var enableComputeMeshPool: Boolean

  @JsName("DynamicMeshPool")
  public open var dynamicMeshPool: DynamicMeshPool

  @JsName("ReleaseComputeMesh")
  public open fun releaseComputeMesh(mesh: DynamicMesh): Boolean

  @JsName("ReleaseAllComputeMeshes")
  public open fun releaseAllComputeMeshes(): Unit

  @JsName("GetDynamicMeshComponent")
  public open fun getDynamicMeshComponent(): DynamicMeshComponent

  @JsName("GetComputeMeshPool")
  public open fun getComputeMeshPool(): DynamicMeshPool

  @JsName("FreeAllComputeMeshes")
  public open fun freeAllComputeMeshes(): Unit

  @JsName("AllocateComputeMesh")
  public open fun allocateComputeMesh(): DynamicMesh

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshActor

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshActor

    @JsName("C")
    public fun copy(other: Any): DynamicMeshActor
  }
}

public open external class MeshCommandChangeTarget(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshCommandChangeTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshCommandChangeTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshCommandChangeTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshCommandChangeTarget

    @JsName("C")
    public fun copy(other: UObject): MeshCommandChangeTarget

    @JsName("C")
    public fun copy(other: Any): MeshCommandChangeTarget
  }
}

public open external class MeshReplacementCommandChangeTarget(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshReplacementCommandChangeTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshReplacementCommandChangeTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshReplacementCommandChangeTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshReplacementCommandChangeTarget

    @JsName("C")
    public fun copy(other: UObject): MeshReplacementCommandChangeTarget

    @JsName("C")
    public fun copy(other: Any): MeshReplacementCommandChangeTarget
  }
}

public open external class MeshVertexCommandChangeTarget(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshVertexCommandChangeTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshVertexCommandChangeTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshVertexCommandChangeTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshVertexCommandChangeTarget

    @JsName("C")
    public fun copy(other: UObject): MeshVertexCommandChangeTarget

    @JsName("C")
    public fun copy(other: Any): MeshVertexCommandChangeTarget
  }
}

public open external class MultiSelectionMeshEditingToolBuilder(
  outer: UObject,
) : InteractiveToolWithToolTargetsBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MultiSelectionMeshEditingToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MultiSelectionMeshEditingToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MultiSelectionMeshEditingToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MultiSelectionMeshEditingToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MultiSelectionMeshEditingToolBuilder

    @JsName("C")
    public fun copy(other: Any): MultiSelectionMeshEditingToolBuilder
  }
}

public open external class BaseCreateFromSelectedToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseCreateFromSelectedToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseCreateFromSelectedToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseCreateFromSelectedToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseCreateFromSelectedToolBuilder

    @JsName("C")
    public fun copy(other: UObject): BaseCreateFromSelectedToolBuilder

    @JsName("C")
    public fun copy(other: Any): BaseCreateFromSelectedToolBuilder
  }
}

public open external class OnAcceptHandleSourcesPropertiesBase(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnAcceptHandleSourcesPropertiesBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnAcceptHandleSourcesPropertiesBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnAcceptHandleSourcesPropertiesBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnAcceptHandleSourcesPropertiesBase

    @JsName("C")
    public fun copy(other: UObject): OnAcceptHandleSourcesPropertiesBase

    @JsName("C")
    public fun copy(other: Any): OnAcceptHandleSourcesPropertiesBase
  }
}

@JsName("EHandleSourcesMethod")
public external object HandleSourcesMethod {
  public var DeleteSources: String

  public var HideSources: String

  public var KeepSources: String

  public var KeepFirstSource: String

  public var KeepLastSource: String

  @JsName("EHandleSourcesMethod_MAX")
  public var Max: String
}

public open external class OnAcceptHandleSourcesProperties(
  outer: UObject,
) : OnAcceptHandleSourcesPropertiesBase {
  @JsName("HandleInputs")
  public open var handleInputs: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnAcceptHandleSourcesProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnAcceptHandleSourcesProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnAcceptHandleSourcesProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnAcceptHandleSourcesProperties

    @JsName("C")
    public fun copy(other: UObject): OnAcceptHandleSourcesProperties

    @JsName("C")
    public fun copy(other: Any): OnAcceptHandleSourcesProperties
  }
}

@JsName("EBaseCreateFromSelectedTargetType")
public external object BaseCreateFromSelectedTargetType {
  public var NewObject: String

  public var FirstInputObject: String

  public var LastInputObject: String

  @JsName("EBaseCreateFromSelectedTargetType_MAX")
  public var Max: String
}

public open external class BaseCreateFromSelectedHandleSourceProperties(
  outer: UObject,
) : OnAcceptHandleSourcesProperties {
  @JsName("OutputWriteTo")
  public open var outputWriteTo: String

  @JsName("OutputNewName")
  public open var outputNewName: String

  @JsName("OutputExistingName")
  public open var outputExistingName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseCreateFromSelectedHandleSourceProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        BaseCreateFromSelectedHandleSourceProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseCreateFromSelectedHandleSourceProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseCreateFromSelectedHandleSourceProperties

    @JsName("C")
    public fun copy(other: UObject): BaseCreateFromSelectedHandleSourceProperties

    @JsName("C")
    public fun copy(other: Any): BaseCreateFromSelectedHandleSourceProperties
  }
}

public open external class TransformInputsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bShowTransformGizmo")
  public open var showTransformGizmo: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransformInputsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransformInputsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransformInputsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransformInputsToolProperties

    @JsName("C")
    public fun copy(other: UObject): TransformInputsToolProperties

    @JsName("C")
    public fun copy(other: Any): TransformInputsToolProperties
  }
}

public open external class MultiSelectionMeshEditingTool(
  outer: UObject,
) : MultiSelectionTool {
  @JsName("TargetWorld")
  public open var targetWorld: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MultiSelectionMeshEditingTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MultiSelectionMeshEditingTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MultiSelectionMeshEditingTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MultiSelectionMeshEditingTool

    @JsName("C")
    public fun copy(other: UObject): MultiSelectionMeshEditingTool

    @JsName("C")
    public fun copy(other: Any): MultiSelectionMeshEditingTool
  }
}

@JsName("ECreateObjectTypeHint")
public external object CreateObjectTypeHint {
  public var Undefined: String

  public var StaticMesh: String

  public var Volume: String

  public var DynamicMeshActor: String

  @JsName("ECreateObjectTypeHint_MAX")
  public var Max: String
}

public open external class CreateMeshObjectTypeProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("OutputType")
  public open var outputType: String

  @JsName("VolumeType")
  public open var volumeType: UnrealEngineClass

  @JsName("OutputTypeNamesList")
  public open var outputTypeNamesList: Array<String>

  @JsName("bShowVolumeList")
  public open var showVolumeList: Boolean

  @JsName("ShouldShowPropertySet")
  public open fun shouldShowPropertySet(): Boolean

  @JsName("GetOutputTypeNamesFunc")
  public open fun getOutputTypeNamesFunc(): Array<String>

  @JsName("GetCurrentCreateMeshType")
  public open fun getCurrentCreateMeshType(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CreateMeshObjectTypeProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CreateMeshObjectTypeProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CreateMeshObjectTypeProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CreateMeshObjectTypeProperties

    @JsName("C")
    public fun copy(other: UObject): CreateMeshObjectTypeProperties

    @JsName("C")
    public fun copy(other: Any): CreateMeshObjectTypeProperties
  }
}

public open external class PreviewMesh(
  outer: UObject,
) : UObject {
  @JsName("bBuildSpatialDataStructure")
  public open var buildSpatialDataStructure: Boolean

  @JsName("DynamicMeshComponent")
  public open var dynamicMeshComponent: DynamicMeshComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PreviewMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PreviewMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PreviewMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PreviewMesh

    @JsName("C")
    public fun copy(other: UObject): PreviewMesh

    @JsName("C")
    public fun copy(other: Any): PreviewMesh
  }
}

public open external class MeshOpPreviewWithBackgroundCompute(
  outer: UObject,
) : UObject {
  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("StandardMaterials")
  public open var standardMaterials: Array<MaterialInterface>

  @JsName("OverrideMaterial")
  public open var overrideMaterial: MaterialInterface

  @JsName("WorkingMaterial")
  public open var workingMaterial: MaterialInterface

  @JsName("SecondaryMaterial")
  public open var secondaryMaterial: MaterialInterface

  @JsName("PreviewWorld")
  public open var previewWorld: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshOpPreviewWithBackgroundCompute

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshOpPreviewWithBackgroundCompute

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshOpPreviewWithBackgroundCompute

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshOpPreviewWithBackgroundCompute

    @JsName("C")
    public fun copy(other: UObject): MeshOpPreviewWithBackgroundCompute

    @JsName("C")
    public fun copy(other: Any): MeshOpPreviewWithBackgroundCompute
  }
}

public open external class BaseCreateFromSelectedTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("TransformProperties")
  public open var transformProperties: TransformInputsToolProperties

  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("HandleSourcesProperties")
  public open var handleSourcesProperties: BaseCreateFromSelectedHandleSourceProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("TransformProxies")
  public open var transformProxies: Array<TransformProxy>

  @JsName("TransformGizmos")
  public open var transformGizmos: Array<CombinedTransformGizmo>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseCreateFromSelectedTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseCreateFromSelectedTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseCreateFromSelectedTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseCreateFromSelectedTool

    @JsName("C")
    public fun copy(other: UObject): BaseCreateFromSelectedTool

    @JsName("C")
    public fun copy(other: Any): BaseCreateFromSelectedTool
  }
}

public open external class BaseMeshProcessingToolBuilder(
  outer: UObject,
) : InteractiveToolWithToolTargetsBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseMeshProcessingToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseMeshProcessingToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseMeshProcessingToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseMeshProcessingToolBuilder

    @JsName("C")
    public fun copy(other: UObject): BaseMeshProcessingToolBuilder

    @JsName("C")
    public fun copy(other: Any): BaseMeshProcessingToolBuilder
  }
}

public open external class BaseMeshProcessingTool(
  outer: UObject,
) : SingleSelectionTool {
  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseMeshProcessingTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseMeshProcessingTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseMeshProcessingTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseMeshProcessingTool

    @JsName("C")
    public fun copy(other: UObject): BaseMeshProcessingTool

    @JsName("C")
    public fun copy(other: Any): BaseMeshProcessingTool
  }
}

public open external class VoxelProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("VoxelCount")
  public open var voxelCount: Number

  @JsName("bAutoSimplify")
  public open var autoSimplify: Boolean

  @JsName("bRemoveInternalSurfaces")
  public open var removeInternalSurfaces: Boolean

  @JsName("SimplifyMaxErrorFactor")
  public open var simplifyMaxErrorFactor: Any

  @JsName("CubeRootMinComponentVolume")
  public open var cubeRootMinComponentVolume: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelProperties

    @JsName("C")
    public fun copy(other: UObject): VoxelProperties

    @JsName("C")
    public fun copy(other: Any): VoxelProperties
  }
}

public open external class BaseVoxelTool(
  outer: UObject,
) : BaseCreateFromSelectedTool {
  @JsName("VoxProperties")
  public open var voxProperties: VoxelProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseVoxelTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseVoxelTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseVoxelTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseVoxelTool

    @JsName("C")
    public fun copy(other: UObject): BaseVoxelTool

    @JsName("C")
    public fun copy(other: Any): BaseVoxelTool
  }
}

public open external class CollectSurfacePathMechanic(
  outer: UObject,
) : InteractionMechanic {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CollectSurfacePathMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CollectSurfacePathMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CollectSurfacePathMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CollectSurfacePathMechanic

    @JsName("C")
    public fun copy(other: UObject): CollectSurfacePathMechanic

    @JsName("C")
    public fun copy(other: Any): CollectSurfacePathMechanic
  }
}

public open external class ConstructionPlaneMechanic(
  outer: UObject,
) : InteractionMechanic {
  @JsName("PlaneTransformGizmo")
  public open var planeTransformGizmo: CombinedTransformGizmo

  @JsName("PlaneTransformProxy")
  public open var planeTransformProxy: TransformProxy

  @JsName("ClickToSetPlaneBehavior")
  public open var clickToSetPlaneBehavior: SingleClickInputBehavior

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConstructionPlaneMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConstructionPlaneMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConstructionPlaneMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConstructionPlaneMechanic

    @JsName("C")
    public fun copy(other: UObject): ConstructionPlaneMechanic

    @JsName("C")
    public fun copy(other: Any): ConstructionPlaneMechanic
  }
}

public open external class PreviewGeometryActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : InternalToolFrameworkActor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PreviewGeometryActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PreviewGeometryActor

    @JsName("C")
    public fun copy(other: UObject): PreviewGeometryActor

    @JsName("C")
    public fun copy(other: Any): PreviewGeometryActor
  }
}

public open external class PointSetComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("PointMaterial")
  public open var pointMaterial: MaterialInterface

  @JsName("Bounds")
  public open var bounds: BoxSphereBounds

  @JsName("bBoundsDirty")
  public open var boundsDirty: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PointSetComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PointSetComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PointSetComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PointSetComponent

    @JsName("C")
    public fun copy(other: UObject): PointSetComponent

    @JsName("C")
    public fun copy(other: Any): PointSetComponent
  }
}

public open external class LineSetComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("LineMaterial")
  public open var lineMaterial: MaterialInterface

  @JsName("Bounds")
  public open var bounds: BoxSphereBounds

  @JsName("bBoundsDirty")
  public open var boundsDirty: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LineSetComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LineSetComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LineSetComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LineSetComponent

    @JsName("C")
    public fun copy(other: UObject): LineSetComponent

    @JsName("C")
    public fun copy(other: Any): LineSetComponent
  }
}

public open external class CurveControlPointsMechanic(
  outer: UObject,
) : InteractionMechanic {
  @JsName("ClickBehavior")
  public open var clickBehavior: SingleClickInputBehavior

  @JsName("HoverBehavior")
  public open var hoverBehavior: MouseHoverBehavior

  @JsName("PreviewGeometryActor")
  public open var previewGeometryActor: PreviewGeometryActor

  @JsName("DrawnControlPoints")
  public open var drawnControlPoints: PointSetComponent

  @JsName("DrawnControlSegments")
  public open var drawnControlSegments: LineSetComponent

  @JsName("PreviewPoint")
  public open var previewPoint: PointSetComponent

  @JsName("PreviewSegment")
  public open var previewSegment: LineSetComponent

  @JsName("PointTransformProxy")
  public open var pointTransformProxy: TransformProxy

  @JsName("PointTransformGizmo")
  public open var pointTransformGizmo: CombinedTransformGizmo

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveControlPointsMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveControlPointsMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveControlPointsMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveControlPointsMechanic

    @JsName("C")
    public fun copy(other: UObject): CurveControlPointsMechanic

    @JsName("C")
    public fun copy(other: Any): CurveControlPointsMechanic
  }
}

public open external class DragAlignmentMechanic(
  outer: UObject,
) : InteractionMechanic {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DragAlignmentMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DragAlignmentMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DragAlignmentMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DragAlignmentMechanic

    @JsName("C")
    public fun copy(other: UObject): DragAlignmentMechanic

    @JsName("C")
    public fun copy(other: Any): DragAlignmentMechanic
  }
}

public open external class DynamicMeshReplacementChangeTarget(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshReplacementChangeTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshReplacementChangeTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshReplacementChangeTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshReplacementChangeTarget

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshReplacementChangeTarget

    @JsName("C")
    public fun copy(other: Any): DynamicMeshReplacementChangeTarget
  }
}

public open external class DynamicMeshCommitter(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshCommitter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshCommitter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshCommitter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshCommitter

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshCommitter

    @JsName("C")
    public fun copy(other: Any): DynamicMeshCommitter
  }
}

public open external class DynamicMeshProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshProvider

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshProvider

    @JsName("C")
    public fun copy(other: Any): DynamicMeshProvider
  }
}

public open external class PersistentDynamicMeshSource(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PersistentDynamicMeshSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PersistentDynamicMeshSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PersistentDynamicMeshSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PersistentDynamicMeshSource

    @JsName("C")
    public fun copy(other: UObject): PersistentDynamicMeshSource

    @JsName("C")
    public fun copy(other: Any): PersistentDynamicMeshSource
  }
}

public open external class InteractiveToolActivity(
  outer: UObject,
) : InteractionMechanic {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolActivity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolActivity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolActivity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolActivity

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolActivity

    @JsName("C")
    public fun copy(other: Any): InteractiveToolActivity
  }
}

public open external class ToolActivityHost(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolActivityHost

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolActivityHost

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolActivityHost

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolActivityHost

    @JsName("C")
    public fun copy(other: UObject): ToolActivityHost

    @JsName("C")
    public fun copy(other: Any): ToolActivityHost
  }
}

public open external class RectangleMarqueeMechanic(
  outer: UObject,
) : InteractionMechanic {
  @JsName("bUseExternalClickDragBehavior")
  public open var useExternalClickDragBehavior: Boolean

  @JsName("OnDragRectangleChangedDeferredThreshold")
  public open var onDragRectangleChangedDeferredThreshold: Any

  @JsName("ClickDragBehavior")
  public open var clickDragBehavior: ClickDragInputBehavior

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RectangleMarqueeMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RectangleMarqueeMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RectangleMarqueeMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RectangleMarqueeMechanic

    @JsName("C")
    public fun copy(other: UObject): RectangleMarqueeMechanic

    @JsName("C")
    public fun copy(other: Any): RectangleMarqueeMechanic
  }
}

public open external class LatticeControlPointsMechanic(
  outer: UObject,
) : InteractionMechanic {
  @JsName("PreviewGeometryActor")
  public open var previewGeometryActor: PreviewGeometryActor

  @JsName("DrawnControlPoints")
  public open var drawnControlPoints: PointSetComponent

  @JsName("DrawnLatticeEdges")
  public open var drawnLatticeEdges: LineSetComponent

  @JsName("PointTransformProxy")
  public open var pointTransformProxy: TransformProxy

  @JsName("PointTransformGizmo")
  public open var pointTransformGizmo: CombinedTransformGizmo

  @JsName("MarqueeMechanic")
  public open var marqueeMechanic: RectangleMarqueeMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LatticeControlPointsMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LatticeControlPointsMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LatticeControlPointsMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LatticeControlPointsMechanic

    @JsName("C")
    public fun copy(other: UObject): LatticeControlPointsMechanic

    @JsName("C")
    public fun copy(other: Any): LatticeControlPointsMechanic
  }
}

public open external class MeshElementsVisualizerProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bVisible")
  public open var visible: Boolean

  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  @JsName("bShowBorders")
  public open var showBorders: Boolean

  @JsName("bShowUVSeams")
  public open var showUvSeams: Boolean

  @JsName("bShowNormalSeams")
  public open var showNormalSeams: Boolean

  @JsName("bShowColorSeams")
  public open var showColorSeams: Boolean

  @JsName("ThicknessScale")
  public open var thicknessScale: Number

  @JsName("WireframeColor")
  public open var wireframeColor: Color

  @JsName("BoundaryEdgeColor")
  public open var boundaryEdgeColor: Color

  @JsName("UVSeamColor")
  public open var uvSeamColor: Color

  @JsName("NormalSeamColor")
  public open var normalSeamColor: Color

  @JsName("ColorSeamColor")
  public open var colorSeamColor: Color

  @JsName("DepthBias")
  public open var depthBias: Number

  @JsName("bAdjustDepthBiasUsingMeshSize")
  public open var adjustDepthBiasUsingMeshSize: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshElementsVisualizerProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshElementsVisualizerProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshElementsVisualizerProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshElementsVisualizerProperties

    @JsName("C")
    public fun copy(other: UObject): MeshElementsVisualizerProperties

    @JsName("C")
    public fun copy(other: Any): MeshElementsVisualizerProperties
  }
}

public open external class PreviewGeometry(
  outer: UObject,
) : UObject {
  @JsName("ParentActor")
  public open var parentActor: PreviewGeometryActor

  @JsName("LineSets")
  public open var lineSets: Any

  @JsName("PointSets")
  public open var pointSets: Any

  @JsName("SetPointSetVisibility")
  public open fun setPointSetVisibility(pointSetIdentifier: String, visible: Boolean): Boolean

  @JsName("SetPointSetMaterial")
  public open fun setPointSetMaterial(pointSetIdentifier: String, newMaterial: MaterialInterface):
      Boolean

  @JsName("SetLineSetVisibility")
  public open fun setLineSetVisibility(lineSetIdentifier: String, visible: Boolean): Boolean

  @JsName("SetLineSetMaterial")
  public open fun setLineSetMaterial(lineSetIdentifier: String, newMaterial: MaterialInterface):
      Boolean

  @JsName("SetAllPointSetsMaterial")
  public open fun setAllPointSetsMaterial(material: MaterialInterface): Unit

  @JsName("SetAllLineSetsMaterial")
  public open fun setAllLineSetsMaterial(material: MaterialInterface): Unit

  @JsName("RemovePointSet")
  public open fun removePointSet(pointSetIdentifier: String, destroy: Boolean): Boolean

  @JsName("RemoveLineSet")
  public open fun removeLineSet(lineSetIdentifier: String, destroy: Boolean): Boolean

  @JsName("RemoveAllPointSets")
  public open fun removeAllPointSets(destroy: Boolean): Unit

  @JsName("RemoveAllLineSets")
  public open fun removeAllLineSets(destroy: Boolean): Unit

  @JsName("GetActor")
  public open fun getActor(): PreviewGeometryActor

  @JsName("FindPointSet")
  public open fun findPointSet(pointSetIdentifier: String): PointSetComponent

  @JsName("FindLineSet")
  public open fun findLineSet(lineSetIdentifier: String): LineSetComponent

  @JsName("Disconnect")
  public open fun disconnect(): Unit

  @JsName("CreateInWorld")
  public open fun createInWorld(world: World, withTransform: Transform): Unit

  @JsName("AddPointSet")
  public open fun addPointSet(pointSetIdentifier: String): PointSetComponent

  @JsName("AddLineSet")
  public open fun addLineSet(lineSetIdentifier: String): LineSetComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PreviewGeometry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PreviewGeometry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PreviewGeometry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PreviewGeometry

    @JsName("C")
    public fun copy(other: UObject): PreviewGeometry

    @JsName("C")
    public fun copy(other: Any): PreviewGeometry
  }
}

public open external class MeshWireframeComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("LineDepthBias")
  public open var lineDepthBias: Number

  @JsName("LineDepthBiasSizeScale")
  public open var lineDepthBiasSizeScale: Number

  @JsName("ThicknessScale")
  public open var thicknessScale: Number

  @JsName("bEnableWireframe")
  public open var enableWireframe: Boolean

  @JsName("WireframeColor")
  public open var wireframeColor: Color

  @JsName("WireframeThickness")
  public open var wireframeThickness: Number

  @JsName("bEnableBoundaryEdges")
  public open var enableBoundaryEdges: Boolean

  @JsName("BoundaryEdgeColor")
  public open var boundaryEdgeColor: Color

  @JsName("BoundaryEdgeThickness")
  public open var boundaryEdgeThickness: Number

  @JsName("bEnableUVSeams")
  public open var enableUvSeams: Boolean

  @JsName("UVSeamColor")
  public open var uvSeamColor: Color

  @JsName("UVSeamThickness")
  public open var uvSeamThickness: Number

  @JsName("bEnableNormalSeams")
  public open var enableNormalSeams: Boolean

  @JsName("NormalSeamColor")
  public open var normalSeamColor: Color

  @JsName("NormalSeamThickness")
  public open var normalSeamThickness: Number

  @JsName("bEnableColorSeams")
  public open var enableColorSeams: Boolean

  @JsName("ColorSeamColor")
  public open var colorSeamColor: Color

  @JsName("ColorSeamThickness")
  public open var colorSeamThickness: Number

  @JsName("LineMaterial")
  public open var lineMaterial: MaterialInterface

  @JsName("LocalBounds")
  public open var localBounds: BoxSphereBounds

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshWireframeComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshWireframeComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshWireframeComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshWireframeComponent

    @JsName("C")
    public fun copy(other: UObject): MeshWireframeComponent

    @JsName("C")
    public fun copy(other: Any): MeshWireframeComponent
  }
}

public open external class MeshElementsVisualizer(
  outer: UObject,
) : PreviewGeometry {
  @JsName("Settings")
  public open var settings: MeshElementsVisualizerProperties

  @JsName("WireframeComponent")
  public open var wireframeComponent: MeshWireframeComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshElementsVisualizer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshElementsVisualizer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshElementsVisualizer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshElementsVisualizer

    @JsName("C")
    public fun copy(other: UObject): MeshElementsVisualizer

    @JsName("C")
    public fun copy(other: Any): MeshElementsVisualizer
  }
}

public open external class MeshSurfacePointMeshEditingToolBuilder(
  outer: UObject,
) : MeshSurfacePointToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSurfacePointMeshEditingToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSurfacePointMeshEditingToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSurfacePointMeshEditingToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSurfacePointMeshEditingToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshSurfacePointMeshEditingToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshSurfacePointMeshEditingToolBuilder
  }
}

public open external class ModelingComponentsSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bEnableRayTracingWhileEditing")
  public open var enableRayTracingWhileEditing: Boolean

  @JsName("bEnableRayTracing")
  public open var enableRayTracing: Boolean

  @JsName("bEnableCollision")
  public open var enableCollision: Boolean

  @JsName("CollisionMode")
  public open var collisionMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelingComponentsSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelingComponentsSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelingComponentsSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelingComponentsSettings

    @JsName("C")
    public fun copy(other: UObject): ModelingComponentsSettings

    @JsName("C")
    public fun copy(other: Any): ModelingComponentsSettings
  }
}

public open external class CreateTextureObjectParams {
  @JsName("TypeHintExtended")
  public open var typeHintExtended: Number

  @JsName("TargetWorld")
  public open var targetWorld: World

  @JsName("StoreRelativeToObject")
  public open var storeRelativeToObject: UObject

  @JsName("BaseName")
  public open var baseName: String

  @JsName("GeneratedTransientTexture")
  public open var generatedTransientTexture: Texture2d

  public open fun clone(): CreateTextureObjectParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CreateTextureObjectParams

    @JsName("C")
    public fun copy(other: Any): CreateTextureObjectParams
  }
}

@JsName("ECreateModelingObjectResult")
public external object CreateModelingObjectResult {
  public var Ok: String

  public var Cancelled: String

  @JsName("Failed_Unknown")
  public var FailedUnknown: String

  @JsName("Failed_NoAPIFound")
  public var FailedNoApiFound: String

  @JsName("Failed_InvalidWorld")
  public var FailedInvalidWorld: String

  @JsName("Failed_InvalidMesh")
  public var FailedInvalidMesh: String

  @JsName("Failed_InvalidTexture")
  public var FailedInvalidTexture: String

  @JsName("Failed_AssetCreationFailed")
  public var FailedAssetCreationFailed: String

  @JsName("ECreateModelingObjectResult_MAX")
  public var Max: String
}

public open external class CreateTextureObjectResult {
  @JsName("ResultCode")
  public open var resultCode: String

  @JsName("NewAsset")
  public open var newAsset: UObject

  public open fun clone(): CreateTextureObjectResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CreateTextureObjectResult

    @JsName("C")
    public fun copy(other: Any): CreateTextureObjectResult
  }
}

public open external class CreateMeshObjectParams {
  @JsName("SourceComponent")
  public open var sourceComponent: PrimitiveComponent

  @JsName("TypeHint")
  public open var typeHint: String

  @JsName("TypeHintClass")
  public open var typeHintClass: UnrealEngineClass

  @JsName("TypeHintExtended")
  public open var typeHintExtended: Number

  @JsName("TargetWorld")
  public open var targetWorld: World

  @JsName("Transform")
  public open var transform: Transform

  @JsName("BaseName")
  public open var baseName: String

  @JsName("Materials")
  public open var materials: Array<MaterialInterface>

  @JsName("AssetMaterials")
  public open var assetMaterials: Array<MaterialInterface>

  @JsName("bEnableCollision")
  public open var enableCollision: Boolean

  @JsName("CollisionMode")
  public open var collisionMode: String

  @JsName("bEnableRaytracingSupport")
  public open var enableRaytracingSupport: Boolean

  @JsName("bEnableRecomputeNormals")
  public open var enableRecomputeNormals: Boolean

  @JsName("bEnableRecomputeTangents")
  public open var enableRecomputeTangents: Boolean

  @JsName("bEnableNanite")
  public open var enableNanite: Boolean

  @JsName("NaniteProxyTrianglePercent")
  public open var naniteProxyTrianglePercent: Number

  public open fun clone(): CreateMeshObjectParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CreateMeshObjectParams

    @JsName("C")
    public fun copy(other: Any): CreateMeshObjectParams
  }
}

public open external class CreateMeshObjectResult {
  @JsName("ResultCode")
  public open var resultCode: String

  @JsName("NewActor")
  public open var newActor: Actor

  @JsName("NewComponent")
  public open var newComponent: PrimitiveComponent

  @JsName("NewAsset")
  public open var newAsset: UObject

  public open fun clone(): CreateMeshObjectResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CreateMeshObjectResult

    @JsName("C")
    public fun copy(other: Any): CreateMeshObjectResult
  }
}

@JsName("ModelingObjectsCreationAPI")
public open external class ModelingObjectsCreationApi(
  outer: UObject,
) : UObject {
  @JsName("CreateTextureObject")
  public open fun createTextureObject(createTexParams: CreateTextureObjectParams):
      CreateTextureObjectResult

  @JsName("CreateMeshObject")
  public open fun createMeshObject(createMeshParams: CreateMeshObjectParams): CreateMeshObjectResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelingObjectsCreationApi

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelingObjectsCreationApi

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelingObjectsCreationApi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelingObjectsCreationApi

    @JsName("C")
    public fun copy(other: UObject): ModelingObjectsCreationApi

    @JsName("C")
    public fun copy(other: Any): ModelingObjectsCreationApi
  }
}

public open external class ModelingSceneSnappingManager(
  outer: UObject,
) : SceneSnappingManager {
  @JsName("ParentContext")
  public open var parentContext: InteractiveToolsContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelingSceneSnappingManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelingSceneSnappingManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelingSceneSnappingManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelingSceneSnappingManager

    @JsName("C")
    public fun copy(other: UObject): ModelingSceneSnappingManager

    @JsName("C")
    public fun copy(other: Any): ModelingSceneSnappingManager
  }
}

public open external class MultiTransformer(
  outer: UObject,
) : UObject {
  @JsName("GizmoManager")
  public open var gizmoManager: InteractiveGizmoManager

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("DragAlignmentMechanic")
  public open var dragAlignmentMechanic: DragAlignmentMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MultiTransformer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MultiTransformer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MultiTransformer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MultiTransformer

    @JsName("C")
    public fun copy(other: UObject): MultiTransformer

    @JsName("C")
    public fun copy(other: Any): MultiTransformer
  }
}

public open external class OctreeDynamicMeshComponent(
  outer: UObject,
) : BaseDynamicMeshComponent {
  @JsName("MeshObject")
  public open var meshObject: DynamicMesh

  @JsName("SetDynamicMesh")
  public open fun setDynamicMesh(newMesh: DynamicMesh): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OctreeDynamicMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OctreeDynamicMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OctreeDynamicMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OctreeDynamicMeshComponent

    @JsName("C")
    public fun copy(other: UObject): OctreeDynamicMeshComponent

    @JsName("C")
    public fun copy(other: Any): OctreeDynamicMeshComponent
  }
}

public open external class OnAcceptHandleSourcesPropertiesSingle(
  outer: UObject,
) : OnAcceptHandleSourcesPropertiesBase {
  @JsName("HandleInputs")
  public open var handleInputs: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnAcceptHandleSourcesPropertiesSingle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnAcceptHandleSourcesPropertiesSingle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnAcceptHandleSourcesPropertiesSingle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnAcceptHandleSourcesPropertiesSingle

    @JsName("C")
    public fun copy(other: UObject): OnAcceptHandleSourcesPropertiesSingle

    @JsName("C")
    public fun copy(other: Any): OnAcceptHandleSourcesPropertiesSingle
  }
}

public open external class PersistentMeshSelection(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PersistentMeshSelection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PersistentMeshSelection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PersistentMeshSelection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PersistentMeshSelection

    @JsName("C")
    public fun copy(other: UObject): PersistentMeshSelection

    @JsName("C")
    public fun copy(other: Any): PersistentMeshSelection
  }
}

public open external class PersistentMeshSelectionManager(
  outer: UObject,
) : UObject {
  @JsName("ParentContext")
  public open var parentContext: InteractiveToolsContext

  @JsName("ActiveSelection")
  public open var activeSelection: PersistentMeshSelection

  @JsName("SelectionDisplay")
  public open var selectionDisplay: PreviewGeometry

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PersistentMeshSelectionManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PersistentMeshSelectionManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PersistentMeshSelectionManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PersistentMeshSelectionManager

    @JsName("C")
    public fun copy(other: UObject): PersistentMeshSelectionManager

    @JsName("C")
    public fun copy(other: Any): PersistentMeshSelectionManager
  }
}

public open external class PlaneDistanceFromHitMechanic(
  outer: UObject,
) : InteractionMechanic {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlaneDistanceFromHitMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlaneDistanceFromHitMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlaneDistanceFromHitMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlaneDistanceFromHitMechanic

    @JsName("C")
    public fun copy(other: UObject): PlaneDistanceFromHitMechanic

    @JsName("C")
    public fun copy(other: Any): PlaneDistanceFromHitMechanic
  }
}

public open external class PolyEditPreviewMesh(
  outer: UObject,
) : PreviewMesh {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditPreviewMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditPreviewMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditPreviewMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditPreviewMesh

    @JsName("C")
    public fun copy(other: UObject): PolyEditPreviewMesh

    @JsName("C")
    public fun copy(other: Any): PolyEditPreviewMesh
  }
}

public open external class PolygonSelectionMechanicProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bSelectVertices")
  public open var selectVertices: Boolean

  @JsName("bSelectEdges")
  public open var selectEdges: Boolean

  @JsName("bSelectFaces")
  public open var selectFaces: Boolean

  @JsName("bSelectEdgeLoops")
  public open var selectEdgeLoops: Boolean

  @JsName("bSelectEdgeRings")
  public open var selectEdgeRings: Boolean

  @JsName("bHitBackFaces")
  public open var hitBackFaces: Boolean

  @JsName("bEnableMarquee")
  public open var enableMarquee: Boolean

  @JsName("bMarqueeIgnoreOcclusion")
  public open var marqueeIgnoreOcclusion: Boolean

  @JsName("bPreferProjectedElement")
  public open var preferProjectedElement: Boolean

  @JsName("bSelectDownRay")
  public open var selectDownRay: Boolean

  @JsName("bIgnoreOcclusion")
  public open var ignoreOcclusion: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolygonSelectionMechanicProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolygonSelectionMechanicProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolygonSelectionMechanicProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolygonSelectionMechanicProperties

    @JsName("C")
    public fun copy(other: UObject): PolygonSelectionMechanicProperties

    @JsName("C")
    public fun copy(other: Any): PolygonSelectionMechanicProperties
  }
}

public open external class TriangleSetComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("Bounds")
  public open var bounds: BoxSphereBounds

  @JsName("bBoundsDirty")
  public open var boundsDirty: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TriangleSetComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TriangleSetComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TriangleSetComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TriangleSetComponent

    @JsName("C")
    public fun copy(other: UObject): TriangleSetComponent

    @JsName("C")
    public fun copy(other: Any): TriangleSetComponent
  }
}

public open external class PolygonSelectionMechanic(
  outer: UObject,
) : InteractionMechanic {
  @JsName("Properties")
  public open var properties: PolygonSelectionMechanicProperties

  @JsName("HoverBehavior")
  public open var hoverBehavior: MouseHoverBehavior

  @JsName("ClickOrDragBehavior")
  public open var clickOrDragBehavior: SingleClickOrDragInputBehavior

  @JsName("MarqueeMechanic")
  public open var marqueeMechanic: RectangleMarqueeMechanic

  @JsName("PreviewGeometryActor")
  public open var previewGeometryActor: PreviewGeometryActor

  @JsName("DrawnTriangleSetComponent")
  public open var drawnTriangleSetComponent: TriangleSetComponent

  @JsName("HighlightedFaceMaterial")
  public open var highlightedFaceMaterial: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolygonSelectionMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolygonSelectionMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolygonSelectionMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolygonSelectionMechanic

    @JsName("C")
    public fun copy(other: UObject): PolygonSelectionMechanic

    @JsName("C")
    public fun copy(other: Any): PolygonSelectionMechanic
  }
}

public open external class PolygroupLayersProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("ActiveGroupLayer")
  public open var activeGroupLayer: String

  @JsName("GroupLayersList")
  public open var groupLayersList: Array<String>

  @JsName("GetGroupLayersFunc")
  public open fun getGroupLayersFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolygroupLayersProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolygroupLayersProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolygroupLayersProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolygroupLayersProperties

    @JsName("C")
    public fun copy(other: UObject): PolygroupLayersProperties

    @JsName("C")
    public fun copy(other: Any): PolygroupLayersProperties
  }
}

public open external class PolyLassoMarqueeMechanic(
  outer: UObject,
) : InteractionMechanic {
  @JsName("SpacingTolerance")
  public open var spacingTolerance: Number

  @JsName("LineThickness")
  public open var lineThickness: Number

  @JsName("LineColor")
  public open var lineColor: LinearColor

  @JsName("ClosedColor")
  public open var closedColor: LinearColor

  @JsName("bEnableFreehandPolygons")
  public open var enableFreehandPolygons: Boolean

  @JsName("bEnableMultiClickPolygons")
  public open var enableMultiClickPolygons: Boolean

  @JsName("ClickDragBehavior")
  public open var clickDragBehavior: ClickDragInputBehavior

  @JsName("HoverBehavior")
  public open var hoverBehavior: MouseHoverBehavior

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyLassoMarqueeMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyLassoMarqueeMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyLassoMarqueeMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyLassoMarqueeMechanic

    @JsName("C")
    public fun copy(other: UObject): PolyLassoMarqueeMechanic

    @JsName("C")
    public fun copy(other: Any): PolyLassoMarqueeMechanic
  }
}

public open external class PreviewMeshActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : InternalToolFrameworkActor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PreviewMeshActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PreviewMeshActor

    @JsName("C")
    public fun copy(other: UObject): PreviewMeshActor

    @JsName("C")
    public fun copy(other: Any): PreviewMeshActor
  }
}

public open external class SingleSelectionMeshEditingToolBuilder(
  outer: UObject,
) : InteractiveToolWithToolTargetsBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleSelectionMeshEditingToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleSelectionMeshEditingToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleSelectionMeshEditingToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleSelectionMeshEditingToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SingleSelectionMeshEditingToolBuilder

    @JsName("C")
    public fun copy(other: Any): SingleSelectionMeshEditingToolBuilder
  }
}

public open external class SingleSelectionMeshEditingTool(
  outer: UObject,
) : SingleSelectionTool {
  @JsName("TargetWorld")
  public open var targetWorld: Any

  @JsName("InputSelection")
  public open var inputSelection: PersistentMeshSelection

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleSelectionMeshEditingTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleSelectionMeshEditingTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleSelectionMeshEditingTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleSelectionMeshEditingTool

    @JsName("C")
    public fun copy(other: UObject): SingleSelectionMeshEditingTool

    @JsName("C")
    public fun copy(other: Any): SingleSelectionMeshEditingTool
  }
}

@JsName("ESpaceCurveControlPointTransformMode")
public external object SpaceCurveControlPointTransformMode {
  public var Shared: String

  public var PerVertex: String

  @JsName("ESpaceCurveControlPointTransformMode_MAX")
  public var Max: String
}

@JsName("ESpaceCurveControlPointOriginMode")
public external object SpaceCurveControlPointOriginMode {
  public var Shared: String

  public var First: String

  public var Last: String

  @JsName("ESpaceCurveControlPointOriginMode_MAX")
  public var Max: String
}

@JsName("ESpaceCurveControlPointFalloffType")
public external object SpaceCurveControlPointFalloffType {
  public var Linear: String

  public var Smooth: String

  @JsName("ESpaceCurveControlPointFalloffType_MAX")
  public var Max: String
}

public open external class SpaceCurveDeformationMechanicPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("TransformMode")
  public open var transformMode: String

  @JsName("TransformOrigin")
  public open var transformOrigin: String

  @JsName("Softness")
  public open var softness: Number

  @JsName("SoftFalloff")
  public open var softFalloff: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpaceCurveDeformationMechanicPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpaceCurveDeformationMechanicPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpaceCurveDeformationMechanicPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpaceCurveDeformationMechanicPropertySet

    @JsName("C")
    public fun copy(other: UObject): SpaceCurveDeformationMechanicPropertySet

    @JsName("C")
    public fun copy(other: Any): SpaceCurveDeformationMechanicPropertySet
  }
}

public open external class SpaceCurveDeformationMechanic(
  outer: UObject,
) : InteractionMechanic {
  @JsName("ClickBehavior")
  public open var clickBehavior: SingleClickInputBehavior

  @JsName("HoverBehavior")
  public open var hoverBehavior: MouseHoverBehavior

  @JsName("TransformProperties")
  public open var transformProperties: SpaceCurveDeformationMechanicPropertySet

  @JsName("PreviewGeometryActor")
  public open var previewGeometryActor: PreviewGeometryActor

  @JsName("RenderPoints")
  public open var renderPoints: PointSetComponent

  @JsName("RenderSegments")
  public open var renderSegments: LineSetComponent

  @JsName("PointTransformProxy")
  public open var pointTransformProxy: TransformProxy

  @JsName("PointTransformGizmo")
  public open var pointTransformGizmo: CombinedTransformGizmo

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpaceCurveDeformationMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpaceCurveDeformationMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpaceCurveDeformationMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpaceCurveDeformationMechanic

    @JsName("C")
    public fun copy(other: UObject): SpaceCurveDeformationMechanic

    @JsName("C")
    public fun copy(other: Any): SpaceCurveDeformationMechanic
  }
}

public open external class SpatialCurveDistanceMechanic(
  outer: UObject,
) : InteractionMechanic {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpatialCurveDistanceMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpatialCurveDistanceMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpatialCurveDistanceMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpatialCurveDistanceMechanic

    @JsName("C")
    public fun copy(other: UObject): SpatialCurveDistanceMechanic

    @JsName("C")
    public fun copy(other: Any): SpatialCurveDistanceMechanic
  }
}

@JsName("EUVLayoutPreviewSide")
public external object UVLayoutPreviewSide {
  public var Left: String

  public var Right: String

  @JsName("EUVLayoutPreviewSide_MAX")
  public var Max: String
}

@JsName("UVLayoutPreviewProperties")
public open external class UvLayoutPreviewProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("Side")
  public open var side: String

  @JsName("Scale")
  public open var scale: Number

  @JsName("Offset")
  public open var offset: Vector2d

  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvLayoutPreviewProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvLayoutPreviewProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvLayoutPreviewProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvLayoutPreviewProperties

    @JsName("C")
    public fun copy(other: UObject): UvLayoutPreviewProperties

    @JsName("C")
    public fun copy(other: Any): UvLayoutPreviewProperties
  }
}

@JsName("UVLayoutPreview")
public open external class UvLayoutPreview(
  outer: UObject,
) : UObject {
  @JsName("Settings")
  public open var settings: UvLayoutPreviewProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("TriangleComponent")
  public open var triangleComponent: TriangleSetComponent

  @JsName("bShowBackingRectangle")
  public open var showBackingRectangle: Boolean

  @JsName("BackingRectangleMaterial")
  public open var backingRectangleMaterial: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvLayoutPreview

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvLayoutPreview

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvLayoutPreview

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvLayoutPreview

    @JsName("C")
    public fun copy(other: UObject): UvLayoutPreview

    @JsName("C")
    public fun copy(other: Any): UvLayoutPreview
  }
}

public open external class WeightMapSetProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("WeightMap")
  public open var weightMap: String

  @JsName("WeightMapsList")
  public open var weightMapsList: Array<String>

  @JsName("bInvertWeightMap")
  public open var invertWeightMap: Boolean

  @JsName("GetWeightMapsFunc")
  public open fun getWeightMapsFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WeightMapSetProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WeightMapSetProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WeightMapSetProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WeightMapSetProperties

    @JsName("C")
    public fun copy(other: UObject): WeightMapSetProperties

    @JsName("C")
    public fun copy(other: Any): WeightMapSetProperties
  }
}

public open external class DynamicMeshComponentToolTarget(
  outer: UObject,
) : PrimitiveComponentToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshComponentToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshComponentToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshComponentToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshComponentToolTarget

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshComponentToolTarget

    @JsName("C")
    public fun copy(other: Any): DynamicMeshComponentToolTarget
  }
}

public open external class DynamicMeshComponentToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshComponentToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshComponentToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshComponentToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): DynamicMeshComponentToolTargetFactory
  }
}

@JsName("EditorModelingObjectsCreationAPI")
public open external class EditorModelingObjectsCreationApi(
  outer: UObject,
) : ModelingObjectsCreationApi {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorModelingObjectsCreationApi

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorModelingObjectsCreationApi

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorModelingObjectsCreationApi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorModelingObjectsCreationApi

    @JsName("C")
    public fun copy(other: UObject): EditorModelingObjectsCreationApi

    @JsName("C")
    public fun copy(other: Any): EditorModelingObjectsCreationApi
  }
}

public open external class SkeletalMeshComponentReadOnlyToolTarget(
  outer: UObject,
) : PrimitiveComponentToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshComponentReadOnlyToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshComponentReadOnlyToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshComponentReadOnlyToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshComponentReadOnlyToolTarget

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshComponentReadOnlyToolTarget

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshComponentReadOnlyToolTarget
  }
}

public open external class SkeletalMeshComponentToolTarget(
  outer: UObject,
) : SkeletalMeshComponentReadOnlyToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshComponentToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshComponentToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshComponentToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshComponentToolTarget

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshComponentToolTarget

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshComponentToolTarget
  }
}

public open external class SkeletalMeshComponentReadOnlyToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshComponentReadOnlyToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        SkeletalMeshComponentReadOnlyToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshComponentReadOnlyToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshComponentReadOnlyToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshComponentReadOnlyToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshComponentReadOnlyToolTargetFactory
  }
}

public open external class SkeletalMeshComponentToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshComponentToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshComponentToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshComponentToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshComponentToolTargetFactory
  }
}

public open external class SkeletalMeshReadOnlyToolTarget(
  outer: UObject,
) : ToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshReadOnlyToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshReadOnlyToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshReadOnlyToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshReadOnlyToolTarget

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshReadOnlyToolTarget

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshReadOnlyToolTarget
  }
}

public open external class SkeletalMeshToolTarget(
  outer: UObject,
) : SkeletalMeshReadOnlyToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshToolTarget

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshToolTarget

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshToolTarget
  }
}

public open external class SkeletalMeshReadOnlyToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshReadOnlyToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshReadOnlyToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshReadOnlyToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshReadOnlyToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshReadOnlyToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshReadOnlyToolTargetFactory
  }
}

public open external class SkeletalMeshToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshToolTargetFactory
  }
}

public open external class StaticMeshComponentToolTarget(
  outer: UObject,
) : PrimitiveComponentToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshComponentToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshComponentToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshComponentToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshComponentToolTarget

    @JsName("C")
    public fun copy(other: UObject): StaticMeshComponentToolTarget

    @JsName("C")
    public fun copy(other: Any): StaticMeshComponentToolTarget
  }
}

public open external class StaticMeshComponentToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshComponentToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshComponentToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshComponentToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): StaticMeshComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): StaticMeshComponentToolTargetFactory
  }
}

public open external class StaticMeshToolTarget(
  outer: UObject,
) : ToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshToolTarget

    @JsName("C")
    public fun copy(other: UObject): StaticMeshToolTarget

    @JsName("C")
    public fun copy(other: Any): StaticMeshToolTarget
  }
}

public open external class StaticMeshToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): StaticMeshToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): StaticMeshToolTargetFactory
  }
}

public open external class VolumeComponentToolTarget(
  outer: UObject,
) : PrimitiveComponentToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumeComponentToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumeComponentToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumeComponentToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumeComponentToolTarget

    @JsName("C")
    public fun copy(other: UObject): VolumeComponentToolTarget

    @JsName("C")
    public fun copy(other: Any): VolumeComponentToolTarget
  }
}

public open external class VolumeComponentToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumeComponentToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumeComponentToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumeComponentToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumeComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): VolumeComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): VolumeComponentToolTargetFactory
  }
}

@JsName("ERecomputeUVsPropertiesIslandMode")
public external object RecomputeUVsPropertiesIslandMode {
  public var PolyGroups: String

  public var ExistingUVs: String

  @JsName("ERecomputeUVsPropertiesIslandMode_MAX")
  public var Max: String
}

@JsName("ERecomputeUVsPropertiesUnwrapType")
public external object RecomputeUVsPropertiesUnwrapType {
  public var ExpMap: String

  public var Conformal: String

  public var IslandMerging: String

  @JsName("ERecomputeUVsPropertiesUnwrapType_MAX")
  public var Max: String
}

@JsName("ERecomputeUVsToolOrientationMode")
public external object RecomputeUVsToolOrientationMode {
  public var None: String

  public var MinBounds: String

  @JsName("ERecomputeUVsToolOrientationMode_MAX")
  public var Max: String
}

@JsName("ERecomputeUVsPropertiesLayoutType")
public external object RecomputeUVsPropertiesLayoutType {
  public var None: String

  public var Repack: String

  public var NormalizeToBounds: String

  public var NormalizeToWorld: String

  @JsName("ERecomputeUVsPropertiesLayoutType_MAX")
  public var Max: String
}

public open external class RecomputeUVsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bEnablePolygroupSupport")
  public open var enablePolygroupSupport: Boolean

  @JsName("IslandGeneration")
  public open var islandGeneration: String

  @JsName("UnwrapType")
  public open var unwrapType: String

  @JsName("AutoRotation")
  public open var autoRotation: String

  @JsName("SmoothingSteps")
  public open var smoothingSteps: Number

  @JsName("SmoothingAlpha")
  public open var smoothingAlpha: Number

  @JsName("MergingDistortionThreshold")
  public open var mergingDistortionThreshold: Number

  @JsName("MergingAngleThreshold")
  public open var mergingAngleThreshold: Number

  @JsName("LayoutType")
  public open var layoutType: String

  @JsName("TextureResolution")
  public open var textureResolution: Number

  @JsName("NormalizeScale")
  public open var normalizeScale: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RecomputeUVsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RecomputeUVsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RecomputeUVsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RecomputeUVsToolProperties

    @JsName("C")
    public fun copy(other: UObject): RecomputeUVsToolProperties

    @JsName("C")
    public fun copy(other: Any): RecomputeUVsToolProperties
  }
}

public open external class RecomputeUVsOpFactory(
  outer: UObject,
) : UObject {
  @JsName("Settings")
  public open var settings: RecomputeUVsToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RecomputeUVsOpFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RecomputeUVsOpFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RecomputeUVsOpFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RecomputeUVsOpFactory

    @JsName("C")
    public fun copy(other: UObject): RecomputeUVsOpFactory

    @JsName("C")
    public fun copy(other: Any): RecomputeUVsOpFactory
  }
}

@JsName("EUVLayoutType")
public external object UVLayoutType {
  public var Transform: String

  public var Stack: String

  public var Repack: String

  @JsName("EUVLayoutType_MAX")
  public var Max: String
}

@JsName("UVLayoutProperties")
public open external class UvLayoutProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("LayoutType")
  public open var layoutType: String

  @JsName("TextureResolution")
  public open var textureResolution: Number

  @JsName("Scale")
  public open var scale: Number

  @JsName("Translation")
  public open var translation: Vector2d

  @JsName("bAllowFlips")
  public open var allowFlips: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvLayoutProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvLayoutProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvLayoutProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvLayoutProperties

    @JsName("C")
    public fun copy(other: UObject): UvLayoutProperties

    @JsName("C")
    public fun copy(other: Any): UvLayoutProperties
  }
}

@JsName("UVLayoutOperatorFactory")
public open external class UvLayoutOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("Settings")
  public open var settings: UvLayoutProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvLayoutOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvLayoutOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvLayoutOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvLayoutOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): UvLayoutOperatorFactory

    @JsName("C")
    public fun copy(other: Any): UvLayoutOperatorFactory
  }
}

public open external class AddPrimitiveToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddPrimitiveToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddPrimitiveToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddPrimitiveToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddPrimitiveToolBuilder

    @JsName("C")
    public fun copy(other: UObject): AddPrimitiveToolBuilder

    @JsName("C")
    public fun copy(other: Any): AddPrimitiveToolBuilder
  }
}

@JsName("EMakeMeshPolygroupMode")
public external object MakeMeshPolygroupMode {
  @JsName("PerShape")
  public var Shape: String

  @JsName("PerFace")
  public var Face: String

  @JsName("PerQuad")
  public var Quad: String

  @JsName("EMakeMeshPolygroupMode_MAX")
  public var Max: String
}

@JsName("EMakeMeshPlacementType")
public external object MakeMeshPlacementType {
  public var GroundPlane: String

  public var OnScene: String

  @JsName("EMakeMeshPlacementType_MAX")
  public var Max: String
}

@JsName("EMakeMeshPivotLocation")
public external object MakeMeshPivotLocation {
  public var Base: String

  public var Centered: String

  public var Top: String

  @JsName("EMakeMeshPivotLocation_MAX")
  public var Max: String
}

public open external class ProceduralShapeToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bInstanceIfPossible")
  public open var instanceIfPossible: Boolean

  @JsName("PolygroupMode")
  public open var polygroupMode: String

  @JsName("TargetSurface")
  public open var targetSurface: String

  @JsName("bSnapToGrid")
  public open var snapToGrid: Boolean

  @JsName("PivotLocation")
  public open var pivotLocation: String

  @JsName("Rotation")
  public open var rotation: Number

  @JsName("bAlignToNormal")
  public open var alignToNormal: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralShapeToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralShapeToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralShapeToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralShapeToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralShapeToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralShapeToolProperties
  }
}

public open external class ProceduralBoxToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("Width")
  public open var width: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("Height")
  public open var height: Number

  @JsName("WidthSubdivisions")
  public open var widthSubdivisions: Number

  @JsName("DepthSubdivisions")
  public open var depthSubdivisions: Number

  @JsName("HeightSubdivisions")
  public open var heightSubdivisions: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralBoxToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralBoxToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralBoxToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralBoxToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralBoxToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralBoxToolProperties
  }
}

@JsName("EProceduralRectType")
public external object ProceduralRectType {
  public var Rectangle: String

  public var RoundedRectangle: String

  @JsName("EProceduralRectType_MAX")
  public var Max: String
}

public open external class ProceduralRectangleToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("RectangleType")
  public open var rectangleType: String

  @JsName("Width")
  public open var width: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("WidthSubdivisions")
  public open var widthSubdivisions: Number

  @JsName("DepthSubdivisions")
  public open var depthSubdivisions: Number

  @JsName("CornerRadius")
  public open var cornerRadius: Number

  @JsName("CornerSlices")
  public open var cornerSlices: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralRectangleToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralRectangleToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralRectangleToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralRectangleToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralRectangleToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralRectangleToolProperties
  }
}

@JsName("EProceduralDiscType")
public external object ProceduralDiscType {
  public var Disc: String

  public var PuncturedDisc: String

  @JsName("EProceduralDiscType_MAX")
  public var Max: String
}

public open external class ProceduralDiscToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("DiscType")
  public open var discType: String

  @JsName("Radius")
  public open var radius: Number

  @JsName("RadialSlices")
  public open var radialSlices: Number

  @JsName("RadialSubdivisions")
  public open var radialSubdivisions: Number

  @JsName("HoleRadius")
  public open var holeRadius: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralDiscToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralDiscToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralDiscToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralDiscToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralDiscToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralDiscToolProperties
  }
}

public open external class ProceduralTorusToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("MajorRadius")
  public open var majorRadius: Number

  @JsName("MinorRadius")
  public open var minorRadius: Number

  @JsName("MajorSlices")
  public open var majorSlices: Number

  @JsName("MinorSlices")
  public open var minorSlices: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralTorusToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralTorusToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralTorusToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralTorusToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralTorusToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralTorusToolProperties
  }
}

public open external class ProceduralCylinderToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("Radius")
  public open var radius: Number

  @JsName("Height")
  public open var height: Number

  @JsName("RadialSlices")
  public open var radialSlices: Number

  @JsName("HeightSubdivisions")
  public open var heightSubdivisions: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralCylinderToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralCylinderToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralCylinderToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralCylinderToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralCylinderToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralCylinderToolProperties
  }
}

public open external class ProceduralConeToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("Radius")
  public open var radius: Number

  @JsName("Height")
  public open var height: Number

  @JsName("RadialSlices")
  public open var radialSlices: Number

  @JsName("HeightSubdivisions")
  public open var heightSubdivisions: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralConeToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralConeToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralConeToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralConeToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralConeToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralConeToolProperties
  }
}

public open external class ProceduralArrowToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("ShaftRadius")
  public open var shaftRadius: Number

  @JsName("ShaftHeight")
  public open var shaftHeight: Number

  @JsName("HeadRadius")
  public open var headRadius: Number

  @JsName("HeadHeight")
  public open var headHeight: Number

  @JsName("RadialSlices")
  public open var radialSlices: Number

  @JsName("HeightSubdivisions")
  public open var heightSubdivisions: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralArrowToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralArrowToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralArrowToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralArrowToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralArrowToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralArrowToolProperties
  }
}

@JsName("EProceduralSphereType")
public external object ProceduralSphereType {
  public var LatLong: String

  public var Box: String

  @JsName("EProceduralSphereType_MAX")
  public var Max: String
}

public open external class ProceduralSphereToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("Radius")
  public open var radius: Number

  @JsName("SubdivisionType")
  public open var subdivisionType: String

  @JsName("Subdivisions")
  public open var subdivisions: Number

  @JsName("HorizontalSlices")
  public open var horizontalSlices: Number

  @JsName("VerticalSlices")
  public open var verticalSlices: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralSphereToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralSphereToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralSphereToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralSphereToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralSphereToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralSphereToolProperties
  }
}

@JsName("EProceduralStairsType")
public external object ProceduralStairsType {
  public var Linear: String

  public var Floating: String

  public var Curved: String

  public var Spiral: String

  @JsName("EProceduralStairsType_MAX")
  public var Max: String
}

public open external class ProceduralStairsToolProperties(
  outer: UObject,
) : ProceduralShapeToolProperties {
  @JsName("StairsType")
  public open var stairsType: String

  @JsName("NumSteps")
  public open var numSteps: Number

  @JsName("StepWidth")
  public open var stepWidth: Number

  @JsName("StepHeight")
  public open var stepHeight: Number

  @JsName("StepDepth")
  public open var stepDepth: Number

  @JsName("CurveAngle")
  public open var curveAngle: Number

  @JsName("SpiralAngle")
  public open var spiralAngle: Number

  @JsName("InnerRadius")
  public open var innerRadius: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralStairsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralStairsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralStairsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralStairsToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProceduralStairsToolProperties

    @JsName("C")
    public fun copy(other: Any): ProceduralStairsToolProperties
  }
}

public open external class NewMeshMaterialProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Material")
  public open var material: Any

  @JsName("UVScale")
  public open var uvScale: Number

  @JsName("bWorldSpaceUVScale")
  public open var worldSpaceUvScale: Boolean

  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  @JsName("bShowExtendedOptions")
  public open var showExtendedOptions: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NewMeshMaterialProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NewMeshMaterialProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NewMeshMaterialProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NewMeshMaterialProperties

    @JsName("C")
    public fun copy(other: UObject): NewMeshMaterialProperties

    @JsName("C")
    public fun copy(other: Any): NewMeshMaterialProperties
  }
}

public open external class LastActorInfo(
  outer: UObject,
) : UObject {
  @JsName("Actor")
  public open var actor: Actor

  @JsName("StaticMesh")
  public open var staticMesh: StaticMesh

  @JsName("ShapeSettings")
  public open var shapeSettings: ProceduralShapeToolProperties

  @JsName("MaterialProperties")
  public open var materialProperties: NewMeshMaterialProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LastActorInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LastActorInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LastActorInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LastActorInfo

    @JsName("C")
    public fun copy(other: UObject): LastActorInfo

    @JsName("C")
    public fun copy(other: Any): LastActorInfo
  }
}

public open external class AddPrimitiveTool(
  outer: UObject,
) : SingleClickTool {
  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("ShapeSettings")
  public open var shapeSettings: ProceduralShapeToolProperties

  @JsName("MaterialProperties")
  public open var materialProperties: NewMeshMaterialProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("LastGenerated")
  public open var lastGenerated: LastActorInfo

  @JsName("AssetName")
  public open var assetName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddPrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddPrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddPrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddPrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddPrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddPrimitiveTool
  }
}

public open external class AddBoxPrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddBoxPrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddBoxPrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddBoxPrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddBoxPrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddBoxPrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddBoxPrimitiveTool
  }
}

public open external class AddCylinderPrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddCylinderPrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddCylinderPrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddCylinderPrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddCylinderPrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddCylinderPrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddCylinderPrimitiveTool
  }
}

public open external class AddConePrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddConePrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddConePrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddConePrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddConePrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddConePrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddConePrimitiveTool
  }
}

public open external class AddRectanglePrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddRectanglePrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddRectanglePrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddRectanglePrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddRectanglePrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddRectanglePrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddRectanglePrimitiveTool
  }
}

public open external class AddDiscPrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddDiscPrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddDiscPrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddDiscPrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddDiscPrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddDiscPrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddDiscPrimitiveTool
  }
}

public open external class AddTorusPrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddTorusPrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddTorusPrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddTorusPrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddTorusPrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddTorusPrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddTorusPrimitiveTool
  }
}

public open external class AddArrowPrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddArrowPrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddArrowPrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddArrowPrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddArrowPrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddArrowPrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddArrowPrimitiveTool
  }
}

public open external class AddSpherePrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddSpherePrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddSpherePrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddSpherePrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddSpherePrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddSpherePrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddSpherePrimitiveTool
  }
}

public open external class AddStairsPrimitiveTool(
  outer: UObject,
) : AddPrimitiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddStairsPrimitiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddStairsPrimitiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddStairsPrimitiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddStairsPrimitiveTool

    @JsName("C")
    public fun copy(other: UObject): AddStairsPrimitiveTool

    @JsName("C")
    public fun copy(other: Any): AddStairsPrimitiveTool
  }
}

public open external class CombineMeshesToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CombineMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CombineMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CombineMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CombineMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): CombineMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): CombineMeshesToolBuilder
  }
}

public open external class CombineMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bIsDuplicateMode")
  public open var isDuplicateMode: Boolean

  @JsName("OutputWriteTo")
  public open var outputWriteTo: String

  @JsName("OutputNewName")
  public open var outputNewName: String

  @JsName("OutputExistingName")
  public open var outputExistingName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CombineMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CombineMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CombineMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CombineMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): CombineMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): CombineMeshesToolProperties
  }
}

public open external class CombineMeshesTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: CombineMeshesToolProperties

  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("HandleSourceProperties")
  public open var handleSourceProperties: OnAcceptHandleSourcesPropertiesBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CombineMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CombineMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CombineMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CombineMeshesTool

    @JsName("C")
    public fun copy(other: UObject): CombineMeshesTool

    @JsName("C")
    public fun copy(other: Any): CombineMeshesTool
  }
}

@JsName("ECSGOperation")
public external object CSGOperation {
  @JsName("DifferenceAB")
  public var DifferenceAb: String

  @JsName("DifferenceBA")
  public var DifferenceBa: String

  public var Intersect: String

  public var Union: String

  @JsName("ECSGOperation_MAX")
  public var Max: String
}

@JsName("CSGMeshesToolProperties")
public open external class CsgMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Operation")
  public open var operation: String

  @JsName("bTryFixHoles")
  public open var tryFixHoles: Boolean

  @JsName("bTryCollapseEdges")
  public open var tryCollapseEdges: Boolean

  @JsName("WindingThreshold")
  public open var windingThreshold: Number

  @JsName("bShowNewBoundaries")
  public open var showNewBoundaries: Boolean

  @JsName("bShowSubtractedMesh")
  public open var showSubtractedMesh: Boolean

  @JsName("SubtractedMeshOpacity")
  public open var subtractedMeshOpacity: Number

  @JsName("SubtractedMeshColor")
  public open var subtractedMeshColor: LinearColor

  @JsName("bUseFirstMeshMaterials")
  public open var useFirstMeshMaterials: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CsgMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CsgMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CsgMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CsgMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): CsgMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): CsgMeshesToolProperties
  }
}

@JsName("ETrimOperation")
public external object TrimOperation {
  @JsName("TrimA")
  public var a: String

  @JsName("TrimB")
  public var b: String

  @JsName("ETrimOperation_MAX")
  public var Max: String
}

@JsName("ETrimSide")
public external object TrimSide {
  @JsName("RemoveInside")
  public var Inside: String

  @JsName("RemoveOutside")
  public var Outside: String

  @JsName("ETrimSide_MAX")
  public var Max: String
}

public open external class TrimMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("WhichMesh")
  public open var whichMesh: String

  @JsName("TrimSide")
  public open var trimSide: String

  @JsName("WindingThreshold")
  public open var windingThreshold: Number

  @JsName("bShowTrimmingMesh")
  public open var showTrimmingMesh: Boolean

  @JsName("OpacityOfTrimmingMesh")
  public open var opacityOfTrimmingMesh: Number

  @JsName("ColorOfTrimmingMesh")
  public open var colorOfTrimmingMesh: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TrimMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TrimMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TrimMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TrimMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): TrimMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): TrimMeshesToolProperties
  }
}

@JsName("CSGMeshesTool")
public open external class CsgMeshesTool(
  outer: UObject,
) : BaseCreateFromSelectedTool {
  @JsName("CSGProperties")
  public open var csgProperties: CsgMeshesToolProperties

  @JsName("TrimProperties")
  public open var trimProperties: TrimMeshesToolProperties

  @JsName("OriginalMeshPreviews")
  public open var originalMeshPreviews: Array<PreviewMesh>

  @JsName("PreviewsGhostMaterial")
  public open var previewsGhostMaterial: MaterialInstanceDynamic

  @JsName("DrawnLineSet")
  public open var drawnLineSet: LineSetComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CsgMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CsgMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CsgMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CsgMeshesTool

    @JsName("C")
    public fun copy(other: UObject): CsgMeshesTool

    @JsName("C")
    public fun copy(other: Any): CsgMeshesTool
  }
}

@JsName("CSGMeshesToolBuilder")
public open external class CsgMeshesToolBuilder(
  outer: UObject,
) : BaseCreateFromSelectedToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CsgMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CsgMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CsgMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CsgMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): CsgMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): CsgMeshesToolBuilder
  }
}

public open external class CutMeshWithMeshToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bTryFixHoles")
  public open var tryFixHoles: Boolean

  @JsName("bTryCollapseEdges")
  public open var tryCollapseEdges: Boolean

  @JsName("WindingThreshold")
  public open var windingThreshold: Number

  @JsName("bShowNewBoundaries")
  public open var showNewBoundaries: Boolean

  @JsName("bUseFirstMeshMaterials")
  public open var useFirstMeshMaterials: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CutMeshWithMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CutMeshWithMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CutMeshWithMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CutMeshWithMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): CutMeshWithMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): CutMeshWithMeshToolProperties
  }
}

public open external class CutMeshWithMeshTool(
  outer: UObject,
) : BaseCreateFromSelectedTool {
  @JsName("CutProperties")
  public open var cutProperties: CutMeshWithMeshToolProperties

  @JsName("IntersectPreviewMesh")
  public open var intersectPreviewMesh: PreviewMesh

  @JsName("DrawnLineSet")
  public open var drawnLineSet: LineSetComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CutMeshWithMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CutMeshWithMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CutMeshWithMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CutMeshWithMeshTool

    @JsName("C")
    public fun copy(other: UObject): CutMeshWithMeshTool

    @JsName("C")
    public fun copy(other: Any): CutMeshWithMeshTool
  }
}

public open external class CutMeshWithMeshToolBuilder(
  outer: UObject,
) : BaseCreateFromSelectedToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CutMeshWithMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CutMeshWithMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CutMeshWithMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CutMeshWithMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): CutMeshWithMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): CutMeshWithMeshToolBuilder
  }
}

public open external class DrawAndRevolveToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawAndRevolveToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawAndRevolveToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawAndRevolveToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawAndRevolveToolBuilder

    @JsName("C")
    public fun copy(other: UObject): DrawAndRevolveToolBuilder

    @JsName("C")
    public fun copy(other: Any): DrawAndRevolveToolBuilder
  }
}

@JsName("ERevolvePropertiesPolygroupMode")
public external object RevolvePropertiesPolygroupMode {
  @JsName("PerShape")
  public var Shape: String

  @JsName("PerFace")
  public var Face: String

  @JsName("PerRevolveStep")
  public var RevolveStep: String

  @JsName("PerPathSegment")
  public var PathSegment: String

  @JsName("ERevolvePropertiesPolygroupMode_MAX")
  public var Max: String
}

@JsName("ERevolvePropertiesQuadSplit")
public external object RevolvePropertiesQuadSplit {
  public var Uniform: String

  public var Compact: String

  @JsName("ERevolvePropertiesQuadSplit_MAX")
  public var Max: String
}

public open external class RevolveProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("RevolveDegreesClamped")
  public open var revolveDegreesClamped: Any

  @JsName("RevolveDegrees")
  public open var revolveDegrees: Any

  @JsName("RevolveDegreesOffset")
  public open var revolveDegreesOffset: Any

  @JsName("StepsMaxDegrees")
  public open var stepsMaxDegrees: Any

  @JsName("bExplicitSteps")
  public open var explicitSteps: Boolean

  @JsName("NumExplicitSteps")
  public open var numExplicitSteps: Number

  @JsName("HeightOffsetPerDegree")
  public open var heightOffsetPerDegree: Any

  @JsName("bReverseRevolutionDirection")
  public open var reverseRevolutionDirection: Boolean

  @JsName("bFlipMesh")
  public open var flipMesh: Boolean

  @JsName("bSharpNormals")
  public open var sharpNormals: Boolean

  @JsName("SharpNormalsDegreeThreshold")
  public open var sharpNormalsDegreeThreshold: Any

  @JsName("bPathAtMidpointOfStep")
  public open var pathAtMidpointOfStep: Boolean

  @JsName("PolygroupMode")
  public open var polygroupMode: String

  @JsName("QuadSplitMode")
  public open var quadSplitMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RevolveProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RevolveProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RevolveProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RevolveProperties

    @JsName("C")
    public fun copy(other: UObject): RevolveProperties

    @JsName("C")
    public fun copy(other: Any): RevolveProperties
  }
}

@JsName("ERevolvePropertiesCapFillMode")
public external object RevolvePropertiesCapFillMode {
  public var None: String

  public var CenterFan: String

  public var Delaunay: String

  public var EarClipping: String

  @JsName("ERevolvePropertiesCapFillMode_MAX")
  public var Max: String
}

public open external class RevolveToolProperties(
  outer: UObject,
) : RevolveProperties {
  @JsName("CapFillMode")
  public open var capFillMode: String

  @JsName("bClosePathToAxis")
  public open var closePathToAxis: Boolean

  @JsName("DrawPlaneOrigin")
  public open var drawPlaneOrigin: Vector

  @JsName("DrawPlaneOrientation")
  public open var drawPlaneOrientation: Rotator

  @JsName("bEnableSnapping")
  public open var enableSnapping: Boolean

  @JsName("bAllowedToEditDrawPlane")
  public open var allowedToEditDrawPlane: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RevolveToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RevolveToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RevolveToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RevolveToolProperties

    @JsName("C")
    public fun copy(other: UObject): RevolveToolProperties

    @JsName("C")
    public fun copy(other: Any): RevolveToolProperties
  }
}

public open external class DrawAndRevolveTool(
  outer: UObject,
) : InteractiveTool {
  @JsName("ControlPointsMechanic")
  public open var controlPointsMechanic: CurveControlPointsMechanic

  @JsName("PlaneMechanic")
  public open var planeMechanic: ConstructionPlaneMechanic

  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("Settings")
  public open var settings: RevolveToolProperties

  @JsName("MaterialProperties")
  public open var materialProperties: NewMeshMaterialProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawAndRevolveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawAndRevolveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawAndRevolveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawAndRevolveTool

    @JsName("C")
    public fun copy(other: UObject): DrawAndRevolveTool

    @JsName("C")
    public fun copy(other: Any): DrawAndRevolveTool
  }
}

public open external class RevolveOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("RevolveTool")
  public open var revolveTool: DrawAndRevolveTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RevolveOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RevolveOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RevolveOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RevolveOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): RevolveOperatorFactory

    @JsName("C")
    public fun copy(other: Any): RevolveOperatorFactory
  }
}

public open external class DrawPolygonToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawPolygonToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawPolygonToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawPolygonToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawPolygonToolBuilder

    @JsName("C")
    public fun copy(other: UObject): DrawPolygonToolBuilder

    @JsName("C")
    public fun copy(other: Any): DrawPolygonToolBuilder
  }
}

@JsName("EDrawPolygonDrawMode")
public external object DrawPolygonDrawMode {
  public var Freehand: String

  public var Circle: String

  public var Square: String

  public var Rectangle: String

  public var RoundedRectangle: String

  public var Ring: String

  @JsName("EDrawPolygonDrawMode_MAX")
  public var Max: String
}

@JsName("EDrawPolygonExtrudeMode")
public external object DrawPolygonExtrudeMode {
  public var Flat: String

  public var Fixed: String

  public var Interactive: String

  @JsName("EDrawPolygonExtrudeMode_MAX")
  public var Max: String
}

public open external class DrawPolygonToolStandardProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("PolygonDrawMode")
  public open var polygonDrawMode: String

  @JsName("bAllowSelfIntersections")
  public open var allowSelfIntersections: Boolean

  @JsName("FeatureSizeRatio")
  public open var featureSizeRatio: Number

  @JsName("RadialSlices")
  public open var radialSlices: Number

  @JsName("Distance")
  public open var distance: Number

  @JsName("bShowGridGizmo")
  public open var showGridGizmo: Boolean

  @JsName("ExtrudeMode")
  public open var extrudeMode: String

  @JsName("ExtrudeHeight")
  public open var extrudeHeight: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawPolygonToolStandardProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawPolygonToolStandardProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawPolygonToolStandardProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawPolygonToolStandardProperties

    @JsName("C")
    public fun copy(other: UObject): DrawPolygonToolStandardProperties

    @JsName("C")
    public fun copy(other: Any): DrawPolygonToolStandardProperties
  }
}

public open external class DrawPolygonToolSnapProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bEnableSnapping")
  public open var enableSnapping: Boolean

  @JsName("bSnapToWorldGrid")
  public open var snapToWorldGrid: Boolean

  @JsName("bSnapToVertices")
  public open var snapToVertices: Boolean

  @JsName("bSnapToEdges")
  public open var snapToEdges: Boolean

  @JsName("bSnapToAxes")
  public open var snapToAxes: Boolean

  @JsName("bSnapToLengths")
  public open var snapToLengths: Boolean

  @JsName("bSnapToSurfaces")
  public open var snapToSurfaces: Boolean

  @JsName("SnapToSurfacesOffset")
  public open var snapToSurfacesOffset: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawPolygonToolSnapProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawPolygonToolSnapProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawPolygonToolSnapProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawPolygonToolSnapProperties

    @JsName("C")
    public fun copy(other: UObject): DrawPolygonToolSnapProperties

    @JsName("C")
    public fun copy(other: Any): DrawPolygonToolSnapProperties
  }
}

public open external class DrawPolygonTool(
  outer: UObject,
) : InteractiveTool {
  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("PolygonProperties")
  public open var polygonProperties: DrawPolygonToolStandardProperties

  @JsName("SnapProperties")
  public open var snapProperties: DrawPolygonToolSnapProperties

  @JsName("MaterialProperties")
  public open var materialProperties: NewMeshMaterialProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("PlaneTransformGizmo")
  public open var planeTransformGizmo: CombinedTransformGizmo

  @JsName("PlaneTransformProxy")
  public open var planeTransformProxy: TransformProxy

  @JsName("HeightMechanic")
  public open var heightMechanic: PlaneDistanceFromHitMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawPolygonTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawPolygonTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawPolygonTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawPolygonTool

    @JsName("C")
    public fun copy(other: UObject): DrawPolygonTool

    @JsName("C")
    public fun copy(other: Any): DrawPolygonTool
  }
}

public open external class EditMeshPolygonsToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolBuilder

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolBuilder
  }
}

@JsName("ELocalFrameMode")
public external object LocalFrameMode {
  @JsName("FromObject")
  public var Object: String

  @JsName("FromGeometry")
  public var Geometry: String

  @JsName("ELocalFrameMode_MAX")
  public var Max: String
}

public open external class PolyEditCommonProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  @JsName("LocalFrameMode")
  public open var localFrameMode: String

  @JsName("bLockRotation")
  public open var lockRotation: Boolean

  @JsName("bLocalCoordSystem")
  public open var localCoordSystem: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditCommonProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditCommonProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditCommonProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditCommonProperties

    @JsName("C")
    public fun copy(other: UObject): PolyEditCommonProperties

    @JsName("C")
    public fun copy(other: Any): PolyEditCommonProperties
  }
}

public open external class EditMeshPolygonsActionModeToolBuilder(
  outer: UObject,
) : EditMeshPolygonsToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsActionModeToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsActionModeToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsActionModeToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsActionModeToolBuilder

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsActionModeToolBuilder

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsActionModeToolBuilder
  }
}

public open external class EditMeshPolygonsSelectionModeToolBuilder(
  outer: UObject,
) : EditMeshPolygonsToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsSelectionModeToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsSelectionModeToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsSelectionModeToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsSelectionModeToolBuilder

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsSelectionModeToolBuilder

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsSelectionModeToolBuilder
  }
}

public open external class EditMeshPolygonsToolActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolActionPropertySet

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolActionPropertySet
  }
}

public open external class EditMeshPolygonsToolActions(
  outer: UObject,
) : EditMeshPolygonsToolActionPropertySet {
  @JsName("SimplifyByGroups")
  public open fun simplifyByGroups(): Unit

  @JsName("Retriangulate")
  public open fun retriangulate(): Unit

  @JsName("RecalcNormals")
  public open fun recalcNormals(): Unit

  @JsName("PushPull")
  public open fun pushPull(): Unit

  @JsName("Outset")
  public open fun outset(): Unit

  @JsName("Offset")
  public open fun offset(): Unit

  @JsName("Merge")
  public open fun merge(): Unit

  @JsName("Inset")
  public open fun inset(): Unit

  @JsName("InsertEdgeLoop")
  public open fun insertEdgeLoop(): Unit

  @JsName("InsertEdge")
  public open fun insertEdge(): Unit

  @JsName("Flip")
  public open fun flip(): Unit

  @JsName("Extrude")
  public open fun extrude(): Unit

  @JsName("Duplicate")
  public open fun duplicate(): Unit

  @JsName("Disconnect")
  public open fun disconnect(): Unit

  @JsName("Delete")
  public open fun delete(): Unit

  @JsName("Decompose")
  public open fun decompose(): Unit

  @JsName("CutFaces")
  public open fun cutFaces(): Unit

  @JsName("Bevel")
  public open fun bevel(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolActions

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolActions

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolActions
  }
}

@JsName("EditMeshPolygonsToolActions_Triangles")
public open external class EditMeshPolygonsToolActionsTriangles(
  outer: UObject,
) : EditMeshPolygonsToolActionPropertySet {
  @JsName("RecalcNormals")
  public open fun recalcNormals(): Unit

  @JsName("PushPull")
  public open fun pushPull(): Unit

  @JsName("Poke")
  public open fun poke(): Unit

  @JsName("Outset")
  public open fun outset(): Unit

  @JsName("Offset")
  public open fun offset(): Unit

  @JsName("Inset")
  public open fun inset(): Unit

  @JsName("Flip")
  public open fun flip(): Unit

  @JsName("Extrude")
  public open fun extrude(): Unit

  @JsName("Duplicate")
  public open fun duplicate(): Unit

  @JsName("Disconnect")
  public open fun disconnect(): Unit

  @JsName("Delete")
  public open fun delete(): Unit

  @JsName("CutFaces")
  public open fun cutFaces(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolActionsTriangles

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolActionsTriangles

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolActionsTriangles

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolActionsTriangles

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolActionsTriangles

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolActionsTriangles
  }
}

@JsName("EditMeshPolygonsToolUVActions")
public open external class EditMeshPolygonsToolUvActions(
  outer: UObject,
) : EditMeshPolygonsToolActionPropertySet {
  @JsName("PlanarProjection")
  public open fun planarProjection(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolUvActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolUvActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolUvActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolUvActions

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolUvActions

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolUvActions
  }
}

public open external class EditMeshPolygonsToolEdgeActions(
  outer: UObject,
) : EditMeshPolygonsToolActionPropertySet {
  @JsName("Weld")
  public open fun weld(): Unit

  @JsName("Straighten")
  public open fun straighten(): Unit

  @JsName("FillHole")
  public open fun fillHole(): Unit

  @JsName("Bevel")
  public open fun bevel(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolEdgeActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolEdgeActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolEdgeActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolEdgeActions

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolEdgeActions

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolEdgeActions
  }
}

@JsName("EditMeshPolygonsToolEdgeActions_Triangles")
public open external class EditMeshPolygonsToolEdgeActionsTriangles(
  outer: UObject,
) : EditMeshPolygonsToolActionPropertySet {
  @JsName("Weld")
  public open fun weld(): Unit

  @JsName("Split")
  public open fun split(): Unit

  @JsName("Flip")
  public open fun flip(): Unit

  @JsName("FillHole")
  public open fun fillHole(): Unit

  @JsName("Collapse")
  public open fun collapse(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolEdgeActionsTriangles

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolEdgeActionsTriangles

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolEdgeActionsTriangles

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolEdgeActionsTriangles

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolEdgeActionsTriangles

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolEdgeActionsTriangles
  }
}

public open external class EditMeshPolygonsToolCancelAction(
  outer: UObject,
) : EditMeshPolygonsToolActionPropertySet {
  @JsName("Done")
  public open fun done(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolCancelAction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolCancelAction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolCancelAction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolCancelAction

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolCancelAction

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolCancelAction
  }
}

public open external class EditMeshPolygonsToolAcceptCancelAction(
  outer: UObject,
) : EditMeshPolygonsToolActionPropertySet {
  @JsName("Cancel")
  public open fun cancel(): Unit

  @JsName("Apply")
  public open fun apply(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsToolAcceptCancelAction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsToolAcceptCancelAction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsToolAcceptCancelAction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsToolAcceptCancelAction

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsToolAcceptCancelAction

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsToolAcceptCancelAction
  }
}

@JsName("EPolyEditExtrudeDirection")
public external object PolyEditExtrudeDirection {
  public var SelectionNormal: String

  public var WorldX: String

  public var WorldY: String

  public var WorldZ: String

  public var LocalX: String

  public var LocalY: String

  public var LocalZ: String

  @JsName("EPolyEditExtrudeDirection_MAX")
  public var Max: String
}

@JsName("EPolyEditExtrudeModeOptions")
public external object PolyEditExtrudeModeOptions {
  public var SingleDirection: String

  public var SelectedTriangleNormals: String

  public var SelectedTriangleNormalsEven: String

  @JsName("EPolyEditExtrudeModeOptions_MAX")
  public var Max: String
}

public open external class PolyEditExtrudeProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Direction")
  public open var direction: String

  @JsName("MeasureDirection")
  public open var measureDirection: String

  @JsName("bShellsToSolids")
  public open var shellsToSolids: Boolean

  @JsName("DirectionMode")
  public open var directionMode: String

  @JsName("MaxDistanceScaleFactor")
  public open var maxDistanceScaleFactor: Any

  @JsName("bUseColinearityForSettingBorderGroups")
  public open var useColinearityForSettingBorderGroups: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditExtrudeProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditExtrudeProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditExtrudeProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditExtrudeProperties

    @JsName("C")
    public fun copy(other: UObject): PolyEditExtrudeProperties

    @JsName("C")
    public fun copy(other: Any): PolyEditExtrudeProperties
  }
}

@JsName("EPolyEditOffsetModeOptions")
public external object PolyEditOffsetModeOptions {
  public var VertexNormals: String

  public var SelectedTriangleNormals: String

  public var SelectedTriangleNormalsEven: String

  @JsName("EPolyEditOffsetModeOptions_MAX")
  public var Max: String
}

public open external class PolyEditOffsetProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("DirectionMode")
  public open var directionMode: String

  @JsName("MaxDistanceScaleFactor")
  public open var maxDistanceScaleFactor: Any

  @JsName("bShellsToSolids")
  public open var shellsToSolids: Boolean

  @JsName("MeasureDirection")
  public open var measureDirection: String

  @JsName("bUseColinearityForSettingBorderGroups")
  public open var useColinearityForSettingBorderGroups: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditOffsetProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditOffsetProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditOffsetProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditOffsetProperties

    @JsName("C")
    public fun copy(other: UObject): PolyEditOffsetProperties

    @JsName("C")
    public fun copy(other: Any): PolyEditOffsetProperties
  }
}

@JsName("EPolyEditPushPullModeOptions")
public external object PolyEditPushPullModeOptions {
  public var SelectedTriangleNormals: String

  public var SelectedTriangleNormalsEven: String

  public var SingleDirection: String

  public var VertexNormals: String

  @JsName("EPolyEditPushPullModeOptions_MAX")
  public var Max: String
}

public open external class PolyEditPushPullProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("DirectionMode")
  public open var directionMode: String

  @JsName("MaxDistanceScaleFactor")
  public open var maxDistanceScaleFactor: Any

  @JsName("bShellsToSolids")
  public open var shellsToSolids: Boolean

  @JsName("MeasureDirection")
  public open var measureDirection: String

  @JsName("bUseColinearityForSettingBorderGroups")
  public open var useColinearityForSettingBorderGroups: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditPushPullProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditPushPullProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditPushPullProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditPushPullProperties

    @JsName("C")
    public fun copy(other: UObject): PolyEditPushPullProperties

    @JsName("C")
    public fun copy(other: Any): PolyEditPushPullProperties
  }
}

public open external class PolyEditActivityContext(
  outer: UObject,
) : UObject {
  @JsName("CommonProperties")
  public open var commonProperties: PolyEditCommonProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("SelectionMechanic")
  public open var selectionMechanic: PolygonSelectionMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditActivityContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditActivityContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditActivityContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditActivityContext

    @JsName("C")
    public fun copy(other: UObject): PolyEditActivityContext

    @JsName("C")
    public fun copy(other: Any): PolyEditActivityContext
  }
}

public open external class PolyEditExtrudeActivity(
  outer: UObject,
) : InteractiveToolActivity {
  @JsName("ExtrudeProperties")
  public open var extrudeProperties: PolyEditExtrudeProperties

  @JsName("OffsetProperties")
  public open var offsetProperties: PolyEditOffsetProperties

  @JsName("PushPullProperties")
  public open var pushPullProperties: PolyEditPushPullProperties

  @JsName("ExtrudeHeightMechanic")
  public open var extrudeHeightMechanic: PlaneDistanceFromHitMechanic

  @JsName("ActivityContext")
  public open var activityContext: PolyEditActivityContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditExtrudeActivity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditExtrudeActivity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditExtrudeActivity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditExtrudeActivity

    @JsName("C")
    public fun copy(other: UObject): PolyEditExtrudeActivity

    @JsName("C")
    public fun copy(other: Any): PolyEditExtrudeActivity
  }
}

public open external class PolyEditInsetOutsetProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Softness")
  public open var softness: Number

  @JsName("bBoundaryOnly")
  public open var boundaryOnly: Boolean

  @JsName("AreaScale")
  public open var areaScale: Number

  @JsName("bReproject")
  public open var reproject: Boolean

  @JsName("bOutset")
  public open var outset: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditInsetOutsetProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditInsetOutsetProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditInsetOutsetProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditInsetOutsetProperties

    @JsName("C")
    public fun copy(other: UObject): PolyEditInsetOutsetProperties

    @JsName("C")
    public fun copy(other: Any): PolyEditInsetOutsetProperties
  }
}

public open external class PolyEditInsetOutsetActivity(
  outer: UObject,
) : InteractiveToolActivity {
  @JsName("Settings")
  public open var settings: PolyEditInsetOutsetProperties

  @JsName("EditPreview")
  public open var editPreview: PolyEditPreviewMesh

  @JsName("CurveDistMechanic")
  public open var curveDistMechanic: SpatialCurveDistanceMechanic

  @JsName("ActivityContext")
  public open var activityContext: PolyEditActivityContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditInsetOutsetActivity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditInsetOutsetActivity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditInsetOutsetActivity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditInsetOutsetActivity

    @JsName("C")
    public fun copy(other: UObject): PolyEditInsetOutsetActivity

    @JsName("C")
    public fun copy(other: Any): PolyEditInsetOutsetActivity
  }
}

@JsName("EPolyEditCutPlaneOrientation")
public external object PolyEditCutPlaneOrientation {
  public var FaceNormals: String

  public var ViewDirection: String

  @JsName("EPolyEditCutPlaneOrientation_MAX")
  public var Max: String
}

public open external class PolyEditCutProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Orientation")
  public open var orientation: String

  @JsName("bSnapToVertices")
  public open var snapToVertices: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditCutProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditCutProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditCutProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditCutProperties

    @JsName("C")
    public fun copy(other: UObject): PolyEditCutProperties

    @JsName("C")
    public fun copy(other: Any): PolyEditCutProperties
  }
}

public open external class PolyEditCutFacesActivity(
  outer: UObject,
) : InteractiveToolActivity {
  @JsName("CutProperties")
  public open var cutProperties: PolyEditCutProperties

  @JsName("EditPreview")
  public open var editPreview: PolyEditPreviewMesh

  @JsName("SurfacePathMechanic")
  public open var surfacePathMechanic: CollectSurfacePathMechanic

  @JsName("ActivityContext")
  public open var activityContext: PolyEditActivityContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditCutFacesActivity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditCutFacesActivity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditCutFacesActivity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditCutFacesActivity

    @JsName("C")
    public fun copy(other: UObject): PolyEditCutFacesActivity

    @JsName("C")
    public fun copy(other: Any): PolyEditCutFacesActivity
  }
}

@JsName("PolyEditSetUVProperties")
public open external class PolyEditSetUvProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bShowMaterial")
  public open var showMaterial: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditSetUvProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditSetUvProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditSetUvProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditSetUvProperties

    @JsName("C")
    public fun copy(other: UObject): PolyEditSetUvProperties

    @JsName("C")
    public fun copy(other: Any): PolyEditSetUvProperties
  }
}

@JsName("PolyEditPlanarProjectionUVActivity")
public open external class PolyEditPlanarProjectionUvActivity(
  outer: UObject,
) : InteractiveToolActivity {
  @JsName("SetUVProperties")
  public open var setUvProperties: PolyEditSetUvProperties

  @JsName("EditPreview")
  public open var editPreview: PolyEditPreviewMesh

  @JsName("SurfacePathMechanic")
  public open var surfacePathMechanic: CollectSurfacePathMechanic

  @JsName("ActivityContext")
  public open var activityContext: PolyEditActivityContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditPlanarProjectionUvActivity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditPlanarProjectionUvActivity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditPlanarProjectionUvActivity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditPlanarProjectionUvActivity

    @JsName("C")
    public fun copy(other: UObject): PolyEditPlanarProjectionUvActivity

    @JsName("C")
    public fun copy(other: Any): PolyEditPlanarProjectionUvActivity
  }
}

@JsName("EGroupEdgeInsertionMode")
public external object GroupEdgeInsertionMode {
  public var Retriangulate: String

  public var PlaneCut: String

  @JsName("EGroupEdgeInsertionMode_MAX")
  public var Max: String
}

public open external class GroupEdgeInsertionProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("InsertionMode")
  public open var insertionMode: String

  @JsName("VertexTolerance")
  public open var vertexTolerance: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GroupEdgeInsertionProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GroupEdgeInsertionProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroupEdgeInsertionProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroupEdgeInsertionProperties

    @JsName("C")
    public fun copy(other: UObject): GroupEdgeInsertionProperties

    @JsName("C")
    public fun copy(other: Any): GroupEdgeInsertionProperties
  }
}

public open external class PolyEditInsertEdgeActivity(
  outer: UObject,
) : InteractiveToolActivity {
  @JsName("Settings")
  public open var settings: GroupEdgeInsertionProperties

  @JsName("ActivityContext")
  public open var activityContext: PolyEditActivityContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditInsertEdgeActivity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditInsertEdgeActivity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditInsertEdgeActivity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditInsertEdgeActivity

    @JsName("C")
    public fun copy(other: UObject): PolyEditInsertEdgeActivity

    @JsName("C")
    public fun copy(other: Any): PolyEditInsertEdgeActivity
  }
}

@JsName("EEdgeLoopPositioningMode")
public external object EdgeLoopPositioningMode {
  public var Even: String

  public var ProportionOffset: String

  public var DistanceOffset: String

  @JsName("EEdgeLoopPositioningMode_MAX")
  public var Max: String
}

@JsName("EEdgeLoopInsertionMode")
public external object EdgeLoopInsertionMode {
  public var Retriangulate: String

  public var PlaneCut: String

  @JsName("EEdgeLoopInsertionMode_MAX")
  public var Max: String
}

public open external class EdgeLoopInsertionProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("PositionMode")
  public open var positionMode: String

  @JsName("InsertionMode")
  public open var insertionMode: String

  @JsName("NumLoops")
  public open var numLoops: Number

  @JsName("ProportionOffset")
  public open var proportionOffset: Any

  @JsName("DistanceOffset")
  public open var distanceOffset: Any

  @JsName("bInteractive")
  public open var interactive: Boolean

  @JsName("bFlipOffsetDirection")
  public open var flipOffsetDirection: Boolean

  @JsName("bHighlightProblemGroups")
  public open var highlightProblemGroups: Boolean

  @JsName("VertexTolerance")
  public open var vertexTolerance: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdgeLoopInsertionProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdgeLoopInsertionProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdgeLoopInsertionProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdgeLoopInsertionProperties

    @JsName("C")
    public fun copy(other: UObject): EdgeLoopInsertionProperties

    @JsName("C")
    public fun copy(other: Any): EdgeLoopInsertionProperties
  }
}

public open external class PolyEditInsertEdgeLoopActivity(
  outer: UObject,
) : InteractiveToolActivity {
  @JsName("Settings")
  public open var settings: EdgeLoopInsertionProperties

  @JsName("ActivityContext")
  public open var activityContext: PolyEditActivityContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditInsertEdgeLoopActivity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditInsertEdgeLoopActivity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditInsertEdgeLoopActivity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditInsertEdgeLoopActivity

    @JsName("C")
    public fun copy(other: UObject): PolyEditInsertEdgeLoopActivity

    @JsName("C")
    public fun copy(other: Any): PolyEditInsertEdgeLoopActivity
  }
}

public open external class PolyEditBevelEdgeProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("BevelDistance")
  public open var bevelDistance: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditBevelEdgeProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditBevelEdgeProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditBevelEdgeProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditBevelEdgeProperties

    @JsName("C")
    public fun copy(other: UObject): PolyEditBevelEdgeProperties

    @JsName("C")
    public fun copy(other: Any): PolyEditBevelEdgeProperties
  }
}

public open external class PolyEditBevelEdgeActivity(
  outer: UObject,
) : InteractiveToolActivity {
  @JsName("BevelProperties")
  public open var bevelProperties: PolyEditBevelEdgeProperties

  @JsName("ActivityContext")
  public open var activityContext: PolyEditActivityContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolyEditBevelEdgeActivity

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolyEditBevelEdgeActivity

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolyEditBevelEdgeActivity

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolyEditBevelEdgeActivity

    @JsName("C")
    public fun copy(other: UObject): PolyEditBevelEdgeActivity

    @JsName("C")
    public fun copy(other: Any): PolyEditBevelEdgeActivity
  }
}

public open external class EditMeshPolygonsTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("CommonProps")
  public open var commonProps: PolyEditCommonProperties

  @JsName("EditActions")
  public open var editActions: EditMeshPolygonsToolActions

  @JsName("EditActions_Triangles")
  public open var editActionsTriangles: EditMeshPolygonsToolActionsTriangles

  @JsName("EditEdgeActions")
  public open var editEdgeActions: EditMeshPolygonsToolEdgeActions

  @JsName("EditEdgeActions_Triangles")
  public open var editEdgeActionsTriangles: EditMeshPolygonsToolEdgeActionsTriangles

  @JsName("EditUVActions")
  public open var editUvActions: EditMeshPolygonsToolUvActions

  @JsName("CancelAction")
  public open var cancelAction: EditMeshPolygonsToolCancelAction

  @JsName("AcceptCancelAction")
  public open var acceptCancelAction: EditMeshPolygonsToolAcceptCancelAction

  @JsName("ExtrudeActivity")
  public open var extrudeActivity: PolyEditExtrudeActivity

  @JsName("InsetOutsetActivity")
  public open var insetOutsetActivity: PolyEditInsetOutsetActivity

  @JsName("CutFacesActivity")
  public open var cutFacesActivity: PolyEditCutFacesActivity

  @JsName("PlanarProjectionUVActivity")
  public open var planarProjectionUvActivity: PolyEditPlanarProjectionUvActivity

  @JsName("InsertEdgeActivity")
  public open var insertEdgeActivity: PolyEditInsertEdgeActivity

  @JsName("InsertEdgeLoopActivity")
  public open var insertEdgeLoopActivity: PolyEditInsertEdgeLoopActivity

  @JsName("BevelEdgeActivity")
  public open var bevelEdgeActivity: PolyEditBevelEdgeActivity

  @JsName("ActivityContext")
  public open var activityContext: PolyEditActivityContext

  @JsName("SelectionMechanic")
  public open var selectionMechanic: PolygonSelectionMechanic

  @JsName("DragAlignmentMechanic")
  public open var dragAlignmentMechanic: DragAlignmentMechanic

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshPolygonsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshPolygonsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshPolygonsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshPolygonsTool

    @JsName("C")
    public fun copy(other: UObject): EditMeshPolygonsTool

    @JsName("C")
    public fun copy(other: Any): EditMeshPolygonsTool
  }
}

@JsName("ESetMeshMaterialMode")
public external object SetMeshMaterialMode {
  public var Original: String

  public var Checkerboard: String

  public var Override: String

  @JsName("ESetMeshMaterialMode_MAX")
  public var Max: String
}

public open external class ExistingMeshMaterialProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("MaterialMode")
  public open var materialMode: String

  @JsName("CheckerDensity")
  public open var checkerDensity: Number

  @JsName("OverrideMaterial")
  public open var overrideMaterial: MaterialInterface

  @JsName("UVChannel")
  public open var uvChannel: String

  @JsName("UVChannelNamesList")
  public open var uvChannelNamesList: Array<String>

  @JsName("CheckerMaterial")
  public open var checkerMaterial: MaterialInstanceDynamic

  @JsName("GetUVChannelNamesFunc")
  public open fun getUvChannelNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExistingMeshMaterialProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExistingMeshMaterialProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExistingMeshMaterialProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExistingMeshMaterialProperties

    @JsName("C")
    public fun copy(other: UObject): ExistingMeshMaterialProperties

    @JsName("C")
    public fun copy(other: Any): ExistingMeshMaterialProperties
  }
}

@JsName("EMeshEditingMaterialModes")
public external object MeshEditingMaterialModes {
  public var ExistingMaterial: String

  public var Diffuse: String

  public var Grey: String

  public var Soft: String

  public var Transparent: String

  public var TangentNormal: String

  public var VertexColor: String

  public var CustomImage: String

  public var Custom: String

  @JsName("EMeshEditingMaterialModes_MAX")
  public var Max: String
}

public open external class MeshEditingViewProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  @JsName("MaterialMode")
  public open var materialMode: String

  @JsName("bFlatShading")
  public open var flatShading: Boolean

  @JsName("Color")
  public open var color: LinearColor

  @JsName("UImage")
  public open var uImage: Texture2d

  @JsName("Opacity")
  public open var opacity: Any

  @JsName("TransparentMaterialColor")
  public open var transparentMaterialColor: LinearColor

  @JsName("bTwoSided")
  public open var twoSided: Boolean

  @JsName("CustomMaterial")
  public open var customMaterial: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshEditingViewProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshEditingViewProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshEditingViewProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshEditingViewProperties

    @JsName("C")
    public fun copy(other: UObject): MeshEditingViewProperties

    @JsName("C")
    public fun copy(other: Any): MeshEditingViewProperties
  }
}

@JsName("MeshUVChannelProperties")
public open external class MeshUvChannelProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("UVChannel")
  public open var uvChannel: String

  @JsName("UVChannelNamesList")
  public open var uvChannelNamesList: Array<String>

  @JsName("GetUVChannelNamesFunc")
  public open fun getUvChannelNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshUvChannelProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshUvChannelProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshUvChannelProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshUvChannelProperties

    @JsName("C")
    public fun copy(other: UObject): MeshUvChannelProperties

    @JsName("C")
    public fun copy(other: Any): MeshUvChannelProperties
  }
}

public open external class RecomputeUVsToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RecomputeUVsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RecomputeUVsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RecomputeUVsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RecomputeUVsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): RecomputeUVsToolBuilder

    @JsName("C")
    public fun copy(other: Any): RecomputeUVsToolBuilder
  }
}

public open external class RecomputeUVsTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("UVChannelProperties")
  public open var uvChannelProperties: MeshUvChannelProperties

  @JsName("Settings")
  public open var settings: RecomputeUVsToolProperties

  @JsName("PolygroupLayerProperties")
  public open var polygroupLayerProperties: PolygroupLayersProperties

  @JsName("MaterialSettings")
  public open var materialSettings: ExistingMeshMaterialProperties

  @JsName("bCreateUVLayoutViewOnSetup")
  public open var createUvLayoutViewOnSetup: Boolean

  @JsName("UVLayoutView")
  public open var uvLayoutView: UvLayoutPreview

  @JsName("RecomputeUVsOpFactory")
  public open var recomputeUVsOpFactory: RecomputeUVsOpFactory

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RecomputeUVsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RecomputeUVsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RecomputeUVsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RecomputeUVsTool

    @JsName("C")
    public fun copy(other: UObject): RecomputeUVsTool

    @JsName("C")
    public fun copy(other: Any): RecomputeUVsTool
  }
}

@JsName("UVLayoutToolBuilder")
public open external class UvLayoutToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvLayoutToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvLayoutToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvLayoutToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvLayoutToolBuilder

    @JsName("C")
    public fun copy(other: UObject): UvLayoutToolBuilder

    @JsName("C")
    public fun copy(other: Any): UvLayoutToolBuilder
  }
}

@JsName("UVLayoutTool")
public open external class UvLayoutTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("UVChannelProperties")
  public open var uvChannelProperties: MeshUvChannelProperties

  @JsName("BasicProperties")
  public open var basicProperties: UvLayoutProperties

  @JsName("MaterialSettings")
  public open var materialSettings: ExistingMeshMaterialProperties

  @JsName("Previews")
  public open var previews: Array<MeshOpPreviewWithBackgroundCompute>

  @JsName("Factories")
  public open var factories: Array<UvLayoutOperatorFactory>

  @JsName("UVLayoutView")
  public open var uvLayoutView: UvLayoutPreview

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvLayoutTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvLayoutTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvLayoutTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvLayoutTool

    @JsName("C")
    public fun copy(other: UObject): UvLayoutTool

    @JsName("C")
    public fun copy(other: Any): UvLayoutTool
  }
}

@JsName("UVProjectionToolBuilder")
public open external class UvProjectionToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvProjectionToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvProjectionToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvProjectionToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvProjectionToolBuilder

    @JsName("C")
    public fun copy(other: UObject): UvProjectionToolBuilder

    @JsName("C")
    public fun copy(other: Any): UvProjectionToolBuilder
  }
}

@JsName("UVProjectionToolEditActions")
public open external class UvProjectionToolEditActions(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Reset")
  public open fun reset(): Unit

  @JsName("AutoFitAlign")
  public open fun autoFitAlign(): Unit

  @JsName("AutoFit")
  public open fun autoFit(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvProjectionToolEditActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvProjectionToolEditActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvProjectionToolEditActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvProjectionToolEditActions

    @JsName("C")
    public fun copy(other: UObject): UvProjectionToolEditActions

    @JsName("C")
    public fun copy(other: Any): UvProjectionToolEditActions
  }
}

@JsName("EUVProjectionMethod")
public external object UVProjectionMethod {
  public var Box: String

  public var Cylinder: String

  public var Plane: String

  public var ExpMap: String

  @JsName("EUVProjectionMethod_MAX")
  public var Max: String
}

@JsName("EUVProjectionToolInitializationMode")
public external object UVProjectionToolInitializationMode {
  public var Default: String

  public var UsePrevious: String

  public var AutoFit: String

  public var AutoFitAlign: String

  @JsName("EUVProjectionToolInitializationMode_MAX")
  public var Max: String
}

@JsName("UVProjectionToolProperties")
public open external class UvProjectionToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("ProjectionType")
  public open var projectionType: String

  @JsName("Dimensions")
  public open var dimensions: Vector

  @JsName("bUniformDimensions")
  public open var uniformDimensions: Boolean

  @JsName("Initialization")
  public open var initialization: String

  @JsName("CylinderSplitAngle")
  public open var cylinderSplitAngle: Number

  @JsName("ExpMapNormalBlending")
  public open var expMapNormalBlending: Number

  @JsName("ExpMapSmoothingSteps")
  public open var expMapSmoothingSteps: Number

  @JsName("ExpMapSmoothingAlpha")
  public open var expMapSmoothingAlpha: Number

  @JsName("Rotation")
  public open var rotation: Number

  @JsName("Scale")
  public open var scale: Vector2d

  @JsName("Translation")
  public open var translation: Vector2d

  @JsName("SavedDimensions")
  public open var savedDimensions: Vector

  @JsName("bSavedUniformDimensions")
  public open var savedUniformDimensions: Boolean

  @JsName("SavedTransform")
  public open var savedTransform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvProjectionToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvProjectionToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvProjectionToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvProjectionToolProperties

    @JsName("C")
    public fun copy(other: UObject): UvProjectionToolProperties

    @JsName("C")
    public fun copy(other: Any): UvProjectionToolProperties
  }
}

@JsName("UVProjectionTool")
public open external class UvProjectionTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("UVChannelProperties")
  public open var uvChannelProperties: MeshUvChannelProperties

  @JsName("BasicProperties")
  public open var basicProperties: UvProjectionToolProperties

  @JsName("EditActions")
  public open var editActions: UvProjectionToolEditActions

  @JsName("MaterialSettings")
  public open var materialSettings: ExistingMeshMaterialProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("CheckerMaterial")
  public open var checkerMaterial: MaterialInstanceDynamic

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("OperatorFactory")
  public open var operatorFactory: UvProjectionOperatorFactory

  @JsName("EdgeRenderer")
  public open var edgeRenderer: PreviewGeometry

  @JsName("ClickToSetPlaneBehavior")
  public open var clickToSetPlaneBehavior: SingleClickInputBehavior

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvProjectionTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvProjectionTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvProjectionTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvProjectionTool

    @JsName("C")
    public fun copy(other: UObject): UvProjectionTool

    @JsName("C")
    public fun copy(other: Any): UvProjectionTool
  }
}

@JsName("UVProjectionOperatorFactory")
public open external class UvProjectionOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("Tool")
  public open var tool: UvProjectionTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UvProjectionOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UvProjectionOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UvProjectionOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UvProjectionOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): UvProjectionOperatorFactory

    @JsName("C")
    public fun copy(other: Any): UvProjectionOperatorFactory
  }
}

public open external class AddPatchToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddPatchToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddPatchToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddPatchToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddPatchToolBuilder

    @JsName("C")
    public fun copy(other: UObject): AddPatchToolBuilder

    @JsName("C")
    public fun copy(other: Any): AddPatchToolBuilder
  }
}

public open external class AddPatchToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Width")
  public open var width: Number

  @JsName("Rotation")
  public open var rotation: Number

  @JsName("Subdivisions")
  public open var subdivisions: Number

  @JsName("Shift")
  public open var shift: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddPatchToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddPatchToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddPatchToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddPatchToolProperties

    @JsName("C")
    public fun copy(other: UObject): AddPatchToolProperties

    @JsName("C")
    public fun copy(other: Any): AddPatchToolProperties
  }
}

public open external class AddPatchTool(
  outer: UObject,
) : SingleClickTool {
  @JsName("ShapeSettings")
  public open var shapeSettings: AddPatchToolProperties

  @JsName("MaterialProperties")
  public open var materialProperties: NewMeshMaterialProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddPatchTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddPatchTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddPatchTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddPatchTool

    @JsName("C")
    public fun copy(other: UObject): AddPatchTool

    @JsName("C")
    public fun copy(other: Any): AddPatchTool
  }
}

public open external class AlignObjectsToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AlignObjectsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AlignObjectsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AlignObjectsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AlignObjectsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): AlignObjectsToolBuilder

    @JsName("C")
    public fun copy(other: Any): AlignObjectsToolBuilder
  }
}

@JsName("EAlignObjectsAlignTypes")
public external object AlignObjectsAlignTypes {
  public var Pivots: String

  public var BoundingBoxes: String

  @JsName("EAlignObjectsAlignTypes_MAX")
  public var Max: String
}

@JsName("EAlignObjectsAlignToOptions")
public external object AlignObjectsAlignToOptions {
  public var FirstSelected: String

  public var LastSelected: String

  public var Combined: String

  @JsName("EAlignObjectsAlignToOptions_MAX")
  public var Max: String
}

@JsName("EAlignObjectsBoxPoint")
public external object AlignObjectsBoxPoint {
  public var Center: String

  public var Bottom: String

  public var Top: String

  public var Left: String

  public var Right: String

  public var Front: String

  public var Back: String

  public var Min: String

  public var Max: String

  @JsName("EAlignObjectsBoxPoint_MAX")
  public var _Max: String
}

public open external class AlignObjectsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("AlignType")
  public open var alignType: String

  @JsName("AlignTo")
  public open var alignTo: String

  @JsName("BoxPosition")
  public open var boxPosition: String

  @JsName("bAlignX")
  public open var alignX: Boolean

  @JsName("bAlignY")
  public open var alignY: Boolean

  @JsName("bAlignZ")
  public open var alignZ: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AlignObjectsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AlignObjectsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AlignObjectsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AlignObjectsToolProperties

    @JsName("C")
    public fun copy(other: UObject): AlignObjectsToolProperties

    @JsName("C")
    public fun copy(other: Any): AlignObjectsToolProperties
  }
}

public open external class AlignObjectsTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("AlignProps")
  public open var alignProps: AlignObjectsToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AlignObjectsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AlignObjectsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AlignObjectsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AlignObjectsTool

    @JsName("C")
    public fun copy(other: UObject): AlignObjectsTool

    @JsName("C")
    public fun copy(other: Any): AlignObjectsTool
  }
}

public open external class BakeMeshAttributeMapsToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeMapsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeMapsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeMapsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeMapsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeMapsToolBuilder

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeMapsToolBuilder
  }
}

@JsName("EBakeTextureResolution")
public external object BakeTextureResolution {
  @JsName("Resolution16")
  public var Sixteen: String

  @JsName("Resolution32")
  public var ThirtyTwo: String

  @JsName("Resolution64")
  public var SixtyFour: String

  @JsName("Resolution128")
  public var OneTwentyEight: String

  @JsName("Resolution256")
  public var TwoFiftySix: String

  @JsName("Resolution512")
  public var FiveTwelve: String

  @JsName("Resolution1024")
  public var TenTwentyFour: String

  @JsName("Resolution2048")
  public var TwentyFortyEight: String

  @JsName("Resolution4096")
  public var FortyNinetySix: String

  @JsName("Resolution8192")
  public var EightyOneNinetyTwo: String

  @JsName("EBakeTextureResolution_MAX")
  public var Max: String
}

@JsName("EBakeTextureBitDepth")
public external object BakeTextureBitDepth {
  @JsName("ChannelBits8")
  public var Eight: String

  @JsName("ChannelBits16")
  public var Sixteen: String

  @JsName("EBakeTextureBitDepth_MAX")
  public var Max: String
}

@JsName("EBakeTextureSamplesPerPixel")
public external object BakeTextureSamplesPerPixel {
  @JsName("Sample1")
  public var One: String

  @JsName("Sample4")
  public var Four: String

  @JsName("Sample16")
  public var Sixteen: String

  @JsName("Sample64")
  public var SixtyFour: String

  @JsName("Sample256")
  public var TwoFiftySix: String

  @JsName("EBakeTextureSamplesPerPixel_MAX")
  public var Max: String
}

public open external class BakeMeshAttributeMapsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("MapTypes")
  public open var mapTypes: Number

  @JsName("MapPreview")
  public open var mapPreview: String

  @JsName("Resolution")
  public open var resolution: String

  @JsName("BitDepth")
  public open var bitDepth: String

  @JsName("SamplesPerPixel")
  public open var samplesPerPixel: String

  @JsName("MapPreviewNamesList")
  public open var mapPreviewNamesList: Array<String>

  @JsName("GetMapPreviewNamesFunc")
  public open fun getMapPreviewNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeMapsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeMapsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeMapsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeMapsToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeMapsToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeMapsToolProperties
  }
}

public open external class BakeOcclusionMapToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("OcclusionRays")
  public open var occlusionRays: Number

  @JsName("MaxDistance")
  public open var maxDistance: Number

  @JsName("SpreadAngle")
  public open var spreadAngle: Number

  @JsName("BiasAngle")
  public open var biasAngle: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeOcclusionMapToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeOcclusionMapToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeOcclusionMapToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeOcclusionMapToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeOcclusionMapToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeOcclusionMapToolProperties
  }
}

@JsName("EBakeCurvatureTypeMode")
public external object BakeCurvatureTypeMode {
  public var MeanAverage: String

  public var Max: String

  public var Min: String

  public var Gaussian: String

  @JsName("EBakeCurvatureTypeMode_MAX")
  public var _Max: String
}

@JsName("EBakeCurvatureColorMode")
public external object BakeCurvatureColorMode {
  public var Grayscale: String

  public var RedBlue: String

  public var RedGreenBlue: String

  @JsName("EBakeCurvatureColorMode_MAX")
  public var Max: String
}

@JsName("EBakeCurvatureClampMode")
public external object BakeCurvatureClampMode {
  public var None: String

  public var OnlyPositive: String

  public var OnlyNegative: String

  @JsName("EBakeCurvatureClampMode_MAX")
  public var Max: String
}

public open external class BakeCurvatureMapToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("CurvatureType")
  public open var curvatureType: String

  @JsName("ColorMapping")
  public open var colorMapping: String

  @JsName("ColorRangeMultiplier")
  public open var colorRangeMultiplier: Number

  @JsName("MinRangeMultiplier")
  public open var minRangeMultiplier: Number

  @JsName("Clamping")
  public open var clamping: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeCurvatureMapToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeCurvatureMapToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeCurvatureMapToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeCurvatureMapToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeCurvatureMapToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeCurvatureMapToolProperties
  }
}

@JsName("BakeTexture2DProperties")
public open external class BakeTexture2dProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SourceTexture")
  public open var sourceTexture: Texture2d

  @JsName("UVLayer")
  public open var uvLayer: String

  @JsName("UVLayerNamesList")
  public open var uvLayerNamesList: Array<String>

  @JsName("GetUVLayerNamesFunc")
  public open fun getUvLayerNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeTexture2dProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeTexture2dProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeTexture2dProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeTexture2dProperties

    @JsName("C")
    public fun copy(other: UObject): BakeTexture2dProperties

    @JsName("C")
    public fun copy(other: Any): BakeTexture2dProperties
  }
}

@JsName("BakeMultiTexture2DProperties")
public open external class BakeMultiTexture2dProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("MaterialIDSourceTextures")
  public open var materialIdSourceTextures: Array<Texture2d>

  @JsName("UVLayer")
  public open var uvLayer: String

  @JsName("UVLayerNamesList")
  public open var uvLayerNamesList: Array<String>

  @JsName("AllSourceTextures")
  public open var allSourceTextures: Array<Texture2d>

  @JsName("GetUVLayerNamesFunc")
  public open fun getUvLayerNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMultiTexture2dProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMultiTexture2dProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMultiTexture2dProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMultiTexture2dProperties

    @JsName("C")
    public fun copy(other: UObject): BakeMultiTexture2dProperties

    @JsName("C")
    public fun copy(other: Any): BakeMultiTexture2dProperties
  }
}

public open external class BakeMeshAttributeTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("OcclusionSettings")
  public open var occlusionSettings: BakeOcclusionMapToolProperties

  @JsName("CurvatureSettings")
  public open var curvatureSettings: BakeCurvatureMapToolProperties

  @JsName("TextureSettings")
  public open var textureSettings: BakeTexture2dProperties

  @JsName("MultiTextureSettings")
  public open var multiTextureSettings: BakeMultiTexture2dProperties

  @JsName("WorkingPreviewMaterial")
  public open var workingPreviewMaterial: MaterialInstanceDynamic

  @JsName("ErrorPreviewMaterial")
  public open var errorPreviewMaterial: MaterialInstanceDynamic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeTool

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeTool

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeTool
  }
}

public open external class BakeVisualizationProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bPreviewAsMaterial")
  public open var previewAsMaterial: Boolean

  @JsName("Brightness")
  public open var brightness: Number

  @JsName("AOMultiplier")
  public open var aoMultiplier: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeVisualizationProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeVisualizationProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeVisualizationProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeVisualizationProperties

    @JsName("C")
    public fun copy(other: UObject): BakeVisualizationProperties

    @JsName("C")
    public fun copy(other: Any): BakeVisualizationProperties
  }
}

public open external class BakeMeshAttributeMapsToolBase(
  outer: UObject,
) : BakeMeshAttributeTool {
  @JsName("VisualizationProps")
  public open var visualizationProps: BakeVisualizationProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("PreviewMaterial")
  public open var previewMaterial: MaterialInstanceDynamic

  @JsName("BentNormalPreviewMaterial")
  public open var bentNormalPreviewMaterial: MaterialInstanceDynamic

  @JsName("CachedMaps")
  public open var cachedMaps: Any

  @JsName("EmptyNormalMap")
  public open var emptyNormalMap: Texture2d

  @JsName("EmptyColorMapBlack")
  public open var emptyColorMapBlack: Texture2d

  @JsName("EmptyColorMapWhite")
  public open var emptyColorMapWhite: Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeMapsToolBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeMapsToolBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeMapsToolBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeMapsToolBase

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeMapsToolBase

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeMapsToolBase
  }
}

public open external class BakeInputMeshProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("TargetStaticMesh")
  public open var targetStaticMesh: StaticMesh

  @JsName("TargetSkeletalMesh")
  public open var targetSkeletalMesh: SkeletalMesh

  @JsName("TargetDynamicMesh")
  public open var targetDynamicMesh: Actor

  @JsName("TargetUVLayer")
  public open var targetUvLayer: String

  @JsName("bHasTargetUVLayer")
  public open var hasTargetUvLayer: Boolean

  @JsName("SourceStaticMesh")
  public open var sourceStaticMesh: StaticMesh

  @JsName("SourceSkeletalMesh")
  public open var sourceSkeletalMesh: SkeletalMesh

  @JsName("SourceDynamicMesh")
  public open var sourceDynamicMesh: Actor

  @JsName("bHideSourceMesh")
  public open var hideSourceMesh: Boolean

  @JsName("SourceNormalMap")
  public open var sourceNormalMap: Texture2d

  @JsName("SourceNormalMapUVLayer")
  public open var sourceNormalMapUvLayer: String

  @JsName("bHasSourceNormalMap")
  public open var hasSourceNormalMap: Boolean

  @JsName("ProjectionDistance")
  public open var projectionDistance: Number

  @JsName("bProjectionInWorldSpace")
  public open var projectionInWorldSpace: Boolean

  @JsName("TargetUVLayerNamesList")
  public open var targetUvLayerNamesList: Array<String>

  @JsName("SourceUVLayerNamesList")
  public open var sourceUvLayerNamesList: Array<String>

  @JsName("GetTargetUVLayerNamesFunc")
  public open fun getTargetUvLayerNamesFunc(): Array<String>

  @JsName("GetSourceUVLayerNamesFunc")
  public open fun getSourceUvLayerNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeInputMeshProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeInputMeshProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeInputMeshProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeInputMeshProperties

    @JsName("C")
    public fun copy(other: UObject): BakeInputMeshProperties

    @JsName("C")
    public fun copy(other: Any): BakeInputMeshProperties
  }
}

public open external class BakeMeshAttributeMapsResultToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Result")
  public open var result: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeMapsResultToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeMapsResultToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeMapsResultToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeMapsResultToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeMapsResultToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeMapsResultToolProperties
  }
}

public open external class BakeMeshAttributeMapsTool(
  outer: UObject,
) : BakeMeshAttributeMapsToolBase {
  @JsName("InputMeshSettings")
  public open var inputMeshSettings: BakeInputMeshProperties

  @JsName("Settings")
  public open var settings: BakeMeshAttributeMapsToolProperties

  @JsName("ResultSettings")
  public open var resultSettings: BakeMeshAttributeMapsResultToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeMapsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeMapsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeMapsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeMapsTool

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeMapsTool

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeMapsTool
  }
}

public open external class BakeNormalMapToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeNormalMapToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeNormalMapToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeNormalMapToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeNormalMapToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeNormalMapToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeNormalMapToolProperties
  }
}

public open external class BakeMeshAttributeVertexToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeVertexToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeVertexToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeVertexToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeVertexToolBuilder

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeVertexToolBuilder

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeVertexToolBuilder
  }
}

@JsName("EBakeVertexOutput")
public external object BakeVertexOutput {
  public var RGBA: String

  public var PerChannel: String

  @JsName("EBakeVertexOutput_MAX")
  public var Max: String
}

@JsName("EBakeVertexChannel")
public external object BakeVertexChannel {
  @JsName("R")
  public var r: String

  @JsName("G")
  public var g: String

  @JsName("B")
  public var b: String

  @JsName("A")
  public var a: String

  public var RGBA: String

  @JsName("EBakeVertexChannel_MAX")
  public var Max: String
}

public open external class BakeMeshAttributeVertexToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("OutputMode")
  public open var outputMode: String

  @JsName("OutputType")
  public open var outputType: Number

  @JsName("OutputTypeR")
  public open var outputTypeR: Number

  @JsName("OutputTypeG")
  public open var outputTypeG: Number

  @JsName("OutputTypeB")
  public open var outputTypeB: Number

  @JsName("OutputTypeA")
  public open var outputTypeA: Number

  @JsName("PreviewMode")
  public open var previewMode: String

  @JsName("bSplitAtNormalSeams")
  public open var splitAtNormalSeams: Boolean

  @JsName("bSplitAtUVSeams")
  public open var splitAtUvSeams: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeVertexToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeVertexToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeVertexToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeVertexToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeVertexToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeVertexToolProperties
  }
}

public open external class BakeMeshAttributeVertexTool(
  outer: UObject,
) : BakeMeshAttributeTool {
  @JsName("InputMeshSettings")
  public open var inputMeshSettings: BakeInputMeshProperties

  @JsName("Settings")
  public open var settings: BakeMeshAttributeVertexToolProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("PreviewMaterial")
  public open var previewMaterial: MaterialInstanceDynamic

  @JsName("PreviewAlphaMaterial")
  public open var previewAlphaMaterial: MaterialInstanceDynamic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMeshAttributeVertexTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMeshAttributeVertexTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMeshAttributeVertexTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMeshAttributeVertexTool

    @JsName("C")
    public fun copy(other: UObject): BakeMeshAttributeVertexTool

    @JsName("C")
    public fun copy(other: Any): BakeMeshAttributeVertexTool
  }
}

public open external class BakeMultiMeshAttributeMapsToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMultiMeshAttributeMapsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMultiMeshAttributeMapsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMultiMeshAttributeMapsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMultiMeshAttributeMapsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): BakeMultiMeshAttributeMapsToolBuilder

    @JsName("C")
    public fun copy(other: Any): BakeMultiMeshAttributeMapsToolBuilder
  }
}

public open external class BakeMultiMeshAttributeMapsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("MapTypes")
  public open var mapTypes: Number

  @JsName("MapPreview")
  public open var mapPreview: String

  @JsName("Resolution")
  public open var resolution: String

  @JsName("BitDepth")
  public open var bitDepth: String

  @JsName("SamplesPerPixel")
  public open var samplesPerPixel: String

  @JsName("MapPreviewNamesList")
  public open var mapPreviewNamesList: Array<String>

  @JsName("GetMapPreviewNamesFunc")
  public open fun getMapPreviewNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMultiMeshAttributeMapsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMultiMeshAttributeMapsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMultiMeshAttributeMapsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMultiMeshAttributeMapsToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeMultiMeshAttributeMapsToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeMultiMeshAttributeMapsToolProperties
  }
}

public open external class BakeMultiMeshDetailProperties {
  @JsName("SourceMesh")
  public open var sourceMesh: StaticMesh

  @JsName("SourceTexture")
  public open var sourceTexture: Texture2d

  @JsName("SourceTextureUVLayer")
  public open var sourceTextureUvLayer: Number

  public open fun clone(): BakeMultiMeshDetailProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BakeMultiMeshDetailProperties

    @JsName("C")
    public fun copy(other: Any): BakeMultiMeshDetailProperties
  }
}

public open external class BakeMultiMeshInputToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("TargetStaticMesh")
  public open var targetStaticMesh: StaticMesh

  @JsName("TargetUVLayer")
  public open var targetUvLayer: String

  @JsName("SourceMeshes")
  public open var sourceMeshes: Array<BakeMultiMeshDetailProperties>

  @JsName("ProjectionDistance")
  public open var projectionDistance: Number

  @JsName("TargetUVLayerNamesList")
  public open var targetUvLayerNamesList: Array<String>

  @JsName("GetTargetUVLayerNamesFunc")
  public open fun getTargetUvLayerNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMultiMeshInputToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMultiMeshInputToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMultiMeshInputToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMultiMeshInputToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeMultiMeshInputToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeMultiMeshInputToolProperties
  }
}

public open external class BakeMultiMeshAttributeMapsTool(
  outer: UObject,
) : BakeMeshAttributeMapsToolBase {
  @JsName("Settings")
  public open var settings: BakeMultiMeshAttributeMapsToolProperties

  @JsName("InputMeshSettings")
  public open var inputMeshSettings: BakeMultiMeshInputToolProperties

  @JsName("ResultSettings")
  public open var resultSettings: BakeMeshAttributeMapsResultToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeMultiMeshAttributeMapsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeMultiMeshAttributeMapsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeMultiMeshAttributeMapsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeMultiMeshAttributeMapsTool

    @JsName("C")
    public fun copy(other: UObject): BakeMultiMeshAttributeMapsTool

    @JsName("C")
    public fun copy(other: Any): BakeMultiMeshAttributeMapsTool
  }
}

public open external class BakeTransformToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeTransformToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeTransformToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeTransformToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeTransformToolBuilder

    @JsName("C")
    public fun copy(other: UObject): BakeTransformToolBuilder

    @JsName("C")
    public fun copy(other: Any): BakeTransformToolBuilder
  }
}

@JsName("EBakeScaleMethod")
public external object BakeScaleMethod {
  public var BakeFullScale: String

  public var BakeNonuniformScale: String

  public var DoNotBakeScale: String

  @JsName("EBakeScaleMethod_MAX")
  public var Max: String
}

public open external class BakeTransformToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bBakeRotation")
  public open var bakeRotation: Boolean

  @JsName("BakeScale")
  public open var bakeScale: String

  @JsName("bRecenterPivot")
  public open var recenterPivot: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeTransformToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeTransformToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeTransformToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeTransformToolProperties

    @JsName("C")
    public fun copy(other: UObject): BakeTransformToolProperties

    @JsName("C")
    public fun copy(other: Any): BakeTransformToolProperties
  }
}

public open external class BakeTransformTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: BakeTransformToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeTransformTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeTransformTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeTransformTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeTransformTool

    @JsName("C")
    public fun copy(other: UObject): BakeTransformTool

    @JsName("C")
    public fun copy(other: Any): BakeTransformTool
  }
}

@JsName("ECollisionGeometryMode")
public external object CollisionGeometryMode {
  public var Default: String

  public var SimpleAndComplex: String

  public var UseSimpleAsComplex: String

  public var UseComplexAsSimple: String

  @JsName("ECollisionGeometryMode_MAX")
  public var Max: String
}

public open external class PhysicsSphereData {
  @JsName("Radius")
  public open var radius: Number

  @JsName("Transform")
  public open var transform: Transform

  @JsName("Element")
  public open var element: KShapeElem

  public open fun clone(): PhysicsSphereData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicsSphereData

    @JsName("C")
    public fun copy(other: Any): PhysicsSphereData
  }
}

public open external class PhysicsBoxData {
  @JsName("Dimensions")
  public open var dimensions: Vector

  @JsName("Transform")
  public open var transform: Transform

  @JsName("Element")
  public open var element: KShapeElem

  public open fun clone(): PhysicsBoxData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicsBoxData

    @JsName("C")
    public fun copy(other: Any): PhysicsBoxData
  }
}

public open external class PhysicsCapsuleData {
  @JsName("Radius")
  public open var radius: Number

  @JsName("Length")
  public open var length: Number

  @JsName("Transform")
  public open var transform: Transform

  @JsName("Element")
  public open var element: KShapeElem

  public open fun clone(): PhysicsCapsuleData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicsCapsuleData

    @JsName("C")
    public fun copy(other: Any): PhysicsCapsuleData
  }
}

public open external class PhysicsConvexData {
  @JsName("NumVertices")
  public open var numVertices: Number

  @JsName("NumFaces")
  public open var numFaces: Number

  @JsName("Element")
  public open var element: KShapeElem

  public open fun clone(): PhysicsConvexData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicsConvexData

    @JsName("C")
    public fun copy(other: Any): PhysicsConvexData
  }
}

public open external class PhysicsObjectToolPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("ObjectName")
  public open var objectName: String

  @JsName("CollisionType")
  public open var collisionType: String

  @JsName("Spheres")
  public open var spheres: Array<PhysicsSphereData>

  @JsName("Boxes")
  public open var boxes: Array<PhysicsBoxData>

  @JsName("Capsules")
  public open var capsules: Array<PhysicsCapsuleData>

  @JsName("Convexes")
  public open var convexes: Array<PhysicsConvexData>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsObjectToolPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsObjectToolPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsObjectToolPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsObjectToolPropertySet

    @JsName("C")
    public fun copy(other: UObject): PhysicsObjectToolPropertySet

    @JsName("C")
    public fun copy(other: Any): PhysicsObjectToolPropertySet
  }
}

public open external class CollisionGeometryVisualizationProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("LineThickness")
  public open var lineThickness: Number

  @JsName("bShowHidden")
  public open var showHidden: Boolean

  @JsName("Color")
  public open var color: Color

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CollisionGeometryVisualizationProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CollisionGeometryVisualizationProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CollisionGeometryVisualizationProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CollisionGeometryVisualizationProperties

    @JsName("C")
    public fun copy(other: UObject): CollisionGeometryVisualizationProperties

    @JsName("C")
    public fun copy(other: Any): CollisionGeometryVisualizationProperties
  }
}

public open external class ConvertMeshesToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConvertMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConvertMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConvertMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConvertMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): ConvertMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): ConvertMeshesToolBuilder
  }
}

public open external class ConvertMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bTransferMaterials")
  public open var transferMaterials: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConvertMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConvertMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConvertMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConvertMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): ConvertMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): ConvertMeshesToolProperties
  }
}

public open external class ConvertMeshesTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: ConvertMeshesToolProperties

  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConvertMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConvertMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConvertMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConvertMeshesTool

    @JsName("C")
    public fun copy(other: UObject): ConvertMeshesTool

    @JsName("C")
    public fun copy(other: Any): ConvertMeshesTool
  }
}

public open external class ConvertToPolygonsToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConvertToPolygonsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConvertToPolygonsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConvertToPolygonsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConvertToPolygonsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): ConvertToPolygonsToolBuilder

    @JsName("C")
    public fun copy(other: Any): ConvertToPolygonsToolBuilder
  }
}

@JsName("EConvertToPolygonsMode")
public external object ConvertToPolygonsMode {
  public var FaceNormalDeviation: String

  @JsName("FromUVIslands")
  public var FromUvIslands: String

  public var FromNormalSeams: String

  public var FromConnectedTris: String

  public var FromFurthestPointSampling: String

  @JsName("EConvertToPolygonsMode_MAX")
  public var Max: String
}

public open external class ConvertToPolygonsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("ConversionMode")
  public open var conversionMode: String

  @JsName("AngleTolerance")
  public open var angleTolerance: Number

  @JsName("NumPoints")
  public open var numPoints: Number

  @JsName("bSplitExisting")
  public open var splitExisting: Boolean

  @JsName("bNormalWeighted")
  public open var normalWeighted: Boolean

  @JsName("NormalWeighting")
  public open var normalWeighting: Number

  @JsName("MinGroupSize")
  public open var minGroupSize: Number

  @JsName("bCalculateNormals")
  public open var calculateNormals: Boolean

  @JsName("bShowGroupColors")
  public open var showGroupColors: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConvertToPolygonsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConvertToPolygonsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConvertToPolygonsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConvertToPolygonsToolProperties

    @JsName("C")
    public fun copy(other: UObject): ConvertToPolygonsToolProperties

    @JsName("C")
    public fun copy(other: Any): ConvertToPolygonsToolProperties
  }
}

public open external class ConvertToPolygonsTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("Settings")
  public open var settings: ConvertToPolygonsToolProperties

  @JsName("PreviewCompute")
  public open var previewCompute: MeshOpPreviewWithBackgroundCompute

  @JsName("PreviewGeometry")
  public open var previewGeometry: PreviewGeometry

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConvertToPolygonsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConvertToPolygonsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConvertToPolygonsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConvertToPolygonsTool

    @JsName("C")
    public fun copy(other: UObject): ConvertToPolygonsTool

    @JsName("C")
    public fun copy(other: Any): ConvertToPolygonsTool
  }
}

public open external class ConvertToPolygonsOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("ConvertToPolygonsTool")
  public open var convertToPolygonsTool: ConvertToPolygonsTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConvertToPolygonsOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConvertToPolygonsOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConvertToPolygonsOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConvertToPolygonsOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): ConvertToPolygonsOperatorFactory

    @JsName("C")
    public fun copy(other: Any): ConvertToPolygonsOperatorFactory
  }
}

public open external class CubeGridToolBuilder(
  outer: UObject,
) : InteractiveToolWithToolTargetsBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CubeGridToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CubeGridToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CubeGridToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CubeGridToolBuilder

    @JsName("C")
    public fun copy(other: UObject): CubeGridToolBuilder

    @JsName("C")
    public fun copy(other: Any): CubeGridToolBuilder
  }
}

@JsName("ECubeGridToolFaceSelectionMode")
public external object CubeGridToolFaceSelectionMode {
  public var OutsideBasedOnNormal: String

  public var InsideBasedOnNormal: String

  public var OutsideBasedOnViewRay: String

  public var InsideBasedOnViewRay: String

  @JsName("ECubeGridToolFaceSelectionMode_MAX")
  public var Max: String
}

public open external class CubeGridToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("GridFrameOrigin")
  public open var gridFrameOrigin: Vector

  @JsName("GridFrameOrientation")
  public open var gridFrameOrientation: Rotator

  @JsName("bShowGizmo")
  public open var showGizmo: Boolean

  @JsName("BlocksPerStep")
  public open var blocksPerStep: Number

  @JsName("PowerOfTwo")
  public open var powerOfTwo: Number

  @JsName("BlockBaseSize")
  public open var blockBaseSize: Any

  @JsName("bCrosswiseDiagonal")
  public open var crosswiseDiagonal: Boolean

  @JsName("PlaneTolerance")
  public open var planeTolerance: Any

  @JsName("bHitUnrelatedGeometry")
  public open var hitUnrelatedGeometry: Boolean

  @JsName("bHitGridGroundPlaneIfCloser")
  public open var hitGridGroundPlaneIfCloser: Boolean

  @JsName("FaceSelectionMode")
  public open var faceSelectionMode: String

  @JsName("ToggleCornerMode")
  public open var toggleCornerMode: String

  @JsName("PushPull")
  public open var pushPull: String

  @JsName("ResizeGrid")
  public open var resizeGrid: String

  @JsName("SlideSelection")
  public open var slideSelection: String

  @JsName("FlipSelection")
  public open var flipSelection: String

  @JsName("GridGizmo")
  public open var gridGizmo: String

  @JsName("QuickShiftGizmo")
  public open var quickShiftGizmo: String

  @JsName("AlignGizmo")
  public open var alignGizmo: String

  @JsName("bInCornerMode")
  public open var inCornerMode: Boolean

  @JsName("bAllowedToEditGrid")
  public open var allowedToEditGrid: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CubeGridToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CubeGridToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CubeGridToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CubeGridToolProperties

    @JsName("C")
    public fun copy(other: UObject): CubeGridToolProperties

    @JsName("C")
    public fun copy(other: Any): CubeGridToolProperties
  }
}

public open external class CubeGridToolActions(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SlideForward")
  public open fun slideForward(): Unit

  @JsName("SlideBack")
  public open fun slideBack(): Unit

  @JsName("Push")
  public open fun push(): Unit

  @JsName("Pull")
  public open fun pull(): Unit

  @JsName("Flip")
  public open fun flip(): Unit

  @JsName("CornerMode")
  public open fun cornerMode(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CubeGridToolActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CubeGridToolActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CubeGridToolActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CubeGridToolActions

    @JsName("C")
    public fun copy(other: UObject): CubeGridToolActions

    @JsName("C")
    public fun copy(other: Any): CubeGridToolActions
  }
}

public open external class CubeGridDuringActivityActions(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Done")
  public open fun done(): Unit

  @JsName("Cancel")
  public open fun cancel(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CubeGridDuringActivityActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CubeGridDuringActivityActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CubeGridDuringActivityActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CubeGridDuringActivityActions

    @JsName("C")
    public fun copy(other: UObject): CubeGridDuringActivityActions

    @JsName("C")
    public fun copy(other: Any): CubeGridDuringActivityActions
  }
}

public open external class CubeGridTool(
  outer: UObject,
) : InteractiveTool {
  @JsName("GridGizmo")
  public open var gridGizmo: CombinedTransformGizmo

  @JsName("GridGizmoAlignmentMechanic")
  public open var gridGizmoAlignmentMechanic: DragAlignmentMechanic

  @JsName("GridGizmoTransformProxy")
  public open var gridGizmoTransformProxy: TransformProxy

  @JsName("LineSets")
  public open var lineSets: PreviewGeometry

  @JsName("ClickDragBehavior")
  public open var clickDragBehavior: ClickDragInputBehavior

  @JsName("HoverBehavior")
  public open var hoverBehavior: MouseHoverBehavior

  @JsName("CtrlMiddleClickBehavior")
  public open var ctrlMiddleClickBehavior: LocalSingleClickInputBehavior

  @JsName("MiddleClickDragBehavior")
  public open var middleClickDragBehavior: LocalClickDragInputBehavior

  @JsName("Settings")
  public open var settings: CubeGridToolProperties

  @JsName("ToolActions")
  public open var toolActions: CubeGridToolActions

  @JsName("DuringActivityActions")
  public open var duringActivityActions: CubeGridDuringActivityActions

  @JsName("MaterialProperties")
  public open var materialProperties: NewMeshMaterialProperties

  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("Target")
  public open var target: ToolTarget

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CubeGridTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CubeGridTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CubeGridTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CubeGridTool

    @JsName("C")
    public fun copy(other: UObject): CubeGridTool

    @JsName("C")
    public fun copy(other: Any): CubeGridTool
  }
}

public open external class DeformMeshPolygonsToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DeformMeshPolygonsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DeformMeshPolygonsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DeformMeshPolygonsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DeformMeshPolygonsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): DeformMeshPolygonsToolBuilder

    @JsName("C")
    public fun copy(other: Any): DeformMeshPolygonsToolBuilder
  }
}

@JsName("EGroupTopologyDeformationStrategy")
public external object GroupTopologyDeformationStrategy {
  public var Linear: String

  public var Laplacian: String

  @JsName("EGroupTopologyDeformationStrategy_MAX")
  public var Max: String
}

@JsName("EQuickTransformerMode")
public external object QuickTransformerMode {
  @JsName("AxisTranslation")
  public var Translation: String

  @JsName("AxisRotation")
  public var Rotation: String

  @JsName("EQuickTransformerMode_MAX")
  public var Max: String
}

@JsName("EWeightScheme")
public external object WeightScheme {
  public var Uniform: String

  public var Umbrella: String

  public var Valence: String

  public var MeanValue: String

  public var Cotangent: String

  public var ClampedCotangent: String

  @JsName("IDTCotangent")
  public var IdtCotangent: String

  @JsName("EWeightScheme_MAX")
  public var Max: String
}

public open external class DeformMeshPolygonsTransformProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("DeformationStrategy")
  public open var deformationStrategy: String

  @JsName("TransformMode")
  public open var transformMode: String

  @JsName("bSelectFaces")
  public open var selectFaces: Boolean

  @JsName("bSelectEdges")
  public open var selectEdges: Boolean

  @JsName("bSelectVertices")
  public open var selectVertices: Boolean

  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  @JsName("SelectedWeightScheme")
  public open var selectedWeightScheme: String

  @JsName("HandleWeight")
  public open var handleWeight: Any

  @JsName("bPostFixHandles")
  public open var postFixHandles: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DeformMeshPolygonsTransformProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DeformMeshPolygonsTransformProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DeformMeshPolygonsTransformProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DeformMeshPolygonsTransformProperties

    @JsName("C")
    public fun copy(other: UObject): DeformMeshPolygonsTransformProperties

    @JsName("C")
    public fun copy(other: Any): DeformMeshPolygonsTransformProperties
  }
}

public open external class DeformMeshPolygonsTool(
  outer: UObject,
) : MeshSurfacePointTool {
  @JsName("TargetWorld")
  public open var targetWorld: World

  @JsName("PreviewMeshActor")
  public open var previewMeshActor: InternalToolFrameworkActor

  @JsName("DynamicMeshComponent")
  public open var dynamicMeshComponent: DynamicMeshComponent

  @JsName("TransformProps")
  public open var transformProps: DeformMeshPolygonsTransformProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DeformMeshPolygonsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DeformMeshPolygonsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DeformMeshPolygonsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DeformMeshPolygonsTool

    @JsName("C")
    public fun copy(other: UObject): DeformMeshPolygonsTool

    @JsName("C")
    public fun copy(other: Any): DeformMeshPolygonsTool
  }
}

@JsName("EDisplaceMeshToolDisplaceType")
public external object DisplaceMeshToolDisplaceType {
  public var Constant: String

  public var DisplacementMap: String

  public var RandomNoise: String

  public var PerlinNoise: String

  public var SineWave: String

  @JsName("EDisplaceMeshToolDisplaceType_MAX")
  public var Max: String
}

@JsName("EDisplaceMeshToolSubdivisionType")
public external object DisplaceMeshToolSubdivisionType {
  public var Flat: String

  @JsName("PNTriangles")
  public var PnTriangles: String

  @JsName("EDisplaceMeshToolSubdivisionType_MAX")
  public var Max: String
}

public open external class DisplaceMeshCommonProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("DisplacementType")
  public open var displacementType: String

  @JsName("DisplaceIntensity")
  public open var displaceIntensity: Number

  @JsName("RandomSeed")
  public open var randomSeed: Number

  @JsName("SubdivisionType")
  public open var subdivisionType: String

  @JsName("Subdivisions")
  public open var subdivisions: Number

  @JsName("WeightMap")
  public open var weightMap: String

  @JsName("WeightMapsList")
  public open var weightMapsList: Array<String>

  @JsName("bInvertWeightMap")
  public open var invertWeightMap: Boolean

  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  @JsName("bDisableSizeWarning")
  public open var disableSizeWarning: Boolean

  @JsName("GetWeightMapsFunc")
  public open fun getWeightMapsFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DisplaceMeshCommonProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DisplaceMeshCommonProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DisplaceMeshCommonProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DisplaceMeshCommonProperties

    @JsName("C")
    public fun copy(other: UObject): DisplaceMeshCommonProperties

    @JsName("C")
    public fun copy(other: Any): DisplaceMeshCommonProperties
  }
}

@JsName("EDisplaceMeshToolChannelType")
public external object DisplaceMeshToolChannelType {
  public var Red: String

  public var Green: String

  public var Blue: String

  public var Alpha: String

  @JsName("EDisplaceMeshToolChannelType_MAX")
  public var Max: String
}

public open external class DisplaceMeshTextureMapProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("DisplacementMap")
  public open var displacementMap: Texture2d

  @JsName("Channel")
  public open var channel: String

  @JsName("DisplacementMapBaseValue")
  public open var displacementMapBaseValue: Number

  @JsName("UVScale")
  public open var uvScale: Vector2d

  @JsName("UVOffset")
  public open var uvOffset: Vector2d

  @JsName("bApplyAdjustmentCurve")
  public open var applyAdjustmentCurve: Boolean

  @JsName("AdjustmentCurve")
  public open var adjustmentCurve: CurveFloat

  @JsName("bRecalcNormals")
  public open var recalcNormals: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DisplaceMeshTextureMapProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DisplaceMeshTextureMapProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DisplaceMeshTextureMapProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DisplaceMeshTextureMapProperties

    @JsName("C")
    public fun copy(other: UObject): DisplaceMeshTextureMapProperties

    @JsName("C")
    public fun copy(other: Any): DisplaceMeshTextureMapProperties
  }
}

public open external class DisplaceMeshDirectionalFilterProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bEnableFilter")
  public open var enableFilter: Boolean

  @JsName("FilterDirection")
  public open var filterDirection: Vector

  @JsName("FilterWidth")
  public open var filterWidth: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DisplaceMeshDirectionalFilterProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DisplaceMeshDirectionalFilterProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DisplaceMeshDirectionalFilterProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DisplaceMeshDirectionalFilterProperties

    @JsName("C")
    public fun copy(other: UObject): DisplaceMeshDirectionalFilterProperties

    @JsName("C")
    public fun copy(other: Any): DisplaceMeshDirectionalFilterProperties
  }
}

public open external class PerlinLayerProperties {
  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Intensity")
  public open var intensity: Number

  public open fun clone(): PerlinLayerProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PerlinLayerProperties

    @JsName("C")
    public fun copy(other: Any): PerlinLayerProperties
  }
}

public open external class DisplaceMeshPerlinNoiseProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("PerlinLayerProperties")
  public open var perlinLayerProperties: Array<PerlinLayerProperties>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DisplaceMeshPerlinNoiseProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DisplaceMeshPerlinNoiseProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DisplaceMeshPerlinNoiseProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DisplaceMeshPerlinNoiseProperties

    @JsName("C")
    public fun copy(other: UObject): DisplaceMeshPerlinNoiseProperties

    @JsName("C")
    public fun copy(other: Any): DisplaceMeshPerlinNoiseProperties
  }
}

public open external class DisplaceMeshSineWaveProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SineWaveFrequency")
  public open var sineWaveFrequency: Number

  @JsName("SineWavePhaseShift")
  public open var sineWavePhaseShift: Number

  @JsName("SineWaveDirection")
  public open var sineWaveDirection: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DisplaceMeshSineWaveProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DisplaceMeshSineWaveProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DisplaceMeshSineWaveProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DisplaceMeshSineWaveProperties

    @JsName("C")
    public fun copy(other: UObject): DisplaceMeshSineWaveProperties

    @JsName("C")
    public fun copy(other: Any): DisplaceMeshSineWaveProperties
  }
}

public open external class DisplaceMeshToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DisplaceMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DisplaceMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DisplaceMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DisplaceMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): DisplaceMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): DisplaceMeshToolBuilder
  }
}

public open external class DisplaceMeshTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("CommonProperties")
  public open var commonProperties: DisplaceMeshCommonProperties

  @JsName("DirectionalFilterProperties")
  public open var directionalFilterProperties: DisplaceMeshDirectionalFilterProperties

  @JsName("TextureMapProperties")
  public open var textureMapProperties: DisplaceMeshTextureMapProperties

  @JsName("NoiseProperties")
  public open var noiseProperties: DisplaceMeshPerlinNoiseProperties

  @JsName("SineWaveProperties")
  public open var sineWaveProperties: DisplaceMeshSineWaveProperties

  @JsName("ActiveContrastCurveTarget")
  public open var activeContrastCurveTarget: CurveFloat

  @JsName("PreviewMeshActor")
  public open var previewMeshActor: InternalToolFrameworkActor

  @JsName("DynamicMeshComponent")
  public open var dynamicMeshComponent: DynamicMeshComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DisplaceMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DisplaceMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DisplaceMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DisplaceMeshTool

    @JsName("C")
    public fun copy(other: UObject): DisplaceMeshTool

    @JsName("C")
    public fun copy(other: Any): DisplaceMeshTool
  }
}

public open external class DrawPolyPathToolBuilder(
  outer: UObject,
) : MeshSurfacePointToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawPolyPathToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawPolyPathToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawPolyPathToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawPolyPathToolBuilder

    @JsName("C")
    public fun copy(other: UObject): DrawPolyPathToolBuilder

    @JsName("C")
    public fun copy(other: Any): DrawPolyPathToolBuilder
  }
}

@JsName("EDrawPolyPathWidthMode")
public external object DrawPolyPathWidthMode {
  public var Fixed: String

  public var Interactive: String

  @JsName("EDrawPolyPathWidthMode_MAX")
  public var Max: String
}

@JsName("EDrawPolyPathRadiusMode")
public external object DrawPolyPathRadiusMode {
  public var Fixed: String

  public var Interactive: String

  @JsName("EDrawPolyPathRadiusMode_MAX")
  public var Max: String
}

@JsName("EDrawPolyPathExtrudeMode")
public external object DrawPolyPathExtrudeMode {
  public var Flat: String

  public var Fixed: String

  public var Interactive: String

  public var RampFixed: String

  public var RampInteractive: String

  @JsName("EDrawPolyPathExtrudeMode_MAX")
  public var Max: String
}

public open external class DrawPolyPathProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("WidthMode")
  public open var widthMode: String

  @JsName("Width")
  public open var width: Number

  @JsName("bRoundedCorners")
  public open var roundedCorners: Boolean

  @JsName("RadiusMode")
  public open var radiusMode: String

  @JsName("CornerRadius")
  public open var cornerRadius: Number

  @JsName("RadialSlices")
  public open var radialSlices: Number

  @JsName("bSinglePolyGroup")
  public open var singlePolyGroup: Boolean

  @JsName("ExtrudeMode")
  public open var extrudeMode: String

  @JsName("ExtrudeHeight")
  public open var extrudeHeight: Number

  @JsName("RampStartRatio")
  public open var rampStartRatio: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawPolyPathProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawPolyPathProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawPolyPathProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawPolyPathProperties

    @JsName("C")
    public fun copy(other: UObject): DrawPolyPathProperties

    @JsName("C")
    public fun copy(other: Any): DrawPolyPathProperties
  }
}

@JsName("EDrawPolyPathExtrudeDirection")
public external object DrawPolyPathExtrudeDirection {
  public var SelectionNormal: String

  public var WorldX: String

  public var WorldY: String

  public var WorldZ: String

  public var LocalX: String

  public var LocalY: String

  public var LocalZ: String

  @JsName("EDrawPolyPathExtrudeDirection_MAX")
  public var Max: String
}

public open external class DrawPolyPathExtrudeProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Direction")
  public open var direction: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawPolyPathExtrudeProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawPolyPathExtrudeProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawPolyPathExtrudeProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawPolyPathExtrudeProperties

    @JsName("C")
    public fun copy(other: UObject): DrawPolyPathExtrudeProperties

    @JsName("C")
    public fun copy(other: Any): DrawPolyPathExtrudeProperties
  }
}

public open external class DrawPolyPathTool(
  outer: UObject,
) : InteractiveTool {
  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("TransformProps")
  public open var transformProps: DrawPolyPathProperties

  @JsName("ExtrudeProperties")
  public open var extrudeProperties: DrawPolyPathExtrudeProperties

  @JsName("MaterialProperties")
  public open var materialProperties: NewMeshMaterialProperties

  @JsName("PlaneMechanic")
  public open var planeMechanic: ConstructionPlaneMechanic

  @JsName("EditPreview")
  public open var editPreview: PolyEditPreviewMesh

  @JsName("ExtrudeHeightMechanic")
  public open var extrudeHeightMechanic: PlaneDistanceFromHitMechanic

  @JsName("CurveDistMechanic")
  public open var curveDistMechanic: SpatialCurveDistanceMechanic

  @JsName("SurfacePathMechanic")
  public open var surfacePathMechanic: CollectSurfacePathMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawPolyPathTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawPolyPathTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawPolyPathTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawPolyPathTool

    @JsName("C")
    public fun copy(other: UObject): DrawPolyPathTool

    @JsName("C")
    public fun copy(other: Any): DrawPolyPathTool
  }
}

public open external class DynamicMeshBrushTool(
  outer: UObject,
) : BaseBrushTool {
  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshBrushTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshBrushTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshBrushTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshBrushTool

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshBrushTool

    @JsName("C")
    public fun copy(other: Any): DynamicMeshBrushTool
  }
}

public open external class DynamicMeshSculptToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshSculptToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshSculptToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshSculptToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshSculptToolBuilder

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshSculptToolBuilder

    @JsName("C")
    public fun copy(other: Any): DynamicMeshSculptToolBuilder
  }
}

@JsName("EBrushToolSizeType")
public external object BrushToolSizeType {
  public var Adaptive: String

  public var World: String

  @JsName("EBrushToolSizeType_MAX")
  public var Max: String
}

public open external class BrushToolRadius {
  @JsName("SizeType")
  public open var sizeType: String

  @JsName("AdaptiveSize")
  public open var adaptiveSize: Number

  @JsName("WorldRadius")
  public open var worldRadius: Number

  public open fun clone(): BrushToolRadius

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BrushToolRadius

    @JsName("C")
    public fun copy(other: Any): BrushToolRadius
  }
}

public open external class DynamicMeshBrushProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("BrushSize")
  public open var brushSize: BrushToolRadius

  @JsName("BrushFalloffAmount")
  public open var brushFalloffAmount: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("bHitBackFaces")
  public open var hitBackFaces: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshBrushProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshBrushProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshBrushProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshBrushProperties

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshBrushProperties

    @JsName("C")
    public fun copy(other: Any): DynamicMeshBrushProperties
  }
}

@JsName("EDynamicMeshSculptBrushType")
public external object DynamicMeshSculptBrushType {
  public var Move: String

  public var PullKelvin: String

  public var PullSharpKelvin: String

  public var Smooth: String

  public var Offset: String

  public var SculptView: String

  public var SculptMax: String

  public var Inflate: String

  public var ScaleKelvin: String

  public var Pinch: String

  public var TwistKelvin: String

  public var Flatten: String

  public var Plane: String

  public var PlaneViewAligned: String

  public var FixedPlane: String

  public var Resample: String

  public var LastValue: String

  @JsName("EDynamicMeshSculptBrushType_MAX")
  public var Max: String
}

public open external class DynamicMeshBrushSculptProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bIsRemeshingEnabled")
  public open var isRemeshingEnabled: Boolean

  @JsName("PrimaryBrushType")
  public open var primaryBrushType: String

  @JsName("PrimaryBrushSpeed")
  public open var primaryBrushSpeed: Number

  @JsName("bPreserveUVFlow")
  public open var preserveUvFlow: Boolean

  @JsName("bFreezeTarget")
  public open var freezeTarget: Boolean

  @JsName("SmoothBrushSpeed")
  public open var smoothBrushSpeed: Number

  @JsName("bDetailPreservingSmooth")
  public open var detailPreservingSmooth: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshBrushSculptProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshBrushSculptProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshBrushSculptProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshBrushSculptProperties

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshBrushSculptProperties

    @JsName("C")
    public fun copy(other: Any): DynamicMeshBrushSculptProperties
  }
}

public open external class DynamicSculptToolActions(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("DiscardAttributes")
  public open fun discardAttributes(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicSculptToolActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicSculptToolActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicSculptToolActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicSculptToolActions

    @JsName("C")
    public fun copy(other: UObject): DynamicSculptToolActions

    @JsName("C")
    public fun copy(other: Any): DynamicSculptToolActions
  }
}

@JsName("EMeshBoundaryConstraint")
public external object MeshBoundaryConstraint {
  public var Fixed: String

  public var Refine: String

  public var Free: String

  @JsName("EMeshBoundaryConstraint_MAX")
  public var Max: String
}

@JsName("EGroupBoundaryConstraint")
public external object GroupBoundaryConstraint {
  public var Fixed: String

  public var Refine: String

  public var Free: String

  public var Ignore: String

  @JsName("EGroupBoundaryConstraint_MAX")
  public var Max: String
}

@JsName("EMaterialBoundaryConstraint")
public external object MaterialBoundaryConstraint {
  public var Fixed: String

  public var Refine: String

  public var Free: String

  public var Ignore: String

  @JsName("EMaterialBoundaryConstraint_MAX")
  public var Max: String
}

public open external class MeshConstraintProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bPreserveSharpEdges")
  public open var preserveSharpEdges: Boolean

  @JsName("MeshBoundaryConstraint")
  public open var meshBoundaryConstraint: String

  @JsName("GroupBoundaryConstraint")
  public open var groupBoundaryConstraint: String

  @JsName("MaterialBoundaryConstraint")
  public open var materialBoundaryConstraint: String

  @JsName("bPreventNormalFlips")
  public open var preventNormalFlips: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshConstraintProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshConstraintProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshConstraintProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshConstraintProperties

    @JsName("C")
    public fun copy(other: UObject): MeshConstraintProperties

    @JsName("C")
    public fun copy(other: Any): MeshConstraintProperties
  }
}

public open external class RemeshProperties(
  outer: UObject,
) : MeshConstraintProperties {
  @JsName("SmoothingStrength")
  public open var smoothingStrength: Number

  @JsName("bFlips")
  public open var flips: Boolean

  @JsName("bSplits")
  public open var splits: Boolean

  @JsName("bCollapses")
  public open var collapses: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemeshProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemeshProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemeshProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemeshProperties

    @JsName("C")
    public fun copy(other: UObject): RemeshProperties

    @JsName("C")
    public fun copy(other: Any): RemeshProperties
  }
}

public open external class BrushRemeshProperties(
  outer: UObject,
) : RemeshProperties {
  @JsName("bEnableRemeshing")
  public open var enableRemeshing: Boolean

  @JsName("TriangleSize")
  public open var triangleSize: Number

  @JsName("PreserveDetail")
  public open var preserveDetail: Number

  @JsName("Iterations")
  public open var iterations: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrushRemeshProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrushRemeshProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushRemeshProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushRemeshProperties

    @JsName("C")
    public fun copy(other: UObject): BrushRemeshProperties

    @JsName("C")
    public fun copy(other: Any): BrushRemeshProperties
  }
}

public open external class FixedPlaneBrushProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bPropertySetEnabled")
  public open var propertySetEnabled: Boolean

  @JsName("bShowGizmo")
  public open var showGizmo: Boolean

  public open var position: Vector

  @JsName("Rotation")
  public open var rotation: Quat

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FixedPlaneBrushProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FixedPlaneBrushProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FixedPlaneBrushProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FixedPlaneBrushProperties

    @JsName("C")
    public fun copy(other: UObject): FixedPlaneBrushProperties

    @JsName("C")
    public fun copy(other: Any): FixedPlaneBrushProperties
  }
}

public open external class SculptMaxBrushProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("MaxHeight")
  public open var maxHeight: Number

  @JsName("bFreezeCurrentHeight")
  public open var freezeCurrentHeight: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SculptMaxBrushProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SculptMaxBrushProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SculptMaxBrushProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SculptMaxBrushProperties

    @JsName("C")
    public fun copy(other: UObject): SculptMaxBrushProperties

    @JsName("C")
    public fun copy(other: Any): SculptMaxBrushProperties
  }
}

public open external class KelvinBrushProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("FalloffDistance")
  public open var falloffDistance: Number

  @JsName("Stiffness")
  public open var stiffness: Number

  @JsName("Incompressiblity")
  public open var incompressiblity: Number

  @JsName("BrushSteps")
  public open var brushSteps: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KelvinBrushProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KelvinBrushProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KelvinBrushProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KelvinBrushProperties

    @JsName("C")
    public fun copy(other: UObject): KelvinBrushProperties

    @JsName("C")
    public fun copy(other: Any): KelvinBrushProperties
  }
}

public open external class DynamicMeshSculptTool(
  outer: UObject,
) : MeshSurfacePointTool {
  @JsName("BrushProperties")
  public open var brushProperties: DynamicMeshBrushProperties

  @JsName("SculptProperties")
  public open var sculptProperties: DynamicMeshBrushSculptProperties

  @JsName("SculptMaxBrushProperties")
  public open var sculptMaxBrushProperties: SculptMaxBrushProperties

  @JsName("KelvinBrushProperties")
  public open var kelvinBrushProperties: KelvinBrushProperties

  @JsName("RemeshProperties")
  public open var remeshProperties: BrushRemeshProperties

  @JsName("GizmoProperties")
  public open var gizmoProperties: FixedPlaneBrushProperties

  @JsName("ViewProperties")
  public open var viewProperties: MeshEditingViewProperties

  @JsName("SculptToolActions")
  public open var sculptToolActions: DynamicSculptToolActions

  @JsName("BrushIndicator")
  public open var brushIndicator: BrushStampIndicator

  @JsName("BrushIndicatorMaterial")
  public open var brushIndicatorMaterial: MaterialInstanceDynamic

  @JsName("BrushIndicatorMesh")
  public open var brushIndicatorMesh: PreviewMesh

  @JsName("DynamicMeshComponent")
  public open var dynamicMeshComponent: OctreeDynamicMeshComponent

  @JsName("ActiveOverrideMaterial")
  public open var activeOverrideMaterial: MaterialInstanceDynamic

  @JsName("PlaneTransformGizmo")
  public open var planeTransformGizmo: CombinedTransformGizmo

  @JsName("PlaneTransformProxy")
  public open var planeTransformProxy: TransformProxy

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicMeshSculptTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicMeshSculptTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicMeshSculptTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicMeshSculptTool

    @JsName("C")
    public fun copy(other: UObject): DynamicMeshSculptTool

    @JsName("C")
    public fun copy(other: Any): DynamicMeshSculptTool
  }
}

public open external class EditNormalsToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditNormalsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditNormalsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditNormalsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditNormalsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): EditNormalsToolBuilder

    @JsName("C")
    public fun copy(other: Any): EditNormalsToolBuilder
  }
}

@JsName("ENormalCalculationMethod")
public external object NormalCalculationMethod {
  public var AreaWeighted: String

  public var AngleWeighted: String

  public var AreaAngleWeighting: String

  @JsName("ENormalCalculationMethod_MAX")
  public var Max: String
}

@JsName("ESplitNormalMethod")
public external object SplitNormalMethod {
  public var UseExistingTopology: String

  public var FaceNormalThreshold: String

  @JsName("FaceGroupID")
  public var FaceGroupId: String

  public var PerTriangle: String

  public var PerVertex: String

  @JsName("ESplitNormalMethod_MAX")
  public var Max: String
}

public open external class EditNormalsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bRecomputeNormals")
  public open var recomputeNormals: Boolean

  @JsName("NormalCalculationMethod")
  public open var normalCalculationMethod: String

  @JsName("bFixInconsistentNormals")
  public open var fixInconsistentNormals: Boolean

  @JsName("bInvertNormals")
  public open var invertNormals: Boolean

  @JsName("SplitNormalMethod")
  public open var splitNormalMethod: String

  @JsName("SharpEdgeAngleThreshold")
  public open var sharpEdgeAngleThreshold: Number

  @JsName("bAllowSharpVertices")
  public open var allowSharpVertices: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditNormalsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditNormalsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditNormalsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditNormalsToolProperties

    @JsName("C")
    public fun copy(other: UObject): EditNormalsToolProperties

    @JsName("C")
    public fun copy(other: Any): EditNormalsToolProperties
  }
}

public open external class EditNormalsAdvancedProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditNormalsAdvancedProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditNormalsAdvancedProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditNormalsAdvancedProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditNormalsAdvancedProperties

    @JsName("C")
    public fun copy(other: UObject): EditNormalsAdvancedProperties

    @JsName("C")
    public fun copy(other: Any): EditNormalsAdvancedProperties
  }
}

public open external class EditNormalsTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: EditNormalsToolProperties

  @JsName("AdvancedProperties")
  public open var advancedProperties: EditNormalsAdvancedProperties

  @JsName("Previews")
  public open var previews: Array<MeshOpPreviewWithBackgroundCompute>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditNormalsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditNormalsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditNormalsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditNormalsTool

    @JsName("C")
    public fun copy(other: UObject): EditNormalsTool

    @JsName("C")
    public fun copy(other: Any): EditNormalsTool
  }
}

public open external class EditNormalsOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("Tool")
  public open var tool: EditNormalsTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditNormalsOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditNormalsOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditNormalsOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditNormalsOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): EditNormalsOperatorFactory

    @JsName("C")
    public fun copy(other: Any): EditNormalsOperatorFactory
  }
}

public open external class EditPivotToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditPivotToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditPivotToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditPivotToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditPivotToolBuilder

    @JsName("C")
    public fun copy(other: UObject): EditPivotToolBuilder

    @JsName("C")
    public fun copy(other: Any): EditPivotToolBuilder
  }
}

@JsName("EEditPivotSnapDragRotationMode")
public external object EditPivotSnapDragRotationMode {
  public var Ignore: String

  public var Align: String

  public var AlignFlipped: String

  public var LastValue: String

  @JsName("EEditPivotSnapDragRotationMode_MAX")
  public var Max: String
}

public open external class EditPivotToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bEnableSnapDragging")
  public open var enableSnapDragging: Boolean

  @JsName("RotationMode")
  public open var rotationMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditPivotToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditPivotToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditPivotToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditPivotToolProperties

    @JsName("C")
    public fun copy(other: UObject): EditPivotToolProperties

    @JsName("C")
    public fun copy(other: Any): EditPivotToolProperties
  }
}

public open external class EditPivotToolActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bUseWorldBox")
  public open var useWorldBox: Boolean

  @JsName("WorldOrigin")
  public open fun worldOrigin(): Unit

  @JsName("Top")
  public open fun top(): Unit

  @JsName("Right")
  public open fun right(): Unit

  @JsName("Left")
  public open fun left(): Unit

  @JsName("Front")
  public open fun front(): Unit

  @JsName("Center")
  public open fun center(): Unit

  @JsName("Bottom")
  public open fun bottom(): Unit

  @JsName("Back")
  public open fun back(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditPivotToolActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditPivotToolActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditPivotToolActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditPivotToolActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): EditPivotToolActionPropertySet

    @JsName("C")
    public fun copy(other: Any): EditPivotToolActionPropertySet
  }
}

public open external class EditPivotTarget {
  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  public open fun clone(): EditPivotTarget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditPivotTarget

    @JsName("C")
    public fun copy(other: Any): EditPivotTarget
  }
}

public open external class EditPivotTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("TransformProps")
  public open var transformProps: EditPivotToolProperties

  @JsName("EditPivotActions")
  public open var editPivotActions: EditPivotToolActionPropertySet

  @JsName("ActiveGizmos")
  public open var activeGizmos: Array<EditPivotTarget>

  @JsName("DragAlignmentMechanic")
  public open var dragAlignmentMechanic: DragAlignmentMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditPivotTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditPivotTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditPivotTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditPivotTool

    @JsName("C")
    public fun copy(other: UObject): EditPivotTool

    @JsName("C")
    public fun copy(other: Any): EditPivotTool
  }
}

@JsName("EditUVIslandsToolBuilder")
public open external class EditUvIslandsToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditUvIslandsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditUvIslandsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditUvIslandsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditUvIslandsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): EditUvIslandsToolBuilder

    @JsName("C")
    public fun copy(other: Any): EditUvIslandsToolBuilder
  }
}

@JsName("EditUVIslandsTool")
public open external class EditUvIslandsTool(
  outer: UObject,
) : MeshSurfacePointTool {
  @JsName("MaterialSettings")
  public open var materialSettings: ExistingMeshMaterialProperties

  @JsName("CheckerMaterial")
  public open var checkerMaterial: MaterialInstanceDynamic

  @JsName("TargetWorld")
  public open var targetWorld: World

  @JsName("PreviewMeshActor")
  public open var previewMeshActor: InternalToolFrameworkActor

  @JsName("DynamicMeshComponent")
  public open var dynamicMeshComponent: DynamicMeshComponent

  @JsName("SelectionMechanic")
  public open var selectionMechanic: PolygonSelectionMechanic

  @JsName("MultiTransformer")
  public open var multiTransformer: MultiTransformer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditUvIslandsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditUvIslandsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditUvIslandsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditUvIslandsTool

    @JsName("C")
    public fun copy(other: UObject): EditUvIslandsTool

    @JsName("C")
    public fun copy(other: Any): EditUvIslandsTool
  }
}

public open external class ExtractCollisionGeometryToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExtractCollisionGeometryToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExtractCollisionGeometryToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExtractCollisionGeometryToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExtractCollisionGeometryToolBuilder

    @JsName("C")
    public fun copy(other: UObject): ExtractCollisionGeometryToolBuilder

    @JsName("C")
    public fun copy(other: Any): ExtractCollisionGeometryToolBuilder
  }
}

@JsName("EExtractCollisionOutputType")
public external object ExtractCollisionOutputType {
  public var Simple: String

  public var Complex: String

  @JsName("EExtractCollisionOutputType_MAX")
  public var Max: String
}

public open external class ExtractCollisionToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("CollisionType")
  public open var collisionType: String

  @JsName("bWeldEdges")
  public open var weldEdges: Boolean

  @JsName("bOutputSeparateMeshes")
  public open var outputSeparateMeshes: Boolean

  @JsName("bShowPreview")
  public open var showPreview: Boolean

  @JsName("bShowInputMesh")
  public open var showInputMesh: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExtractCollisionToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExtractCollisionToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExtractCollisionToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExtractCollisionToolProperties

    @JsName("C")
    public fun copy(other: UObject): ExtractCollisionToolProperties

    @JsName("C")
    public fun copy(other: Any): ExtractCollisionToolProperties
  }
}

public open external class ExtractCollisionGeometryTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("Settings")
  public open var settings: ExtractCollisionToolProperties

  @JsName("VizSettings")
  public open var vizSettings: CollisionGeometryVisualizationProperties

  @JsName("ObjectProps")
  public open var objectProps: PhysicsObjectToolPropertySet

  @JsName("PreviewElements")
  public open var previewElements: PreviewGeometry

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExtractCollisionGeometryTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExtractCollisionGeometryTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExtractCollisionGeometryTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExtractCollisionGeometryTool

    @JsName("C")
    public fun copy(other: UObject): ExtractCollisionGeometryTool

    @JsName("C")
    public fun copy(other: Any): ExtractCollisionGeometryTool
  }
}

public open external class HoleFillToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HoleFillToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HoleFillToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HoleFillToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HoleFillToolBuilder

    @JsName("C")
    public fun copy(other: UObject): HoleFillToolBuilder

    @JsName("C")
    public fun copy(other: Any): HoleFillToolBuilder
  }
}

public open external class SmoothHoleFillProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bConstrainToHoleInterior")
  public open var constrainToHoleInterior: Boolean

  @JsName("RemeshingExteriorRegionWidth")
  public open var remeshingExteriorRegionWidth: Number

  @JsName("SmoothingExteriorRegionWidth")
  public open var smoothingExteriorRegionWidth: Number

  @JsName("SmoothingInteriorRegionWidth")
  public open var smoothingInteriorRegionWidth: Number

  @JsName("InteriorSmoothness")
  public open var interiorSmoothness: Number

  @JsName("FillDensityScalar")
  public open var fillDensityScalar: Any

  @JsName("bProjectDuringRemesh")
  public open var projectDuringRemesh: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmoothHoleFillProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmoothHoleFillProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmoothHoleFillProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmoothHoleFillProperties

    @JsName("C")
    public fun copy(other: UObject): SmoothHoleFillProperties

    @JsName("C")
    public fun copy(other: Any): SmoothHoleFillProperties
  }
}

@JsName("EHoleFillOpFillType")
public external object HoleFillOpFillType {
  public var TriangleFan: String

  public var PolygonEarClipping: String

  public var Planar: String

  public var Minimal: String

  public var Smooth: String

  @JsName("EHoleFillOpFillType_MAX")
  public var Max: String
}

public open external class HoleFillToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("FillType")
  public open var fillType: String

  @JsName("bRemoveIsolatedTriangles")
  public open var removeIsolatedTriangles: Boolean

  @JsName("bQuickFillSmallHoles")
  public open var quickFillSmallHoles: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HoleFillToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HoleFillToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HoleFillToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HoleFillToolProperties

    @JsName("C")
    public fun copy(other: UObject): HoleFillToolProperties

    @JsName("C")
    public fun copy(other: Any): HoleFillToolProperties
  }
}

public open external class HoleFillToolActions(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SelectAll")
  public open fun selectAll(): Unit

  @JsName("Clear")
  public open fun clear(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HoleFillToolActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HoleFillToolActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HoleFillToolActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HoleFillToolActions

    @JsName("C")
    public fun copy(other: UObject): HoleFillToolActions

    @JsName("C")
    public fun copy(other: Any): HoleFillToolActions
  }
}

public open external class HoleFillStatisticsProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("InitialHoles")
  public open var initialHoles: String

  @JsName("SelectedHoles")
  public open var selectedHoles: String

  @JsName("SuccessfulFills")
  public open var successfulFills: String

  @JsName("FailedFills")
  public open var failedFills: String

  @JsName("RemainingHoles")
  public open var remainingHoles: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HoleFillStatisticsProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HoleFillStatisticsProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HoleFillStatisticsProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HoleFillStatisticsProperties

    @JsName("C")
    public fun copy(other: UObject): HoleFillStatisticsProperties

    @JsName("C")
    public fun copy(other: Any): HoleFillStatisticsProperties
  }
}

public open external class HoleFillTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("SmoothHoleFillProperties")
  public open var smoothHoleFillProperties: SmoothHoleFillProperties

  @JsName("Properties")
  public open var properties: HoleFillToolProperties

  @JsName("Actions")
  public open var actions: HoleFillToolActions

  @JsName("Statistics")
  public open var statistics: HoleFillStatisticsProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("SelectionMechanic")
  public open var selectionMechanic: PolygonSelectionMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HoleFillTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HoleFillTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HoleFillTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HoleFillTool

    @JsName("C")
    public fun copy(other: UObject): HoleFillTool

    @JsName("C")
    public fun copy(other: Any): HoleFillTool
  }
}

public open external class HoleFillOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("FillTool")
  public open var fillTool: HoleFillTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HoleFillOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HoleFillOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HoleFillOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HoleFillOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): HoleFillOperatorFactory

    @JsName("C")
    public fun copy(other: Any): HoleFillOperatorFactory
  }
}

public open external class MeshSculptBrushOpProps(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSculptBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSculptBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSculptBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSculptBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): MeshSculptBrushOpProps

    @JsName("C")
    public fun copy(other: Any): MeshSculptBrushOpProps
  }
}

public open external class BaseKelvinletBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Stiffness")
  public open var stiffness: Number

  @JsName("Incompressiblity")
  public open var incompressiblity: Number

  @JsName("BrushSteps")
  public open var brushSteps: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseKelvinletBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseKelvinletBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseKelvinletBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): BaseKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: Any): BaseKelvinletBrushOpProps
  }
}

public open external class ScaleKelvinletBrushOpProps(
  outer: UObject,
) : BaseKelvinletBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScaleKelvinletBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScaleKelvinletBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScaleKelvinletBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScaleKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): ScaleKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: Any): ScaleKelvinletBrushOpProps
  }
}

public open external class PullKelvinletBrushOpProps(
  outer: UObject,
) : BaseKelvinletBrushOpProps {
  @JsName("Falloff")
  public open var falloff: Number

  @JsName("Depth")
  public open var depth: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PullKelvinletBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PullKelvinletBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PullKelvinletBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PullKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): PullKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: Any): PullKelvinletBrushOpProps
  }
}

public open external class SharpPullKelvinletBrushOpProps(
  outer: UObject,
) : BaseKelvinletBrushOpProps {
  @JsName("Falloff")
  public open var falloff: Number

  @JsName("Depth")
  public open var depth: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SharpPullKelvinletBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SharpPullKelvinletBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SharpPullKelvinletBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SharpPullKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): SharpPullKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: Any): SharpPullKelvinletBrushOpProps
  }
}

public open external class TwistKelvinletBrushOpProps(
  outer: UObject,
) : BaseKelvinletBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TwistKelvinletBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TwistKelvinletBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TwistKelvinletBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TwistKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): TwistKelvinletBrushOpProps

    @JsName("C")
    public fun copy(other: Any): TwistKelvinletBrushOpProps
  }
}

public open external class LatticeDeformerToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LatticeDeformerToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LatticeDeformerToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LatticeDeformerToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LatticeDeformerToolBuilder

    @JsName("C")
    public fun copy(other: UObject): LatticeDeformerToolBuilder

    @JsName("C")
    public fun copy(other: Any): LatticeDeformerToolBuilder
  }
}

@JsName("ELatticeInterpolationType")
public external object LatticeInterpolationType {
  public var Linear: String

  public var Cubic: String

  @JsName("ELatticeInterpolationType_MAX")
  public var Max: String
}

public open external class LatticeDeformerToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("XAxisResolution")
  public open var xAxisResolution: Number

  @JsName("YAxisResolution")
  public open var yAxisResolution: Number

  @JsName("ZAxisResolution")
  public open var zAxisResolution: Number

  @JsName("Padding")
  public open var padding: Number

  @JsName("InterpolationType")
  public open var interpolationType: String

  @JsName("bDeformNormals")
  public open var deformNormals: Boolean

  @JsName("bCanChangeResolution")
  public open var canChangeResolution: Boolean

  @JsName("GizmoCoordinateSystem")
  public open var gizmoCoordinateSystem: String

  @JsName("bSetPivotMode")
  public open var setPivotMode: Boolean

  @JsName("bSoftDeformation")
  public open var softDeformation: Boolean

  @JsName("Constrain")
  public open fun constrain(): Unit

  @JsName("ClearConstraints")
  public open fun clearConstraints(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LatticeDeformerToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LatticeDeformerToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LatticeDeformerToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LatticeDeformerToolProperties

    @JsName("C")
    public fun copy(other: UObject): LatticeDeformerToolProperties

    @JsName("C")
    public fun copy(other: Any): LatticeDeformerToolProperties
  }
}

public open external class LatticeDeformerTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("ControlPointsMechanic")
  public open var controlPointsMechanic: LatticeControlPointsMechanic

  @JsName("Settings")
  public open var settings: LatticeDeformerToolProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("bLatticeDeformed")
  public open var latticeDeformed: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LatticeDeformerTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LatticeDeformerTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LatticeDeformerTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LatticeDeformerTool

    @JsName("C")
    public fun copy(other: UObject): LatticeDeformerTool

    @JsName("C")
    public fun copy(other: Any): LatticeDeformerTool
  }
}

public open external class LatticeDeformerOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("LatticeDeformerTool")
  public open var latticeDeformerTool: LatticeDeformerTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LatticeDeformerOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LatticeDeformerOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LatticeDeformerOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LatticeDeformerOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): LatticeDeformerOperatorFactory

    @JsName("C")
    public fun copy(other: Any): LatticeDeformerOperatorFactory
  }
}

public open external class MeshAnalysisProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SurfaceArea")
  public open var surfaceArea: String

  @JsName("Volume")
  public open var volume: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshAnalysisProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshAnalysisProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshAnalysisProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshAnalysisProperties

    @JsName("C")
    public fun copy(other: UObject): MeshAnalysisProperties

    @JsName("C")
    public fun copy(other: Any): MeshAnalysisProperties
  }
}

public open external class MeshAttributePaintToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshAttributePaintToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshAttributePaintToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshAttributePaintToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshAttributePaintToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshAttributePaintToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshAttributePaintToolBuilder
  }
}

@JsName("EBrushActionMode")
public external object BrushActionMode {
  public var Paint: String

  public var FloodFill: String

  @JsName("EBrushActionMode_MAX")
  public var Max: String
}

public open external class MeshAttributePaintBrushOperationProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("BrushAction")
  public open var brushAction: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshAttributePaintBrushOperationProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MeshAttributePaintBrushOperationProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshAttributePaintBrushOperationProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshAttributePaintBrushOperationProperties

    @JsName("C")
    public fun copy(other: UObject): MeshAttributePaintBrushOperationProperties

    @JsName("C")
    public fun copy(other: Any): MeshAttributePaintBrushOperationProperties
  }
}

public open external class MeshAttributePaintToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Attribute")
  public open var attribute: String

  @JsName("GetAttributeNames")
  public open fun getAttributeNames(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshAttributePaintToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshAttributePaintToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshAttributePaintToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshAttributePaintToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshAttributePaintToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshAttributePaintToolProperties
  }
}

public open external class MeshAttributePaintEditActions(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshAttributePaintEditActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshAttributePaintEditActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshAttributePaintEditActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshAttributePaintEditActions

    @JsName("C")
    public fun copy(other: UObject): MeshAttributePaintEditActions

    @JsName("C")
    public fun copy(other: Any): MeshAttributePaintEditActions
  }
}

public open external class MeshAttributePaintTool(
  outer: UObject,
) : DynamicMeshBrushTool {
  @JsName("BrushActionProps")
  public open var brushActionProps: MeshAttributePaintBrushOperationProperties

  @JsName("AttribProps")
  public open var attribProps: MeshAttributePaintToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshAttributePaintTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshAttributePaintTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshAttributePaintTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshAttributePaintTool

    @JsName("C")
    public fun copy(other: UObject): MeshAttributePaintTool

    @JsName("C")
    public fun copy(other: Any): MeshAttributePaintTool
  }
}

public open external class MeshBoundaryToolBase(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("SelectionMechanic")
  public open var selectionMechanic: PolygonSelectionMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshBoundaryToolBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshBoundaryToolBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshBoundaryToolBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshBoundaryToolBase

    @JsName("C")
    public fun copy(other: UObject): MeshBoundaryToolBase

    @JsName("C")
    public fun copy(other: Any): MeshBoundaryToolBase
  }
}

public open external class GroupEraseBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Group")
  public open var group: Number

  @JsName("bOnlyEraseCurrent")
  public open var onlyEraseCurrent: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GroupEraseBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GroupEraseBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroupEraseBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroupEraseBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): GroupEraseBrushOpProps

    @JsName("C")
    public fun copy(other: Any): GroupEraseBrushOpProps
  }
}

public open external class GroupPaintBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Group")
  public open var group: Number

  @JsName("bOnlyPaintUngrouped")
  public open var onlyPaintUngrouped: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GroupPaintBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GroupPaintBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroupPaintBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroupPaintBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): GroupPaintBrushOpProps

    @JsName("C")
    public fun copy(other: Any): GroupPaintBrushOpProps
  }
}

public open external class MeshGroupPaintToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshGroupPaintToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshGroupPaintToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshGroupPaintToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshGroupPaintToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshGroupPaintToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshGroupPaintToolBuilder
  }
}

@JsName("EMeshGroupPaintBrushType")
public external object MeshGroupPaintBrushType {
  public var Paint: String

  public var Erase: String

  public var LastValue: String

  @JsName("EMeshGroupPaintBrushType_MAX")
  public var Max: String
}

@JsName("EMeshGroupPaintInteractionType")
public external object MeshGroupPaintInteractionType {
  public var Brush: String

  public var Fill: String

  public var GroupFill: String

  public var PolyLasso: String

  public var LastValue: String

  @JsName("EMeshGroupPaintInteractionType_MAX")
  public var Max: String
}

@JsName("EMeshGroupPaintBrushAreaType")
public external object MeshGroupPaintBrushAreaType {
  public var Connected: String

  public var Volumetric: String

  @JsName("EMeshGroupPaintBrushAreaType_MAX")
  public var Max: String
}

@JsName("EMeshGroupPaintVisibilityType")
public external object MeshGroupPaintVisibilityType {
  public var None: String

  public var FrontFacing: String

  public var Unoccluded: String

  @JsName("EMeshGroupPaintVisibilityType_MAX")
  public var Max: String
}

public open external class GroupPaintBrushFilterProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("PrimaryBrushType")
  public open var primaryBrushType: String

  @JsName("SubToolType")
  public open var subToolType: String

  @JsName("BrushSize")
  public open var brushSize: Number

  @JsName("BrushAreaMode")
  public open var brushAreaMode: String

  @JsName("bHitBackFaces")
  public open var hitBackFaces: Boolean

  @JsName("SetGroup")
  public open var setGroup: Number

  @JsName("bOnlySetUngrouped")
  public open var onlySetUngrouped: Boolean

  @JsName("EraseGroup")
  public open var eraseGroup: Number

  @JsName("bOnlyEraseCurrent")
  public open var onlyEraseCurrent: Boolean

  @JsName("AngleThreshold")
  public open var angleThreshold: Number

  @JsName("bUVSeams")
  public open var uvSeams: Boolean

  @JsName("bNormalSeams")
  public open var normalSeams: Boolean

  @JsName("VisibilityFilter")
  public open var visibilityFilter: String

  @JsName("MinTriVertCount")
  public open var minTriVertCount: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GroupPaintBrushFilterProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GroupPaintBrushFilterProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroupPaintBrushFilterProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroupPaintBrushFilterProperties

    @JsName("C")
    public fun copy(other: UObject): GroupPaintBrushFilterProperties

    @JsName("C")
    public fun copy(other: Any): GroupPaintBrushFilterProperties
  }
}

public open external class MeshGroupPaintToolActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshGroupPaintToolActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshGroupPaintToolActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshGroupPaintToolActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshGroupPaintToolActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): MeshGroupPaintToolActionPropertySet

    @JsName("C")
    public fun copy(other: Any): MeshGroupPaintToolActionPropertySet
  }
}

public open external class MeshGroupPaintToolFreezeActions(
  outer: UObject,
) : MeshGroupPaintToolActionPropertySet {
  @JsName("UnfreezeAll")
  public open fun unfreezeAll(): Unit

  @JsName("ShrinkCurrent")
  public open fun shrinkCurrent(): Unit

  @JsName("GrowCurrent")
  public open fun growCurrent(): Unit

  @JsName("FreezeOthers")
  public open fun freezeOthers(): Unit

  @JsName("FreezeCurrent")
  public open fun freezeCurrent(): Unit

  @JsName("FloodFillCurrent")
  public open fun floodFillCurrent(): Unit

  @JsName("ClearCurrent")
  public open fun clearCurrent(): Unit

  @JsName("ClearAll")
  public open fun clearAll(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshGroupPaintToolFreezeActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshGroupPaintToolFreezeActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshGroupPaintToolFreezeActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshGroupPaintToolFreezeActions

    @JsName("C")
    public fun copy(other: UObject): MeshGroupPaintToolFreezeActions

    @JsName("C")
    public fun copy(other: Any): MeshGroupPaintToolFreezeActions
  }
}

public open external class SculptBrushProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("BrushSize")
  public open var brushSize: BrushToolRadius

  @JsName("BrushFalloffAmount")
  public open var brushFalloffAmount: Number

  @JsName("bShowFalloff")
  public open var showFalloff: Boolean

  @JsName("Depth")
  public open var depth: Number

  @JsName("bHitBackFaces")
  public open var hitBackFaces: Boolean

  @JsName("FlowRate")
  public open var flowRate: Number

  @JsName("Spacing")
  public open var spacing: Number

  @JsName("Lazyness")
  public open var lazyness: Number

  @JsName("bShowPerBrushProps")
  public open var showPerBrushProps: Boolean

  @JsName("bShowLazyness")
  public open var showLazyness: Boolean

  @JsName("bShowFlowRate")
  public open var showFlowRate: Boolean

  @JsName("bShowSpacing")
  public open var showSpacing: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SculptBrushProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SculptBrushProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SculptBrushProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SculptBrushProperties

    @JsName("C")
    public fun copy(other: UObject): SculptBrushProperties

    @JsName("C")
    public fun copy(other: Any): SculptBrushProperties
  }
}

public open external class WorkPlaneProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bPropertySetEnabled")
  public open var propertySetEnabled: Boolean

  @JsName("bShowGizmo")
  public open var showGizmo: Boolean

  public open var position: Vector

  @JsName("Rotation")
  public open var rotation: Quat

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorkPlaneProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorkPlaneProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorkPlaneProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorkPlaneProperties

    @JsName("C")
    public fun copy(other: UObject): WorkPlaneProperties

    @JsName("C")
    public fun copy(other: Any): WorkPlaneProperties
  }
}

public open external class MeshSculptToolBase(
  outer: UObject,
) : MeshSurfacePointTool {
  @JsName("BrushProperties")
  public open var brushProperties: SculptBrushProperties

  @JsName("GizmoProperties")
  public open var gizmoProperties: WorkPlaneProperties

  @JsName("BrushOpPropSets")
  public open var brushOpPropSets: Any

  @JsName("SecondaryBrushOpPropSets")
  public open var secondaryBrushOpPropSets: Any

  @JsName("ViewProperties")
  public open var viewProperties: MeshEditingViewProperties

  @JsName("ActiveOverrideMaterial")
  public open var activeOverrideMaterial: MaterialInstanceDynamic

  @JsName("BrushIndicator")
  public open var brushIndicator: BrushStampIndicator

  @JsName("bIsVolumetricIndicator")
  public open var isVolumetricIndicator: Boolean

  @JsName("BrushIndicatorMaterial")
  public open var brushIndicatorMaterial: MaterialInstanceDynamic

  @JsName("BrushIndicatorMesh")
  public open var brushIndicatorMesh: PreviewMesh

  @JsName("PlaneTransformGizmo")
  public open var planeTransformGizmo: CombinedTransformGizmo

  @JsName("PlaneTransformProxy")
  public open var planeTransformProxy: TransformProxy

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSculptToolBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSculptToolBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSculptToolBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSculptToolBase

    @JsName("C")
    public fun copy(other: UObject): MeshSculptToolBase

    @JsName("C")
    public fun copy(other: Any): MeshSculptToolBase
  }
}

public open external class MeshGroupPaintTool(
  outer: UObject,
) : MeshSculptToolBase {
  @JsName("PolygroupLayerProperties")
  public open var polygroupLayerProperties: PolygroupLayersProperties

  @JsName("FilterProperties")
  public open var filterProperties: GroupPaintBrushFilterProperties

  @JsName("PaintBrushOpProperties")
  public open var paintBrushOpProperties: GroupPaintBrushOpProps

  @JsName("EraseBrushOpProperties")
  public open var eraseBrushOpProperties: GroupEraseBrushOpProps

  @JsName("FreezeActions")
  public open var freezeActions: MeshGroupPaintToolFreezeActions

  @JsName("PolyLassoMechanic")
  public open var polyLassoMechanic: PolyLassoMarqueeMechanic

  @JsName("PreviewMeshActor")
  public open var previewMeshActor: InternalToolFrameworkActor

  @JsName("DynamicMeshComponent")
  public open var dynamicMeshComponent: DynamicMeshComponent

  @JsName("MeshElementsDisplay")
  public open var meshElementsDisplay: MeshElementsVisualizer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshGroupPaintTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshGroupPaintTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshGroupPaintTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshGroupPaintTool

    @JsName("C")
    public fun copy(other: UObject): MeshGroupPaintTool

    @JsName("C")
    public fun copy(other: Any): MeshGroupPaintTool
  }
}

public open external class InflateBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InflateBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InflateBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InflateBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InflateBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): InflateBrushOpProps

    @JsName("C")
    public fun copy(other: Any): InflateBrushOpProps
  }
}

public open external class MeshInspectorToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshInspectorToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshInspectorToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshInspectorToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshInspectorToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshInspectorToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshInspectorToolBuilder
  }
}

public open external class MeshInspectorProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bWireframe")
  public open var wireframe: Boolean

  @JsName("bBoundaryEdges")
  public open var boundaryEdges: Boolean

  @JsName("bBowtieVertices")
  public open var bowtieVertices: Boolean

  @JsName("bPolygonBorders")
  public open var polygonBorders: Boolean

  @JsName("bUVSeams")
  public open var uvSeams: Boolean

  @JsName("bUVBowties")
  public open var uvBowties: Boolean

  @JsName("bMissingUVs")
  public open var missingUVs: Boolean

  @JsName("bNormalSeams")
  public open var normalSeams: Boolean

  @JsName("bNormalVectors")
  public open var normalVectors: Boolean

  @JsName("bTangentVectors")
  public open var tangentVectors: Boolean

  @JsName("NormalLength")
  public open var normalLength: Number

  @JsName("TangentLength")
  public open var tangentLength: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshInspectorProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshInspectorProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshInspectorProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshInspectorProperties

    @JsName("C")
    public fun copy(other: UObject): MeshInspectorProperties

    @JsName("C")
    public fun copy(other: Any): MeshInspectorProperties
  }
}

public open external class MeshInspectorTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("Settings")
  public open var settings: MeshInspectorProperties

  @JsName("MaterialSettings")
  public open var materialSettings: ExistingMeshMaterialProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("DrawnLineSet")
  public open var drawnLineSet: LineSetComponent

  @JsName("DefaultMaterial")
  public open var defaultMaterial: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshInspectorTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshInspectorTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshInspectorTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshInspectorTool

    @JsName("C")
    public fun copy(other: UObject): MeshInspectorTool

    @JsName("C")
    public fun copy(other: Any): MeshInspectorTool
  }
}

public open external class ModelingToolsAxisFilter {
  @JsName("bAxisX")
  public open var axisX: Boolean

  @JsName("bAxisY")
  public open var axisY: Boolean

  @JsName("bAxisZ")
  public open var axisZ: Boolean

  public open fun clone(): ModelingToolsAxisFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ModelingToolsAxisFilter

    @JsName("C")
    public fun copy(other: Any): ModelingToolsAxisFilter
  }
}

public open external class MoveBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("AxisFilters")
  public open var axisFilters: ModelingToolsAxisFilter

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MoveBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MoveBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MoveBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MoveBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): MoveBrushOpProps

    @JsName("C")
    public fun copy(other: Any): MoveBrushOpProps
  }
}

public open external class PinchBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("bPerpDamping")
  public open var perpDamping: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PinchBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PinchBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PinchBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PinchBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): PinchBrushOpProps

    @JsName("C")
    public fun copy(other: Any): PinchBrushOpProps
  }
}

public open external class BasePlaneBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BasePlaneBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BasePlaneBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BasePlaneBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BasePlaneBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): BasePlaneBrushOpProps

    @JsName("C")
    public fun copy(other: Any): BasePlaneBrushOpProps
  }
}

@JsName("EPlaneBrushSideMode")
public external object PlaneBrushSideMode {
  public var BothSides: String

  public var PushDown: String

  public var PullTowards: String

  @JsName("EPlaneBrushSideMode_MAX")
  public var Max: String
}

public open external class PlaneBrushOpProps(
  outer: UObject,
) : BasePlaneBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("WhichSide")
  public open var whichSide: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlaneBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlaneBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlaneBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlaneBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): PlaneBrushOpProps

    @JsName("C")
    public fun copy(other: Any): PlaneBrushOpProps
  }
}

public open external class ViewAlignedPlaneBrushOpProps(
  outer: UObject,
) : BasePlaneBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("WhichSide")
  public open var whichSide: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewAlignedPlaneBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewAlignedPlaneBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewAlignedPlaneBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewAlignedPlaneBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): ViewAlignedPlaneBrushOpProps

    @JsName("C")
    public fun copy(other: Any): ViewAlignedPlaneBrushOpProps
  }
}

public open external class FixedPlaneBrushOpProps(
  outer: UObject,
) : BasePlaneBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("WhichSide")
  public open var whichSide: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FixedPlaneBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FixedPlaneBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FixedPlaneBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FixedPlaneBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): FixedPlaneBrushOpProps

    @JsName("C")
    public fun copy(other: Any): FixedPlaneBrushOpProps
  }
}

public open external class StandardSculptBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StandardSculptBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StandardSculptBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StandardSculptBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StandardSculptBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): StandardSculptBrushOpProps

    @JsName("C")
    public fun copy(other: Any): StandardSculptBrushOpProps
  }
}

public open external class ViewAlignedSculptBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewAlignedSculptBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewAlignedSculptBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewAlignedSculptBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewAlignedSculptBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): ViewAlignedSculptBrushOpProps

    @JsName("C")
    public fun copy(other: Any): ViewAlignedSculptBrushOpProps
  }
}

public open external class SculptMaxBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("MaxHeight")
  public open var maxHeight: Number

  @JsName("bUseFixedHeight")
  public open var useFixedHeight: Boolean

  @JsName("FixedHeight")
  public open var fixedHeight: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SculptMaxBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SculptMaxBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SculptMaxBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SculptMaxBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): SculptMaxBrushOpProps

    @JsName("C")
    public fun copy(other: Any): SculptMaxBrushOpProps
  }
}

public open external class MeshSelectionToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSelectionToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSelectionToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSelectionToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSelectionToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshSelectionToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshSelectionToolBuilder
  }
}

public open external class MeshSelectionToolActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSelectionToolActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSelectionToolActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSelectionToolActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSelectionToolActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): MeshSelectionToolActionPropertySet

    @JsName("C")
    public fun copy(other: Any): MeshSelectionToolActionPropertySet
  }
}

public open external class MeshSelectionEditActions(
  outer: UObject,
) : MeshSelectionToolActionPropertySet {
  @JsName("Shrink")
  public open fun shrink(): Unit

  @JsName("SelectAll")
  public open fun selectAll(): Unit

  @JsName("OptimizeBorder")
  public open fun optimizeBorder(): Unit

  @JsName("LargestTriCountPart")
  public open fun largestTriCountPart(): Unit

  @JsName("LargestAreaPart")
  public open fun largestAreaPart(): Unit

  @JsName("Invert")
  public open fun invert(): Unit

  @JsName("Grow")
  public open fun grow(): Unit

  @JsName("FloodFill")
  public open fun floodFill(): Unit

  @JsName("Clear")
  public open fun clear(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSelectionEditActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSelectionEditActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSelectionEditActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSelectionEditActions

    @JsName("C")
    public fun copy(other: UObject): MeshSelectionEditActions

    @JsName("C")
    public fun copy(other: Any): MeshSelectionEditActions
  }
}

public open external class MeshSelectionMeshEditActions(
  outer: UObject,
) : MeshSelectionToolActionPropertySet {
  @JsName("Separate")
  public open fun separate(): Unit

  @JsName("FlipNormals")
  public open fun flipNormals(): Unit

  @JsName("Duplicate")
  public open fun duplicate(): Unit

  @JsName("Disconnect")
  public open fun disconnect(): Unit

  @JsName("Delete")
  public open fun delete(): Unit

  @JsName("CreatePolygroup")
  public open fun createPolygroup(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSelectionMeshEditActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSelectionMeshEditActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSelectionMeshEditActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSelectionMeshEditActions

    @JsName("C")
    public fun copy(other: UObject): MeshSelectionMeshEditActions

    @JsName("C")
    public fun copy(other: Any): MeshSelectionMeshEditActions
  }
}

@JsName("EMeshSelectionToolPrimaryMode")
public external object MeshSelectionToolPrimaryMode {
  public var Brush: String

  public var VolumetricBrush: String

  public var AngleFiltered: String

  public var Visible: String

  public var AllConnected: String

  public var AllInGroup: String

  public var ByMaterial: String

  @JsName("ByUVIsland")
  public var ByUvIsland: String

  public var AllWithinAngle: String

  @JsName("EMeshSelectionToolPrimaryMode_MAX")
  public var Max: String
}

@JsName("EMeshFacesColorMode")
public external object MeshFacesColorMode {
  public var None: String

  public var ByGroup: String

  @JsName("ByMaterialID")
  public var ByMaterialId: String

  @JsName("ByUVIsland")
  public var ByUvIsland: String

  @JsName("EMeshFacesColorMode_MAX")
  public var Max: String
}

public open external class MeshSelectionToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SelectionMode")
  public open var selectionMode: String

  @JsName("AngleTolerance")
  public open var angleTolerance: Number

  @JsName("bHitBackFaces")
  public open var hitBackFaces: Boolean

  @JsName("bShowPoints")
  public open var showPoints: Boolean

  @JsName("FaceColorMode")
  public open var faceColorMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSelectionToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSelectionToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSelectionToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSelectionToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshSelectionToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshSelectionToolProperties
  }
}

public open external class MeshStatisticsProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Mesh")
  public open var mesh: String

  public open var UV: String

  @JsName("Attributes")
  public open var attributes: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshStatisticsProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshStatisticsProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshStatisticsProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshStatisticsProperties

    @JsName("C")
    public fun copy(other: UObject): MeshStatisticsProperties

    @JsName("C")
    public fun copy(other: Any): MeshStatisticsProperties
  }
}

public open external class MeshSelectionTool(
  outer: UObject,
) : DynamicMeshBrushTool {
  @JsName("SelectionProps")
  public open var selectionProps: MeshSelectionToolProperties

  @JsName("SelectionActions")
  public open var selectionActions: MeshSelectionEditActions

  @JsName("EditActions")
  public open var editActions: MeshSelectionToolActionPropertySet

  @JsName("MeshStatisticsProperties")
  public open var meshStatisticsProperties: MeshStatisticsProperties

  @JsName("MeshElementsDisplay")
  public open var meshElementsDisplay: MeshElementsVisualizer

  @JsName("UVChannelProperties")
  public open var uvChannelProperties: MeshUvChannelProperties

  @JsName("PolygroupLayerProperties")
  public open var polygroupLayerProperties: PolygroupLayersProperties

  @JsName("USelection")
  public open var uSelection: MeshSelectionSet

  @JsName("SpawnedActors")
  public open var spawnedActors: Array<Actor>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSelectionTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSelectionTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSelectionTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSelectionTool

    @JsName("C")
    public fun copy(other: UObject): MeshSelectionTool

    @JsName("C")
    public fun copy(other: Any): MeshSelectionTool
  }
}

public open external class BaseSmoothBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseSmoothBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseSmoothBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseSmoothBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseSmoothBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): BaseSmoothBrushOpProps

    @JsName("C")
    public fun copy(other: Any): BaseSmoothBrushOpProps
  }
}

public open external class SmoothBrushOpProps(
  outer: UObject,
) : BaseSmoothBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("bPreserveUVFlow")
  public open var preserveUvFlow: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmoothBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmoothBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmoothBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmoothBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): SmoothBrushOpProps

    @JsName("C")
    public fun copy(other: Any): SmoothBrushOpProps
  }
}

public open external class SecondarySmoothBrushOpProps(
  outer: UObject,
) : BaseSmoothBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("bPreserveUVFlow")
  public open var preserveUvFlow: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SecondarySmoothBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SecondarySmoothBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SecondarySmoothBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SecondarySmoothBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): SecondarySmoothBrushOpProps

    @JsName("C")
    public fun copy(other: Any): SecondarySmoothBrushOpProps
  }
}

public open external class SmoothFillBrushOpProps(
  outer: UObject,
) : BaseSmoothBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("bPreserveUVFlow")
  public open var preserveUvFlow: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmoothFillBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmoothFillBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmoothFillBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmoothFillBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): SmoothFillBrushOpProps

    @JsName("C")
    public fun copy(other: Any): SmoothFillBrushOpProps
  }
}

public open external class FlattenBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("WhichSide")
  public open var whichSide: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FlattenBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FlattenBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FlattenBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FlattenBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): FlattenBrushOpProps

    @JsName("C")
    public fun copy(other: Any): FlattenBrushOpProps
  }
}

public open external class EraseBrushOpProps(
  outer: UObject,
) : MeshSculptBrushOpProps {
  @JsName("Strength")
  public open var strength: Number

  @JsName("Falloff")
  public open var falloff: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EraseBrushOpProps

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EraseBrushOpProps

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EraseBrushOpProps

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EraseBrushOpProps

    @JsName("C")
    public fun copy(other: UObject): EraseBrushOpProps

    @JsName("C")
    public fun copy(other: Any): EraseBrushOpProps
  }
}

public open external class MeshSpaceDeformerToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSpaceDeformerToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSpaceDeformerToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSpaceDeformerToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSpaceDeformerToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshSpaceDeformerToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshSpaceDeformerToolBuilder
  }
}

@JsName("ENonlinearOperationType")
public external object NonlinearOperationType {
  public var Bend: String

  public var Flare: String

  public var Twist: String

  @JsName("ENonlinearOperationType_MAX")
  public var Max: String
}

@JsName("EFlareProfileType")
public external object FlareProfileType {
  public var SinMode: String

  public var SinSquaredMode: String

  public var TriangleMode: String

  @JsName("EFlareProfileType_MAX")
  public var Max: String
}

public open external class MeshSpaceDeformerToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SelectedOperationType")
  public open var selectedOperationType: String

  @JsName("UpperBoundsInterval")
  public open var upperBoundsInterval: Number

  @JsName("LowerBoundsInterval")
  public open var lowerBoundsInterval: Number

  @JsName("BendDegrees")
  public open var bendDegrees: Number

  @JsName("TwistDegrees")
  public open var twistDegrees: Number

  @JsName("FlareProfileType")
  public open var flareProfileType: String

  @JsName("FlarePercentY")
  public open var flarePercentY: Number

  @JsName("bLockXAndYFlaring")
  public open var lockXAndYFlaring: Boolean

  @JsName("FlarePercentX")
  public open var flarePercentX: Number

  @JsName("bLockBottom")
  public open var lockBottom: Boolean

  @JsName("bShowOriginalMesh")
  public open var showOriginalMesh: Boolean

  @JsName("bDrawVisualization")
  public open var drawVisualization: Boolean

  @JsName("bAlignToNormalOnCtrlClick")
  public open var alignToNormalOnCtrlClick: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSpaceDeformerToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSpaceDeformerToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSpaceDeformerToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSpaceDeformerToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshSpaceDeformerToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshSpaceDeformerToolProperties
  }
}

public open external class MeshSpaceDeformerToolActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("ShiftToCenter")
  public open fun shiftToCenter(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSpaceDeformerToolActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSpaceDeformerToolActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSpaceDeformerToolActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSpaceDeformerToolActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): MeshSpaceDeformerToolActionPropertySet

    @JsName("C")
    public fun copy(other: Any): MeshSpaceDeformerToolActionPropertySet
  }
}

public open external class MeshSpaceDeformerTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("Settings")
  public open var settings: MeshSpaceDeformerToolProperties

  @JsName("ToolActions")
  public open var toolActions: MeshSpaceDeformerToolActionPropertySet

  @JsName("StateTarget")
  public open var stateTarget: GizmoTransformChangeStateTarget

  @JsName("DragAlignmentMechanic")
  public open var dragAlignmentMechanic: DragAlignmentMechanic

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("OriginalMeshPreview")
  public open var originalMeshPreview: PreviewMesh

  @JsName("IntervalGizmo")
  public open var intervalGizmo: IntervalGizmo

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("UpIntervalSource")
  public open var upIntervalSource: GizmoLocalFloatParameterSource

  @JsName("DownIntervalSource")
  public open var downIntervalSource: GizmoLocalFloatParameterSource

  @JsName("ForwardIntervalSource")
  public open var forwardIntervalSource: GizmoLocalFloatParameterSource

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSpaceDeformerTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSpaceDeformerTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSpaceDeformerTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSpaceDeformerTool

    @JsName("C")
    public fun copy(other: UObject): MeshSpaceDeformerTool

    @JsName("C")
    public fun copy(other: Any): MeshSpaceDeformerTool
  }
}

public open external class SpaceDeformerOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("SpaceDeformerTool")
  public open var spaceDeformerTool: MeshSpaceDeformerTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpaceDeformerOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpaceDeformerOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpaceDeformerOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpaceDeformerOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): SpaceDeformerOperatorFactory

    @JsName("C")
    public fun copy(other: Any): SpaceDeformerOperatorFactory
  }
}

public open external class MeshVertexSculptToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshVertexSculptToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshVertexSculptToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshVertexSculptToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshVertexSculptToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshVertexSculptToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshVertexSculptToolBuilder
  }
}

@JsName("EMeshVertexSculptBrushType")
public external object MeshVertexSculptBrushType {
  public var Move: String

  public var PullKelvin: String

  public var PullSharpKelvin: String

  public var Smooth: String

  public var SmoothFill: String

  public var Offset: String

  public var SculptView: String

  public var SculptMax: String

  public var Inflate: String

  public var ScaleKelvin: String

  public var Pinch: String

  public var TwistKelvin: String

  public var Flatten: String

  public var Plane: String

  public var PlaneViewAligned: String

  public var FixedPlane: String

  public var LastValue: String

  @JsName("EMeshVertexSculptBrushType_MAX")
  public var Max: String
}

@JsName("EMeshSculptFalloffType")
public external object MeshSculptFalloffType {
  public var Smooth: String

  public var Linear: String

  public var Inverse: String

  public var Round: String

  public var BoxSmooth: String

  public var BoxLinear: String

  public var BoxInverse: String

  public var BoxRound: String

  public var LastValue: String

  @JsName("EMeshSculptFalloffType_MAX")
  public var Max: String
}

@JsName("EMeshVertexSculptBrushFilterType")
public external object MeshVertexSculptBrushFilterType {
  public var None: String

  public var Component: String

  public var PolyGroup: String

  @JsName("EMeshVertexSculptBrushFilterType_MAX")
  public var Max: String
}

public open external class VertexBrushSculptProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("PrimaryBrushType")
  public open var primaryBrushType: String

  @JsName("PrimaryFalloffType")
  public open var primaryFalloffType: String

  @JsName("BrushFilter")
  public open var brushFilter: String

  @JsName("bFreezeTarget")
  public open var freezeTarget: Boolean

  @JsName("Tool")
  public open var tool: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VertexBrushSculptProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VertexBrushSculptProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VertexBrushSculptProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VertexBrushSculptProperties

    @JsName("C")
    public fun copy(other: UObject): VertexBrushSculptProperties

    @JsName("C")
    public fun copy(other: Any): VertexBrushSculptProperties
  }
}

public open external class VertexBrushAlphaProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Alpha")
  public open var alpha: Texture2d

  @JsName("RotationAngle")
  public open var rotationAngle: Number

  @JsName("bRandomize")
  public open var randomize: Boolean

  @JsName("RandomRange")
  public open var randomRange: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VertexBrushAlphaProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VertexBrushAlphaProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VertexBrushAlphaProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VertexBrushAlphaProperties

    @JsName("C")
    public fun copy(other: UObject): VertexBrushAlphaProperties

    @JsName("C")
    public fun copy(other: Any): VertexBrushAlphaProperties
  }
}

public open external class MeshVertexSculptTool(
  outer: UObject,
) : MeshSculptToolBase {
  @JsName("SculptProperties")
  public open var sculptProperties: VertexBrushSculptProperties

  @JsName("AlphaProperties")
  public open var alphaProperties: VertexBrushAlphaProperties

  @JsName("BrushAlpha")
  public open var brushAlpha: Texture2d

  @JsName("PreviewMeshActor")
  public open var previewMeshActor: InternalToolFrameworkActor

  @JsName("DynamicMeshComponent")
  public open var dynamicMeshComponent: DynamicMeshComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshVertexSculptTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshVertexSculptTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshVertexSculptTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshVertexSculptTool

    @JsName("C")
    public fun copy(other: UObject): MeshVertexSculptTool

    @JsName("C")
    public fun copy(other: Any): MeshVertexSculptTool
  }
}

public open external class MirrorToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MirrorToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MirrorToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MirrorToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MirrorToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MirrorToolBuilder

    @JsName("C")
    public fun copy(other: Any): MirrorToolBuilder
  }
}

@JsName("EMirrorOperationMode")
public external object MirrorOperationMode {
  @JsName("MirrorAndAppend")
  public var AndAppend: String

  @JsName("MirrorExisting")
  public var Existing: String

  @JsName("EMirrorOperationMode_MAX")
  public var Max: String
}

@JsName("EMirrorCtrlClickBehavior")
public external object MirrorCtrlClickBehavior {
  public var Reposition: String

  @JsName("RepositionAndReorient")
  public var AndReorient: String

  @JsName("EMirrorCtrlClickBehavior_MAX")
  public var Max: String
}

@JsName("EMirrorSaveMode")
public external object MirrorSaveMode {
  public var UpdateAssets: String

  public var CreateNewAssets: String

  @JsName("EMirrorSaveMode_MAX")
  public var Max: String
}

public open external class MirrorToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("OperationMode")
  public open var operationMode: String

  @JsName("bCropAlongMirrorPlaneFirst")
  public open var cropAlongMirrorPlaneFirst: Boolean

  @JsName("bWeldVerticesOnMirrorPlane")
  public open var weldVerticesOnMirrorPlane: Boolean

  @JsName("PlaneTolerance")
  public open var planeTolerance: Any

  @JsName("bAllowBowtieVertexCreation")
  public open var allowBowtieVertexCreation: Boolean

  @JsName("CtrlClickBehavior")
  public open var ctrlClickBehavior: String

  @JsName("bButtonsOnlyChangeOrientation")
  public open var buttonsOnlyChangeOrientation: Boolean

  @JsName("bShowPreview")
  public open var showPreview: Boolean

  @JsName("SaveMode")
  public open var saveMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MirrorToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MirrorToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MirrorToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MirrorToolProperties

    @JsName("C")
    public fun copy(other: UObject): MirrorToolProperties

    @JsName("C")
    public fun copy(other: Any): MirrorToolProperties
  }
}

public open external class MirrorToolActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Up")
  public open fun up(): Unit

  @JsName("ShiftToCenter")
  public open fun shiftToCenter(): Unit

  @JsName("Right")
  public open fun right(): Unit

  @JsName("Left")
  public open fun left(): Unit

  @JsName("Forward")
  public open fun forward(): Unit

  @JsName("Down")
  public open fun down(): Unit

  @JsName("Backward")
  public open fun backward(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MirrorToolActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MirrorToolActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MirrorToolActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MirrorToolActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): MirrorToolActionPropertySet

    @JsName("C")
    public fun copy(other: Any): MirrorToolActionPropertySet
  }
}

public open external class MirrorTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("Settings")
  public open var settings: MirrorToolProperties

  @JsName("ToolActions")
  public open var toolActions: MirrorToolActionPropertySet

  @JsName("MeshesToMirror")
  public open var meshesToMirror: Array<DynamicMeshReplacementChangeTarget>

  @JsName("Previews")
  public open var previews: Array<MeshOpPreviewWithBackgroundCompute>

  @JsName("PlaneMechanic")
  public open var planeMechanic: ConstructionPlaneMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MirrorTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MirrorTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MirrorTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MirrorTool

    @JsName("C")
    public fun copy(other: UObject): MirrorTool

    @JsName("C")
    public fun copy(other: Any): MirrorTool
  }
}

public open external class MirrorOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("MirrorTool")
  public open var mirrorTool: MirrorTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MirrorOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MirrorOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MirrorOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MirrorOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): MirrorOperatorFactory

    @JsName("C")
    public fun copy(other: Any): MirrorOperatorFactory
  }
}

@JsName("EOffsetMeshToolOffsetType")
public external object OffsetMeshToolOffsetType {
  public var Iterative: String

  public var Implicit: String

  @JsName("EOffsetMeshToolOffsetType_MAX")
  public var Max: String
}

public open external class OffsetMeshToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("OffsetType")
  public open var offsetType: String

  @JsName("Distance")
  public open var distance: Number

  @JsName("bCreateShell")
  public open var createShell: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OffsetMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OffsetMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OffsetMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OffsetMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): OffsetMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): OffsetMeshToolProperties
  }
}

public open external class OffsetWeightMapSetProperties(
  outer: UObject,
) : WeightMapSetProperties {
  @JsName("MinDistance")
  public open var minDistance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OffsetWeightMapSetProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OffsetWeightMapSetProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OffsetWeightMapSetProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OffsetWeightMapSetProperties

    @JsName("C")
    public fun copy(other: UObject): OffsetWeightMapSetProperties

    @JsName("C")
    public fun copy(other: Any): OffsetWeightMapSetProperties
  }
}

public open external class IterativeOffsetProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Steps")
  public open var steps: Number

  @JsName("bOffsetBoundaries")
  public open var offsetBoundaries: Boolean

  @JsName("SmoothingPerStep")
  public open var smoothingPerStep: Number

  @JsName("bReprojectSmooth")
  public open var reprojectSmooth: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IterativeOffsetProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IterativeOffsetProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IterativeOffsetProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IterativeOffsetProperties

    @JsName("C")
    public fun copy(other: UObject): IterativeOffsetProperties

    @JsName("C")
    public fun copy(other: Any): IterativeOffsetProperties
  }
}

public open external class ImplicitOffsetProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Smoothness")
  public open var smoothness: Number

  @JsName("bPreserveUVs")
  public open var preserveUVs: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImplicitOffsetProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImplicitOffsetProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImplicitOffsetProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImplicitOffsetProperties

    @JsName("C")
    public fun copy(other: UObject): ImplicitOffsetProperties

    @JsName("C")
    public fun copy(other: Any): ImplicitOffsetProperties
  }
}

public open external class OffsetMeshTool(
  outer: UObject,
) : BaseMeshProcessingTool {
  @JsName("OffsetProperties")
  public open var offsetProperties: OffsetMeshToolProperties

  @JsName("IterativeProperties")
  public open var iterativeProperties: IterativeOffsetProperties

  @JsName("ImplicitProperties")
  public open var implicitProperties: ImplicitOffsetProperties

  @JsName("WeightMapProperties")
  public open var weightMapProperties: OffsetWeightMapSetProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OffsetMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OffsetMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OffsetMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OffsetMeshTool

    @JsName("C")
    public fun copy(other: UObject): OffsetMeshTool

    @JsName("C")
    public fun copy(other: Any): OffsetMeshTool
  }
}

public open external class OffsetMeshToolBuilder(
  outer: UObject,
) : BaseMeshProcessingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OffsetMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OffsetMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OffsetMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OffsetMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): OffsetMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): OffsetMeshToolBuilder
  }
}

public open external class PhysicsInspectorToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsInspectorToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsInspectorToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsInspectorToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsInspectorToolBuilder

    @JsName("C")
    public fun copy(other: UObject): PhysicsInspectorToolBuilder

    @JsName("C")
    public fun copy(other: Any): PhysicsInspectorToolBuilder
  }
}

public open external class PhysicsInspectorTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("VizSettings")
  public open var vizSettings: CollisionGeometryVisualizationProperties

  @JsName("ObjectData")
  public open var objectData: Array<PhysicsObjectToolPropertySet>

  @JsName("LineMaterial")
  public open var lineMaterial: MaterialInterface

  @JsName("PreviewElements")
  public open var previewElements: Array<PreviewGeometry>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsInspectorTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsInspectorTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsInspectorTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsInspectorTool

    @JsName("C")
    public fun copy(other: UObject): PhysicsInspectorTool

    @JsName("C")
    public fun copy(other: Any): PhysicsInspectorTool
  }
}

public open external class PlaneCutToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlaneCutToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlaneCutToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlaneCutToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlaneCutToolBuilder

    @JsName("C")
    public fun copy(other: UObject): PlaneCutToolBuilder

    @JsName("C")
    public fun copy(other: Any): PlaneCutToolBuilder
  }
}

public open external class AcceptOutputProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bExportSeparatedPiecesAsNewMeshAssets")
  public open var exportSeparatedPiecesAsNewMeshAssets: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AcceptOutputProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AcceptOutputProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AcceptOutputProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AcceptOutputProperties

    @JsName("C")
    public fun copy(other: UObject): AcceptOutputProperties

    @JsName("C")
    public fun copy(other: Any): AcceptOutputProperties
  }
}

public open external class PlaneCutToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bKeepBothHalves")
  public open var keepBothHalves: Boolean

  @JsName("SpacingBetweenHalves")
  public open var spacingBetweenHalves: Number

  @JsName("bShowPreview")
  public open var showPreview: Boolean

  @JsName("bFillCutHole")
  public open var fillCutHole: Boolean

  @JsName("bFillSpans")
  public open var fillSpans: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlaneCutToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlaneCutToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlaneCutToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlaneCutToolProperties

    @JsName("C")
    public fun copy(other: UObject): PlaneCutToolProperties

    @JsName("C")
    public fun copy(other: Any): PlaneCutToolProperties
  }
}

public open external class PlaneCutTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: PlaneCutToolProperties

  @JsName("AcceptProperties")
  public open var acceptProperties: AcceptOutputProperties

  @JsName("Previews")
  public open var previews: Array<MeshOpPreviewWithBackgroundCompute>

  @JsName("MeshesToCut")
  public open var meshesToCut: Array<DynamicMeshReplacementChangeTarget>

  @JsName("PlaneMechanic")
  public open var planeMechanic: ConstructionPlaneMechanic

  @JsName("FlipPlane")
  public open fun flipPlane(): Unit

  @JsName("Cut")
  public open fun cut(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlaneCutTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlaneCutTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlaneCutTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlaneCutTool

    @JsName("C")
    public fun copy(other: UObject): PlaneCutTool

    @JsName("C")
    public fun copy(other: Any): PlaneCutTool
  }
}

public open external class PlaneCutOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("CutTool")
  public open var cutTool: PlaneCutTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlaneCutOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlaneCutOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlaneCutOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlaneCutOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): PlaneCutOperatorFactory

    @JsName("C")
    public fun copy(other: Any): PlaneCutOperatorFactory
  }
}

public open external class ProjectToTargetToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProjectToTargetToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProjectToTargetToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProjectToTargetToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProjectToTargetToolBuilder

    @JsName("C")
    public fun copy(other: UObject): ProjectToTargetToolBuilder

    @JsName("C")
    public fun copy(other: Any): ProjectToTargetToolBuilder
  }
}

@JsName("ERemeshSmoothingType")
public external object RemeshSmoothingType {
  public var Uniform: String

  public var Cotangent: String

  public var MeanValue: String

  @JsName("ERemeshSmoothingType_MAX")
  public var Max: String
}

@JsName("ERemeshType")
public external object RemeshType {
  public var Standard: String

  public var FullPass: String

  public var NormalFlow: String

  @JsName("ERemeshType_MAX")
  public var Max: String
}

public open external class RemeshMeshToolProperties(
  outer: UObject,
) : RemeshProperties {
  @JsName("TargetTriangleCount")
  public open var targetTriangleCount: Number

  @JsName("SmoothingType")
  public open var smoothingType: String

  @JsName("bDiscardAttributes")
  public open var discardAttributes: Boolean

  @JsName("bShowGroupColors")
  public open var showGroupColors: Boolean

  @JsName("RemeshType")
  public open var remeshType: String

  @JsName("RemeshIterations")
  public open var remeshIterations: Number

  @JsName("MaxRemeshIterations")
  public open var maxRemeshIterations: Number

  @JsName("ExtraProjectionIterations")
  public open var extraProjectionIterations: Number

  @JsName("bUseTargetEdgeLength")
  public open var useTargetEdgeLength: Boolean

  @JsName("TargetEdgeLength")
  public open var targetEdgeLength: Number

  @JsName("bReproject")
  public open var reproject: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemeshMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemeshMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemeshMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemeshMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): RemeshMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): RemeshMeshToolProperties
  }
}

public open external class ProjectToTargetToolProperties(
  outer: UObject,
) : RemeshMeshToolProperties {
  @JsName("bWorldSpace")
  public open var worldSpace: Boolean

  @JsName("bParallel")
  public open var parallel: Boolean

  @JsName("FaceProjectionPassesPerRemeshIteration")
  public open var faceProjectionPassesPerRemeshIteration: Number

  @JsName("SurfaceProjectionSpeed")
  public open var surfaceProjectionSpeed: Number

  @JsName("NormalAlignmentSpeed")
  public open var normalAlignmentSpeed: Number

  @JsName("bSmoothInFillAreas")
  public open var smoothInFillAreas: Boolean

  @JsName("FillAreaDistanceMultiplier")
  public open var fillAreaDistanceMultiplier: Number

  @JsName("FillAreaSmoothMultiplier")
  public open var fillAreaSmoothMultiplier: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProjectToTargetToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProjectToTargetToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProjectToTargetToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProjectToTargetToolProperties

    @JsName("C")
    public fun copy(other: UObject): ProjectToTargetToolProperties

    @JsName("C")
    public fun copy(other: Any): ProjectToTargetToolProperties
  }
}

public open external class RemeshMeshTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: RemeshMeshToolProperties

  @JsName("MeshStatisticsProperties")
  public open var meshStatisticsProperties: MeshStatisticsProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("MeshElementsDisplay")
  public open var meshElementsDisplay: MeshElementsVisualizer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemeshMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemeshMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemeshMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemeshMeshTool

    @JsName("C")
    public fun copy(other: UObject): RemeshMeshTool

    @JsName("C")
    public fun copy(other: Any): RemeshMeshTool
  }
}

public open external class ProjectToTargetTool(
  outer: UObject,
) : RemeshMeshTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProjectToTargetTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProjectToTargetTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProjectToTargetTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProjectToTargetTool

    @JsName("C")
    public fun copy(other: UObject): ProjectToTargetTool

    @JsName("C")
    public fun copy(other: Any): ProjectToTargetTool
  }
}

public open external class RemeshMeshToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemeshMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemeshMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemeshMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemeshMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): RemeshMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): RemeshMeshToolBuilder
  }
}

public open external class RemoveOccludedTrianglesToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemoveOccludedTrianglesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemoveOccludedTrianglesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemoveOccludedTrianglesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemoveOccludedTrianglesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): RemoveOccludedTrianglesToolBuilder

    @JsName("C")
    public fun copy(other: Any): RemoveOccludedTrianglesToolBuilder
  }
}

@JsName("EOcclusionCalculationUIMode")
public external object OcclusionCalculationUIMode {
  public var GeneralizedWindingNumber: String

  public var RaycastOcclusionSamples: String

  @JsName("EOcclusionCalculationUIMode_MAX")
  public var Max: String
}

@JsName("EOcclusionTriangleSamplingUIMode")
public external object OcclusionTriangleSamplingUIMode {
  public var Vertices: String

  @JsName("VerticesAndCentroids")
  public var AndCentroids: String

  @JsName("EOcclusionTriangleSamplingUIMode_MAX")
  public var Max: String
}

@JsName("EOccludedAction")
public external object OccludedAction {
  public var Remove: String

  public var SetNewGroup: String

  @JsName("EOccludedAction_MAX")
  public var Max: String
}

public open external class RemoveOccludedTrianglesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("OcclusionTestMethod")
  public open var occlusionTestMethod: String

  @JsName("TriangleSampling")
  public open var triangleSampling: String

  @JsName("WindingIsoValue")
  public open var windingIsoValue: Any

  @JsName("AddRandomRays")
  public open var addRandomRays: Number

  @JsName("AddTriangleSamples")
  public open var addTriangleSamples: Number

  @JsName("bOnlySelfOcclude")
  public open var onlySelfOcclude: Boolean

  @JsName("ShrinkRemoval")
  public open var shrinkRemoval: Number

  @JsName("MinAreaIsland")
  public open var minAreaIsland: Any

  @JsName("MinTriCountIsland")
  public open var minTriCountIsland: Number

  @JsName("Action")
  public open var action: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemoveOccludedTrianglesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemoveOccludedTrianglesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemoveOccludedTrianglesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemoveOccludedTrianglesToolProperties

    @JsName("C")
    public fun copy(other: UObject): RemoveOccludedTrianglesToolProperties

    @JsName("C")
    public fun copy(other: Any): RemoveOccludedTrianglesToolProperties
  }
}

public open external class RemoveOccludedTrianglesAdvancedProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemoveOccludedTrianglesAdvancedProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemoveOccludedTrianglesAdvancedProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemoveOccludedTrianglesAdvancedProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemoveOccludedTrianglesAdvancedProperties

    @JsName("C")
    public fun copy(other: UObject): RemoveOccludedTrianglesAdvancedProperties

    @JsName("C")
    public fun copy(other: Any): RemoveOccludedTrianglesAdvancedProperties
  }
}

public open external class RemoveOccludedTrianglesTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: RemoveOccludedTrianglesToolProperties

  @JsName("PolygroupLayersProperties")
  public open var polygroupLayersProperties: PolygroupLayersProperties

  @JsName("AdvancedProperties")
  public open var advancedProperties: RemoveOccludedTrianglesAdvancedProperties

  @JsName("Previews")
  public open var previews: Array<MeshOpPreviewWithBackgroundCompute>

  @JsName("PreviewCopies")
  public open var previewCopies: Array<PreviewMesh>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemoveOccludedTrianglesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemoveOccludedTrianglesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemoveOccludedTrianglesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemoveOccludedTrianglesTool

    @JsName("C")
    public fun copy(other: UObject): RemoveOccludedTrianglesTool

    @JsName("C")
    public fun copy(other: Any): RemoveOccludedTrianglesTool
  }
}

public open external class RemoveOccludedTrianglesOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("Tool")
  public open var tool: RemoveOccludedTrianglesTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RemoveOccludedTrianglesOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RemoveOccludedTrianglesOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RemoveOccludedTrianglesOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RemoveOccludedTrianglesOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): RemoveOccludedTrianglesOperatorFactory

    @JsName("C")
    public fun copy(other: Any): RemoveOccludedTrianglesOperatorFactory
  }
}

public open external class RevolveBoundaryToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RevolveBoundaryToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RevolveBoundaryToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RevolveBoundaryToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RevolveBoundaryToolBuilder

    @JsName("C")
    public fun copy(other: UObject): RevolveBoundaryToolBuilder

    @JsName("C")
    public fun copy(other: Any): RevolveBoundaryToolBuilder
  }
}

public open external class RevolveBoundaryToolProperties(
  outer: UObject,
) : RevolveProperties {
  @JsName("CapFillMode")
  public open var capFillMode: String

  @JsName("bDisplayInputMesh")
  public open var displayInputMesh: Boolean

  @JsName("AxisOrigin")
  public open var axisOrigin: Vector

  @JsName("AxisOrientation")
  public open var axisOrientation: Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RevolveBoundaryToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RevolveBoundaryToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RevolveBoundaryToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RevolveBoundaryToolProperties

    @JsName("C")
    public fun copy(other: UObject): RevolveBoundaryToolProperties

    @JsName("C")
    public fun copy(other: Any): RevolveBoundaryToolProperties
  }
}

public open external class RevolveBoundaryTool(
  outer: UObject,
) : MeshBoundaryToolBase {
  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("Settings")
  public open var settings: RevolveBoundaryToolProperties

  @JsName("MaterialProperties")
  public open var materialProperties: NewMeshMaterialProperties

  @JsName("PlaneMechanic")
  public open var planeMechanic: ConstructionPlaneMechanic

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RevolveBoundaryTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RevolveBoundaryTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RevolveBoundaryTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RevolveBoundaryTool

    @JsName("C")
    public fun copy(other: UObject): RevolveBoundaryTool

    @JsName("C")
    public fun copy(other: Any): RevolveBoundaryTool
  }
}

public open external class RevolveBoundaryOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("RevolveBoundaryTool")
  public open var revolveBoundaryTool: RevolveBoundaryTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RevolveBoundaryOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RevolveBoundaryOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RevolveBoundaryOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RevolveBoundaryOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): RevolveBoundaryOperatorFactory

    @JsName("C")
    public fun copy(other: Any): RevolveBoundaryOperatorFactory
  }
}

public open external class SeamSculptToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SeamSculptToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SeamSculptToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SeamSculptToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SeamSculptToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SeamSculptToolBuilder

    @JsName("C")
    public fun copy(other: Any): SeamSculptToolBuilder
  }
}

public open external class SeamSculptToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  @JsName("bHitBackFaces")
  public open var hitBackFaces: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SeamSculptToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SeamSculptToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SeamSculptToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SeamSculptToolProperties

    @JsName("C")
    public fun copy(other: UObject): SeamSculptToolProperties

    @JsName("C")
    public fun copy(other: Any): SeamSculptToolProperties
  }
}

public open external class SeamSculptTool(
  outer: UObject,
) : DynamicMeshBrushTool {
  @JsName("Settings")
  public open var settings: SeamSculptToolProperties

  @JsName("PreviewGeom")
  public open var previewGeom: PreviewGeometry

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SeamSculptTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SeamSculptTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SeamSculptTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SeamSculptTool

    @JsName("C")
    public fun copy(other: UObject): SeamSculptTool

    @JsName("C")
    public fun copy(other: Any): SeamSculptTool
  }
}

public open external class SelfUnionMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bTrimFlaps")
  public open var trimFlaps: Boolean

  @JsName("bTryFixHoles")
  public open var tryFixHoles: Boolean

  @JsName("bTryCollapseEdges")
  public open var tryCollapseEdges: Boolean

  @JsName("WindingThreshold")
  public open var windingThreshold: Number

  @JsName("bShowNewBoundaryEdges")
  public open var showNewBoundaryEdges: Boolean

  @JsName("bOnlyUseFirstMeshMaterials")
  public open var onlyUseFirstMeshMaterials: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SelfUnionMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SelfUnionMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SelfUnionMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SelfUnionMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): SelfUnionMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): SelfUnionMeshesToolProperties
  }
}

public open external class SelfUnionMeshesTool(
  outer: UObject,
) : BaseCreateFromSelectedTool {
  @JsName("Properties")
  public open var properties: SelfUnionMeshesToolProperties

  @JsName("DrawnLineSet")
  public open var drawnLineSet: LineSetComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SelfUnionMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SelfUnionMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SelfUnionMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SelfUnionMeshesTool

    @JsName("C")
    public fun copy(other: UObject): SelfUnionMeshesTool

    @JsName("C")
    public fun copy(other: Any): SelfUnionMeshesTool
  }
}

public open external class SelfUnionMeshesToolBuilder(
  outer: UObject,
) : BaseCreateFromSelectedToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SelfUnionMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SelfUnionMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SelfUnionMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SelfUnionMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SelfUnionMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): SelfUnionMeshesToolBuilder
  }
}

public open external class SetCollisionGeometryToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SetCollisionGeometryToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SetCollisionGeometryToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SetCollisionGeometryToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SetCollisionGeometryToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SetCollisionGeometryToolBuilder

    @JsName("C")
    public fun copy(other: Any): SetCollisionGeometryToolBuilder
  }
}

@JsName("ECollisionGeometryType")
public external object CollisionGeometryType {
  public var KeepExisting: String

  public var AlignedBoxes: String

  public var OrientedBoxes: String

  public var MinimalSpheres: String

  public var Capsules: String

  public var ConvexHulls: String

  public var SweptHulls: String

  public var MinVolume: String

  public var None: String

  @JsName("ECollisionGeometryType_MAX")
  public var Max: String
}

@JsName("ESetCollisionGeometryInputMode")
public external object SetCollisionGeometryInputMode {
  public var CombineAll: String

  public var PerInputObject: String

  public var PerMeshComponent: String

  public var PerMeshGroup: String

  @JsName("ESetCollisionGeometryInputMode_MAX")
  public var Max: String
}

@JsName("EProjectedHullAxis")
public external object ProjectedHullAxis {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  public var SmallestBoxDimension: String

  public var SmallestVolume: String

  @JsName("EProjectedHullAxis_MAX")
  public var Max: String
}

public open external class SetCollisionGeometryToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("GeometryType")
  public open var geometryType: String

  @JsName("InputMode")
  public open var inputMode: String

  @JsName("bUseWorldSpace")
  public open var useWorldSpace: Boolean

  @JsName("bRemoveContained")
  public open var removeContained: Boolean

  @JsName("bEnableMaxCount")
  public open var enableMaxCount: Boolean

  @JsName("MaxCount")
  public open var maxCount: Number

  @JsName("MinThickness")
  public open var minThickness: Number

  @JsName("bDetectBoxes")
  public open var detectBoxes: Boolean

  @JsName("bDetectSpheres")
  public open var detectSpheres: Boolean

  @JsName("bDetectCapsules")
  public open var detectCapsules: Boolean

  @JsName("bSimplifyHulls")
  public open var simplifyHulls: Boolean

  @JsName("HullTargetFaceCount")
  public open var hullTargetFaceCount: Number

  @JsName("bSimplifyPolygons")
  public open var simplifyPolygons: Boolean

  @JsName("HullTolerance")
  public open var hullTolerance: Number

  @JsName("SweepAxis")
  public open var sweepAxis: String

  @JsName("bAppendToExisting")
  public open var appendToExisting: Boolean

  @JsName("SetCollisionType")
  public open var setCollisionType: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SetCollisionGeometryToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SetCollisionGeometryToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SetCollisionGeometryToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SetCollisionGeometryToolProperties

    @JsName("C")
    public fun copy(other: UObject): SetCollisionGeometryToolProperties

    @JsName("C")
    public fun copy(other: Any): SetCollisionGeometryToolProperties
  }
}

public open external class SetCollisionGeometryTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("Settings")
  public open var settings: SetCollisionGeometryToolProperties

  @JsName("PolygroupLayerProperties")
  public open var polygroupLayerProperties: PolygroupLayersProperties

  @JsName("VizSettings")
  public open var vizSettings: CollisionGeometryVisualizationProperties

  @JsName("CollisionProps")
  public open var collisionProps: PhysicsObjectToolPropertySet

  @JsName("LineMaterial")
  public open var lineMaterial: MaterialInterface

  @JsName("PreviewGeom")
  public open var previewGeom: PreviewGeometry

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SetCollisionGeometryTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SetCollisionGeometryTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SetCollisionGeometryTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SetCollisionGeometryTool

    @JsName("C")
    public fun copy(other: UObject): SetCollisionGeometryTool

    @JsName("C")
    public fun copy(other: Any): SetCollisionGeometryTool
  }
}

public open external class SkinWeightsBindingToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkinWeightsBindingToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkinWeightsBindingToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkinWeightsBindingToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkinWeightsBindingToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SkinWeightsBindingToolBuilder

    @JsName("C")
    public fun copy(other: Any): SkinWeightsBindingToolBuilder
  }
}

@JsName("ESkinWeightsBindType")
public external object SkinWeightsBindType {
  public var DirectDistance: String

  public var GeodesicVoxel: String

  @JsName("ESkinWeightsBindType_MAX")
  public var Max: String
}

public open external class SkinWeightsBindingToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("CurrentBone")
  public open var currentBone: BoneReference

  @JsName("BindingType")
  public open var bindingType: String

  @JsName("Stiffness")
  public open var stiffness: Number

  @JsName("MaxInfluences")
  public open var maxInfluences: Number

  @JsName("VoxelResolution")
  public open var voxelResolution: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkinWeightsBindingToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkinWeightsBindingToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkinWeightsBindingToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkinWeightsBindingToolProperties

    @JsName("C")
    public fun copy(other: UObject): SkinWeightsBindingToolProperties

    @JsName("C")
    public fun copy(other: Any): SkinWeightsBindingToolProperties
  }
}

public open external class SkinWeightsBindingTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("Properties")
  public open var properties: SkinWeightsBindingToolProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkinWeightsBindingTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkinWeightsBindingTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkinWeightsBindingTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkinWeightsBindingTool

    @JsName("C")
    public fun copy(other: UObject): SkinWeightsBindingTool

    @JsName("C")
    public fun copy(other: Any): SkinWeightsBindingTool
  }
}

public open external class SkinWeightsPaintToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkinWeightsPaintToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkinWeightsPaintToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkinWeightsPaintToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkinWeightsPaintToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SkinWeightsPaintToolBuilder

    @JsName("C")
    public fun copy(other: Any): SkinWeightsPaintToolBuilder
  }
}

public open external class SkinWeightsPaintToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("CurrentBone")
  public open var currentBone: BoneReference

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkinWeightsPaintToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkinWeightsPaintToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkinWeightsPaintToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkinWeightsPaintToolProperties

    @JsName("C")
    public fun copy(other: UObject): SkinWeightsPaintToolProperties

    @JsName("C")
    public fun copy(other: Any): SkinWeightsPaintToolProperties
  }
}

public open external class SkinWeightsPaintTool(
  outer: UObject,
) : DynamicMeshBrushTool {
  @JsName("ToolProps")
  public open var toolProps: SkinWeightsPaintToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkinWeightsPaintTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkinWeightsPaintTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkinWeightsPaintTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkinWeightsPaintTool

    @JsName("C")
    public fun copy(other: UObject): SkinWeightsPaintTool

    @JsName("C")
    public fun copy(other: Any): SkinWeightsPaintTool
  }
}

@JsName("ESmoothMeshToolSmoothType")
public external object SmoothMeshToolSmoothType {
  public var Iterative: String

  public var Implicit: String

  public var Diffusion: String

  @JsName("ESmoothMeshToolSmoothType_MAX")
  public var Max: String
}

public open external class SmoothMeshToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SmoothingType")
  public open var smoothingType: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmoothMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmoothMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmoothMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmoothMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): SmoothMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): SmoothMeshToolProperties
  }
}

public open external class IterativeSmoothProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SmoothingPerStep")
  public open var smoothingPerStep: Number

  @JsName("Steps")
  public open var steps: Number

  @JsName("bSmoothBoundary")
  public open var smoothBoundary: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IterativeSmoothProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IterativeSmoothProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IterativeSmoothProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IterativeSmoothProperties

    @JsName("C")
    public fun copy(other: UObject): IterativeSmoothProperties

    @JsName("C")
    public fun copy(other: Any): IterativeSmoothProperties
  }
}

public open external class DiffusionSmoothProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SmoothingPerStep")
  public open var smoothingPerStep: Number

  @JsName("Steps")
  public open var steps: Number

  @JsName("bPreserveUVs")
  public open var preserveUVs: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DiffusionSmoothProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DiffusionSmoothProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DiffusionSmoothProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DiffusionSmoothProperties

    @JsName("C")
    public fun copy(other: UObject): DiffusionSmoothProperties

    @JsName("C")
    public fun copy(other: Any): DiffusionSmoothProperties
  }
}

public open external class ImplicitSmoothProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SmoothSpeed")
  public open var smoothSpeed: Number

  @JsName("Smoothness")
  public open var smoothness: Number

  @JsName("bPreserveUVs")
  public open var preserveUVs: Boolean

  @JsName("VolumeCorrection")
  public open var volumeCorrection: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImplicitSmoothProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImplicitSmoothProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImplicitSmoothProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImplicitSmoothProperties

    @JsName("C")
    public fun copy(other: UObject): ImplicitSmoothProperties

    @JsName("C")
    public fun copy(other: Any): ImplicitSmoothProperties
  }
}

public open external class SmoothWeightMapSetProperties(
  outer: UObject,
) : WeightMapSetProperties {
  @JsName("MinSmoothMultiplier")
  public open var minSmoothMultiplier: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmoothWeightMapSetProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmoothWeightMapSetProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmoothWeightMapSetProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmoothWeightMapSetProperties

    @JsName("C")
    public fun copy(other: UObject): SmoothWeightMapSetProperties

    @JsName("C")
    public fun copy(other: Any): SmoothWeightMapSetProperties
  }
}

public open external class SmoothMeshTool(
  outer: UObject,
) : BaseMeshProcessingTool {
  @JsName("SmoothProperties")
  public open var smoothProperties: SmoothMeshToolProperties

  @JsName("IterativeProperties")
  public open var iterativeProperties: IterativeSmoothProperties

  @JsName("DiffusionProperties")
  public open var diffusionProperties: DiffusionSmoothProperties

  @JsName("ImplicitProperties")
  public open var implicitProperties: ImplicitSmoothProperties

  @JsName("WeightMapProperties")
  public open var weightMapProperties: SmoothWeightMapSetProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmoothMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmoothMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmoothMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmoothMeshTool

    @JsName("C")
    public fun copy(other: UObject): SmoothMeshTool

    @JsName("C")
    public fun copy(other: Any): SmoothMeshTool
  }
}

public open external class SmoothMeshToolBuilder(
  outer: UObject,
) : BaseMeshProcessingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SmoothMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SmoothMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SmoothMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SmoothMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SmoothMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): SmoothMeshToolBuilder
  }
}

public open external class SplitMeshesToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplitMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplitMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplitMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplitMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SplitMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): SplitMeshesToolBuilder
  }
}

public open external class SplitMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bTransferMaterials")
  public open var transferMaterials: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplitMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplitMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplitMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplitMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): SplitMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): SplitMeshesToolProperties
  }
}

public open external class SplitMeshesTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: SplitMeshesToolProperties

  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplitMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplitMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplitMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplitMeshesTool

    @JsName("C")
    public fun copy(other: UObject): SplitMeshesTool

    @JsName("C")
    public fun copy(other: Any): SplitMeshesTool
  }
}

public open external class TransferMeshToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransferMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransferMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransferMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransferMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): TransferMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): TransferMeshToolBuilder
  }
}

public open external class TransferMeshToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bTransferMaterials")
  public open var transferMaterials: Boolean

  @JsName("SourceLOD")
  public open var sourceLod: String

  @JsName("TargetLod")
  public open var targetLod: String

  @JsName("bIsStaticMeshSource")
  public open var isStaticMeshSource: Boolean

  @JsName("SourceLODNamesList")
  public open var sourceLodNamesList: Array<String>

  @JsName("TargetLODNamesList")
  public open var targetLodNamesList: Array<String>

  @JsName("bIsStaticMeshTarget")
  public open var isStaticMeshTarget: Boolean

  @JsName("GetTargetLODNamesFunc")
  public open fun getTargetLodNamesFunc(): Array<String>

  @JsName("GetSourceLODNamesFunc")
  public open fun getSourceLodNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransferMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransferMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransferMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransferMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): TransferMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): TransferMeshToolProperties
  }
}

public open external class TransferMeshTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: TransferMeshToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransferMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransferMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransferMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransferMeshTool

    @JsName("C")
    public fun copy(other: UObject): TransferMeshTool

    @JsName("C")
    public fun copy(other: Any): TransferMeshTool
  }
}

public open external class TransformMeshesToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransformMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransformMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransformMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransformMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): TransformMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): TransformMeshesToolBuilder
  }
}

@JsName("ETransformMeshesTransformMode")
public external object TransformMeshesTransformMode {
  public var SharedGizmo: String

  public var SharedGizmoLocal: String

  public var PerObjectGizmo: String

  public var LastValue: String

  @JsName("ETransformMeshesTransformMode_MAX")
  public var Max: String
}

@JsName("ETransformMeshesSnapDragSource")
public external object TransformMeshesSnapDragSource {
  public var ClickPoint: String

  public var Pivot: String

  public var LastValue: String

  @JsName("ETransformMeshesSnapDragSource_MAX")
  public var Max: String
}

@JsName("ETransformMeshesSnapDragRotationMode")
public external object TransformMeshesSnapDragRotationMode {
  public var Ignore: String

  public var Align: String

  public var AlignFlipped: String

  public var LastValue: String

  @JsName("ETransformMeshesSnapDragRotationMode_MAX")
  public var Max: String
}

public open external class TransformMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("TransformMode")
  public open var transformMode: String

  @JsName("bApplyToInstances")
  public open var applyToInstances: Boolean

  @JsName("bSetPivotMode")
  public open var setPivotMode: Boolean

  @JsName("bEnableSnapDragging")
  public open var enableSnapDragging: Boolean

  @JsName("SnapDragSource")
  public open var snapDragSource: String

  @JsName("RotationMode")
  public open var rotationMode: String

  @JsName("bHaveInstances")
  public open var haveInstances: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransformMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransformMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransformMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransformMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): TransformMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): TransformMeshesToolProperties
  }
}

public open external class TransformMeshesTarget {
  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  public open fun clone(): TransformMeshesTarget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TransformMeshesTarget

    @JsName("C")
    public fun copy(other: Any): TransformMeshesTarget
  }
}

public open external class TransformMeshesTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("TransformProps")
  public open var transformProps: TransformMeshesToolProperties

  @JsName("ActiveGizmos")
  public open var activeGizmos: Array<TransformMeshesTarget>

  @JsName("DragAlignmentMechanic")
  public open var dragAlignmentMechanic: DragAlignmentMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransformMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransformMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransformMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransformMeshesTool

    @JsName("C")
    public fun copy(other: UObject): TransformMeshesTool

    @JsName("C")
    public fun copy(other: Any): TransformMeshesTool
  }
}

public open external class VolumeToMeshToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumeToMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumeToMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumeToMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumeToMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): VolumeToMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): VolumeToMeshToolBuilder
  }
}

public open external class VolumeToMeshToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("bWeldEdges")
  public open var weldEdges: Boolean

  @JsName("bAutoRepair")
  public open var autoRepair: Boolean

  @JsName("bOptimizeMesh")
  public open var optimizeMesh: Boolean

  @JsName("bShowWireframe")
  public open var showWireframe: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumeToMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumeToMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumeToMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumeToMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): VolumeToMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): VolumeToMeshToolProperties
  }
}

public open external class VolumeToMeshTool(
  outer: UObject,
) : InteractiveTool {
  @JsName("Settings")
  public open var settings: VolumeToMeshToolProperties

  @JsName("OutputTypeProperties")
  public open var outputTypeProperties: CreateMeshObjectTypeProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("TargetVolume")
  public open var targetVolume: Any

  @JsName("VolumeEdgesSet")
  public open var volumeEdgesSet: LineSetComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumeToMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumeToMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumeToMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumeToMeshTool

    @JsName("C")
    public fun copy(other: UObject): VolumeToMeshTool

    @JsName("C")
    public fun copy(other: Any): VolumeToMeshTool
  }
}

@JsName("EVoxelBlendOperation")
public external object VoxelBlendOperation {
  public var Union: String

  public var Subtract: String

  @JsName("EVoxelBlendOperation_MAX")
  public var Max: String
}

public open external class VoxelBlendMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("BlendPower")
  public open var blendPower: Any

  @JsName("BlendFalloff")
  public open var blendFalloff: Any

  @JsName("Operation")
  public open var operation: String

  @JsName("bVoxWrap")
  public open var voxWrap: Boolean

  @JsName("bRemoveInternalsAfterVoxWrap")
  public open var removeInternalsAfterVoxWrap: Boolean

  @JsName("ThickenShells")
  public open var thickenShells: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelBlendMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelBlendMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelBlendMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelBlendMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): VoxelBlendMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): VoxelBlendMeshesToolProperties
  }
}

public open external class VoxelBlendMeshesTool(
  outer: UObject,
) : BaseVoxelTool {
  @JsName("BlendProperties")
  public open var blendProperties: VoxelBlendMeshesToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelBlendMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelBlendMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelBlendMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelBlendMeshesTool

    @JsName("C")
    public fun copy(other: UObject): VoxelBlendMeshesTool

    @JsName("C")
    public fun copy(other: Any): VoxelBlendMeshesTool
  }
}

public open external class VoxelBlendMeshesToolBuilder(
  outer: UObject,
) : BaseCreateFromSelectedToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelBlendMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelBlendMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelBlendMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelBlendMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): VoxelBlendMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): VoxelBlendMeshesToolBuilder
  }
}

@JsName("EMorphologyOperation")
public external object MorphologyOperation {
  public var Dilate: String

  public var Contract: String

  public var Close: String

  public var Open: String

  @JsName("EMorphologyOperation_MAX")
  public var Max: String
}

public open external class VoxelMorphologyMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Operation")
  public open var operation: String

  @JsName("Distance")
  public open var distance: Any

  @JsName("bVoxWrap")
  public open var voxWrap: Boolean

  @JsName("bRemoveInternalsAfterVoxWrap")
  public open var removeInternalsAfterVoxWrap: Boolean

  @JsName("ThickenShells")
  public open var thickenShells: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelMorphologyMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelMorphologyMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelMorphologyMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelMorphologyMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): VoxelMorphologyMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): VoxelMorphologyMeshesToolProperties
  }
}

public open external class VoxelMorphologyMeshesTool(
  outer: UObject,
) : BaseVoxelTool {
  @JsName("MorphologyProperties")
  public open var morphologyProperties: VoxelMorphologyMeshesToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelMorphologyMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelMorphologyMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelMorphologyMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelMorphologyMeshesTool

    @JsName("C")
    public fun copy(other: UObject): VoxelMorphologyMeshesTool

    @JsName("C")
    public fun copy(other: Any): VoxelMorphologyMeshesTool
  }
}

public open external class VoxelMorphologyMeshesToolBuilder(
  outer: UObject,
) : BaseCreateFromSelectedToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelMorphologyMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelMorphologyMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelMorphologyMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelMorphologyMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): VoxelMorphologyMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): VoxelMorphologyMeshesToolBuilder
  }
}

public open external class VoxelSolidifyMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("WindingThreshold")
  public open var windingThreshold: Any

  @JsName("ExtendBounds")
  public open var extendBounds: Any

  @JsName("SurfaceSearchSteps")
  public open var surfaceSearchSteps: Number

  @JsName("bSolidAtBoundaries")
  public open var solidAtBoundaries: Boolean

  @JsName("bApplyThickenShells")
  public open var applyThickenShells: Boolean

  @JsName("ThickenShells")
  public open var thickenShells: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelSolidifyMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelSolidifyMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelSolidifyMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelSolidifyMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): VoxelSolidifyMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): VoxelSolidifyMeshesToolProperties
  }
}

public open external class VoxelSolidifyMeshesTool(
  outer: UObject,
) : BaseVoxelTool {
  @JsName("SolidifyProperties")
  public open var solidifyProperties: VoxelSolidifyMeshesToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelSolidifyMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelSolidifyMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelSolidifyMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelSolidifyMeshesTool

    @JsName("C")
    public fun copy(other: UObject): VoxelSolidifyMeshesTool

    @JsName("C")
    public fun copy(other: Any): VoxelSolidifyMeshesTool
  }
}

public open external class VoxelSolidifyMeshesToolBuilder(
  outer: UObject,
) : BaseCreateFromSelectedToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelSolidifyMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelSolidifyMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelSolidifyMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelSolidifyMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): VoxelSolidifyMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): VoxelSolidifyMeshesToolBuilder
  }
}

public open external class WeldMeshEdgesToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WeldMeshEdgesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WeldMeshEdgesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WeldMeshEdgesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WeldMeshEdgesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): WeldMeshEdgesToolBuilder

    @JsName("C")
    public fun copy(other: Any): WeldMeshEdgesToolBuilder
  }
}

public open external class WeldMeshEdgesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Tolerance")
  public open var tolerance: Number

  @JsName("bOnlyUnique")
  public open var onlyUnique: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WeldMeshEdgesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WeldMeshEdgesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WeldMeshEdgesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WeldMeshEdgesToolProperties

    @JsName("C")
    public fun copy(other: UObject): WeldMeshEdgesToolProperties

    @JsName("C")
    public fun copy(other: Any): WeldMeshEdgesToolProperties
  }
}

public open external class WeldMeshEdgesTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("Settings")
  public open var settings: WeldMeshEdgesToolProperties

  @JsName("PreviewCompute")
  public open var previewCompute: MeshOpPreviewWithBackgroundCompute

  @JsName("MeshElementsDisplay")
  public open var meshElementsDisplay: MeshElementsVisualizer

  @JsName("OperatorFactory")
  public open var operatorFactory: WeldMeshEdgesOperatorFactory

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WeldMeshEdgesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WeldMeshEdgesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WeldMeshEdgesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WeldMeshEdgesTool

    @JsName("C")
    public fun copy(other: UObject): WeldMeshEdgesTool

    @JsName("C")
    public fun copy(other: Any): WeldMeshEdgesTool
  }
}

public open external class WeldMeshEdgesOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("WeldMeshEdgesTool")
  public open var weldMeshEdgesTool: WeldMeshEdgesTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WeldMeshEdgesOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WeldMeshEdgesOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WeldMeshEdgesOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WeldMeshEdgesOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): WeldMeshEdgesOperatorFactory

    @JsName("C")
    public fun copy(other: Any): WeldMeshEdgesOperatorFactory
  }
}

@JsName("EParameterizeMeshUVMethod")
public external object ParameterizeMeshUVMethod {
  public var PatchBuilder: String

  @JsName("UVAtlas")
  public var UvAtlas: String

  public var XAtlas: String

  @JsName("EParameterizeMeshUVMethod_MAX")
  public var Max: String
}

public open external class ParameterizeMeshToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Method")
  public open var method: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParameterizeMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParameterizeMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParameterizeMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParameterizeMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): ParameterizeMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): ParameterizeMeshToolProperties
  }
}

@JsName("ParameterizeMeshToolUVAtlasProperties")
public open external class ParameterizeMeshToolUvAtlasProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("IslandStretch")
  public open var islandStretch: Number

  @JsName("NumIslands")
  public open var numIslands: Number

  @JsName("TextureResolution")
  public open var textureResolution: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParameterizeMeshToolUvAtlasProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParameterizeMeshToolUvAtlasProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParameterizeMeshToolUvAtlasProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParameterizeMeshToolUvAtlasProperties

    @JsName("C")
    public fun copy(other: UObject): ParameterizeMeshToolUvAtlasProperties

    @JsName("C")
    public fun copy(other: Any): ParameterizeMeshToolUvAtlasProperties
  }
}

public open external class ParameterizeMeshToolXAtlasProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("MaxIterations")
  public open var maxIterations: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParameterizeMeshToolXAtlasProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParameterizeMeshToolXAtlasProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParameterizeMeshToolXAtlasProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParameterizeMeshToolXAtlasProperties

    @JsName("C")
    public fun copy(other: UObject): ParameterizeMeshToolXAtlasProperties

    @JsName("C")
    public fun copy(other: Any): ParameterizeMeshToolXAtlasProperties
  }
}

public open external class ParameterizeMeshToolPatchBuilderProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("InitialPatches")
  public open var initialPatches: Number

  @JsName("CurvatureAlignment")
  public open var curvatureAlignment: Number

  @JsName("MergingDistortionThreshold")
  public open var mergingDistortionThreshold: Number

  @JsName("MergingAngleThreshold")
  public open var mergingAngleThreshold: Number

  @JsName("SmoothingSteps")
  public open var smoothingSteps: Number

  @JsName("SmoothingAlpha")
  public open var smoothingAlpha: Number

  @JsName("bRepack")
  public open var repack: Boolean

  @JsName("TextureResolution")
  public open var textureResolution: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParameterizeMeshToolPatchBuilderProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        ParameterizeMeshToolPatchBuilderProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParameterizeMeshToolPatchBuilderProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParameterizeMeshToolPatchBuilderProperties

    @JsName("C")
    public fun copy(other: UObject): ParameterizeMeshToolPatchBuilderProperties

    @JsName("C")
    public fun copy(other: Any): ParameterizeMeshToolPatchBuilderProperties
  }
}

public open external class ParameterizeMeshOperatorFactory(
  outer: UObject,
) : UObject {
  @JsName("Settings")
  public open var settings: ParameterizeMeshToolProperties

  @JsName("UVAtlasProperties")
  public open var uvAtlasProperties: ParameterizeMeshToolUvAtlasProperties

  @JsName("XAtlasProperties")
  public open var xAtlasProperties: ParameterizeMeshToolXAtlasProperties

  @JsName("PatchBuilderProperties")
  public open var patchBuilderProperties: ParameterizeMeshToolPatchBuilderProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParameterizeMeshOperatorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParameterizeMeshOperatorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParameterizeMeshOperatorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParameterizeMeshOperatorFactory

    @JsName("C")
    public fun copy(other: UObject): ParameterizeMeshOperatorFactory

    @JsName("C")
    public fun copy(other: Any): ParameterizeMeshOperatorFactory
  }
}

public open external class ParameterizeMeshToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParameterizeMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParameterizeMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParameterizeMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParameterizeMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): ParameterizeMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): ParameterizeMeshToolBuilder
  }
}

public open external class ParameterizeMeshToolPatchBuilderGroupLayerProperties(
  outer: UObject,
) : PolygroupLayersProperties {
  @JsName("bConstrainToPolygroups")
  public open var constrainToPolygroups: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParameterizeMeshToolPatchBuilderGroupLayerProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        ParameterizeMeshToolPatchBuilderGroupLayerProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParameterizeMeshToolPatchBuilderGroupLayerProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParameterizeMeshToolPatchBuilderGroupLayerProperties

    @JsName("C")
    public fun copy(other: UObject): ParameterizeMeshToolPatchBuilderGroupLayerProperties

    @JsName("C")
    public fun copy(other: Any): ParameterizeMeshToolPatchBuilderGroupLayerProperties
  }
}

public open external class ParameterizeMeshTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("UVChannelProperties")
  public open var uvChannelProperties: MeshUvChannelProperties

  @JsName("Settings")
  public open var settings: ParameterizeMeshToolProperties

  @JsName("UVAtlasProperties")
  public open var uvAtlasProperties: ParameterizeMeshToolUvAtlasProperties

  @JsName("XAtlasProperties")
  public open var xAtlasProperties: ParameterizeMeshToolXAtlasProperties

  @JsName("PatchBuilderProperties")
  public open var patchBuilderProperties: ParameterizeMeshToolPatchBuilderProperties

  @JsName("PolygroupLayerProperties")
  public open var polygroupLayerProperties: ParameterizeMeshToolPatchBuilderGroupLayerProperties

  @JsName("MaterialSettings")
  public open var materialSettings: ExistingMeshMaterialProperties

  @JsName("bCreateUVLayoutViewOnSetup")
  public open var createUvLayoutViewOnSetup: Boolean

  @JsName("UVLayoutView")
  public open var uvLayoutView: UvLayoutPreview

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParameterizeMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParameterizeMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParameterizeMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParameterizeMeshTool

    @JsName("C")
    public fun copy(other: UObject): ParameterizeMeshTool

    @JsName("C")
    public fun copy(other: Any): ParameterizeMeshTool
  }
}

public open external class AddPivotActorToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddPivotActorToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddPivotActorToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddPivotActorToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddPivotActorToolBuilder

    @JsName("C")
    public fun copy(other: UObject): AddPivotActorToolBuilder

    @JsName("C")
    public fun copy(other: Any): AddPivotActorToolBuilder
  }
}

public open external class AddPivotActorTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("DragAlignmentMechanic")
  public open var dragAlignmentMechanic: DragAlignmentMechanic

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AddPivotActorTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AddPivotActorTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AddPivotActorTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AddPivotActorTool

    @JsName("C")
    public fun copy(other: UObject): AddPivotActorTool

    @JsName("C")
    public fun copy(other: Any): AddPivotActorTool
  }
}

public open external class AttributeEditorToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorToolBuilder

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorToolBuilder

    @JsName("C")
    public fun copy(other: Any): AttributeEditorToolBuilder
  }
}

public open external class AttributeEditorAttribProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("VertexAttributes")
  public open var vertexAttributes: Array<String>

  @JsName("InstanceAttributes")
  public open var instanceAttributes: Array<String>

  @JsName("TriangleAttributes")
  public open var triangleAttributes: Array<String>

  @JsName("PolygonAttributes")
  public open var polygonAttributes: Array<String>

  @JsName("EdgeAttributes")
  public open var edgeAttributes: Array<String>

  @JsName("GroupAttributes")
  public open var groupAttributes: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorAttribProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorAttribProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorAttribProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorAttribProperties

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorAttribProperties

    @JsName("C")
    public fun copy(other: Any): AttributeEditorAttribProperties
  }
}

public open external class AttributeEditorActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorActionPropertySet

    @JsName("C")
    public fun copy(other: Any): AttributeEditorActionPropertySet
  }
}

public open external class AttributeEditorNormalsActions(
  outer: UObject,
) : AttributeEditorActionPropertySet {
  @JsName("ResetHardNormals")
  public open fun resetHardNormals(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorNormalsActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorNormalsActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorNormalsActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorNormalsActions

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorNormalsActions

    @JsName("C")
    public fun copy(other: Any): AttributeEditorNormalsActions
  }
}

@JsName("AttributeEditorUVActions")
public open external class AttributeEditorUvActions(
  outer: UObject,
) : AttributeEditorActionPropertySet {
  @JsName("UVLayer")
  public open var uvLayer: String

  @JsName("UVLayerNamesList")
  public open var uvLayerNamesList: Array<String>

  @JsName("GetUVLayerNamesFunc")
  public open fun getUvLayerNamesFunc(): Array<String>

  @JsName("DuplicateSelected")
  public open fun duplicateSelected(): Unit

  @JsName("DeleteSelected")
  public open fun deleteSelected(): Unit

  @JsName("ClearAll")
  public open fun clearAll(): Unit

  @JsName("AddNew")
  public open fun addNew(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorUvActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorUvActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorUvActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorUvActions

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorUvActions

    @JsName("C")
    public fun copy(other: Any): AttributeEditorUvActions
  }
}

@JsName("AttributeEditorLightmapUVActions")
public open external class AttributeEditorLightmapUvActions(
  outer: UObject,
) : AttributeEditorActionPropertySet {
  @JsName("bGenerateLightmapUVs")
  public open var generateLightmapUVs: Boolean

  @JsName("SourceUVIndex")
  public open var sourceUvIndex: Number

  @JsName("DestinationUVIndex")
  public open var destinationUvIndex: Number

  @JsName("Reset")
  public open fun reset(): Unit

  @JsName("Enable")
  public open fun enable(): Unit

  @JsName("Disable")
  public open fun disable(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorLightmapUvActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorLightmapUvActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorLightmapUvActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorLightmapUvActions

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorLightmapUvActions

    @JsName("C")
    public fun copy(other: Any): AttributeEditorLightmapUvActions
  }
}

@JsName("EAttributeEditorElementType")
public external object AttributeEditorElementType {
  public var Vertex: String

  public var VertexInstance: String

  public var Triangle: String

  public var Polygon: String

  public var Edge: String

  public var PolygonGroup: String

  @JsName("EAttributeEditorElementType_MAX")
  public var Max: String
}

@JsName("EAttributeEditorAttribType")
public external object AttributeEditorAttribType {
  public var Int32: String

  public var Boolean: String

  public var Float: String

  public var Vector2: String

  public var Vector3: String

  public var Vector4: String

  public var String: String

  public var Unknown: String

  @JsName("EAttributeEditorAttribType_MAX")
  public var Max: String
}

public open external class AttributeEditorNewAttributeActions(
  outer: UObject,
) : AttributeEditorActionPropertySet {
  @JsName("NewName")
  public open var newName: String

  @JsName("ElementType")
  public open var elementType: String

  @JsName("DataType")
  public open var dataType: String

  @JsName("AddWeightMapLayer")
  public open fun addWeightMapLayer(): Unit

  @JsName("AddPolyGroupLayer")
  public open fun addPolyGroupLayer(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorNewAttributeActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorNewAttributeActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorNewAttributeActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorNewAttributeActions

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorNewAttributeActions

    @JsName("C")
    public fun copy(other: Any): AttributeEditorNewAttributeActions
  }
}

public open external class AttributeEditorModifyAttributeActions(
  outer: UObject,
) : AttributeEditorActionPropertySet {
  @JsName("Attribute")
  public open var attribute: String

  @JsName("AttributeNamesList")
  public open var attributeNamesList: Array<String>

  @JsName("GetAttributeNamesFunc")
  public open fun getAttributeNamesFunc(): Array<String>

  @JsName("DeleteSelected")
  public open fun deleteSelected(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorModifyAttributeActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorModifyAttributeActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorModifyAttributeActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorModifyAttributeActions

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorModifyAttributeActions

    @JsName("C")
    public fun copy(other: Any): AttributeEditorModifyAttributeActions
  }
}

public open external class AttributeEditorCopyAttributeActions(
  outer: UObject,
) : AttributeEditorActionPropertySet {
  @JsName("FromAttribute")
  public open var fromAttribute: Array<String>

  @JsName("ToAttribute")
  public open var toAttribute: Array<String>

  @JsName("CopyFromTo")
  public open fun copyFromTo(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorCopyAttributeActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorCopyAttributeActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorCopyAttributeActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorCopyAttributeActions

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorCopyAttributeActions

    @JsName("C")
    public fun copy(other: Any): AttributeEditorCopyAttributeActions
  }
}

public open external class AttributeEditorTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("NormalsActions")
  public open var normalsActions: AttributeEditorNormalsActions

  @JsName("UVActions")
  public open var uvActions: AttributeEditorUvActions

  @JsName("LightmapUVActions")
  public open var lightmapUvActions: AttributeEditorLightmapUvActions

  @JsName("AttributeProps")
  public open var attributeProps: AttributeEditorAttribProperties

  @JsName("NewAttributeProps")
  public open var newAttributeProps: AttributeEditorNewAttributeActions

  @JsName("ModifyAttributeProps")
  public open var modifyAttributeProps: AttributeEditorModifyAttributeActions

  @JsName("CopyAttributeProps")
  public open var copyAttributeProps: AttributeEditorCopyAttributeActions

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AttributeEditorTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AttributeEditorTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AttributeEditorTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AttributeEditorTool

    @JsName("C")
    public fun copy(other: UObject): AttributeEditorTool

    @JsName("C")
    public fun copy(other: Any): AttributeEditorTool
  }
}

public open external class BspConversionToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BspConversionToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BspConversionToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BspConversionToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BspConversionToolBuilder

    @JsName("C")
    public fun copy(other: UObject): BspConversionToolBuilder

    @JsName("C")
    public fun copy(other: Any): BspConversionToolBuilder
  }
}

@JsName("EBspConversionMode")
public external object BspConversionMode {
  @JsName("ConvertFirst")
  public var NvertFirst: String

  @JsName("CombineFirst")
  public var MbineFirst: String

  @JsName("EBspConversionMode_MAX")
  public var Max: String
}

public open external class BspConversionToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("ConversionMode")
  public open var conversionMode: String

  @JsName("bIncludeVolumes")
  public open var includeVolumes: Boolean

  @JsName("bRemoveConvertedVolumes")
  public open var removeConvertedVolumes: Boolean

  @JsName("bExplicitSubtractiveBrushSelection")
  public open var explicitSubtractiveBrushSelection: Boolean

  @JsName("bRemoveConvertedSubtractiveBrushes")
  public open var removeConvertedSubtractiveBrushes: Boolean

  @JsName("bCacheBrushes")
  public open var cacheBrushes: Boolean

  @JsName("bShowPreview")
  public open var showPreview: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BspConversionToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BspConversionToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BspConversionToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BspConversionToolProperties

    @JsName("C")
    public fun copy(other: UObject): BspConversionToolProperties

    @JsName("C")
    public fun copy(other: Any): BspConversionToolProperties
  }
}

public open external class BspConversionToolActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SelectAllValidBrushes")
  public open fun selectAllValidBrushes(): Unit

  @JsName("DeselectVolumes")
  public open fun deselectVolumes(): Unit

  @JsName("DeselectNonValid")
  public open fun deselectNonValid(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BspConversionToolActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BspConversionToolActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BspConversionToolActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BspConversionToolActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): BspConversionToolActionPropertySet

    @JsName("C")
    public fun copy(other: Any): BspConversionToolActionPropertySet
  }
}

public open external class BspConversionTool(
  outer: UObject,
) : InteractiveTool {
  @JsName("Settings")
  public open var settings: BspConversionToolProperties

  @JsName("ToolActions")
  public open var toolActions: BspConversionToolActionPropertySet

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BspConversionTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BspConversionTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BspConversionTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BspConversionTool

    @JsName("C")
    public fun copy(other: UObject): BspConversionTool

    @JsName("C")
    public fun copy(other: Any): BspConversionTool
  }
}

public open external class EditMeshMaterialsToolBuilder(
  outer: UObject,
) : MeshSelectionToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshMaterialsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshMaterialsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshMaterialsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshMaterialsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): EditMeshMaterialsToolBuilder

    @JsName("C")
    public fun copy(other: Any): EditMeshMaterialsToolBuilder
  }
}

public open external class EditMeshMaterialsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("ActiveMaterial")
  public open var activeMaterial: String

  @JsName("MaterialNamesList")
  public open var materialNamesList: Array<String>

  @JsName("Materials")
  public open var materials: Array<MaterialInterface>

  @JsName("GetMaterialNamesFunc")
  public open fun getMaterialNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshMaterialsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshMaterialsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshMaterialsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshMaterialsToolProperties

    @JsName("C")
    public fun copy(other: UObject): EditMeshMaterialsToolProperties

    @JsName("C")
    public fun copy(other: Any): EditMeshMaterialsToolProperties
  }
}

public open external class EditMeshMaterialsEditActions(
  outer: UObject,
) : MeshSelectionToolActionPropertySet {
  @JsName("AssignActiveMaterial")
  public open fun assignActiveMaterial(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshMaterialsEditActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshMaterialsEditActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshMaterialsEditActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshMaterialsEditActions

    @JsName("C")
    public fun copy(other: UObject): EditMeshMaterialsEditActions

    @JsName("C")
    public fun copy(other: Any): EditMeshMaterialsEditActions
  }
}

public open external class EditMeshMaterialsTool(
  outer: UObject,
) : MeshSelectionTool {
  @JsName("MaterialProps")
  public open var materialProps: EditMeshMaterialsToolProperties

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditMeshMaterialsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditMeshMaterialsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditMeshMaterialsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditMeshMaterialsTool

    @JsName("C")
    public fun copy(other: UObject): EditMeshMaterialsTool

    @JsName("C")
    public fun copy(other: Any): EditMeshMaterialsTool
  }
}

public open external class MergeMeshesToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MergeMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MergeMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MergeMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MergeMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MergeMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): MergeMeshesToolBuilder
  }
}

public open external class MergeMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("VoxelCount")
  public open var voxelCount: Number

  @JsName("MeshAdaptivity")
  public open var meshAdaptivity: Number

  @JsName("OffsetDistance")
  public open var offsetDistance: Number

  @JsName("bAutoSimplify")
  public open var autoSimplify: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MergeMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MergeMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MergeMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MergeMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): MergeMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): MergeMeshesToolProperties
  }
}

public open external class MergeMeshesTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("MergeProps")
  public open var mergeProps: MergeMeshesToolProperties

  @JsName("MeshStatisticsProperties")
  public open var meshStatisticsProperties: MeshStatisticsProperties

  @JsName("HandleSourcesProperties")
  public open var handleSourcesProperties: OnAcceptHandleSourcesProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MergeMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MergeMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MergeMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MergeMeshesTool

    @JsName("C")
    public fun copy(other: UObject): MergeMeshesTool

    @JsName("C")
    public fun copy(other: Any): MergeMeshesTool
  }
}

public open external class MeshTangentsToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshTangentsToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshTangentsToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshTangentsToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshTangentsToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshTangentsToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshTangentsToolBuilder
  }
}

@JsName("EMeshTangentsType")
public external object MeshTangentsType {
  public var MikkTSpace: String

  public var FastMikkTSpace: String

  public var PerTriangle: String

  public var CopyExisting: String

  @JsName("EMeshTangentsType_MAX")
  public var Max: String
}

public open external class MeshTangentsToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("CalculationMethod")
  public open var calculationMethod: String

  @JsName("bShowTangents")
  public open var showTangents: Boolean

  @JsName("bShowNormals")
  public open var showNormals: Boolean

  @JsName("LineLength")
  public open var lineLength: Number

  @JsName("LineThickness")
  public open var lineThickness: Number

  @JsName("bShowDegenerates")
  public open var showDegenerates: Boolean

  @JsName("bCompareWithMikkt")
  public open var compareWithMikkt: Boolean

  @JsName("CompareWithMikktThreshold")
  public open var compareWithMikktThreshold: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshTangentsToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshTangentsToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshTangentsToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshTangentsToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshTangentsToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshTangentsToolProperties
  }
}

public open external class MeshTangentsTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("Settings")
  public open var settings: MeshTangentsToolProperties

  @JsName("DefaultMaterial")
  public open var defaultMaterial: MaterialInterface

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("PreviewGeometry")
  public open var previewGeometry: PreviewGeometry

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshTangentsTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshTangentsTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshTangentsTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshTangentsTool

    @JsName("C")
    public fun copy(other: UObject): MeshTangentsTool

    @JsName("C")
    public fun copy(other: Any): MeshTangentsTool
  }
}

public open external class MeshToVolumeToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshToVolumeToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshToVolumeToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshToVolumeToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshToVolumeToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshToVolumeToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshToVolumeToolBuilder
  }
}

@JsName("EMeshToVolumeMode")
public external object MeshToVolumeMode {
  public var TriangulatePolygons: String

  public var MinimalPolygons: String

  @JsName("EMeshToVolumeMode_MAX")
  public var Max: String
}

public open external class MeshToVolumeToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("ConversionMode")
  public open var conversionMode: String

  @JsName("NewVolumeType")
  public open var newVolumeType: UnrealEngineClass

  @JsName("TargetVolume")
  public open var targetVolume: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshToVolumeToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshToVolumeToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshToVolumeToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshToVolumeToolProperties

    @JsName("C")
    public fun copy(other: UObject): MeshToVolumeToolProperties

    @JsName("C")
    public fun copy(other: Any): MeshToVolumeToolProperties
  }
}

public open external class MeshToVolumeTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("Settings")
  public open var settings: MeshToVolumeToolProperties

  @JsName("HandleSourcesProperties")
  public open var handleSourcesProperties: OnAcceptHandleSourcesProperties

  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("VolumeEdgesSet")
  public open var volumeEdgesSet: LineSetComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshToVolumeTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshToVolumeTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshToVolumeTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshToVolumeTool

    @JsName("C")
    public fun copy(other: UObject): MeshToVolumeTool

    @JsName("C")
    public fun copy(other: Any): MeshToVolumeTool
  }
}

public open external class PolygonOnMeshToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolygonOnMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolygonOnMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolygonOnMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolygonOnMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): PolygonOnMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): PolygonOnMeshToolBuilder
  }
}

@JsName("EEmbeddedPolygonOpMethod")
public external object EmbeddedPolygonOpMethod {
  public var TrimOutside: String

  public var TrimInside: String

  public var InsertPolygon: String

  public var CutThrough: String

  @JsName("EEmbeddedPolygonOpMethod_MAX")
  public var Max: String
}

@JsName("EPolygonType")
public external object PolygonType {
  public var Circle: String

  public var Square: String

  public var Rectangle: String

  public var RoundRect: String

  public var Custom: String

  @JsName("EPolygonType_MAX")
  public var Max: String
}

public open external class PolygonOnMeshToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Operation")
  public open var operation: String

  @JsName("Shape")
  public open var shape: String

  @JsName("bCutWithBoolean")
  public open var cutWithBoolean: Boolean

  @JsName("bTryToFixCracks")
  public open var tryToFixCracks: Boolean

  @JsName("PolygonScale")
  public open var polygonScale: Number

  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("CornerRatio")
  public open var cornerRatio: Number

  @JsName("Subdivisions")
  public open var subdivisions: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolygonOnMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolygonOnMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolygonOnMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolygonOnMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): PolygonOnMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): PolygonOnMeshToolProperties
  }
}

public open external class PolygonOnMeshToolActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("DrawPolygon")
  public open fun drawPolygon(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolygonOnMeshToolActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolygonOnMeshToolActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolygonOnMeshToolActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolygonOnMeshToolActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): PolygonOnMeshToolActionPropertySet

    @JsName("C")
    public fun copy(other: Any): PolygonOnMeshToolActionPropertySet
  }
}

public open external class PolygonOnMeshTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("BasicProperties")
  public open var basicProperties: PolygonOnMeshToolProperties

  @JsName("ActionProperties")
  public open var actionProperties: PolygonOnMeshToolActionPropertySet

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("DrawnLineSet")
  public open var drawnLineSet: LineSetComponent

  @JsName("PlaneMechanic")
  public open var planeMechanic: ConstructionPlaneMechanic

  @JsName("DrawPolygonMechanic")
  public open var drawPolygonMechanic: CollectSurfacePathMechanic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PolygonOnMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PolygonOnMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PolygonOnMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PolygonOnMeshTool

    @JsName("C")
    public fun copy(other: UObject): PolygonOnMeshTool

    @JsName("C")
    public fun copy(other: Any): PolygonOnMeshTool
  }
}

public open external class ShapeSprayToolBuilder(
  outer: UObject,
) : MeshSurfacePointMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ShapeSprayToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ShapeSprayToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ShapeSprayToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ShapeSprayToolBuilder

    @JsName("C")
    public fun copy(other: UObject): ShapeSprayToolBuilder

    @JsName("C")
    public fun copy(other: Any): ShapeSprayToolBuilder
  }
}

public open external class ShapeSprayToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Color")
  public open var color: LinearColor

  @JsName("bRandomColor")
  public open var randomColor: Boolean

  @JsName("DropSpeed")
  public open var dropSpeed: Number

  @JsName("ObjectSize")
  public open var objectSize: Number

  @JsName("NumSplats")
  public open var numSplats: Number

  @JsName("Material")
  public open var material: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ShapeSprayToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ShapeSprayToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ShapeSprayToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ShapeSprayToolProperties

    @JsName("C")
    public fun copy(other: UObject): ShapeSprayToolProperties

    @JsName("C")
    public fun copy(other: Any): ShapeSprayToolProperties
  }
}

public open external class ShapeSprayTool(
  outer: UObject,
) : DynamicMeshBrushTool {
  @JsName("Settings")
  public open var settings: ShapeSprayToolProperties

  @JsName("AccumMeshComponent")
  public open var accumMeshComponent: DynamicMeshComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ShapeSprayTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ShapeSprayTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ShapeSprayTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ShapeSprayTool

    @JsName("C")
    public fun copy(other: UObject): ShapeSprayTool

    @JsName("C")
    public fun copy(other: Any): ShapeSprayTool
  }
}

public open external class SimplifyMeshToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SimplifyMeshToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SimplifyMeshToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SimplifyMeshToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SimplifyMeshToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SimplifyMeshToolBuilder

    @JsName("C")
    public fun copy(other: Any): SimplifyMeshToolBuilder
  }
}

@JsName("ESimplifyType")
public external object SimplifyType {
  public var QEM: String

  public var Attribute: String

  @JsName("UEStandard")
  public var UeStandard: String

  public var MinimalExistingVertex: String

  public var MinimalPlanar: String

  public var MinimalPolygroup: String

  @JsName("ESimplifyType_MAX")
  public var Max: String
}

@JsName("ESimplifyTargetType")
public external object SimplifyTargetType {
  public var Percentage: String

  public var TriangleCount: String

  public var VertexCount: String

  public var EdgeLength: String

  public var MinimalPlanar: String

  @JsName("ESimplifyTargetType_MAX")
  public var Max: String
}

public open external class SimplifyMeshToolProperties(
  outer: UObject,
) : MeshConstraintProperties {
  @JsName("SimplifierType")
  public open var simplifierType: String

  @JsName("TargetMode")
  public open var targetMode: String

  @JsName("TargetPercentage")
  public open var targetPercentage: Number

  @JsName("TargetEdgeLength")
  public open var targetEdgeLength: Number

  @JsName("TargetTriangleCount")
  public open var targetTriangleCount: Number

  @JsName("TargetVertexCount")
  public open var targetVertexCount: Number

  @JsName("MinimalAngleThreshold")
  public open var minimalAngleThreshold: Number

  @JsName("PolyEdgeAngleTolerance")
  public open var polyEdgeAngleTolerance: Number

  @JsName("bDiscardAttributes")
  public open var discardAttributes: Boolean

  @JsName("bGeometricConstraint")
  public open var geometricConstraint: Boolean

  @JsName("GeometricTolerance")
  public open var geometricTolerance: Number

  @JsName("bShowGroupColors")
  public open var showGroupColors: Boolean

  @JsName("bReproject")
  public open var reproject: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SimplifyMeshToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SimplifyMeshToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SimplifyMeshToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SimplifyMeshToolProperties

    @JsName("C")
    public fun copy(other: UObject): SimplifyMeshToolProperties

    @JsName("C")
    public fun copy(other: Any): SimplifyMeshToolProperties
  }
}

public open external class SimplifyMeshTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("SimplifyProperties")
  public open var simplifyProperties: SimplifyMeshToolProperties

  @JsName("MeshStatisticsProperties")
  public open var meshStatisticsProperties: MeshStatisticsProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  @JsName("MeshElementsDisplay")
  public open var meshElementsDisplay: MeshElementsVisualizer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SimplifyMeshTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SimplifyMeshTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SimplifyMeshTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SimplifyMeshTool

    @JsName("C")
    public fun copy(other: UObject): SimplifyMeshTool

    @JsName("C")
    public fun copy(other: Any): SimplifyMeshTool
  }
}

public open external class SubdividePolyToolBuilder(
  outer: UObject,
) : SingleSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubdividePolyToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubdividePolyToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubdividePolyToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubdividePolyToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SubdividePolyToolBuilder

    @JsName("C")
    public fun copy(other: Any): SubdividePolyToolBuilder
  }
}

@JsName("ESubdivisionScheme")
public external object SubdivisionScheme {
  public var Bilinear: String

  public var CatmullClark: String

  public var Loop: String

  @JsName("ESubdivisionScheme_MAX")
  public var Max: String
}

@JsName("ESubdivisionOutputNormals")
public external object SubdivisionOutputNormals {
  public var Interpolated: String

  public var Generated: String

  public var None: String

  @JsName("ESubdivisionOutputNormals_MAX")
  public var Max: String
}

@JsName("ESubdivisionOutputUVs")
public external object SubdivisionOutputUVs {
  public var Interpolated: String

  public var None: String

  @JsName("ESubdivisionOutputUVs_MAX")
  public var Max: String
}

public open external class SubdividePolyToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SubdivisionLevel")
  public open var subdivisionLevel: Number

  @JsName("bCatmullClarkOK")
  public open var catmullClarkOk: Boolean

  @JsName("SubdivisionScheme")
  public open var subdivisionScheme: String

  @JsName("NormalComputationMethod")
  public open var normalComputationMethod: String

  @JsName("UVComputationMethod")
  public open var uvComputationMethod: String

  @JsName("bNewPolyGroups")
  public open var newPolyGroups: Boolean

  @JsName("bRenderGroups")
  public open var renderGroups: Boolean

  @JsName("bRenderCage")
  public open var renderCage: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubdividePolyToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubdividePolyToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubdividePolyToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubdividePolyToolProperties

    @JsName("C")
    public fun copy(other: UObject): SubdividePolyToolProperties

    @JsName("C")
    public fun copy(other: Any): SubdividePolyToolProperties
  }
}

public open external class SubdividePolyTool(
  outer: UObject,
) : SingleSelectionMeshEditingTool {
  @JsName("PreviewMesh")
  public open var previewMesh: PreviewMesh

  @JsName("Properties")
  public open var properties: SubdividePolyToolProperties

  @JsName("PreviewGeometry")
  public open var previewGeometry: PreviewGeometry

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubdividePolyTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubdividePolyTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubdividePolyTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubdividePolyTool

    @JsName("C")
    public fun copy(other: UObject): SubdividePolyTool

    @JsName("C")
    public fun copy(other: Any): SubdividePolyTool
  }
}

@JsName("VoxelCSGMeshesToolBuilder")
public open external class VoxelCsgMeshesToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelCsgMeshesToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelCsgMeshesToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelCsgMeshesToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelCsgMeshesToolBuilder

    @JsName("C")
    public fun copy(other: UObject): VoxelCsgMeshesToolBuilder

    @JsName("C")
    public fun copy(other: Any): VoxelCsgMeshesToolBuilder
  }
}

@JsName("EVoxelCSGOperation")
public external object VoxelCSGOperation {
  @JsName("DifferenceAB")
  public var DifferenceAb: String

  @JsName("DifferenceBA")
  public var DifferenceBa: String

  public var Intersect: String

  public var Union: String

  @JsName("EVoxelCSGOperation_MAX")
  public var Max: String
}

@JsName("VoxelCSGMeshesToolProperties")
public open external class VoxelCsgMeshesToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Operation")
  public open var operation: String

  @JsName("VoxelCount")
  public open var voxelCount: Number

  @JsName("MeshAdaptivity")
  public open var meshAdaptivity: Number

  @JsName("OffsetDistance")
  public open var offsetDistance: Number

  @JsName("bAutoSimplify")
  public open var autoSimplify: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelCsgMeshesToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelCsgMeshesToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelCsgMeshesToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelCsgMeshesToolProperties

    @JsName("C")
    public fun copy(other: UObject): VoxelCsgMeshesToolProperties

    @JsName("C")
    public fun copy(other: Any): VoxelCsgMeshesToolProperties
  }
}

@JsName("VoxelCSGMeshesTool")
public open external class VoxelCsgMeshesTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("CSGProps")
  public open var csgProps: VoxelCsgMeshesToolProperties

  @JsName("MeshStatisticsProperties")
  public open var meshStatisticsProperties: MeshStatisticsProperties

  @JsName("HandleSourcesProperties")
  public open var handleSourcesProperties: OnAcceptHandleSourcesProperties

  @JsName("Preview")
  public open var preview: MeshOpPreviewWithBackgroundCompute

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VoxelCsgMeshesTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VoxelCsgMeshesTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VoxelCsgMeshesTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VoxelCsgMeshesTool

    @JsName("C")
    public fun copy(other: UObject): VoxelCsgMeshesTool

    @JsName("C")
    public fun copy(other: Any): VoxelCsgMeshesTool
  }
}

@JsName("GenerateStaticMeshLODAssetToolBuilder")
public open external class GenerateStaticMeshLodAssetToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateStaticMeshLodAssetToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateStaticMeshLodAssetToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateStaticMeshLodAssetToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateStaticMeshLodAssetToolBuilder

    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodAssetToolBuilder

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodAssetToolBuilder
  }
}

@JsName("EGenerateLODAssetOutputMode")
public external object GenerateLODAssetOutputMode {
  public var CreateNewAsset: String

  public var UpdateExistingAsset: String

  @JsName("EGenerateLODAssetOutputMode_MAX")
  public var Max: String
}

@JsName("GenerateStaticMeshLODAssetToolOutputProperties")
public open external class GenerateStaticMeshLodAssetToolOutputProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("OutputMode")
  public open var outputMode: String

  @JsName("NewAssetName")
  public open var newAssetName: String

  @JsName("bSaveInputAsHiResSource")
  public open var saveInputAsHiResSource: Boolean

  @JsName("GeneratedSuffix")
  public open var generatedSuffix: String

  @JsName("bShowOutputMode")
  public open var showOutputMode: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateStaticMeshLodAssetToolOutputProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        GenerateStaticMeshLodAssetToolOutputProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateStaticMeshLodAssetToolOutputProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateStaticMeshLodAssetToolOutputProperties

    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodAssetToolOutputProperties

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodAssetToolOutputProperties
  }
}

@JsName("GenerateStaticMeshLODAssetToolPresetProperties")
public open external class GenerateStaticMeshLodAssetToolPresetProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Preset")
  public open var preset: Any

  @JsName("WriteToPreset")
  public open fun writeToPreset(): Unit

  @JsName("ReadFromPreset")
  public open fun readFromPreset(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateStaticMeshLodAssetToolPresetProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        GenerateStaticMeshLodAssetToolPresetProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateStaticMeshLodAssetToolPresetProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateStaticMeshLodAssetToolPresetProperties

    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodAssetToolPresetProperties

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodAssetToolPresetProperties
  }
}

@JsName("GenerateStaticMeshLODProcess_PreprocessSettings")
public open external class GenerateStaticMeshLodProcessPreprocessSettings {
  @JsName("FilterGroupLayer")
  public open var filterGroupLayer: String

  @JsName("ThickenWeightMapName")
  public open var thickenWeightMapName: String

  @JsName("ThickenAmount")
  public open var thickenAmount: Number

  public open fun clone(): GenerateStaticMeshLodProcessPreprocessSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcessPreprocessSettings

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcessPreprocessSettings
  }
}

@JsName("EGenerateStaticMeshLODProcess_MeshGeneratorModes")
public external object GenerateStaticMeshLODProcess_MeshGeneratorModes {
  public var Solidify: String

  public var SolidifyAndClose: String

  public var CleanAndSimplify: String

  public var ConvexHull: String

  @JsName("EGenerateStaticMeshLODProcess_MAX")
  public var EGenerateStaticMeshLodProcessMax: String
}

@JsName("GenerateStaticMeshLODProcessSettings")
public open external class GenerateStaticMeshLodProcessSettings {
  @JsName("MeshGenerator")
  public open var meshGenerator: String

  @JsName("SolidifyVoxelResolution")
  public open var solidifyVoxelResolution: Number

  @JsName("WindingThreshold")
  public open var windingThreshold: Number

  @JsName("ClosureDistance")
  public open var closureDistance: Number

  @JsName("bPrefilterVertices")
  public open var prefilterVertices: Boolean

  @JsName("PrefilterGridResolution")
  public open var prefilterGridResolution: Number

  public open fun clone(): GenerateStaticMeshLodProcessSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcessSettings

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcessSettings
  }
}

@JsName("EGenerateStaticMeshLODProcess_SimplifyMethod")
public external object GenerateStaticMeshLODProcess_SimplifyMethod {
  public var TriangleCount: String

  public var VertexCount: String

  public var TrianglePercentage: String

  public var GeometricTolerance: String

  @JsName("EGenerateStaticMeshLODProcess_MAX")
  public var EGenerateStaticMeshLodProcessMax: String
}

@JsName("GenerateStaticMeshLODProcess_SimplifySettings")
public open external class GenerateStaticMeshLodProcessSimplifySettings {
  @JsName("Method")
  public open var method: String

  @JsName("TargetCount")
  public open var targetCount: Number

  @JsName("TargetPercentage")
  public open var targetPercentage: Number

  @JsName("Tolerance")
  public open var tolerance: Number

  public open fun clone(): GenerateStaticMeshLodProcessSimplifySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcessSimplifySettings

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcessSimplifySettings
  }
}

@JsName("EGenerateStaticMeshLODProcess_NormalsMethod")
public external object GenerateStaticMeshLODProcess_NormalsMethod {
  public var FromAngleThreshold: String

  public var PerVertex: String

  public var PerTriangle: String

  @JsName("EGenerateStaticMeshLODProcess_MAX")
  public var EGenerateStaticMeshLodProcessMax: String
}

@JsName("GenerateStaticMeshLODProcess_NormalsSettings")
public open external class GenerateStaticMeshLodProcessNormalsSettings {
  @JsName("Method")
  public open var method: String

  @JsName("Angle")
  public open var angle: Number

  public open fun clone(): GenerateStaticMeshLodProcessNormalsSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcessNormalsSettings

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcessNormalsSettings
  }
}

@JsName("EGenerateStaticMeshLODBakeResolution")
public external object GenerateStaticMeshLODBakeResolution {
  @JsName("Resolution16")
  public var Sixteen: String

  @JsName("Resolution32")
  public var ThirtyTwo: String

  @JsName("Resolution64")
  public var SixtyFour: String

  @JsName("Resolution128")
  public var OneTwentyEight: String

  @JsName("Resolution256")
  public var TwoFiftySix: String

  @JsName("Resolution512")
  public var FiveTwelve: String

  @JsName("Resolution1024")
  public var TenTwentyFour: String

  @JsName("Resolution2048")
  public var TwentyFortyEight: String

  @JsName("Resolution4096")
  public var FortyNinetySix: String

  @JsName("Resolution8192")
  public var EightyOneNinetyTwo: String

  @JsName("EGenerateStaticMeshLODBakeResolution_MAX")
  public var Max: String
}

@JsName("GenerateStaticMeshLODProcess_TextureSettings")
public open external class GenerateStaticMeshLodProcessTextureSettings {
  @JsName("BakeResolution")
  public open var bakeResolution: String

  @JsName("BakeThickness")
  public open var bakeThickness: Number

  @JsName("bCombineTextures")
  public open var combineTextures: Boolean

  public open fun clone(): GenerateStaticMeshLodProcessTextureSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcessTextureSettings

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcessTextureSettings
  }
}

@JsName("EGenerateStaticMeshLODProcess_AutoUVMethod")
public external object GenerateStaticMeshLODProcess_AutoUVMethod {
  public var PatchBuilder: String

  @JsName("UVAtlas")
  public var UvAtlas: String

  public var XAtlas: String

  @JsName("EGenerateStaticMeshLODProcess_MAX")
  public var EGenerateStaticMeshLodProcessMax: String
}

@JsName("GenerateStaticMeshLODProcess_UVSettings_PatchBuilder")
public open external class GenerateStaticMeshLodProcessUvSettingsPatchBuilder {
  @JsName("CurvatureAlignment")
  public open var curvatureAlignment: Number

  @JsName("SmoothingSteps")
  public open var smoothingSteps: Number

  @JsName("SmoothingAlpha")
  public open var smoothingAlpha: Number

  public open fun clone(): GenerateStaticMeshLodProcessUvSettingsPatchBuilder

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcessUvSettingsPatchBuilder

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcessUvSettingsPatchBuilder
  }
}

@JsName("GenerateStaticMeshLODProcess_UVSettings")
public open external class GenerateStaticMeshLodProcessUvSettings {
  @JsName("UVMethod")
  public open var uvMethod: String

  @JsName("NumUVAtlasCharts")
  public open var numUvAtlasCharts: Number

  @JsName("NumInitialPatches")
  public open var numInitialPatches: Number

  @JsName("MergingThreshold")
  public open var mergingThreshold: Number

  @JsName("MaxAngleDeviation")
  public open var maxAngleDeviation: Number

  @JsName("PatchBuilder")
  public open var patchBuilder: GenerateStaticMeshLodProcessUvSettingsPatchBuilder

  public open fun clone(): GenerateStaticMeshLodProcessUvSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcessUvSettings

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcessUvSettings
  }
}

@JsName("EGenerateStaticMeshLODSimpleCollisionGeometryType")
public external object GenerateStaticMeshLODSimpleCollisionGeometryType {
  public var AlignedBoxes: String

  public var OrientedBoxes: String

  public var MinimalSpheres: String

  public var Capsules: String

  public var ConvexHulls: String

  public var SweptHulls: String

  public var MinVolume: String

  public var None: String

  @JsName("EGenerateStaticMeshLODSimpleCollisionGeometryType_MAX")
  public var Max: String
}

@JsName("EGenerateStaticMeshLODProjectedHullAxisMode")
public external object GenerateStaticMeshLODProjectedHullAxisMode {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  public var SmallestBoxDimension: String

  public var SmallestVolume: String

  @JsName("EGenerateStaticMeshLODProjectedHullAxisMode_MAX")
  public var Max: String
}

@JsName("GenerateStaticMeshLODProcess_CollisionSettings")
public open external class GenerateStaticMeshLodProcessCollisionSettings {
  @JsName("CollisionGroupLayerName")
  public open var collisionGroupLayerName: String

  @JsName("CollisionType")
  public open var collisionType: String

  @JsName("ConvexTriangleCount")
  public open var convexTriangleCount: Number

  @JsName("bPrefilterVertices")
  public open var prefilterVertices: Boolean

  @JsName("PrefilterGridResolution")
  public open var prefilterGridResolution: Number

  @JsName("bSimplifyPolygons")
  public open var simplifyPolygons: Boolean

  @JsName("HullTolerance")
  public open var hullTolerance: Number

  @JsName("SweepAxis")
  public open var sweepAxis: String

  public open fun clone(): GenerateStaticMeshLodProcessCollisionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcessCollisionSettings

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcessCollisionSettings
  }
}

@JsName("GenerateStaticMeshLODAssetToolProperties")
public open external class GenerateStaticMeshLodAssetToolProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Preprocessing")
  public open var preprocessing: GenerateStaticMeshLodProcessPreprocessSettings

  @JsName("MeshGeneration")
  public open var meshGeneration: GenerateStaticMeshLodProcessSettings

  @JsName("Simplification")
  public open var simplification: GenerateStaticMeshLodProcessSimplifySettings

  @JsName("Normals")
  public open var normals: GenerateStaticMeshLodProcessNormalsSettings

  @JsName("TextureBaking")
  public open var textureBaking: GenerateStaticMeshLodProcessTextureSettings

  @JsName("UVGeneration")
  public open var uvGeneration: GenerateStaticMeshLodProcessUvSettings

  @JsName("SimpleCollision")
  public open var simpleCollision: GenerateStaticMeshLodProcessCollisionSettings

  @JsName("CollisionGroupLayerName")
  public open var collisionGroupLayerName: String

  @JsName("GroupLayersList")
  public open var groupLayersList: Array<String>

  @JsName("GetGroupLayersFunc")
  public open fun getGroupLayersFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateStaticMeshLodAssetToolProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateStaticMeshLodAssetToolProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateStaticMeshLodAssetToolProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateStaticMeshLodAssetToolProperties

    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodAssetToolProperties

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodAssetToolProperties
  }
}

@JsName("EGenerateStaticMeshLOD_BakeConstraint")
public external object GenerateStaticMeshLOD_BakeConstraint {
  public var NoConstraint: String

  public var DoNotBake: String

  @JsName("EGenerateStaticMeshLOD_MAX")
  public var EGenerateStaticMeshLodmax: String
}

@JsName("GenerateStaticMeshLOD_MaterialConfig")
public open external class GenerateStaticMeshLodMaterialConfig {
  @JsName("Material")
  public open var material: MaterialInterface

  @JsName("Constraint")
  public open var constraint: String

  public open fun clone(): GenerateStaticMeshLodMaterialConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodMaterialConfig

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodMaterialConfig
  }
}

@JsName("GenerateStaticMeshLOD_TextureConfig")
public open external class GenerateStaticMeshLodTextureConfig {
  @JsName("Texture")
  public open var texture: Texture2d

  @JsName("Constraint")
  public open var constraint: String

  public open fun clone(): GenerateStaticMeshLodTextureConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodTextureConfig

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodTextureConfig
  }
}

@JsName("GenerateStaticMeshLODAssetToolTextureProperties")
public open external class GenerateStaticMeshLodAssetToolTextureProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("Materials")
  public open var materials: Array<GenerateStaticMeshLodMaterialConfig>

  @JsName("Textures")
  public open var textures: Array<GenerateStaticMeshLodTextureConfig>

  @JsName("PreviewTextures")
  public open var previewTextures: Array<Texture2d>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateStaticMeshLodAssetToolTextureProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        GenerateStaticMeshLodAssetToolTextureProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateStaticMeshLodAssetToolTextureProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateStaticMeshLodAssetToolTextureProperties

    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodAssetToolTextureProperties

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodAssetToolTextureProperties
  }
}

@JsName("GenerateStaticMeshLODProcess")
public open external class GenerateStaticMeshLodProcess(
  outer: UObject,
) : UObject {
  @JsName("SourceStaticMesh")
  public open var sourceStaticMesh: StaticMesh

  @JsName("AllDerivedTextures")
  public open var allDerivedTextures: Any

  @JsName("DerivedNormalMapTex")
  public open var derivedNormalMapTex: Texture2d

  @JsName("DerivedMultiTextureBakeResult")
  public open var derivedMultiTextureBakeResult: Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateStaticMeshLodProcess

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateStaticMeshLodProcess

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateStaticMeshLodProcess

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateStaticMeshLodProcess

    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodProcess

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodProcess
  }
}

@JsName("GenerateStaticMeshLODAssetTool")
public open external class GenerateStaticMeshLodAssetTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("OutputProperties")
  public open var outputProperties: GenerateStaticMeshLodAssetToolOutputProperties

  @JsName("BasicProperties")
  public open var basicProperties: GenerateStaticMeshLodAssetToolProperties

  @JsName("PresetProperties")
  public open var presetProperties: GenerateStaticMeshLodAssetToolPresetProperties

  @JsName("TextureProperties")
  public open var textureProperties: GenerateStaticMeshLodAssetToolTextureProperties

  @JsName("CollisionVizSettings")
  public open var collisionVizSettings: CollisionGeometryVisualizationProperties

  @JsName("PreviewWithBackgroundCompute")
  public open var previewWithBackgroundCompute: MeshOpPreviewWithBackgroundCompute

  @JsName("PreviewTextures")
  public open var previewTextures: Array<Texture2d>

  @JsName("PreviewMaterials")
  public open var previewMaterials: Array<MaterialInterface>

  @JsName("ObjectData")
  public open var objectData: PhysicsObjectToolPropertySet

  @JsName("LineMaterial")
  public open var lineMaterial: MaterialInterface

  @JsName("CollisionPreview")
  public open var collisionPreview: PreviewGeometry

  @JsName("GenerateProcess")
  public open var generateProcess: GenerateStaticMeshLodProcess

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenerateStaticMeshLodAssetTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenerateStaticMeshLodAssetTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenerateStaticMeshLodAssetTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenerateStaticMeshLodAssetTool

    @JsName("C")
    public fun copy(other: UObject): GenerateStaticMeshLodAssetTool

    @JsName("C")
    public fun copy(other: Any): GenerateStaticMeshLodAssetTool
  }
}

@JsName("StaticMeshLODGenerationSettings")
public open external class StaticMeshLodGenerationSettings(
  outer: UObject,
) : UObject {
  @JsName("Preprocessing")
  public open var preprocessing: GenerateStaticMeshLodProcessPreprocessSettings

  @JsName("MeshGeneration")
  public open var meshGeneration: GenerateStaticMeshLodProcessSettings

  @JsName("Simplification")
  public open var simplification: GenerateStaticMeshLodProcessSimplifySettings

  @JsName("Normals")
  public open var normals: GenerateStaticMeshLodProcessNormalsSettings

  @JsName("TextureBaking")
  public open var textureBaking: GenerateStaticMeshLodProcessTextureSettings

  @JsName("UVGeneration")
  public open var uvGeneration: GenerateStaticMeshLodProcessUvSettings

  @JsName("SimpleCollision")
  public open var simpleCollision: GenerateStaticMeshLodProcessCollisionSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshLodGenerationSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshLodGenerationSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshLodGenerationSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshLodGenerationSettings

    @JsName("C")
    public fun copy(other: UObject): StaticMeshLodGenerationSettings

    @JsName("C")
    public fun copy(other: Any): StaticMeshLodGenerationSettings
  }
}

@JsName("StaticMeshLODGenerationSettingsFactory")
public open external class StaticMeshLodGenerationSettingsFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshLodGenerationSettingsFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshLodGenerationSettingsFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshLodGenerationSettingsFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshLodGenerationSettingsFactory

    @JsName("C")
    public fun copy(other: UObject): StaticMeshLodGenerationSettingsFactory

    @JsName("C")
    public fun copy(other: Any): StaticMeshLodGenerationSettingsFactory
  }
}

@JsName("LODManagerToolBuilder")
public open external class LodManagerToolBuilder(
  outer: UObject,
) : MultiSelectionMeshEditingToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodManagerToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodManagerToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodManagerToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodManagerToolBuilder

    @JsName("C")
    public fun copy(other: UObject): LodManagerToolBuilder

    @JsName("C")
    public fun copy(other: Any): LodManagerToolBuilder
  }
}

@JsName("LODManagerLODInfo")
public open external class LodManagerLodInfo {
  public open var vertexcount: Number

  @JsName("TriangleCount")
  public open var triangleCount: Number

  public open fun clone(): LodManagerLodInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LodManagerLodInfo

    @JsName("C")
    public fun copy(other: Any): LodManagerLodInfo
  }
}

@JsName("LODManagerLODProperties")
public open external class LodManagerLodProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("SourceLODs")
  public open var sourceLoDs: Array<LodManagerLodInfo>

  @JsName("HiResSource")
  public open var hiResSource: Array<LodManagerLodInfo>

  @JsName("RenderLODs")
  public open var renderLoDs: Array<LodManagerLodInfo>

  @JsName("bNaniteEnabled")
  public open var naniteEnabled: Boolean

  @JsName("PercentTriangles")
  public open var percentTriangles: Number

  @JsName("Materials")
  public open var materials: Array<StaticMaterial>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodManagerLodProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodManagerLodProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodManagerLodProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodManagerLodProperties

    @JsName("C")
    public fun copy(other: UObject): LodManagerLodProperties

    @JsName("C")
    public fun copy(other: Any): LodManagerLodProperties
  }
}

@JsName("LODManagerPreviewLODProperties")
public open external class LodManagerPreviewLodProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("VisibleLOD")
  public open var visibleLod: String

  @JsName("LODNamesList")
  public open var lodNamesList: Array<String>

  @JsName("bShowSeams")
  public open var showSeams: Boolean

  @JsName("GetLODNamesFunc")
  public open fun getLodNamesFunc(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodManagerPreviewLodProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodManagerPreviewLodProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodManagerPreviewLodProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodManagerPreviewLodProperties

    @JsName("C")
    public fun copy(other: UObject): LodManagerPreviewLodProperties

    @JsName("C")
    public fun copy(other: Any): LodManagerPreviewLodProperties
  }
}

@JsName("LODManagerActionPropertySet")
public open external class LodManagerActionPropertySet(
  outer: UObject,
) : InteractiveToolPropertySet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodManagerActionPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodManagerActionPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodManagerActionPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodManagerActionPropertySet

    @JsName("C")
    public fun copy(other: UObject): LodManagerActionPropertySet

    @JsName("C")
    public fun copy(other: Any): LodManagerActionPropertySet
  }
}

@JsName("LODManagerHiResSourceModelActions")
public open external class LodManagerHiResSourceModelActions(
  outer: UObject,
) : LodManagerActionPropertySet {
  @JsName("MoveToLOD0")
  public open fun moveToLod0(): Unit

  @JsName("Delete")
  public open fun delete(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodManagerHiResSourceModelActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodManagerHiResSourceModelActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodManagerHiResSourceModelActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodManagerHiResSourceModelActions

    @JsName("C")
    public fun copy(other: UObject): LodManagerHiResSourceModelActions

    @JsName("C")
    public fun copy(other: Any): LodManagerHiResSourceModelActions
  }
}

@JsName("LODManagerMaterialActions")
public open external class LodManagerMaterialActions(
  outer: UObject,
) : LodManagerActionPropertySet {
  @JsName("CleanMaterials")
  public open fun cleanMaterials(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodManagerMaterialActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodManagerMaterialActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodManagerMaterialActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodManagerMaterialActions

    @JsName("C")
    public fun copy(other: UObject): LodManagerMaterialActions

    @JsName("C")
    public fun copy(other: Any): LodManagerMaterialActions
  }
}

@JsName("LODManagerTool")
public open external class LodManagerTool(
  outer: UObject,
) : MultiSelectionMeshEditingTool {
  @JsName("LODInfoProperties")
  public open var lodInfoProperties: LodManagerLodProperties

  @JsName("LODPreviewProperties")
  public open var lodPreviewProperties: LodManagerPreviewLodProperties

  @JsName("HiResSourceModelActions")
  public open var hiResSourceModelActions: LodManagerHiResSourceModelActions

  @JsName("MaterialActions")
  public open var materialActions: LodManagerMaterialActions

  @JsName("LODPreview")
  public open var lodPreview: PreviewMesh

  @JsName("LODPreviewLines")
  public open var lodPreviewLines: PreviewGeometry

  @JsName("RemoveUnreferencedMaterials")
  public open fun removeUnreferencedMaterials(): Unit

  @JsName("MoveHiResToLOD0")
  public open fun moveHiResToLod0(): Unit

  @JsName("DeleteHiResSourceModel")
  public open fun deleteHiResSourceModel(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LodManagerTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LodManagerTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LodManagerTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LodManagerTool

    @JsName("C")
    public fun copy(other: UObject): LodManagerTool

    @JsName("C")
    public fun copy(other: Any): LodManagerTool
  }
}

public open external class StylusInputSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StylusInputSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StylusInputSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StylusInputSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StylusInputSubsystem

    @JsName("C")
    public fun copy(other: UObject): StylusInputSubsystem

    @JsName("C")
    public fun copy(other: Any): StylusInputSubsystem
  }
}

public open external class ModelingToolsEditorMode(
  outer: UObject,
) : BaseLegacyWidgetEdMode {
  @JsName("SceneSnappingManager")
  public open var sceneSnappingManager: ModelingSceneSnappingManager

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelingToolsEditorMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelingToolsEditorMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelingToolsEditorMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelingToolsEditorMode

    @JsName("C")
    public fun copy(other: UObject): ModelingToolsEditorMode

    @JsName("C")
    public fun copy(other: Any): ModelingToolsEditorMode
  }
}

@JsName("EModelingModeDefaultMeshObjectType")
public external object ModelingModeDefaultMeshObjectType {
  public var StaticMeshAsset: String

  public var VolumeActor: String

  public var DynamicMeshActor: String

  @JsName("EModelingModeDefaultMeshObjectType_MAX")
  public var Max: String
}

@JsName("EModelingModeAssetGenerationBehavior")
public external object ModelingModeAssetGenerationBehavior {
  public var AutoGenerateAndAutosave: String

  public var AutoGenerateButDoNotAutosave: String

  public var InteractivePromptToSave: String

  @JsName("EModelingModeAssetGenerationBehavior_MAX")
  public var Max: String
}

@JsName("EModelingModeAssetGenerationLocation")
public external object ModelingModeAssetGenerationLocation {
  public var AutoGeneratedWorldRelativeAssetPath: String

  public var AutoGeneratedGlobalAssetPath: String

  public var CurrentAssetBrowserPathIfAvailable: String

  @JsName("EModelingModeAssetGenerationLocation_MAX")
  public var Max: String
}

public open external class ModelingToolsEditorModeSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bEnableDynamicMeshActors")
  public open var enableDynamicMeshActors: Boolean

  @JsName("DefaultMeshObjectType")
  public open var defaultMeshObjectType: String

  @JsName("AssetGenerationMode")
  public open var assetGenerationMode: String

  @JsName("AssetGenerationLocation")
  public open var assetGenerationLocation: String

  @JsName("AutoGeneratedAssetPath")
  public open var autoGeneratedAssetPath: String

  @JsName("bStoreUnsavedLevelAssetsInTopLevelGameFolder")
  public open var storeUnsavedLevelAssetsInTopLevelGameFolder: Boolean

  @JsName("bUsePerUserAutogenSubfolder")
  public open var usePerUserAutogenSubfolder: Boolean

  @JsName("AutogenSubfolderUserNameOverride")
  public open var autogenSubfolderUserNameOverride: String

  @JsName("bAppendRandomStringToName")
  public open var appendRandomStringToName: Boolean

  @JsName("bEnablePersistentSelections")
  public open var enablePersistentSelections: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelingToolsEditorModeSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelingToolsEditorModeSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelingToolsEditorModeSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelingToolsEditorModeSettings

    @JsName("C")
    public fun copy(other: UObject): ModelingToolsEditorModeSettings

    @JsName("C")
    public fun copy(other: Any): ModelingToolsEditorModeSettings
  }
}

public open external class ModelingModeCustomSectionColor {
  @JsName("SectionName")
  public open var sectionName: String

  @JsName("Color")
  public open var color: LinearColor

  public open fun clone(): ModelingModeCustomSectionColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ModelingModeCustomSectionColor

    @JsName("C")
    public fun copy(other: Any): ModelingModeCustomSectionColor
  }
}

public open external class ModelingModeCustomToolColor {
  @JsName("ToolName")
  public open var toolName: String

  @JsName("Color")
  public open var color: LinearColor

  public open fun clone(): ModelingModeCustomToolColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ModelingModeCustomToolColor

    @JsName("C")
    public fun copy(other: Any): ModelingModeCustomToolColor
  }
}

public open external class ModelingModeAssetCollectionSet {
  @JsName("Name")
  public open var name: String

  @JsName("Collections")
  public open var collections: Array<CollectionReference>

  public open fun clone(): ModelingModeAssetCollectionSet

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ModelingModeAssetCollectionSet

    @JsName("C")
    public fun copy(other: Any): ModelingModeAssetCollectionSet
  }
}

public open external class ModelingToolsModeCustomizationSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("ToolSectionOrder")
  public open var toolSectionOrder: Array<String>

  @JsName("ToolFavorites")
  public open var toolFavorites: Array<String>

  @JsName("SectionColors")
  public open var sectionColors: Array<ModelingModeCustomSectionColor>

  @JsName("ToolColors")
  public open var toolColors: Array<ModelingModeCustomToolColor>

  @JsName("BrushAlphaSets")
  public open var brushAlphaSets: Array<ModelingModeAssetCollectionSet>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelingToolsModeCustomizationSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelingToolsModeCustomizationSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelingToolsModeCustomizationSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelingToolsModeCustomizationSettings

    @JsName("C")
    public fun copy(other: UObject): ModelingToolsModeCustomizationSettings

    @JsName("C")
    public fun copy(other: Any): ModelingToolsModeCustomizationSettings
  }
}

public open external class NewPluginDescriptorData(
  outer: UObject,
) : UObject {
  @JsName("CreatedBy")
  public open var createdBy: String

  @JsName("CreatedByURL")
  public open var createdByUrl: String

  @JsName("Description")
  public open var description: String

  @JsName("bIsBetaVersion")
  public open var isBetaVersion: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NewPluginDescriptorData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NewPluginDescriptorData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NewPluginDescriptorData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NewPluginDescriptorData

    @JsName("C")
    public fun copy(other: UObject): NewPluginDescriptorData

    @JsName("C")
    public fun copy(other: Any): NewPluginDescriptorData
  }
}

public open external class PluginReferenceMetadata {
  @JsName("Name")
  public open var name: String

  @JsName("bOptional")
  public open var optional: Boolean

  @JsName("bEnabled")
  public open var enabled: Boolean

  public open fun clone(): PluginReferenceMetadata

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PluginReferenceMetadata

    @JsName("C")
    public fun copy(other: Any): PluginReferenceMetadata
  }
}

public open external class PluginMetadataObject(
  outer: UObject,
) : UObject {
  @JsName("Version")
  public open var version: Number

  @JsName("VersionName")
  public open var versionName: String

  @JsName("FriendlyName")
  public open var friendlyName: String

  @JsName("Description")
  public open var description: String

  @JsName("Category")
  public open var category: String

  @JsName("CreatedBy")
  public open var createdBy: String

  @JsName("CreatedByURL")
  public open var createdByUrl: String

  @JsName("DocsURL")
  public open var docsUrl: String

  @JsName("MarketplaceURL")
  public open var marketplaceUrl: String

  @JsName("SupportURL")
  public open var supportUrl: String

  @JsName("bCanContainContent")
  public open var canContainContent: Boolean

  @JsName("bIsBetaVersion")
  public open var isBetaVersion: Boolean

  @JsName("Plugins")
  public open var plugins: Array<PluginReferenceMetadata>

  @JsName("GetAvailablePluginDependencies")
  public open fun getAvailablePluginDependencies(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PluginMetadataObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PluginMetadataObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PluginMetadataObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PluginMetadataObject

    @JsName("C")
    public fun copy(other: UObject): PluginMetadataObject

    @JsName("C")
    public fun copy(other: Any): PluginMetadataObject
  }
}

public open external class MovieSceneBindingExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneBindingExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneBindingExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneBindingExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneBindingExtensions

    @JsName("SetParent")
    public fun setParent(inBinding: SequencerBindingProxy, inParentBinding: SequencerBindingProxy):
        Unit

    @JsName("SetName")
    public fun setName(inBinding: SequencerBindingProxy, inName: String): Unit

    @JsName("SetDisplayName")
    public fun setDisplayName(inBinding: SequencerBindingProxy, inDisplayName: String): Unit

    @JsName("RemoveTrack")
    public fun removeTrack(inBinding: SequencerBindingProxy, trackToRemove: MovieSceneTrack): Unit

    @JsName("Remove")
    public fun remove(inBinding: SequencerBindingProxy): Unit

    @JsName("MoveBindingContents")
    public fun moveBindingContents(sourceBindingId: SequencerBindingProxy,
        destinationBindingId: SequencerBindingProxy): Unit

    @JsName("IsValid")
    public fun isValid(inBinding: SequencerBindingProxy): Boolean

    @JsName("GetTracks")
    public fun getTracks(inBinding: SequencerBindingProxy): Array<MovieSceneTrack>

    @JsName("GetPossessedObjectClass")
    public fun getPossessedObjectClass(inBinding: SequencerBindingProxy): UnrealEngineClass

    @JsName("GetParent")
    public fun getParent(inBinding: SequencerBindingProxy): SequencerBindingProxy

    @JsName("GetObjectTemplate")
    public fun getObjectTemplate(inBinding: SequencerBindingProxy): UObject

    @JsName("GetName")
    public fun getName(inBinding: SequencerBindingProxy): String

    @JsName("GetId")
    public fun getId(inBinding: SequencerBindingProxy): Guid

    @JsName("GetDisplayName")
    public fun getDisplayName(inBinding: SequencerBindingProxy): String

    @JsName("GetChildPossessables")
    public fun getChildPossessables(inBinding: SequencerBindingProxy): Array<SequencerBindingProxy>

    @JsName("FindTracksByType")
    public fun findTracksByType(inBinding: SequencerBindingProxy, trackType: UnrealEngineClass):
        Array<MovieSceneTrack>

    @JsName("FindTracksByExactType")
    public fun findTracksByExactType(inBinding: SequencerBindingProxy,
        trackType: UnrealEngineClass): Array<MovieSceneTrack>

    @JsName("AddTrack")
    public fun addTrack(inBinding: SequencerBindingProxy, trackType: UnrealEngineClass):
        MovieSceneTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneBindingExtensions

    @JsName("C")
    public fun copy(other: Any): MovieSceneBindingExtensions
  }
}

public open external class MovieSceneEventTrackExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEventTrackExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEventTrackExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEventTrackExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEventTrackExtensions

    @JsName("GetBoundObjectPropertyClass")
    public fun getBoundObjectPropertyClass(eventKey: MovieSceneEvent): UnrealEngineClass

    @JsName("AddEventTriggerSection")
    public fun addEventTriggerSection(inTrack: MovieSceneEventTrack): MovieSceneEventTriggerSection

    @JsName("AddEventRepeaterSection")
    public fun addEventRepeaterSection(inTrack: MovieSceneEventTrack):
        MovieSceneEventRepeaterSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventTrackExtensions

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventTrackExtensions
  }
}

public open external class MovieSceneFolderExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFolderExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFolderExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFolderExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFolderExtensions

    @JsName("SetFolderName")
    public fun setFolderName(folder: MovieSceneFolder, inFolderName: String): Boolean

    @JsName("SetFolderColor")
    public fun setFolderColor(folder: MovieSceneFolder, inFolderColor: Color): Boolean

    @JsName("RemoveChildObjectBinding")
    public fun removeChildObjectBinding(folder: MovieSceneFolder,
        inObjectBinding: SequencerBindingProxy): Boolean

    @JsName("RemoveChildMasterTrack")
    public fun removeChildMasterTrack(folder: MovieSceneFolder, inMasterTrack: MovieSceneTrack):
        Boolean

    @JsName("RemoveChildFolder")
    public fun removeChildFolder(targetFolder: MovieSceneFolder, folderToRemove: MovieSceneFolder):
        Boolean

    @JsName("GetFolderName")
    public fun getFolderName(folder: MovieSceneFolder): String

    @JsName("GetFolderColor")
    public fun getFolderColor(folder: MovieSceneFolder): Color

    @JsName("GetChildObjectBindings")
    public fun getChildObjectBindings(folder: MovieSceneFolder): Array<SequencerBindingProxy>

    @JsName("GetChildMasterTracks")
    public fun getChildMasterTracks(folder: MovieSceneFolder): Array<MovieSceneTrack>

    @JsName("GetChildFolders")
    public fun getChildFolders(folder: MovieSceneFolder): Array<MovieSceneFolder>

    @JsName("AddChildObjectBinding")
    public fun addChildObjectBinding(folder: MovieSceneFolder,
        inObjectBinding: SequencerBindingProxy): Boolean

    @JsName("AddChildMasterTrack")
    public fun addChildMasterTrack(folder: MovieSceneFolder, inMasterTrack: MovieSceneTrack):
        Boolean

    @JsName("AddChildFolder")
    public fun addChildFolder(targetFolder: MovieSceneFolder, folderToAdd: MovieSceneFolder):
        Boolean

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFolderExtensions

    @JsName("C")
    public fun copy(other: Any): MovieSceneFolderExtensions
  }
}

public open external class MovieScenePropertyTrackExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePropertyTrackExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePropertyTrackExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePropertyTrackExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePropertyTrackExtensions

    @JsName("SetPropertyNameAndPath")
    public fun setPropertyNameAndPath(
      track: MovieScenePropertyTrack,
      inPropertyName: String,
      inPropertyPath: String,
    ): Unit

    @JsName("SetObjectPropertyClass")
    public fun setObjectPropertyClass(track: MovieSceneObjectPropertyTrack,
        propertyClass: UnrealEngineClass): Unit

    @JsName("GetUniqueTrackName")
    public fun getUniqueTrackName(track: MovieScenePropertyTrack): String

    @JsName("GetPropertyPath")
    public fun getPropertyPath(track: MovieScenePropertyTrack): String

    @JsName("GetPropertyName")
    public fun getPropertyName(track: MovieScenePropertyTrack): String

    @JsName("GetObjectPropertyClass")
    public fun getObjectPropertyClass(track: MovieSceneObjectPropertyTrack): UnrealEngineClass

    @JsName("C")
    public fun copy(other: UObject): MovieScenePropertyTrackExtensions

    @JsName("C")
    public fun copy(other: Any): MovieScenePropertyTrackExtensions
  }
}

public open external class MovieSceneScriptingKey(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingKey
  }
}

public open external class MovieSceneScriptingActorReferenceKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: MovieSceneObjectBindingId): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("GetValue")
  public open fun getValue(): MovieSceneObjectBindingId

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingActorReferenceKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingActorReferenceKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingActorReferenceKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingActorReferenceKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingActorReferenceKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingActorReferenceKey
  }
}

public open external class MovieSceneScriptingActorReferenceChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("SetDefault")
  public open fun setDefault(inDefaultValue: MovieSceneObjectBindingId): Unit

  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("RemoveDefault")
  public open fun removeDefault(): Unit

  @JsName("HasDefault")
  public open fun hasDefault(): Boolean

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("GetDefault")
  public open fun getDefault(): MovieSceneObjectBindingId

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: MovieSceneObjectBindingId,
    subFrame: Number,
    timeUnit: String,
  ): MovieSceneScriptingActorReferenceKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingActorReferenceChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingActorReferenceChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingActorReferenceChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingActorReferenceChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingActorReferenceChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingActorReferenceChannel
  }
}

public open external class MovieSceneScriptingBoolKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: Boolean): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("GetValue")
  public open fun getValue(): Boolean

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingBoolKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingBoolKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingBoolKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingBoolKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingBoolKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingBoolKey
  }
}

public open external class MovieSceneScriptingBoolChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("SetDefault")
  public open fun setDefault(inDefaultValue: Boolean): Unit

  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("RemoveDefault")
  public open fun removeDefault(): Unit

  @JsName("HasDefault")
  public open fun hasDefault(): Boolean

  @JsName("GetNumKeys")
  public open fun getNumKeys(): Number

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("GetDefault")
  public open fun getDefault(): Boolean

  @JsName("EvaluateKeys")
  public open fun evaluateKeys(range: SequencerScriptingRange, frameRate: FrameRate): Array<Boolean>

  @JsName("ComputeEffectiveRange")
  public open fun computeEffectiveRange(): SequencerScriptingRange

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: Boolean,
    subFrame: Number,
    timeUnit: String,
  ): MovieSceneScriptingBoolKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingBoolChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingBoolChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingBoolChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingBoolChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingBoolChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingBoolChannel
  }
}

public open external class MovieSceneScriptingByteKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: Number): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("GetValue")
  public open fun getValue(): Number

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingByteKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingByteKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingByteKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingByteKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingByteKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingByteKey
  }
}

public open external class MovieSceneScriptingByteChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("SetDefault")
  public open fun setDefault(inDefaultValue: Number): Unit

  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("RemoveDefault")
  public open fun removeDefault(): Unit

  @JsName("HasDefault")
  public open fun hasDefault(): Boolean

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("GetDefault")
  public open fun getDefault(): Number

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: Number,
    subFrame: Number,
    timeUnit: String,
    inInterpolation: String,
  ): MovieSceneScriptingByteKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingByteChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingByteChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingByteChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingByteChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingByteChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingByteChannel
  }
}

public open external class MovieSceneScriptingDoubleKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: Any): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("SetTangentWeightMode")
  public open fun setTangentWeightMode(inNewValue: String): Unit

  @JsName("SetTangentMode")
  public open fun setTangentMode(inNewValue: String): Unit

  @JsName("SetLeaveTangentWeight")
  public open fun setLeaveTangentWeight(inNewValue: Number): Unit

  @JsName("SetLeaveTangent")
  public open fun setLeaveTangent(inNewValue: Number): Unit

  @JsName("SetInterpolationMode")
  public open fun setInterpolationMode(inNewValue: String): Unit

  @JsName("SetArriveTangentWeight")
  public open fun setArriveTangentWeight(inNewValue: Number): Unit

  @JsName("SetArriveTangent")
  public open fun setArriveTangent(inNewValue: Number): Unit

  @JsName("GetValue")
  public open fun getValue(): Any

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  @JsName("GetTangentWeightMode")
  public open fun getTangentWeightMode(): String

  @JsName("GetTangentMode")
  public open fun getTangentMode(): String

  @JsName("GetLeaveTangentWeight")
  public open fun getLeaveTangentWeight(): Number

  @JsName("GetLeaveTangent")
  public open fun getLeaveTangent(): Number

  @JsName("GetInterpolationMode")
  public open fun getInterpolationMode(): String

  @JsName("GetArriveTangentWeight")
  public open fun getArriveTangentWeight(): Number

  @JsName("GetArriveTangent")
  public open fun getArriveTangent(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingDoubleKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingDoubleKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingDoubleKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingDoubleKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingDoubleKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingDoubleKey
  }
}

public open external class MovieSceneScriptingDoubleChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("SetPreInfinityExtrapolation")
  public open fun setPreInfinityExtrapolation(inExtrapolation: String): Unit

  @JsName("SetPostInfinityExtrapolation")
  public open fun setPostInfinityExtrapolation(inExtrapolation: String): Unit

  @JsName("SetDefault")
  public open fun setDefault(inDefaultValue: Any): Unit

  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("RemoveDefault")
  public open fun removeDefault(): Unit

  @JsName("HasDefault")
  public open fun hasDefault(): Boolean

  @JsName("GetPreInfinityExtrapolation")
  public open fun getPreInfinityExtrapolation(): String

  @JsName("GetPostInfinityExtrapolation")
  public open fun getPostInfinityExtrapolation(): String

  @JsName("GetNumKeys")
  public open fun getNumKeys(): Number

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("GetDefault")
  public open fun getDefault(): Any

  @JsName("EvaluateKeys")
  public open fun evaluateKeys(range: SequencerScriptingRange, frameRate: FrameRate): Array<Any>

  @JsName("ComputeEffectiveRange")
  public open fun computeEffectiveRange(): SequencerScriptingRange

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: Any,
    subFrame: Number,
    timeUnit: String,
    inInterpolation: String,
  ): MovieSceneScriptingDoubleKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingDoubleChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingDoubleChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingDoubleChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingDoubleChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingDoubleChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingDoubleChannel
  }
}

public open external class MovieSceneScriptingEventKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: MovieSceneEvent): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("GetValue")
  public open fun getValue(): MovieSceneEvent

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingEventKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingEventKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingEventKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingEventKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingEventKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingEventKey
  }
}

public open external class MovieSceneScriptingEventChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: MovieSceneEvent,
    subFrame: Number,
    timeUnit: String,
  ): MovieSceneScriptingEventKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingEventChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingEventChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingEventChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingEventChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingEventChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingEventChannel
  }
}

public open external class MovieSceneScriptingFloatKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: Number): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("SetTangentWeightMode")
  public open fun setTangentWeightMode(inNewValue: String): Unit

  @JsName("SetTangentMode")
  public open fun setTangentMode(inNewValue: String): Unit

  @JsName("SetLeaveTangentWeight")
  public open fun setLeaveTangentWeight(inNewValue: Number): Unit

  @JsName("SetLeaveTangent")
  public open fun setLeaveTangent(inNewValue: Number): Unit

  @JsName("SetInterpolationMode")
  public open fun setInterpolationMode(inNewValue: String): Unit

  @JsName("SetArriveTangentWeight")
  public open fun setArriveTangentWeight(inNewValue: Number): Unit

  @JsName("SetArriveTangent")
  public open fun setArriveTangent(inNewValue: Number): Unit

  @JsName("GetValue")
  public open fun getValue(): Number

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  @JsName("GetTangentWeightMode")
  public open fun getTangentWeightMode(): String

  @JsName("GetTangentMode")
  public open fun getTangentMode(): String

  @JsName("GetLeaveTangentWeight")
  public open fun getLeaveTangentWeight(): Number

  @JsName("GetLeaveTangent")
  public open fun getLeaveTangent(): Number

  @JsName("GetInterpolationMode")
  public open fun getInterpolationMode(): String

  @JsName("GetArriveTangentWeight")
  public open fun getArriveTangentWeight(): Number

  @JsName("GetArriveTangent")
  public open fun getArriveTangent(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingFloatKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingFloatKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingFloatKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingFloatKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingFloatKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingFloatKey
  }
}

public open external class MovieSceneScriptingActualFloatKey(
  outer: UObject,
) : MovieSceneScriptingFloatKey {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingActualFloatKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingActualFloatKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingActualFloatKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingActualFloatKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingActualFloatKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingActualFloatKey
  }
}

public open external class MovieSceneScriptingDoubleAsFloatKey(
  outer: UObject,
) : MovieSceneScriptingFloatKey {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingDoubleAsFloatKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingDoubleAsFloatKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingDoubleAsFloatKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingDoubleAsFloatKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingDoubleAsFloatKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingDoubleAsFloatKey
  }
}

public open external class MovieSceneScriptingFloatChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("SetPreInfinityExtrapolation")
  public open fun setPreInfinityExtrapolation(inExtrapolation: String): Unit

  @JsName("SetPostInfinityExtrapolation")
  public open fun setPostInfinityExtrapolation(inExtrapolation: String): Unit

  @JsName("SetDefault")
  public open fun setDefault(inDefaultValue: Number): Unit

  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("RemoveDefault")
  public open fun removeDefault(): Unit

  @JsName("HasDefault")
  public open fun hasDefault(): Boolean

  @JsName("GetPreInfinityExtrapolation")
  public open fun getPreInfinityExtrapolation(): String

  @JsName("GetPostInfinityExtrapolation")
  public open fun getPostInfinityExtrapolation(): String

  @JsName("GetNumKeys")
  public open fun getNumKeys(): Number

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("GetDefault")
  public open fun getDefault(): Number

  @JsName("EvaluateKeys")
  public open fun evaluateKeys(range: SequencerScriptingRange, frameRate: FrameRate): Array<Number>

  @JsName("ComputeEffectiveRange")
  public open fun computeEffectiveRange(): SequencerScriptingRange

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: Number,
    subFrame: Number,
    timeUnit: String,
    inInterpolation: String,
  ): MovieSceneScriptingFloatKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingFloatChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingFloatChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingFloatChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingFloatChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingFloatChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingFloatChannel
  }
}

public open external class MovieSceneScriptingIntegerKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: Number): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("GetValue")
  public open fun getValue(): Number

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingIntegerKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingIntegerKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingIntegerKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingIntegerKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingIntegerKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingIntegerKey
  }
}

public open external class MovieSceneScriptingIntegerChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("SetDefault")
  public open fun setDefault(inDefaultValue: Number): Unit

  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("RemoveDefault")
  public open fun removeDefault(): Unit

  @JsName("HasDefault")
  public open fun hasDefault(): Boolean

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("GetDefault")
  public open fun getDefault(): Number

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: Number,
    subFrame: Number,
    timeUnit: String,
  ): MovieSceneScriptingIntegerKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingIntegerChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingIntegerChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingIntegerChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingIntegerChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingIntegerChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingIntegerChannel
  }
}

public open external class MovieSceneScriptingObjectPathKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: UObject): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("GetValue")
  public open fun getValue(): UObject

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingObjectPathKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingObjectPathKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingObjectPathKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingObjectPathKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingObjectPathKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingObjectPathKey
  }
}

public open external class MovieSceneScriptingObjectPathChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("SetDefault")
  public open fun setDefault(inDefaultValue: UObject): Unit

  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("RemoveDefault")
  public open fun removeDefault(): Unit

  @JsName("HasDefault")
  public open fun hasDefault(): Boolean

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("GetDefault")
  public open fun getDefault(): UObject

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: UObject,
    subFrame: Number,
    timeUnit: String,
  ): MovieSceneScriptingObjectPathKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingObjectPathChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingObjectPathChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingObjectPathChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingObjectPathChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingObjectPathChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingObjectPathChannel
  }
}

public open external class MovieSceneScriptingStringKey(
  outer: UObject,
) : MovieSceneScriptingKey {
  @JsName("SetValue")
  public open fun setValue(inNewValue: String): Unit

  @JsName("SetTime")
  public open fun setTime(
    newFrameNumber: FrameNumber,
    subFrame: Number,
    timeUnit: String,
  ): Unit

  @JsName("GetValue")
  public open fun getValue(): String

  @JsName("GetTime")
  public open fun getTime(timeUnit: String): FrameTime

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingStringKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingStringKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingStringKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingStringKey

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingStringKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingStringKey
  }
}

public open external class MovieSceneScriptingStringChannel(
  outer: UObject,
) : MovieSceneScriptingChannel {
  @JsName("SetDefault")
  public open fun setDefault(inDefaultValue: String): Unit

  @JsName("RemoveKey")
  public open fun removeKey(key: MovieSceneScriptingKey): Unit

  @JsName("RemoveDefault")
  public open fun removeDefault(): Unit

  @JsName("HasDefault")
  public open fun hasDefault(): Boolean

  @JsName("GetKeys")
  public open fun getKeys(): Array<MovieSceneScriptingKey>

  @JsName("GetDefault")
  public open fun getDefault(): String

  @JsName("AddKey")
  public open fun addKey(
    inTime: FrameNumber,
    newValue: String,
    subFrame: Number,
    timeUnit: String,
  ): MovieSceneScriptingStringKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingStringChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingStringChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingStringChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingStringChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingStringChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingStringChannel
  }
}

public open external class MovieSceneSectionExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSectionExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSectionExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSectionExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSectionExtensions

    @JsName("SetStartFrameSeconds")
    public fun setStartFrameSeconds(section: MovieSceneSection, startTime: Number): Unit

    @JsName("SetStartFrameBounded")
    public fun setStartFrameBounded(section: MovieSceneSection, isBounded: Boolean): Unit

    @JsName("SetStartFrame")
    public fun setStartFrame(section: MovieSceneSection, startFrame: Number): Unit

    @JsName("SetRangeSeconds")
    public fun setRangeSeconds(
      section: MovieSceneSection,
      startTime: Number,
      endTime: Number,
    ): Unit

    @JsName("SetRange")
    public fun setRange(
      section: MovieSceneSection,
      startFrame: Number,
      endFrame: Number,
    ): Unit

    @JsName("SetEndFrameSeconds")
    public fun setEndFrameSeconds(section: MovieSceneSection, endTime: Number): Unit

    @JsName("SetEndFrameBounded")
    public fun setEndFrameBounded(section: MovieSceneSection, isBounded: Boolean): Unit

    @JsName("SetEndFrame")
    public fun setEndFrame(section: MovieSceneSection, endFrame: Number): Unit

    @JsName("HasStartFrame")
    public fun hasStartFrame(section: MovieSceneSection): Boolean

    @JsName("HasEndFrame")
    public fun hasEndFrame(section: MovieSceneSection): Boolean

    @JsName("GetStartFrameSeconds")
    public fun getStartFrameSeconds(section: MovieSceneSection): Number

    @JsName("GetStartFrame")
    public fun getStartFrame(section: MovieSceneSection): Number

    @JsName("GetParentSequenceFrame")
    public fun getParentSequenceFrame(
      section: MovieSceneSubSection,
      inFrame: Number,
      parentSequence: MovieSceneSequence,
    ): Number

    @JsName("GetEndFrameSeconds")
    public fun getEndFrameSeconds(section: MovieSceneSection): Number

    @JsName("GetEndFrame")
    public fun getEndFrame(section: MovieSceneSection): Number

    @JsName("GetChannelsByType")
    public fun getChannelsByType(section: MovieSceneSection, channelType: UnrealEngineClass):
        Array<MovieSceneScriptingChannel>

    @JsName("GetChannels")
    public fun getChannels(section: MovieSceneSection): Array<MovieSceneScriptingChannel>

    @JsName("GetAllChannels")
    public fun getAllChannels(section: MovieSceneSection): Array<MovieSceneScriptingChannel>

    @JsName("FindChannelsByType")
    public fun findChannelsByType(section: MovieSceneSection, channelType: UnrealEngineClass):
        Array<MovieSceneScriptingChannel>

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSectionExtensions

    @JsName("C")
    public fun copy(other: Any): MovieSceneSectionExtensions
  }
}

public open external class MovieSceneSequenceExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSequenceExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSequenceExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSequenceExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSequenceExtensions

    @JsName("SortMarkedFrames")
    public fun sortMarkedFrames(sequence: MovieSceneSequence): Unit

    @JsName("SetWorkRangeStart")
    public fun setWorkRangeStart(inSequence: MovieSceneSequence, startTimeInSeconds: Number): Unit

    @JsName("SetWorkRangeEnd")
    public fun setWorkRangeEnd(inSequence: MovieSceneSequence, endTimeInSeconds: Number): Unit

    @JsName("SetViewRangeStart")
    public fun setViewRangeStart(inSequence: MovieSceneSequence, startTimeInSeconds: Number): Unit

    @JsName("SetViewRangeEnd")
    public fun setViewRangeEnd(inSequence: MovieSceneSequence, endTimeInSeconds: Number): Unit

    @JsName("SetTickResolutionDirectly")
    public fun setTickResolutionDirectly(sequence: MovieSceneSequence, tickResolution: FrameRate):
        Unit

    @JsName("SetTickResolution")
    public fun setTickResolution(sequence: MovieSceneSequence, tickResolution: FrameRate): Unit

    @JsName("SetReadOnly")
    public fun setReadOnly(sequence: MovieSceneSequence, inReadOnly: Boolean): Unit

    @JsName("SetPlaybackStartSeconds")
    public fun setPlaybackStartSeconds(sequence: MovieSceneSequence, startTime: Number): Unit

    @JsName("SetPlaybackStart")
    public fun setPlaybackStart(sequence: MovieSceneSequence, startFrame: Number): Unit

    @JsName("SetPlaybackEndSeconds")
    public fun setPlaybackEndSeconds(sequence: MovieSceneSequence, endTime: Number): Unit

    @JsName("SetPlaybackEnd")
    public fun setPlaybackEnd(sequence: MovieSceneSequence, endFrame: Number): Unit

    @JsName("SetMarkedFrame")
    public fun setMarkedFrame(
      sequence: MovieSceneSequence,
      inMarkIndex: Number,
      inFrameNumber: FrameNumber,
    ): Unit

    @JsName("SetEvaluationType")
    public fun setEvaluationType(inSequence: MovieSceneSequence, inEvaluationType: String): Unit

    @JsName("SetDisplayRate")
    public fun setDisplayRate(sequence: MovieSceneSequence, displayRate: FrameRate): Unit

    @JsName("SetClockSource")
    public fun setClockSource(inSequence: MovieSceneSequence, inClockSource: String): Unit

    @JsName("ResolveBindingID")
    public fun resolveBindingId(masterSequence: MovieSceneSequence,
        inObjectBindingId: MovieSceneObjectBindingId): SequencerBindingProxy

    @JsName("RemoveMasterTrack")
    public fun removeMasterTrack(sequence: MovieSceneSequence, masterTrack: MovieSceneTrack):
        Boolean

    @JsName("MakeRangeSeconds")
    public fun makeRangeSeconds(
      sequence: MovieSceneSequence,
      startTime: Number,
      duration: Number,
    ): SequencerScriptingRange

    @JsName("MakeRange")
    public fun makeRange(
      sequence: MovieSceneSequence,
      startFrame: Number,
      duration: Number,
    ): SequencerScriptingRange

    @JsName("MakeBindingID")
    public fun makeBindingId(
      masterSequence: MovieSceneSequence,
      inBinding: SequencerBindingProxy,
      space: String,
    ): MovieSceneObjectBindingId

    @JsName("LocateBoundObjects")
    public fun locateBoundObjects(
      sequence: MovieSceneSequence,
      inBinding: SequencerBindingProxy,
      context: UObject,
    ): Array<UObject>

    @JsName("IsReadOnly")
    public fun isReadOnly(sequence: MovieSceneSequence): Boolean

    @JsName("GetWorkRangeStart")
    public fun getWorkRangeStart(inSequence: MovieSceneSequence): Number

    @JsName("GetWorkRangeEnd")
    public fun getWorkRangeEnd(inSequence: MovieSceneSequence): Number

    @JsName("GetViewRangeStart")
    public fun getViewRangeStart(inSequence: MovieSceneSequence): Number

    @JsName("GetViewRangeEnd")
    public fun getViewRangeEnd(inSequence: MovieSceneSequence): Number

    @JsName("GetTimecodeSource")
    public fun getTimecodeSource(sequence: MovieSceneSequence): Timecode

    @JsName("GetTickResolution")
    public fun getTickResolution(sequence: MovieSceneSequence): FrameRate

    @JsName("GetSpawnables")
    public fun getSpawnables(sequence: MovieSceneSequence): Array<SequencerBindingProxy>

    @JsName("GetRootFoldersInSequence")
    public fun getRootFoldersInSequence(sequence: MovieSceneSequence): Array<MovieSceneFolder>

    @JsName("GetPossessables")
    public fun getPossessables(sequence: MovieSceneSequence): Array<SequencerBindingProxy>

    @JsName("GetPortableBindingID")
    public fun getPortableBindingId(
      masterSequence: MovieSceneSequence,
      destinationSequence: MovieSceneSequence,
      inBinding: SequencerBindingProxy,
    ): MovieSceneObjectBindingId

    @JsName("GetPlaybackStartSeconds")
    public fun getPlaybackStartSeconds(sequence: MovieSceneSequence): Number

    @JsName("GetPlaybackStart")
    public fun getPlaybackStart(sequence: MovieSceneSequence): Number

    @JsName("GetPlaybackRange")
    public fun getPlaybackRange(sequence: MovieSceneSequence): SequencerScriptingRange

    @JsName("GetPlaybackEndSeconds")
    public fun getPlaybackEndSeconds(sequence: MovieSceneSequence): Number

    @JsName("GetPlaybackEnd")
    public fun getPlaybackEnd(sequence: MovieSceneSequence): Number

    @JsName("GetMovieScene")
    public fun getMovieScene(sequence: MovieSceneSequence): MovieScene

    @JsName("GetMasterTracks")
    public fun getMasterTracks(sequence: MovieSceneSequence): Array<MovieSceneTrack>

    @JsName("GetMarkedFrames")
    public fun getMarkedFrames(sequence: MovieSceneSequence): Array<MovieSceneMarkedFrame>

    @JsName("GetEvaluationType")
    public fun getEvaluationType(inSequence: MovieSceneSequence): String

    @JsName("GetDisplayRate")
    public fun getDisplayRate(sequence: MovieSceneSequence): FrameRate

    @JsName("GetClockSource")
    public fun getClockSource(inSequence: MovieSceneSequence): String

    @JsName("GetBindings")
    public fun getBindings(sequence: MovieSceneSequence): Array<SequencerBindingProxy>

    @JsName("GetBindingID")
    public fun getBindingId(inBinding: SequencerBindingProxy): MovieSceneObjectBindingId

    @JsName("FindNextMarkedFrame")
    public fun findNextMarkedFrame(
      sequence: MovieSceneSequence,
      inFrameNumber: FrameNumber,
      forward: Boolean,
    ): Number

    @JsName("FindMasterTracksByType")
    public fun findMasterTracksByType(sequence: MovieSceneSequence, trackType: UnrealEngineClass):
        Array<MovieSceneTrack>

    @JsName("FindMasterTracksByExactType")
    public fun findMasterTracksByExactType(sequence: MovieSceneSequence,
        trackType: UnrealEngineClass): Array<MovieSceneTrack>

    @JsName("FindMarkedFrameByLabel")
    public fun findMarkedFrameByLabel(sequence: MovieSceneSequence, inLabel: String): Number

    @JsName("FindMarkedFrameByFrameNumber")
    public fun findMarkedFrameByFrameNumber(sequence: MovieSceneSequence,
        inFrameNumber: FrameNumber): Number

    @JsName("FindBindingByName")
    public fun findBindingByName(sequence: MovieSceneSequence, name: String): SequencerBindingProxy

    @JsName("FindBindingById")
    public fun findBindingById(sequence: MovieSceneSequence, bindingId: Guid): SequencerBindingProxy

    @JsName("DeleteMarkedFrames")
    public fun deleteMarkedFrames(sequence: MovieSceneSequence): Unit

    @JsName("DeleteMarkedFrame")
    public fun deleteMarkedFrame(sequence: MovieSceneSequence, deleteIndex: Number): Unit

    @JsName("AddSpawnableFromInstance")
    public fun addSpawnableFromInstance(sequence: MovieSceneSequence, objectToSpawn: UObject):
        SequencerBindingProxy

    @JsName("AddSpawnableFromClass")
    public fun addSpawnableFromClass(sequence: MovieSceneSequence, classToSpawn: UnrealEngineClass):
        SequencerBindingProxy

    @JsName("AddRootFolderToSequence")
    public fun addRootFolderToSequence(sequence: MovieSceneSequence, newFolderName: String):
        MovieSceneFolder

    @JsName("AddPossessable")
    public fun addPossessable(sequence: MovieSceneSequence, objectToPossess: UObject):
        SequencerBindingProxy

    @JsName("AddMasterTrack")
    public fun addMasterTrack(sequence: MovieSceneSequence, trackType: UnrealEngineClass):
        MovieSceneTrack

    @JsName("AddMarkedFrame")
    public fun addMarkedFrame(sequence: MovieSceneSequence, inMarkedFrame: MovieSceneMarkedFrame):
        Number

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceExtensions

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceExtensions
  }
}

public open external class MovieSceneTrackExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTrackExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTrackExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTrackExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTrackExtensions

    @JsName("SetTrackRowDisplayName")
    public fun setTrackRowDisplayName(
      track: MovieSceneTrack,
      inName: String,
      rowIndex: Number,
    ): Unit

    @JsName("SetSortingOrder")
    public fun setSortingOrder(track: MovieSceneTrack, sortingOrder: Number): Unit

    @JsName("SetSectionToKey")
    public fun setSectionToKey(track: MovieSceneTrack, section: MovieSceneSection): Unit

    @JsName("SetDisplayName")
    public fun setDisplayName(track: MovieSceneTrack, inName: String): Unit

    @JsName("SetColorTint")
    public fun setColorTint(track: MovieSceneTrack, colorTint: Color): Unit

    @JsName("RemoveSection")
    public fun removeSection(track: MovieSceneTrack, section: MovieSceneSection): Unit

    @JsName("GetTrackRowDisplayName")
    public fun getTrackRowDisplayName(track: MovieSceneTrack, rowIndex: Number): String

    @JsName("GetSortingOrder")
    public fun getSortingOrder(track: MovieSceneTrack): Number

    @JsName("GetSectionToKey")
    public fun getSectionToKey(track: MovieSceneTrack): MovieSceneSection

    @JsName("GetSections")
    public fun getSections(track: MovieSceneTrack): Array<MovieSceneSection>

    @JsName("GetDisplayName")
    public fun getDisplayName(track: MovieSceneTrack): String

    @JsName("GetColorTint")
    public fun getColorTint(track: MovieSceneTrack): Color

    @JsName("AddSection")
    public fun addSection(track: MovieSceneTrack): MovieSceneSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackExtensions

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackExtensions
  }
}

public open external class MovieSceneFloatVectorTrackExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFloatVectorTrackExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFloatVectorTrackExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFloatVectorTrackExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFloatVectorTrackExtensions

    @JsName("SetNumChannelsUsed")
    public fun setNumChannelsUsed(track: MovieSceneFloatVectorTrack, inNumChannelsUsed: Number):
        Unit

    @JsName("GetNumChannelsUsed")
    public fun getNumChannelsUsed(track: MovieSceneFloatVectorTrack): Number

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatVectorTrackExtensions

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatVectorTrackExtensions
  }
}

public open external class MovieSceneDoubleVectorTrackExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneDoubleVectorTrackExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneDoubleVectorTrackExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneDoubleVectorTrackExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneDoubleVectorTrackExtensions

    @JsName("SetNumChannelsUsed")
    public fun setNumChannelsUsed(track: MovieSceneDoubleVectorTrack, inNumChannelsUsed: Number):
        Unit

    @JsName("GetNumChannelsUsed")
    public fun getNumChannelsUsed(track: MovieSceneDoubleVectorTrack): Number

    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoubleVectorTrackExtensions

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoubleVectorTrackExtensions
  }
}

public open external class SequencerScriptingRangeExtensions(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerScriptingRangeExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerScriptingRangeExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerScriptingRangeExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerScriptingRangeExtensions

    @JsName("SetStartSeconds")
    public fun setStartSeconds(range: SequencerScriptingRange, start: Number): RangeProvider

    @JsName("SetStartFrame")
    public fun setStartFrame(range: SequencerScriptingRange, start: Number): RangeProvider

    @JsName("SetEndSeconds")
    public fun setEndSeconds(range: SequencerScriptingRange, end: Number): RangeProvider

    @JsName("SetEndFrame")
    public fun setEndFrame(range: SequencerScriptingRange, end: Number): RangeProvider

    @JsName("RemoveStart")
    public fun removeStart(range: SequencerScriptingRange): RangeProvider

    @JsName("RemoveEnd")
    public fun removeEnd(range: SequencerScriptingRange): RangeProvider

    @JsName("HasStart")
    public fun hasStart(range: SequencerScriptingRange): Boolean

    @JsName("HasEnd")
    public fun hasEnd(range: SequencerScriptingRange): Boolean

    @JsName("GetStartSeconds")
    public fun getStartSeconds(range: SequencerScriptingRange): Number

    @JsName("GetStartFrame")
    public fun getStartFrame(range: SequencerScriptingRange): Number

    @JsName("GetEndSeconds")
    public fun getEndSeconds(range: SequencerScriptingRange): Number

    @JsName("GetEndFrame")
    public fun getEndFrame(range: SequencerScriptingRange): Number

    @JsName("C")
    public fun copy(other: UObject): SequencerScriptingRangeExtensions

    @JsName("C")
    public fun copy(other: Any): SequencerScriptingRangeExtensions
  }
}

public open external class SequencerChannelProxy {
  @JsName("ChannelName")
  public open var channelName: String

  @JsName("Section")
  public open var section: MovieSceneSection

  public open fun clone(): SequencerChannelProxy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SequencerChannelProxy

    @JsName("C")
    public fun copy(other: Any): SequencerChannelProxy
  }
}

public open external class LevelSequenceEditorBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceEditorBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceEditorBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceEditorBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceEditorBlueprintLibrary

    @JsName("SetTrackFilterEnabled")
    public fun setTrackFilterEnabled(trackFilterName: String, enabled: Boolean): Unit

    @JsName("SetSelectionRangeStart")
    public fun setSelectionRangeStart(newFrame: Number): Unit

    @JsName("SetSelectionRangeEnd")
    public fun setSelectionRangeEnd(newFrame: Number): Unit

    @JsName("SetRandomColorForChannels")
    public fun setRandomColorForChannels(`class`: UnrealEngineClass, identifiers: Array<String>):
        Unit

    @JsName("SetLockLevelSequence")
    public fun setLockLevelSequence(lock: Boolean): Unit

    @JsName("SetLockCameraCutToViewport")
    public fun setLockCameraCutToViewport(lock: Boolean): Unit

    @JsName("SetCustomColorForChannels")
    public fun setCustomColorForChannels(
      `class`: UnrealEngineClass,
      identifiers: Array<String>,
      newColors: Array<LinearColor>,
    ): Unit

    @JsName("SetCustomColorForChannel")
    public fun setCustomColorForChannel(
      `class`: UnrealEngineClass,
      identifier: String,
      newColor: LinearColor,
    ): Unit

    @JsName("SetCurrentTime")
    public fun setCurrentTime(newFrame: Number): Unit

    @JsName("SetCurrentLocalTime")
    public fun setCurrentLocalTime(newFrame: Number): Unit

    @JsName("SelectTracks")
    public fun selectTracks(tracks: Array<MovieSceneTrack>): Unit

    @JsName("SelectSections")
    public fun selectSections(sections: Array<MovieSceneSection>): Unit

    @JsName("SelectObjects")
    public fun selectObjects(objectBinding: Array<Guid>): Unit

    @JsName("SelectFolders")
    public fun selectFolders(folders: Array<MovieSceneFolder>): Unit

    @JsName("SelectChannels")
    public fun selectChannels(channels: Array<SequencerChannelProxy>): Unit

    @JsName("RefreshCurrentLevelSequence")
    public fun refreshCurrentLevelSequence(): Unit

    @JsName("PlayTo")
    public fun playTo(playbackParams: MovieSceneSequencePlaybackParams): Unit

    @JsName("Play")
    public fun play(): Unit

    @JsName("Pause")
    public fun pause(): Unit

    @JsName("OpenLevelSequence")
    public fun openLevelSequence(levelSequence: LevelSequence): Boolean

    @JsName("IsTrackFilterEnabled")
    public fun isTrackFilterEnabled(trackFilterName: String): Boolean

    @JsName("IsPlaying")
    public fun isPlaying(): Boolean

    @JsName("IsLevelSequenceLocked")
    public fun isLevelSequenceLocked(): Boolean

    @JsName("IsCameraCutLockedToViewport")
    public fun isCameraCutLockedToViewport(): Boolean

    @JsName("HasCustomColorForChannel")
    public fun hasCustomColorForChannel(`class`: UnrealEngineClass, identifier: String): Boolean

    @JsName("GetTrackFilterNames")
    public fun getTrackFilterNames(): Array<String>

    @JsName("GetSelectionRangeStart")
    public fun getSelectionRangeStart(): Number

    @JsName("GetSelectionRangeEnd")
    public fun getSelectionRangeEnd(): Number

    @JsName("GetSelectedTracks")
    public fun getSelectedTracks(): Array<MovieSceneTrack>

    @JsName("GetSelectedSections")
    public fun getSelectedSections(): Array<MovieSceneSection>

    @JsName("GetSelectedObjects")
    public fun getSelectedObjects(): Array<Guid>

    @JsName("GetSelectedFolders")
    public fun getSelectedFolders(): Array<MovieSceneFolder>

    @JsName("GetSelectedChannels")
    public fun getSelectedChannels(): Array<SequencerChannelProxy>

    @JsName("GetFocusedLevelSequence")
    public fun getFocusedLevelSequence(): LevelSequence

    @JsName("GetCustomColorForChannel")
    public fun getCustomColorForChannel(`class`: UnrealEngineClass, identifier: String): LinearColor

    @JsName("GetCurrentTime")
    public fun getCurrentTime(): Number

    @JsName("GetCurrentLocalTime")
    public fun getCurrentLocalTime(): Number

    @JsName("GetCurrentLevelSequence")
    public fun getCurrentLevelSequence(): LevelSequence

    @JsName("GetBoundObjects")
    public fun getBoundObjects(objectBinding: MovieSceneObjectBindingId): Array<UObject>

    @JsName("EmptySelection")
    public fun emptySelection(): Unit

    @JsName("DeleteColorForChannels")
    public fun deleteColorForChannels(`class`: UnrealEngineClass, identifier: String):
        IdentifierProvider

    @JsName("CloseLevelSequence")
    public fun closeLevelSequence(): Unit

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceEditorBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): LevelSequenceEditorBlueprintLibrary
  }
}

public open external class LevelSequencePropertyTrackSettings {
  @JsName("ComponentPath")
  public open var componentPath: String

  @JsName("PropertyPath")
  public open var propertyPath: String

  public open fun clone(): LevelSequencePropertyTrackSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelSequencePropertyTrackSettings

    @JsName("C")
    public fun copy(other: Any): LevelSequencePropertyTrackSettings
  }
}

public open external class LevelSequenceTrackSettings {
  @JsName("MatchingActorClass")
  public open var matchingActorClass: SoftClassPath

  @JsName("DefaultTracks")
  public open var defaultTracks: Array<SoftClassPath>

  @JsName("ExcludeDefaultTracks")
  public open var excludeDefaultTracks: Array<SoftClassPath>

  @JsName("DefaultPropertyTracks")
  public open var defaultPropertyTracks: Array<LevelSequencePropertyTrackSettings>

  @JsName("ExcludeDefaultPropertyTracks")
  public open var excludeDefaultPropertyTracks: Array<LevelSequencePropertyTrackSettings>

  public open fun clone(): LevelSequenceTrackSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelSequenceTrackSettings

    @JsName("C")
    public fun copy(other: Any): LevelSequenceTrackSettings
  }
}

public open external class LevelSequenceEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("TrackSettings")
  public open var trackSettings: Array<LevelSequenceTrackSettings>

  @JsName("bAutoBindToPIE")
  public open var autoBindToPie: Boolean

  @JsName("bAutoBindToSimulate")
  public open var autoBindToSimulate: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceEditorSettings

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceEditorSettings

    @JsName("C")
    public fun copy(other: Any): LevelSequenceEditorSettings
  }
}

public open external class LevelSequenceMasterSequenceSettings(
  outer: UObject,
) : UObject {
  @JsName("MasterSequenceName")
  public open var masterSequenceName: String

  @JsName("MasterSequenceSuffix")
  public open var masterSequenceSuffix: String

  @JsName("MasterSequenceBasePath")
  public open var masterSequenceBasePath: DirectoryPath

  @JsName("MasterSequenceNumShots")
  public open var masterSequenceNumShots: Any

  @JsName("MasterSequenceLevelSequenceToDuplicate")
  public open var masterSequenceLevelSequenceToDuplicate: Any

  @JsName("SubSequenceNames")
  public open var subSequenceNames: Array<String>

  @JsName("bInstanceSubSequences")
  public open var instanceSubSequences: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceMasterSequenceSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceMasterSequenceSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceMasterSequenceSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceMasterSequenceSettings

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceMasterSequenceSettings

    @JsName("C")
    public fun copy(other: Any): LevelSequenceMasterSequenceSettings
  }
}

public open external class MovieSceneScriptingParams {
  public open fun clone(): MovieSceneScriptingParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingParams

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingParams
  }
}

public open external class LevelSequenceEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("SyncSectionsUsingSourceTimecode")
  public open fun syncSectionsUsingSourceTimecode(sections: Array<MovieSceneSection>): Unit

  @JsName("SnapSectionsToTimelineUsingSourceTimecode")
  public open fun snapSectionsToTimelineUsingSourceTimecode(sections: Array<MovieSceneSection>):
      Unit

  @JsName("ReplaceBindingWithActors")
  public open fun replaceBindingWithActors(actors: Array<Actor>,
      objectBinding: SequencerBindingProxy): Unit

  @JsName("RemoveInvalidBindings")
  public open fun removeInvalidBindings(objectBinding: SequencerBindingProxy): Unit

  @JsName("RemoveAllBindings")
  public open fun removeAllBindings(objectBinding: SequencerBindingProxy): Unit

  @JsName("RemoveActorsFromBinding")
  public open fun removeActorsFromBinding(actors: Array<Actor>,
      objectBinding: SequencerBindingProxy): Unit

  @JsName("RebindComponent")
  public open fun rebindComponent(componentBindings: Array<SequencerBindingProxy>,
      componentName: String): Unit

  @JsName("FixActorReferences")
  public open fun fixActorReferences(): Unit

  @JsName("BakeTransform")
  public open fun bakeTransform(
    objectBindings: Array<SequencerBindingProxy>,
    bakeInTime: FrameTime,
    bakeOutTime: FrameTime,
    bakeInterval: FrameTime,
    params: MovieSceneScriptingParams,
  ): Unit

  @JsName("AddActorsToBinding")
  public open fun addActorsToBinding(actors: Array<Actor>, objectBinding: SequencerBindingProxy):
      Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): LevelSequenceEditorSubsystem
  }
}

public open external class LevelSequenceFactoryNew(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceFactoryNew

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceFactoryNew

    @JsName("C")
    public fun copy(other: Any): LevelSequenceFactoryNew
  }
}

public open external class AnimSequenceConverterFactory(
  outer: UObject,
) : AnimSequenceFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSequenceConverterFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSequenceConverterFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSequenceConverterFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSequenceConverterFactory

    @JsName("C")
    public fun copy(other: UObject): AnimSequenceConverterFactory

    @JsName("C")
    public fun copy(other: Any): AnimSequenceConverterFactory
  }
}

public open external class BakeToControlRigSettings(
  outer: UObject,
) : UObject {
  @JsName("bReduceKeys")
  public open var reduceKeys: Boolean

  @JsName("Tolerance")
  public open var tolerance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BakeToControlRigSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BakeToControlRigSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BakeToControlRigSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BakeToControlRigSettings

    @JsName("C")
    public fun copy(other: UObject): BakeToControlRigSettings

    @JsName("C")
    public fun copy(other: Any): BakeToControlRigSettings
  }
}

public open external class ControlRigArrayNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigArrayNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigArrayNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigArrayNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigArrayNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigArrayNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigArrayNodeSpawner
  }
}

@JsName("T$437")
public external interface Object437 {
  @JsName("Branches")
  public var branches: String

  @JsName("AsControlRigBlueprint")
  public var asControlRigBlueprint: ControlRigBlueprint
}

public open external class ControlRigBlueprintEditorLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigBlueprintEditorLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigBlueprintEditorLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigBlueprintEditorLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigBlueprintEditorLibrary

    @JsName("SetPreviewMesh")
    public fun setPreviewMesh(
      inRigBlueprint: ControlRigBlueprint,
      previewMesh: SkeletalMesh,
      markAsDirty: Boolean,
    ): Unit

    @JsName("RequestControlRigInit")
    public fun requestControlRigInit(inRigBlueprint: ControlRigBlueprint): Unit

    @JsName("RequestAutoVMRecompilation")
    public fun requestAutoVmRecompilation(inRigBlueprint: ControlRigBlueprint): Unit

    @JsName("RecompileVMIfRequired")
    public fun recompileVmIfRequired(inRigBlueprint: ControlRigBlueprint): Unit

    @JsName("RecompileVM")
    public fun recompileVm(inRigBlueprint: ControlRigBlueprint): Unit

    @JsName("GetPreviewMesh")
    public fun getPreviewMesh(inRigBlueprint: ControlRigBlueprint): SkeletalMesh

    @JsName("GetModel")
    public fun getModel(inRigBlueprint: ControlRigBlueprint): RigVmGraph

    @JsName("GetHierarchyController")
    public fun getHierarchyController(inRigBlueprint: ControlRigBlueprint): RigHierarchyController

    @JsName("GetHierarchy")
    public fun getHierarchy(inRigBlueprint: ControlRigBlueprint): RigHierarchy

    @JsName("GetCurrentlyOpenRigBlueprints")
    public fun getCurrentlyOpenRigBlueprints(): Array<ControlRigBlueprint>

    @JsName("GetController")
    public fun getController(inRigBlueprint: ControlRigBlueprint): RigVmController

    @JsName("GetAvailableRigUnits")
    public fun getAvailableRigUnits(): Array<Struct>

    @JsName("CastToControlRigBlueprint")
    public fun castToControlRigBlueprint(
      uObject: UObject,
      branches: String,
      asControlRigBlueprint: ControlRigBlueprint,
    ): Object437

    @JsName("C")
    public fun copy(other: UObject): ControlRigBlueprintEditorLibrary

    @JsName("C")
    public fun copy(other: Any): ControlRigBlueprintEditorLibrary
  }
}

public open external class ControlRigBlueprintFactory(
  outer: UObject,
) : Factory {
  @JsName("ParentClass")
  public open var parentClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigBlueprintFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigBlueprintFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigBlueprintFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigBlueprintFactory

    @JsName("CreateNewControlRigAsset")
    public fun createNewControlRigAsset(inDesiredPackagePath: String): ControlRigBlueprint

    @JsName("CreateControlRigFromSkeletalMeshOrSkeleton")
    public fun createControlRigFromSkeletalMeshOrSkeleton(inSelectedObject: UObject):
        ControlRigBlueprint

    @JsName("C")
    public fun copy(other: UObject): ControlRigBlueprintFactory

    @JsName("C")
    public fun copy(other: Any): ControlRigBlueprintFactory
  }
}

public open external class ControlRigBranchNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigBranchNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigBranchNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigBranchNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigBranchNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigBranchNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigBranchNodeSpawner
  }
}

public open external class ControlRigRigHierarchyToGraphDragAndDropContext {
  @JsName("DraggedElementKeys")
  public open var draggedElementKeys: Array<RigElementKey>

  public open fun clone(): ControlRigRigHierarchyToGraphDragAndDropContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigRigHierarchyToGraphDragAndDropContext

    @JsName("C")
    public fun copy(other: Any): ControlRigRigHierarchyToGraphDragAndDropContext
  }
}

public open external class ControlRigRigHierarchyDragAndDropContext {
  @JsName("DraggedElementKeys")
  public open var draggedElementKeys: Array<RigElementKey>

  @JsName("TargetElementKey")
  public open var targetElementKey: RigElementKey

  public open fun clone(): ControlRigRigHierarchyDragAndDropContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigRigHierarchyDragAndDropContext

    @JsName("C")
    public fun copy(other: Any): ControlRigRigHierarchyDragAndDropContext
  }
}

public open external class ControlRigGraphNodeContextMenuContext {
  @JsName("Graph")
  public open var graph: RigVmGraph

  @JsName("UNode")
  public open var uNode: RigVmNode

  @JsName("Pin")
  public open var pin: RigVmPin

  public open fun clone(): ControlRigGraphNodeContextMenuContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigGraphNodeContextMenuContext

    @JsName("C")
    public fun copy(other: Any): ControlRigGraphNodeContextMenuContext
  }
}

public open external class ControlRigContextMenuContext(
  outer: UObject,
) : UObject {
  @JsName("IsAltDown")
  public open fun isAltDown(): Boolean

  @JsName("GetRigHierarchyToGraphDragAndDropContext")
  public open fun getRigHierarchyToGraphDragAndDropContext():
      ControlRigRigHierarchyToGraphDragAndDropContext

  @JsName("GetRigHierarchyDragAndDropContext")
  public open fun getRigHierarchyDragAndDropContext(): ControlRigRigHierarchyDragAndDropContext

  @JsName("GetGraphNodeContextMenuContext")
  public open fun getGraphNodeContextMenuContext(): ControlRigGraphNodeContextMenuContext

  @JsName("GetControlRigBlueprint")
  public open fun getControlRigBlueprint(): ControlRigBlueprint

  @JsName("GetControlRig")
  public open fun getControlRig(): ControlRig

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigContextMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigContextMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigContextMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigContextMenuContext

    @JsName("C")
    public fun copy(other: UObject): ControlRigContextMenuContext

    @JsName("C")
    public fun copy(other: Any): ControlRigContextMenuContext
  }
}

public open external class ControlRigControlsProxy(
  outer: UObject,
) : UObject {
  @JsName("bSelected")
  public open var selected: Boolean

  @JsName("ControlName")
  public open var controlName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigControlsProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigControlsProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigControlsProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigControlsProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigControlsProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigControlsProxy
  }
}

public open external class ControlRigTransformControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  @JsName("Transform")
  public open var transform: EulerTransform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigTransformControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigTransformControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigTransformControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigTransformControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigTransformControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigTransformControlProxy
  }
}

public open external class ControlRigEulerTransformControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  @JsName("Transform")
  public open var transform: EulerTransform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigEulerTransformControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigEulerTransformControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigEulerTransformControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigEulerTransformControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigEulerTransformControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigEulerTransformControlProxy
  }
}

public open external class ControlRigTransformNoScaleControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  @JsName("Transform")
  public open var transform: TransformNoScale

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigTransformNoScaleControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigTransformNoScaleControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigTransformNoScaleControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigTransformNoScaleControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigTransformNoScaleControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigTransformNoScaleControlProxy
  }
}

public open external class ControlRigFloatControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  public open var float: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigFloatControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigFloatControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigFloatControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigFloatControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigFloatControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigFloatControlProxy
  }
}

public open external class ControlRigIntegerControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  @JsName("Integer")
  public open var integer: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigIntegerControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigIntegerControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigIntegerControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigIntegerControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigIntegerControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigIntegerControlProxy
  }
}

public open external class ControlRigEnumControlProxyValue {
  @JsName("EnumType")
  public open var enumType: Enum

  @JsName("EnumIndex")
  public open var enumIndex: Number

  public open fun clone(): ControlRigEnumControlProxyValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigEnumControlProxyValue

    @JsName("C")
    public fun copy(other: Any): ControlRigEnumControlProxyValue
  }
}

public open external class ControlRigEnumControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  @JsName("Enum")
  public open var enum: ControlRigEnumControlProxyValue

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigEnumControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigEnumControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigEnumControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigEnumControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigEnumControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigEnumControlProxy
  }
}

public open external class ControlRigVectorControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  @JsName("Vector")
  public open var vector: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigVectorControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigVectorControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigVectorControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigVectorControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigVectorControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigVectorControlProxy
  }
}

@JsName("ControlRigVector2DControlProxy")
public open external class ControlRigVector2dControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  @JsName("Vector2D")
  public open var vector2d: Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigVector2dControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigVector2dControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigVector2dControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigVector2dControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigVector2dControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigVector2dControlProxy
  }
}

public open external class ControlRigBoolControlProxy(
  outer: UObject,
) : ControlRigControlsProxy {
  public open var bool: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigBoolControlProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigBoolControlProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigBoolControlProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigBoolControlProxy

    @JsName("C")
    public fun copy(other: UObject): ControlRigBoolControlProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigBoolControlProxy
  }
}

public open external class ControlRigDetailPanelControlProxies(
  outer: UObject,
) : UObject {
  @JsName("AllProxies")
  public open var allProxies: Any

  @JsName("SelectedProxies")
  public open var selectedProxies: Array<ControlRigControlsProxy>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigDetailPanelControlProxies

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigDetailPanelControlProxies

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigDetailPanelControlProxies

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigDetailPanelControlProxies

    @JsName("C")
    public fun copy(other: UObject): ControlRigDetailPanelControlProxies

    @JsName("C")
    public fun copy(other: Any): ControlRigDetailPanelControlProxies
  }
}

public open external class ControlRigEditModeDelegateHelper(
  outer: UObject,
) : UObject {
  @JsName("PostPoseUpdate")
  public open fun postPoseUpdate(): Unit

  @JsName("OnPoseInitialized")
  public open fun onPoseInitialized(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigEditModeDelegateHelper

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigEditModeDelegateHelper

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigEditModeDelegateHelper

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigEditModeDelegateHelper

    @JsName("C")
    public fun copy(other: UObject): ControlRigEditModeDelegateHelper

    @JsName("C")
    public fun copy(other: Any): ControlRigEditModeDelegateHelper
  }
}

public open external class ControlRigEditModeSettings(
  outer: UObject,
) : UObject {
  @JsName("bDisplayHierarchy")
  public open var displayHierarchy: Boolean

  @JsName("bDisplayNulls")
  public open var displayNulls: Boolean

  @JsName("bHideControlShapes")
  public open var hideControlShapes: Boolean

  @JsName("bDisplayAxesOnSelection")
  public open var displayAxesOnSelection: Boolean

  @JsName("AxisScale")
  public open var axisScale: Number

  @JsName("bCoordSystemPerWidgetMode")
  public open var coordSystemPerWidgetMode: Boolean

  @JsName("bOnlySelectRigControls")
  public open var onlySelectRigControls: Boolean

  @JsName("bLocalTransformsInEachLocalSpace")
  public open var localTransformsInEachLocalSpace: Boolean

  @JsName("GizmoScale")
  public open var gizmoScale: Number

  @JsName("LastInViewportTweenWidgetLocation")
  public open var lastInViewportTweenWidgetLocation: Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigEditModeSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigEditModeSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigEditModeSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigEditModeSettings

    @JsName("C")
    public fun copy(other: UObject): ControlRigEditModeSettings

    @JsName("C")
    public fun copy(other: Any): ControlRigEditModeSettings
  }
}

public open external class ControlRigEnumNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigEnumNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigEnumNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigEnumNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigEnumNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigEnumNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigEnumNodeSpawner
  }
}

public open external class ControlRigFunctionRefNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  @JsName("ReferencedFunctionPtr")
  public open var referencedFunctionPtr: Any

  @JsName("ReferencedAssetObjectPath")
  public open var referencedAssetObjectPath: String

  @JsName("ReferencedPublicFunctionData")
  public open var referencedPublicFunctionData: ControlRigPublicFunctionData

  @JsName("bIsLocalFunction")
  public open var isLocalFunction: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigFunctionRefNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigFunctionRefNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigFunctionRefNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigFunctionRefNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigFunctionRefNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigFunctionRefNodeSpawner
  }
}

public open external class ControlRigShapeLibraryFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigShapeLibraryFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigShapeLibraryFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigShapeLibraryFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigShapeLibraryFactory

    @JsName("C")
    public fun copy(other: UObject): ControlRigShapeLibraryFactory

    @JsName("C")
    public fun copy(other: Any): ControlRigShapeLibraryFactory
  }
}

public open external class ControlRigIfNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigIfNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigIfNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigIfNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigIfNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigIfNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigIfNodeSpawner
  }
}

public open external class ControlRigPoseThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigPoseThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigPoseThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigPoseThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigPoseThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): ControlRigPoseThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): ControlRigPoseThumbnailRenderer
  }
}

public open external class ControlRigPrototypeNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  @JsName("PrototypeNotation")
  public open var prototypeNotation: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigPrototypeNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigPrototypeNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigPrototypeNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigPrototypeNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigPrototypeNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigPrototypeNodeSpawner
  }
}

public open external class ControlRigRerouteNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigRerouteNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigRerouteNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigRerouteNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigRerouteNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigRerouteNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigRerouteNodeSpawner
  }
}

public open external class ControlRigSelectNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigSelectNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigSelectNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigSelectNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigSelectNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigSelectNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigSelectNodeSpawner
  }
}

public open external class ControlRigSequenceFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigSequenceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigSequenceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigSequenceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigSequenceFactory

    @JsName("C")
    public fun copy(other: UObject): ControlRigSequenceFactory

    @JsName("C")
    public fun copy(other: Any): ControlRigSequenceFactory
  }
}

public open external class ControlRigSequencerEditorLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  @JsName("RenameControlRigControlChannels")
  public open fun renameControlRigControlChannels(
    inSequence: LevelSequence,
    inControlRig: ControlRig,
    inOldControlNames: Array<String>,
    inNewControlNames: Array<String>,
  ): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigSequencerEditorLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigSequencerEditorLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigSequencerEditorLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigSequencerEditorLibrary

    @JsName("TweenControlRig")
    public fun tweenControlRig(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      tweenValue: Number,
    ): Boolean

    @JsName("SnapControlRig")
    public fun snapControlRig(
      levelSequence: LevelSequence,
      startFrame: FrameNumber,
      endFrame: FrameNumber,
      childrenToSnap: ControlRigSnapperSelection,
      parentToSnap: ControlRigSnapperSelection,
      snapSettings: ControlRigSnapSettings,
      timeUnit: String,
    ): Boolean

    @JsName("SetLocalControlRigVector2Ds")
    public fun setLocalControlRigVector2Ds(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Vector2d>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigVector2D")
    public fun setLocalControlRigVector2d(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Vector2d,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigTransforms")
    public fun setLocalControlRigTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Transform>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigTransformNoScales")
    public fun setLocalControlRigTransformNoScales(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<TransformNoScale>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigTransformNoScale")
    public fun setLocalControlRigTransformNoScale(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: TransformNoScale,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigTransform")
    public fun setLocalControlRigTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Transform,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigScales")
    public fun setLocalControlRigScales(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Vector>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigScale")
    public fun setLocalControlRigScale(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Vector,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigRotators")
    public fun setLocalControlRigRotators(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Rotator>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigRotator")
    public fun setLocalControlRigRotator(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Rotator,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigPositions")
    public fun setLocalControlRigPositions(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Vector>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigPosition")
    public fun setLocalControlRigPosition(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Vector,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigInts")
    public fun setLocalControlRigInts(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Number>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigInt")
    public fun setLocalControlRigInt(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Number,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigFloats")
    public fun setLocalControlRigFloats(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Number>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigFloat")
    public fun setLocalControlRigFloat(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Number,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigEulerTransforms")
    public fun setLocalControlRigEulerTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<EulerTransform>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigEulerTransform")
    public fun setLocalControlRigEulerTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: EulerTransform,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigBools")
    public fun setLocalControlRigBools(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Boolean>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigBool")
    public fun setLocalControlRigBool(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Boolean,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetControlRigWorldTransforms")
    public fun setControlRigWorldTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      worldTransforms: Array<Transform>,
      timeUnit: String,
    ): Unit

    @JsName("SetControlRigWorldTransform")
    public fun setControlRigWorldTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      worldTransform: Transform,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetControlRigSpace")
    public fun setControlRigSpace(
      inSequence: LevelSequence,
      inControlRig: ControlRig,
      inControlName: String,
      inSpaceKey: RigElementKey,
      inTime: FrameNumber,
      timeUnit: String,
    ): Boolean

    @JsName("MoveControlRigSpace")
    public fun moveControlRigSpace(
      inSequence: LevelSequence,
      inControlRig: ControlRig,
      inControlName: String,
      inTime: FrameNumber,
      inNewTime: FrameNumber,
      timeUnit: String,
    ): Boolean

    @JsName("LoadAnimSequenceIntoControlRigSection")
    public fun loadAnimSequenceIntoControlRigSection(
      movieSceneSection: MovieSceneSection,
      animSequence: AnimSequence,
      skelMeshComp: SkeletalMeshComponent,
      inStartFrame: FrameNumber,
      timeUnit: String,
      keyReduce: Boolean,
      tolerance: Number,
    ): Boolean

    @JsName("ImportFBXToControlRigTrack")
    public fun importFbxToControlRigTrack(
      world: World,
      inSequence: LevelSequence,
      inTrack: MovieSceneControlRigParameterTrack,
      inSection: MovieSceneControlRigParameterSection,
      selectedControlRigNames: Array<String>,
      importFbxControlRigSettings: MovieSceneUserImportFbxControlRigSettings,
      importFilename: String,
    ): Boolean

    @JsName("GetWorldSpaceReferenceKey")
    public fun getWorldSpaceReferenceKey(): RigElementKey

    @JsName("GetVisibleControlRigs")
    public fun getVisibleControlRigs(): Array<ControlRig>

    @JsName("GetSkeletalMeshComponentWorldTransforms")
    public fun getSkeletalMeshComponentWorldTransforms(
      levelSequence: LevelSequence,
      skeletalMeshComponent: SkeletalMeshComponent,
      frames: Array<FrameNumber>,
      timeUnit: String,
      referenceName: String,
    ): Array<Transform>

    @JsName("GetSkeletalMeshComponentWorldTransform")
    public fun getSkeletalMeshComponentWorldTransform(
      levelSequence: LevelSequence,
      skeletalMeshComponent: SkeletalMeshComponent,
      frame: FrameNumber,
      timeUnit: String,
      referenceName: String,
    ): Transform

    @JsName("GetLocalControlRigVector2Ds")
    public fun getLocalControlRigVector2Ds(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Vector2d>

    @JsName("GetLocalControlRigVector2D")
    public fun getLocalControlRigVector2d(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Vector2d

    @JsName("GetLocalControlRigTransforms")
    public fun getLocalControlRigTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Transform>

    @JsName("GetLocalControlRigTransformNoScales")
    public fun getLocalControlRigTransformNoScales(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<TransformNoScale>

    @JsName("GetLocalControlRigTransformNoScale")
    public fun getLocalControlRigTransformNoScale(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): TransformNoScale

    @JsName("GetLocalControlRigTransform")
    public fun getLocalControlRigTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Transform

    @JsName("GetLocalControlRigScales")
    public fun getLocalControlRigScales(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Vector>

    @JsName("GetLocalControlRigScale")
    public fun getLocalControlRigScale(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Vector

    @JsName("GetLocalControlRigRotators")
    public fun getLocalControlRigRotators(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Rotator>

    @JsName("GetLocalControlRigRotator")
    public fun getLocalControlRigRotator(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Rotator

    @JsName("GetLocalControlRigPositions")
    public fun getLocalControlRigPositions(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Vector>

    @JsName("GetLocalControlRigPosition")
    public fun getLocalControlRigPosition(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Vector

    @JsName("GetLocalControlRigInts")
    public fun getLocalControlRigInts(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Number>

    @JsName("GetLocalControlRigInt")
    public fun getLocalControlRigInt(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Number

    @JsName("GetLocalControlRigFloats")
    public fun getLocalControlRigFloats(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Number>

    @JsName("GetLocalControlRigFloat")
    public fun getLocalControlRigFloat(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Number

    @JsName("GetLocalControlRigEulerTransforms")
    public fun getLocalControlRigEulerTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<EulerTransform>

    @JsName("GetLocalControlRigEulerTransform")
    public fun getLocalControlRigEulerTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): EulerTransform

    @JsName("GetLocalControlRigBools")
    public fun getLocalControlRigBools(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Boolean>

    @JsName("GetLocalControlRigBool")
    public fun getLocalControlRigBool(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Boolean

    @JsName("GetDefaultParentKey")
    public fun getDefaultParentKey(): RigElementKey

    @JsName("GetControlRigWorldTransforms")
    public fun getControlRigWorldTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Transform>

    @JsName("GetControlRigWorldTransform")
    public fun getControlRigWorldTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Transform

    @JsName("GetControlRigs")
    public fun getControlRigs(levelSequence: LevelSequence): Array<ControlRigSequencerBindingProxy>

    @JsName("GetActorWorldTransforms")
    public fun getActorWorldTransforms(
      levelSequence: LevelSequence,
      actor: Actor,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Transform>

    @JsName("GetActorWorldTransform")
    public fun getActorWorldTransform(
      levelSequence: LevelSequence,
      actor: Actor,
      frame: FrameNumber,
      timeUnit: String,
    ): Transform

    @JsName("FindOrCreateControlRigTrack")
    public fun findOrCreateControlRigTrack(
      world: World,
      levelSequence: LevelSequence,
      controlRigClass: UnrealEngineClass,
      inBinding: SequencerBindingProxy,
    ): MovieSceneTrack

    @JsName("FindOrCreateControlRigComponentTrack")
    public fun findOrCreateControlRigComponentTrack(
      world: World,
      levelSequence: LevelSequence,
      inBinding: SequencerBindingProxy,
    ): Array<MovieSceneTrack>

    @JsName("DeleteControlRigSpace")
    public fun deleteControlRigSpace(
      inSequence: LevelSequence,
      inControlRig: ControlRig,
      inControlName: String,
      inTime: FrameNumber,
      timeUnit: String,
    ): Boolean

    @JsName("CollapseControlRigAnimLayers")
    public fun collapseControlRigAnimLayers(
      inSequence: LevelSequence,
      inTrack: MovieSceneControlRigParameterTrack,
      keyReduce: Boolean,
      tolerance: Number,
    ): Boolean

    @JsName("BakeToControlRig")
    public fun bakeToControlRig(
      world: World,
      levelSequence: LevelSequence,
      controlRigClass: UnrealEngineClass,
      exportOptions: AnimSeqExportOption,
      reduceKeys: Boolean,
      tolerance: Number,
      binding: SequencerBindingProxy,
    ): Boolean

    @JsName("BakeControlRigSpace")
    public fun bakeControlRigSpace(
      inSequence: LevelSequence,
      inControlRig: ControlRig,
      inControlNames: Array<String>,
      inSettings: RigSpacePickerBakeSettings,
      timeUnit: String,
    ): Boolean

    @JsName("C")
    public fun copy(other: UObject): ControlRigSequencerEditorLibrary

    @JsName("C")
    public fun copy(other: Any): ControlRigSequencerEditorLibrary
  }
}

public open external class ControlRigTrackFilter(
  outer: UObject,
) : SequencerTrackFilterExtension {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigTrackFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigTrackFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigTrackFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigTrackFilter

    @JsName("C")
    public fun copy(other: UObject): ControlRigTrackFilter

    @JsName("C")
    public fun copy(other: Any): ControlRigTrackFilter
  }
}

public open external class ControlRigSkeletalMeshComponent(
  outer: UObject,
) : DebugSkelMeshComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigSkeletalMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigSkeletalMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigSkeletalMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigSkeletalMeshComponent

    @JsName("C")
    public fun copy(other: UObject): ControlRigSkeletalMeshComponent

    @JsName("C")
    public fun copy(other: Any): ControlRigSkeletalMeshComponent
  }
}

public open external class ControlRigThumbnailRenderer(
  outer: UObject,
) : SkeletalMeshThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): ControlRigThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): ControlRigThumbnailRenderer
  }
}

public open external class ControlRigUnitNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  @JsName("StructTemplate")
  public open var structTemplate: ScriptStruct

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigUnitNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigUnitNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigUnitNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigUnitNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigUnitNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigUnitNodeSpawner
  }
}

public open external class ControlRigVariableNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigVariableNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigVariableNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigVariableNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigVariableNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): ControlRigVariableNodeSpawner

    @JsName("C")
    public fun copy(other: Any): ControlRigVariableNodeSpawner
  }
}

public open external class CreateControlPoseAssetRigSettings(
  outer: UObject,
) : UObject {
  @JsName("AssetName")
  public open var assetName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CreateControlPoseAssetRigSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CreateControlPoseAssetRigSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CreateControlPoseAssetRigSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CreateControlPoseAssetRigSettings

    @JsName("C")
    public fun copy(other: UObject): CreateControlPoseAssetRigSettings

    @JsName("C")
    public fun copy(other: Any): CreateControlPoseAssetRigSettings
  }
}

public open external class DetailsViewWrapperObject(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DetailsViewWrapperObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DetailsViewWrapperObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DetailsViewWrapperObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DetailsViewWrapperObject

    @JsName("C")
    public fun copy(other: UObject): DetailsViewWrapperObject

    @JsName("C")
    public fun copy(other: Any): DetailsViewWrapperObject
  }
}

public open external class BaseSequencerAnimTool(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseSequencerAnimTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseSequencerAnimTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseSequencerAnimTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseSequencerAnimTool

    @JsName("C")
    public fun copy(other: UObject): BaseSequencerAnimTool

    @JsName("C")
    public fun copy(other: Any): BaseSequencerAnimTool
  }
}

public open external class MotionTrailToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MotionTrailToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MotionTrailToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MotionTrailToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MotionTrailToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MotionTrailToolBuilder

    @JsName("C")
    public fun copy(other: Any): MotionTrailToolBuilder
  }
}

public open external class MotionTrailTool(
  outer: UObject,
) : MultiSelectionTool {
  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  @JsName("LeftClickBehavior")
  public open var leftClickBehavior: SingleClickInputBehavior

  @JsName("RightClickBehavior")
  public open var rightClickBehavior: SingleClickInputBehavior

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MotionTrailTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MotionTrailTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MotionTrailTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MotionTrailTool

    @JsName("C")
    public fun copy(other: UObject): MotionTrailTool

    @JsName("C")
    public fun copy(other: Any): MotionTrailTool
  }
}

public open external class SequencerPivotToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerPivotToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerPivotToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerPivotToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerPivotToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SequencerPivotToolBuilder

    @JsName("C")
    public fun copy(other: Any): SequencerPivotToolBuilder
  }
}

public open external class SequencerPivotTool(
  outer: UObject,
) : MultiSelectionTool {
  @JsName("ClickBehavior")
  public open var clickBehavior: SingleClickInputBehavior

  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerPivotTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerPivotTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerPivotTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerPivotTool

    @JsName("C")
    public fun copy(other: UObject): SequencerPivotTool

    @JsName("C")
    public fun copy(other: Any): SequencerPivotTool
  }
}

public open external class SequencerToolsEditMode(
  outer: UObject,
) : BaseLegacyWidgetEdMode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerToolsEditMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerToolsEditMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerToolsEditMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerToolsEditMode

    @JsName("C")
    public fun copy(other: UObject): SequencerToolsEditMode

    @JsName("C")
    public fun copy(other: Any): SequencerToolsEditMode
  }
}

public open external class SpeedTreeImportFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpeedTreeImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpeedTreeImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpeedTreeImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpeedTreeImportFactory

    @JsName("C")
    public fun copy(other: UObject): SpeedTreeImportFactory

    @JsName("C")
    public fun copy(other: Any): SpeedTreeImportFactory
  }
}

public open external class ReimportSpeedTreeFactory(
  outer: UObject,
) : SpeedTreeImportFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportSpeedTreeFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportSpeedTreeFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportSpeedTreeFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportSpeedTreeFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportSpeedTreeFactory

    @JsName("C")
    public fun copy(other: Any): ReimportSpeedTreeFactory
  }
}

@JsName("EImportGeometryType")
public external object ImportGeometryType {
  @JsName("IGT_3D")
  public var ThreeD: String

  @JsName("IGT_Billboards")
  public var Billboards: String

  @JsName("IGT_Both")
  public var Both: String

  @JsName("IGT_MAX")
  public var Max: String
}

@JsName("EImportLODType")
public external object ImportLODType {
  @JsName("ILT_PaintedFoliage")
  public var PaintedFoliage: String

  @JsName("ILT_IndividualActors")
  public var IndividualActors: String

  @JsName("ILT_MAX")
  public var Max: String
}

public open external class SpeedTreeImportData(
  outer: UObject,
) : AssetImportData {
  @JsName("TreeScale")
  public open var treeScale: Number

  @JsName("ImportGeometryType")
  public open var importGeometryType: String

  @JsName("LODType")
  public open var lodType: String

  @JsName("IncludeCollision")
  public open var includeCollision: Boolean

  @JsName("MakeMaterialsCheck")
  public open var makeMaterialsCheck: Boolean

  @JsName("IncludeNormalMapCheck")
  public open var includeNormalMapCheck: Boolean

  @JsName("IncludeDetailMapCheck")
  public open var includeDetailMapCheck: Boolean

  @JsName("IncludeSpecularMapCheck")
  public open var includeSpecularMapCheck: Boolean

  @JsName("IncludeBranchSeamSmoothing")
  public open var includeBranchSeamSmoothing: Boolean

  @JsName("IncludeSpeedTreeAO")
  public open var includeSpeedTreeAo: Boolean

  @JsName("IncludeColorAdjustment")
  public open var includeColorAdjustment: Boolean

  @JsName("IncludeSubsurface")
  public open var includeSubsurface: Boolean

  @JsName("IncludeVertexProcessingCheck")
  public open var includeVertexProcessingCheck: Boolean

  @JsName("IncludeWindCheck")
  public open var includeWindCheck: Boolean

  @JsName("IncludeSmoothLODCheck")
  public open var includeSmoothLodCheck: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpeedTreeImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpeedTreeImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpeedTreeImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpeedTreeImportData

    @JsName("C")
    public fun copy(other: UObject): SpeedTreeImportData

    @JsName("C")
    public fun copy(other: Any): SpeedTreeImportData
  }
}

@JsName("HLODBuilderInstancing")
public open external class HlodBuilderInstancing(
  outer: UObject,
) : HlodBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilderInstancing

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilderInstancing

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilderInstancing

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilderInstancing

    @JsName("C")
    public fun copy(other: UObject): HlodBuilderInstancing

    @JsName("C")
    public fun copy(other: Any): HlodBuilderInstancing
  }
}

@JsName("HLODBuilderMeshApproximateSettings")
public open external class HlodBuilderMeshApproximateSettings(
  outer: UObject,
) : HlodBuilderSettings {
  @JsName("MeshApproximationSettings")
  public open var meshApproximationSettings: MeshApproximationSettings

  @JsName("HLODMaterial")
  public open var hlodMaterial: Material

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilderMeshApproximateSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilderMeshApproximateSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilderMeshApproximateSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilderMeshApproximateSettings

    @JsName("C")
    public fun copy(other: UObject): HlodBuilderMeshApproximateSettings

    @JsName("C")
    public fun copy(other: Any): HlodBuilderMeshApproximateSettings
  }
}

@JsName("HLODBuilderMeshApproximate")
public open external class HlodBuilderMeshApproximate(
  outer: UObject,
) : HlodBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilderMeshApproximate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilderMeshApproximate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilderMeshApproximate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilderMeshApproximate

    @JsName("C")
    public fun copy(other: UObject): HlodBuilderMeshApproximate

    @JsName("C")
    public fun copy(other: Any): HlodBuilderMeshApproximate
  }
}

@JsName("HLODBuilderMeshMergeSettings")
public open external class HlodBuilderMeshMergeSettings(
  outer: UObject,
) : HlodBuilderSettings {
  @JsName("MeshMergeSettings")
  public open var meshMergeSettings: MeshMergingSettings

  @JsName("HLODMaterial")
  public open var hlodMaterial: Material

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilderMeshMergeSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilderMeshMergeSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilderMeshMergeSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilderMeshMergeSettings

    @JsName("C")
    public fun copy(other: UObject): HlodBuilderMeshMergeSettings

    @JsName("C")
    public fun copy(other: Any): HlodBuilderMeshMergeSettings
  }
}

@JsName("HLODBuilderMeshMerge")
public open external class HlodBuilderMeshMerge(
  outer: UObject,
) : HlodBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilderMeshMerge

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilderMeshMerge

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilderMeshMerge

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilderMeshMerge

    @JsName("C")
    public fun copy(other: UObject): HlodBuilderMeshMerge

    @JsName("C")
    public fun copy(other: Any): HlodBuilderMeshMerge
  }
}

@JsName("HLODBuilderMeshSimplifySettings")
public open external class HlodBuilderMeshSimplifySettings(
  outer: UObject,
) : HlodBuilderSettings {
  @JsName("MeshSimplifySettings")
  public open var meshSimplifySettings: MeshProxySettings

  @JsName("HLODMaterial")
  public open var hlodMaterial: Material

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilderMeshSimplifySettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilderMeshSimplifySettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilderMeshSimplifySettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilderMeshSimplifySettings

    @JsName("C")
    public fun copy(other: UObject): HlodBuilderMeshSimplifySettings

    @JsName("C")
    public fun copy(other: Any): HlodBuilderMeshSimplifySettings
  }
}

@JsName("HLODBuilderMeshSimplify")
public open external class HlodBuilderMeshSimplify(
  outer: UObject,
) : HlodBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilderMeshSimplify

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilderMeshSimplify

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilderMeshSimplify

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilderMeshSimplify

    @JsName("C")
    public fun copy(other: UObject): HlodBuilderMeshSimplify

    @JsName("C")
    public fun copy(other: Any): HlodBuilderMeshSimplify
  }
}

public open external class LevelVariantSetsActorFactory(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelVariantSetsActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelVariantSetsActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelVariantSetsActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelVariantSetsActorFactory

    @JsName("C")
    public fun copy(other: UObject): LevelVariantSetsActorFactory

    @JsName("C")
    public fun copy(other: Any): LevelVariantSetsActorFactory
  }
}

public open external class SwitchActorFactory(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SwitchActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SwitchActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SwitchActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SwitchActorFactory

    @JsName("C")
    public fun copy(other: UObject): SwitchActorFactory

    @JsName("C")
    public fun copy(other: Any): SwitchActorFactory
  }
}

public open external class VariantManagerFactoryNew(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VariantManagerFactoryNew

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VariantManagerFactoryNew

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VariantManagerFactoryNew

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VariantManagerFactoryNew

    @JsName("C")
    public fun copy(other: UObject): VariantManagerFactoryNew

    @JsName("C")
    public fun copy(other: Any): VariantManagerFactoryNew
  }
}

@JsName("EVariantManagerTestEnum")
public external object VariantManagerTestEnum {
  public var None: String

  public var FirstOption: String

  public var SecondOption: String

  public var ThirdOption: String

  @JsName("EVariantManagerTestEnum_MAX")
  public var Max: String
}

public open external class VariantManagerTestActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("EnumWithNoDefault")
  public open var enumWithNoDefault: String

  @JsName("EnumWithSecondDefault")
  public open var enumWithSecondDefault: String

  @JsName("CapturedByteProperty")
  public open var capturedByteProperty: Number

  @JsName("CapturedIntProperty")
  public open var capturedIntProperty: Number

  @JsName("CapturedFloatProperty")
  public open var capturedFloatProperty: Number

  @JsName("bCapturedBoolProperty")
  public open var capturedBoolProperty: Boolean

  @JsName("CapturedObjectProperty")
  public open var capturedObjectProperty: UObject

  @JsName("CapturedInterfaceProperty")
  public open var capturedInterfaceProperty: Any

  @JsName("CapturedNameProperty")
  public open var capturedNameProperty: String

  @JsName("CapturedStrProperty")
  public open var capturedStrProperty: String

  @JsName("CapturedTextProperty")
  public open var capturedTextProperty: String

  @JsName("CapturedRotatorProperty")
  public open var capturedRotatorProperty: Rotator

  @JsName("CapturedColorProperty")
  public open var capturedColorProperty: Color

  @JsName("CapturedLinearColorProperty")
  public open var capturedLinearColorProperty: LinearColor

  @JsName("CapturedVectorProperty")
  public open var capturedVectorProperty: Vector

  @JsName("CapturedQuatProperty")
  public open var capturedQuatProperty: Quat

  @JsName("CapturedVector4Property")
  public open var capturedVector4Property: Vector4

  @JsName("CapturedVector2DProperty")
  public open var capturedVector2dProperty: Vector2d

  @JsName("CapturedIntPointProperty")
  public open var capturedIntPointProperty: IntPoint

  @JsName("CapturedUObjectArrayProperty")
  public open var capturedUObjectArrayProperty: Array<UObject>

  @JsName("CapturedVectorArrayProperty")
  public open var capturedVectorArrayProperty: Array<Vector>

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VariantManagerTestActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VariantManagerTestActor

    @JsName("C")
    public fun copy(other: UObject): VariantManagerTestActor

    @JsName("C")
    public fun copy(other: Any): VariantManagerTestActor
  }
}

public open external class AutomationUtilsBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AutomationUtilsBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AutomationUtilsBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AutomationUtilsBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AutomationUtilsBlueprintLibrary

    @JsName("TakeGameplayAutomationScreenshot")
    public fun takeGameplayAutomationScreenshot(
      screenShotName: String,
      maxGlobalError: Number,
      maxLocalError: Number,
      mapNameOverride: String,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): AutomationUtilsBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): AutomationUtilsBlueprintLibrary
  }
}

public open external class ScreenshotComparisonCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScreenshotComparisonCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScreenshotComparisonCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScreenshotComparisonCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScreenshotComparisonCommandlet

    @JsName("C")
    public fun copy(other: UObject): ScreenshotComparisonCommandlet

    @JsName("C")
    public fun copy(other: Any): ScreenshotComparisonCommandlet
  }
}

@JsName("EChaosCollisionSortMethod")
public external object ChaosCollisionSortMethod {
  public var SortNone: String

  public var SortByHighestMass: String

  public var SortByHighestSpeed: String

  public var SortByHighestImpulse: String

  public var SortByNearestFirst: String

  public var Count: String

  @JsName("EChaosCollisionSortMethod_MAX")
  public var Max: String
}

public open external class ChaosCollisionEventRequestSettings {
  @JsName("MaxNumberResults")
  public open var maxNumberResults: Number

  @JsName("MinMass")
  public open var minMass: Number

  @JsName("MinSpeed")
  public open var minSpeed: Number

  @JsName("MinImpulse")
  public open var minImpulse: Number

  @JsName("MaxDistance")
  public open var maxDistance: Number

  @JsName("SortMethod")
  public open var sortMethod: String

  public open fun clone(): ChaosCollisionEventRequestSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosCollisionEventRequestSettings

    @JsName("C")
    public fun copy(other: Any): ChaosCollisionEventRequestSettings
  }
}

@JsName("EChaosBreakingSortMethod")
public external object ChaosBreakingSortMethod {
  public var SortNone: String

  public var SortByHighestMass: String

  public var SortByHighestSpeed: String

  public var SortByNearestFirst: String

  public var Count: String

  @JsName("EChaosBreakingSortMethod_MAX")
  public var Max: String
}

public open external class ChaosBreakingEventRequestSettings {
  @JsName("MaxNumberOfResults")
  public open var maxNumberOfResults: Number

  @JsName("MinRadius")
  public open var minRadius: Number

  @JsName("MinSpeed")
  public open var minSpeed: Number

  @JsName("MinMass")
  public open var minMass: Number

  @JsName("MaxDistance")
  public open var maxDistance: Number

  @JsName("SortMethod")
  public open var sortMethod: String

  public open fun clone(): ChaosBreakingEventRequestSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosBreakingEventRequestSettings

    @JsName("C")
    public fun copy(other: Any): ChaosBreakingEventRequestSettings
  }
}

@JsName("EChaosTrailingSortMethod")
public external object ChaosTrailingSortMethod {
  public var SortNone: String

  public var SortByHighestMass: String

  public var SortByHighestSpeed: String

  public var SortByNearestFirst: String

  public var Count: String

  @JsName("EChaosTrailingSortMethod_MAX")
  public var Max: String
}

public open external class ChaosTrailingEventRequestSettings {
  @JsName("MaxNumberOfResults")
  public open var maxNumberOfResults: Number

  @JsName("MinMass")
  public open var minMass: Number

  @JsName("MinSpeed")
  public open var minSpeed: Number

  @JsName("MinAngularSpeed")
  public open var minAngularSpeed: Number

  @JsName("MaxDistance")
  public open var maxDistance: Number

  @JsName("SortMethod")
  public open var sortMethod: String

  public open fun clone(): ChaosTrailingEventRequestSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosTrailingEventRequestSettings

    @JsName("C")
    public fun copy(other: Any): ChaosTrailingEventRequestSettings
  }
}

@JsName("EChaosRemovalSortMethod")
public external object ChaosRemovalSortMethod {
  public var SortNone: String

  public var SortByHighestMass: String

  public var SortByNearestFirst: String

  public var Count: String

  @JsName("EChaosRemovalSortMethod_MAX")
  public var Max: String
}

public open external class ChaosRemovalEventRequestSettings {
  @JsName("MaxNumberOfResults")
  public open var maxNumberOfResults: Number

  @JsName("MinMass")
  public open var minMass: Number

  @JsName("MaxDistance")
  public open var maxDistance: Number

  @JsName("SortMethod")
  public open var sortMethod: String

  public open fun clone(): ChaosRemovalEventRequestSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosRemovalEventRequestSettings

    @JsName("C")
    public fun copy(other: Any): ChaosRemovalEventRequestSettings
  }
}

public open external class ChaosCollisionEventData {
  @JsName("Location")
  public open var location: Vector

  @JsName("Normal")
  public open var normal: Vector

  @JsName("Velocity1")
  public open var velocity1: Vector

  @JsName("Velocity2")
  public open var velocity2: Vector

  @JsName("Mass1")
  public open var mass1: Number

  @JsName("Mass2")
  public open var mass2: Number

  @JsName("Impulse")
  public open var impulse: Vector

  public open fun clone(): ChaosCollisionEventData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosCollisionEventData

    @JsName("C")
    public fun copy(other: Any): ChaosCollisionEventData
  }
}

public open external class ChaosBreakingEventData {
  @JsName("Location")
  public open var location: Vector

  @JsName("Velocity")
  public open var velocity: Vector

  @JsName("Mass")
  public open var mass: Number

  public open fun clone(): ChaosBreakingEventData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosBreakingEventData

    @JsName("C")
    public fun copy(other: Any): ChaosBreakingEventData
  }
}

public open external class ChaosTrailingEventData {
  @JsName("Location")
  public open var location: Vector

  @JsName("Velocity")
  public open var velocity: Vector

  @JsName("AngularVelocity")
  public open var angularVelocity: Vector

  @JsName("Mass")
  public open var mass: Number

  @JsName("ParticleIndex")
  public open var particleIndex: Number

  public open fun clone(): ChaosTrailingEventData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosTrailingEventData

    @JsName("C")
    public fun copy(other: Any): ChaosTrailingEventData
  }
}

public open external class ChaosRemovalEventData {
  @JsName("Location")
  public open var location: Vector

  @JsName("Mass")
  public open var mass: Number

  @JsName("ParticleIndex")
  public open var particleIndex: Number

  public open fun clone(): ChaosRemovalEventData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosRemovalEventData

    @JsName("C")
    public fun copy(other: Any): ChaosRemovalEventData
  }
}

public open external class GeometryCollectionSource {
  @JsName("SourceGeometryObject")
  public open var sourceGeometryObject: SoftObjectPath

  @JsName("LocalTransform")
  public open var localTransform: Transform

  @JsName("SourceMaterial")
  public open var sourceMaterial: Array<MaterialInterface>

  public open fun clone(): GeometryCollectionSource

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionSource

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionSource
  }
}

public open external class GeometryCollectionEmbeddedExemplar {
  @JsName("StaticMeshExemplar")
  public open var staticMeshExemplar: SoftObjectPath

  @JsName("StartCullDistance")
  public open var startCullDistance: Number

  @JsName("EndCullDistance")
  public open var endCullDistance: Number

  @JsName("InstanceCount")
  public open var instanceCount: Number

  public open fun clone(): GeometryCollectionEmbeddedExemplar

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionEmbeddedExemplar

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionEmbeddedExemplar
  }
}

@JsName("ECollisionTypeEnum")
public external object CollisionTypeEnum {
  @JsName("Chaos_Volumetric")
  public var Volumetric: String

  @JsName("Chaos_Surface_Volumetric")
  public var SurfaceVolumetric: String

  @JsName("Chaos_Max")
  public var Max: String
}

@JsName("EImplicitTypeEnum")
public external object ImplicitTypeEnum {
  @JsName("Chaos_Implicit_Box")
  public var Box: String

  @JsName("Chaos_Implicit_Sphere")
  public var Sphere: String

  @JsName("Chaos_Implicit_Capsule")
  public var Capsule: String

  @JsName("Chaos_Implicit_LevelSet")
  public var LevelSet: String

  @JsName("Chaos_Implicit_None")
  public var None: String

  @JsName("Chaos_Implicit_Convex")
  public var Convex: String

  @JsName("Chaos_Max")
  public var ChaosMax: String
}

public open external class GeometryCollectionLevelSetData {
  @JsName("MinLevelSetResolution")
  public open var minLevelSetResolution: Number

  @JsName("MaxLevelSetResolution")
  public open var maxLevelSetResolution: Number

  @JsName("MinClusterLevelSetResolution")
  public open var minClusterLevelSetResolution: Number

  @JsName("MaxClusterLevelSetResolution")
  public open var maxClusterLevelSetResolution: Number

  public open fun clone(): GeometryCollectionLevelSetData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionLevelSetData

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionLevelSetData
  }
}

public open external class GeometryCollectionCollisionParticleData {
  @JsName("CollisionParticlesFraction")
  public open var collisionParticlesFraction: Number

  @JsName("MaximumCollisionParticles")
  public open var maximumCollisionParticles: Number

  public open fun clone(): GeometryCollectionCollisionParticleData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionCollisionParticleData

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionCollisionParticleData
  }
}

public open external class GeometryCollectionCollisionTypeData {
  @JsName("CollisionType")
  public open var collisionType: String

  @JsName("ImplicitType")
  public open var implicitType: String

  @JsName("LevelSet")
  public open var levelSet: GeometryCollectionLevelSetData

  @JsName("CollisionParticles")
  public open var collisionParticles: GeometryCollectionCollisionParticleData

  @JsName("CollisionObjectReductionPercentage")
  public open var collisionObjectReductionPercentage: Number

  @JsName("CollisionMarginFraction")
  public open var collisionMarginFraction: Number

  public open fun clone(): GeometryCollectionCollisionTypeData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionCollisionTypeData

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionCollisionTypeData
  }
}

public open external class GeometryCollectionSizeSpecificData {
  @JsName("MaxSize")
  public open var maxSize: Number

  @JsName("CollisionShapes")
  public open var collisionShapes: Array<GeometryCollectionCollisionTypeData>

  @JsName("CollisionType")
  public open var collisionType: String

  @JsName("ImplicitType")
  public open var implicitType: String

  @JsName("MinLevelSetResolution")
  public open var minLevelSetResolution: Number

  @JsName("MaxLevelSetResolution")
  public open var maxLevelSetResolution: Number

  @JsName("MinClusterLevelSetResolution")
  public open var minClusterLevelSetResolution: Number

  @JsName("MaxClusterLevelSetResolution")
  public open var maxClusterLevelSetResolution: Number

  @JsName("CollisionObjectReductionPercentage")
  public open var collisionObjectReductionPercentage: Number

  @JsName("CollisionParticlesFraction")
  public open var collisionParticlesFraction: Number

  @JsName("MaximumCollisionParticles")
  public open var maximumCollisionParticles: Number

  @JsName("DamageThreshold")
  public open var damageThreshold: Number

  public open fun clone(): GeometryCollectionSizeSpecificData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionSizeSpecificData

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionSizeSpecificData
  }
}

public open external class GeometryCollection(
  outer: UObject,
) : UObject {
  @JsName("EnableClustering")
  public open var enableClustering: Boolean

  @JsName("ClusterGroupIndex")
  public open var clusterGroupIndex: Number

  @JsName("MaxClusterLevel")
  public open var maxClusterLevel: Number

  @JsName("DamageThreshold")
  public open var damageThreshold: Array<Number>

  @JsName("ClusterConnectionType")
  public open var clusterConnectionType: String

  @JsName("GeometrySource")
  public open var geometrySource: Array<GeometryCollectionSource>

  @JsName("Materials")
  public open var materials: Array<MaterialInterface>

  @JsName("EmbeddedGeometryExemplar")
  public open var embeddedGeometryExemplar: Array<GeometryCollectionEmbeddedExemplar>

  @JsName("bUseFullPrecisionUVs")
  public open var useFullPrecisionUVs: Boolean

  @JsName("bStripOnCook")
  public open var stripOnCook: Boolean

  @JsName("EnableNanite")
  public open var enableNanite: Boolean

  @JsName("CollisionType")
  public open var collisionType: String

  @JsName("ImplicitType")
  public open var implicitType: String

  @JsName("MinLevelSetResolution")
  public open var minLevelSetResolution: Number

  @JsName("MaxLevelSetResolution")
  public open var maxLevelSetResolution: Number

  @JsName("MinClusterLevelSetResolution")
  public open var minClusterLevelSetResolution: Number

  @JsName("MaxClusterLevelSetResolution")
  public open var maxClusterLevelSetResolution: Number

  @JsName("CollisionObjectReductionPercentage")
  public open var collisionObjectReductionPercentage: Number

  @JsName("bMassAsDensity")
  public open var massAsDensity: Boolean

  @JsName("Mass")
  public open var mass: Number

  @JsName("MinimumMassClamp")
  public open var minimumMassClamp: Number

  @JsName("CollisionParticlesFraction")
  public open var collisionParticlesFraction: Number

  @JsName("MaximumCollisionParticles")
  public open var maximumCollisionParticles: Number

  @JsName("bRemoveOnMaxSleep")
  public open var removeOnMaxSleep: Boolean

  @JsName("MaximumSleepTime")
  public open var maximumSleepTime: Vector2d

  @JsName("RemovalDuration")
  public open var removalDuration: Vector2d

  @JsName("SizeSpecificData")
  public open var sizeSpecificData: Array<GeometryCollectionSizeSpecificData>

  @JsName("EnableRemovePiecesOnFracture")
  public open var enableRemovePiecesOnFracture: Boolean

  @JsName("RemoveOnFractureMaterials")
  public open var removeOnFractureMaterials: Array<MaterialInterface>

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("PersistentGuid")
  public open var persistentGuid: Guid

  @JsName("StateGuid")
  public open var stateGuid: Guid

  @JsName("BoneSelectedMaterialIndex")
  public open var boneSelectedMaterialIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCollection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCollection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollection

    @JsName("C")
    public fun copy(other: UObject): GeometryCollection

    @JsName("C")
    public fun copy(other: Any): GeometryCollection
  }
}

@JsName("EObjectStateTypeEnum")
public external object ObjectStateTypeEnum {
  @JsName("Chaos_NONE")
  public var NONE: String

  @JsName("Chaos_Object_Sleeping")
  public var ObjectSleeping: String

  @JsName("Chaos_Object_Kinematic")
  public var ObjectKinematic: String

  @JsName("Chaos_Object_Static")
  public var ObjectStatic: String

  @JsName("Chaos_Object_Dynamic")
  public var ObjectDynamic: String

  @JsName("Chaos_Object_UserDefined")
  public var ObjectUserDefined: String

  @JsName("Chaos_Max")
  public var Max: String
}

@JsName("EInitialVelocityTypeEnum")
public external object InitialVelocityTypeEnum {
  @JsName("Chaos_Initial_Velocity_User_Defined")
  public var UserDefined: String

  @JsName("Chaos_Initial_Velocity_None")
  public var None: String

  @JsName("Chaos_Max")
  public var ChaosMax: String
}

@JsName("EGeometryCollectionCacheType")
public external object GeometryCollectionCacheType {
  public var None: String

  public var Record: String

  public var Play: String

  public var RecordAndPlay: String

  @JsName("EGeometryCollectionCacheType_MAX")
  public var Max: String
}

public open external class SolverCollisionData {
  @JsName("Location")
  public open var location: Vector

  @JsName("AccumulatedImpulse")
  public open var accumulatedImpulse: Vector

  @JsName("Normal")
  public open var normal: Vector

  @JsName("Velocity1")
  public open var velocity1: Vector

  @JsName("Velocity2")
  public open var velocity2: Vector

  @JsName("AngularVelocity1")
  public open var angularVelocity1: Vector

  @JsName("AngularVelocity2")
  public open var angularVelocity2: Vector

  @JsName("Mass1")
  public open var mass1: Number

  @JsName("Mass2")
  public open var mass2: Number

  @JsName("ParticleIndex")
  public open var particleIndex: Number

  @JsName("LevelsetIndex")
  public open var levelsetIndex: Number

  @JsName("ParticleIndexMesh")
  public open var particleIndexMesh: Number

  @JsName("LevelsetIndexMesh")
  public open var levelsetIndexMesh: Number

  public open fun clone(): SolverCollisionData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SolverCollisionData

    @JsName("C")
    public fun copy(other: Any): SolverCollisionData
  }
}

public open external class SolverBreakingData {
  @JsName("Location")
  public open var location: Vector

  @JsName("Velocity")
  public open var velocity: Vector

  @JsName("AngularVelocity")
  public open var angularVelocity: Vector

  @JsName("Mass")
  public open var mass: Number

  @JsName("ParticleIndex")
  public open var particleIndex: Number

  @JsName("ParticleIndexMesh")
  public open var particleIndexMesh: Number

  public open fun clone(): SolverBreakingData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SolverBreakingData

    @JsName("C")
    public fun copy(other: Any): SolverBreakingData
  }
}

public open external class RecordedFrame {
  @JsName("Transforms")
  public open var transforms: Array<Transform>

  @JsName("TransformIndices")
  public open var transformIndices: Array<Number>

  @JsName("PreviousTransformIndices")
  public open var previousTransformIndices: Array<Number>

  @JsName("DisabledFlags")
  public open var disabledFlags: Array<Boolean>

  @JsName("Collisions")
  public open var collisions: Array<SolverCollisionData>

  @JsName("Breakings")
  public open var breakings: Array<SolverBreakingData>

  @JsName("Trailings")
  public open var trailings: Any

  @JsName("Timestamp")
  public open var timestamp: Number

  public open fun clone(): RecordedFrame

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RecordedFrame

    @JsName("C")
    public fun copy(other: Any): RecordedFrame
  }
}

public open external class RecordedTransformTrack {
  @JsName("Records")
  public open var records: Array<RecordedFrame>

  public open fun clone(): RecordedTransformTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RecordedTransformTrack

    @JsName("C")
    public fun copy(other: Any): RecordedTransformTrack
  }
}

public open external class GeometryCollectionCache(
  outer: UObject,
) : UObject {
  @JsName("RecordedData")
  public open var recordedData: RecordedTransformTrack

  @JsName("SupportedCollection")
  public open var supportedCollection: GeometryCollection

  @JsName("CompatibleCollectionState")
  public open var compatibleCollectionState: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCollectionCache

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCollectionCache

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionCache

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionCache

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionCache

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionCache
  }
}

public open external class GeomComponentCacheParameters {
  @JsName("CacheMode")
  public open var cacheMode: String

  @JsName("TargetCache")
  public open var targetCache: GeometryCollectionCache

  @JsName("ReverseCacheBeginTime")
  public open var reverseCacheBeginTime: Number

  @JsName("SaveCollisionData")
  public open var saveCollisionData: Boolean

  @JsName("DoGenerateCollisionData")
  public open var doGenerateCollisionData: Boolean

  @JsName("CollisionDataSizeMax")
  public open var collisionDataSizeMax: Number

  @JsName("DoCollisionDataSpatialHash")
  public open var doCollisionDataSpatialHash: Boolean

  @JsName("CollisionDataSpatialHashRadius")
  public open var collisionDataSpatialHashRadius: Number

  @JsName("MaxCollisionPerCell")
  public open var maxCollisionPerCell: Number

  @JsName("SaveBreakingData")
  public open var saveBreakingData: Boolean

  @JsName("DoGenerateBreakingData")
  public open var doGenerateBreakingData: Boolean

  @JsName("BreakingDataSizeMax")
  public open var breakingDataSizeMax: Number

  @JsName("DoBreakingDataSpatialHash")
  public open var doBreakingDataSpatialHash: Boolean

  @JsName("BreakingDataSpatialHashRadius")
  public open var breakingDataSpatialHashRadius: Number

  @JsName("MaxBreakingPerCell")
  public open var maxBreakingPerCell: Number

  @JsName("SaveTrailingData")
  public open var saveTrailingData: Boolean

  @JsName("DoGenerateTrailingData")
  public open var doGenerateTrailingData: Boolean

  @JsName("TrailingDataSizeMax")
  public open var trailingDataSizeMax: Number

  @JsName("TrailingMinSpeedThreshold")
  public open var trailingMinSpeedThreshold: Number

  @JsName("TrailingMinVolumeThreshold")
  public open var trailingMinVolumeThreshold: Number

  public open fun clone(): GeomComponentCacheParameters

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeomComponentCacheParameters

    @JsName("C")
    public fun copy(other: Any): GeomComponentCacheParameters
  }
}

public open external class ChaosBreakEvent {
  @JsName("Component")
  public open var component: PrimitiveComponent

  @JsName("Location")
  public open var location: Vector

  @JsName("Velocity")
  public open var velocity: Vector

  @JsName("AngularVelocity")
  public open var angularVelocity: Vector

  @JsName("Mass")
  public open var mass: Number

  public open fun clone(): ChaosBreakEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosBreakEvent

    @JsName("C")
    public fun copy(other: Any): ChaosBreakEvent
  }
}

public open external class ChaosRemovalEvent {
  @JsName("Component")
  public open var component: PrimitiveComponent

  @JsName("Location")
  public open var location: Vector

  @JsName("Mass")
  public open var mass: Number

  public open fun clone(): ChaosRemovalEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosRemovalEvent

    @JsName("C")
    public fun copy(other: Any): ChaosRemovalEvent
  }
}

public open external class GeometryCollectionRepData {
  public open fun clone(): GeometryCollectionRepData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionRepData

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionRepData
  }
}

@JsName("EGeometryCollectionPhysicsTypeEnum")
public external object GeometryCollectionPhysicsTypeEnum {
  @JsName("Chaos_AngularVelocity")
  public var AngularVelocity: String

  @JsName("Chaos_DynamicState")
  public var DynamicState: String

  @JsName("Chaos_LinearVelocity")
  public var LinearVelocity: String

  @JsName("Chaos_InitialAngularVelocity")
  public var InitialAngularVelocity: String

  @JsName("Chaos_InitialLinearVelocity")
  public var InitialLinearVelocity: String

  @JsName("Chaos_CollisionGroup")
  public var CollisionGroup: String

  @JsName("Chaos_LinearForce")
  public var LinearForce: String

  @JsName("Chaos_AngularTorque")
  public var AngularTorque: String

  @JsName("Chaos_DisableThreshold")
  public var DisableThreshold: String

  @JsName("Chaos_SleepingThreshold")
  public var SleepingThreshold: String

  @JsName("Chaos_Max")
  public var Max: String
}

public open external class GeometryCollectionComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("ChaosSolverActor")
  public open var chaosSolverActor: ChaosSolverActor

  @JsName("RestCollection")
  public open var restCollection: GeometryCollection

  @JsName("InitializationFields")
  public open var initializationFields: Array<FieldSystemActor>

  @JsName("Simulating")
  public open var simulating: Boolean

  @JsName("ObjectType")
  public open var objectType: String

  @JsName("bForceMotionBlur")
  public open var forceMotionBlur: Boolean

  @JsName("EnableClustering")
  public open var enableClustering: Boolean

  @JsName("ClusterGroupIndex")
  public open var clusterGroupIndex: Number

  @JsName("MaxClusterLevel")
  public open var maxClusterLevel: Number

  @JsName("DamageThreshold")
  public open var damageThreshold: Array<Number>

  @JsName("bUseSizeSpecificDamageThreshold")
  public open var useSizeSpecificDamageThreshold: Boolean

  @JsName("ClusterConnectionType")
  public open var clusterConnectionType: String

  @JsName("CollisionGroup")
  public open var collisionGroup: Number

  @JsName("CollisionSampleFraction")
  public open var collisionSampleFraction: Number

  @JsName("LinearEtherDrag")
  public open var linearEtherDrag: Number

  @JsName("AngularEtherDrag")
  public open var angularEtherDrag: Number

  @JsName("PhysicalMaterial")
  public open var physicalMaterial: ChaosPhysicalMaterial

  @JsName("InitialVelocityType")
  public open var initialVelocityType: String

  @JsName("InitialLinearVelocity")
  public open var initialLinearVelocity: Vector

  @JsName("InitialAngularVelocity")
  public open var initialAngularVelocity: Vector

  @JsName("PhysicalMaterialOverride")
  public open var physicalMaterialOverride: PhysicalMaterial

  @JsName("CacheParameters")
  public open var cacheParameters: GeomComponentCacheParameters

  @JsName("RestTransforms")
  public open var restTransforms: Array<Transform>

  @JsName("NotifyGeometryCollectionPhysicsStateChange")
  public open var notifyGeometryCollectionPhysicsStateChange:
      UnrealEngineMulticastDelegate<(FracturedComponent: GeometryCollectionComponent) -> Unit>

  @JsName("NotifyGeometryCollectionPhysicsLoadingStateChange")
  public open var notifyGeometryCollectionPhysicsLoadingStateChange:
      UnrealEngineMulticastDelegate<(FracturedComponent: GeometryCollectionComponent) -> Unit>

  @JsName("OnChaosBreakEvent")
  public open var onChaosBreakEvent:
      UnrealEngineMulticastDelegate<(BreakEvent: ChaosBreakEvent) -> Unit>

  @JsName("OnChaosRemovalEvent")
  public open var onChaosRemovalEvent:
      UnrealEngineMulticastDelegate<(RemovalEvent: ChaosRemovalEvent) -> Unit>

  @JsName("DesiredCacheTime")
  public open var desiredCacheTime: Number

  @JsName("CachePlayback")
  public open var cachePlayback: Boolean

  @JsName("OnChaosPhysicsCollision")
  public open var onChaosPhysicsCollision:
      UnrealEngineMulticastDelegate<(CollisionInfo: ChaosPhysicsCollisionInfo) -> Unit>

  @JsName("bNotifyBreaks")
  public open var notifyBreaks: Boolean

  @JsName("bNotifyCollisions")
  public open var notifyCollisions: Boolean

  @JsName("bNotifyTrailing")
  public open var notifyTrailing: Boolean

  @JsName("bNotifyRemovals")
  public open var notifyRemovals: Boolean

  @JsName("bStoreVelocities")
  public open var storeVelocities: Boolean

  @JsName("bShowBoneColors")
  public open var showBoneColors: Boolean

  @JsName("bEnableReplication")
  public open var enableReplication: Boolean

  @JsName("bEnableAbandonAfterLevel")
  public open var enableAbandonAfterLevel: Boolean

  @JsName("ReplicationAbandonClusterLevel")
  public open var replicationAbandonClusterLevel: Number

  @JsName("RepData")
  public open var repData: GeometryCollectionRepData

  @JsName("SelectedBones")
  public open var selectedBones: Array<Number>

  @JsName("HighlightedBones")
  public open var highlightedBones: Array<Number>

  @JsName("DummyBodySetup")
  public open var dummyBodySetup: BodySetup

  @JsName("EditorActor")
  public open var editorActor: Actor

  @JsName("EmbeddedGeometryComponents")
  public open var embeddedGeometryComponents: Array<InstancedStaticMeshComponent>

  @JsName("SetNotifyRemovals")
  public open fun setNotifyRemovals(newNotifyRemovals: Boolean): Unit

  @JsName("SetNotifyBreaks")
  public open fun setNotifyBreaks(newNotifyBreaks: Boolean): Unit

  @JsName("ReceivePhysicsCollision")
  public open fun receivePhysicsCollision(collisionInfo: ChaosPhysicsCollisionInfo): Unit

  @JsName("OnRep_RepData")
  public open fun onRepRepData(oldData: GeometryCollectionRepData): Unit

  @JsName("NetAbandonCluster")
  public open fun netAbandonCluster(transformIndex: Number): Unit

  @JsName("ApplyPhysicsField")
  public open fun applyPhysicsField(
    enabled: Boolean,
    target: String,
    metaData: FieldSystemMetaData,
    field: FieldNodeBase,
  ): Unit

  @JsName("ApplyKinematicField")
  public open fun applyKinematicField(radius: Number, position: Vector): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCollectionComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCollectionComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionComponent

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionComponent

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionComponent
  }
}

public open external class GeometryCollectionDebugDrawWarningMessage {
  public open fun clone(): GeometryCollectionDebugDrawWarningMessage

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionDebugDrawWarningMessage

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionDebugDrawWarningMessage
  }
}

public open external class GeometryCollectionDebugDrawActorSelectedRigidBody {
  public open var ID: Number

  @JsName("Solver")
  public open var solver: ChaosSolverActor

  @JsName("GeometryCollection")
  public open var geometryCollection: GeometryCollectionActor

  public open fun clone(): GeometryCollectionDebugDrawActorSelectedRigidBody

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionDebugDrawActorSelectedRigidBody

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionDebugDrawActorSelectedRigidBody
  }
}

@JsName("EGeometryCollectionDebugDrawActorHideGeometry")
public external object GeometryCollectionDebugDrawActorHideGeometry {
  @JsName("HideNone")
  public var None: String

  @JsName("HideWithCollision")
  public var WithCollision: String

  @JsName("HideSelected")
  public var Selected: String

  @JsName("HideWholeCollection")
  public var WholeCollection: String

  @JsName("HideAll")
  public var All: String

  @JsName("EGeometryCollectionDebugDrawActorHideGeometry_MAX")
  public var Max: String
}

public open external class GeometryCollectionDebugDrawActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("WarningMessage")
  public open var warningMessage: GeometryCollectionDebugDrawWarningMessage

  @JsName("SelectedRigidBody")
  public open var selectedRigidBody: GeometryCollectionDebugDrawActorSelectedRigidBody

  @JsName("bDebugDrawWholeCollection")
  public open var debugDrawWholeCollection: Boolean

  @JsName("bDebugDrawHierarchy")
  public open var debugDrawHierarchy: Boolean

  @JsName("bDebugDrawClustering")
  public open var debugDrawClustering: Boolean

  @JsName("HideGeometry")
  public open var hideGeometry: String

  @JsName("bShowRigidBodyId")
  public open var showRigidBodyId: Boolean

  @JsName("bShowRigidBodyCollision")
  public open var showRigidBodyCollision: Boolean

  @JsName("bCollisionAtOrigin")
  public open var collisionAtOrigin: Boolean

  @JsName("bShowRigidBodyTransform")
  public open var showRigidBodyTransform: Boolean

  @JsName("bShowRigidBodyInertia")
  public open var showRigidBodyInertia: Boolean

  @JsName("bShowRigidBodyVelocity")
  public open var showRigidBodyVelocity: Boolean

  @JsName("bShowRigidBodyForce")
  public open var showRigidBodyForce: Boolean

  @JsName("bShowRigidBodyInfos")
  public open var showRigidBodyInfos: Boolean

  @JsName("bShowTransformIndex")
  public open var showTransformIndex: Boolean

  @JsName("bShowTransform")
  public open var showTransform: Boolean

  @JsName("bShowParent")
  public open var showParent: Boolean

  @JsName("bShowLevel")
  public open var showLevel: Boolean

  @JsName("bShowConnectivityEdges")
  public open var showConnectivityEdges: Boolean

  @JsName("bShowGeometryIndex")
  public open var showGeometryIndex: Boolean

  @JsName("bShowGeometryTransform")
  public open var showGeometryTransform: Boolean

  @JsName("bShowBoundingBox")
  public open var showBoundingBox: Boolean

  @JsName("bShowFaces")
  public open var showFaces: Boolean

  @JsName("bShowFaceIndices")
  public open var showFaceIndices: Boolean

  @JsName("bShowFaceNormals")
  public open var showFaceNormals: Boolean

  @JsName("bShowSingleFace")
  public open var showSingleFace: Boolean

  @JsName("SingleFaceIndex")
  public open var singleFaceIndex: Number

  @JsName("bShowVertices")
  public open var showVertices: Boolean

  @JsName("bShowVertexIndices")
  public open var showVertexIndices: Boolean

  @JsName("bShowVertexNormals")
  public open var showVertexNormals: Boolean

  @JsName("bUseActiveVisualization")
  public open var useActiveVisualization: Boolean

  @JsName("PointThickness")
  public open var pointThickness: Number

  @JsName("LineThickness")
  public open var lineThickness: Number

  @JsName("bTextShadow")
  public open var textShadow: Boolean

  @JsName("TextScale")
  public open var textScale: Number

  @JsName("NormalScale")
  public open var normalScale: Number

  @JsName("AxisScale")
  public open var axisScale: Number

  @JsName("ArrowScale")
  public open var arrowScale: Number

  @JsName("RigidBodyIdColor")
  public open var rigidBodyIdColor: Color

  @JsName("RigidBodyTransformScale")
  public open var rigidBodyTransformScale: Number

  @JsName("RigidBodyCollisionColor")
  public open var rigidBodyCollisionColor: Color

  @JsName("RigidBodyInertiaColor")
  public open var rigidBodyInertiaColor: Color

  @JsName("RigidBodyVelocityColor")
  public open var rigidBodyVelocityColor: Color

  @JsName("RigidBodyForceColor")
  public open var rigidBodyForceColor: Color

  @JsName("RigidBodyInfoColor")
  public open var rigidBodyInfoColor: Color

  @JsName("TransformIndexColor")
  public open var transformIndexColor: Color

  @JsName("TransformScale")
  public open var transformScale: Number

  @JsName("LevelColor")
  public open var levelColor: Color

  @JsName("ParentColor")
  public open var parentColor: Color

  @JsName("ConnectivityEdgeThickness")
  public open var connectivityEdgeThickness: Number

  @JsName("GeometryIndexColor")
  public open var geometryIndexColor: Color

  @JsName("GeometryTransformScale")
  public open var geometryTransformScale: Number

  @JsName("BoundingBoxColor")
  public open var boundingBoxColor: Color

  @JsName("FaceColor")
  public open var faceColor: Color

  @JsName("FaceIndexColor")
  public open var faceIndexColor: Color

  @JsName("FaceNormalColor")
  public open var faceNormalColor: Color

  @JsName("SingleFaceColor")
  public open var singleFaceColor: Color

  @JsName("VertexColor")
  public open var vertexColor: Color

  @JsName("VertexIndexColor")
  public open var vertexIndexColor: Color

  @JsName("VertexNormalColor")
  public open var vertexNormalColor: Color

  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionDebugDrawActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionDebugDrawActor

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionDebugDrawActor

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionDebugDrawActor
  }
}

public open external class GeometryCollectionRenderLevelSetActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("TargetVolumeTexture")
  public open var targetVolumeTexture: VolumeTexture

  @JsName("RayMarchMaterial")
  public open var rayMarchMaterial: Material

  @JsName("SurfaceTolerance")
  public open var surfaceTolerance: Number

  @JsName("Isovalue")
  public open var isovalue: Number

  @JsName("Enabled")
  public open var enabled: Boolean

  @JsName("RenderVolumeBoundingBox")
  public open var renderVolumeBoundingBox: Boolean

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionRenderLevelSetActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionRenderLevelSetActor

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionRenderLevelSetActor

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionRenderLevelSetActor
  }
}

public open external class GeometryCollectionDebugDrawComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("GeometryCollectionDebugDrawActor")
  public open var geometryCollectionDebugDrawActor: GeometryCollectionDebugDrawActor

  @JsName("GeometryCollectionRenderLevelSetActor")
  public open var geometryCollectionRenderLevelSetActor: GeometryCollectionRenderLevelSetActor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCollectionDebugDrawComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCollectionDebugDrawComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionDebugDrawComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionDebugDrawComponent

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionDebugDrawComponent

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionDebugDrawComponent
  }
}

public open external class GeometryCollectionActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("GeometryCollectionComponent")
  public open var geometryCollectionComponent: GeometryCollectionComponent

  @JsName("GeometryCollectionDebugDrawComponent")
  public open var geometryCollectionDebugDrawComponent: GeometryCollectionDebugDrawComponent

  @JsName("RaycastSingle")
  public open fun raycastSingle(
    start: Vector,
    end: Vector,
    outHit: HitResult,
  ): Object53

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionActor

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionActor

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionActor
  }
}

@JsName("T$438")
public external interface TrailingEventsProvider {
  @JsName("TrailingEvents")
  public var trailingEvents: Array<ChaosTrailingEventData>
}

@JsName("T$439")
public external interface RemovalEventsProvider {
  @JsName("RemovalEvents")
  public var removalEvents: Array<ChaosRemovalEventData>
}

@JsName("T$440")
public external interface CollisionEventsProvider {
  @JsName("CollisionEvents")
  public var collisionEvents: Array<ChaosCollisionEventData>
}

@JsName("T$441")
public external interface BreakingEventsProvider {
  @JsName("BreakingEvents")
  public var breakingEvents: Array<ChaosBreakingEventData>
}

public open external class ChaosDestructionListener(
  outer: UObject,
) : SceneComponent {
  @JsName("bIsCollisionEventListeningEnabled")
  public open var isCollisionEventListeningEnabled: Boolean

  @JsName("bIsBreakingEventListeningEnabled")
  public open var isBreakingEventListeningEnabled: Boolean

  @JsName("bIsTrailingEventListeningEnabled")
  public open var isTrailingEventListeningEnabled: Boolean

  @JsName("bIsRemovalEventListeningEnabled")
  public open var isRemovalEventListeningEnabled: Boolean

  @JsName("CollisionEventRequestSettings")
  public open var collisionEventRequestSettings: ChaosCollisionEventRequestSettings

  @JsName("BreakingEventRequestSettings")
  public open var breakingEventRequestSettings: ChaosBreakingEventRequestSettings

  @JsName("TrailingEventRequestSettings")
  public open var trailingEventRequestSettings: ChaosTrailingEventRequestSettings

  @JsName("RemovalEventRequestSettings")
  public open var removalEventRequestSettings: ChaosRemovalEventRequestSettings

  @JsName("ChaosSolverActors")
  public open var chaosSolverActors: Any

  @JsName("GeometryCollectionActors")
  public open var geometryCollectionActors: Any

  @JsName("OnCollisionEvents")
  public open var onCollisionEvents:
      UnrealEngineMulticastDelegate<(CollisionEvents: Array<ChaosCollisionEventData>) -> Unit>

  @JsName("OnBreakingEvents")
  public open var onBreakingEvents:
      UnrealEngineMulticastDelegate<(BreakingEvents: Array<ChaosBreakingEventData>) -> Unit>

  @JsName("OnTrailingEvents")
  public open var onTrailingEvents:
      UnrealEngineMulticastDelegate<(TrailingEvents: Array<ChaosTrailingEventData>) -> Unit>

  @JsName("OnRemovalEvents")
  public open var onRemovalEvents:
      UnrealEngineMulticastDelegate<(RemovalEvents: Array<ChaosRemovalEventData>) -> Unit>

  @JsName("SortTrailingEvents")
  public open fun sortTrailingEvents(trailingEvents: Array<ChaosTrailingEventData>,
      sortMethod: String): TrailingEventsProvider

  @JsName("SortRemovalEvents")
  public open fun sortRemovalEvents(removalEvents: Array<ChaosRemovalEventData>,
      sortMethod: String): RemovalEventsProvider

  @JsName("SortCollisionEvents")
  public open fun sortCollisionEvents(collisionEvents: Array<ChaosCollisionEventData>,
      sortMethod: String): CollisionEventsProvider

  @JsName("SortBreakingEvents")
  public open fun sortBreakingEvents(breakingEvents: Array<ChaosBreakingEventData>,
      sortMethod: String): BreakingEventsProvider

  @JsName("SetTrailingEventRequestSettings")
  public open fun setTrailingEventRequestSettings(inSettings: ChaosTrailingEventRequestSettings):
      Unit

  @JsName("SetTrailingEventEnabled")
  public open fun setTrailingEventEnabled(isEnabled: Boolean): Unit

  @JsName("SetRemovalEventRequestSettings")
  public open fun setRemovalEventRequestSettings(inSettings: ChaosRemovalEventRequestSettings): Unit

  @JsName("SetRemovalEventEnabled")
  public open fun setRemovalEventEnabled(isEnabled: Boolean): Unit

  @JsName("SetCollisionEventRequestSettings")
  public open fun setCollisionEventRequestSettings(inSettings: ChaosCollisionEventRequestSettings):
      Unit

  @JsName("SetCollisionEventEnabled")
  public open fun setCollisionEventEnabled(isEnabled: Boolean): Unit

  @JsName("SetBreakingEventRequestSettings")
  public open fun setBreakingEventRequestSettings(inSettings: ChaosBreakingEventRequestSettings):
      Unit

  @JsName("SetBreakingEventEnabled")
  public open fun setBreakingEventEnabled(isEnabled: Boolean): Unit

  @JsName("RemoveGeometryCollectionActor")
  public open fun removeGeometryCollectionActor(geometryCollectionActor: GeometryCollectionActor):
      Unit

  @JsName("RemoveChaosSolverActor")
  public open fun removeChaosSolverActor(chaosSolverActor: ChaosSolverActor): Unit

  @JsName("IsEventListening")
  public open fun isEventListening(): Boolean

  @JsName("AddGeometryCollectionActor")
  public open fun addGeometryCollectionActor(geometryCollectionActor: GeometryCollectionActor): Unit

  @JsName("AddChaosSolverActor")
  public open fun addChaosSolverActor(chaosSolverActor: ChaosSolverActor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ChaosDestructionListener

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ChaosDestructionListener

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ChaosDestructionListener

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ChaosDestructionListener

    @JsName("C")
    public fun copy(other: UObject): ChaosDestructionListener

    @JsName("C")
    public fun copy(other: Any): ChaosDestructionListener
  }
}

public open external class ActorFactoryGeometryCollection(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryGeometryCollection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryGeometryCollection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryGeometryCollection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryGeometryCollection

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryGeometryCollection

    @JsName("C")
    public fun copy(other: Any): ActorFactoryGeometryCollection
  }
}

public open external class GeometryCollectionCacheFactory(
  outer: UObject,
) : Factory {
  @JsName("TargetCollection")
  public open var targetCollection: GeometryCollection

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCollectionCacheFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCollectionCacheFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionCacheFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionCacheFactory

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionCacheFactory

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionCacheFactory
  }
}

public open external class GeometryCollectionFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCollectionFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCollectionFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionFactory

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionFactory

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionFactory
  }
}

public open external class GeometryCollectionThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCollectionThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCollectionThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCollectionThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCollectionThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): GeometryCollectionThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): GeometryCollectionThumbnailRenderer
  }
}

public open external class FractureEditorMode(
  outer: UObject,
) : BaseLegacyWidgetEdMode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureEditorMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureEditorMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureEditorMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureEditorMode

    @JsName("C")
    public fun copy(other: UObject): FractureEditorMode

    @JsName("C")
    public fun copy(other: Any): FractureEditorMode
  }
}

public open external class FractureModeCustomSectionColor {
  @JsName("SectionName")
  public open var sectionName: String

  @JsName("Color")
  public open var color: LinearColor

  public open fun clone(): FractureModeCustomSectionColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FractureModeCustomSectionColor

    @JsName("C")
    public fun copy(other: Any): FractureModeCustomSectionColor
  }
}

public open external class FractureModeCustomToolColor {
  @JsName("ToolName")
  public open var toolName: String

  @JsName("Color")
  public open var color: LinearColor

  public open fun clone(): FractureModeCustomToolColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FractureModeCustomToolColor

    @JsName("C")
    public fun copy(other: Any): FractureModeCustomToolColor
  }
}

public open external class FractureModeCustomizationSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("ToolSectionOrder")
  public open var toolSectionOrder: Array<String>

  @JsName("ToolFavorites")
  public open var toolFavorites: Array<String>

  @JsName("SectionColors")
  public open var sectionColors: Array<FractureModeCustomSectionColor>

  @JsName("ToolColors")
  public open var toolColors: Array<FractureModeCustomToolColor>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureModeCustomizationSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureModeCustomizationSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureModeCustomizationSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureModeCustomizationSettings

    @JsName("C")
    public fun copy(other: UObject): FractureModeCustomizationSettings

    @JsName("C")
    public fun copy(other: Any): FractureModeCustomizationSettings
  }
}

public open external class FractureSettings(
  outer: UObject,
) : UObject {
  @JsName("ExplodeAmount")
  public open var explodeAmount: Number

  @JsName("FractureLevel")
  public open var fractureLevel: Number

  @JsName("bHideUnselected")
  public open var hideUnselected: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureSettings

    @JsName("C")
    public fun copy(other: UObject): FractureSettings

    @JsName("C")
    public fun copy(other: Any): FractureSettings
  }
}

public open external class FractureActionTool(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureActionTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureActionTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureActionTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureActionTool

    @JsName("C")
    public fun copy(other: UObject): FractureActionTool

    @JsName("C")
    public fun copy(other: Any): FractureActionTool
  }
}

public open external class FractureModalTool(
  outer: UObject,
) : FractureActionTool {
  @JsName("VisualizedCollections")
  public open var visualizedCollections: Array<GeometryCollectionComponent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureModalTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureModalTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureModalTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureModalTool

    @JsName("C")
    public fun copy(other: UObject): FractureModalTool

    @JsName("C")
    public fun copy(other: Any): FractureModalTool
  }
}

public open external class FractureToolSettings(
  outer: UObject,
) : UObject {
  @JsName("OwnerTool")
  public open var ownerTool: FractureModalTool

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSettings

    @JsName("C")
    public fun copy(other: UObject): FractureToolSettings

    @JsName("C")
    public fun copy(other: Any): FractureToolSettings
  }
}

public open external class FractureInteractiveTool(
  outer: UObject,
) : FractureModalTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureInteractiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureInteractiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureInteractiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureInteractiveTool

    @JsName("C")
    public fun copy(other: UObject): FractureInteractiveTool

    @JsName("C")
    public fun copy(other: Any): FractureInteractiveTool
  }
}

@JsName("EFractureAutoClusterMode")
public external object FractureAutoClusterMode {
  public var BoundingBox: String

  public var Proximity: String

  public var Distance: String

  public var Voronoi: String

  @JsName("EFractureAutoClusterMode_MAX")
  public var Max: String
}

public open external class FractureAutoClusterSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("AutoClusterMode")
  public open var autoClusterMode: String

  @JsName("SiteCount")
  public open var siteCount: Any

  @JsName("bEnforceConnectivity")
  public open var enforceConnectivity: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureAutoClusterSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureAutoClusterSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureAutoClusterSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureAutoClusterSettings

    @JsName("C")
    public fun copy(other: UObject): FractureAutoClusterSettings

    @JsName("C")
    public fun copy(other: Any): FractureAutoClusterSettings
  }
}

public open external class FractureToolAutoCluster(
  outer: UObject,
) : FractureModalTool {
  @JsName("AutoClusterSettings")
  public open var autoClusterSettings: FractureAutoClusterSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolAutoCluster

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolAutoCluster

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolAutoCluster

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolAutoCluster

    @JsName("C")
    public fun copy(other: UObject): FractureToolAutoCluster

    @JsName("C")
    public fun copy(other: Any): FractureToolAutoCluster
  }
}

@JsName("EFractureBrickBond")
public external object FractureBrickBond {
  public var Stretcher: String

  public var Stack: String

  public var English: String

  public var Header: String

  public var Flemish: String

  @JsName("EFractureBrickBond_MAX")
  public var Max: String
}

public open external class FractureBrickSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("Bond")
  public open var bond: String

  @JsName("BrickLength")
  public open var brickLength: Number

  @JsName("BrickHeight")
  public open var brickHeight: Number

  @JsName("BrickDepth")
  public open var brickDepth: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureBrickSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureBrickSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureBrickSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureBrickSettings

    @JsName("C")
    public fun copy(other: UObject): FractureBrickSettings

    @JsName("C")
    public fun copy(other: Any): FractureBrickSettings
  }
}

public open external class FractureCutterSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("RandomSeed")
  public open var randomSeed: Number

  @JsName("ChanceToFracture")
  public open var chanceToFracture: Number

  @JsName("bGroupFracture")
  public open var groupFracture: Boolean

  @JsName("bGroupFractureToggleEnabled")
  public open var groupFractureToggleEnabled: Boolean

  @JsName("bDrawSites")
  public open var drawSites: Boolean

  @JsName("bDrawSitesToggleEnabled")
  public open var drawSitesToggleEnabled: Boolean

  @JsName("bDrawDiagram")
  public open var drawDiagram: Boolean

  @JsName("Grout")
  public open var grout: Number

  @JsName("Amplitude")
  public open var amplitude: Number

  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Persistence")
  public open var persistence: Number

  @JsName("Lacunarity")
  public open var lacunarity: Number

  @JsName("OctaveNumber")
  public open var octaveNumber: Number

  @JsName("PointSpacing")
  public open var pointSpacing: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureCutterSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureCutterSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureCutterSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureCutterSettings

    @JsName("C")
    public fun copy(other: UObject): FractureCutterSettings

    @JsName("C")
    public fun copy(other: Any): FractureCutterSettings
  }
}

public open external class FractureCollisionSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("bAddSamplesForCollision")
  public open var addSamplesForCollision: Boolean

  @JsName("PointSpacing")
  public open var pointSpacing: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureCollisionSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureCollisionSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureCollisionSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureCollisionSettings

    @JsName("C")
    public fun copy(other: UObject): FractureCollisionSettings

    @JsName("C")
    public fun copy(other: Any): FractureCollisionSettings
  }
}

public open external class FractureToolCutterBase(
  outer: UObject,
) : FractureInteractiveTool {
  @JsName("CutterSettings")
  public open var cutterSettings: FractureCutterSettings

  @JsName("CollisionSettings")
  public open var collisionSettings: FractureCollisionSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolCutterBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolCutterBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolCutterBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolCutterBase

    @JsName("C")
    public fun copy(other: UObject): FractureToolCutterBase

    @JsName("C")
    public fun copy(other: Any): FractureToolCutterBase
  }
}

public open external class FractureToolBrick(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("BrickSettings")
  public open var brickSettings: FractureBrickSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolBrick

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolBrick

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolBrick

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolBrick

    @JsName("C")
    public fun copy(other: UObject): FractureToolBrick

    @JsName("C")
    public fun copy(other: Any): FractureToolBrick
  }
}

public open external class FractureClusterCutterSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("NumberClustersMin")
  public open var numberClustersMin: Number

  @JsName("NumberClustersMax")
  public open var numberClustersMax: Number

  @JsName("SitesPerClusterMin")
  public open var sitesPerClusterMin: Number

  @JsName("SitesPerClusterMax")
  public open var sitesPerClusterMax: Number

  @JsName("ClusterRadiusFractionMin")
  public open var clusterRadiusFractionMin: Number

  @JsName("ClusterRadiusFractionMax")
  public open var clusterRadiusFractionMax: Number

  @JsName("ClusterRadiusOffset")
  public open var clusterRadiusOffset: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureClusterCutterSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureClusterCutterSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureClusterCutterSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureClusterCutterSettings

    @JsName("C")
    public fun copy(other: UObject): FractureClusterCutterSettings

    @JsName("C")
    public fun copy(other: Any): FractureClusterCutterSettings
  }
}

public open external class FractureToolVoronoiCutterBase(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("VoronoiLineSets")
  public open var voronoiLineSets: Array<LineSetComponent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolVoronoiCutterBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolVoronoiCutterBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolVoronoiCutterBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolVoronoiCutterBase

    @JsName("C")
    public fun copy(other: UObject): FractureToolVoronoiCutterBase

    @JsName("C")
    public fun copy(other: Any): FractureToolVoronoiCutterBase
  }
}

public open external class FractureToolClusterCutter(
  outer: UObject,
) : FractureToolVoronoiCutterBase {
  @JsName("ClusterSettings")
  public open var clusterSettings: FractureClusterCutterSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolClusterCutter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolClusterCutter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolClusterCutter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolClusterCutter

    @JsName("C")
    public fun copy(other: UObject): FractureToolClusterCutter

    @JsName("C")
    public fun copy(other: Any): FractureToolClusterCutter
  }
}

public open external class FractureToolFlattenAll(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolFlattenAll

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolFlattenAll

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolFlattenAll

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolFlattenAll

    @JsName("C")
    public fun copy(other: UObject): FractureToolFlattenAll

    @JsName("C")
    public fun copy(other: Any): FractureToolFlattenAll
  }
}

public open external class FractureToolCluster(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolCluster

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolCluster

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolCluster

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolCluster

    @JsName("C")
    public fun copy(other: UObject): FractureToolCluster

    @JsName("C")
    public fun copy(other: Any): FractureToolCluster
  }
}

public open external class FractureToolUncluster(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolUncluster

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolUncluster

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolUncluster

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolUncluster

    @JsName("C")
    public fun copy(other: UObject): FractureToolUncluster

    @JsName("C")
    public fun copy(other: Any): FractureToolUncluster
  }
}

public open external class FractureToolMoveUp(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolMoveUp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolMoveUp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolMoveUp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolMoveUp

    @JsName("C")
    public fun copy(other: UObject): FractureToolMoveUp

    @JsName("C")
    public fun copy(other: Any): FractureToolMoveUp
  }
}

public open external class FractureToolClusterMerge(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolClusterMerge

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolClusterMerge

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolClusterMerge

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolClusterMerge

    @JsName("C")
    public fun copy(other: UObject): FractureToolClusterMerge

    @JsName("C")
    public fun copy(other: Any): FractureToolClusterMerge
  }
}

public open external class FractureClusterMagnetSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("Iterations")
  public open var iterations: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureClusterMagnetSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureClusterMagnetSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureClusterMagnetSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureClusterMagnetSettings

    @JsName("C")
    public fun copy(other: UObject): FractureClusterMagnetSettings

    @JsName("C")
    public fun copy(other: Any): FractureClusterMagnetSettings
  }
}

public open external class FractureToolClusterMagnet(
  outer: UObject,
) : FractureModalTool {
  @JsName("ClusterMagnetSettings")
  public open var clusterMagnetSettings: FractureClusterMagnetSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolClusterMagnet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolClusterMagnet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolClusterMagnet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolClusterMagnet

    @JsName("C")
    public fun copy(other: UObject): FractureToolClusterMagnet

    @JsName("C")
    public fun copy(other: Any): FractureToolClusterMagnet
  }
}

public open external class FractureConvertSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("bPromptForBaseName")
  public open var promptForBaseName: Boolean

  @JsName("bPerBone")
  public open var perBone: Boolean

  @JsName("bCenterPivots")
  public open var centerPivots: Boolean

  @JsName("bPlaceInWorld")
  public open var placeInWorld: Boolean

  @JsName("bSelectNewActors")
  public open var selectNewActors: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureConvertSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureConvertSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureConvertSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureConvertSettings

    @JsName("C")
    public fun copy(other: UObject): FractureConvertSettings

    @JsName("C")
    public fun copy(other: Any): FractureConvertSettings
  }
}

public open external class FractureToolConvert(
  outer: UObject,
) : FractureModalTool {
  @JsName("ConvertSettings")
  public open var convertSettings: FractureConvertSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolConvert

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolConvert

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolConvert

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolConvert

    @JsName("C")
    public fun copy(other: UObject): FractureToolConvert

    @JsName("C")
    public fun copy(other: Any): FractureToolConvert
  }
}

public open external class FractureConvexSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("FractionAllowRemove")
  public open var fractionAllowRemove: Any

  @JsName("CanExceedFraction")
  public open var canExceedFraction: Any

  @JsName("SimplificationDistanceThreshold")
  public open var simplificationDistanceThreshold: Any

  @JsName("DeleteFromSelected")
  public open fun deleteFromSelected(): Unit

  @JsName("ClearCustomConvex")
  public open fun clearCustomConvex(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureConvexSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureConvexSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureConvexSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureConvexSettings

    @JsName("C")
    public fun copy(other: UObject): FractureConvexSettings

    @JsName("C")
    public fun copy(other: Any): FractureConvexSettings
  }
}

public open external class FractureToolConvex(
  outer: UObject,
) : FractureModalTool {
  @JsName("ConvexSettings")
  public open var convexSettings: FractureConvexSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolConvex

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolConvex

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolConvex

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolConvex

    @JsName("C")
    public fun copy(other: UObject): FractureToolConvex

    @JsName("C")
    public fun copy(other: Any): FractureToolConvex
  }
}

@JsName("EVoronoiPattern")
public external object VoronoiPattern {
  public var Centered: String

  public var Uniform: String

  public var Grid: String

  public var MeshVertices: String

  public var SelectedBones: String

  @JsName("EVoronoiPattern_MAX")
  public var Max: String
}

@JsName("EDownsamplingMode")
public external object DownsamplingMode {
  public var Random: String

  public var UniformSpacing: String

  public var KeepSharp: String

  @JsName("EDownsamplingMode_MAX")
  public var Max: String
}

public open external class FractureCustomVoronoiSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("VoronoiPattern")
  public open var voronoiPattern: String

  @JsName("NormalOffset")
  public open var normalOffset: Number

  @JsName("Variability")
  public open var variability: Number

  @JsName("SitesToAdd")
  public open var sitesToAdd: Number

  @JsName("GridX")
  public open var gridX: Number

  @JsName("GridY")
  public open var gridY: Number

  @JsName("GridZ")
  public open var gridZ: Number

  @JsName("SkipFraction")
  public open var skipFraction: Number

  @JsName("SkipMode")
  public open var skipMode: String

  @JsName("ReferenceMesh")
  public open var referenceMesh: Any

  @JsName("bStartAtActor")
  public open var startAtActor: Boolean

  @JsName("UnfreezeSites")
  public open fun unfreezeSites(): Unit

  @JsName("RegenerateLiveSites")
  public open fun regenerateLiveSites(): Unit

  @JsName("FreezeLiveSites")
  public open fun freezeLiveSites(): Unit

  @JsName("ClearFrozenSites")
  public open fun clearFrozenSites(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureCustomVoronoiSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureCustomVoronoiSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureCustomVoronoiSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureCustomVoronoiSettings

    @JsName("C")
    public fun copy(other: UObject): FractureCustomVoronoiSettings

    @JsName("C")
    public fun copy(other: Any): FractureCustomVoronoiSettings
  }
}

public open external class FractureTransformGizmoSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("bUseGizmo")
  public open var useGizmo: Boolean

  @JsName("bCenterOnSelection")
  public open var centerOnSelection: Boolean

  @JsName("bShowUseGizmoOption")
  public open var showUseGizmoOption: Boolean

  @JsName("TransformGizmo")
  public open var transformGizmo: CombinedTransformGizmo

  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("AttachedCutter")
  public open var attachedCutter: FractureToolCutterBase

  @JsName("UsedToolsContext")
  public open var usedToolsContext: InteractiveToolsContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureTransformGizmoSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureTransformGizmoSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureTransformGizmoSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureTransformGizmoSettings

    @JsName("C")
    public fun copy(other: UObject): FractureTransformGizmoSettings

    @JsName("C")
    public fun copy(other: Any): FractureTransformGizmoSettings
  }
}

public open external class FractureToolCustomVoronoi(
  outer: UObject,
) : FractureToolVoronoiCutterBase {
  @JsName("CustomVoronoiSettings")
  public open var customVoronoiSettings: FractureCustomVoronoiSettings

  @JsName("GizmoSettings")
  public open var gizmoSettings: FractureTransformGizmoSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolCustomVoronoi

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolCustomVoronoi

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolCustomVoronoi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolCustomVoronoi

    @JsName("C")
    public fun copy(other: UObject): FractureToolCustomVoronoi

    @JsName("C")
    public fun copy(other: Any): FractureToolCustomVoronoi
  }
}

public open external class FractureToolDeleteBranch(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolDeleteBranch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolDeleteBranch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolDeleteBranch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolDeleteBranch

    @JsName("C")
    public fun copy(other: UObject): FractureToolDeleteBranch

    @JsName("C")
    public fun copy(other: Any): FractureToolDeleteBranch
  }
}

public open external class FractureToolHide(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolHide

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolHide

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolHide

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolHide

    @JsName("C")
    public fun copy(other: UObject): FractureToolHide

    @JsName("C")
    public fun copy(other: Any): FractureToolHide
  }
}

public open external class FractureToolUnhide(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolUnhide

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolUnhide

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolUnhide

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolUnhide

    @JsName("C")
    public fun copy(other: UObject): FractureToolUnhide

    @JsName("C")
    public fun copy(other: Any): FractureToolUnhide
  }
}

public open external class FractureToolValidate(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolValidate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolValidate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolValidate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolValidate

    @JsName("C")
    public fun copy(other: UObject): FractureToolValidate

    @JsName("C")
    public fun copy(other: Any): FractureToolValidate
  }
}

public open external class FractureToolAddEmbeddedGeometry(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolAddEmbeddedGeometry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolAddEmbeddedGeometry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolAddEmbeddedGeometry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolAddEmbeddedGeometry

    @JsName("C")
    public fun copy(other: UObject): FractureToolAddEmbeddedGeometry

    @JsName("C")
    public fun copy(other: Any): FractureToolAddEmbeddedGeometry
  }
}

public open external class FractureToolAutoEmbedGeometry(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolAutoEmbedGeometry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolAutoEmbedGeometry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolAutoEmbedGeometry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolAutoEmbedGeometry

    @JsName("C")
    public fun copy(other: UObject): FractureToolAutoEmbedGeometry

    @JsName("C")
    public fun copy(other: Any): FractureToolAutoEmbedGeometry
  }
}

public open external class FractureToolFlushEmbeddedGeometrySettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("bExtractAsStaticMeshActors")
  public open var extractAsStaticMeshActors: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolFlushEmbeddedGeometrySettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolFlushEmbeddedGeometrySettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolFlushEmbeddedGeometrySettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolFlushEmbeddedGeometrySettings

    @JsName("C")
    public fun copy(other: UObject): FractureToolFlushEmbeddedGeometrySettings

    @JsName("C")
    public fun copy(other: Any): FractureToolFlushEmbeddedGeometrySettings
  }
}

public open external class FractureToolFlushEmbeddedGeometry(
  outer: UObject,
) : FractureModalTool {
  @JsName("FlushEmbeddedGeometrySettings")
  public open var flushEmbeddedGeometrySettings: FractureToolFlushEmbeddedGeometrySettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolFlushEmbeddedGeometry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolFlushEmbeddedGeometry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolFlushEmbeddedGeometry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolFlushEmbeddedGeometry

    @JsName("C")
    public fun copy(other: UObject): FractureToolFlushEmbeddedGeometry

    @JsName("C")
    public fun copy(other: Any): FractureToolFlushEmbeddedGeometry
  }
}

@JsName("ENeighborSelectionMethod")
public external object NeighborSelectionMethod {
  public var LargestNeighbor: String

  public var NearestCenter: String

  @JsName("ENeighborSelectionMethod_MAX")
  public var Max: String
}

@JsName("EGeometrySelectionMethod")
public external object GeometrySelectionMethod {
  public var VolumeCubeRoot: String

  public var RelativeVolume: String

  @JsName("EGeometrySelectionMethod_MAX")
  public var Max: String
}

public open external class FractureTinyGeoSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("NeighborSelection")
  public open var neighborSelection: String

  @JsName("bAlsoMergeSelected")
  public open var alsoMergeSelected: Boolean

  @JsName("SelectionMethod")
  public open var selectionMethod: String

  @JsName("MinVolumeCubeRoot")
  public open var minVolumeCubeRoot: Any

  @JsName("RelativeVolume")
  public open var relativeVolume: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureTinyGeoSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureTinyGeoSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureTinyGeoSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureTinyGeoSettings

    @JsName("C")
    public fun copy(other: UObject): FractureTinyGeoSettings

    @JsName("C")
    public fun copy(other: Any): FractureTinyGeoSettings
  }
}

public open external class FractureToolFixTinyGeo(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("TinyGeoSettings")
  public open var tinyGeoSettings: FractureTinyGeoSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolFixTinyGeo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolFixTinyGeo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolFixTinyGeo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolFixTinyGeo

    @JsName("C")
    public fun copy(other: UObject): FractureToolFixTinyGeo

    @JsName("C")
    public fun copy(other: Any): FractureToolFixTinyGeo
  }
}

public open external class FractureToolGenerateAsset(
  outer: UObject,
) : FractureActionTool {
  @JsName("AssetPath")
  public open var assetPath: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolGenerateAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolGenerateAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolGenerateAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolGenerateAsset

    @JsName("C")
    public fun copy(other: UObject): FractureToolGenerateAsset

    @JsName("C")
    public fun copy(other: Any): FractureToolGenerateAsset
  }
}

public open external class FractureToolResetAsset(
  outer: UObject,
) : FractureToolGenerateAsset {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolResetAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolResetAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolResetAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolResetAsset

    @JsName("C")
    public fun copy(other: UObject): FractureToolResetAsset

    @JsName("C")
    public fun copy(other: Any): FractureToolResetAsset
  }
}

@JsName("EMeshCutDistribution")
public external object MeshCutDistribution {
  public var SingleCut: String

  public var UniformRandom: String

  public var Grid: String

  @JsName("EMeshCutDistribution_MAX")
  public var Max: String
}

public open external class FractureMeshCutSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("CuttingActor")
  public open var cuttingActor: Any

  @JsName("CutDistribution")
  public open var cutDistribution: String

  @JsName("NumberToScatter")
  public open var numberToScatter: Number

  @JsName("GridX")
  public open var gridX: Number

  @JsName("GridY")
  public open var gridY: Number

  @JsName("GridZ")
  public open var gridZ: Number

  @JsName("Variability")
  public open var variability: Number

  @JsName("MinScaleFactor")
  public open var minScaleFactor: Number

  @JsName("MaxScaleFactor")
  public open var maxScaleFactor: Number

  @JsName("bRandomOrientation")
  public open var randomOrientation: Boolean

  @JsName("RollRange")
  public open var rollRange: Number

  @JsName("PitchRange")
  public open var pitchRange: Number

  @JsName("YawRange")
  public open var yawRange: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureMeshCutSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureMeshCutSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureMeshCutSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureMeshCutSettings

    @JsName("C")
    public fun copy(other: UObject): FractureMeshCutSettings

    @JsName("C")
    public fun copy(other: Any): FractureMeshCutSettings
  }
}

public open external class FractureToolMeshCut(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("MeshCutSettings")
  public open var meshCutSettings: FractureMeshCutSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolMeshCut

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolMeshCut

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolMeshCut

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolMeshCut

    @JsName("C")
    public fun copy(other: UObject): FractureToolMeshCut

    @JsName("C")
    public fun copy(other: Any): FractureToolMeshCut
  }
}

public open external class FracturePlaneCutSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("NumberPlanarCuts")
  public open var numberPlanarCuts: Number

  @JsName("bCanCutWithMultiplePlanes")
  public open var canCutWithMultiplePlanes: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FracturePlaneCutSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FracturePlaneCutSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FracturePlaneCutSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FracturePlaneCutSettings

    @JsName("C")
    public fun copy(other: UObject): FracturePlaneCutSettings

    @JsName("C")
    public fun copy(other: Any): FracturePlaneCutSettings
  }
}

public open external class FractureToolPlaneCut(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("PlaneCutSettings")
  public open var planeCutSettings: FracturePlaneCutSettings

  @JsName("GizmoSettings")
  public open var gizmoSettings: FractureTransformGizmoSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolPlaneCut

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolPlaneCut

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolPlaneCut

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolPlaneCut

    @JsName("C")
    public fun copy(other: UObject): FractureToolPlaneCut

    @JsName("C")
    public fun copy(other: Any): FractureToolPlaneCut
  }
}

@JsName("EDynamicStateOverrideEnum")
public external object DynamicStateOverrideEnum {
  public var NoOverride: String

  public var Sleeping: String

  public var Kinematic: String

  public var Static: String

  @JsName("EDynamicStateOverrideEnum_MAX")
  public var Max: String
}

public open external class FractureInitialDynamicStateSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("InitialDynamicState")
  public open var initialDynamicState: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureInitialDynamicStateSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureInitialDynamicStateSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureInitialDynamicStateSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureInitialDynamicStateSettings

    @JsName("C")
    public fun copy(other: UObject): FractureInitialDynamicStateSettings

    @JsName("C")
    public fun copy(other: Any): FractureInitialDynamicStateSettings
  }
}

public open external class FractureToolSetInitialDynamicState(
  outer: UObject,
) : FractureModalTool {
  @JsName("StateSettings")
  public open var stateSettings: FractureInitialDynamicStateSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSetInitialDynamicState

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSetInitialDynamicState

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSetInitialDynamicState

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSetInitialDynamicState

    @JsName("C")
    public fun copy(other: UObject): FractureToolSetInitialDynamicState

    @JsName("C")
    public fun copy(other: Any): FractureToolSetInitialDynamicState
  }
}

public open external class FractureRadialSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("Center")
  public open var center: Vector

  @JsName("Normal")
  public open var normal: Vector

  @JsName("bPositionedByGizmo")
  public open var positionedByGizmo: Boolean

  @JsName("Radius")
  public open var radius: Number

  @JsName("AngularSteps")
  public open var angularSteps: Number

  @JsName("RadialSteps")
  public open var radialSteps: Number

  @JsName("AngleOffset")
  public open var angleOffset: Number

  @JsName("Variability")
  public open var variability: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureRadialSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureRadialSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureRadialSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureRadialSettings

    @JsName("C")
    public fun copy(other: UObject): FractureRadialSettings

    @JsName("C")
    public fun copy(other: Any): FractureRadialSettings
  }
}

public open external class FractureToolRadial(
  outer: UObject,
) : FractureToolVoronoiCutterBase {
  @JsName("RadialSettings")
  public open var radialSettings: FractureRadialSettings

  @JsName("GizmoSettings")
  public open var gizmoSettings: FractureTransformGizmoSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolRadial

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolRadial

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolRadial

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolRadial

    @JsName("C")
    public fun copy(other: UObject): FractureToolRadial

    @JsName("C")
    public fun copy(other: Any): FractureToolRadial
  }
}

public open external class FractureRecomputeNormalsSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("bShowNormals")
  public open var showNormals: Boolean

  @JsName("bShowTangents")
  public open var showTangents: Boolean

  @JsName("Length")
  public open var length: Number

  @JsName("bOnlyTangents")
  public open var onlyTangents: Boolean

  @JsName("bRecomputeSharpEdges")
  public open var recomputeSharpEdges: Boolean

  @JsName("SharpEdgeAngleThreshold")
  public open var sharpEdgeAngleThreshold: Number

  @JsName("bOnlyInternalSurfaces")
  public open var onlyInternalSurfaces: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureRecomputeNormalsSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureRecomputeNormalsSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureRecomputeNormalsSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureRecomputeNormalsSettings

    @JsName("C")
    public fun copy(other: UObject): FractureRecomputeNormalsSettings

    @JsName("C")
    public fun copy(other: Any): FractureRecomputeNormalsSettings
  }
}

public open external class FractureToolRecomputeNormals(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("NormalsSettings")
  public open var normalsSettings: FractureRecomputeNormalsSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolRecomputeNormals

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolRecomputeNormals

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolRecomputeNormals

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolRecomputeNormals

    @JsName("C")
    public fun copy(other: UObject): FractureToolRecomputeNormals

    @JsName("C")
    public fun copy(other: Any): FractureToolRecomputeNormals
  }
}

public open external class FractureResampleSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("bOnlyShowAddedPoints")
  public open var onlyShowAddedPoints: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureResampleSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureResampleSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureResampleSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureResampleSettings

    @JsName("C")
    public fun copy(other: UObject): FractureResampleSettings

    @JsName("C")
    public fun copy(other: Any): FractureResampleSettings
  }
}

public open external class FractureToolResample(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("ResampleSettings")
  public open var resampleSettings: FractureResampleSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolResample

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolResample

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolResample

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolResample

    @JsName("C")
    public fun copy(other: UObject): FractureToolResample

    @JsName("C")
    public fun copy(other: Any): FractureToolResample
  }
}

@JsName("EMouseSelectionMethod")
public external object MouseSelectionMethod {
  public var RectSelect: String

  public var StandardSelect: String

  @JsName("EMouseSelectionMethod_MAX")
  public var Max: String
}

@JsName("EVolumeSelectionMethod")
public external object VolumeSelectionMethod {
  public var CubeRootOfVolume: String

  public var RelativeToWhole: String

  public var RelativeToLargest: String

  @JsName("EVolumeSelectionMethod_MAX")
  public var Max: String
}

@JsName("ESelectionOperation")
public external object SelectionOperation {
  public var Replace: String

  public var Add: String

  public var Remove: String

  @JsName("ESelectionOperation_MAX")
  public var Max: String
}

public open external class FractureSelectionSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("MouseSelectionMethod")
  public open var mouseSelectionMethod: String

  @JsName("VolumeSelectionMethod")
  public open var volumeSelectionMethod: String

  @JsName("SelectionOperation")
  public open var selectionOperation: String

  @JsName("MinVolume")
  public open var minVolume: Any

  @JsName("MaxVolume")
  public open var maxVolume: Any

  @JsName("MinVolumeFrac")
  public open var minVolumeFrac: Any

  @JsName("MaxVolumeFrac")
  public open var maxVolumeFrac: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureSelectionSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureSelectionSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureSelectionSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureSelectionSettings

    @JsName("C")
    public fun copy(other: UObject): FractureSelectionSettings

    @JsName("C")
    public fun copy(other: Any): FractureSelectionSettings
  }
}

public open external class RectangleMarqueeManager(
  outer: UObject,
) : UObject {
  @JsName("bUseExternalClickDragBehavior")
  public open var useExternalClickDragBehavior: Boolean

  @JsName("OnDragRectangleChangedDeferredThreshold")
  public open var onDragRectangleChangedDeferredThreshold: Any

  @JsName("ClickDragBehavior")
  public open var clickDragBehavior: ClickDragInputBehavior

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RectangleMarqueeManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RectangleMarqueeManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RectangleMarqueeManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RectangleMarqueeManager

    @JsName("C")
    public fun copy(other: UObject): RectangleMarqueeManager

    @JsName("C")
    public fun copy(other: Any): RectangleMarqueeManager
  }
}

public open external class FractureToolSelection(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("SelectionBehaviorSet")
  public open var selectionBehaviorSet: InputBehaviorSet

  @JsName("SelectionBehaviorSource")
  public open var selectionBehaviorSource: LocalInputBehaviorSource

  @JsName("RectangleMarqueeManager")
  public open var rectangleMarqueeManager: RectangleMarqueeManager

  @JsName("UsedToolsContext")
  public open var usedToolsContext: InteractiveToolsContext

  @JsName("SelectionSettings")
  public open var selectionSettings: FractureSelectionSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelection

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelection

    @JsName("C")
    public fun copy(other: Any): FractureToolSelection
  }
}

public open external class FractureToolSelectAll(
  outer: UObject,
) : FractureActionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelectAll

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelectAll

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelectAll

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelectAll

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelectAll

    @JsName("C")
    public fun copy(other: Any): FractureToolSelectAll
  }
}

public open external class FractureToolSelectNone(
  outer: UObject,
) : FractureToolSelectAll {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelectNone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelectNone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelectNone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelectNone

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelectNone

    @JsName("C")
    public fun copy(other: Any): FractureToolSelectNone
  }
}

public open external class FractureToolSelectNeighbors(
  outer: UObject,
) : FractureToolSelectAll {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelectNeighbors

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelectNeighbors

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelectNeighbors

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelectNeighbors

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelectNeighbors

    @JsName("C")
    public fun copy(other: Any): FractureToolSelectNeighbors
  }
}

public open external class FractureToolSelectParent(
  outer: UObject,
) : FractureToolSelectAll {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelectParent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelectParent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelectParent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelectParent

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelectParent

    @JsName("C")
    public fun copy(other: Any): FractureToolSelectParent
  }
}

public open external class FractureToolSelectChildren(
  outer: UObject,
) : FractureToolSelectAll {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelectChildren

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelectChildren

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelectChildren

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelectChildren

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelectChildren

    @JsName("C")
    public fun copy(other: Any): FractureToolSelectChildren
  }
}

public open external class FractureToolSelectSiblings(
  outer: UObject,
) : FractureToolSelectAll {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelectSiblings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelectSiblings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelectSiblings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelectSiblings

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelectSiblings

    @JsName("C")
    public fun copy(other: Any): FractureToolSelectSiblings
  }
}

public open external class FractureToolSelectAllInLevel(
  outer: UObject,
) : FractureToolSelectAll {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelectAllInLevel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelectAllInLevel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelectAllInLevel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelectAllInLevel

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelectAllInLevel

    @JsName("C")
    public fun copy(other: Any): FractureToolSelectAllInLevel
  }
}

public open external class FractureToolSelectInvert(
  outer: UObject,
) : FractureToolSelectAll {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSelectInvert

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSelectInvert

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSelectInvert

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSelectInvert

    @JsName("C")
    public fun copy(other: UObject): FractureToolSelectInvert

    @JsName("C")
    public fun copy(other: Any): FractureToolSelectInvert
  }
}

public open external class FractureSliceSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("SlicesX")
  public open var slicesX: Number

  @JsName("SlicesY")
  public open var slicesY: Number

  @JsName("SlicesZ")
  public open var slicesZ: Number

  @JsName("SliceAngleVariation")
  public open var sliceAngleVariation: Number

  @JsName("SliceOffsetVariation")
  public open var sliceOffsetVariation: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureSliceSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureSliceSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureSliceSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureSliceSettings

    @JsName("C")
    public fun copy(other: UObject): FractureSliceSettings

    @JsName("C")
    public fun copy(other: Any): FractureSliceSettings
  }
}

public open external class FractureToolSlice(
  outer: UObject,
) : FractureToolCutterBase {
  @JsName("SliceSettings")
  public open var sliceSettings: FractureSliceSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolSlice

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolSlice

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolSlice

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolSlice

    @JsName("C")
    public fun copy(other: UObject): FractureToolSlice

    @JsName("C")
    public fun copy(other: Any): FractureToolSlice
  }
}

public open external class FractureUniformSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("NumberVoronoiSitesMin")
  public open var numberVoronoiSitesMin: Number

  @JsName("NumberVoronoiSitesMax")
  public open var numberVoronoiSitesMax: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureUniformSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureUniformSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureUniformSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureUniformSettings

    @JsName("C")
    public fun copy(other: UObject): FractureUniformSettings

    @JsName("C")
    public fun copy(other: Any): FractureUniformSettings
  }
}

public open external class FractureToolUniform(
  outer: UObject,
) : FractureToolVoronoiCutterBase {
  @JsName("UniformSettings")
  public open var uniformSettings: FractureUniformSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolUniform

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolUniform

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolUniform

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolUniform

    @JsName("C")
    public fun copy(other: UObject): FractureToolUniform

    @JsName("C")
    public fun copy(other: Any): FractureToolUniform
  }
}

@JsName("ETargetMaterialIDs")
public external object TargetMaterialIDs {
  public var OddIDs: String

  public var OddAndSelectedIDs: String

  public var SelectedIDs: String

  public var AllIDs: String

  @JsName("ETargetMaterialIDs_MAX")
  public var Max: String
}

@JsName("EAutoUVTextureResolution")
public external object AutoUVTextureResolution {
  @JsName("Resolution16")
  public var Sixteen: String

  @JsName("Resolution32")
  public var ThirtyTwo: String

  @JsName("Resolution64")
  public var SixtyFour: String

  @JsName("Resolution128")
  public var OneTwentyEight: String

  @JsName("Resolution256")
  public var TwoFiftySix: String

  @JsName("Resolution512")
  public var FiveTwelve: String

  @JsName("Resolution1024")
  public var TenTwentyFour: String

  @JsName("Resolution2048")
  public var TwentyFortyEight: String

  @JsName("Resolution4096")
  public var FortyNinetySix: String

  @JsName("Resolution8192")
  public var EightyOneNinetyTwo: String

  @JsName("EAutoUVTextureResolution_MAX")
  public var Max: String
}

@JsName("ETextureType")
public external object TextureType {
  public var ThicknessAndSurfaceAttributes: String

  public var SpatialGradients: String

  public var Normals: String

  @JsName("ETextureType_MAX")
  public var Max: String
}

@JsName("FractureAutoUVSettings")
public open external class FractureAutoUvSettings(
  outer: UObject,
) : FractureToolSettings {
  @JsName("UVChannel")
  public open var uvChannel: String

  @JsName("UVChannelNamesList")
  public open var uvChannelNamesList: Array<String>

  @JsName("ProjectionScale")
  public open var projectionScale: Vector

  @JsName("TargetMaterialIDs")
  public open var targetMaterialIDs: String

  @JsName("MaterialIDs")
  public open var materialIDs: Array<Number>

  @JsName("Resolution")
  public open var resolution: String

  @JsName("GutterSize")
  public open var gutterSize: Number

  @JsName("Result")
  public open var result: Texture2d

  @JsName("bPromptToSave")
  public open var promptToSave: Boolean

  @JsName("bReplaceExisting")
  public open var replaceExisting: Boolean

  @JsName("BakeTextureType")
  public open var bakeTextureType: String

  @JsName("bDistToOuter")
  public open var distToOuter: Boolean

  @JsName("bAmbientOcclusion")
  public open var ambientOcclusion: Boolean

  @JsName("bSmoothedCurvature")
  public open var smoothedCurvature: Boolean

  @JsName("MaxDistance")
  public open var maxDistance: Any

  @JsName("OcclusionRays")
  public open var occlusionRays: Number

  @JsName("OcclusionBlurRadius")
  public open var occlusionBlurRadius: Any

  @JsName("CurvatureBlurRadius")
  public open var curvatureBlurRadius: Any

  @JsName("VoxelResolution")
  public open var voxelResolution: Number

  @JsName("SmoothingIterations")
  public open var smoothingIterations: Number

  @JsName("ThicknessFactor")
  public open var thicknessFactor: Any

  @JsName("MaxCurvature")
  public open var maxCurvature: Any

  @JsName("LayoutUVs")
  public open fun layoutUVs(): Unit

  @JsName("GetUVChannelNamesFunc")
  public open fun getUvChannelNamesFunc(): Array<String>

  @JsName("DisableBoneColors")
  public open fun disableBoneColors(): Unit

  @JsName("DeleteUVChannel")
  public open fun deleteUvChannel(): Unit

  @JsName("BoxProjectUVs")
  public open fun boxProjectUVs(): Unit

  @JsName("BakeTexture")
  public open fun bakeTexture(): Unit

  @JsName("AddUVChannel")
  public open fun addUvChannel(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureAutoUvSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureAutoUvSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureAutoUvSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureAutoUvSettings

    @JsName("C")
    public fun copy(other: UObject): FractureAutoUvSettings

    @JsName("C")
    public fun copy(other: Any): FractureAutoUvSettings
  }
}

@JsName("FractureToolAutoUV")
public open external class FractureToolAutoUv(
  outer: UObject,
) : FractureModalTool {
  @JsName("AutoUVSettings")
  public open var autoUvSettings: FractureAutoUvSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FractureToolAutoUv

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FractureToolAutoUv

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FractureToolAutoUv

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FractureToolAutoUv

    @JsName("C")
    public fun copy(other: UObject): FractureToolAutoUv

    @JsName("C")
    public fun copy(other: Any): FractureToolAutoUv
  }
}

@JsName("EInspectedAttributeEnum")
public external object InspectedAttributeEnum {
  public var Volume: String

  public var Level: String

  public var InitialDynamicState: String

  public var Size: String

  @JsName("EInspectedAttributeEnum_MAX")
  public var Max: String
}

public open external class HistogramSettings(
  outer: UObject,
) : UObject {
  @JsName("InspectedAttribute")
  public open var inspectedAttribute: String

  @JsName("bSorted")
  public open var sorted: Boolean

  @JsName("bShowClusters")
  public open var showClusters: Boolean

  @JsName("bShowRigids")
  public open var showRigids: Boolean

  @JsName("bShowEmbedded")
  public open var showEmbedded: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HistogramSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HistogramSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HistogramSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HistogramSettings

    @JsName("C")
    public fun copy(other: UObject): HistogramSettings

    @JsName("C")
    public fun copy(other: Any): HistogramSettings
  }
}

@JsName("EOutlinerItemNameEnum")
public external object OutlinerItemNameEnum {
  @JsName("BoneName")
  public var Name: String

  @JsName("BoneIndex")
  public var Index: String

  @JsName("EOutlinerItemNameEnum_MAX")
  public var Max: String
}

public open external class OutlinerSettings(
  outer: UObject,
) : UObject {
  @JsName("ItemText")
  public open var itemText: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OutlinerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OutlinerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OutlinerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OutlinerSettings

    @JsName("C")
    public fun copy(other: UObject): OutlinerSettings

    @JsName("C")
    public fun copy(other: Any): OutlinerSettings
  }
}

@JsName("EDataSourceTypeEnum")
public external object DataSourceTypeEnum {
  @JsName("ChaosNiagara_DataSourceType_Collision")
  public var Collision: String

  @JsName("ChaosNiagara_DataSourceType_Breaking")
  public var Breaking: String

  @JsName("ChaosNiagara_DataSourceType_Trailing")
  public var Trailing: String

  @JsName("ChaosNiagara_Max")
  public var ChaosNiagaraMax: String
}

@JsName("ELocationFilteringModeEnum")
public external object LocationFilteringModeEnum {
  @JsName("ChaosNiagara_LocationFilteringMode_Inclusive")
  public var Inclusive: String

  @JsName("ChaosNiagara_LocationFilteringMode_Exclusive")
  public var Exclusive: String

  @JsName("ChaosNiagara_Max")
  public var ChaosNiagaraMax: String
}

@JsName("ELocationXToSpawnEnum")
public external object LocationXToSpawnEnum {
  @JsName("ChaosNiagara_LocationXToSpawn_None")
  public var LocationXToSpawnNone: String

  @JsName("ChaosNiagara_LocationXToSpawn_Min")
  public var LocationXToSpawnMin: String

  @JsName("ChaosNiagara_LocationXToSpawn_Max")
  public var LocationXToSpawnMax: String

  @JsName("ChaosNiagara_LocationXToSpawn_MinMax")
  public var LocationXToSpawnMinMax: String

  @JsName("ChaosNiagara_Max")
  public var Max: String
}

@JsName("ELocationYToSpawnEnum")
public external object LocationYToSpawnEnum {
  @JsName("ChaosNiagara_LocationYToSpawn_None")
  public var LocationYToSpawnNone: String

  @JsName("ChaosNiagara_LocationYToSpawn_Min")
  public var LocationYToSpawnMin: String

  @JsName("ChaosNiagara_LocationYToSpawn_Max")
  public var LocationYToSpawnMax: String

  @JsName("ChaosNiagara_LocationYToSpawn_MinMax")
  public var LocationYToSpawnMinMax: String

  @JsName("ChaosNiagara_Max")
  public var Max: String
}

@JsName("ELocationZToSpawnEnum")
public external object LocationZToSpawnEnum {
  @JsName("ChaosNiagara_LocationZToSpawn_None")
  public var LocationZToSpawnNone: String

  @JsName("ChaosNiagara_LocationZToSpawn_Min")
  public var LocationZToSpawnMin: String

  @JsName("ChaosNiagara_LocationZToSpawn_Max")
  public var LocationZToSpawnMax: String

  @JsName("ChaosNiagara_LocationZToSpawn_MinMax")
  public var LocationZToSpawnMinMax: String

  @JsName("ChaosNiagara_Max")
  public var Max: String
}

@JsName("EDataSortTypeEnum")
public external object DataSortTypeEnum {
  @JsName("ChaosNiagara_DataSortType_NoSorting")
  public var NoSorting: String

  @JsName("ChaosNiagara_DataSortType_RandomShuffle")
  public var RandomShuffle: String

  @JsName("ChaosNiagara_DataSortType_SortByMassMaxToMin")
  public var SortByMassMaxToMin: String

  @JsName("ChaosNiagara_DataSortType_SortByMassMinToMax")
  public var SortByMassMinToMax: String

  @JsName("ChaosNiagara_Max")
  public var ChaosNiagaraMax: String
}

@JsName("ERandomVelocityGenerationTypeEnum")
public external object RandomVelocityGenerationTypeEnum {
  @JsName("ChaosNiagara_RandomVelocityGenerationType_RandomDistribution")
  public var RandomDistribution: String

  @JsName("ChaosNiagara_RandomVelocityGenerationType_RandomDistributionWithStreamers")
  public var RandomDistributionWithStreamers: String

  @JsName("ChaosNiagara_RandomVelocityGenerationType_CollisionNormalBased")
  public var CollisionNormalBased: String

  @JsName("ChaosNiagara_Max")
  public var ChaosNiagaraMax: String
}

@JsName("EDebugTypeEnum")
public external object DebugTypeEnum {
  @JsName("ChaosNiagara_DebugType_NoDebug")
  public var NoDebug: String

  @JsName("ChaosNiagara_DebugType_ColorBySolver")
  public var ColorBySolver: String

  @JsName("ChaosNiagara_DebugType_ColorByParticleIndex")
  public var ColorByParticleIndex: String

  @JsName("ChaosNiagara_Max")
  public var ChaosNiagaraMax: String
}

public open external class NiagaraDataInterfaceChaosDestruction(
  outer: UObject,
) : NiagaraDataInterface {
  @JsName("ChaosSolverActorSet")
  public open var chaosSolverActorSet: Any

  @JsName("DataSourceType")
  public open var dataSourceType: String

  @JsName("DataProcessFrequency")
  public open var dataProcessFrequency: Number

  @JsName("MaxNumberOfDataEntriesToSpawn")
  public open var maxNumberOfDataEntriesToSpawn: Number

  @JsName("DoSpawn")
  public open var doSpawn: Boolean

  @JsName("SpawnMultiplierMinMax")
  public open var spawnMultiplierMinMax: Vector2d

  @JsName("SpawnChance")
  public open var spawnChance: Number

  @JsName("ImpulseToSpawnMinMax")
  public open var impulseToSpawnMinMax: Vector2d

  @JsName("SpeedToSpawnMinMax")
  public open var speedToSpawnMinMax: Vector2d

  @JsName("MassToSpawnMinMax")
  public open var massToSpawnMinMax: Vector2d

  @JsName("ExtentMinToSpawnMinMax")
  public open var extentMinToSpawnMinMax: Vector2d

  @JsName("ExtentMaxToSpawnMinMax")
  public open var extentMaxToSpawnMinMax: Vector2d

  @JsName("VolumeToSpawnMinMax")
  public open var volumeToSpawnMinMax: Vector2d

  @JsName("SolverTimeToSpawnMinMax")
  public open var solverTimeToSpawnMinMax: Vector2d

  @JsName("SurfaceTypeToSpawn")
  public open var surfaceTypeToSpawn: Number

  @JsName("LocationFilteringMode")
  public open var locationFilteringMode: String

  @JsName("LocationXToSpawn")
  public open var locationXToSpawn: String

  @JsName("LocationXToSpawnMinMax")
  public open var locationXToSpawnMinMax: Vector2d

  @JsName("LocationYToSpawn")
  public open var locationYToSpawn: String

  @JsName("LocationYToSpawnMinMax")
  public open var locationYToSpawnMinMax: Vector2d

  @JsName("LocationZToSpawn")
  public open var locationZToSpawn: String

  @JsName("LocationZToSpawnMinMax")
  public open var locationZToSpawnMinMax: Vector2d

  @JsName("TrailMinSpeedToSpawn")
  public open var trailMinSpeedToSpawn: Number

  @JsName("DataSortingType")
  public open var dataSortingType: String

  @JsName("bGetExternalCollisionData")
  public open var getExternalCollisionData: Boolean

  @JsName("DoSpatialHash")
  public open var doSpatialHash: Boolean

  @JsName("SpatialHashVolumeMin")
  public open var spatialHashVolumeMin: Vector

  @JsName("SpatialHashVolumeMax")
  public open var spatialHashVolumeMax: Vector

  @JsName("SpatialHashVolumeCellSize")
  public open var spatialHashVolumeCellSize: Vector

  @JsName("MaxDataPerCell")
  public open var maxDataPerCell: Number

  @JsName("bApplyMaterialsFilter")
  public open var applyMaterialsFilter: Boolean

  @JsName("ChaosBreakingMaterialSet")
  public open var chaosBreakingMaterialSet: Any

  @JsName("bGetExternalBreakingData")
  public open var getExternalBreakingData: Boolean

  @JsName("bGetExternalTrailingData")
  public open var getExternalTrailingData: Boolean

  @JsName("RandomPositionMagnitudeMinMax")
  public open var randomPositionMagnitudeMinMax: Vector2d

  @JsName("InheritedVelocityMultiplier")
  public open var inheritedVelocityMultiplier: Number

  @JsName("RandomVelocityGenerationType")
  public open var randomVelocityGenerationType: String

  @JsName("RandomVelocityMagnitudeMinMax")
  public open var randomVelocityMagnitudeMinMax: Vector2d

  @JsName("SpreadAngleMax")
  public open var spreadAngleMax: Number

  @JsName("VelocityOffsetMin")
  public open var velocityOffsetMin: Vector

  @JsName("VelocityOffsetMax")
  public open var velocityOffsetMax: Vector

  @JsName("FinalVelocityMagnitudeMinMax")
  public open var finalVelocityMagnitudeMinMax: Vector2d

  @JsName("MaxLatency")
  public open var maxLatency: Number

  @JsName("DebugType")
  public open var debugType: String

  @JsName("LastSpawnedPointID")
  public open var lastSpawnedPointId: Number

  @JsName("LastSpawnTime")
  public open var lastSpawnTime: Number

  @JsName("SolverTime")
  public open var solverTime: Number

  @JsName("TimeStampOfLastProcessedData")
  public open var timeStampOfLastProcessedData: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraDataInterfaceChaosDestruction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraDataInterfaceChaosDestruction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraDataInterfaceChaosDestruction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraDataInterfaceChaosDestruction

    @JsName("C")
    public fun copy(other: UObject): NiagaraDataInterfaceChaosDestruction

    @JsName("C")
    public fun copy(other: Any): NiagaraDataInterfaceChaosDestruction
  }
}

public open external class NiagaraDataInterfaceGeometryCollection(
  outer: UObject,
) : NiagaraDataInterface {
  @JsName("GeometryCollectionActor")
  public open var geometryCollectionActor: GeometryCollectionActor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraDataInterfaceGeometryCollection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraDataInterfaceGeometryCollection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraDataInterfaceGeometryCollection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraDataInterfaceGeometryCollection

    @JsName("C")
    public fun copy(other: UObject): NiagaraDataInterfaceGeometryCollection

    @JsName("C")
    public fun copy(other: Any): NiagaraDataInterfaceGeometryCollection
  }
}

public open external class NiagaraDataInterfacePhysicsField(
  outer: UObject,
) : NiagaraDataInterface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraDataInterfacePhysicsField

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraDataInterfacePhysicsField

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraDataInterfacePhysicsField

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraDataInterfacePhysicsField

    @JsName("C")
    public fun copy(other: UObject): NiagaraDataInterfacePhysicsField

    @JsName("C")
    public fun copy(other: Any): NiagaraDataInterfacePhysicsField
  }
}

public open external class ActorFactoryChaosSolver(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryChaosSolver

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryChaosSolver

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryChaosSolver

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryChaosSolver

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryChaosSolver

    @JsName("C")
    public fun copy(other: Any): ActorFactoryChaosSolver
  }
}

public open external class ChaosSolverFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ChaosSolverFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ChaosSolverFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ChaosSolverFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ChaosSolverFactory

    @JsName("C")
    public fun copy(other: UObject): ChaosSolverFactory

    @JsName("C")
    public fun copy(other: Any): ChaosSolverFactory
  }
}

public open external class MovieSceneGeometryCollectionParams {
  @JsName("GeometryCollectionCache")
  public open var geometryCollectionCache: SoftObjectPath

  @JsName("StartFrameOffset")
  public open var startFrameOffset: FrameNumber

  @JsName("EndFrameOffset")
  public open var endFrameOffset: FrameNumber

  @JsName("PlayRate")
  public open var playRate: Number

  public open fun clone(): MovieSceneGeometryCollectionParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneGeometryCollectionParams

    @JsName("C")
    public fun copy(other: Any): MovieSceneGeometryCollectionParams
  }
}

public open external class MovieSceneGeometryCollectionSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Params")
  public open var params: MovieSceneGeometryCollectionParams

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneGeometryCollectionSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneGeometryCollectionSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneGeometryCollectionSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneGeometryCollectionSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneGeometryCollectionSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneGeometryCollectionSection
  }
}

public open external class MovieSceneGeometryCollectionTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("AnimationSections")
  public open var animationSections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneGeometryCollectionTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneGeometryCollectionTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneGeometryCollectionTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneGeometryCollectionTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneGeometryCollectionTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneGeometryCollectionTrack
  }
}

public open external class ImgMediaSettings(
  outer: UObject,
) : UObject {
  @JsName("DefaultFrameRate")
  public open var defaultFrameRate: FrameRate

  @JsName("CacheBehindPercentage")
  public open var cacheBehindPercentage: Number

  @JsName("CacheSizeGB")
  public open var cacheSizeGb: Number

  @JsName("CacheThreads")
  public open var cacheThreads: Number

  @JsName("CacheThreadStackSizeKB")
  public open var cacheThreadStackSizeKb: Number

  @JsName("GlobalCacheSizeGB")
  public open var globalCacheSizeGb: Number

  @JsName("UseGlobalCache")
  public open var useGlobalCache: Boolean

  @JsName("ExrDecoderThreads")
  public open var exrDecoderThreads: Any

  @JsName("DefaultProxy")
  public open var defaultProxy: String

  @JsName("UseDefaultProxy")
  public open var useDefaultProxy: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImgMediaSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImgMediaSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImgMediaSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImgMediaSettings

    @JsName("C")
    public fun copy(other: UObject): ImgMediaSettings

    @JsName("C")
    public fun copy(other: Any): ImgMediaSettings
  }
}

public open external class ImgMediaSourceCustomizationSequenceProxy {
  public open fun clone(): ImgMediaSourceCustomizationSequenceProxy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ImgMediaSourceCustomizationSequenceProxy

    @JsName("C")
    public fun copy(other: Any): ImgMediaSourceCustomizationSequenceProxy
  }
}

@JsName("T$442")
public external interface OutProxiesProvider {
  @JsName("OutProxies")
  public var outProxies: Array<String>
}

public open external class ImgMediaSource : BaseMediaSource {
  @JsName("IsPathRelativeToProjectRoot")
  public open var isPathRelativeToProjectRoot: Boolean

  @JsName("FrameRateOverride")
  public open var frameRateOverride: FrameRate

  @JsName("ProxyOverride")
  public open var proxyOverride: String

  @JsName("bFillGapsInSequence")
  public open var fillGapsInSequence: Boolean

  @JsName("SequenceProxy")
  public open var sequenceProxy: ImgMediaSourceCustomizationSequenceProxy

  @JsName("SequencePath")
  public open var sequencePath: DirectoryPath

  @JsName("SetSequencePath")
  public open fun setSequencePath(path: String): Unit

  @JsName("SetMipLevelDistance")
  public open fun setMipLevelDistance(distance: Number): Unit

  @JsName("RemoveTargetObject")
  public open fun removeTargetObject(inActor: Actor): Unit

  @JsName("RemoveGlobalCamera")
  public open fun removeGlobalCamera(inActor: Actor): Unit

  @JsName("GetSequencePath")
  public open fun getSequencePath(): String

  @JsName("GetProxies")
  public open fun getProxies(outProxies: Array<String>): OutProxiesProvider

  @JsName("AddTargetObject")
  public open fun addTargetObject(inActor: Actor, width: Number): Unit

  @JsName("AddGlobalCamera")
  public open fun addGlobalCamera(inActor: Actor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImgMediaSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImgMediaSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImgMediaSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImgMediaSource

    @JsName("C")
    public fun copy(other: UObject): ImgMediaSource

    @JsName("C")
    public fun copy(other: Any): ImgMediaSource
  }
}

public open external class MovieSceneMediaPlayerPropertySection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("MediaSource")
  public open var mediaSource: MediaSource

  @JsName("bLoop")
  public open var loop: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMediaPlayerPropertySection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMediaPlayerPropertySection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMediaPlayerPropertySection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMediaPlayerPropertySection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMediaPlayerPropertySection

    @JsName("C")
    public fun copy(other: Any): MovieSceneMediaPlayerPropertySection
  }
}

public open external class MovieSceneMediaPlayerPropertyTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMediaPlayerPropertyTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMediaPlayerPropertyTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMediaPlayerPropertyTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMediaPlayerPropertyTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMediaPlayerPropertyTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneMediaPlayerPropertyTrack
  }
}

public open external class MovieSceneMediaSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("MediaSource")
  public open var mediaSource: MediaSource

  @JsName("bLooping")
  public open var looping: Boolean

  @JsName("StartFrameOffset")
  public open var startFrameOffset: FrameNumber

  @JsName("MediaTexture")
  public open var mediaTexture: MediaTexture

  @JsName("MediaSoundComponent")
  public open var mediaSoundComponent: MediaSoundComponent

  @JsName("bUseExternalMediaPlayer")
  public open var useExternalMediaPlayer: Boolean

  @JsName("ExternalMediaPlayer")
  public open var externalMediaPlayer: MediaPlayer

  @JsName("ThumbnailReferenceOffset")
  public open var thumbnailReferenceOffset: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMediaSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMediaSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMediaSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMediaSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMediaSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneMediaSection
  }
}

public open external class MovieSceneMediaTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("MediaSections")
  public open var mediaSections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMediaTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMediaTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMediaTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMediaTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMediaTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneMediaTrack
  }
}

@JsName("EAlembicSamplingType")
public external object AlembicSamplingType {
  @JsName("PerFrame")
  public var Frame: String

  @JsName("PerXFrames")
  public var XFrames: String

  @JsName("PerTimeStep")
  public var TimeStep: String

  @JsName("EAlembicSamplingType_MAX")
  public var Max: String
}

public open external class AbcSamplingSettings {
  @JsName("SamplingType")
  public open var samplingType: String

  @JsName("FrameSteps")
  public open var frameSteps: Number

  @JsName("TimeSteps")
  public open var timeSteps: Number

  @JsName("FrameStart")
  public open var frameStart: Number

  @JsName("FrameEnd")
  public open var frameEnd: Number

  @JsName("bSkipEmpty")
  public open var skipEmpty: Boolean

  public open fun clone(): AbcSamplingSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AbcSamplingSettings

    @JsName("C")
    public fun copy(other: Any): AbcSamplingSettings
  }
}

public open external class AbcNormalGenerationSettings {
  @JsName("bForceOneSmoothingGroupPerObject")
  public open var forceOneSmoothingGroupPerObject: Boolean

  @JsName("HardEdgeAngleThreshold")
  public open var hardEdgeAngleThreshold: Number

  @JsName("bRecomputeNormals")
  public open var recomputeNormals: Boolean

  @JsName("bIgnoreDegenerateTriangles")
  public open var ignoreDegenerateTriangles: Boolean

  @JsName("bSkipComputingTangents")
  public open var skipComputingTangents: Boolean

  public open fun clone(): AbcNormalGenerationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AbcNormalGenerationSettings

    @JsName("C")
    public fun copy(other: Any): AbcNormalGenerationSettings
  }
}

public open external class AbcMaterialSettings {
  @JsName("bCreateMaterials")
  public open var createMaterials: Boolean

  @JsName("bFindMaterials")
  public open var findMaterials: Boolean

  public open fun clone(): AbcMaterialSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AbcMaterialSettings

    @JsName("C")
    public fun copy(other: Any): AbcMaterialSettings
  }
}

@JsName("EBaseCalculationType")
public external object BaseCalculationType {
  public var None: String

  public var PercentageBased: String

  public var FixedNumber: String

  public var NoCompression: String

  @JsName("EBaseCalculationType_MAX")
  public var Max: String
}

public open external class AbcCompressionSettings {
  @JsName("bMergeMeshes")
  public open var mergeMeshes: Boolean

  @JsName("bBakeMatrixAnimation")
  public open var bakeMatrixAnimation: Boolean

  @JsName("BaseCalculationType")
  public open var baseCalculationType: String

  @JsName("PercentageOfTotalBases")
  public open var percentageOfTotalBases: Number

  @JsName("MaxNumberOfBases")
  public open var maxNumberOfBases: Number

  @JsName("MinimumNumberOfVertexInfluencePercentage")
  public open var minimumNumberOfVertexInfluencePercentage: Number

  public open fun clone(): AbcCompressionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AbcCompressionSettings

    @JsName("C")
    public fun copy(other: Any): AbcCompressionSettings
  }
}

public open external class AbcStaticMeshSettings {
  @JsName("bMergeMeshes")
  public open var mergeMeshes: Boolean

  @JsName("bPropagateMatrixTransformations")
  public open var propagateMatrixTransformations: Boolean

  @JsName("bGenerateLightmapUVs")
  public open var generateLightmapUVs: Boolean

  public open fun clone(): AbcStaticMeshSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AbcStaticMeshSettings

    @JsName("C")
    public fun copy(other: Any): AbcStaticMeshSettings
  }
}

@JsName("EAbcGeometryCacheMotionVectorsImport")
public external object AbcGeometryCacheMotionVectorsImport {
  public var NoMotionVectors: String

  public var ImportAbcVelocitiesAsMotionVectors: String

  public var CalculateMotionVectorsDuringImport: String

  @JsName("EAbcGeometryCacheMotionVectorsImport_MAX")
  public var Max: String
}

public open external class AbcGeometryCacheSettings {
  @JsName("bFlattenTracks")
  public open var flattenTracks: Boolean

  @JsName("bStoreImportedVertexNumbers")
  public open var storeImportedVertexNumbers: Boolean

  @JsName("bApplyConstantTopologyOptimizations")
  public open var applyConstantTopologyOptimizations: Boolean

  @JsName("bCalculateMotionVectorsDuringImport")
  public open var calculateMotionVectorsDuringImport: Boolean

  @JsName("MotionVectors")
  public open var motionVectors: String

  @JsName("bOptimizeIndexBuffers")
  public open var optimizeIndexBuffers: Boolean

  @JsName("CompressedPositionPrecision")
  public open var compressedPositionPrecision: Number

  @JsName("CompressedTextureCoordinatesNumberOfBits")
  public open var compressedTextureCoordinatesNumberOfBits: Number

  public open fun clone(): AbcGeometryCacheSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AbcGeometryCacheSettings

    @JsName("C")
    public fun copy(other: Any): AbcGeometryCacheSettings
  }
}

@JsName("EAbcConversionPreset")
public external object AbcConversionPreset {
  public var Maya: String

  public var Max: String

  public var Custom: String

  @JsName("EAbcConversionPreset_MAX")
  public var _Max: String
}

public open external class AbcConversionSettings {
  @JsName("Preset")
  public open var preset: String

  @JsName("bFlipU")
  public open var flipU: Boolean

  @JsName("bFlipV")
  public open var flipV: Boolean

  @JsName("Scale")
  public open var scale: Vector

  @JsName("Rotation")
  public open var rotation: Vector

  public open fun clone(): AbcConversionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AbcConversionSettings

    @JsName("C")
    public fun copy(other: Any): AbcConversionSettings
  }
}

public open external class AbcAssetImportData(
  outer: UObject,
) : AssetImportData {
  @JsName("TrackNames")
  public open var trackNames: Array<String>

  @JsName("SamplingSettings")
  public open var samplingSettings: AbcSamplingSettings

  @JsName("NormalGenerationSettings")
  public open var normalGenerationSettings: AbcNormalGenerationSettings

  @JsName("MaterialSettings")
  public open var materialSettings: AbcMaterialSettings

  @JsName("CompressionSettings")
  public open var compressionSettings: AbcCompressionSettings

  @JsName("StaticMeshSettings")
  public open var staticMeshSettings: AbcStaticMeshSettings

  @JsName("GeometryCacheSettings")
  public open var geometryCacheSettings: AbcGeometryCacheSettings

  @JsName("ConversionSettings")
  public open var conversionSettings: AbcConversionSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AbcAssetImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AbcAssetImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AbcAssetImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AbcAssetImportData

    @JsName("C")
    public fun copy(other: UObject): AbcAssetImportData

    @JsName("C")
    public fun copy(other: Any): AbcAssetImportData
  }
}

@JsName("EAlembicImportType")
public external object AlembicImportType {
  public var StaticMesh: String

  public var GeometryCache: String

  public var Skeletal: String

  @JsName("EAlembicImportType_MAX")
  public var Max: String
}

public open external class AbcImportSettings(
  outer: UObject,
) : UObject {
  @JsName("ImportType")
  public open var importType: String

  @JsName("SamplingSettings")
  public open var samplingSettings: AbcSamplingSettings

  @JsName("NormalGenerationSettings")
  public open var normalGenerationSettings: AbcNormalGenerationSettings

  @JsName("MaterialSettings")
  public open var materialSettings: AbcMaterialSettings

  @JsName("CompressionSettings")
  public open var compressionSettings: AbcCompressionSettings

  @JsName("StaticMeshSettings")
  public open var staticMeshSettings: AbcStaticMeshSettings

  @JsName("GeometryCacheSettings")
  public open var geometryCacheSettings: AbcGeometryCacheSettings

  @JsName("ConversionSettings")
  public open var conversionSettings: AbcConversionSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AbcImportSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AbcImportSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AbcImportSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AbcImportSettings

    @JsName("C")
    public fun copy(other: UObject): AbcImportSettings

    @JsName("C")
    public fun copy(other: Any): AbcImportSettings
  }
}

public open external class AlembicTestCommandlet(
  outer: UObject,
) : Commandlet {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AlembicTestCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AlembicTestCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AlembicTestCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AlembicTestCommandlet

    @JsName("C")
    public fun copy(other: UObject): AlembicTestCommandlet

    @JsName("C")
    public fun copy(other: Any): AlembicTestCommandlet
  }
}

public open external class AlembicImportFactory(
  outer: UObject,
) : Factory {
  @JsName("ImportSettings")
  public open var importSettings: AbcImportSettings

  @JsName("bShowOption")
  public open var showOption: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AlembicImportFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AlembicImportFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AlembicImportFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AlembicImportFactory

    @JsName("C")
    public fun copy(other: UObject): AlembicImportFactory

    @JsName("C")
    public fun copy(other: Any): AlembicImportFactory
  }
}

public open external class ActorFactoryGeometryCache(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryGeometryCache

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryGeometryCache

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryGeometryCache

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryGeometryCache

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryGeometryCache

    @JsName("C")
    public fun copy(other: Any): ActorFactoryGeometryCache
  }
}

public open external class GeometryCacheThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCacheThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCacheThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCacheThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCacheThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): GeometryCacheThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): GeometryCacheThumbnailRenderer
  }
}

public open external class SequencerToolsFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerToolsFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerToolsFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerToolsFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerToolsFunctionLibrary

    @JsName("IsRenderingMovie")
    public fun isRenderingMovie(): Boolean

    @JsName("IsEventEndpointValid")
    public fun isEventEndpointValid(inEndpoint: SequencerQuickBindingResult): Boolean

    @JsName("ImportLevelSequenceFBX")
    public fun importLevelSequenceFbx(
      inWorld: World,
      inSequence: LevelSequence,
      inBindings: Array<SequencerBindingProxy>,
      inImportFbxSettings: MovieSceneUserImportFbxSettings,
      inImportFilename: String,
    ): Boolean

    @JsName("ImportFBXToControlRig")
    public fun importFbxToControlRig(
      world: World,
      inSequence: LevelSequence,
      actorWithControlRigTrack: String,
      selectedControlRigNames: Array<String>,
      importFbxControlRigSettings: MovieSceneUserImportFbxControlRigSettings,
      importFilename: String,
    ): Boolean

    @JsName("GetObjectBindings")
    public fun getObjectBindings(
      inWorld: World,
      inSequence: LevelSequence,
      inObject: Array<UObject>,
      inRange: SequencerScriptingRange,
    ): Array<SequencerBoundObjects>

    @JsName("GetBoundObjects")
    public fun getBoundObjects(
      inWorld: World,
      inSequence: LevelSequence,
      inBindings: Array<SequencerBindingProxy>,
      inRange: SequencerScriptingRange,
    ): Array<SequencerBoundObjects>

    @JsName("ExportLevelSequenceFBX")
    public fun exportLevelSequenceFbx(
      inWorld: World,
      inSequence: LevelSequence,
      inBindings: Array<SequencerBindingProxy>,
      inMasterTracks: Array<MovieSceneTrack>,
      overrideOptions: FbxExportOption,
      inFbxFileName: String,
    ): Boolean

    @JsName("ExportAnimSequence")
    public fun exportAnimSequence(
      world: World,
      sequence: LevelSequence,
      animSequence: AnimSequence,
      exportOption: AnimSeqExportOption,
      binding: SequencerBindingProxy,
    ): Boolean

    @JsName("CreateQuickBinding")
    public fun createQuickBinding(
      inSequence: MovieSceneSequence,
      inObject: UObject,
      inFunctionName: String,
      callInEditor: Boolean,
    ): SequencerQuickBindingResult

    @JsName("CreateEvent")
    public fun createEvent(
      inSequence: MovieSceneSequence,
      inSection: MovieSceneEventSectionBase,
      inEndpoint: SequencerQuickBindingResult,
      inPayload: Array<String>,
    ): MovieSceneEvent

    @JsName("CancelMovieRender")
    public fun cancelMovieRender(): Unit

    @JsName("C")
    public fun copy(other: UObject): SequencerToolsFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): SequencerToolsFunctionLibrary
  }
}

@JsName("OnRenderMovieStopped__PythonCallable")
public open external class OnRenderMovieStoppedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnRenderMovieStoppedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnRenderMovieStoppedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnRenderMovieStoppedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnRenderMovieStoppedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnRenderMovieStoppedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnRenderMovieStoppedPythonCallable
  }
}

public open external class LayersBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LayersBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LayersBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LayersBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LayersBlueprintLibrary

    @JsName("RemoveActorFromLayer")
    public fun removeActorFromLayer(inActor: Actor, layer: ActorLayer): Unit

    @JsName("GetActors")
    public fun getActors(worldContextObject: UObject, actorLayer: ActorLayer): Array<Actor>

    @JsName("AddActorToLayer")
    public fun addActorToLayer(inActor: Actor, layer: ActorLayer): Unit

    @JsName("C")
    public fun copy(other: UObject): LayersBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): LayersBlueprintLibrary
  }
}

public open external class AndroidPermissionCallbackProxy(
  outer: UObject,
) : UObject {
  @JsName("OnPermissionsGrantedDynamicDelegate")
  public open var onPermissionsGrantedDynamicDelegate:
      UnrealEngineMulticastDelegate<(Permissions: Array<String>,
      GrantResults: Array<Boolean>) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AndroidPermissionCallbackProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AndroidPermissionCallbackProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AndroidPermissionCallbackProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AndroidPermissionCallbackProxy

    @JsName("C")
    public fun copy(other: UObject): AndroidPermissionCallbackProxy

    @JsName("C")
    public fun copy(other: Any): AndroidPermissionCallbackProxy
  }
}

public open external class AndroidPermissionFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AndroidPermissionFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AndroidPermissionFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AndroidPermissionFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AndroidPermissionFunctionLibrary

    @JsName("CheckPermission")
    public fun checkPermission(permission: String): Boolean

    @JsName("AcquirePermissions")
    public fun acquirePermissions(permissions: Array<String>): AndroidPermissionCallbackProxy

    @JsName("C")
    public fun copy(other: UObject): AndroidPermissionFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): AndroidPermissionFunctionLibrary
  }
}

@JsName("AndroidPermissionDynamicDelegate__PythonCallable")
public open external class AndroidPermissionDynamicDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AndroidPermissionDynamicDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        AndroidPermissionDynamicDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AndroidPermissionDynamicDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AndroidPermissionDynamicDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): AndroidPermissionDynamicDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): AndroidPermissionDynamicDelegatePythonCallable
  }
}

public open external class AppleImageUtilsImageConversionResult {
  @JsName("Error")
  public open var error: String

  @JsName("ImageData")
  public open var imageData: Array<Number>

  public open fun clone(): AppleImageUtilsImageConversionResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AppleImageUtilsImageConversionResult

    @JsName("C")
    public fun copy(other: Any): AppleImageUtilsImageConversionResult
  }
}

@JsName("ETextureRotationDirection")
public external object TextureRotationDirection {
  public var None: String

  public var Left: String

  public var Right: String

  public var Down: String

  public var LeftMirrored: String

  public var RightMirrored: String

  public var DownMirrored: String

  public var UpMirrored: String

  @JsName("ETextureRotationDirection_MAX")
  public var Max: String
}

public open external class AppleImageUtilsBaseAsyncTaskBlueprintProxy(
  outer: UObject,
) : UObject {
  @JsName("OnSuccess")
  public open var onSuccess:
      UnrealEngineMulticastDelegate<(ConversionResult: AppleImageUtilsImageConversionResult) -> Unit>

  @JsName("OnFailure")
  public open var onFailure:
      UnrealEngineMulticastDelegate<(ConversionResult: AppleImageUtilsImageConversionResult) -> Unit>

  @JsName("ConversionResult")
  public open var conversionResult: AppleImageUtilsImageConversionResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("CreateProxyObjectForConvertToTIFF")
    public fun createProxyObjectForConvertToTiff(
      sourceImage: Texture,
      wantColor: Boolean,
      useGpu: Boolean,
      scale: Number,
      rotate: String,
    ): AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("CreateProxyObjectForConvertToPNG")
    public fun createProxyObjectForConvertToPng(
      sourceImage: Texture,
      wantColor: Boolean,
      useGpu: Boolean,
      scale: Number,
      rotate: String,
    ): AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("CreateProxyObjectForConvertToJPEG")
    public fun createProxyObjectForConvertToJpeg(
      sourceImage: Texture,
      quality: Number,
      wantColor: Boolean,
      useGpu: Boolean,
      scale: Number,
      rotate: String,
    ): AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("CreateProxyObjectForConvertToHEIF")
    public fun createProxyObjectForConvertToHeif(
      sourceImage: Texture,
      quality: Number,
      wantColor: Boolean,
      useGpu: Boolean,
      scale: Number,
      rotate: String,
    ): AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: UObject): AppleImageUtilsBaseAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: Any): AppleImageUtilsBaseAsyncTaskBlueprintProxy
  }
}

public open external class AppleImageInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AppleImageInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AppleImageInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AppleImageInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AppleImageInterface

    @JsName("C")
    public fun copy(other: UObject): AppleImageInterface

    @JsName("C")
    public fun copy(other: Any): AppleImageInterface
  }
}

@JsName("AppleImageConversionDelegate__PythonCallable")
public open external class AppleImageConversionDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AppleImageConversionDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        AppleImageConversionDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AppleImageConversionDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AppleImageConversionDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): AppleImageConversionDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): AppleImageConversionDelegatePythonCallable
  }
}

@JsName("K2Node_ConvertToJPEG")
public open external class K2NodeConvertToJpeg(
  outer: UObject,
) : K2NodeBaseAsyncTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeConvertToJpeg

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeConvertToJpeg

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeConvertToJpeg

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeConvertToJpeg

    @JsName("C")
    public fun copy(other: UObject): K2NodeConvertToJpeg

    @JsName("C")
    public fun copy(other: Any): K2NodeConvertToJpeg
  }
}

@JsName("K2Node_ConvertToHEIF")
public open external class K2NodeConvertToHeif(
  outer: UObject,
) : K2NodeBaseAsyncTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeConvertToHeif

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeConvertToHeif

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeConvertToHeif

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeConvertToHeif

    @JsName("C")
    public fun copy(other: UObject): K2NodeConvertToHeif

    @JsName("C")
    public fun copy(other: Any): K2NodeConvertToHeif
  }
}

@JsName("K2Node_ConvertToTIFF")
public open external class K2NodeConvertToTiff(
  outer: UObject,
) : K2NodeBaseAsyncTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeConvertToTiff

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeConvertToTiff

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeConvertToTiff

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeConvertToTiff

    @JsName("C")
    public fun copy(other: UObject): K2NodeConvertToTiff

    @JsName("C")
    public fun copy(other: Any): K2NodeConvertToTiff
  }
}

@JsName("K2Node_ConvertToPNG")
public open external class K2NodeConvertToPng(
  outer: UObject,
) : K2NodeBaseAsyncTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeConvertToPng

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeConvertToPng

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeConvertToPng

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeConvertToPng

    @JsName("C")
    public fun copy(other: UObject): K2NodeConvertToPng

    @JsName("C")
    public fun copy(other: Any): K2NodeConvertToPng
  }
}

public open external class ArchVisCharacter(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Character {
  @JsName("LookUpAxisName")
  public open var lookUpAxisName: String

  @JsName("LookUpAtRateAxisName")
  public open var lookUpAtRateAxisName: String

  @JsName("TurnAxisName")
  public open var turnAxisName: String

  @JsName("TurnAtRateAxisName")
  public open var turnAtRateAxisName: String

  @JsName("MoveForwardAxisName")
  public open var moveForwardAxisName: String

  @JsName("MoveRightAxisName")
  public open var moveRightAxisName: String

  @JsName("MouseSensitivityScale_Pitch")
  public open var mouseSensitivityScalePitch: Number

  @JsName("MouseSensitivityScale_Yaw")
  public open var mouseSensitivityScaleYaw: Number

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArchVisCharacter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArchVisCharacter

    @JsName("C")
    public fun copy(other: UObject): ArchVisCharacter

    @JsName("C")
    public fun copy(other: Any): ArchVisCharacter
  }
}

public open external class ArchVisCharMovementComponent(
  outer: UObject,
) : CharacterMovementComponent {
  @JsName("RotationalAcceleration")
  public open var rotationalAcceleration: Rotator

  @JsName("RotationalDeceleration")
  public open var rotationalDeceleration: Rotator

  @JsName("MaxRotationalVelocity")
  public open var maxRotationalVelocity: Rotator

  @JsName("MinPitch")
  public open var minPitch: Number

  @JsName("MaxPitch")
  public open var maxPitch: Number

  @JsName("WalkingFriction")
  public open var walkingFriction: Number

  @JsName("WalkingSpeed")
  public open var walkingSpeed: Number

  @JsName("WalkingAcceleration")
  public open var walkingAcceleration: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArchVisCharMovementComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArchVisCharMovementComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArchVisCharMovementComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArchVisCharMovementComponent

    @JsName("C")
    public fun copy(other: UObject): ArchVisCharMovementComponent

    @JsName("C")
    public fun copy(other: Any): ArchVisCharMovementComponent
  }
}

@JsName("ECollectionScriptingShareType")
public external object CollectionScriptingShareType {
  public var Local: String

  public var Private: String

  public var Shared: String

  @JsName("ECollectionScriptingShareType_MAX")
  public var Max: String
}

public open external class AssetTagsSubsystem(
  outer: UObject,
) : EngineSubsystem {
  @JsName("ReparentCollection")
  public open fun reparentCollection(name: String, newParentName: String): Boolean

  @JsName("RenameCollection")
  public open fun renameCollection(name: String, newName: String): Boolean

  @JsName("RemoveAssetsFromCollection")
  public open fun removeAssetsFromCollection(name: String, assetPathNames: Array<String>): Boolean

  @JsName("RemoveAssetPtrsFromCollection")
  public open fun removeAssetPtrsFromCollection(name: String, assetPtrs: Array<UObject>): Boolean

  @JsName("RemoveAssetPtrFromCollection")
  public open fun removeAssetPtrFromCollection(name: String, assetPtr: UObject): Boolean

  @JsName("RemoveAssetFromCollection")
  public open fun removeAssetFromCollection(name: String, assetPathName: String): Boolean

  @JsName("RemoveAssetDatasFromCollection")
  public open fun removeAssetDatasFromCollection(name: String, assetDatas: Array<AssetData>):
      Boolean

  @JsName("RemoveAssetDataFromCollection")
  public open fun removeAssetDataFromCollection(name: String, assetData: AssetData): Boolean

  @JsName("GetCollectionsContainingAssetPtr")
  public open fun getCollectionsContainingAssetPtr(assetPtr: UObject): Array<String>

  @JsName("GetCollectionsContainingAssetData")
  public open fun getCollectionsContainingAssetData(assetData: AssetData): Array<String>

  @JsName("GetCollectionsContainingAsset")
  public open fun getCollectionsContainingAsset(assetPathName: String): Array<String>

  @JsName("GetCollections")
  public open fun getCollections(): Array<String>

  @JsName("GetAssetsInCollection")
  public open fun getAssetsInCollection(name: String): Array<AssetData>

  @JsName("EmptyCollection")
  public open fun emptyCollection(name: String): Boolean

  @JsName("DestroyCollection")
  public open fun destroyCollection(name: String): Boolean

  @JsName("CreateCollection")
  public open fun createCollection(name: String, shareType: String): Boolean

  @JsName("CollectionExists")
  public open fun collectionExists(name: String): Boolean

  @JsName("AddAssetToCollection")
  public open fun addAssetToCollection(name: String, assetPathName: String): Boolean

  @JsName("AddAssetsToCollection")
  public open fun addAssetsToCollection(name: String, assetPathNames: Array<String>): Boolean

  @JsName("AddAssetPtrToCollection")
  public open fun addAssetPtrToCollection(name: String, assetPtr: UObject): Boolean

  @JsName("AddAssetPtrsToCollection")
  public open fun addAssetPtrsToCollection(name: String, assetPtrs: Array<UObject>): Boolean

  @JsName("AddAssetDataToCollection")
  public open fun addAssetDataToCollection(name: String, assetData: AssetData): Boolean

  @JsName("AddAssetDatasToCollection")
  public open fun addAssetDatasToCollection(name: String, assetDatas: Array<AssetData>): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetTagsSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetTagsSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetTagsSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetTagsSubsystem

    @JsName("C")
    public fun copy(other: UObject): AssetTagsSubsystem

    @JsName("C")
    public fun copy(other: Any): AssetTagsSubsystem
  }
}

public open external class AudioCaptureDeviceInfo {
  @JsName("DeviceName")
  public open var deviceName: String

  @JsName("NumInputChannels")
  public open var numInputChannels: Number

  @JsName("SampleRate")
  public open var sampleRate: Number

  public open fun clone(): AudioCaptureDeviceInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioCaptureDeviceInfo

    @JsName("C")
    public fun copy(other: Any): AudioCaptureDeviceInfo
  }
}

@JsName("T$443")
public external interface Object443 {
  @JsName("OutInfo")
  public var outInfo: AudioCaptureDeviceInfo

  @JsName("$")
  public var value: Boolean
}

public open external class AudioCapture(
  outer: UObject,
) : AudioGenerator {
  @JsName("StopCapturingAudio")
  public open fun stopCapturingAudio(): Unit

  @JsName("StartCapturingAudio")
  public open fun startCapturingAudio(): Unit

  @JsName("IsCapturingAudio")
  public open fun isCapturingAudio(): Boolean

  @JsName("GetAudioCaptureDeviceInfo")
  public open fun getAudioCaptureDeviceInfo(outInfo: AudioCaptureDeviceInfo): Object443

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioCapture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioCapture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioCapture

    @JsName("C")
    public fun copy(other: UObject): AudioCapture

    @JsName("C")
    public fun copy(other: Any): AudioCapture
  }
}

public open external class AudioCaptureFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioCaptureFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioCaptureFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioCaptureFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioCaptureFunctionLibrary

    @JsName("CreateAudioCapture")
    public fun createAudioCapture(): AudioCapture

    @JsName("C")
    public fun copy(other: UObject): AudioCaptureFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): AudioCaptureFunctionLibrary
  }
}

public open external class AudioCaptureBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioCaptureBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioCaptureBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioCaptureBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioCaptureBlueprintLibrary

    @JsName("Conv_AudioInputDeviceInfoToString")
    public fun convertAudioInputDeviceInfoToString(info: AudioInputDeviceInfo): String

    @JsName("C")
    public fun copy(other: UObject): AudioCaptureBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): AudioCaptureBlueprintLibrary
  }
}

public open external class AudioCaptureComponent(
  outer: UObject,
) : SynthComponent {
  @JsName("JitterLatencyFrames")
  public open var jitterLatencyFrames: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioCaptureComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioCaptureComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioCaptureComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioCaptureComponent

    @JsName("C")
    public fun copy(other: UObject): AudioCaptureComponent

    @JsName("C")
    public fun copy(other: Any): AudioCaptureComponent
  }
}

@JsName("OnAudioInputDevicesObtained__PythonCallable")
public open external class OnAudioInputDevicesObtainedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnAudioInputDevicesObtainedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnAudioInputDevicesObtainedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnAudioInputDevicesObtainedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnAudioInputDevicesObtainedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnAudioInputDevicesObtainedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnAudioInputDevicesObtainedPythonCallable
  }
}

@JsName("T$444")
public external interface LocationsProvider {
  @JsName("Locations")
  public var locations: Array<Vector>
}

public open external class CableComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("bAttachStart")
  public open var attachStart: Boolean

  @JsName("bAttachEnd")
  public open var attachEnd: Boolean

  @JsName("AttachEndTo")
  public open var attachEndTo: ComponentReference

  @JsName("AttachEndToSocketName")
  public open var attachEndToSocketName: String

  @JsName("EndLocation")
  public open var endLocation: Vector

  @JsName("CableLength")
  public open var cableLength: Number

  @JsName("NumSegments")
  public open var numSegments: Number

  @JsName("SubstepTime")
  public open var substepTime: Number

  @JsName("SolverIterations")
  public open var solverIterations: Number

  @JsName("bEnableStiffness")
  public open var enableStiffness: Boolean

  @JsName("bUseSubstepping")
  public open var useSubstepping: Boolean

  @JsName("bSkipCableUpdateWhenNotVisible")
  public open var skipCableUpdateWhenNotVisible: Boolean

  @JsName("bSkipCableUpdateWhenNotOwnerRecentlyRendered")
  public open var skipCableUpdateWhenNotOwnerRecentlyRendered: Boolean

  @JsName("bEnableCollision")
  public open var enableCollision: Boolean

  @JsName("CollisionFriction")
  public open var collisionFriction: Number

  @JsName("CableForce")
  public open var cableForce: Vector

  @JsName("CableGravityScale")
  public open var cableGravityScale: Number

  @JsName("CableWidth")
  public open var cableWidth: Number

  @JsName("NumSides")
  public open var numSides: Number

  @JsName("TileMaterial")
  public open var tileMaterial: Number

  @JsName("SetAttachEndToComponent")
  public open fun setAttachEndToComponent(component: SceneComponent, socketName: String): Unit

  @JsName("SetAttachEndTo")
  public open fun setAttachEndTo(
    actor: Actor,
    componentProperty: String,
    socketName: String,
  ): Unit

  @JsName("GetCableParticleLocations")
  public open fun getCableParticleLocations(locations: Array<Vector>): LocationsProvider

  @JsName("GetAttachedComponent")
  public open fun getAttachedComponent(): SceneComponent

  @JsName("GetAttachedActor")
  public open fun getAttachedActor(): Actor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CableComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CableComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CableComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CableComponent

    @JsName("C")
    public fun copy(other: UObject): CableComponent

    @JsName("C")
    public fun copy(other: Any): CableComponent
  }
}

public open external class CableActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("CableComponent")
  public open var cableComponent: CableComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CableActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CableActor

    @JsName("C")
    public fun copy(other: UObject): CableActor

    @JsName("C")
    public fun copy(other: Any): CableActor
  }
}

public open external class CustomMeshTriangle {
  @JsName("Vertex0")
  public open var vertex0: Vector

  @JsName("Vertex1")
  public open var vertex1: Vector

  @JsName("Vertex2")
  public open var vertex2: Vector

  public open fun clone(): CustomMeshTriangle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomMeshTriangle

    @JsName("C")
    public fun copy(other: Any): CustomMeshTriangle
  }
}

public open external class CustomMeshComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("SetCustomMeshTriangles")
  public open fun setCustomMeshTriangles(triangles: Array<CustomMeshTriangle>): Boolean

  @JsName("ClearCustomMeshTriangles")
  public open fun clearCustomMeshTriangles(): Unit

  @JsName("AddCustomMeshTriangles")
  public open fun addCustomMeshTriangles(triangles: Array<CustomMeshTriangle>): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CustomMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CustomMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CustomMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CustomMeshComponent

    @JsName("C")
    public fun copy(other: UObject): CustomMeshComponent

    @JsName("C")
    public fun copy(other: Any): CustomMeshComponent
  }
}

public open external class MovieSceneGeometryCacheParams {
  @JsName("GeometryCacheAsset")
  public open var geometryCacheAsset: GeometryCache

  @JsName("FirstLoopStartFrameOffset")
  public open var firstLoopStartFrameOffset: FrameNumber

  @JsName("StartFrameOffset")
  public open var startFrameOffset: FrameNumber

  @JsName("EndFrameOffset")
  public open var endFrameOffset: FrameNumber

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("bReverse")
  public open var reverse: Boolean

  @JsName("StartOffset")
  public open var startOffset: Number

  @JsName("EndOffset")
  public open var endOffset: Number

  @JsName("GeometryCache")
  public open var geometryCache: SoftObjectPath

  public open fun clone(): MovieSceneGeometryCacheParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneGeometryCacheParams

    @JsName("C")
    public fun copy(other: Any): MovieSceneGeometryCacheParams
  }
}

public open external class MovieSceneGeometryCacheSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("Params")
  public open var params: MovieSceneGeometryCacheParams

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneGeometryCacheSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneGeometryCacheSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneGeometryCacheSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneGeometryCacheSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneGeometryCacheSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneGeometryCacheSection
  }
}

public open external class MovieSceneGeometryCacheTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("AnimationSections")
  public open var animationSections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneGeometryCacheTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneGeometryCacheTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneGeometryCacheTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneGeometryCacheTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneGeometryCacheTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneGeometryCacheTrack
  }
}

public open external class GeometryCacheStreamerSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("LookAheadBuffer")
  public open var lookAheadBuffer: Number

  @JsName("MaxMemoryAllowed")
  public open var maxMemoryAllowed: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeometryCacheStreamerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeometryCacheStreamerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeometryCacheStreamerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeometryCacheStreamerSettings

    @JsName("C")
    public fun copy(other: UObject): GeometryCacheStreamerSettings

    @JsName("C")
    public fun copy(other: Any): GeometryCacheStreamerSettings
  }
}

@JsName("EGooglePADErrorCode")
public external object GooglePADErrorCode {
  @JsName("AssetPack_NO_ERROR")
  public var Noerror: String

  @JsName("AssetPack_APP_UNAVAILABLE")
  public var Appunavailable: String

  @JsName("AssetPack_UNAVAILABLE")
  public var UNAVAILABLE: String

  @JsName("AssetPack_INVALID_REQUEST")
  public var Invalidrequest: String

  @JsName("AssetPack_DOWNLOAD_NOT_FOUND")
  public var Downloadnotfound: String

  @JsName("AssetPack_API_NOT_AVAILABLE")
  public var Apinotavailable: String

  @JsName("AssetPack_NETWORK_ERROR")
  public var Networkerror: String

  @JsName("AssetPack_ACCESS_DENIED")
  public var Accessdenied: String

  @JsName("AssetPack_INSUFFICIENT_STORAGE")
  public var Insufficientstorage: String

  @JsName("AssetPack_PLAY_STORE_NOT_FOUND")
  public var Playstorenotfound: String

  @JsName("AssetPack_NETWORK_UNRESTRICTED")
  public var Networkunrestricted: String

  @JsName("AssetPack_INTERNAL_ERROR")
  public var Internalerror: String

  @JsName("AssetPack_INITIALIZATION_NEEDED")
  public var Initializationneeded: String

  @JsName("AssetPack_INITIALIZATION_FAILED")
  public var Initializationfailed: String

  @JsName("AssetPack_MAX")
  public var Max: String
}

@JsName("EGooglePADStorageMethod")
public external object GooglePADStorageMethod {
  @JsName("AssetPack_STORAGE_FILES")
  public var FILES: String

  @JsName("AssetPack_STORAGE_APK")
  public var APK: String

  @JsName("AssetPack_STORAGE_UNKNOWN")
  public var UNKNOWN: String

  @JsName("AssetPack_STORAGE_NOT_INSTALLED")
  public var Notinstalled: String

  @JsName("AssetPack_STORAGE_MAX")
  public var Max: String
}

@JsName("EGooglePADCellularDataConfirmStatus")
public external object GooglePADCellularDataConfirmStatus {
  @JsName("AssetPack_CONFIRM_UNKNOWN")
  public var UNKNOWN: String

  @JsName("AssetPack_CONFIRM_PENDING")
  public var PENDING: String

  @JsName("AssetPack_CONFIRM_USER_APPROVED")
  public var Userapproved: String

  @JsName("AssetPack_CONFIRM_USER_CANCELED")
  public var Usercanceled: String

  @JsName("AssetPack_CONFIRM_MAX")
  public var Max: String
}

@JsName("EGooglePADDownloadStatus")
public external object GooglePADDownloadStatus {
  @JsName("AssetPack_UNKNOWN")
  public var UNKNOWN: String

  @JsName("AssetPack_DOWNLOAD_PENDING")
  public var Downloadpending: String

  @JsName("AssetPack_DOWNLOADING")
  public var DOWNLOADING: String

  @JsName("AssetPack_TRANSFERRING")
  public var TRANSFERRING: String

  @JsName("AssetPack_DOWNLOAD_COMPLETED")
  public var Downloadcompleted: String

  @JsName("AssetPack_DOWNLOAD_FAILED")
  public var Downloadfailed: String

  @JsName("AssetPack_DOWNLOAD_CANCELED")
  public var Downloadcanceled: String

  @JsName("AssetPack_WAITING_FOR_WIFI")
  public var Waitingforwifi: String

  @JsName("AssetPack_NOT_INSTALLED")
  public var Notinstalled: String

  @JsName("AssetPack_INFO_PENDING")
  public var Infopending: String

  @JsName("AssetPack_INFO_FAILED")
  public var Infofailed: String

  @JsName("AssetPack_REMOVAL_PENDING")
  public var Removalpending: String

  @JsName("AssetPack_REMOVAL_FAILED")
  public var Removalfailed: String

  @JsName("AssetPack_MAX")
  public var Max: String
}

@JsName("T$445")
public external interface Object445 {
  @JsName("Status")
  public var status: String

  @JsName("$")
  public var value: String
}

@JsName("T$446")
public external interface Object446 {
  @JsName("State")
  public var state: Number

  @JsName("$")
  public var value: String
}

@JsName("T$447")
public external interface Object447 {
  @JsName("Location")
  public var location: Number

  @JsName("$")
  public var value: String
}

@JsName("GooglePADFunctionLibrary")
public open external class GooglePadFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GooglePadFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GooglePadFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GooglePadFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GooglePadFunctionLibrary

    @JsName("ShowCellularDataConfirmation")
    public fun showCellularDataConfirmation(): String

    @JsName("RequestRemoval")
    public fun requestRemoval(name: String): String

    @JsName("RequestInfo")
    public fun requestInfo(assetPacks: Array<String>): String

    @JsName("RequestDownload")
    public fun requestDownload(assetPacks: Array<String>): String

    @JsName("ReleaseDownloadState")
    public fun releaseDownloadState(state: Number): Unit

    @JsName("ReleaseAssetPackLocation")
    public fun releaseAssetPackLocation(location: Number): Unit

    @JsName("GetTotalBytesToDownload")
    public fun getTotalBytesToDownload(state: Number): Number

    @JsName("GetStorageMethod")
    public fun getStorageMethod(location: Number): String

    @JsName("GetShowCellularDataConfirmationStatus")
    public fun getShowCellularDataConfirmationStatus(status: String): Object445

    @JsName("GetDownloadStatus")
    public fun getDownloadStatus(state: Number): String

    @JsName("GetDownloadState")
    public fun getDownloadState(name: String, state: Number): Object446

    @JsName("GetBytesDownloaded")
    public fun getBytesDownloaded(state: Number): Number

    @JsName("GetAssetsPath")
    public fun getAssetsPath(location: Number): String

    @JsName("GetAssetPackLocation")
    public fun getAssetPackLocation(name: String, location: Number): Object447

    @JsName("CancelDownload")
    public fun cancelDownload(assetPacks: Array<String>): String

    @JsName("C")
    public fun copy(other: UObject): GooglePadFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): GooglePadFunctionLibrary
  }
}

public open external class GroomActorFactory(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GroomActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GroomActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroomActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroomActorFactory

    @JsName("C")
    public fun copy(other: UObject): GroomActorFactory

    @JsName("C")
    public fun copy(other: Any): GroomActorFactory
  }
}

public open external class GroomBindingFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GroomBindingFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GroomBindingFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroomBindingFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroomBindingFactory

    @JsName("C")
    public fun copy(other: UObject): GroomBindingFactory

    @JsName("C")
    public fun copy(other: Any): GroomBindingFactory
  }
}

public open external class GroomEditorMode(
  outer: UObject,
) : BaseLegacyWidgetEdMode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GroomEditorMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GroomEditorMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroomEditorMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroomEditorMode

    @JsName("C")
    public fun copy(other: UObject): GroomEditorMode

    @JsName("C")
    public fun copy(other: Any): GroomEditorMode
  }
}

public open external class GroomFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GroomFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GroomFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GroomFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GroomFactory

    @JsName("C")
    public fun copy(other: UObject): GroomFactory

    @JsName("C")
    public fun copy(other: Any): GroomFactory
  }
}

public open external class HairStrandsFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HairStrandsFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HairStrandsFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HairStrandsFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HairStrandsFactory

    @JsName("C")
    public fun copy(other: UObject): HairStrandsFactory

    @JsName("C")
    public fun copy(other: Any): HairStrandsFactory
  }
}

public open external class ReimportGroomCacheFactory(
  outer: UObject,
) : HairStrandsFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportGroomCacheFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportGroomCacheFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportGroomCacheFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportGroomCacheFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportGroomCacheFactory

    @JsName("C")
    public fun copy(other: Any): ReimportGroomCacheFactory
  }
}

public open external class ReimportHairStrandsFactory(
  outer: UObject,
) : HairStrandsFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReimportHairStrandsFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReimportHairStrandsFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReimportHairStrandsFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReimportHairStrandsFactory

    @JsName("C")
    public fun copy(other: UObject): ReimportHairStrandsFactory

    @JsName("C")
    public fun copy(other: Any): ReimportHairStrandsFactory
  }
}

@JsName("OnDynamicMeshModifiedBP__PythonCallable")
public open external class OnDynamicMeshModifiedBpPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDynamicMeshModifiedBpPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDynamicMeshModifiedBpPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDynamicMeshModifiedBpPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDynamicMeshModifiedBpPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDynamicMeshModifiedBpPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDynamicMeshModifiedBpPythonCallable
  }
}

public open external class MobileInstalledContent(
  outer: UObject,
) : UObject {
  @JsName("Mount")
  public open fun mount(pakOrder: Number, mountPoint: String): Boolean

  @JsName("GetInstalledContentSize")
  public open fun getInstalledContentSize(): Number

  @JsName("GetDiskFreeSpace")
  public open fun getDiskFreeSpace(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MobileInstalledContent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MobileInstalledContent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MobileInstalledContent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MobileInstalledContent

    @JsName("C")
    public fun copy(other: UObject): MobileInstalledContent

    @JsName("C")
    public fun copy(other: Any): MobileInstalledContent
  }
}

public open external class MobilePendingContent(
  outer: UObject,
) : MobileInstalledContent {
  @JsName("GetTotalDownloadedSize")
  public open fun getTotalDownloadedSize(): Number

  @JsName("GetRequiredDiskSpace")
  public open fun getRequiredDiskSpace(): Number

  @JsName("GetInstallProgress")
  public open fun getInstallProgress(): Number

  @JsName("GetDownloadStatusText")
  public open fun getDownloadStatusText(): String

  @JsName("GetDownloadSpeed")
  public open fun getDownloadSpeed(): Number

  @JsName("GetDownloadSize")
  public open fun getDownloadSize(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MobilePendingContent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MobilePendingContent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MobilePendingContent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MobilePendingContent

    @JsName("C")
    public fun copy(other: UObject): MobilePendingContent

    @JsName("C")
    public fun copy(other: Any): MobilePendingContent
  }
}

public open external class MobilePatchingLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MobilePatchingLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MobilePatchingLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MobilePatchingLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MobilePatchingLibrary

    @JsName("HasActiveWiFiConnection")
    public fun hasActiveWiFiConnection(): Boolean

    @JsName("GetSupportedPlatformNames")
    public fun getSupportedPlatformNames(): Array<String>

    @JsName("GetInstalledContent")
    public fun getInstalledContent(installDirectory: String): MobileInstalledContent

    @JsName("GetActiveDeviceProfileName")
    public fun getActiveDeviceProfileName(): String

    @JsName("C")
    public fun copy(other: UObject): MobilePatchingLibrary

    @JsName("C")
    public fun copy(other: Any): MobilePatchingLibrary
  }
}

@JsName("OnContentInstallFailed__PythonCallable")
public open external class OnContentInstallFailedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnContentInstallFailedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnContentInstallFailedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnContentInstallFailedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnContentInstallFailedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnContentInstallFailedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnContentInstallFailedPythonCallable
  }
}

@JsName("OnContentInstallSucceeded__PythonCallable")
public open external class OnContentInstallSucceededPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnContentInstallSucceededPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnContentInstallSucceededPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnContentInstallSucceededPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnContentInstallSucceededPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnContentInstallSucceededPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnContentInstallSucceededPythonCallable
  }
}

@JsName("OnRequestContentFailed__PythonCallable")
public open external class OnRequestContentFailedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnRequestContentFailedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnRequestContentFailedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnRequestContentFailedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnRequestContentFailedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnRequestContentFailedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnRequestContentFailedPythonCallable
  }
}

@JsName("OnRequestContentSucceeded__PythonCallable")
public open external class OnRequestContentSucceededPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnRequestContentSucceededPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnRequestContentSucceededPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnRequestContentSucceededPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnRequestContentSucceededPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnRequestContentSucceededPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnRequestContentSucceededPythonCallable
  }
}

@JsName("T$451")
public external interface Object451 {
  @JsName("Triangles")
  public var triangles: Array<Number>

  @JsName("Vertices")
  public var vertices: Array<Vector>

  @JsName("UVs")
  public var uVs: Array<Vector2d>
}

@JsName("T$452")
public external interface TrianglesProvider {
  @JsName("Triangles")
  public var triangles: Array<Number>
}

@JsName("T$453")
public external interface Object453 {
  @JsName("Triangles")
  public var triangles: Array<Number>

  @JsName("Vertices")
  public var vertices: Array<Vector>

  @JsName("UVs")
  public var uVs: Array<Vector2d>

  @JsName("UV1s")
  public var uv1s: Array<Vector2d>
}

@JsName("T$455")
public external interface Object455 {
  @JsName("Normals")
  public var normals: Array<Vector>

  @JsName("Tangents")
  public var tangents: Array<ProcMeshTangent>
}

public open external class KismetProceduralMeshLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KismetProceduralMeshLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KismetProceduralMeshLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KismetProceduralMeshLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KismetProceduralMeshLibrary

    @JsName("SliceProceduralMesh")
    public fun sliceProceduralMesh(
      inProcMesh: ProceduralMeshComponent,
      planePosition: Vector,
      planeNormal: Vector,
      createOtherHalf: Boolean,
      outOtherHalfProcMesh: ProceduralMeshComponent,
      capOption: String,
      capMaterial: MaterialInterface,
    ): OutOtherHalfProcMeshProvider

    @JsName("GetSectionFromStaticMesh")
    public fun getSectionFromStaticMesh(
      inMesh: StaticMesh,
      lodIndex: Number,
      sectionIndex: Number,
      vertices: Array<Vector>,
      triangles: Array<Number>,
      normals: Array<Vector>,
      uVs: Array<Vector2d>,
      tangents: Array<ProcMeshTangent>,
    ): Object239

    @JsName("GetSectionFromProceduralMesh")
    public fun getSectionFromProceduralMesh(
      inProcMesh: ProceduralMeshComponent,
      sectionIndex: Number,
      vertices: Array<Vector>,
      triangles: Array<Number>,
      normals: Array<Vector>,
      uVs: Array<Vector2d>,
      tangents: Array<ProcMeshTangent>,
    ): Object239

    @JsName("GenerateBoxMesh")
    public fun generateBoxMesh(
      boxRadius: Vector,
      vertices: Array<Vector>,
      triangles: Array<Number>,
      normals: Array<Vector>,
      uVs: Array<Vector2d>,
      tangents: Array<ProcMeshTangent>,
    ): Object239

    @JsName("CreateGridMeshWelded")
    public fun createGridMeshWelded(
      numX: Number,
      numY: Number,
      triangles: Array<Number>,
      vertices: Array<Vector>,
      uVs: Array<Vector2d>,
      gridSpacing: Number,
    ): Object451

    @JsName("CreateGridMeshTriangles")
    public fun createGridMeshTriangles(
      numX: Number,
      numY: Number,
      winding: Boolean,
      triangles: Array<Number>,
    ): TrianglesProvider

    @JsName("CreateGridMeshSplit")
    public fun createGridMeshSplit(
      numX: Number,
      numY: Number,
      triangles: Array<Number>,
      vertices: Array<Vector>,
      uVs: Array<Vector2d>,
      uv1s: Array<Vector2d>,
      gridSpacing: Number,
    ): Object453

    @JsName("CopyProceduralMeshFromStaticMeshComponent")
    public fun copyProceduralMeshFromStaticMeshComponent(
      staticMeshComponent: StaticMeshComponent,
      lodIndex: Number,
      procMeshComponent: ProceduralMeshComponent,
      createCollision: Boolean,
    ): Unit

    @JsName("ConvertQuadToTriangles")
    public fun convertQuadToTriangles(
      triangles: Array<Number>,
      vert0: Number,
      vert1: Number,
      vert2: Number,
      vert3: Number,
    ): TrianglesProvider

    @JsName("CalculateTangentsForMesh")
    public fun calculateTangentsForMesh(
      vertices: Array<Vector>,
      triangles: Array<Number>,
      uVs: Array<Vector2d>,
      normals: Array<Vector>,
      tangents: Array<ProcMeshTangent>,
    ): Object455

    @JsName("C")
    public fun copy(other: UObject): KismetProceduralMeshLibrary

    @JsName("C")
    public fun copy(other: Any): KismetProceduralMeshLibrary
  }
}

@JsName("EResonanceRenderMode")
public external object ResonanceRenderMode {
  public var StereoPanning: String

  public var BinauralLowQuality: String

  public var BinauralMediumQuality: String

  public var BinauralHighQuality: String

  public var RoomEffectsOnly: String

  @JsName("EResonanceRenderMode_MAX")
  public var Max: String
}

public open external class ResonanceAudioSoundfieldSettings(
  outer: UObject,
) : SoundfieldEncodingSettingsBase {
  @JsName("RenderMode")
  public open var renderMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ResonanceAudioSoundfieldSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ResonanceAudioSoundfieldSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ResonanceAudioSoundfieldSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ResonanceAudioSoundfieldSettings

    @JsName("C")
    public fun copy(other: UObject): ResonanceAudioSoundfieldSettings

    @JsName("C")
    public fun copy(other: Any): ResonanceAudioSoundfieldSettings
  }
}

@JsName("ERaMaterialName")
public external object RaMaterialName {
  public var TRANSPARENT: String

  @JsName("ACOUSTIC_CEILING_TILES")
  public var Acousticceilingtiles: String

  @JsName("BRICK_BARE")
  public var Brickbare: String

  @JsName("BRICK_PAINTED")
  public var Brickpainted: String

  @JsName("CONCRETE_BLOCK_COARSE")
  public var Concreteblockcoarse: String

  @JsName("CONCRETE_BLOCK_PAINTED")
  public var Concreteblockpainted: String

  @JsName("CURTAIN_HEAVY")
  public var Curtainheavy: String

  @JsName("FIBER_GLASS_INSULATION")
  public var Fiberglassinsulation: String

  @JsName("GLASS_THIN")
  public var Glassthin: String

  @JsName("GLASS_THICK")
  public var Glassthick: String

  public var GRASS: String

  @JsName("LINOLEUM_ON_CONCRETE")
  public var Linoleumonconcrete: String

  public var MARBLE: String

  public var METAL: String

  @JsName("PARQUET_ONCONCRETE")
  public var Parquetonconcrete: String

  @JsName("PLASTER_ROUGH")
  public var Plasterrough: String

  @JsName("PLASTER_SMOOTH")
  public var Plastersmooth: String

  @JsName("PLYWOOD_PANEL")
  public var Plywoodpanel: String

  @JsName("POLISHED_CONCRETE_OR_TILE")
  public var Polishedconcreteortile: String

  public var SHEETROCK: String

  @JsName("WATER_OR_ICE_SURFACE")
  public var Wateroricesurface: String

  @JsName("WOOD_CEILING")
  public var Woodceiling: String

  @JsName("WOOD_PANEL")
  public var Woodpanel: String

  public var UNIFORM: String

  @JsName("ERaMaterialName_MAX")
  public var Max: String
}

public open external class ResonanceAudioReverbPluginSettings {
  @JsName("bEnableRoomEffects")
  public open var enableRoomEffects: Boolean

  @JsName("bGetTransformFromAudioVolume")
  public open var getTransformFromAudioVolume: Boolean

  @JsName("RoomPosition")
  public open var roomPosition: Vector

  @JsName("RoomRotation")
  public open var roomRotation: Quat

  @JsName("RoomDimensions")
  public open var roomDimensions: Vector

  @JsName("LeftWallMaterial")
  public open var leftWallMaterial: String

  @JsName("RightWallMaterial")
  public open var rightWallMaterial: String

  @JsName("FloorMaterial")
  public open var floorMaterial: String

  @JsName("CeilingMaterial")
  public open var ceilingMaterial: String

  @JsName("FrontWallMaterial")
  public open var frontWallMaterial: String

  @JsName("BackWallMaterial")
  public open var backWallMaterial: String

  @JsName("ReflectionScalar")
  public open var reflectionScalar: Number

  @JsName("ReverbGain")
  public open var reverbGain: Number

  @JsName("ReverbTimeModifier")
  public open var reverbTimeModifier: Number

  @JsName("ReverbBrightness")
  public open var reverbBrightness: Number

  public open fun clone(): ResonanceAudioReverbPluginSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ResonanceAudioReverbPluginSettings

    @JsName("C")
    public fun copy(other: Any): ResonanceAudioReverbPluginSettings
  }
}

public open external class ResonanceAudioReverbPluginPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: ResonanceAudioReverbPluginSettings

  @JsName("SetRoomRotation")
  public open fun setRoomRotation(inRotation: Quat): Unit

  @JsName("SetRoomPosition")
  public open fun setRoomPosition(inPosition: Vector): Unit

  @JsName("SetRoomMaterials")
  public open fun setRoomMaterials(inMaterials: Array<String>): Unit

  @JsName("SetRoomDimensions")
  public open fun setRoomDimensions(inDimensions: Vector): Unit

  @JsName("SetReverbTimeModifier")
  public open fun setReverbTimeModifier(inReverbTimeModifier: Number): Unit

  @JsName("SetReverbGain")
  public open fun setReverbGain(inReverbGain: Number): Unit

  @JsName("SetReverbBrightness")
  public open fun setReverbBrightness(inReverbBrightness: Number): Unit

  @JsName("SetReflectionScalar")
  public open fun setReflectionScalar(inReflectionScalar: Number): Unit

  @JsName("SetEnableRoomEffects")
  public open fun setEnableRoomEffects(inEnableRoomEffects: Boolean): Unit

  @JsName("SetGlobalReverbPreset")
  public open fun setGlobalReverbPreset(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ResonanceAudioReverbPluginPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ResonanceAudioReverbPluginPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ResonanceAudioReverbPluginPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ResonanceAudioReverbPluginPreset

    @JsName("C")
    public fun copy(other: UObject): ResonanceAudioReverbPluginPreset

    @JsName("C")
    public fun copy(other: Any): ResonanceAudioReverbPluginPreset

    @JsName("SetGlobalReverbPreset")
    public fun setGlobalReverbPreset(inPreset: ResonanceAudioReverbPluginPreset): Unit
  }
}

public open external class ResonanceAudioBlueprintFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ResonanceAudioBlueprintFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ResonanceAudioBlueprintFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ResonanceAudioBlueprintFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ResonanceAudioBlueprintFunctionLibrary

    @JsName("SetGlobalReverbPreset")
    public fun setGlobalReverbPreset(inPreset: ResonanceAudioReverbPluginPreset): Unit

    @JsName("GetGlobalReverbPreset")
    public fun getGlobalReverbPreset(): ResonanceAudioReverbPluginPreset

    @JsName("C")
    public fun copy(other: UObject): ResonanceAudioBlueprintFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): ResonanceAudioBlueprintFunctionLibrary
  }
}

@JsName("ERaSpatializationMethod")
public external object RaSpatializationMethod {
  @JsName("STEREO_PANNING")
  public var Stereopanning: String

  public var HRTF: String

  @JsName("ERaSpatializationMethod_MAX")
  public var Max: String
}

@JsName("ERaDistanceRolloffModel")
public external object RaDistanceRolloffModel {
  public var LOGARITHMIC: String

  public var LINEAR: String

  public var NONE: String

  @JsName("ERaDistanceRolloffModel_MAX")
  public var Max: String
}

public open external class ResonanceAudioSpatializationSourceSettings(
  outer: UObject,
) : SpatializationPluginSourceSettingsBase {
  @JsName("SpatializationMethod")
  public open var spatializationMethod: String

  @JsName("Pattern")
  public open var pattern: Number

  @JsName("Sharpness")
  public open var sharpness: Number

  @JsName("bToggleVisualization")
  public open var toggleVisualization: Boolean

  @JsName("Scale")
  public open var scale: Number

  @JsName("Spread")
  public open var spread: Number

  @JsName("Rolloff")
  public open var rolloff: String

  @JsName("MinDistance")
  public open var minDistance: Number

  @JsName("MaxDistance")
  public open var maxDistance: Number

  @JsName("SetSoundSourceSpread")
  public open fun setSoundSourceSpread(inSpread: Number): Unit

  @JsName("SetSoundSourceDirectivity")
  public open fun setSoundSourceDirectivity(inPattern: Number, inSharpness: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ResonanceAudioSpatializationSourceSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        ResonanceAudioSpatializationSourceSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ResonanceAudioSpatializationSourceSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ResonanceAudioSpatializationSourceSettings

    @JsName("C")
    public fun copy(other: UObject): ResonanceAudioSpatializationSourceSettings

    @JsName("C")
    public fun copy(other: Any): ResonanceAudioSpatializationSourceSettings
  }
}

public open external class ResonanceAudioDirectivityVisualizer(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("Material")
  public open var material: Material

  @JsName("Settings")
  public open var settings: ResonanceAudioSpatializationSourceSettings

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ResonanceAudioDirectivityVisualizer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ResonanceAudioDirectivityVisualizer

    @JsName("C")
    public fun copy(other: UObject): ResonanceAudioDirectivityVisualizer

    @JsName("C")
    public fun copy(other: Any): ResonanceAudioDirectivityVisualizer
  }
}

@JsName("ERaQualityMode")
public external object RaQualityMode {
  @JsName("STEREO_PANNING")
  public var Stereopanning: String

  @JsName("BINAURAL_LOW")
  public var Binaurallow: String

  @JsName("BINAURAL_MEDIUM")
  public var Binauralmedium: String

  @JsName("BINAURAL_HIGH")
  public var Binauralhigh: String

  @JsName("ERaQualityMode_MAX")
  public var Max: String
}

public open external class ResonanceAudioSettings(
  outer: UObject,
) : UObject {
  @JsName("OutputSubmix")
  public open var outputSubmix: SoftObjectPath

  @JsName("QualityMode")
  public open var qualityMode: String

  @JsName("GlobalReverbPreset")
  public open var globalReverbPreset: SoftObjectPath

  @JsName("GlobalSourcePreset")
  public open var globalSourcePreset: SoftObjectPath

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ResonanceAudioSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ResonanceAudioSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ResonanceAudioSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ResonanceAudioSettings

    @JsName("C")
    public fun copy(other: UObject): ResonanceAudioSettings

    @JsName("C")
    public fun copy(other: Any): ResonanceAudioSettings
  }
}

@JsName("ESynth1OscType")
public external object Synth1OscType {
  public var Sine: String

  public var Saw: String

  public var Triangle: String

  public var Square: String

  public var Noise: String

  public var Count: String

  @JsName("ESynth1OscType_MAX")
  public var Max: String
}

@JsName("ESynthLFOType")
public external object SynthLFOType {
  public var Sine: String

  public var UpSaw: String

  public var DownSaw: String

  public var Square: String

  public var Triangle: String

  public var Exponential: String

  public var RandomSampleHold: String

  public var Count: String

  @JsName("ESynthLFOType_MAX")
  public var Max: String
}

@JsName("ESynthLFOMode")
public external object SynthLFOMode {
  public var Sync: String

  public var OneShot: String

  public var Free: String

  public var Count: String

  @JsName("ESynthLFOMode_MAX")
  public var Max: String
}

@JsName("ESynthLFOPatchType")
public external object SynthLFOPatchType {
  public var PatchToNone: String

  public var PatchToGain: String

  public var PatchToOscFreq: String

  public var PatchToFilterFreq: String

  public var PatchToFilterQ: String

  public var PatchToOscPulseWidth: String

  public var PatchToOscPan: String

  @JsName("PatchLFO1ToLFO2Frequency")
  public var PatchLfo1ToLfo2Frequency: String

  @JsName("PatchLFO1ToLFO2Gain")
  public var PatchLfo1ToLfo2Gain: String

  public var Count: String

  @JsName("ESynthLFOPatchType_MAX")
  public var Max: String
}

@JsName("ESynthModEnvPatch")
public external object SynthModEnvPatch {
  public var PatchToNone: String

  public var PatchToOscFreq: String

  public var PatchToFilterFreq: String

  public var PatchToFilterQ: String

  @JsName("PatchToLFO1Gain")
  public var PatchToLfo1Gain: String

  @JsName("PatchToLFO2Gain")
  public var PatchToLfo2Gain: String

  @JsName("PatchToLFO1Freq")
  public var PatchToLfo1Freq: String

  @JsName("PatchToLFO2Freq")
  public var PatchToLfo2Freq: String

  public var Count: String

  @JsName("ESynthModEnvPatch_MAX")
  public var Max: String
}

@JsName("ESynthModEnvBiasPatch")
public external object SynthModEnvBiasPatch {
  public var PatchToNone: String

  public var PatchToOscFreq: String

  public var PatchToFilterFreq: String

  public var PatchToFilterQ: String

  @JsName("PatchToLFO1Gain")
  public var PatchToLfo1Gain: String

  @JsName("PatchToLFO2Gain")
  public var PatchToLfo2Gain: String

  @JsName("PatchToLFO1Freq")
  public var PatchToLfo1Freq: String

  @JsName("PatchToLFO2Freq")
  public var PatchToLfo2Freq: String

  public var Count: String

  @JsName("ESynthModEnvBiasPatch_MAX")
  public var Max: String
}

@JsName("ESynthFilterType")
public external object SynthFilterType {
  public var LowPass: String

  public var HighPass: String

  public var BandPass: String

  public var BandStop: String

  public var Count: String

  @JsName("ESynthFilterType_MAX")
  public var Max: String
}

@JsName("ESynthFilterAlgorithm")
public external object SynthFilterAlgorithm {
  public var OnePole: String

  public var StateVariable: String

  public var Ladder: String

  public var Count: String

  @JsName("ESynthFilterAlgorithm_MAX")
  public var Max: String
}

@JsName("ESynthStereoDelayMode")
public external object SynthStereoDelayMode {
  public var Normal: String

  public var Cross: String

  public var PingPong: String

  public var Count: String

  @JsName("ESynthStereoDelayMode_MAX")
  public var Max: String
}

@JsName("ESynth1PatchSource")
public external object Synth1PatchSource {
  @JsName("LFO1")
  public var Lfo1: String

  @JsName("LFO2")
  public var Lfo2: String

  public var Envelope: String

  public var BiasEnvelope: String

  public var Count: String

  @JsName("ESynth1PatchSource_MAX")
  public var Max: String
}

@JsName("ESynth1PatchDestination")
public external object Synth1PatchDestination {
  public var Osc1Gain: String

  public var Osc1Frequency: String

  public var Osc1Pulsewidth: String

  public var Osc2Gain: String

  public var Osc2Frequency: String

  public var Osc2Pulsewidth: String

  public var FilterFrequency: String

  public var FilterQ: String

  public var Gain: String

  public var Pan: String

  @JsName("LFO1Frequency")
  public var Lfo1Frequency: String

  @JsName("LFO1Gain")
  public var Lfo1Gain: String

  @JsName("LFO2Frequency")
  public var Lfo2Frequency: String

  @JsName("LFO2Gain")
  public var Lfo2Gain: String

  public var Count: String

  @JsName("ESynth1PatchDestination_MAX")
  public var Max: String
}

public open external class Synth1PatchCable {
  @JsName("Depth")
  public open var depth: Number

  @JsName("Destination")
  public open var destination: String

  public open fun clone(): Synth1PatchCable

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Synth1PatchCable

    @JsName("C")
    public fun copy(other: Any): Synth1PatchCable
  }
}

public open external class EpicSynth1Patch {
  @JsName("PatchSource")
  public open var patchSource: String

  @JsName("PatchCables")
  public open var patchCables: Array<Synth1PatchCable>

  public open fun clone(): EpicSynth1Patch

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EpicSynth1Patch

    @JsName("C")
    public fun copy(other: Any): EpicSynth1Patch
  }
}

public open external class ModularSynthPreset : TableRowBase {
  @JsName("bEnablePolyphony")
  public open var enablePolyphony: Boolean

  @JsName("Osc1Type")
  public open var osc1Type: String

  @JsName("Osc1Gain")
  public open var osc1Gain: Number

  @JsName("Osc1Octave")
  public open var osc1Octave: Number

  @JsName("Osc1Semitones")
  public open var osc1Semitones: Number

  @JsName("Osc1Cents")
  public open var osc1Cents: Number

  @JsName("Osc1PulseWidth")
  public open var osc1PulseWidth: Number

  @JsName("Osc2Type")
  public open var osc2Type: String

  @JsName("Osc2Gain")
  public open var osc2Gain: Number

  @JsName("Osc2Octave")
  public open var osc2Octave: Number

  @JsName("Osc2Semitones")
  public open var osc2Semitones: Number

  @JsName("Osc2Cents")
  public open var osc2Cents: Number

  @JsName("Osc2PulseWidth")
  public open var osc2PulseWidth: Number

  @JsName("Portamento")
  public open var portamento: Number

  @JsName("bEnableUnison")
  public open var enableUnison: Boolean

  @JsName("bEnableOscillatorSync")
  public open var enableOscillatorSync: Boolean

  @JsName("Spread")
  public open var spread: Number

  @JsName("Pan")
  public open var pan: Number

  @JsName("LFO1Frequency")
  public open var lfo1Frequency: Number

  @JsName("LFO1Gain")
  public open var lfo1Gain: Number

  @JsName("LFO1Type")
  public open var lfo1Type: String

  @JsName("LFO1Mode")
  public open var lfo1Mode: String

  @JsName("LFO1PatchType")
  public open var lfo1PatchType: String

  @JsName("LFO2Frequency")
  public open var lfo2Frequency: Number

  @JsName("LFO2Gain")
  public open var lfo2Gain: Number

  @JsName("LFO2Type")
  public open var lfo2Type: String

  @JsName("LFO2Mode")
  public open var lfo2Mode: String

  @JsName("LFO2PatchType")
  public open var lfo2PatchType: String

  @JsName("GainDb")
  public open var gainDb: Number

  @JsName("AttackTime")
  public open var attackTime: Number

  @JsName("DecayTime")
  public open var decayTime: Number

  @JsName("SustainGain")
  public open var sustainGain: Number

  @JsName("ReleaseTime")
  public open var releaseTime: Number

  @JsName("ModEnvPatchType")
  public open var modEnvPatchType: String

  @JsName("ModEnvBiasPatchType")
  public open var modEnvBiasPatchType: String

  @JsName("bInvertModulationEnvelope")
  public open var invertModulationEnvelope: Boolean

  @JsName("bInvertModulationEnvelopeBias")
  public open var invertModulationEnvelopeBias: Boolean

  @JsName("ModulationEnvelopeDepth")
  public open var modulationEnvelopeDepth: Number

  @JsName("ModulationEnvelopeAttackTime")
  public open var modulationEnvelopeAttackTime: Number

  @JsName("ModulationEnvelopeDecayTime")
  public open var modulationEnvelopeDecayTime: Number

  @JsName("ModulationEnvelopeSustainGain")
  public open var modulationEnvelopeSustainGain: Number

  @JsName("ModulationEnvelopeReleaseTime")
  public open var modulationEnvelopeReleaseTime: Number

  @JsName("bLegato")
  public open var legato: Boolean

  @JsName("bRetrigger")
  public open var retrigger: Boolean

  @JsName("FilterFrequency")
  public open var filterFrequency: Number

  @JsName("FilterQ")
  public open var filterQ: Number

  @JsName("FilterType")
  public open var filterType: String

  @JsName("FilterAlgorithm")
  public open var filterAlgorithm: String

  @JsName("bStereoDelayEnabled")
  public open var stereoDelayEnabled: Boolean

  @JsName("StereoDelayMode")
  public open var stereoDelayMode: String

  @JsName("StereoDelayTime")
  public open var stereoDelayTime: Number

  @JsName("StereoDelayFeedback")
  public open var stereoDelayFeedback: Number

  @JsName("StereoDelayWetlevel")
  public open var stereoDelayWetlevel: Number

  @JsName("StereoDelayRatio")
  public open var stereoDelayRatio: Number

  @JsName("bChorusEnabled")
  public open var chorusEnabled: Boolean

  @JsName("ChorusDepth")
  public open var chorusDepth: Number

  @JsName("ChorusFeedback")
  public open var chorusFeedback: Number

  @JsName("ChorusFrequency")
  public open var chorusFrequency: Number

  @JsName("Patches")
  public open var patches: Array<EpicSynth1Patch>

  public override fun clone(): ModularSynthPreset

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ModularSynthPreset

    @JsName("C")
    public fun copy(other: Any): ModularSynthPreset
  }
}

public open external class ModularSynthPresetBankEntry {
  @JsName("PresetName")
  public open var presetName: String

  @JsName("Preset")
  public open var preset: ModularSynthPreset

  public open fun clone(): ModularSynthPresetBankEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ModularSynthPresetBankEntry

    @JsName("C")
    public fun copy(other: Any): ModularSynthPresetBankEntry
  }
}

public open external class ModularSynthPresetBank(
  outer: UObject,
) : UObject {
  @JsName("Presets")
  public open var presets: Array<ModularSynthPresetBankEntry>

  @JsName("AddModularSynthPresetToBankAsset")
  public open fun addModularSynthPresetToBankAsset(preset: ModularSynthPreset, presetName: String):
      Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModularSynthPresetBank

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModularSynthPresetBank

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModularSynthPresetBank

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModularSynthPresetBank

    @JsName("C")
    public fun copy(other: UObject): ModularSynthPresetBank

    @JsName("C")
    public fun copy(other: Any): ModularSynthPresetBank

    @JsName("AddModularSynthPresetToBankAsset")
    public fun addModularSynthPresetToBankAsset(
      inBank: ModularSynthPresetBank,
      preset: ModularSynthPreset,
      presetName: String,
    ): Unit
  }
}

public open external class ModularSynthLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModularSynthLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModularSynthLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModularSynthLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModularSynthLibrary

    @JsName("AddModularSynthPresetToBankAsset")
    public fun addModularSynthPresetToBankAsset(
      inBank: ModularSynthPresetBank,
      preset: ModularSynthPreset,
      presetName: String,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): ModularSynthLibrary

    @JsName("C")
    public fun copy(other: Any): ModularSynthLibrary
  }
}

public open external class PatchId {
  public open var ID: Number

  public open fun clone(): PatchId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PatchId

    @JsName("C")
    public fun copy(other: Any): PatchId
  }
}

public open external class ModularSynthComponent(
  outer: UObject,
) : SynthComponent {
  @JsName("VoiceCount")
  public open var voiceCount: Number

  @JsName("SetSynthPreset")
  public open fun setSynthPreset(synthPreset: ModularSynthPreset): Unit

  @JsName("SetSustainGain")
  public open fun setSustainGain(sustainGain: Number): Unit

  @JsName("SetStereoDelayWetlevel")
  public open fun setStereoDelayWetlevel(delayWetlevel: Number): Unit

  @JsName("SetStereoDelayTime")
  public open fun setStereoDelayTime(delayTimeMsec: Number): Unit

  @JsName("SetStereoDelayRatio")
  public open fun setStereoDelayRatio(delayRatio: Number): Unit

  @JsName("SetStereoDelayMode")
  public open fun setStereoDelayMode(stereoDelayMode: String): Unit

  @JsName("SetStereoDelayIsEnabled")
  public open fun setStereoDelayIsEnabled(stereoDelayEnabled: Boolean): Unit

  @JsName("SetStereoDelayFeedback")
  public open fun setStereoDelayFeedback(delayFeedback: Number): Unit

  @JsName("SetSpread")
  public open fun setSpread(spread: Number): Unit

  @JsName("SetReleaseTime")
  public open fun setReleaseTime(releaseTimeMsec: Number): Unit

  @JsName("SetPortamento")
  public open fun setPortamento(portamento: Number): Unit

  @JsName("SetPitchBend")
  public open fun setPitchBend(pitchBend: Number): Unit

  @JsName("SetPan")
  public open fun setPan(pan: Number): Unit

  @JsName("SetOscType")
  public open fun setOscType(oscIndex: Number, oscType: String): Unit

  @JsName("SetOscSync")
  public open fun setOscSync(isSynced: Boolean): Unit

  @JsName("SetOscSemitones")
  public open fun setOscSemitones(oscIndex: Number, semitones: Number): Unit

  @JsName("SetOscPulsewidth")
  public open fun setOscPulsewidth(oscIndex: Number, pulsewidth: Number): Unit

  @JsName("SetOscOctave")
  public open fun setOscOctave(oscIndex: Number, octave: Number): Unit

  @JsName("SetOscGainMod")
  public open fun setOscGainMod(oscIndex: Number, oscGainMod: Number): Unit

  @JsName("SetOscGain")
  public open fun setOscGain(oscIndex: Number, oscGain: Number): Unit

  @JsName("SetOscFrequencyMod")
  public open fun setOscFrequencyMod(oscIndex: Number, oscFreqMod: Number): Unit

  @JsName("SetOscCents")
  public open fun setOscCents(oscIndex: Number, cents: Number): Unit

  @JsName("SetModEnvSustainGain")
  public open fun setModEnvSustainGain(sustainGain: Number): Unit

  @JsName("SetModEnvReleaseTime")
  public open fun setModEnvReleaseTime(release: Number): Unit

  @JsName("SetModEnvPatch")
  public open fun setModEnvPatch(inPatchType: String): Unit

  @JsName("SetModEnvInvert")
  public open fun setModEnvInvert(invert: Boolean): Unit

  @JsName("SetModEnvDepth")
  public open fun setModEnvDepth(depth: Number): Unit

  @JsName("SetModEnvDecayTime")
  public open fun setModEnvDecayTime(decayTimeMsec: Number): Unit

  @JsName("SetModEnvBiasPatch")
  public open fun setModEnvBiasPatch(inPatchType: String): Unit

  @JsName("SetModEnvBiasInvert")
  public open fun setModEnvBiasInvert(invert: Boolean): Unit

  @JsName("SetModEnvAttackTime")
  public open fun setModEnvAttackTime(attackTimeMsec: Number): Unit

  @JsName("SetLFOType")
  public open fun setLfoType(lfoIndex: Number, lfoType: String): Unit

  @JsName("SetLFOPatch")
  public open fun setLfoPatch(lfoIndex: Number, lfoPatchType: String): Unit

  @JsName("SetLFOMode")
  public open fun setLfoMode(lfoIndex: Number, lfoMode: String): Unit

  @JsName("SetLFOGainMod")
  public open fun setLfoGainMod(lfoIndex: Number, gainMod: Number): Unit

  @JsName("SetLFOGain")
  public open fun setLfoGain(lfoIndex: Number, gain: Number): Unit

  @JsName("SetLFOFrequencyMod")
  public open fun setLfoFrequencyMod(lfoIndex: Number, frequencyModHz: Number): Unit

  @JsName("SetLFOFrequency")
  public open fun setLfoFrequency(lfoIndex: Number, frequencyHz: Number): Unit

  @JsName("SetGainDb")
  public open fun setGainDb(gainDb: Number): Unit

  @JsName("SetFilterType")
  public open fun setFilterType(filterType: String): Unit

  @JsName("SetFilterQMod")
  public open fun setFilterQMod(filterQ: Number): Unit

  @JsName("SetFilterQ")
  public open fun setFilterQ(filterQ: Number): Unit

  @JsName("SetFilterFrequencyMod")
  public open fun setFilterFrequencyMod(filterFrequencyHz: Number): Unit

  @JsName("SetFilterFrequency")
  public open fun setFilterFrequency(filterFrequencyHz: Number): Unit

  @JsName("SetFilterAlgorithm")
  public open fun setFilterAlgorithm(filterAlgorithm: String): Unit

  @JsName("SetEnableUnison")
  public open fun setEnableUnison(enableUnison: Boolean): Unit

  @JsName("SetEnableRetrigger")
  public open fun setEnableRetrigger(retriggerEnabled: Boolean): Unit

  @JsName("SetEnablePolyphony")
  public open fun setEnablePolyphony(enablePolyphony: Boolean): Unit

  @JsName("SetEnablePatch")
  public open fun setEnablePatch(patchId: PatchId, isEnabled: Boolean): Boolean

  @JsName("SetEnableLegato")
  public open fun setEnableLegato(legatoEnabled: Boolean): Unit

  @JsName("SetDecayTime")
  public open fun setDecayTime(decayTimeMsec: Number): Unit

  @JsName("SetChorusFrequency")
  public open fun setChorusFrequency(frequency: Number): Unit

  @JsName("SetChorusFeedback")
  public open fun setChorusFeedback(feedback: Number): Unit

  @JsName("SetChorusEnabled")
  public open fun setChorusEnabled(enableChorus: Boolean): Unit

  @JsName("SetChorusDepth")
  public open fun setChorusDepth(depth: Number): Unit

  @JsName("SetAttackTime")
  public open fun setAttackTime(attackTimeMsec: Number): Unit

  @JsName("NoteOn")
  public open fun noteOn(
    note: Number,
    velocity: Number,
    duration: Number,
  ): Unit

  @JsName("NoteOff")
  public open fun noteOff(
    note: Number,
    allNotesOff: Boolean,
    killAllNotes: Boolean,
  ): Unit

  @JsName("CreatePatch")
  public open fun createPatch(
    patchSource: String,
    patchCables: Array<Synth1PatchCable>,
    enableByDefault: Boolean,
  ): PatchId

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModularSynthComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModularSynthComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModularSynthComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModularSynthComponent

    @JsName("C")
    public fun copy(other: UObject): ModularSynthComponent

    @JsName("C")
    public fun copy(other: Any): ModularSynthComponent
  }
}

public open external class SourceEffectBitCrusherSettings {
  @JsName("CrushedSampleRate")
  public open var crushedSampleRate: Number

  @JsName("SampleRateModulation")
  public open var sampleRateModulation: SoundModulationDestinationSettings

  @JsName("CrushedBits")
  public open var crushedBits: Number

  @JsName("BitModulation")
  public open var bitModulation: SoundModulationDestinationSettings

  public open fun clone(): SourceEffectBitCrusherSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectBitCrusherSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectBitCrusherSettings
  }
}

public open external class SourceEffectBitCrusherBaseSettings {
  @JsName("SampleRate")
  public open var sampleRate: Number

  @JsName("BitDepth")
  public open var bitDepth: Number

  public open fun clone(): SourceEffectBitCrusherBaseSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectBitCrusherBaseSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectBitCrusherBaseSettings
  }
}

public open external class SourceEffectBitCrusherPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectBitCrusherSettings

  @JsName("SetSettings")
  public open fun setSettings(settings: SourceEffectBitCrusherBaseSettings): Unit

  @JsName("SetSampleRateModulator")
  public open fun setSampleRateModulator(modulator: SoundModulatorBase): Unit

  @JsName("SetSampleRate")
  public open fun setSampleRate(sampleRate: Number): Unit

  @JsName("SetModulationSettings")
  public open fun setModulationSettings(modulationSettings: SourceEffectBitCrusherSettings): Unit

  @JsName("SetBits")
  public open fun setBits(bits: Number): Unit

  @JsName("SetBitModulator")
  public open fun setBitModulator(modulator: SoundModulatorBase): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectBitCrusherPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectBitCrusherPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectBitCrusherPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectBitCrusherPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectBitCrusherPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectBitCrusherPreset
  }
}

public open external class SourceEffectChorusSettings {
  @JsName("Depth")
  public open var depth: Number

  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Feedback")
  public open var feedback: Number

  @JsName("WetLevel")
  public open var wetLevel: Number

  @JsName("DryLevel")
  public open var dryLevel: Number

  @JsName("Spread")
  public open var spread: Number

  @JsName("DepthModulation")
  public open var depthModulation: SoundModulationDestinationSettings

  @JsName("FrequencyModulation")
  public open var frequencyModulation: SoundModulationDestinationSettings

  @JsName("FeedbackModulation")
  public open var feedbackModulation: SoundModulationDestinationSettings

  @JsName("WetModulation")
  public open var wetModulation: SoundModulationDestinationSettings

  @JsName("DryModulation")
  public open var dryModulation: SoundModulationDestinationSettings

  @JsName("SpreadModulation")
  public open var spreadModulation: SoundModulationDestinationSettings

  public open fun clone(): SourceEffectChorusSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectChorusSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectChorusSettings
  }
}

public open external class SourceEffectChorusBaseSettings {
  @JsName("Depth")
  public open var depth: Number

  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Feedback")
  public open var feedback: Number

  @JsName("WetLevel")
  public open var wetLevel: Number

  @JsName("DryLevel")
  public open var dryLevel: Number

  @JsName("Spread")
  public open var spread: Number

  public open fun clone(): SourceEffectChorusBaseSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectChorusBaseSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectChorusBaseSettings
  }
}

public open external class SourceEffectChorusPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectChorusSettings

  @JsName("SetWetModulator")
  public open fun setWetModulator(modulator: SoundModulatorBase): Unit

  @JsName("SetWet")
  public open fun setWet(wetAmount: Number): Unit

  @JsName("SetSpreadModulator")
  public open fun setSpreadModulator(modulator: SoundModulatorBase): Unit

  @JsName("SetSpread")
  public open fun setSpread(spread: Number): Unit

  @JsName("SetSettings")
  public open fun setSettings(settings: SourceEffectChorusBaseSettings): Unit

  @JsName("SetModulationSettings")
  public open fun setModulationSettings(modulationSettings: SourceEffectChorusSettings): Unit

  @JsName("SetFrequencyModulator")
  public open fun setFrequencyModulator(modulator: SoundModulatorBase): Unit

  @JsName("SetFrequency")
  public open fun setFrequency(frequency: Number): Unit

  @JsName("SetFeedbackModulator")
  public open fun setFeedbackModulator(modulator: SoundModulatorBase): Unit

  @JsName("SetFeedback")
  public open fun setFeedback(feedback: Number): Unit

  @JsName("SetDryModulator")
  public open fun setDryModulator(modulator: SoundModulatorBase): Unit

  @JsName("SetDry")
  public open fun setDry(dryAmount: Number): Unit

  @JsName("SetDepthModulator")
  public open fun setDepthModulator(modulator: SoundModulatorBase): Unit

  @JsName("SetDepth")
  public open fun setDepth(depth: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectChorusPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectChorusPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectChorusPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectChorusPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectChorusPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectChorusPreset
  }
}

@JsName("ESourceEffectDynamicsProcessorType")
public external object SourceEffectDynamicsProcessorType {
  public var Compressor: String

  public var Limiter: String

  public var Expander: String

  public var Gate: String

  public var UpwardsCompressor: String

  public var Count: String

  @JsName("ESourceEffectDynamicsProcessorType_MAX")
  public var Max: String
}

@JsName("ESourceEffectDynamicsPeakMode")
public external object SourceEffectDynamicsPeakMode {
  public var MeanSquared: String

  public var RootMeanSquared: String

  public var Peak: String

  public var Count: String

  @JsName("ESourceEffectDynamicsPeakMode_MAX")
  public var Max: String
}

public open external class SourceEffectDynamicsProcessorSettings {
  @JsName("DynamicsProcessorType")
  public open var dynamicsProcessorType: String

  @JsName("PeakMode")
  public open var peakMode: String

  @JsName("LookAheadMsec")
  public open var lookAheadMsec: Number

  @JsName("AttackTimeMsec")
  public open var attackTimeMsec: Number

  @JsName("ReleaseTimeMsec")
  public open var releaseTimeMsec: Number

  @JsName("ThresholdDb")
  public open var thresholdDb: Number

  @JsName("Ratio")
  public open var ratio: Number

  @JsName("KneeBandwidthDb")
  public open var kneeBandwidthDb: Number

  @JsName("InputGainDb")
  public open var inputGainDb: Number

  @JsName("OutputGainDb")
  public open var outputGainDb: Number

  @JsName("bStereoLinked")
  public open var stereoLinked: Boolean

  @JsName("bAnalogMode")
  public open var analogMode: Boolean

  public open fun clone(): SourceEffectDynamicsProcessorSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectDynamicsProcessorSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectDynamicsProcessorSettings
  }
}

public open external class SourceEffectDynamicsProcessorPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectDynamicsProcessorSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectDynamicsProcessorSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectDynamicsProcessorPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectDynamicsProcessorPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectDynamicsProcessorPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectDynamicsProcessorPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectDynamicsProcessorPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectDynamicsProcessorPreset
  }
}

public open external class EnvelopeFollowerListener(
  outer: UObject,
) : ActorComponent {
  @JsName("OnEnvelopeFollowerUpdate")
  public open var onEnvelopeFollowerUpdate:
      UnrealEngineMulticastDelegate<(EnvelopeValue: Number) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvelopeFollowerListener

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvelopeFollowerListener

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvelopeFollowerListener

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvelopeFollowerListener

    @JsName("C")
    public fun copy(other: UObject): EnvelopeFollowerListener

    @JsName("C")
    public fun copy(other: Any): EnvelopeFollowerListener
  }
}

@JsName("EEnvelopeFollowerPeakMode")
public external object EnvelopeFollowerPeakMode {
  public var MeanSquared: String

  public var RootMeanSquared: String

  public var Peak: String

  public var Count: String

  @JsName("EEnvelopeFollowerPeakMode_MAX")
  public var Max: String
}

public open external class SourceEffectEnvelopeFollowerSettings {
  @JsName("AttackTime")
  public open var attackTime: Number

  @JsName("ReleaseTime")
  public open var releaseTime: Number

  @JsName("PeakMode")
  public open var peakMode: String

  @JsName("bIsAnalogMode")
  public open var isAnalogMode: Boolean

  public open fun clone(): SourceEffectEnvelopeFollowerSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectEnvelopeFollowerSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectEnvelopeFollowerSettings
  }
}

public open external class SourceEffectEnvelopeFollowerPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectEnvelopeFollowerSettings

  @JsName("UnregisterEnvelopeFollowerListener")
  public open
      fun unregisterEnvelopeFollowerListener(envelopeFollowerListener: EnvelopeFollowerListener):
      Unit

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectEnvelopeFollowerSettings): Unit

  @JsName("RegisterEnvelopeFollowerListener")
  public open
      fun registerEnvelopeFollowerListener(envelopeFollowerListener: EnvelopeFollowerListener): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectEnvelopeFollowerPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectEnvelopeFollowerPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectEnvelopeFollowerPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectEnvelopeFollowerPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectEnvelopeFollowerPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectEnvelopeFollowerPreset
  }
}

@JsName("SourceEffectEQBand")
public open external class SourceEffectEqBand {
  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Bandwidth")
  public open var bandwidth: Number

  @JsName("GainDb")
  public open var gainDb: Number

  @JsName("bEnabled")
  public open var enabled: Boolean

  public open fun clone(): SourceEffectEqBand

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectEqBand

    @JsName("C")
    public fun copy(other: Any): SourceEffectEqBand
  }
}

@JsName("SourceEffectEQSettings")
public open external class SourceEffectEqSettings {
  @JsName("EQBands")
  public open var eqBands: Array<SourceEffectEqBand>

  public open fun clone(): SourceEffectEqSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectEqSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectEqSettings
  }
}

@JsName("SourceEffectEQPreset")
public open external class SourceEffectEqPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectEqSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectEqSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectEqPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectEqPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectEqPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectEqPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectEqPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectEqPreset
  }
}

@JsName("ESourceEffectFilterCircuit")
public external object SourceEffectFilterCircuit {
  public var OnePole: String

  public var StateVariable: String

  public var Ladder: String

  public var Count: String

  @JsName("ESourceEffectFilterCircuit_MAX")
  public var Max: String
}

@JsName("ESourceEffectFilterType")
public external object SourceEffectFilterType {
  public var LowPass: String

  public var HighPass: String

  public var BandPass: String

  public var BandStop: String

  public var Count: String

  @JsName("ESourceEffectFilterType_MAX")
  public var Max: String
}

@JsName("ESourceEffectFilterParam")
public external object SourceEffectFilterParam {
  public var FilterFrequency: String

  public var FilterResonance: String

  public var Count: String

  @JsName("ESourceEffectFilterParam_MAX")
  public var Max: String
}

public open external class SourceEffectFilterAudioBusModulationSettings {
  @JsName("AudioBus")
  public open var audioBus: AudioBus

  @JsName("EnvelopeFollowerAttackTimeMsec")
  public open var envelopeFollowerAttackTimeMsec: Number

  @JsName("EnvelopeFollowerReleaseTimeMsec")
  public open var envelopeFollowerReleaseTimeMsec: Number

  @JsName("EnvelopeGainMultiplier")
  public open var envelopeGainMultiplier: Number

  @JsName("FilterParam")
  public open var filterParam: String

  @JsName("MinFrequencyModulation")
  public open var minFrequencyModulation: Number

  @JsName("MaxFrequencyModulation")
  public open var maxFrequencyModulation: Number

  @JsName("MinResonanceModulation")
  public open var minResonanceModulation: Number

  @JsName("MaxResonanceModulation")
  public open var maxResonanceModulation: Number

  public open fun clone(): SourceEffectFilterAudioBusModulationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectFilterAudioBusModulationSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectFilterAudioBusModulationSettings
  }
}

public open external class SourceEffectFilterSettings {
  @JsName("FilterCircuit")
  public open var filterCircuit: String

  @JsName("FilterType")
  public open var filterType: String

  @JsName("CutoffFrequency")
  public open var cutoffFrequency: Number

  @JsName("FilterQ")
  public open var filterQ: Number

  @JsName("AudioBusModulation")
  public open var audioBusModulation: Array<SourceEffectFilterAudioBusModulationSettings>

  public open fun clone(): SourceEffectFilterSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectFilterSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectFilterSettings
  }
}

public open external class SourceEffectFilterPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectFilterSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectFilterSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectFilterPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectFilterPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectFilterPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectFilterPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectFilterPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectFilterPreset
  }
}

public open external class SourceEffectFoldbackDistortionSettings {
  @JsName("InputGainDb")
  public open var inputGainDb: Number

  @JsName("ThresholdDb")
  public open var thresholdDb: Number

  @JsName("OutputGainDb")
  public open var outputGainDb: Number

  public open fun clone(): SourceEffectFoldbackDistortionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectFoldbackDistortionSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectFoldbackDistortionSettings
  }
}

public open external class SourceEffectFoldbackDistortionPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectFoldbackDistortionSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectFoldbackDistortionSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectFoldbackDistortionPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectFoldbackDistortionPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectFoldbackDistortionPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectFoldbackDistortionPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectFoldbackDistortionPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectFoldbackDistortionPreset
  }
}

@JsName("EStereoChannelMode")
public external object StereoChannelMode {
  public var MidSide: String

  public var LeftRight: String

  @JsName("count")
  public var Count: String

  @JsName("EStereoChannelMode_MAX")
  public var Max: String
}

public open external class SourceEffectMidSideSpreaderSettings {
  @JsName("SpreadAmount")
  public open var spreadAmount: Number

  @JsName("InputMode")
  public open var inputMode: String

  @JsName("OutputMode")
  public open var outputMode: String

  @JsName("bEqualPower")
  public open var equalPower: Boolean

  public open fun clone(): SourceEffectMidSideSpreaderSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectMidSideSpreaderSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectMidSideSpreaderSettings
  }
}

public open external class SourceEffectMidSideSpreaderPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectMidSideSpreaderSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectMidSideSpreaderSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectMidSideSpreaderPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectMidSideSpreaderPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectMidSideSpreaderPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectMidSideSpreaderPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectMidSideSpreaderPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectMidSideSpreaderPreset
  }
}

@JsName("ESourceEffectMotionFilterTopology")
public external object SourceEffectMotionFilterTopology {
  public var SerialMode: String

  public var ParallelMode: String

  public var Count: String

  @JsName("ESourceEffectMotionFilterTopology_MAX")
  public var Max: String
}

@JsName("ESourceEffectMotionFilterCircuit")
public external object SourceEffectMotionFilterCircuit {
  public var OnePole: String

  public var StateVariable: String

  public var Ladder: String

  public var Count: String

  @JsName("ESourceEffectMotionFilterCircuit_MAX")
  public var Max: String
}

@JsName("ESourceEffectMotionFilterType")
public external object SourceEffectMotionFilterType {
  public var LowPass: String

  public var HighPass: String

  public var BandPass: String

  public var BandStop: String

  public var Count: String

  @JsName("ESourceEffectMotionFilterType_MAX")
  public var Max: String
}

public open external class SourceEffectIndividualFilterSettings {
  @JsName("FilterCircuit")
  public open var filterCircuit: String

  @JsName("FilterType")
  public open var filterType: String

  @JsName("CutoffFrequency")
  public open var cutoffFrequency: Number

  @JsName("FilterQ")
  public open var filterQ: Number

  public open fun clone(): SourceEffectIndividualFilterSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectIndividualFilterSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectIndividualFilterSettings
  }
}

public open external class SourceEffectMotionFilterSettings {
  @JsName("MotionFilterTopology")
  public open var motionFilterTopology: String

  @JsName("MotionFilterMix")
  public open var motionFilterMix: Number

  @JsName("FilterASettings")
  public open var filterASettings: SourceEffectIndividualFilterSettings

  @JsName("FilterBSettings")
  public open var filterBSettings: SourceEffectIndividualFilterSettings

  @JsName("ModulationMappings")
  public open var modulationMappings: Any

  @JsName("DryVolumeDb")
  public open var dryVolumeDb: Number

  public open fun clone(): SourceEffectMotionFilterSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectMotionFilterSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectMotionFilterSettings
  }
}

public open external class SourceEffectMotionFilterPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectMotionFilterSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectMotionFilterSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectMotionFilterPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectMotionFilterPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectMotionFilterPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectMotionFilterPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectMotionFilterPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectMotionFilterPreset
  }
}

public open external class SourceEffectPannerSettings {
  @JsName("Spread")
  public open var spread: Number

  @JsName("Pan")
  public open var pan: Number

  public open fun clone(): SourceEffectPannerSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectPannerSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectPannerSettings
  }
}

public open external class SourceEffectPannerPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectPannerSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectPannerSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectPannerPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectPannerPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectPannerPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectPannerPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectPannerPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectPannerPreset
  }
}

@JsName("EPhaserLFOType")
public external object PhaserLFOType {
  public var Sine: String

  public var UpSaw: String

  public var DownSaw: String

  public var Square: String

  public var Triangle: String

  public var Exponential: String

  public var RandomSampleHold: String

  public var Count: String

  @JsName("EPhaserLFOType_MAX")
  public var Max: String
}

public open external class SourceEffectPhaserSettings {
  @JsName("WetLevel")
  public open var wetLevel: Number

  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Feedback")
  public open var feedback: Number

  @JsName("LFOType")
  public open var lfoType: String

  @JsName("UseQuadraturePhase")
  public open var useQuadraturePhase: Boolean

  public open fun clone(): SourceEffectPhaserSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectPhaserSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectPhaserSettings
  }
}

public open external class SourceEffectPhaserPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectPhaserSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectPhaserSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectPhaserPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectPhaserPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectPhaserPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectPhaserPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectPhaserPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectPhaserPreset
  }
}

@JsName("ERingModulatorTypeSourceEffect")
public external object RingModulatorTypeSourceEffect {
  public var Sine: String

  public var Saw: String

  public var Triangle: String

  public var Square: String

  public var Count: String

  @JsName("ERingModulatorTypeSourceEffect_MAX")
  public var Max: String
}

public open external class SourceEffectRingModulationSettings {
  @JsName("ModulatorType")
  public open var modulatorType: String

  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Depth")
  public open var depth: Number

  @JsName("DryLevel")
  public open var dryLevel: Number

  @JsName("WetLevel")
  public open var wetLevel: Number

  @JsName("AudioBusModulator")
  public open var audioBusModulator: AudioBus

  public open fun clone(): SourceEffectRingModulationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectRingModulationSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectRingModulationSettings
  }
}

public open external class SourceEffectRingModulationPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectRingModulationSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectRingModulationSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectRingModulationPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectRingModulationPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectRingModulationPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectRingModulationPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectRingModulationPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectRingModulationPreset
  }
}

public open external class SourceEffectSimpleDelaySettings {
  @JsName("SpeedOfSound")
  public open var speedOfSound: Number

  @JsName("DelayAmount")
  public open var delayAmount: Number

  @JsName("DryAmount")
  public open var dryAmount: Number

  @JsName("WetAmount")
  public open var wetAmount: Number

  @JsName("Feedback")
  public open var feedback: Number

  @JsName("bDelayBasedOnDistance")
  public open var delayBasedOnDistance: Boolean

  public open fun clone(): SourceEffectSimpleDelaySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectSimpleDelaySettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectSimpleDelaySettings
  }
}

public open external class SourceEffectSimpleDelayPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectSimpleDelaySettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectSimpleDelaySettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectSimpleDelayPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectSimpleDelayPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectSimpleDelayPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectSimpleDelayPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectSimpleDelayPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectSimpleDelayPreset
  }
}

@JsName("EStereoDelaySourceEffect")
public external object StereoDelaySourceEffect {
  public var Normal: String

  public var Cross: String

  public var PingPong: String

  public var Count: String

  @JsName("EStereoDelaySourceEffect_MAX")
  public var Max: String
}

@JsName("EStereoDelayFiltertype")
public external object StereoDelayFiltertype {
  public var Lowpass: String

  public var Highpass: String

  public var Bandpass: String

  public var Notch: String

  public var Count: String

  @JsName("EStereoDelayFiltertype_MAX")
  public var Max: String
}

public open external class SourceEffectStereoDelaySettings {
  @JsName("DelayMode")
  public open var delayMode: String

  @JsName("DelayTimeMsec")
  public open var delayTimeMsec: Number

  @JsName("Feedback")
  public open var feedback: Number

  @JsName("DelayRatio")
  public open var delayRatio: Number

  @JsName("WetLevel")
  public open var wetLevel: Number

  @JsName("DryLevel")
  public open var dryLevel: Number

  @JsName("bFilterEnabled")
  public open var filterEnabled: Boolean

  @JsName("FilterType")
  public open var filterType: String

  @JsName("FilterFrequency")
  public open var filterFrequency: Number

  @JsName("FilterQ")
  public open var filterQ: Number

  public open fun clone(): SourceEffectStereoDelaySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectStereoDelaySettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectStereoDelaySettings
  }
}

public open external class SourceEffectStereoDelayPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectStereoDelaySettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectStereoDelaySettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectStereoDelayPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectStereoDelayPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectStereoDelayPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectStereoDelayPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectStereoDelayPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectStereoDelayPreset
  }
}

public open external class SourceEffectWaveShaperSettings {
  @JsName("Amount")
  public open var amount: Number

  @JsName("OutputGainDb")
  public open var outputGainDb: Number

  public open fun clone(): SourceEffectWaveShaperSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectWaveShaperSettings

    @JsName("C")
    public fun copy(other: Any): SourceEffectWaveShaperSettings
  }
}

public open external class SourceEffectWaveShaperPreset(
  outer: UObject,
) : SoundEffectSourcePreset {
  @JsName("Settings")
  public open var settings: SourceEffectWaveShaperSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SourceEffectWaveShaperSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceEffectWaveShaperPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceEffectWaveShaperPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceEffectWaveShaperPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceEffectWaveShaperPreset

    @JsName("C")
    public fun copy(other: UObject): SourceEffectWaveShaperPreset

    @JsName("C")
    public fun copy(other: Any): SourceEffectWaveShaperPreset
  }
}

public open external class AudioImpulseResponse(
  outer: UObject,
) : UObject {
  @JsName("ImpulseResponse")
  public open var impulseResponse: Array<Number>

  @JsName("NumChannels")
  public open var numChannels: Number

  @JsName("SampleRate")
  public open var sampleRate: Number

  @JsName("NormalizationVolumeDb")
  public open var normalizationVolumeDb: Number

  @JsName("bTrueStereo")
  public open var trueStereo: Boolean

  @JsName("IRData")
  public open var irData: Array<Number>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioImpulseResponse

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioImpulseResponse

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioImpulseResponse

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioImpulseResponse

    @JsName("C")
    public fun copy(other: UObject): AudioImpulseResponse

    @JsName("C")
    public fun copy(other: Any): AudioImpulseResponse
  }
}

public open external class SubmixEffectConvolutionReverbSettings {
  @JsName("NormalizationVolumeDb")
  public open var normalizationVolumeDb: Number

  @JsName("bBypass")
  public open var bypass: Boolean

  @JsName("bMixInputChannelFormatToImpulseResponseFormat")
  public open var mixInputChannelFormatToImpulseResponseFormat: Boolean

  @JsName("bMixReverbOutputToOutputChannelFormat")
  public open var mixReverbOutputToOutputChannelFormat: Boolean

  @JsName("SurroundRearChannelBleedDb")
  public open var surroundRearChannelBleedDb: Number

  @JsName("bInvertRearChannelBleedPhase")
  public open var invertRearChannelBleedPhase: Boolean

  @JsName("bSurroundRearChannelFlip")
  public open var surroundRearChannelFlip: Boolean

  @JsName("SurroundRearChannelBleedAmount")
  public open var surroundRearChannelBleedAmount: Number

  @JsName("ImpulseResponse")
  public open var impulseResponse: AudioImpulseResponse

  @JsName("AllowHArdwareAcceleration")
  public open var allowHArdwareAcceleration: Boolean

  public open fun clone(): SubmixEffectConvolutionReverbSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectConvolutionReverbSettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectConvolutionReverbSettings
  }
}

@JsName("ESubmixEffectConvolutionReverbBlockSize")
public external object SubmixEffectConvolutionReverbBlockSize {
  @JsName("BlockSize256")
  public var TwoFiftySix: String

  @JsName("BlockSize512")
  public var FiveTwelve: String

  @JsName("BlockSize1024")
  public var TenTwentyFour: String

  @JsName("ESubmixEffectConvolutionReverbBlockSize_MAX")
  public var Max: String
}

public open external class SubmixEffectConvolutionReverbPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("ImpulseResponse")
  public open var impulseResponse: AudioImpulseResponse

  @JsName("Settings")
  public open var settings: SubmixEffectConvolutionReverbSettings

  @JsName("BlockSize")
  public open var blockSize: String

  @JsName("bEnableHardwareAcceleration")
  public open var enableHardwareAcceleration: Boolean

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectConvolutionReverbSettings): Unit

  @JsName("SetImpulseResponse")
  public open fun setImpulseResponse(inImpulseResponse: AudioImpulseResponse): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectConvolutionReverbPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectConvolutionReverbPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectConvolutionReverbPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectConvolutionReverbPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectConvolutionReverbPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectConvolutionReverbPreset
  }
}

@JsName("T$456")
public external interface Object456 {
  @JsName("DelaySettings")
  public var delaySettings: SubmixEffectDelaySettings

  @JsName("$")
  public var value: SubmixEffectDelaySettings
}

public open external class SubmixEffectDelaySettings {
  @JsName("MaximumDelayLength")
  public open var maximumDelayLength: Number

  @JsName("InterpolationTime")
  public open var interpolationTime: Number

  @JsName("DelayLength")
  public open var delayLength: Number

  public open fun clone(): SubmixEffectDelaySettings

  @JsName("SetDelayLength")
  public open fun setDelayLength(delayLength: Number): Object456

  @JsName("SetInterpolationTime")
  public open fun setInterpolationTime(interpolationTime: Number): Object456

  @JsName("SetMaximumDelayLength")
  public open fun setMaximumDelayLength(maximumDelayLength: Number): Object456

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectDelaySettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectDelaySettings

    @JsName("SetDelayLength")
    public fun setDelayLength(delaySettings: SubmixEffectDelaySettings, delayLength: Number):
        Object456

    @JsName("SetInterpolationTime")
    public fun setInterpolationTime(delaySettings: SubmixEffectDelaySettings,
        interpolationTime: Number): Object456

    @JsName("SetMaximumDelayLength")
    public fun setMaximumDelayLength(delaySettings: SubmixEffectDelaySettings,
        maximumDelayLength: Number): Object456
  }
}

public open external class SubmixEffectDelayStatics(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectDelayStatics

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectDelayStatics

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectDelayStatics

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectDelayStatics

    @JsName("SetMaximumDelayLength")
    public fun setMaximumDelayLength(delaySettings: SubmixEffectDelaySettings,
        maximumDelayLength: Number): Object456

    @JsName("SetInterpolationTime")
    public fun setInterpolationTime(delaySettings: SubmixEffectDelaySettings,
        interpolationTime: Number): Object456

    @JsName("SetDelayLength")
    public fun setDelayLength(delaySettings: SubmixEffectDelaySettings, delayLength: Number):
        Object456

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectDelayStatics

    @JsName("C")
    public fun copy(other: Any): SubmixEffectDelayStatics
  }
}

public open external class SubmixEffectDelayPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectDelaySettings

  @JsName("DynamicSettings")
  public open var dynamicSettings: SubmixEffectDelaySettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectDelaySettings): Unit

  @JsName("SetInterpolationTime")
  public open fun setInterpolationTime(time: Number): Unit

  @JsName("SetDelay")
  public open fun setDelay(length: Number): Unit

  @JsName("SetDefaultSettings")
  public open fun setDefaultSettings(inSettings: SubmixEffectDelaySettings): Unit

  @JsName("GetMaxDelayInMilliseconds")
  public open fun getMaxDelayInMilliseconds(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectDelayPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectDelayPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectDelayPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectDelayPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectDelayPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectDelayPreset
  }
}

@JsName("ESubmixFilterType")
public external object SubmixFilterType {
  public var LowPass: String

  public var HighPass: String

  public var BandPass: String

  public var BandStop: String

  public var Count: String

  @JsName("ESubmixFilterType_MAX")
  public var Max: String
}

@JsName("ESubmixFilterAlgorithm")
public external object SubmixFilterAlgorithm {
  public var OnePole: String

  public var StateVariable: String

  public var Ladder: String

  public var Count: String

  @JsName("ESubmixFilterAlgorithm_MAX")
  public var Max: String
}

public open external class SubmixEffectFilterSettings {
  @JsName("FilterType")
  public open var filterType: String

  @JsName("FilterAlgorithm")
  public open var filterAlgorithm: String

  @JsName("FilterFrequency")
  public open var filterFrequency: Number

  @JsName("FilterQ")
  public open var filterQ: Number

  public open fun clone(): SubmixEffectFilterSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectFilterSettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectFilterSettings
  }
}

public open external class SubmixEffectFilterPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectFilterSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectFilterSettings): Unit

  @JsName("SetFilterType")
  public open fun setFilterType(inType: String): Unit

  @JsName("SetFilterQMod")
  public open fun setFilterQMod(inQ: Number): Unit

  @JsName("SetFilterQ")
  public open fun setFilterQ(inQ: Number): Unit

  @JsName("SetFilterCutoffFrequencyMod")
  public open fun setFilterCutoffFrequencyMod(inFrequency: Number): Unit

  @JsName("SetFilterCutoffFrequency")
  public open fun setFilterCutoffFrequency(inFrequency: Number): Unit

  @JsName("SetFilterAlgorithm")
  public open fun setFilterAlgorithm(inAlgorithm: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectFilterPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectFilterPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectFilterPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectFilterPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectFilterPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectFilterPreset
  }
}

public open external class SubmixEffectFlexiverbSettings {
  @JsName("PreDelay")
  public open var preDelay: Number

  @JsName("DecayTime")
  public open var decayTime: Number

  @JsName("RoomDampening")
  public open var roomDampening: Number

  @JsName("Complexity")
  public open var complexity: Number

  public open fun clone(): SubmixEffectFlexiverbSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectFlexiverbSettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectFlexiverbSettings
  }
}

public open external class SubmixEffectFlexiverbPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectFlexiverbSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectFlexiverbSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectFlexiverbPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectFlexiverbPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectFlexiverbPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectFlexiverbPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectFlexiverbPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectFlexiverbPreset
  }
}

public open external class DynamicsBandSettings {
  @JsName("CrossoverTopFrequency")
  public open var crossoverTopFrequency: Number

  @JsName("AttackTimeMsec")
  public open var attackTimeMsec: Number

  @JsName("ReleaseTimeMsec")
  public open var releaseTimeMsec: Number

  @JsName("ThresholdDb")
  public open var thresholdDb: Number

  @JsName("Ratio")
  public open var ratio: Number

  @JsName("KneeBandwidthDb")
  public open var kneeBandwidthDb: Number

  @JsName("InputGainDb")
  public open var inputGainDb: Number

  @JsName("OutputGainDb")
  public open var outputGainDb: Number

  public open fun clone(): DynamicsBandSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DynamicsBandSettings

    @JsName("C")
    public fun copy(other: Any): DynamicsBandSettings
  }
}

public open external class SubmixEffectMultibandCompressorSettings {
  @JsName("DynamicsProcessorType")
  public open var dynamicsProcessorType: String

  @JsName("PeakMode")
  public open var peakMode: String

  @JsName("LinkMode")
  public open var linkMode: String

  @JsName("LookAheadMsec")
  public open var lookAheadMsec: Number

  @JsName("bAnalogMode")
  public open var analogMode: Boolean

  @JsName("bFourPole")
  public open var fourPole: Boolean

  @JsName("bBypass")
  public open var bypass: Boolean

  @JsName("KeySource")
  public open var keySource: String

  @JsName("ExternalAudioBus")
  public open var externalAudioBus: AudioBus

  @JsName("ExternalSubmix")
  public open var externalSubmix: SoundSubmix

  @JsName("KeyGainDb")
  public open var keyGainDb: Number

  @JsName("bKeyAudition")
  public open var keyAudition: Boolean

  @JsName("Bands")
  public open var bands: Array<DynamicsBandSettings>

  public open fun clone(): SubmixEffectMultibandCompressorSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectMultibandCompressorSettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectMultibandCompressorSettings
  }
}

public open external class SubmixEffectMultibandCompressorPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectMultibandCompressorSettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectMultibandCompressorSettings): Unit

  @JsName("SetExternalSubmix")
  public open fun setExternalSubmix(submix: SoundSubmix): Unit

  @JsName("SetAudioBus")
  public open fun setAudioBus(audioBus: AudioBus): Unit

  @JsName("ResetKey")
  public open fun resetKey(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectMultibandCompressorPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectMultibandCompressorPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectMultibandCompressorPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectMultibandCompressorPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectMultibandCompressorPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectMultibandCompressorPreset
  }
}

public open external class SubmixEffectStereoDelaySettings {
  @JsName("DelayMode")
  public open var delayMode: String

  @JsName("DelayTimeMsec")
  public open var delayTimeMsec: Number

  @JsName("Feedback")
  public open var feedback: Number

  @JsName("DelayRatio")
  public open var delayRatio: Number

  @JsName("WetLevel")
  public open var wetLevel: Number

  @JsName("DryLevel")
  public open var dryLevel: Number

  @JsName("bFilterEnabled")
  public open var filterEnabled: Boolean

  @JsName("FilterType")
  public open var filterType: String

  @JsName("FilterFrequency")
  public open var filterFrequency: Number

  @JsName("FilterQ")
  public open var filterQ: Number

  public open fun clone(): SubmixEffectStereoDelaySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectStereoDelaySettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectStereoDelaySettings
  }
}

public open external class SubmixEffectStereoDelayPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectStereoDelaySettings

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectStereoDelaySettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectStereoDelayPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectStereoDelayPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectStereoDelayPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectStereoDelayPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectStereoDelayPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectStereoDelayPreset
  }
}

@JsName("ETapLineMode")
public external object TapLineMode {
  public var SendToChannel: String

  public var Panning: String

  public var Disabled: String

  @JsName("ETapLineMode_MAX")
  public var Max: String
}

public open external class TapDelayInfo {
  @JsName("TapLineMode")
  public open var tapLineMode: String

  @JsName("DelayLength")
  public open var delayLength: Number

  @JsName("Gain")
  public open var gain: Number

  @JsName("OutputChannel")
  public open var outputChannel: Number

  @JsName("PanInDegrees")
  public open var panInDegrees: Number

  @JsName("TapId")
  public open var tapId: Number

  public open fun clone(): TapDelayInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TapDelayInfo

    @JsName("C")
    public fun copy(other: Any): TapDelayInfo
  }
}

public open external class SubmixEffectTapDelaySettings {
  @JsName("MaximumDelayLength")
  public open var maximumDelayLength: Number

  @JsName("InterpolationTime")
  public open var interpolationTime: Number

  @JsName("Taps")
  public open var taps: Array<TapDelayInfo>

  public open fun clone(): SubmixEffectTapDelaySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubmixEffectTapDelaySettings

    @JsName("C")
    public fun copy(other: Any): SubmixEffectTapDelaySettings
  }
}

@JsName("T$457")
public external interface TapIdsProvider {
  @JsName("TapIds")
  public var tapIds: Array<Number>
}

@JsName("T$458")
public external interface TapInfoProvider {
  @JsName("TapInfo")
  public var tapInfo: TapDelayInfo
}

@JsName("T$459")
public external interface TapIdProvider {
  @JsName("TapId")
  public var tapId: Number
}

public open external class SubmixEffectTapDelayPreset(
  outer: UObject,
) : SoundEffectSubmixPreset {
  @JsName("Settings")
  public open var settings: SubmixEffectTapDelaySettings

  @JsName("SetTap")
  public open fun setTap(tapId: Number, tapInfo: TapDelayInfo): Unit

  @JsName("SetSettings")
  public open fun setSettings(inSettings: SubmixEffectTapDelaySettings): Unit

  @JsName("SetInterpolationTime")
  public open fun setInterpolationTime(time: Number): Unit

  @JsName("RemoveTap")
  public open fun removeTap(tapId: Number): Unit

  @JsName("GetTapIds")
  public open fun getTapIds(tapIds: Array<Number>): TapIdsProvider

  @JsName("GetTap")
  public open fun getTap(tapId: Number, tapInfo: TapDelayInfo): TapInfoProvider

  @JsName("GetMaxDelayInMilliseconds")
  public open fun getMaxDelayInMilliseconds(): Number

  @JsName("AddTap")
  public open fun addTap(tapId: Number): TapIdProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubmixEffectTapDelayPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubmixEffectTapDelayPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubmixEffectTapDelayPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubmixEffectTapDelayPreset

    @JsName("C")
    public fun copy(other: UObject): SubmixEffectTapDelayPreset

    @JsName("C")
    public fun copy(other: Any): SubmixEffectTapDelayPreset
  }
}

@JsName("Synth2DSliderStyle")
public open external class Synth2dSliderStyle : SlateWidgetStyle {
  @JsName("NormalThumbImage")
  public open var normalThumbImage: SlateBrush

  @JsName("DisabledThumbImage")
  public open var disabledThumbImage: SlateBrush

  @JsName("NormalBarImage")
  public open var normalBarImage: SlateBrush

  @JsName("DisabledBarImage")
  public open var disabledBarImage: SlateBrush

  @JsName("BackgroundImage")
  public open var backgroundImage: SlateBrush

  @JsName("BarThickness")
  public open var barThickness: Number

  public override fun clone(): Synth2dSliderStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Synth2dSliderStyle

    @JsName("C")
    public fun copy(other: Any): Synth2dSliderStyle
  }
}

@JsName("Synth2DSlider")
public open external class Synth2dSlider(
  outer: UObject,
) : Widget {
  @JsName("ValueX")
  public open var valueX: Number

  @JsName("ValueY")
  public open var valueY: Number

  @JsName("ValueXDelegate")
  public open var valueXDelegate: UnrealEngineDelegate<() -> Number>

  @JsName("ValueYDelegate")
  public open var valueYDelegate: UnrealEngineDelegate<() -> Number>

  @JsName("WidgetStyle")
  public open var widgetStyle: Synth2dSliderStyle

  @JsName("SliderHandleColor")
  public open var sliderHandleColor: LinearColor

  @JsName("IndentHandle")
  public open var indentHandle: Boolean

  @JsName("Locked")
  public open var locked: Boolean

  @JsName("StepSize")
  public open var stepSize: Number

  @JsName("IsFocusable")
  public open var isFocusable: Boolean

  @JsName("OnMouseCaptureBegin")
  public open var onMouseCaptureBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnMouseCaptureEnd")
  public open var onMouseCaptureEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnControllerCaptureBegin")
  public open var onControllerCaptureBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnControllerCaptureEnd")
  public open var onControllerCaptureEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnValueChangedX")
  public open var onValueChangedX: UnrealEngineMulticastDelegate<(Value: Number) -> Unit>

  @JsName("OnValueChangedY")
  public open var onValueChangedY: UnrealEngineMulticastDelegate<(Value: Number) -> Unit>

  @JsName("SetValue")
  public open fun setValue(inValue: Vector2d): Unit

  @JsName("SetStepSize")
  public open fun setStepSize(inValue: Number): Unit

  @JsName("SetSliderHandleColor")
  public open fun setSliderHandleColor(inValue: LinearColor): Unit

  @JsName("SetLocked")
  public open fun setLocked(inValue: Boolean): Unit

  @JsName("SetIndentHandle")
  public open fun setIndentHandle(inValue: Boolean): Unit

  @JsName("GetValue")
  public open fun getValue(): Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Synth2dSlider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Synth2dSlider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Synth2dSlider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Synth2dSlider

    @JsName("C")
    public fun copy(other: UObject): Synth2dSlider

    @JsName("C")
    public fun copy(other: Any): Synth2dSlider
  }
}

@JsName("EGranularSynthSeekType")
public external object GranularSynthSeekType {
  public var FromBeginning: String

  public var FromCurrentPosition: String

  public var Count: String

  @JsName("EGranularSynthSeekType_MAX")
  public var Max: String
}

@JsName("EGranularSynthEnvelopeType")
public external object GranularSynthEnvelopeType {
  public var Rectangular: String

  public var Triangle: String

  public var DownwardTriangle: String

  public var UpwardTriangle: String

  public var ExponentialDecay: String

  public var ExponentialIncrease: String

  public var Gaussian: String

  public var Hanning: String

  public var Lanczos: String

  public var Cosine: String

  public var CosineSquared: String

  public var Welch: String

  public var Blackman: String

  public var BlackmanHarris: String

  public var Count: String

  @JsName("EGranularSynthEnvelopeType_MAX")
  public var Max: String
}

public open external class GranularSynth(
  outer: UObject,
) : SynthComponent {
  @JsName("GranulatedSoundWave")
  public open var granulatedSoundWave: SoundWave

  @JsName("SetSustainGain")
  public open fun setSustainGain(sustainGain: Number): Unit

  @JsName("SetSoundWave")
  public open fun setSoundWave(inSoundWave: SoundWave): Unit

  @JsName("SetScrubMode")
  public open fun setScrubMode(scrubMode: Boolean): Unit

  @JsName("SetReleaseTimeMsec")
  public open fun setReleaseTimeMsec(releaseTimeMsec: Number): Unit

  @JsName("SetPlayheadTime")
  public open fun setPlayheadTime(
    inPositionSec: Number,
    lerpTimeSec: Number,
    seekType: String,
  ): Unit

  @JsName("SetPlaybackSpeed")
  public open fun setPlaybackSpeed(inPlayheadRate: Number): Unit

  @JsName("SetGrainVolume")
  public open fun setGrainVolume(baseVolume: Number, volumeRange: Vector2d): Unit

  @JsName("SetGrainsPerSecond")
  public open fun setGrainsPerSecond(inGrainsPerSecond: Number): Unit

  @JsName("SetGrainProbability")
  public open fun setGrainProbability(inGrainProbability: Number): Unit

  @JsName("SetGrainPitch")
  public open fun setGrainPitch(basePitch: Number, pitchRange: Vector2d): Unit

  @JsName("SetGrainPan")
  public open fun setGrainPan(basePan: Number, panRange: Vector2d): Unit

  @JsName("SetGrainEnvelopeType")
  public open fun setGrainEnvelopeType(envelopeType: String): Unit

  @JsName("SetGrainDuration")
  public open fun setGrainDuration(baseDurationMsec: Number, durationRange: Vector2d): Unit

  @JsName("SetDecayTime")
  public open fun setDecayTime(decayTimeMsec: Number): Unit

  @JsName("SetAttackTime")
  public open fun setAttackTime(attackTimeMsec: Number): Unit

  @JsName("NoteOn")
  public open fun noteOn(
    note: Number,
    velocity: Number,
    duration: Number,
  ): Unit

  @JsName("NoteOff")
  public open fun noteOff(note: Number, kill: Boolean): Unit

  @JsName("IsLoaded")
  public open fun isLoaded(): Boolean

  @JsName("GetSampleDuration")
  public open fun getSampleDuration(): Number

  @JsName("GetCurrentPlayheadTime")
  public open fun getCurrentPlayheadTime(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GranularSynth

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GranularSynth

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GranularSynth

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GranularSynth

    @JsName("C")
    public fun copy(other: UObject): GranularSynth

    @JsName("C")
    public fun copy(other: Any): GranularSynth
  }
}

public open external class MonoWaveTableSynthPreset(
  outer: UObject,
) : UObject {
  @JsName("PresetName")
  public open var presetName: String

  @JsName("bLockKeyframesToGridBool")
  public open var lockKeyframesToGridBool: Boolean

  @JsName("LockKeyframesToGrid")
  public open var lockKeyframesToGrid: Number

  @JsName("WaveTableResolution")
  public open var waveTableResolution: Number

  @JsName("WaveTable")
  public open var waveTable: Array<RuntimeFloatCurve>

  @JsName("bNormalizeWaveTables")
  public open var normalizeWaveTables: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MonoWaveTableSynthPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MonoWaveTableSynthPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MonoWaveTableSynthPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MonoWaveTableSynthPreset

    @JsName("C")
    public fun copy(other: UObject): MonoWaveTableSynthPreset

    @JsName("C")
    public fun copy(other: Any): MonoWaveTableSynthPreset
  }
}

public external object CurveInterpolationType {
  public var AUTOINTERP: String

  public var LINEAR: String

  public var CONSTANT: String

  @JsName("CurveInterpolationType_MAX")
  public var curveInterpolationTypeMax: String
}

public open external class SynthComponentMonoWaveTable(
  outer: UObject,
) : SynthComponent {
  @JsName("OnTableAltered")
  public open var onTableAltered: UnrealEngineMulticastDelegate<(TableIndex: Number) -> Unit>

  @JsName("OnNumTablesChanged")
  public open var onNumTablesChanged: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("CurrentPreset")
  public open var currentPreset: MonoWaveTableSynthPreset

  @JsName("SetWaveTablePosition")
  public open fun setWaveTablePosition(inPosition: Number): Unit

  @JsName("SetSustainPedalState")
  public open fun setSustainPedalState(inSustainPedalState: Boolean): Unit

  @JsName("SetPosLfoType")
  public open fun setPosLfoType(inLfoType: String): Unit

  @JsName("SetPosLfoFrequency")
  public open fun setPosLfoFrequency(inLfoFrequency: Number): Unit

  @JsName("SetPosLfoDepth")
  public open fun setPosLfoDepth(inLfoDepth: Number): Unit

  @JsName("SetPositionEnvelopeSustainGain")
  public open fun setPositionEnvelopeSustainGain(inSustainGain: Number): Unit

  @JsName("SetPositionEnvelopeReleaseTime")
  public open fun setPositionEnvelopeReleaseTime(inReleaseTimeMsec: Number): Unit

  @JsName("SetPositionEnvelopeInvert")
  public open fun setPositionEnvelopeInvert(inInvert: Boolean): Unit

  @JsName("SetPositionEnvelopeDepth")
  public open fun setPositionEnvelopeDepth(inDepth: Number): Unit

  @JsName("SetPositionEnvelopeDecayTime")
  public open fun setPositionEnvelopeDecayTime(inDecayTimeMsec: Number): Unit

  @JsName("SetPositionEnvelopeBiasInvert")
  public open fun setPositionEnvelopeBiasInvert(inBiasInvert: Boolean): Unit

  @JsName("SetPositionEnvelopeBiasDepth")
  public open fun setPositionEnvelopeBiasDepth(inDepth: Number): Unit

  @JsName("SetPositionEnvelopeAttackTime")
  public open fun setPositionEnvelopeAttackTime(inAttackTimeMsec: Number): Unit

  @JsName("SetLowPassFilterResonance")
  public open fun setLowPassFilterResonance(inNewQ: Number): Unit

  @JsName("SetFrequencyWithMidiNote")
  public open fun setFrequencyWithMidiNote(inMidiNote: Number): Unit

  @JsName("SetFrequencyPitchBend")
  public open fun setFrequencyPitchBend(frequencyOffsetCents: Number): Unit

  @JsName("SetFrequency")
  public open fun setFrequency(frequencyHz: Number): Unit

  @JsName("SetFilterEnvelopeSustainGain")
  public open fun setFilterEnvelopeSustainGain(inSustainGain: Number): Unit

  @JsName("SetFilterEnvelopeReleaseTime")
  public open fun setFilterEnvelopeReleaseTime(inReleaseTimeMsec: Number): Unit

  @JsName("SetFilterEnvelopenDecayTime")
  public open fun setFilterEnvelopenDecayTime(inDecayTimeMsec: Number): Unit

  @JsName("SetFilterEnvelopeInvert")
  public open fun setFilterEnvelopeInvert(inInvert: Boolean): Unit

  @JsName("SetFilterEnvelopeDepth")
  public open fun setFilterEnvelopeDepth(inDepth: Number): Unit

  @JsName("SetFilterEnvelopeBiasInvert")
  public open fun setFilterEnvelopeBiasInvert(inBiasInvert: Boolean): Unit

  @JsName("SetFilterEnvelopeBiasDepth")
  public open fun setFilterEnvelopeBiasDepth(inDepth: Number): Unit

  @JsName("SetFilterEnvelopeAttackTime")
  public open fun setFilterEnvelopeAttackTime(inAttackTimeMsec: Number): Unit

  @JsName("SetCurveValue")
  public open fun setCurveValue(
    tableIndex: Number,
    keyframeIndex: Number,
    newValue: Number,
  ): Boolean

  @JsName("SetCurveTangent")
  public open fun setCurveTangent(tableIndex: Number, inNewTangent: Number): Boolean

  @JsName("SetCurveInterpolationType")
  public open fun setCurveInterpolationType(interpolationType: String, tableIndex: Number): Boolean

  @JsName("SetAmpEnvelopeSustainGain")
  public open fun setAmpEnvelopeSustainGain(inSustainGain: Number): Unit

  @JsName("SetAmpEnvelopeReleaseTime")
  public open fun setAmpEnvelopeReleaseTime(inReleaseTimeMsec: Number): Unit

  @JsName("SetAmpEnvelopeInvert")
  public open fun setAmpEnvelopeInvert(inInvert: Boolean): Unit

  @JsName("SetAmpEnvelopeDepth")
  public open fun setAmpEnvelopeDepth(inDepth: Number): Unit

  @JsName("SetAmpEnvelopeDecayTime")
  public open fun setAmpEnvelopeDecayTime(inDecayTimeMsec: Number): Unit

  @JsName("SetAmpEnvelopeBiasInvert")
  public open fun setAmpEnvelopeBiasInvert(inBiasInvert: Boolean): Unit

  @JsName("SetAmpEnvelopeBiasDepth")
  public open fun setAmpEnvelopeBiasDepth(inDepth: Number): Unit

  @JsName("SetAmpEnvelopeAttackTime")
  public open fun setAmpEnvelopeAttackTime(inAttackTimeMsec: Number): Unit

  @JsName("RefreshWaveTable")
  public open fun refreshWaveTable(index: Number): Unit

  @JsName("RefreshAllWaveTables")
  public open fun refreshAllWaveTables(): Unit

  @JsName("NoteOn")
  public open fun noteOn(inMidiNote: Number, inVelocity: Number): Unit

  @JsName("NoteOff")
  public open fun noteOff(inMidiNote: Number): Unit

  @JsName("GetNumTableEntries")
  public open fun getNumTableEntries(): Number

  @JsName("GetMaxTableIndex")
  public open fun getMaxTableIndex(): Number

  @JsName("GetKeyFrameValuesForTable")
  public open fun getKeyFrameValuesForTable(tableIndex: Number): Array<Number>

  @JsName("GetCurveTangent")
  public open fun getCurveTangent(tableIndex: Number): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SynthComponentMonoWaveTable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SynthComponentMonoWaveTable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SynthComponentMonoWaveTable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SynthComponentMonoWaveTable

    @JsName("C")
    public fun copy(other: UObject): SynthComponentMonoWaveTable

    @JsName("C")
    public fun copy(other: Any): SynthComponentMonoWaveTable
  }
}

public open external class SynthComponentToneGenerator(
  outer: UObject,
) : SynthComponent {
  @JsName("Frequency")
  public open var frequency: Number

  @JsName("Volume")
  public open var volume: Number

  @JsName("DistanceAttenuationCurve")
  public open var distanceAttenuationCurve: RuntimeFloatCurve

  @JsName("DistanceRange")
  public open var distanceRange: Vector2d

  @JsName("AttenuationDbAtMaxRange")
  public open var attenuationDbAtMaxRange: Number

  @JsName("SetVolume")
  public open fun setVolume(inVolume: Number): Unit

  @JsName("SetFrequency")
  public open fun setFrequency(inFrequency: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SynthComponentToneGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SynthComponentToneGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SynthComponentToneGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SynthComponentToneGenerator

    @JsName("C")
    public fun copy(other: UObject): SynthComponentToneGenerator

    @JsName("C")
    public fun copy(other: Any): SynthComponentToneGenerator
  }
}

@JsName("ESamplePlayerSeekType")
public external object SamplePlayerSeekType {
  public var FromBeginning: String

  public var FromCurrentPosition: String

  public var FromEnd: String

  public var Count: String

  @JsName("ESamplePlayerSeekType_MAX")
  public var Max: String
}

public open external class SynthSamplePlayer(
  outer: UObject,
) : SynthComponent {
  @JsName("SoundWave")
  public open var soundWave: SoundWave

  @JsName("OnSampleLoaded")
  public open var onSampleLoaded: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnSamplePlaybackProgress")
  public open var onSamplePlaybackProgress: UnrealEngineMulticastDelegate<(ProgressPercent: Number,
      ProgressTimeSeconds: Number) -> Unit>

  @JsName("SetSoundWave")
  public open fun setSoundWave(inSoundWave: SoundWave): Unit

  @JsName("SetScrubTimeWidth")
  public open fun setScrubTimeWidth(inScrubTimeWidthSec: Number): Unit

  @JsName("SetScrubMode")
  public open fun setScrubMode(scrubMode: Boolean): Unit

  @JsName("SetPitch")
  public open fun setPitch(inPitch: Number, timeSec: Number): Unit

  @JsName("SeekToTime")
  public open fun seekToTime(
    timeSec: Number,
    seekType: String,
    wrap: Boolean,
  ): Unit

  @JsName("IsLoaded")
  public open fun isLoaded(): Boolean

  @JsName("GetSampleDuration")
  public open fun getSampleDuration(): Number

  @JsName("GetCurrentPlaybackProgressTime")
  public open fun getCurrentPlaybackProgressTime(): Number

  @JsName("GetCurrentPlaybackProgressPercent")
  public open fun getCurrentPlaybackProgressPercent(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SynthSamplePlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SynthSamplePlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SynthSamplePlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SynthSamplePlayer

    @JsName("C")
    public fun copy(other: UObject): SynthSamplePlayer

    @JsName("C")
    public fun copy(other: Any): SynthSamplePlayer
  }
}

public open external class SynthesisUtilitiesBlueprintFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SynthesisUtilitiesBlueprintFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        SynthesisUtilitiesBlueprintFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SynthesisUtilitiesBlueprintFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SynthesisUtilitiesBlueprintFunctionLibrary

    @JsName("GetLogFrequency")
    public fun getLogFrequency(
      inLinearValue: Number,
      inDomainMin: Number,
      inDomainMax: Number,
      inRangeMin: Number,
      inRangeMax: Number,
    ): Number

    @JsName("GetLinearFrequency")
    public fun getLinearFrequency(
      inLogFrequencyValue: Number,
      inDomainMin: Number,
      inDomainMax: Number,
      inRangeMin: Number,
      inRangeMax: Number,
    ): Number

    @JsName("C")
    public fun copy(other: UObject): SynthesisUtilitiesBlueprintFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): SynthesisUtilitiesBlueprintFunctionLibrary
  }
}

@JsName("ESynthKnobSize")
public external object SynthKnobSize {
  public var Medium: String

  public var Large: String

  public var Count: String

  @JsName("ESynthKnobSize_MAX")
  public var Max: String
}

public open external class SynthKnobStyle : SlateWidgetStyle {
  @JsName("LargeKnob")
  public open var largeKnob: SlateBrush

  @JsName("LargeKnobOverlay")
  public open var largeKnobOverlay: SlateBrush

  @JsName("MediumKnob")
  public open var mediumKnob: SlateBrush

  @JsName("MediumKnobOverlay")
  public open var mediumKnobOverlay: SlateBrush

  @JsName("MinValueAngle")
  public open var minValueAngle: Number

  @JsName("MaxValueAngle")
  public open var maxValueAngle: Number

  @JsName("KnobSize")
  public open var knobSize: String

  public override fun clone(): SynthKnobStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SynthKnobStyle

    @JsName("C")
    public fun copy(other: Any): SynthKnobStyle
  }
}

public open external class SynthKnob(
  outer: UObject,
) : Widget {
  @JsName("Value")
  public open var value: Number

  @JsName("StepSize")
  public open var stepSize: Number

  @JsName("MouseSpeed")
  public open var mouseSpeed: Number

  @JsName("MouseFineTuneSpeed")
  public open var mouseFineTuneSpeed: Number

  @JsName("ShowTooltipInfo")
  public open var showTooltipInfo: Boolean

  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterUnits")
  public open var parameterUnits: String

  @JsName("ValueDelegate")
  public open var valueDelegate: UnrealEngineDelegate<() -> Number>

  @JsName("WidgetStyle")
  public open var widgetStyle: SynthKnobStyle

  @JsName("Locked")
  public open var locked: Boolean

  @JsName("IsFocusable")
  public open var isFocusable: Boolean

  @JsName("OnMouseCaptureBegin")
  public open var onMouseCaptureBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnMouseCaptureEnd")
  public open var onMouseCaptureEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnControllerCaptureBegin")
  public open var onControllerCaptureBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnControllerCaptureEnd")
  public open var onControllerCaptureEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnValueChanged")
  public open var onValueChanged: UnrealEngineMulticastDelegate<(Value: Number) -> Unit>

  @JsName("SetValue")
  public open fun setValue(inValue: Number): Unit

  @JsName("SetStepSize")
  public open fun setStepSize(inValue: Number): Unit

  @JsName("SetLocked")
  public open fun setLocked(inValue: Boolean): Unit

  @JsName("GetValue")
  public open fun getValue(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SynthKnob

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SynthKnob

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SynthKnob

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SynthKnob

    @JsName("C")
    public fun copy(other: UObject): SynthKnob

    @JsName("C")
    public fun copy(other: Any): SynthKnob
  }
}

@JsName("NumTablesChanged__PythonCallable")
public open external class NumTablesChangedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NumTablesChangedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NumTablesChangedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NumTablesChangedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NumTablesChangedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): NumTablesChangedPythonCallable

    @JsName("C")
    public fun copy(other: Any): NumTablesChangedPythonCallable
  }
}

@JsName("OnControllerCaptureBeginEventSynth2D__PythonCallable")
public open external class OnControllerCaptureBeginEventSynth2dPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnControllerCaptureBeginEventSynth2dPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnControllerCaptureBeginEventSynth2dPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnControllerCaptureBeginEventSynth2dPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnControllerCaptureBeginEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnControllerCaptureBeginEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnControllerCaptureBeginEventSynth2dPythonCallable
  }
}

@JsName("OnControllerCaptureEndEventSynth2D__PythonCallable")
public open external class OnControllerCaptureEndEventSynth2dPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnControllerCaptureEndEventSynth2dPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnControllerCaptureEndEventSynth2dPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnControllerCaptureEndEventSynth2dPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnControllerCaptureEndEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnControllerCaptureEndEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnControllerCaptureEndEventSynth2dPythonCallable
  }
}

@JsName("OnEnvelopeFollowerUpdate__PythonCallable")
public open external class OnEnvelopeFollowerUpdatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnEnvelopeFollowerUpdatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnEnvelopeFollowerUpdatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnEnvelopeFollowerUpdatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnEnvelopeFollowerUpdatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnEnvelopeFollowerUpdatePythonCallable

    @JsName("C")
    public fun copy(other: Any): OnEnvelopeFollowerUpdatePythonCallable
  }
}

@JsName("OnFloatValueChangedEventSynth2D__PythonCallable")
public open external class OnFloatValueChangedEventSynth2dPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnFloatValueChangedEventSynth2dPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnFloatValueChangedEventSynth2dPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnFloatValueChangedEventSynth2dPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnFloatValueChangedEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnFloatValueChangedEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnFloatValueChangedEventSynth2dPythonCallable
  }
}

@JsName("OnMouseCaptureBeginEventSynth2D__PythonCallable")
public open external class OnMouseCaptureBeginEventSynth2dPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnMouseCaptureBeginEventSynth2dPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnMouseCaptureBeginEventSynth2dPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnMouseCaptureBeginEventSynth2dPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnMouseCaptureBeginEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnMouseCaptureBeginEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnMouseCaptureBeginEventSynth2dPythonCallable
  }
}

@JsName("OnMouseCaptureEndEventSynth2D__PythonCallable")
public open external class OnMouseCaptureEndEventSynth2dPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnMouseCaptureEndEventSynth2dPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnMouseCaptureEndEventSynth2dPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnMouseCaptureEndEventSynth2dPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnMouseCaptureEndEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnMouseCaptureEndEventSynth2dPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnMouseCaptureEndEventSynth2dPythonCallable
  }
}

@JsName("OnSampleLoaded__PythonCallable")
public open external class OnSampleLoadedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnSampleLoadedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnSampleLoadedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnSampleLoadedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnSampleLoadedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnSampleLoadedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnSampleLoadedPythonCallable
  }
}

@JsName("OnSamplePlaybackProgress__PythonCallable")
public open external class OnSamplePlaybackProgressPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnSamplePlaybackProgressPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnSamplePlaybackProgressPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnSamplePlaybackProgressPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnSamplePlaybackProgressPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnSamplePlaybackProgressPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnSamplePlaybackProgressPythonCallable
  }
}

@JsName("OnTableAltered__PythonCallable")
public open external class OnTableAlteredPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnTableAlteredPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnTableAlteredPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnTableAlteredPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnTableAlteredPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnTableAlteredPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnTableAlteredPythonCallable
  }
}

public open external class AudioImpulseResponseFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioImpulseResponseFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioImpulseResponseFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioImpulseResponseFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioImpulseResponseFactory

    @JsName("C")
    public fun copy(other: UObject): AudioImpulseResponseFactory

    @JsName("C")
    public fun copy(other: Any): AudioImpulseResponseFactory
  }
}

public open external class ModularSynthPresetBankFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModularSynthPresetBankFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModularSynthPresetBankFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModularSynthPresetBankFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModularSynthPresetBankFactory

    @JsName("C")
    public fun copy(other: UObject): ModularSynthPresetBankFactory

    @JsName("C")
    public fun copy(other: Any): ModularSynthPresetBankFactory
  }
}

public open external class MonoWaveTableSynthPresetFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MonoWaveTableSynthPresetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MonoWaveTableSynthPresetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MonoWaveTableSynthPresetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MonoWaveTableSynthPresetFactory

    @JsName("C")
    public fun copy(other: UObject): MonoWaveTableSynthPresetFactory

    @JsName("C")
    public fun copy(other: Any): MonoWaveTableSynthPresetFactory
  }
}

public open external class SynthesisEditorSettings(
  outer: UObject,
) : DeveloperSettings {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SynthesisEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SynthesisEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SynthesisEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SynthesisEditorSettings

    @JsName("C")
    public fun copy(other: UObject): SynthesisEditorSettings

    @JsName("C")
    public fun copy(other: Any): SynthesisEditorSettings
  }
}

public open external class ContentBrowserAssetDataSource(
  outer: UObject,
) : ContentBrowserDataSource {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserAssetDataSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserAssetDataSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserAssetDataSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserAssetDataSource

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserAssetDataSource

    @JsName("C")
    public fun copy(other: Any): ContentBrowserAssetDataSource
  }
}

public open external class ContentBrowserClassDataSource(
  outer: UObject,
) : ContentBrowserDataSource {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserClassDataSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserClassDataSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserClassDataSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserClassDataSource

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserClassDataSource

    @JsName("C")
    public fun copy(other: Any): ContentBrowserClassDataSource
  }
}

@JsName("T$460")
public external interface Object460 {
  @JsName("AttributeValue")
  public var attributeValue: Transform

  @JsName("$")
  public var value: Boolean
}

@JsName("T$461")
public external interface Object461 {
  @JsName("AttributeValue")
  public var attributeValue: String

  @JsName("$")
  public var value: Boolean
}

public open external class InterchangeActorFactoryNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetCustomGlobalTransform")
  public open fun setCustomGlobalTransform(attributeValue: Transform): Boolean

  @JsName("SetCustomActorClassName")
  public open fun setCustomActorClassName(attributeValue: String): Boolean

  @JsName("GetCustomGlobalTransform")
  public open fun getCustomGlobalTransform(attributeValue: Transform): Object460

  @JsName("GetCustomActorClassName")
  public open fun getCustomActorClassName(attributeValue: String): Object461

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeActorFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeActorFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeActorFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeActorFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeActorFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeActorFactoryNode
  }
}

public open external class InterchangeCameraNode(
  outer: UObject,
) : InterchangeBaseNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeCameraNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeCameraNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeCameraNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeCameraNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeCameraNode

    @JsName("C")
    public fun copy(other: Any): InterchangeCameraNode
  }
}

public open external class InterchangeLightNode(
  outer: UObject,
) : InterchangeBaseNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeLightNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeLightNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeLightNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeLightNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeLightNode

    @JsName("C")
    public fun copy(other: Any): InterchangeLightNode
  }
}

@JsName("T$462")
public external interface OutDependencyProvider {
  @JsName("OutDependency")
  public var outDependency: String
}

@JsName("T$464")
public external interface Object464 {
  @JsName("AttributeValue")
  public var attributeValue: Number

  @JsName("$")
  public var value: Boolean
}

public open external class InterchangeMaterialFactoryNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetTextureDependencyUid")
  public open fun setTextureDependencyUid(dependencyUid: String): Boolean

  @JsName("SetCustomTranslatedMaterialNodeUid")
  public open fun setCustomTranslatedMaterialNodeUid(attributeValue: String): Boolean

  @JsName("SetCustomMaterialUsage")
  public open fun setCustomMaterialUsage(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomBlendMode")
  public open fun setCustomBlendMode(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("RemoveTextureDependencyUid")
  public open fun removeTextureDependencyUid(dependencyUid: String): Boolean

  @JsName("InitializeMaterialNode")
  public open fun initializeMaterialNode(
    uniqueId: String,
    displayLabel: String,
    inAssetClass: String,
  ): Unit

  @JsName("GetTextureDependency")
  public open fun getTextureDependency(index: Number, outDependency: String): OutDependencyProvider

  @JsName("GetTextureDependencies")
  public open fun getTextureDependencies(outDependencies: Array<String>): OutDependenciesProvider

  @JsName("GetTextureDependeciesCount")
  public open fun getTextureDependeciesCount(): Number

  public override fun getObjectClass(): UnrealEngineClass

  @JsName("GetCustomTranslatedMaterialNodeUid")
  public open fun getCustomTranslatedMaterialNodeUid(attributeValue: String): Object461

  @JsName("GetCustomMaterialUsage")
  public open fun getCustomMaterialUsage(attributeValue: Number): Object464

  @JsName("GetCustomBlendMode")
  public open fun getCustomBlendMode(attributeValue: Number): Object464

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeMaterialFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeMaterialFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeMaterialFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeMaterialFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeMaterialFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeMaterialFactoryNode
  }
}

@JsName("EInterchangeMaterialNodeParameterName")
public external object InterchangeMaterialNodeParameterName {
  public var BaseColor: String

  public var EmissiveColor: String

  public var Specular: String

  public var Roughness: String

  public var Metallic: String

  public var Normal: String

  public var Opacity: String

  public var OpacityMask: String

  @JsName("EInterchangeMaterialNodeParameterName_MAX")
  public var Max: String
}

@JsName("T$465")
public external interface Object465 {
  @JsName("OutVectorData")
  public var outVectorData: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$466")
public external interface Object466 {
  @JsName("OutTextureUid")
  public var outTextureUid: String

  @JsName("OutUVSetIndex")
  public var outUvSetIndex: Number

  @JsName("OutScaleU")
  public var outScaleU: Number

  @JsName("OutScaleV")
  public var outScaleV: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$468")
public external interface Object468 {
  @JsName("OutScalarData")
  public var outScalarData: Number

  @JsName("$")
  public var value: Boolean
}

public open external class InterchangeMaterialNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetTextureDependencyUid")
  public open fun setTextureDependencyUid(dependencyUid: String): Boolean

  @JsName("SetPayLoadKey")
  public open fun setPayLoadKey(payloadKey: String): Unit

  @JsName("RemoveTextureDependencyUid")
  public open fun removeTextureDependencyUid(dependencyUid: String): Boolean

  @JsName("GetVectorParameterData")
  public open fun getVectorParameterData(parameterName: String, outVectorData: Vector): Object465

  @JsName("GetTextureParameterData")
  public open fun getTextureParameterData(
    parameterName: String,
    outTextureUid: String,
    outUvSetIndex: Number,
    outScaleU: Number,
    outScaleV: Number,
  ): Object466

  @JsName("GetTextureDependency")
  public open fun getTextureDependency(index: Number, outDependency: String): OutDependencyProvider

  @JsName("GetTextureDependencies")
  public open fun getTextureDependencies(outDependencies: Array<String>): OutDependenciesProvider

  @JsName("GetTextureDependeciesCount")
  public open fun getTextureDependeciesCount(): Number

  @JsName("GetScalarParameterData")
  public open fun getScalarParameterData(parameterName: String, outScalarData: Number): Object468

  @JsName("AddVectorParameterData")
  public open fun addVectorParameterData(parameterName: String, vectorData: Vector): Unit

  @JsName("AddTextureParameterData")
  public open fun addTextureParameterData(
    parameterName: String,
    textureUid: String,
    uvSetIndex: Number,
    scaleU: Number,
    scaleV: Number,
  ): Unit

  @JsName("AddScalarParameterData")
  public open fun addScalarParameterData(parameterName: String, scalarData: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeMaterialNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeMaterialNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeMaterialNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeMaterialNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeMaterialNode

    @JsName("C")
    public fun copy(other: Any): InterchangeMaterialNode
  }
}

@JsName("T$473")
public external interface Object473 {
  @JsName("AttributeValue")
  public var attributeValue: Boolean

  @JsName("$")
  public var value: Boolean
}

@JsName("T$474")
public external interface Object474 {
  @JsName("AttributeValue")
  public var attributeValue: Box

  @JsName("$")
  public var value: Boolean
}

@JsName("T$475")
public external interface Object475 {
  @JsName("OutBlendShapeName")
  public var outBlendShapeName: String

  @JsName("$")
  public var value: Boolean
}

public open external class InterchangeMeshNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetSkinnedMesh")
  public open fun setSkinnedMesh(isSkinnedMesh: Boolean): Boolean

  @JsName("SetSkeletonDependencyUid")
  public open fun setSkeletonDependencyUid(dependencyUid: String): Boolean

  @JsName("SetShapeDependencyUid")
  public open fun setShapeDependencyUid(dependencyUid: String): Boolean

  @JsName("SetSceneInstanceUid")
  public open fun setSceneInstanceUid(dependencyUid: String): Boolean

  @JsName("SetPayLoadKey")
  public open fun setPayLoadKey(payloadKey: String): Unit

  @JsName("SetMaterialDependencyUid")
  public open fun setMaterialDependencyUid(dependencyUid: String): Boolean

  @JsName("SetCustomVertexCount")
  public open fun setCustomVertexCount(attributeValue: Number): Boolean

  @JsName("SetCustomUVCount")
  public open fun setCustomUvCount(attributeValue: Number): Boolean

  @JsName("SetCustomPolygonCount")
  public open fun setCustomPolygonCount(attributeValue: Number): Boolean

  @JsName("SetCustomHasVertexTangent")
  public open fun setCustomHasVertexTangent(attributeValue: Boolean): Boolean

  @JsName("SetCustomHasVertexNormal")
  public open fun setCustomHasVertexNormal(attributeValue: Boolean): Boolean

  @JsName("SetCustomHasVertexColor")
  public open fun setCustomHasVertexColor(attributeValue: Boolean): Boolean

  @JsName("SetCustomHasVertexBinormal")
  public open fun setCustomHasVertexBinormal(attributeValue: Boolean): Boolean

  @JsName("SetCustomHasSmoothGroup")
  public open fun setCustomHasSmoothGroup(attributeValue: Boolean): Boolean

  @JsName("SetCustomBoundingBox")
  public open fun setCustomBoundingBox(attributeValue: Box): Boolean

  @JsName("SetBlendShapeName")
  public open fun setBlendShapeName(blendShapeName: String): Boolean

  @JsName("SetBlendShape")
  public open fun setBlendShape(isBlendShape: Boolean): Boolean

  @JsName("RemoveSkeletonDependencyUid")
  public open fun removeSkeletonDependencyUid(dependencyUid: String): Boolean

  @JsName("RemoveShapeDependencyUid")
  public open fun removeShapeDependencyUid(dependencyUid: String): Boolean

  @JsName("RemoveSceneInstanceUid")
  public open fun removeSceneInstanceUid(dependencyUid: String): Boolean

  @JsName("RemoveMaterialDependencyUid")
  public open fun removeMaterialDependencyUid(dependencyUid: String): Boolean

  @JsName("IsSkinnedMesh")
  public open fun isSkinnedMesh(): Boolean

  @JsName("IsBlendShape")
  public open fun isBlendShape(): Boolean

  @JsName("GetSkeletonDependency")
  public open fun getSkeletonDependency(index: Number, outDependency: String): OutDependencyProvider

  @JsName("GetSkeletonDependencies")
  public open fun getSkeletonDependencies(outDependencies: Array<String>): OutDependenciesProvider

  @JsName("GetSkeletonDependeciesCount")
  public open fun getSkeletonDependeciesCount(): Number

  @JsName("GetShapeDependency")
  public open fun getShapeDependency(index: Number, outDependency: String): OutDependencyProvider

  @JsName("GetShapeDependencies")
  public open fun getShapeDependencies(outDependencies: Array<String>): OutDependenciesProvider

  @JsName("GetShapeDependeciesCount")
  public open fun getShapeDependeciesCount(): Number

  @JsName("GetSceneInstanceUidsCount")
  public open fun getSceneInstanceUidsCount(): Number

  @JsName("GetSceneInstanceUids")
  public open fun getSceneInstanceUids(outDependencies: Array<String>): OutDependenciesProvider

  @JsName("GetSceneInstanceUid")
  public open fun getSceneInstanceUid(index: Number, outDependency: String): OutDependencyProvider

  @JsName("GetMaterialDependency")
  public open fun getMaterialDependency(index: Number, outDependency: String): OutDependencyProvider

  @JsName("GetMaterialDependencies")
  public open fun getMaterialDependencies(outDependencies: Array<String>): OutDependenciesProvider

  @JsName("GetMaterialDependeciesCount")
  public open fun getMaterialDependeciesCount(): Number

  @JsName("GetCustomVertexCount")
  public open fun getCustomVertexCount(attributeValue: Number): Object464

  @JsName("GetCustomUVCount")
  public open fun getCustomUvCount(attributeValue: Number): Object464

  @JsName("GetCustomPolygonCount")
  public open fun getCustomPolygonCount(attributeValue: Number): Object464

  @JsName("GetCustomHasVertexTangent")
  public open fun getCustomHasVertexTangent(attributeValue: Boolean): Object473

  @JsName("GetCustomHasVertexNormal")
  public open fun getCustomHasVertexNormal(attributeValue: Boolean): Object473

  @JsName("GetCustomHasVertexColor")
  public open fun getCustomHasVertexColor(attributeValue: Boolean): Object473

  @JsName("GetCustomHasVertexBinormal")
  public open fun getCustomHasVertexBinormal(attributeValue: Boolean): Object473

  @JsName("GetCustomHasSmoothGroup")
  public open fun getCustomHasSmoothGroup(attributeValue: Boolean): Object473

  @JsName("GetCustomBoundingBox")
  public open fun getCustomBoundingBox(attributeValue: Box): Object474

  @JsName("GetBlendShapeName")
  public open fun getBlendShapeName(outBlendShapeName: String): Object475

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeMeshNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeMeshNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeMeshNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeMeshNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeMeshNode

    @JsName("C")
    public fun copy(other: Any): InterchangeMeshNode
  }
}

public open external class InterchangePhysicsAssetFactoryNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetCustomSkeletalMeshUid")
  public open fun setCustomSkeletalMeshUid(attributeValue: String): Boolean

  @JsName("InitializePhysicsAssetNode")
  public open fun initializePhysicsAssetNode(
    uniqueId: String,
    displayLabel: String,
    inAssetClass: String,
  ): Unit

  public override fun getObjectClass(): UnrealEngineClass

  @JsName("GetCustomSkeletalMeshUid")
  public open fun getCustomSkeletalMeshUid(attributeValue: String): Object461

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePhysicsAssetFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePhysicsAssetFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePhysicsAssetFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePhysicsAssetFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangePhysicsAssetFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangePhysicsAssetFactoryNode
  }
}

@JsName("T$476")
public external interface OutSpecializedTypesProvider {
  @JsName("OutSpecializedTypes")
  public var outSpecializedTypes: Array<String>
}

@JsName("T$477")
public external interface OutSpecializedTypeProvider {
  @JsName("OutSpecializedType")
  public var outSpecializedType: String
}

@JsName("T$478")
public external interface OutMaterialDependencyUidsProvider {
  @JsName("OutMaterialDependencyUids")
  public var outMaterialDependencyUids: Array<String>
}

@JsName("T$479")
public external interface OutMaterialDependencyUidProvider {
  @JsName("OutMaterialDependencyUid")
  public var outMaterialDependencyUid: String
}

public open external class InterchangeSceneNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetCustomLocalTransform")
  public open fun setCustomLocalTransform(attributeValue: Transform): Boolean

  @JsName("SetCustomGlobalTransform")
  public open fun setCustomGlobalTransform(attributeValue: Transform): Boolean

  @JsName("SetCustomAssetInstanceUid")
  public open fun setCustomAssetInstanceUid(attributeValue: String): Boolean

  @JsName("RemoveSpecializedType")
  public open fun removeSpecializedType(specializedType: String): Boolean

  @JsName("RemoveMaterialDependencyUid")
  public open fun removeMaterialDependencyUid(materialDependencyUid: String): Boolean

  @JsName("IsSpecializedTypeContains")
  public open fun isSpecializedTypeContains(specializedType: String): Boolean

  @JsName("GetSpecializedTypes")
  public open fun getSpecializedTypes(outSpecializedTypes: Array<String>):
      OutSpecializedTypesProvider

  @JsName("GetSpecializedTypeCount")
  public open fun getSpecializedTypeCount(): Number

  @JsName("GetSpecializedType")
  public open fun getSpecializedType(index: Number, outSpecializedType: String):
      OutSpecializedTypeProvider

  @JsName("GetMaterialDependencyUidsCount")
  public open fun getMaterialDependencyUidsCount(): Number

  @JsName("GetMaterialDependencyUids")
  public open fun getMaterialDependencyUids(outMaterialDependencyUids: Array<String>):
      OutMaterialDependencyUidsProvider

  @JsName("GetMaterialDependencyUid")
  public open fun getMaterialDependencyUid(index: Number, outMaterialDependencyUid: String):
      OutMaterialDependencyUidProvider

  @JsName("GetCustomLocalTransform")
  public open fun getCustomLocalTransform(attributeValue: Transform): Object460

  @JsName("GetCustomGlobalTransform")
  public open fun getCustomGlobalTransform(attributeValue: Transform): Object460

  @JsName("GetCustomAssetInstanceUid")
  public open fun getCustomAssetInstanceUid(attributeValue: String): Object461

  @JsName("AddSpecializedType")
  public open fun addSpecializedType(specializedType: String): Boolean

  @JsName("AddMaterialDependencyUid")
  public open fun addMaterialDependencyUid(materialDependencyUid: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSceneNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSceneNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSceneNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSceneNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeSceneNode

    @JsName("C")
    public fun copy(other: Any): InterchangeSceneNode
  }
}

@JsName("T$480")
public external interface OutLodDataUniqueIdsProvider {
  @JsName("OutLodDataUniqueIds")
  public var outLodDataUniqueIds: Array<String>
}

@JsName("T$481")
public external interface Object481 {
  @JsName("AttributeValue")
  public var attributeValue: Color

  @JsName("$")
  public var value: Boolean
}

@JsName("T$482")
public external interface Object482 {
  @JsName("AttributeValue")
  public var attributeValue: SoftObjectPath

  @JsName("$")
  public var value: Boolean
}

public open external class InterchangeSkeletalMeshFactoryNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetCustomVertexColorReplace")
  public open fun setCustomVertexColorReplace(attributeValue: Boolean): Boolean

  @JsName("SetCustomVertexColorOverride")
  public open fun setCustomVertexColorOverride(attributeValue: Color): Boolean

  @JsName("SetCustomVertexColorIgnore")
  public open fun setCustomVertexColorIgnore(attributeValue: Boolean): Boolean

  @JsName("SetCustomSkeletonSoftObjectPath")
  public open fun setCustomSkeletonSoftObjectPath(attributeValue: SoftObjectPath): Boolean

  @JsName("SetCustomPhysicAssetSoftObjectPath")
  public open fun setCustomPhysicAssetSoftObjectPath(attributeValue: SoftObjectPath): Boolean

  @JsName("SetCustomImportMorphTarget")
  public open fun setCustomImportMorphTarget(attributeValue: Boolean): Boolean

  @JsName("SetCustomCreatePhysicsAsset")
  public open fun setCustomCreatePhysicsAsset(attributeValue: Boolean): Boolean

  @JsName("RemoveLodDataUniqueId")
  public open fun removeLodDataUniqueId(lodDataUniqueId: String): Boolean

  @JsName("InitializeSkeletalMeshNode")
  public open fun initializeSkeletalMeshNode(
    uniqueId: String,
    displayLabel: String,
    inAssetClass: String,
  ): Unit

  public override fun getObjectClass(): UnrealEngineClass

  @JsName("GetLodDataUniqueIds")
  public open fun getLodDataUniqueIds(outLodDataUniqueIds: Array<String>):
      OutLodDataUniqueIdsProvider

  @JsName("GetLodDataCount")
  public open fun getLodDataCount(): Number

  @JsName("GetCustomVertexColorReplace")
  public open fun getCustomVertexColorReplace(attributeValue: Boolean): Object473

  @JsName("GetCustomVertexColorOverride")
  public open fun getCustomVertexColorOverride(attributeValue: Color): Object481

  @JsName("GetCustomVertexColorIgnore")
  public open fun getCustomVertexColorIgnore(attributeValue: Boolean): Object473

  @JsName("GetCustomSkeletonSoftObjectPath")
  public open fun getCustomSkeletonSoftObjectPath(attributeValue: SoftObjectPath): Object482

  @JsName("GetCustomPhysicAssetSoftObjectPath")
  public open fun getCustomPhysicAssetSoftObjectPath(attributeValue: SoftObjectPath): Object482

  @JsName("GetCustomImportMorphTarget")
  public open fun getCustomImportMorphTarget(attributeValue: Boolean): Object473

  @JsName("GetCustomCreatePhysicsAsset")
  public open fun getCustomCreatePhysicsAsset(attributeValue: Boolean): Object473

  @JsName("AddLodDataUniqueId")
  public open fun addLodDataUniqueId(lodDataUniqueId: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSkeletalMeshFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSkeletalMeshFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSkeletalMeshFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSkeletalMeshFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeSkeletalMeshFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeSkeletalMeshFactoryNode
  }
}

@JsName("T$483")
public external interface OutBlendShapeNamesProvider {
  @JsName("OutBlendShapeNames")
  public var outBlendShapeNames: Array<String>
}

public open external class InterchangeSkeletalMeshLodDataNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetCustomSkeletonUid")
  public open fun setCustomSkeletonUid(attributeValue: String): Boolean

  @JsName("RemoveMeshUid")
  public open fun removeMeshUid(blendShapeName: String): Boolean

  @JsName("RemoveAllMeshes")
  public open fun removeAllMeshes(): Boolean

  @JsName("GetMeshUidsCount")
  public open fun getMeshUidsCount(): Number

  @JsName("GetMeshUids")
  public open fun getMeshUids(outBlendShapeNames: Array<String>): OutBlendShapeNamesProvider

  @JsName("GetCustomSkeletonUid")
  public open fun getCustomSkeletonUid(attributeValue: String): Object461

  @JsName("AddMeshUid")
  public open fun addMeshUid(blendShapeName: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSkeletalMeshLodDataNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSkeletalMeshLodDataNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSkeletalMeshLodDataNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSkeletalMeshLodDataNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeSkeletalMeshLodDataNode

    @JsName("C")
    public fun copy(other: Any): InterchangeSkeletalMeshLodDataNode
  }
}

public open external class InterchangeSkeletonFactoryNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetCustomRootJointUid")
  public open fun setCustomRootJointUid(attributeValue: String): Boolean

  @JsName("InitializeSkeletonNode")
  public open fun initializeSkeletonNode(
    uniqueId: String,
    displayLabel: String,
    inAssetClass: String,
  ): Unit

  public override fun getObjectClass(): UnrealEngineClass

  @JsName("GetCustomRootJointUid")
  public open fun getCustomRootJointUid(attributeValue: String): Object461

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSkeletonFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSkeletonFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSkeletonFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSkeletonFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeSkeletonFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeSkeletonFactoryNode
  }
}

public open external class InterchangeStaticMeshFactoryNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetCustomVertexColorReplace")
  public open fun setCustomVertexColorReplace(attributeValue: Boolean): Boolean

  @JsName("SetCustomVertexColorOverride")
  public open fun setCustomVertexColorOverride(attributeValue: Color): Boolean

  @JsName("SetCustomVertexColorIgnore")
  public open fun setCustomVertexColorIgnore(attributeValue: Boolean): Boolean

  @JsName("RemoveLodDataUniqueId")
  public open fun removeLodDataUniqueId(lodDataUniqueId: String): Boolean

  @JsName("InitializeStaticMeshNode")
  public open fun initializeStaticMeshNode(
    uniqueId: String,
    displayLabel: String,
    inAssetClass: String,
  ): Unit

  public override fun getObjectClass(): UnrealEngineClass

  @JsName("GetLodDataUniqueIds")
  public open fun getLodDataUniqueIds(outLodDataUniqueIds: Array<String>):
      OutLodDataUniqueIdsProvider

  @JsName("GetLodDataCount")
  public open fun getLodDataCount(): Number

  @JsName("GetCustomVertexColorReplace")
  public open fun getCustomVertexColorReplace(attributeValue: Boolean): Object473

  @JsName("GetCustomVertexColorOverride")
  public open fun getCustomVertexColorOverride(attributeValue: Color): Object481

  @JsName("GetCustomVertexColorIgnore")
  public open fun getCustomVertexColorIgnore(attributeValue: Boolean): Object473

  @JsName("AddLodDataUniqueId")
  public open fun addLodDataUniqueId(lodDataUniqueId: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeStaticMeshFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeStaticMeshFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeStaticMeshFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeStaticMeshFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeStaticMeshFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeStaticMeshFactoryNode
  }
}

@JsName("T$485")
public external interface OutMeshNamesProvider {
  @JsName("OutMeshNames")
  public var outMeshNames: Array<String>
}

public open external class InterchangeStaticMeshLodDataNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("RemoveMeshUid")
  public open fun removeMeshUid(meshName: String): Boolean

  @JsName("RemoveAllMeshes")
  public open fun removeAllMeshes(): Boolean

  @JsName("GetMeshUidsCount")
  public open fun getMeshUidsCount(): Number

  @JsName("GetMeshUids")
  public open fun getMeshUids(outMeshNames: Array<String>): OutMeshNamesProvider

  @JsName("AddMeshUid")
  public open fun addMeshUid(meshName: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeStaticMeshLodDataNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeStaticMeshLodDataNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeStaticMeshLodDataNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeStaticMeshLodDataNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeStaticMeshLodDataNode

    @JsName("C")
    public fun copy(other: Any): InterchangeStaticMeshLodDataNode
  }
}

@JsName("T$486")
public external interface Object486 {
  @JsName("AttributeValue")
  public var attributeValue: Vector4

  @JsName("$")
  public var value: Boolean
}

public open external class InterchangeTextureFactoryNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetCustomVirtualTextureStreaming")
  public open fun setCustomVirtualTextureStreaming(attributeValue: Boolean,
      addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomTranslatedTextureNodeUid")
  public open fun setCustomTranslatedTextureNodeUid(attributeValue: String): Boolean

  @JsName("SetCustomSRGB")
  public open fun setCustomSrgb(attributeValue: Boolean, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomPowerOfTwoMode")
  public open fun setCustomPowerOfTwoMode(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomPaddingColor")
  public open fun setCustomPaddingColor(attributeValue: Color, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomMipLoadOptions")
  public open fun setCustomMipLoadOptions(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomMipGenSettings")
  public open fun setCustomMipGenSettings(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomMaxTextureSize")
  public open fun setCustomMaxTextureSize(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomLossyCompressionAmount")
  public open fun setCustomLossyCompressionAmount(attributeValue: Number,
      addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomLODGroup")
  public open fun setCustomLodGroup(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomLODBias")
  public open fun setCustomLodBias(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomFilter")
  public open fun setCustomFilter(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomDownscaleOptions")
  public open fun setCustomDownscaleOptions(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomDownscale")
  public open fun setCustomDownscale(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomDeferCompression")
  public open fun setCustomDeferCompression(attributeValue: Boolean, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomCompressionSettings")
  public open fun setCustomCompressionSettings(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomCompressionQuality")
  public open fun setCustomCompressionQuality(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomCompressionNoAlpha")
  public open fun setCustomCompressionNoAlpha(attributeValue: Boolean, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomCompositeTextureMode")
  public open fun setCustomCompositeTextureMode(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomCompositePower")
  public open fun setCustomCompositePower(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomChromaKeyThreshold")
  public open fun setCustomChromaKeyThreshold(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomChromaKeyColor")
  public open fun setCustomChromaKeyColor(attributeValue: Color, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustombUseLegacyGamma")
  public open fun setCustombUseLegacyGamma(attributeValue: Boolean, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustombPreserveBorder")
  public open fun setCustombPreserveBorder(attributeValue: Boolean, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustombFlipGreenChannel")
  public open fun setCustombFlipGreenChannel(attributeValue: Boolean, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustombDoScaleMipsForAlphaCoverage")
  public open fun setCustombDoScaleMipsForAlphaCoverage(attributeValue: Boolean,
      addApplyDelegate: Boolean): Boolean

  @JsName("SetCustombDitherMipMapAlpha")
  public open fun setCustombDitherMipMapAlpha(attributeValue: Boolean, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustombChromaKeyTexture")
  public open fun setCustombChromaKeyTexture(attributeValue: Boolean, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomAlphaCoverageThresholds")
  public open fun setCustomAlphaCoverageThresholds(attributeValue: Vector4,
      addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomAdjustVibrance")
  public open fun setCustomAdjustVibrance(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomAdjustSaturation")
  public open fun setCustomAdjustSaturation(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomAdjustRGBCurve")
  public open fun setCustomAdjustRgbCurve(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomAdjustMinAlpha")
  public open fun setCustomAdjustMinAlpha(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomAdjustMaxAlpha")
  public open fun setCustomAdjustMaxAlpha(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomAdjustHue")
  public open fun setCustomAdjustHue(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomAdjustBrightnessCurve")
  public open fun setCustomAdjustBrightnessCurve(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomAdjustBrightness")
  public open fun setCustomAdjustBrightness(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomAddressY")
  public open fun setCustomAddressY(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("SetCustomAddressX")
  public open fun setCustomAddressX(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("InitializeTextureNode")
  public open fun initializeTextureNode(
    uniqueId: String,
    displayLabel: String,
    inAssetClass: String,
    inAssetName: String,
  ): Unit

  public override fun getObjectClass(): UnrealEngineClass

  @JsName("GetCustomVirtualTextureStreaming")
  public open fun getCustomVirtualTextureStreaming(attributeValue: Boolean): Object473

  @JsName("GetCustomTranslatedTextureNodeUid")
  public open fun getCustomTranslatedTextureNodeUid(attributeValue: String): Object461

  @JsName("GetCustomSRGB")
  public open fun getCustomSrgb(attributeValue: Boolean): Object473

  @JsName("GetCustomPowerOfTwoMode")
  public open fun getCustomPowerOfTwoMode(attributeValue: Number): Object464

  @JsName("GetCustomPaddingColor")
  public open fun getCustomPaddingColor(attributeValue: Color): Object481

  @JsName("GetCustomMipLoadOptions")
  public open fun getCustomMipLoadOptions(attributeValue: Number): Object464

  @JsName("GetCustomMipGenSettings")
  public open fun getCustomMipGenSettings(attributeValue: Number): Object464

  @JsName("GetCustomMaxTextureSize")
  public open fun getCustomMaxTextureSize(attributeValue: Number): Object464

  @JsName("GetCustomLossyCompressionAmount")
  public open fun getCustomLossyCompressionAmount(attributeValue: Number): Object464

  @JsName("GetCustomLODGroup")
  public open fun getCustomLodGroup(attributeValue: Number): Object464

  @JsName("GetCustomLODBias")
  public open fun getCustomLodBias(attributeValue: Number): Object464

  @JsName("GetCustomFilter")
  public open fun getCustomFilter(attributeValue: Number): Object464

  @JsName("GetCustomDownscaleOptions")
  public open fun getCustomDownscaleOptions(attributeValue: Number): Object464

  @JsName("GetCustomDownscale")
  public open fun getCustomDownscale(attributeValue: Number): Object464

  @JsName("GetCustomDeferCompression")
  public open fun getCustomDeferCompression(attributeValue: Boolean): Object473

  @JsName("GetCustomCompressionSettings")
  public open fun getCustomCompressionSettings(attributeValue: Number): Object464

  @JsName("GetCustomCompressionQuality")
  public open fun getCustomCompressionQuality(attributeValue: Number): Object464

  @JsName("GetCustomCompressionNoAlpha")
  public open fun getCustomCompressionNoAlpha(attributeValue: Boolean): Object473

  @JsName("GetCustomCompositeTextureMode")
  public open fun getCustomCompositeTextureMode(attributeValue: Number): Object464

  @JsName("GetCustomCompositePower")
  public open fun getCustomCompositePower(attributeValue: Number): Object464

  @JsName("GetCustomChromaKeyThreshold")
  public open fun getCustomChromaKeyThreshold(attributeValue: Number): Object464

  @JsName("GetCustomChromaKeyColor")
  public open fun getCustomChromaKeyColor(attributeValue: Color): Object481

  @JsName("GetCustombUseLegacyGamma")
  public open fun getCustombUseLegacyGamma(attributeValue: Boolean): Object473

  @JsName("GetCustombPreserveBorder")
  public open fun getCustombPreserveBorder(attributeValue: Boolean): Object473

  @JsName("GetCustombFlipGreenChannel")
  public open fun getCustombFlipGreenChannel(attributeValue: Boolean): Object473

  @JsName("GetCustombDoScaleMipsForAlphaCoverage")
  public open fun getCustombDoScaleMipsForAlphaCoverage(attributeValue: Boolean): Object473

  @JsName("GetCustombDitherMipMapAlpha")
  public open fun getCustombDitherMipMapAlpha(attributeValue: Boolean): Object473

  @JsName("GetCustombChromaKeyTexture")
  public open fun getCustombChromaKeyTexture(attributeValue: Boolean): Object473

  @JsName("GetCustomAlphaCoverageThresholds")
  public open fun getCustomAlphaCoverageThresholds(attributeValue: Vector4): Object486

  @JsName("GetCustomAdjustVibrance")
  public open fun getCustomAdjustVibrance(attributeValue: Number): Object464

  @JsName("GetCustomAdjustSaturation")
  public open fun getCustomAdjustSaturation(attributeValue: Number): Object464

  @JsName("GetCustomAdjustRGBCurve")
  public open fun getCustomAdjustRgbCurve(attributeValue: Number): Object464

  @JsName("GetCustomAdjustMinAlpha")
  public open fun getCustomAdjustMinAlpha(attributeValue: Number): Object464

  @JsName("GetCustomAdjustMaxAlpha")
  public open fun getCustomAdjustMaxAlpha(attributeValue: Number): Object464

  @JsName("GetCustomAdjustHue")
  public open fun getCustomAdjustHue(attributeValue: Number): Object464

  @JsName("GetCustomAdjustBrightnessCurve")
  public open fun getCustomAdjustBrightnessCurve(attributeValue: Number): Object464

  @JsName("GetCustomAdjustBrightness")
  public open fun getCustomAdjustBrightness(attributeValue: Number): Object464

  @JsName("GetCustomAddressY")
  public open fun getCustomAddressY(attributeValue: Number): Object464

  @JsName("GetCustomAddressX")
  public open fun getCustomAddressX(attributeValue: Number): Object464

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTextureFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureFactoryNode
  }
}

@JsName("InterchangeTexture2DArrayFactoryNode")
public open external class InterchangeTexture2dArrayFactoryNode(
  outer: UObject,
) : InterchangeTextureFactoryNode {
  @JsName("SetCustomAddressZ")
  public open fun setCustomAddressZ(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("GetCustomAddressZ")
  public open fun getCustomAddressZ(attributeValue: Number): Object464

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTexture2dArrayFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTexture2dArrayFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTexture2dArrayFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTexture2dArrayFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTexture2dArrayFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTexture2dArrayFactoryNode
  }
}

public open external class InterchangeTextureNode(
  outer: UObject,
) : InterchangeBaseNode {
  @JsName("SetPayLoadKey")
  public open fun setPayLoadKey(payloadKey: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTextureNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureNode
  }
}

@JsName("InterchangeTexture2DArrayNode")
public open external class InterchangeTexture2dArrayNode(
  outer: UObject,
) : InterchangeTextureNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTexture2dArrayNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTexture2dArrayNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTexture2dArrayNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTexture2dArrayNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTexture2dArrayNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTexture2dArrayNode
  }
}

@JsName("InterchangeTexture2DNode")
public open external class InterchangeTexture2dNode(
  outer: UObject,
) : InterchangeTextureNode {
  @JsName("SetSourceBlocks")
  public open fun setSourceBlocks(inSourceBlocks: Any): Unit

  @JsName("GetSourceBlocks")
  public open fun getSourceBlocks(): Any

  @JsName("ClearSourceBlocksData")
  public open fun clearSourceBlocksData(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTexture2dNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTexture2dNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTexture2dNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTexture2dNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTexture2dNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTexture2dNode
  }
}

public open external class InterchangeTextureCubeFactoryNode(
  outer: UObject,
) : InterchangeTextureFactoryNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureCubeFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTextureCubeFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureCubeFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureCubeFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureCubeFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureCubeFactoryNode
  }
}

public open external class InterchangeTextureCubeNode(
  outer: UObject,
) : InterchangeTextureNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureCubeNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTextureCubeNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureCubeNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureCubeNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureCubeNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureCubeNode
  }
}

public open external class InterchangeTextureLightProfileFactoryNode(
  outer: UObject,
) : InterchangeTextureFactoryNode {
  @JsName("SetCustomTextureMultiplier")
  public open fun setCustomTextureMultiplier(attributeValue: Number, addApplyDelegate: Boolean):
      Boolean

  @JsName("SetCustomBrightness")
  public open fun setCustomBrightness(attributeValue: Number, addApplyDelegate: Boolean): Boolean

  @JsName("GetCustomTextureMultiplier")
  public open fun getCustomTextureMultiplier(attributeValue: Number): Object464

  @JsName("GetCustomBrightness")
  public open fun getCustomBrightness(attributeValue: Number): Object464

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureLightProfileFactoryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTextureLightProfileFactoryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureLightProfileFactoryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureLightProfileFactoryNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureLightProfileFactoryNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureLightProfileFactoryNode
  }
}

public open external class InterchangeTextureLightProfileNode(
  outer: UObject,
) : InterchangeTextureNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureLightProfileNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTextureLightProfileNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureLightProfileNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureLightProfileNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureLightProfileNode

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureLightProfileNode
  }
}

public open external class InterchangeActorFactory(
  outer: UObject,
) : InterchangeFactoryBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeActorFactory

    @JsName("C")
    public fun copy(other: UObject): InterchangeActorFactory

    @JsName("C")
    public fun copy(other: Any): InterchangeActorFactory
  }
}

public open external class InterchangeBlockedTexturePayloadInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeBlockedTexturePayloadInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeBlockedTexturePayloadInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeBlockedTexturePayloadInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeBlockedTexturePayloadInterface

    @JsName("C")
    public fun copy(other: UObject): InterchangeBlockedTexturePayloadInterface

    @JsName("C")
    public fun copy(other: Any): InterchangeBlockedTexturePayloadInterface
  }
}

@JsName("InterchangeBMPTranslator")
public open external class InterchangeBmpTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeBmpTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeBmpTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeBmpTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeBmpTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeBmpTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeBmpTranslator
  }
}

@JsName("InterchangeDDSTranslator")
public open external class InterchangeDdsTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeDdsTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeDdsTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeDdsTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeDdsTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeDdsTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeDdsTranslator
  }
}

@JsName("InterchangeEXRTranslator")
public open external class InterchangeExrTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeExrTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeExrTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeExrTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeExrTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeExrTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeExrTranslator
  }
}

public open external class InterchangeFbxTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeFbxTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeFbxTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeFbxTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeFbxTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeFbxTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeFbxTranslator
  }
}

@JsName("InterchangeHDRTranslator")
public open external class InterchangeHdrTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeHdrTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeHdrTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeHdrTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeHdrTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeHdrTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeHdrTranslator
  }
}

@JsName("InterchangeIESTranslator")
public open external class InterchangeIesTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeIesTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeIesTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeIesTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeIesTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeIesTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeIesTranslator
  }
}

@JsName("InterchangeJPGTranslator")
public open external class InterchangeJpgTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeJpgTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeJpgTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeJpgTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeJpgTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeJpgTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeJpgTranslator
  }
}

public open external class InterchangeMaterialFactory(
  outer: UObject,
) : InterchangeFactoryBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeMaterialFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeMaterialFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeMaterialFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeMaterialFactory

    @JsName("C")
    public fun copy(other: UObject): InterchangeMaterialFactory

    @JsName("C")
    public fun copy(other: Any): InterchangeMaterialFactory
  }
}

@JsName("InterchangePCXTranslator")
public open external class InterchangePcxTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePcxTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePcxTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePcxTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePcxTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangePcxTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangePcxTranslator
  }
}

public open external class InterchangePhysicsAssetFactory(
  outer: UObject,
) : InterchangeFactoryBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePhysicsAssetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePhysicsAssetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePhysicsAssetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePhysicsAssetFactory

    @JsName("C")
    public fun copy(other: UObject): InterchangePhysicsAssetFactory

    @JsName("C")
    public fun copy(other: Any): InterchangePhysicsAssetFactory
  }
}

@JsName("InterchangePNGTranslator")
public open external class InterchangePngTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePngTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePngTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePngTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePngTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangePngTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangePngTranslator
  }
}

@JsName("InterchangePSDTranslator")
public open external class InterchangePsdTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePsdTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePsdTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePsdTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePsdTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangePsdTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangePsdTranslator
  }
}

public open external class InterchangeSkeletalMeshFactory(
  outer: UObject,
) : InterchangeFactoryBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSkeletalMeshFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSkeletalMeshFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSkeletalMeshFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSkeletalMeshFactory

    @JsName("C")
    public fun copy(other: UObject): InterchangeSkeletalMeshFactory

    @JsName("C")
    public fun copy(other: Any): InterchangeSkeletalMeshFactory
  }
}

public open external class InterchangeSkeletalMeshPayloadInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSkeletalMeshPayloadInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSkeletalMeshPayloadInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSkeletalMeshPayloadInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSkeletalMeshPayloadInterface

    @JsName("C")
    public fun copy(other: UObject): InterchangeSkeletalMeshPayloadInterface

    @JsName("C")
    public fun copy(other: Any): InterchangeSkeletalMeshPayloadInterface
  }
}

public open external class InterchangeSkeletonFactory(
  outer: UObject,
) : InterchangeFactoryBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSkeletonFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSkeletonFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSkeletonFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSkeletonFactory

    @JsName("C")
    public fun copy(other: UObject): InterchangeSkeletonFactory

    @JsName("C")
    public fun copy(other: Any): InterchangeSkeletonFactory
  }
}

public open external class InterchangeSlicedTexturePayloadInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSlicedTexturePayloadInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSlicedTexturePayloadInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSlicedTexturePayloadInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSlicedTexturePayloadInterface

    @JsName("C")
    public fun copy(other: UObject): InterchangeSlicedTexturePayloadInterface

    @JsName("C")
    public fun copy(other: Any): InterchangeSlicedTexturePayloadInterface
  }
}

public open external class InterchangeStaticMeshFactory(
  outer: UObject,
) : InterchangeFactoryBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeStaticMeshFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeStaticMeshFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeStaticMeshFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeStaticMeshFactory

    @JsName("C")
    public fun copy(other: UObject): InterchangeStaticMeshFactory

    @JsName("C")
    public fun copy(other: Any): InterchangeStaticMeshFactory
  }
}

public open external class InterchangeStaticMeshPayloadInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeStaticMeshPayloadInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeStaticMeshPayloadInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeStaticMeshPayloadInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeStaticMeshPayloadInterface

    @JsName("C")
    public fun copy(other: UObject): InterchangeStaticMeshPayloadInterface

    @JsName("C")
    public fun copy(other: Any): InterchangeStaticMeshPayloadInterface
  }
}

public open external class InterchangeTextureFactory(
  outer: UObject,
) : InterchangeFactoryBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTextureFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureFactory

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureFactory

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureFactory
  }
}

public open external class InterchangeTextureLightProfilePayloadInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureLightProfilePayloadInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        InterchangeTextureLightProfilePayloadInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureLightProfilePayloadInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureLightProfilePayloadInterface

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureLightProfilePayloadInterface

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureLightProfilePayloadInterface
  }
}

public open external class InterchangeTexturePayloadInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTexturePayloadInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTexturePayloadInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTexturePayloadInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTexturePayloadInterface

    @JsName("C")
    public fun copy(other: UObject): InterchangeTexturePayloadInterface

    @JsName("C")
    public fun copy(other: Any): InterchangeTexturePayloadInterface
  }
}

@JsName("InterchangeTGATranslator")
public open external class InterchangeTgaTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTgaTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTgaTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTgaTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTgaTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeTgaTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeTgaTranslator
  }
}

@JsName("InterchangeTIFFTranslator")
public open external class InterchangeTiffTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTiffTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTiffTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTiffTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTiffTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeTiffTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeTiffTranslator
  }
}

@JsName("InterchangeUDIMTranslator")
public open external class InterchangeUdimTranslator(
  outer: UObject,
) : InterchangeTranslatorBase {
  @JsName("UdimRegexPattern")
  public open var udimRegexPattern: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeUdimTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeUdimTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeUdimTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeUdimTranslator

    @JsName("C")
    public fun copy(other: UObject): InterchangeUdimTranslator

    @JsName("C")
    public fun copy(other: Any): InterchangeUdimTranslator
  }
}

public open external class InterchangeResultMeshWarning(
  outer: UObject,
) : InterchangeResultWarning {
  @JsName("MeshName")
  public open var meshName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultMeshWarning

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultMeshWarning

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultMeshWarning

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultMeshWarning

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultMeshWarning

    @JsName("C")
    public fun copy(other: Any): InterchangeResultMeshWarning
  }
}

public open external class InterchangeResultMeshError(
  outer: UObject,
) : InterchangeResultError {
  @JsName("MeshName")
  public open var meshName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultMeshError

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultMeshError

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultMeshError

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultMeshError

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultMeshError

    @JsName("C")
    public fun copy(other: Any): InterchangeResultMeshError
  }
}

@JsName("InterchangeResultMeshWarning_Generic")
public open external class InterchangeResultMeshWarningGeneric(
  outer: UObject,
) : InterchangeResultMeshWarning {
  public open var text: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultMeshWarningGeneric

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultMeshWarningGeneric

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultMeshWarningGeneric

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultMeshWarningGeneric

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultMeshWarningGeneric

    @JsName("C")
    public fun copy(other: Any): InterchangeResultMeshWarningGeneric
  }
}

@JsName("InterchangeResultMeshError_Generic")
public open external class InterchangeResultMeshErrorGeneric(
  outer: UObject,
) : InterchangeResultMeshError {
  public open var text: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultMeshErrorGeneric

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultMeshErrorGeneric

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultMeshErrorGeneric

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultMeshErrorGeneric

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultMeshErrorGeneric

    @JsName("C")
    public fun copy(other: Any): InterchangeResultMeshErrorGeneric
  }
}

@JsName("InterchangeResultMeshWarning_TooManyUVs")
public open external class InterchangeResultMeshWarningTooManyUVs(
  outer: UObject,
) : InterchangeResultMeshWarning {
  @JsName("ExcessUVs")
  public open var excessUVs: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultMeshWarningTooManyUVs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultMeshWarningTooManyUVs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultMeshWarningTooManyUVs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultMeshWarningTooManyUVs

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultMeshWarningTooManyUVs

    @JsName("C")
    public fun copy(other: Any): InterchangeResultMeshWarningTooManyUVs
  }
}

public open external class InterchangeTextureWriter(
  outer: UObject,
) : InterchangeWriterBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTextureWriter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTextureWriter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTextureWriter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTextureWriter

    @JsName("C")
    public fun copy(other: UObject): InterchangeTextureWriter

    @JsName("C")
    public fun copy(other: Any): InterchangeTextureWriter
  }
}

@JsName("EInterchangeVertexColorImportOption")
public external object InterchangeVertexColorImportOption {
  @JsName("IVCIO_Replace")
  public var Replace: String

  @JsName("IVCIO_Ignore")
  public var Ignore: String

  @JsName("IVCIO_Override")
  public var Override: String

  @JsName("IVCIO_MAX")
  public var Max: String
}

public open external class InterchangeGenericAssetsPipeline(
  outer: UObject,
) : InterchangePipelineBase {
  @JsName("bUseSourceNameForAsset")
  public open var useSourceNameForAsset: Boolean

  @JsName("bImportLods")
  public open var importLods: Boolean

  @JsName("bBakeMeshes")
  public open var bakeMeshes: Boolean

  @JsName("VertexColorImportOption")
  public open var vertexColorImportOption: String

  @JsName("VertexOverrideColor")
  public open var vertexOverrideColor: Color

  @JsName("bImportStaticMeshes")
  public open var importStaticMeshes: Boolean

  @JsName("bCombineStaticMeshes")
  public open var combineStaticMeshes: Boolean

  @JsName("Skeleton")
  public open var skeleton: Skeleton

  @JsName("bImportSkeletalMeshes")
  public open var importSkeletalMeshes: Boolean

  @JsName("bCombineSkeletalMeshes")
  public open var combineSkeletalMeshes: Boolean

  @JsName("bImportMorphTargets")
  public open var importMorphTargets: Boolean

  @JsName("bCreatePhysicsAsset")
  public open var createPhysicsAsset: Boolean

  @JsName("PhysicsAsset")
  public open var physicsAsset: PhysicsAsset

  @JsName("bImportMaterials")
  public open var importMaterials: Boolean

  @JsName("bImportTextures")
  public open var importTextures: Boolean

  @JsName("bDetectNormalMapTexture")
  public open var detectNormalMapTexture: Boolean

  @JsName("bFlipNormalMapGreenChannel")
  public open var flipNormalMapGreenChannel: Boolean

  @JsName("FileExtensionsToImportAsLongLatCubemap")
  public open var fileExtensionsToImportAsLongLatCubemap: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeGenericAssetsPipeline

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeGenericAssetsPipeline

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeGenericAssetsPipeline

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeGenericAssetsPipeline

    @JsName("C")
    public fun copy(other: UObject): InterchangeGenericAssetsPipeline

    @JsName("C")
    public fun copy(other: Any): InterchangeGenericAssetsPipeline
  }
}

public open external class InterchangeGenericLevelPipeline(
  outer: UObject,
) : InterchangePipelineBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeGenericLevelPipeline

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeGenericLevelPipeline

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeGenericLevelPipeline

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeGenericLevelPipeline

    @JsName("C")
    public fun copy(other: UObject): InterchangeGenericLevelPipeline

    @JsName("C")
    public fun copy(other: Any): InterchangeGenericLevelPipeline
  }
}

public open external class InterchangeMeshInstance {
  @JsName("MeshInstanceUid")
  public open var meshInstanceUid: String

  @JsName("LodGroupNode")
  public open var lodGroupNode: InterchangeSceneNode

  @JsName("bReferenceSkinnedMesh")
  public open var referenceSkinnedMesh: Boolean

  @JsName("bReferenceBlendShape")
  public open var referenceBlendShape: Boolean

  @JsName("SceneNodePerLodIndex")
  public open var sceneNodePerLodIndex: Any

  @JsName("ReferencingMeshGeometryUids")
  public open var referencingMeshGeometryUids: Array<String>

  public open fun clone(): InterchangeMeshInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterchangeMeshInstance

    @JsName("C")
    public fun copy(other: Any): InterchangeMeshInstance
  }
}

public open external class InterchangeMeshGeometry {
  @JsName("MeshUid")
  public open var meshUid: String

  @JsName("MeshNode")
  public open var meshNode: InterchangeMeshNode

  @JsName("ReferencingMeshInstanceUids")
  public open var referencingMeshInstanceUids: Array<String>

  public open fun clone(): InterchangeMeshGeometry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterchangeMeshGeometry

    @JsName("C")
    public fun copy(other: Any): InterchangeMeshGeometry
  }
}

@JsName("T$487")
public external interface MeshInstanceUidsProvider {
  @JsName("MeshInstanceUids")
  public var meshInstanceUids: Array<String>
}

@JsName("T$488")
public external interface MeshGeometryUidsProvider {
  @JsName("MeshGeometryUids")
  public var meshGeometryUids: Array<String>
}

public open external class InterchangePipelineMeshesUtilities(
  outer: UObject,
) : UObject {
  @JsName("IsValidMeshInstanceUid")
  public open fun isValidMeshInstanceUid(meshInstanceUid: String): Boolean

  @JsName("IsValidMeshGeometryUid")
  public open fun isValidMeshGeometryUid(meshGeometryUid: String): Boolean

  @JsName("GetMeshInstanceSkeletonRootUid")
  public open fun getMeshInstanceSkeletonRootUid(meshInstanceUid: String): String

  @JsName("GetMeshInstanceByUid")
  public open fun getMeshInstanceByUid(meshInstanceUid: String): InterchangeMeshInstance

  @JsName("GetMeshGeometrySkeletonRootUid")
  public open fun getMeshGeometrySkeletonRootUid(meshGeometryUid: String): String

  @JsName("GetMeshGeometryByUid")
  public open fun getMeshGeometryByUid(meshGeometryUid: String): InterchangeMeshGeometry

  @JsName("GetAllStaticMeshInstance")
  public open fun getAllStaticMeshInstance(meshInstanceUids: Array<String>):
      MeshInstanceUidsProvider

  @JsName("GetAllStaticMeshGeometry")
  public open fun getAllStaticMeshGeometry(meshGeometryUids: Array<String>):
      MeshGeometryUidsProvider

  @JsName("GetAllSkinnedMeshInstance")
  public open fun getAllSkinnedMeshInstance(meshInstanceUids: Array<String>):
      MeshInstanceUidsProvider

  @JsName("GetAllSkinnedMeshGeometry")
  public open fun getAllSkinnedMeshGeometry(meshGeometryUids: Array<String>):
      MeshGeometryUidsProvider

  @JsName("GetAllMeshInstanceUidsUsingMeshGeometryUid")
  public open fun getAllMeshInstanceUidsUsingMeshGeometryUid(meshGeometryUid: String,
      meshInstanceUids: Array<String>): MeshInstanceUidsProvider

  @JsName("GetAllMeshInstanceUids")
  public open fun getAllMeshInstanceUids(meshInstanceUids: Array<String>): MeshInstanceUidsProvider

  @JsName("GetAllMeshGeometryNotInstanced")
  public open fun getAllMeshGeometryNotInstanced(meshGeometryUids: Array<String>):
      MeshGeometryUidsProvider

  @JsName("GetAllMeshGeometry")
  public open fun getAllMeshGeometry(meshGeometryUids: Array<String>): MeshGeometryUidsProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePipelineMeshesUtilities

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePipelineMeshesUtilities

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePipelineMeshesUtilities

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePipelineMeshesUtilities

    @JsName("CreateInterchangePipelineMeshesUtilities")
    public
        fun createInterchangePipelineMeshesUtilities(baseNodeContainer: InterchangeBaseNodeContainer):
        InterchangePipelineMeshesUtilities

    @JsName("C")
    public fun copy(other: UObject): InterchangePipelineMeshesUtilities

    @JsName("C")
    public fun copy(other: Any): InterchangePipelineMeshesUtilities
  }
}

public open external class InterchangeGraphInspectorPipeline(
  outer: UObject,
) : InterchangePipelineBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeGraphInspectorPipeline

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeGraphInspectorPipeline

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeGraphInspectorPipeline

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeGraphInspectorPipeline

    @JsName("C")
    public fun copy(other: UObject): InterchangeGraphInspectorPipeline

    @JsName("C")
    public fun copy(other: Any): InterchangeGraphInspectorPipeline
  }
}

public open external class InterchangePipelineConfigurationGeneric(
  outer: UObject,
) : InterchangePipelineConfigurationBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePipelineConfigurationGeneric

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePipelineConfigurationGeneric

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePipelineConfigurationGeneric

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePipelineConfigurationGeneric

    @JsName("C")
    public fun copy(other: UObject): InterchangePipelineConfigurationGeneric

    @JsName("C")
    public fun copy(other: Any): InterchangePipelineConfigurationGeneric
  }
}

public open external class MegascansSettings(
  outer: UObject,
) : UObject {
  @JsName("bCreateFoliage")
  public open var createFoliage: Boolean

  @JsName("bApplyToSelection")
  public open var applyToSelection: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MegascansSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MegascansSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MegascansSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MegascansSettings

    @JsName("C")
    public fun copy(other: UObject): MegascansSettings

    @JsName("C")
    public fun copy(other: Any): MegascansSettings
  }
}

public open external class MaterialBlendSettings(
  outer: UObject,
) : UObject {
  @JsName("BlendedMaterialName")
  public open var blendedMaterialName: String

  @JsName("BlendedMaterialPath")
  public open var blendedMaterialPath: DirectoryPath

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialBlendSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialBlendSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialBlendSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialBlendSettings

    @JsName("C")
    public fun copy(other: UObject): MaterialBlendSettings

    @JsName("C")
    public fun copy(other: Any): MaterialBlendSettings
  }
}

public open external class MaterialAssetSettings(
  outer: UObject,
) : UObject {
  @JsName("MasterMaterial3d")
  public open var masterMaterial3d: String

  @JsName("MasterMaterialSurface")
  public open var masterMaterialSurface: String

  @JsName("MasterMaterialPlant")
  public open var masterMaterialPlant: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialAssetSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialAssetSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialAssetSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialAssetSettings

    @JsName("C")
    public fun copy(other: UObject): MaterialAssetSettings

    @JsName("C")
    public fun copy(other: Any): MaterialAssetSettings
  }
}

public open external class MaterialPresetsSettings(
  outer: UObject,
) : UObject {
  @JsName("MasterMaterial3d")
  public open var masterMaterial3d: Any

  @JsName("MasterMaterialSurface")
  public open var masterMaterialSurface: Any

  @JsName("MasterMaterialPlant")
  public open var masterMaterialPlant: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialPresetsSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialPresetsSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialPresetsSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialPresetsSettings

    @JsName("C")
    public fun copy(other: UObject): MaterialPresetsSettings

    @JsName("C")
    public fun copy(other: Any): MaterialPresetsSettings
  }
}

public open external class AssetInfo {
  @JsName("Path")
  public open var path: String

  @JsName("Version")
  public open var version: String

  public open fun clone(): AssetInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetInfo

    @JsName("C")
    public fun copy(other: Any): AssetInfo
  }
}

public open external class VersionData {
  @JsName("Assets")
  public open var assets: Array<AssetInfo>

  public open fun clone(): VersionData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VersionData

    @JsName("C")
    public fun copy(other: Any): VersionData
  }
}

public open external class VersionInfoHandler(
  outer: UObject,
) : UObject {
  @JsName("CommonVersionData")
  public open var commonVersionData: VersionData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VersionInfoHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VersionInfoHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VersionInfoHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VersionInfoHandler

    @JsName("Get")
    public fun get(): VersionInfoHandler

    @JsName("C")
    public fun copy(other: UObject): VersionInfoHandler

    @JsName("C")
    public fun copy(other: Any): VersionInfoHandler
  }
}

@JsName("WebJSCallbackBase")
public open external class WebJsCallbackBase {
  public open fun clone(): WebJsCallbackBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WebJsCallbackBase

    @JsName("C")
    public fun copy(other: Any): WebJsCallbackBase
  }
}

@JsName("WebJSFunction")
public open external class WebJsFunction : WebJsCallbackBase {
  public override fun clone(): WebJsFunction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WebJsFunction

    @JsName("C")
    public fun copy(other: Any): WebJsFunction
  }
}

public open external class BrowserBinding(
  outer: UObject,
) : UObject {
  @JsName("StartNodeProcess")
  public open fun startNodeProcess(): Unit

  @JsName("ShowLoginDialog")
  public open fun showLoginDialog(loginUrl: String, responseCodeUrl: String): Unit

  @JsName("ShowDialog")
  public open fun showDialog(type: String, URL: String): Unit

  @JsName("SendSuccess")
  public open fun sendSuccess(value: String): Unit

  @JsName("SendFailure")
  public open fun sendFailure(message: String): Unit

  @JsName("SaveAuthToken")
  public open fun saveAuthToken(value: String): Unit

  @JsName("RestartNodeProcess")
  public open fun restartNodeProcess(): Unit

  @JsName("OpenMegascansPluginSettings")
  public open fun openMegascansPluginSettings(): Unit

  @JsName("OpenExternalUrl")
  public open fun openExternalUrl(URL: String): Unit

  @JsName("OnExitCallback")
  public open fun onExitCallback(onExitJsCallback: WebJsFunction): Unit

  @JsName("OnDroppedCallback")
  public open fun onDroppedCallback(onDroppedJsCallback: WebJsFunction): Unit

  @JsName("OnDropDiscardedCallback")
  public open fun onDropDiscardedCallback(onDropDiscardedJsCallback: WebJsFunction): Unit

  @JsName("Logout")
  public open fun logout(): Unit

  @JsName("GetProjectPath")
  public open fun getProjectPath(): String

  @JsName("GetAuthToken")
  public open fun getAuthToken(): String

  @JsName("ExportDataToMSPlugin")
  public open fun exportDataToMsPlugin(data: String): Unit

  @JsName("DragStarted")
  public open fun dragStarted(
    imageUrl: Array<String>,
    iDs: Array<String>,
    types: Array<String>,
  ): Unit

  @JsName("DialogSuccessCallback")
  public open fun dialogSuccessCallback(dialogJsCallback: WebJsFunction): Unit

  @JsName("DialogFailCallback")
  public open fun dialogFailCallback(dialogJsCallback: WebJsFunction): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrowserBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrowserBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrowserBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrowserBinding

    @JsName("C")
    public fun copy(other: UObject): BrowserBinding

    @JsName("C")
    public fun copy(other: Any): BrowserBinding
  }
}

public open external class NodePort(
  outer: UObject,
) : UObject {
  @JsName("IsNodeRunning")
  public open fun isNodeRunning(): Boolean

  @JsName("GetNodePort")
  public open fun getNodePort(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NodePort

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NodePort

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NodePort

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NodePort

    @JsName("C")
    public fun copy(other: UObject): NodePort

    @JsName("C")
    public fun copy(other: Any): NodePort
  }
}

@JsName("EJavasriptTabActivationCause")
public external object JavasriptTabActivationCause {
  public var UserClickedOnTab: String

  public var SetDirectly: String

  @JsName("EJavasriptTabActivationCause_MAX")
  public var Max: String
}

public open external class JavascriptWorkspaceItem {
  public open fun clone(): JavascriptWorkspaceItem

  @JsName("AddGroup")
  public open fun addGroup(displayName: String): JavascriptWorkspaceItem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptWorkspaceItem

    @JsName("C")
    public fun copy(other: Any): JavascriptWorkspaceItem

    @JsName("AddGroup")
    public fun addGroup(parent: JavascriptWorkspaceItem, displayName: String):
        JavascriptWorkspaceItem

    @JsName("GetGroup")
    public fun getGroup(name: String): JavascriptWorkspaceItem
  }
}

@JsName("EJavascriptTabRole")
public external object JavascriptTabRole {
  public var MajorTab: String

  public var PanelTab: String

  public var NomadTab: String

  public var DocumentTab: String

  @JsName("EJavascriptTabRole_MAX")
  public var Max: String
}

public open external class JavascriptEditorTab(
  outer: UObject,
) : UObject {
  @JsName("OnSpawnTab")
  public open var onSpawnTab: UnrealEngineDelegate<(Context: UObject) -> Widget>

  @JsName("OnCloseTab")
  public open var onCloseTab: UnrealEngineDelegate<(Widget: Widget) -> Unit>

  @JsName("OnTabActivatedCallback")
  public open var onTabActivatedCallback: UnrealEngineDelegate<(TabId: String,
      Cause: String) -> Unit>

  @JsName("Group")
  public open var group: JavascriptWorkspaceItem

  @JsName("TabId")
  public open var tabId: String

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("Icon")
  public open var icon: JavascriptSlateIcon

  @JsName("bIsNomad")
  public open var isNomad: Boolean

  @JsName("Role")
  public open var role: String

  @JsName("ForceCommit")
  public open fun forceCommit(): Unit

  @JsName("Discard")
  public open fun discard(): Unit

  @JsName("Commit")
  public open fun commit(): Unit

  @JsName("CloseTab")
  public open fun closeTab(widget: Widget): Unit

  @JsName("ActivateInParent")
  public open fun activateInParent(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorTab

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorTab

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorTab

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorTab

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorTab

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorTab
  }
}

@JsName("JavascriptUICommandInfo")
public open external class JavascriptUiCommandInfo {
  public open fun clone(): JavascriptUiCommandInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptUiCommandInfo

    @JsName("C")
    public fun copy(other: Any): JavascriptUiCommandInfo

    @JsName("GenericCommand")
    public fun genericCommand(what: String): JavascriptUiCommandInfo
  }
}

@JsName("JavascriptUICommand")
public open external class JavascriptUiCommand {
  public open var ID: String

  @JsName("FriendlyName")
  public open var friendlyName: String

  @JsName("Description")
  public open var description: String

  @JsName("DefaultChord")
  public open var defaultChord: InputChord

  @JsName("ActionType")
  public open var actionType: String

  @JsName("CommandInfo")
  public open var commandInfo: JavascriptUiCommandInfo

  @JsName("IconStyleName")
  public open var iconStyleName: String

  public open fun clone(): JavascriptUiCommand

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptUiCommand

    @JsName("C")
    public fun copy(other: Any): JavascriptUiCommand
  }
}

public open external class JavascriptBindingContext {
  public open fun clone(): JavascriptBindingContext

  @JsName("Destroy")
  public open fun destroy(): Unit

  @JsName("UI_COMMAND_Function")
  public open fun uicommandFunction(command: JavascriptUiCommand, inTextSubNamespace: String):
      JavascriptUiCommandInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptBindingContext

    @JsName("C")
    public fun copy(other: Any): JavascriptBindingContext

    @JsName("Destroy")
    public fun destroy(context: JavascriptBindingContext): Unit

    @JsName("UI_COMMAND_Function")
    public fun uicommandFunction(
      `this`: JavascriptBindingContext,
      command: JavascriptUiCommand,
      inTextSubNamespace: String,
    ): JavascriptUiCommandInfo

    @JsName("NewBindingContext")
    public fun newBindingContext(
      inContextName: String,
      inContextDesc: String,
      inContextParent: String,
      inStyleSetName: String,
    ): JavascriptBindingContext
  }
}

@JsName("JavascriptUICommandList")
public open external class JavascriptUiCommandList {
  public open fun clone(): JavascriptUiCommandList

  @JsName("CreateMenuBarBuilder")
  public open fun createMenuBarBuilder(uFunction: JavascriptFunction): Unit

  @JsName("CreateMenuBuilder")
  public open fun createMenuBuilder(inShouldCloseWindowAfterMenuSelection: Boolean,
      uFunction: JavascriptFunction): Unit

  @JsName("CreateToolbarBuilder")
  public open fun createToolbarBuilder(orientation: String, uFunction: JavascriptFunction): Unit

  @JsName("ProcessCommandBindings_KeyEvent")
  public open fun processCommandBindingsKeyEvent(inKeyEvent: KeyEvent): Boolean

  @JsName("ProcessCommandBindings_PointerEvent")
  public open fun processCommandBindingsPointerEvent(inMouseEvent: UPointerEvent): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptUiCommandList

    @JsName("C")
    public fun copy(other: Any): JavascriptUiCommandList

    @JsName("CreateMenuBarBuilder")
    public fun createMenuBarBuilder(commandList: JavascriptUiCommandList,
        uFunction: JavascriptFunction): Unit

    @JsName("CreateMenuBuilder")
    public fun createMenuBuilder(
      commandList: JavascriptUiCommandList,
      inShouldCloseWindowAfterMenuSelection: Boolean,
      uFunction: JavascriptFunction,
    ): Unit

    @JsName("CreateToolbarBuilder")
    public fun createToolbarBuilder(
      commandList: JavascriptUiCommandList,
      orientation: String,
      uFunction: JavascriptFunction,
    ): Unit

    @JsName("ProcessCommandBindings_KeyEvent")
    public fun processCommandBindingsKeyEvent(commandList: JavascriptUiCommandList,
        inKeyEvent: KeyEvent): Boolean

    @JsName("ProcessCommandBindings_PointerEvent")
    public fun processCommandBindingsPointerEvent(commandList: JavascriptUiCommandList,
        inMouseEvent: UPointerEvent): Boolean

    @JsName("CreateUICommandList")
    public fun createUiCommandList(): JavascriptUiCommandList

    @JsName("GetLevelEditorActions")
    public fun getLevelEditorActions(): JavascriptUiCommandList
  }
}

@JsName("JavascriptUICommands")
public open external class JavascriptUiCommands(
  outer: UObject,
) : UObject {
  @JsName("OnExecuteAction")
  public open var onExecuteAction: UnrealEngineDelegate<(ID: String) -> Unit>

  @JsName("OnCanExecuteAction")
  public open var onCanExecuteAction: UnrealEngineDelegate<(ID: String) -> Boolean>

  @JsName("OnIsActionChecked")
  public open var onIsActionChecked: UnrealEngineDelegate<(ID: String) -> Boolean>

  @JsName("OnIsActionButtonVisible")
  public open var onIsActionButtonVisible: UnrealEngineDelegate<(ID: String) -> Boolean>

  @JsName("Commands")
  public open var commands: Array<JavascriptUiCommand>

  @JsName("ContextName")
  public open var contextName: String

  @JsName("ContextDesc")
  public open var contextDesc: String

  @JsName("ContextNameParent")
  public open var contextNameParent: String

  @JsName("StyleSetName")
  public open var styleSetName: String

  @JsName("TextSubNamespace")
  public open var textSubNamespace: String

  @JsName("CommandInfos")
  public open var commandInfos: Array<JavascriptUiCommandInfo>

  @JsName("BindingContext")
  public open var bindingContext: JavascriptBindingContext

  @JsName("Uninitialize")
  public open fun uninitialize(): Unit

  @JsName("Unbind")
  public open fun unbind(list: JavascriptUiCommandList): Unit

  @JsName("Refresh")
  public open fun refresh(): Unit

  @JsName("Initialize")
  public open fun initialize(): Unit

  @JsName("GetAction")
  public open fun getAction(ID: String): JavascriptUiCommandInfo

  @JsName("Discard")
  public open fun discard(): Unit

  @JsName("Commit")
  public open fun commit(): Unit

  @JsName("Bind")
  public open fun bind(list: JavascriptUiCommandList): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptUiCommands

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptUiCommands

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptUiCommands

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptUiCommands

    @JsName("BroadcastCommandsChanged")
    public fun broadcastCommandsChanged(inContextName: String): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptUiCommands

    @JsName("C")
    public fun copy(other: Any): JavascriptUiCommands
  }
}

@JsName("EJavascriptExtensionHook")
public external object JavascriptExtensionHook {
  public var Before: String

  public var After: String

  public var First: String

  @JsName("EJavascriptExtensionHook_MAX")
  public var Max: String
}

public open external class JavascriptMenuExtension {
  @JsName("ExtensionHook")
  public open var extensionHook: String

  @JsName("HookPosition")
  public open var hookPosition: String

  public open fun clone(): JavascriptMenuExtension

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptMenuExtension

    @JsName("C")
    public fun copy(other: Any): JavascriptMenuExtension
  }
}

@JsName("JavascriptUIExtender")
public open external class JavascriptUiExtender(
  outer: UObject,
) : UObject {
  @JsName("MenuExtensions")
  public open var menuExtensions: Array<JavascriptMenuExtension>

  @JsName("ToolbarExtensions")
  public open var toolbarExtensions: Array<JavascriptMenuExtension>

  @JsName("OnHook")
  public open var onHook: UnrealEngineDelegate<(Hook: String) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptUiExtender

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptUiExtender

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptUiExtender

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptUiExtender

    @JsName("GetTopCommandList")
    public fun getTopCommandList(): JavascriptUiCommandList

    @JsName("EndSection")
    public fun endSection(): Unit

    @JsName("Bind")
    public fun bind(commands: JavascriptUiCommands): Unit

    @JsName("BeginSection")
    public fun beginSection(name: String, text: String): Unit

    @JsName("AddToolBarButton")
    public fun addToolBarButton(commands: JavascriptUiCommands, ID: String): Unit

    @JsName("AddMenuSeparator")
    public fun addMenuSeparator(): Unit

    @JsName("AddMenuEntry")
    public fun addMenuEntry(commands: JavascriptUiCommands, ID: String): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptUiExtender

    @JsName("C")
    public fun copy(other: Any): JavascriptUiExtender
  }
}

public open external class JavascriptAssetEditorToolkit(
  outer: UObject,
) : UObject {
  @JsName("ToolkitFName")
  public open var toolkitFName: String

  @JsName("Layout")
  public open var layout: String

  @JsName("BaseToolkitName")
  public open var baseToolkitName: String

  @JsName("ToolkitName")
  public open var toolkitName: String

  @JsName("WorldCentricTabColorScale")
  public open var worldCentricTabColorScale: LinearColor

  @JsName("WorldCentricTabPrefix")
  public open var worldCentricTabPrefix: String

  @JsName("Tabs")
  public open var tabs: Array<JavascriptEditorTab>

  @JsName("Commands")
  public open var commands: JavascriptUiCommands

  @JsName("MenuExtender")
  public open var menuExtender: JavascriptUiExtender

  @JsName("ToolbarExtender")
  public open var toolbarExtender: JavascriptUiExtender

  @JsName("TestArray")
  public open var testArray: Array<Number>

  @JsName("Refresh")
  public open fun refresh(): Unit

  @JsName("Discard")
  public open fun discard(): Unit

  @JsName("Commit")
  public open fun commit(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptAssetEditorToolkit

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptAssetEditorToolkit

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptAssetEditorToolkit

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptAssetEditorToolkit

    @JsName("C")
    public fun copy(other: UObject): JavascriptAssetEditorToolkit

    @JsName("C")
    public fun copy(other: Any): JavascriptAssetEditorToolkit
  }
}

public open external class JavascriptAssetPicker(
  outer: UObject,
) : Widget {
  @JsName("OnGetDefaultValue")
  public open var onGetDefaultValue: UnrealEngineDelegate<() -> UObject>

  @JsName("OnSetDefaultValue")
  public open var onSetDefaultValue: UnrealEngineDelegate<(Value: String) -> Unit>

  @JsName("CategoryObject")
  public open var categoryObject: UObject

  @JsName("AllowedClasses")
  public open var allowedClasses: String

  @JsName("SetCategoryObject")
  public open fun setCategoryObject(inCategoryObject: UObject): Unit

  @JsName("SetAllowedClasses")
  public open fun setAllowedClasses(inAllowedClasses: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptAssetPicker

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptAssetPicker

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptAssetPicker

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptAssetPicker

    @JsName("C")
    public fun copy(other: UObject): JavascriptAssetPicker

    @JsName("C")
    public fun copy(other: Any): JavascriptAssetPicker
  }
}

public open external class JavascriptAssetTypeActions(
  outer: UObject,
) : UObject {
  @JsName("ActionsName")
  public open var actionsName: String

  @JsName("Color")
  public open var color: Color

  @JsName("SupportedClass")
  public open var supportedClass: UnrealEngineClass

  @JsName("Editor")
  public open var editor: JavascriptAssetEditorToolkit

  @JsName("Actions")
  public open var actions: JavascriptUiExtender

  @JsName("Refresh")
  public open fun refresh(): Unit

  @JsName("Discard")
  public open fun discard(): Unit

  @JsName("Commit")
  public open fun commit(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptAssetTypeActions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptAssetTypeActions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptAssetTypeActions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptAssetTypeActions

    @JsName("C")
    public fun copy(other: UObject): JavascriptAssetTypeActions

    @JsName("C")
    public fun copy(other: Any): JavascriptAssetTypeActions
  }
}

public open external class JavascriptClassViewer(
  outer: UObject,
) : Widget {
  @JsName("OnGetDefaultValue")
  public open var onGetDefaultValue: UnrealEngineDelegate<() -> UnrealEngineClass>

  @JsName("OnSetDefaultValue")
  public open var onSetDefaultValue: UnrealEngineDelegate<(Value: String) -> Unit>

  @JsName("CategoryClass")
  public open var categoryClass: UnrealEngineClass

  @JsName("AllowedChildrenOfClasses")
  public open var allowedChildrenOfClasses: Array<UnrealEngineClass>

  @JsName("SetCategoryClass")
  public open fun setCategoryClass(inCategoryClass: UnrealEngineClass): Unit

  @JsName("SetAllowedChildrenOfClasses")
  public open fun setAllowedChildrenOfClasses(inAllowedChildrenOfClasses: Array<UnrealEngineClass>):
      Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptClassViewer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptClassViewer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptClassViewer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptClassViewer

    @JsName("C")
    public fun copy(other: UObject): JavascriptClassViewer

    @JsName("C")
    public fun copy(other: Any): JavascriptClassViewer
  }
}

public open external class JavascriptColorPicker(
  outer: UObject,
) : Widget {
  @JsName("OnColorChanged")
  public open var onColorChanged: UnrealEngineMulticastDelegate<(Color: LinearColor) -> Unit>

  @JsName("SelectedColor")
  public open var selectedColor: LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptColorPicker

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptColorPicker

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptColorPicker

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptColorPicker

    @JsName("C")
    public fun copy(other: UObject): JavascriptColorPicker

    @JsName("C")
    public fun copy(other: Any): JavascriptColorPicker
  }
}

public open external class JavascriptCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("CmdLineTokens")
  public open var cmdLineTokens: Array<String>

  @JsName("CmdLineSwitches")
  public open var cmdLineSwitches: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptCommandlet

    @JsName("C")
    public fun copy(other: UObject): JavascriptCommandlet

    @JsName("C")
    public fun copy(other: Any): JavascriptCommandlet
  }
}

public open external class JavascriptCurveTableEditor(
  outer: UObject,
) : Widget {
  @JsName("SetObject")
  public open fun setObject(uObject: CurveTable, forceRefresh: Boolean): Unit

  @JsName("Destruct")
  public open fun destruct(): Unit

  @JsName("Construct")
  public open fun construct(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptCurveTableEditor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptCurveTableEditor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptCurveTableEditor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptCurveTableEditor

    @JsName("C")
    public fun copy(other: UObject): JavascriptCurveTableEditor

    @JsName("C")
    public fun copy(other: Any): JavascriptCurveTableEditor
  }
}

public open external class JavascriptWholeRowDetailCustomization(
  outer: UObject,
) : UObject {
  @JsName("TypeName")
  public open var typeName: String

  @JsName("CategoryName")
  public open var categoryName: String

  @JsName("CustomWidget")
  public open var customWidget: JavascriptSlateWidget

  @JsName("Unregister")
  public open fun unregister(): Unit

  @JsName("Register")
  public open fun register(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptWholeRowDetailCustomization

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptWholeRowDetailCustomization

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptWholeRowDetailCustomization

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptWholeRowDetailCustomization

    @JsName("C")
    public fun copy(other: UObject): JavascriptWholeRowDetailCustomization

    @JsName("C")
    public fun copy(other: Any): JavascriptWholeRowDetailCustomization
  }
}

public open external class JavascriptDetailCustomization(
  outer: UObject,
) : UObject {
  @JsName("TypeName")
  public open var typeName: String

  @JsName("CategoryName")
  public open var categoryName: String

  @JsName("NameWidget")
  public open var nameWidget: JavascriptSlateWidget

  @JsName("ValueWidget")
  public open var valueWidget: JavascriptSlateWidget

  @JsName("Unregister")
  public open fun unregister(): Unit

  @JsName("Register")
  public open fun register(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptDetailCustomization

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptDetailCustomization

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptDetailCustomization

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptDetailCustomization

    @JsName("C")
    public fun copy(other: UObject): JavascriptDetailCustomization

    @JsName("C")
    public fun copy(other: Any): JavascriptDetailCustomization
  }
}

@JsName("T$496")
public external interface Object496 {
  @JsName("Out")
  public var out: String

  @JsName("$")
  public var value: Boolean
}

public open external class JavascriptEditorEngineLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorEngineLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorEngineLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorEngineLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorEngineLibrary

    @JsName("SetMaterial")
    public fun setMaterial(
      engine: EditorEngine,
      inModel: Model,
      material: MaterialInterface,
      surfaces: Array<Number>,
    ): Unit

    @JsName("SelectNone")
    public fun selectNone(
      engine: EditorEngine,
      noteSelectionChange: Boolean,
      deselectBspSurfs: Boolean,
      warnAboutManyActors: Boolean,
    ): Unit

    @JsName("SelectGroup")
    public fun selectGroup(
      engine: EditorEngine,
      inGroupActor: GroupActor,
      forceSelection: Boolean,
      inSelected: Boolean,
      notify: Boolean,
    ): Unit

    @JsName("SelectComponent")
    public fun selectComponent(
      engine: EditorEngine,
      component: ActorComponent,
      inSelected: Boolean,
      notify: Boolean,
      selectEvenIfHidden: Boolean,
    ): Unit

    @JsName("SelectActor")
    public fun selectActor(
      engine: EditorEngine,
      actor: Actor,
      inSelected: Boolean,
      notify: Boolean,
      selectEvenIfHidden: Boolean,
      forceRefresh: Boolean,
    ): Unit

    @JsName("RedrawAllViewports")
    public fun redrawAllViewports(engine: EditorEngine, invalidateHitProxies: Boolean): Unit

    @JsName("RebuildStaticNavigableGeometry")
    public fun rebuildStaticNavigableGeometry(engine: EditorEngine, level: Level): Unit

    @JsName("RebuildLevel")
    public fun rebuildLevel(engine: EditorEngine, level: Level): Unit

    @JsName("GetSurfaces")
    public fun getSurfaces(brush: Brush, surfaces: Array<Number>): SurfacesProvider

    @JsName("GetSelectedSet")
    public fun getSelectedSet(engine: EditorEngine, `class`: UnrealEngineClass): USelection

    @JsName("GetSelectedObjects")
    public fun getSelectedObjects(engine: EditorEngine): USelection

    @JsName("GetSelectedComponents")
    public fun getSelectedComponents(engine: EditorEngine): USelection

    @JsName("GetSelectedActors")
    public fun getSelectedActors(engine: EditorEngine): USelection

    @JsName("GetPIEWorld")
    public fun getPieWorld(engine: Engine): World

    @JsName("GetLongPackagePath")
    public fun getLongPackagePath(inPackage: Package): String

    @JsName("GetEditorWorld")
    public fun getEditorWorld(engine: Engine): World

    @JsName("FindBrushBuilder")
    public fun findBrushBuilder(engine: EditorEngine, brushBuilderClass: UnrealEngineClass):
        BrushBuilder

    @JsName("Exec")
    public fun exec(
      engine: EditorEngine,
      inWorld: World,
      command: String,
      out: String,
    ): Object496

    @JsName("DuplicateAsset")
    public fun duplicateAsset(
      assetName: String,
      packagePath: String,
      originalObject: UObject,
    ): UObject

    @JsName("DeleteObjectsUnchecked")
    public fun deleteObjectsUnchecked(objectsToDelete: Array<UObject>): Number

    @JsName("CanSelectActor")
    public fun canSelectActor(
      engine: EditorEngine,
      actor: Actor,
      inSelected: Boolean,
      selectEvenIfHidden: Boolean,
      warnIfLevelLocked: Boolean,
    ): Boolean

    @JsName("bspBrushCSG")
    public fun bspBrushCsg(
      engine: EditorEngine,
      actor: Brush,
      model: Model,
      polyFlags: Number,
      brushType: String,
      csgOper: String,
      buildBounds: Boolean,
      mergePolys: Boolean,
      replaceNullMaterialRefs: Boolean,
      showProgressBar: Boolean,
    ): Number

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorEngineLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorEngineLibrary
  }
}

@JsName("T$497")
public external interface StringArrayProvider {
  @JsName("OutArray")
  public var outArray: Array<String>
}

public open external class JavascriptAssetData {
  @JsName("ObjectPath")
  public open var objectPath: String

  @JsName("PackageName")
  public open var packageName: String

  @JsName("PackagePath")
  public open var packagePath: String

  @JsName("AssetName")
  public open var assetName: String

  @JsName("AssetClass")
  public open var assetClass: String

  @JsName("ChunkIDs")
  public open var chunkIDs: Array<Number>

  @JsName("PackageFlags")
  public open var packageFlags: Number

  public open fun clone(): JavascriptAssetData

  @JsName("GetAllTags")
  public open fun getAllTags(outArray: Array<String>): StringArrayProvider

  @JsName("GetAsset")
  public open fun getAsset(): UObject

  @JsName("GetClass")
  public open fun getClass(): UnrealEngineClass

  @JsName("GetPackage")
  public open fun getPackage(): Package

  @JsName("GetTagValue")
  public open fun getTagValue(name: String, outValue: String): Object187

  @JsName("IsAssetLoaded")
  public open fun isAssetLoaded(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptAssetData

    @JsName("C")
    public fun copy(other: Any): JavascriptAssetData

    @JsName("GetAllTags")
    public fun getAllTags(assetData: JavascriptAssetData, outArray: Array<String>):
        StringArrayProvider

    @JsName("GetAsset")
    public fun getAsset(assetData: JavascriptAssetData): UObject

    @JsName("GetClass")
    public fun getClass(assetData: JavascriptAssetData): UnrealEngineClass

    @JsName("GetPackage")
    public fun getPackage(assetData: JavascriptAssetData): Package

    @JsName("GetTagValue")
    public fun getTagValue(
      assetData: JavascriptAssetData,
      name: String,
      outValue: String,
    ): Object187

    @JsName("IsAssetLoaded")
    public fun isAssetLoaded(assetData: JavascriptAssetData): Boolean
  }
}

public open external class JavascriptEditorGlobalDelegates(
  outer: UObject,
) : UObject {
  @JsName("WorldChange")
  public open fun worldChange(): Unit

  @JsName("UnbindAll")
  public open fun unbindAll(): Unit

  @JsName("Unbind")
  public open fun unbind(key: String): Unit

  @JsName("SurfProps")
  public open fun surfProps(): Unit

  @JsName("SingleStepPIE")
  public open fun singleStepPie(isSimulating: Boolean): Unit

  @JsName("SelectObjectEvent")
  public open fun selectObjectEvent(uObject: UObject): Unit

  @JsName("SelectNoneEvent")
  public open fun selectNoneEvent(): Unit

  @JsName("SelectionChangedEvent")
  public open fun selectionChangedEvent(uObject: UObject): Unit

  @JsName("SelectedProps")
  public open fun selectedProps(): Unit

  @JsName("ResumePIE")
  public open fun resumePie(isSimulating: Boolean): Unit

  @JsName("RefreshPrimitiveStatsBrowser")
  public open fun refreshPrimitiveStatsBrowser(): Unit

  @JsName("RefreshLayerBrowser")
  public open fun refreshLayerBrowser(): Unit

  @JsName("RefreshEditor")
  public open fun refreshEditor(): Unit

  @JsName("RefreshAllBrowsers")
  public open fun refreshAllBrowsers(): Unit

  @JsName("RedrawAllViewports")
  public open fun redrawAllViewports(): Unit

  @JsName("PropertySelectionChange")
  public open fun propertySelectionChange(): Unit

  @JsName("PreSaveWorldWithContext_Friendly")
  public open fun preSaveWorldWithContextFriendly(saveFlags: Number, world: World): Unit

  @JsName("PreBeginPIE")
  public open fun preBeginPie(isSimulating: Boolean): Unit

  @JsName("PostSaveWorldWithContext_Friendly")
  public open fun postSaveWorldWithContextFriendly(
    saveFlags: Number,
    world: World,
    success: Boolean,
  ): Unit

  @JsName("PostPIEStarted")
  public open fun postPieStarted(isSimulating: Boolean): Unit

  @JsName("PostLandscapeLayerUpdated")
  public open fun postLandscapeLayerUpdated(): Unit

  @JsName("OnShutdownPostPackagesSaved")
  public open fun onShutdownPostPackagesSaved(): Unit

  @JsName("OnPathRemoved")
  public open fun onPathRemoved(path: String): Unit

  @JsName("OnPathAdded")
  public open fun onPathAdded(path: String): Unit

  @JsName("OnObjectReimported")
  public open fun onObjectReimported(uObject: UObject): Unit

  @JsName("OnNewAssetCreated")
  public open fun onNewAssetCreated(inFactory: Factory): Unit

  @JsName("OnNewActorsDropped")
  public open fun onNewActorsDropped(droppedObjects: Array<UObject>, outNewActors: Array<Actor>):
      Unit

  @JsName("OnMapOpened")
  public open fun onMapOpened(filename: String, asTemplate: Boolean): Unit

  @JsName("OnMainFrameCreationFinished_Friendly")
  public open fun onMainFrameCreationFinishedFriendly(): Unit

  @JsName("OnLightingBuildStarted")
  public open fun onLightingBuildStarted(): Unit

  @JsName("OnLightingBuildKept")
  public open fun onLightingBuildKept(): Unit

  @JsName("OnLevelActorDeleted")
  public open fun onLevelActorDeleted(actor: Actor): Unit

  @JsName("OnLevelActorAdded")
  public open fun onLevelActorAdded(actor: Actor): Unit

  @JsName("OnInMemoryAssetDeleted")
  public open fun onInMemoryAssetDeleted(inObject: UObject): Unit

  @JsName("OnInMemoryAssetCreated")
  public open fun onInMemoryAssetCreated(inObject: UObject): Unit

  @JsName("OnGridSnappingChanged")
  public open fun onGridSnappingChanged(gridEnabled: Boolean, gridSize: Number): Unit

  @JsName("OnFocusViewportOnActors")
  public open fun onFocusViewportOnActors(actors: Array<Actor>): Unit

  @JsName("OnFinishPickingBlueprintClass")
  public open fun onFinishPickingBlueprintClass(inClass: UnrealEngineClass): Unit

  @JsName("OnFilesLoaded")
  public open fun onFilesLoaded(): Unit

  @JsName("OnFileLoadProgressUpdated_Friendly")
  public open fun onFileLoadProgressUpdatedFriendly(
    numTotalAssets: Number,
    numAssetsProcessedByAssetRegistry: Number,
    numAssetsPendingDataLoad: Number,
    isDiscoveringAssetFiles: Boolean,
  ): Unit

  @JsName("OnEditPasteActorsEnd")
  public open fun onEditPasteActorsEnd(): Unit

  @JsName("OnEditPasteActorsBegin")
  public open fun onEditPasteActorsBegin(): Unit

  @JsName("OnEditorCameraMoved")
  public open fun onEditorCameraMoved(
    viewLocation: Vector,
    viewRotation: Rotator,
    viewportType: String,
    viewIndex: Number,
  ): Unit

  @JsName("OnEditCutActorsEnd")
  public open fun onEditCutActorsEnd(): Unit

  @JsName("OnEditCutActorsBegin")
  public open fun onEditCutActorsBegin(): Unit

  @JsName("OnEditCopyActorsEnd")
  public open fun onEditCopyActorsEnd(): Unit

  @JsName("OnEditCopyActorsBegin")
  public open fun onEditCopyActorsBegin(): Unit

  @JsName("OnDuplicateActorsEnd")
  public open fun onDuplicateActorsEnd(): Unit

  @JsName("OnDuplicateActorsBegin")
  public open fun onDuplicateActorsBegin(): Unit

  @JsName("OnDollyPerspectiveCamera")
  public open fun onDollyPerspectiveCamera(drag: Vector, viewIndex: Number): Unit

  @JsName("OnDeleteActorsEnd")
  public open fun onDeleteActorsEnd(): Unit

  @JsName("OnDeleteActorsBegin")
  public open fun onDeleteActorsBegin(): Unit

  @JsName("OnConsoleCommandJS")
  public open fun onConsoleCommandJs(args: Array<String>, inWorld: World): Unit

  @JsName("OnConfigureNewAssetProperties")
  public open fun onConfigureNewAssetProperties(inFactory: Factory): Unit

  @JsName("OnClassPackageLoadedOrUnloaded")
  public open fun onClassPackageLoadedOrUnloaded(): Unit

  @JsName("OnBlueprintReinstanced")
  public open fun onBlueprintReinstanced(): Unit

  @JsName("OnBlueprintPreCompile")
  public open fun onBlueprintPreCompile(blueprint: Blueprint): Unit

  @JsName("OnBlueprintCompiled")
  public open fun onBlueprintCompiled(): Unit

  @JsName("OnAssetsPreDelete")
  public open fun onAssetsPreDelete(assets: Array<UObject>): Unit

  @JsName("OnAssetsDeleted")
  public open fun onAssetsDeleted(classes: Array<UnrealEngineClass>): Unit

  @JsName("OnAssetRenamed_Friendly")
  public open fun onAssetRenamedFriendly(assetData: JavascriptAssetData, name: String): Unit

  @JsName("OnAssetRemoved_Friendly")
  public open fun onAssetRemovedFriendly(assetData: JavascriptAssetData): Unit

  @JsName("OnAssetReimport")
  public open fun onAssetReimport(inCreatedObject: UObject): Unit

  @JsName("OnAssetPreImport_Friendly")
  public open fun onAssetPreImportFriendly(
    inFactory: Factory,
    inClass: UnrealEngineClass,
    inParent: UObject,
    name: String,
    type: String,
  ): Unit

  @JsName("OnAssetPostImport")
  public open fun onAssetPostImport(inFactory: Factory, inCreatedObject: UObject): Unit

  @JsName("OnAssetAdded_Friendly")
  public open fun onAssetAddedFriendly(assetData: JavascriptAssetData): Unit

  @JsName("OnApplyObjectToActor")
  public open fun onApplyObjectToActor(objectToApply: UObject, actor: Actor): Unit

  @JsName("OnAddLevelToWorld")
  public open fun onAddLevelToWorld(level: Level): Unit

  @JsName("OnActionAxisMappingsChanged")
  public open fun onActionAxisMappingsChanged(): Unit

  @JsName("NewCurrentLevel")
  public open fun newCurrentLevel(): Unit

  @JsName("MapChange_Friendly")
  public open fun mapChangeFriendly(mapChangeFlags: Number): Unit

  @JsName("LoadSelectedAssetsIfNeeded")
  public open fun loadSelectedAssetsIfNeeded(): Unit

  @JsName("LayerChange")
  public open fun layerChange(): Unit

  @JsName("FitTextureToSurface")
  public open fun fitTextureToSurface(world: World): Unit

  @JsName("EndPlayMapDelegate")
  public open fun endPlayMapDelegate(): Unit

  @JsName("EndPIE")
  public open fun endPie(isSimulating: Boolean): Unit

  @JsName("DisplayLoadErrors")
  public open fun displayLoadErrors(): Unit

  @JsName("CleanseEditor")
  public open fun cleanseEditor(): Unit

  @JsName("ChangeEditorMode")
  public open fun changeEditorMode(newMode: String): Unit

  @JsName("Bind")
  public open fun bind(key: String): Unit

  @JsName("BeginPIE")
  public open fun beginPie(isSimulating: Boolean): Unit

  @JsName("ActorPropertiesChange")
  public open fun actorPropertiesChange(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorGlobalDelegates

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorGlobalDelegates

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorGlobalDelegates

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorGlobalDelegates

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorGlobalDelegates

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorGlobalDelegates
  }
}

public open external class JavascriptEditorInputProcessor(
  outer: UObject,
) : UObject {
  @JsName("UnRegister")
  public open fun unRegister(): Unit

  @JsName("Register")
  public open fun register(): Unit

  @JsName("HandleMouseMoveEvent")
  public open fun handleMouseMoveEvent(inPointerEvent: UPointerEvent): Boolean

  @JsName("HandleKeyUpEvent")
  public open fun handleKeyUpEvent(inKeyEvent: KeyEvent): Boolean

  @JsName("HandleKeyDownEvent")
  public open fun handleKeyDownEvent(inKeyEvent: KeyEvent): Boolean

  @JsName("HandleAnalogInputEvent")
  public open fun handleAnalogInputEvent(inKeyEvent: AnalogInputEvent): Boolean

  @JsName("Activate")
  public open fun activate(enable: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorInputProcessor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorInputProcessor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorInputProcessor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorInputProcessor

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorInputProcessor

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorInputProcessor
  }
}

public open external class JavascriptExtensionBase {
  public open fun clone(): JavascriptExtensionBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptExtensionBase

    @JsName("C")
    public fun copy(other: Any): JavascriptExtensionBase
  }
}

@JsName("T$499")
public external interface BuilderProvider {
  @JsName("Builder")
  public var builder: JavascriptMenuBuilder
}

@JsName("T$500")
public external interface MenuBuilderProvider {
  @JsName("MenuBuilder")
  public var menuBuilder: JavascriptMenuBuilder
}

public open external class JavascriptMenuBuilder {
  public open fun clone(): JavascriptMenuBuilder

  @JsName("AddComboButton")
  public open fun addComboButton(uObject: JavascriptComboButtonContext, editingObject: UObject):
      BuilderProvider

  @JsName("AddMenuByCommands")
  public open fun addMenuByCommands(uiCommands: JavascriptUiCommands): BuilderProvider

  @JsName("AddMenuEntry")
  public open fun addMenuEntry(uObject: JavascriptMenuContext): BuilderProvider

  @JsName("AddPullDownMenu")
  public open fun addPullDownMenu(
    inMenuLabel: String,
    inToolTip: String,
    inPullDownMenu: JavascriptFunction,
    inExtensionHook: String,
    inTutorialHighlightName: String,
  ): MenuBuilderProvider

  @JsName("AddSeparator")
  public open fun addSeparator(): BuilderProvider

  @JsName("AddSubMenu")
  public open fun addSubMenu(
    label: String,
    tooltip: String,
    inOpenSubMenuOnClick: Boolean,
    uFunction: JavascriptFunction,
  ): BuilderProvider

  @JsName("AddToolBarButton")
  public open fun addToolBarButton(commandInfo: JavascriptUiCommandInfo): BuilderProvider

  @JsName("AddToolBarButtonByContext")
  public open fun addToolBarButtonByContext(context: JavascriptToolbarButtonContext,
      editingObject: UObject): BuilderProvider

  @JsName("AddWidget")
  public open fun addWidget(
    widget: Widget,
    label: String,
    noIndent: Boolean,
    inTutorialHighlightName: String,
    searchable: Boolean,
  ): BuilderProvider

  @JsName("BeginSection")
  public open fun beginSection(inExtensionHook: String, menuHeadingText: String): BuilderProvider

  @JsName("EndSection")
  public open fun endSection(): BuilderProvider

  @JsName("PopCommandList")
  public open fun popCommandList(): BuilderProvider

  @JsName("PushCommandList")
  public open fun pushCommandList(list: JavascriptUiCommandList): BuilderProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptMenuBuilder

    @JsName("C")
    public fun copy(other: Any): JavascriptMenuBuilder

    @JsName("AddComboButton")
    public fun addComboButton(
      builder: JavascriptMenuBuilder,
      uObject: JavascriptComboButtonContext,
      editingObject: UObject,
    ): BuilderProvider

    @JsName("AddMenuByCommands")
    public fun addMenuByCommands(builder: JavascriptMenuBuilder, uiCommands: JavascriptUiCommands):
        BuilderProvider

    @JsName("AddMenuEntry")
    public fun addMenuEntry(builder: JavascriptMenuBuilder, uObject: JavascriptMenuContext):
        BuilderProvider

    @JsName("AddPullDownMenu")
    public fun addPullDownMenu(
      menuBuilder: JavascriptMenuBuilder,
      inMenuLabel: String,
      inToolTip: String,
      inPullDownMenu: JavascriptFunction,
      inExtensionHook: String,
      inTutorialHighlightName: String,
    ): MenuBuilderProvider

    @JsName("AddSeparator")
    public fun addSeparator(builder: JavascriptMenuBuilder): BuilderProvider

    @JsName("AddSubMenu")
    public fun addSubMenu(
      builder: JavascriptMenuBuilder,
      label: String,
      tooltip: String,
      inOpenSubMenuOnClick: Boolean,
      uFunction: JavascriptFunction,
    ): BuilderProvider

    @JsName("AddToolBarButton")
    public fun addToolBarButton(builder: JavascriptMenuBuilder,
        commandInfo: JavascriptUiCommandInfo): BuilderProvider

    @JsName("AddToolBarButtonByContext")
    public fun addToolBarButtonByContext(
      builder: JavascriptMenuBuilder,
      context: JavascriptToolbarButtonContext,
      editingObject: UObject,
    ): BuilderProvider

    @JsName("AddWidget")
    public fun addWidget(
      builder: JavascriptMenuBuilder,
      widget: Widget,
      label: String,
      noIndent: Boolean,
      inTutorialHighlightName: String,
      searchable: Boolean,
    ): BuilderProvider

    @JsName("BeginSection")
    public fun beginSection(
      builder: JavascriptMenuBuilder,
      inExtensionHook: String,
      menuHeadingText: String,
    ): BuilderProvider

    @JsName("EndSection")
    public fun endSection(builder: JavascriptMenuBuilder): BuilderProvider

    @JsName("PopCommandList")
    public fun popCommandList(builder: JavascriptMenuBuilder): BuilderProvider

    @JsName("PushCommandList")
    public fun pushCommandList(builder: JavascriptMenuBuilder, list: JavascriptUiCommandList):
        BuilderProvider
  }
}

public open external class JavascriptExtender {
  public open fun clone(): JavascriptExtender

  @JsName("AddMenubarExtension")
  public open fun addMenubarExtension(
    extensionHook: String,
    hookPosition: String,
    commandList: JavascriptUiCommandList,
    uFunction: JavascriptFunction,
  ): JavascriptExtensionBase

  @JsName("AddMenuExtension")
  public open fun addMenuExtension(
    extensionHook: String,
    hookPosition: String,
    commandList: JavascriptUiCommandList,
    uFunction: JavascriptFunction,
  ): JavascriptExtensionBase

  @JsName("AddToolBarExtension")
  public open fun addToolBarExtension(
    extensionHook: String,
    hookPosition: String,
    commandList: JavascriptUiCommandList,
    uFunction: JavascriptFunction,
  ): JavascriptExtensionBase

  @JsName("Apply")
  public open fun apply(
    extensionHook: String,
    hookPosition: String,
    menuBuilder: JavascriptMenuBuilder,
  ): MenuBuilderProvider

  @JsName("RemoveExtension")
  public open fun removeExtension(extension: JavascriptExtensionBase): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptExtender

    @JsName("C")
    public fun copy(other: Any): JavascriptExtender

    @JsName("AddMenubarExtension")
    public fun addMenubarExtension(
      extender: JavascriptExtender,
      extensionHook: String,
      hookPosition: String,
      commandList: JavascriptUiCommandList,
      uFunction: JavascriptFunction,
    ): JavascriptExtensionBase

    @JsName("AddMenuExtension")
    public fun addMenuExtension(
      extender: JavascriptExtender,
      extensionHook: String,
      hookPosition: String,
      commandList: JavascriptUiCommandList,
      uFunction: JavascriptFunction,
    ): JavascriptExtensionBase

    @JsName("AddToolBarExtension")
    public fun addToolBarExtension(
      extender: JavascriptExtender,
      extensionHook: String,
      hookPosition: String,
      commandList: JavascriptUiCommandList,
      uFunction: JavascriptFunction,
    ): JavascriptExtensionBase

    @JsName("Apply")
    public fun apply(
      extender: JavascriptExtender,
      extensionHook: String,
      hookPosition: String,
      menuBuilder: JavascriptMenuBuilder,
    ): MenuBuilderProvider

    @JsName("RemoveExtension")
    public fun removeExtension(extender: JavascriptExtender, extension: JavascriptExtensionBase):
        Unit

    @JsName("Combine")
    public fun combine(extenders: Array<JavascriptExtender>): JavascriptExtender
  }
}

public open external class JavascriptLazyExtenderDelegates(
  outer: UObject,
) : UObject {
  @JsName("GetExtender")
  public open var getExtender: UnrealEngineDelegate<(List: JavascriptUiCommandList,
      EditingObjects: Array<UObject>) -> JavascriptExtender>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptLazyExtenderDelegates

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptLazyExtenderDelegates

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptLazyExtenderDelegates

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptLazyExtenderDelegates

    @JsName("C")
    public fun copy(other: UObject): JavascriptLazyExtenderDelegates

    @JsName("C")
    public fun copy(other: Any): JavascriptLazyExtenderDelegates
  }
}

@JsName("EJavascriptRHIFeatureLevel")
public external object JavascriptRHIFeatureLevel {
  @JsName("ES2")
  public var Es2: String

  @JsName("ES3_1")
  public var Es31: String

  @JsName("SM4")
  public var Sm4: String

  @JsName("SM5")
  public var Sm5: String

  public var Num: String

  @JsName("EJavascriptRHIFeatureLevel_MAX")
  public var Max: String
}

@JsName("T$501")
public external interface VertsProvider {
  @JsName("Verts")
  public var verts: Array<Vector>
}

@JsName("JavascriptPDI")
public open external class JavascriptPdi {
  public open fun clone(): JavascriptPdi

  @JsName("DrawArc")
  public open fun drawArc(
    base: Vector,
    x: Vector,
    y: Vector,
    minAngle: Number,
    maxAngle: Number,
    radius: Number,
    sections: Number,
    color: LinearColor,
    depthPriority: String,
  ): Unit

  @JsName("DrawCircle")
  public open fun drawCircle(
    base: Vector,
    x: Vector,
    y: Vector,
    color: LinearColor,
    radius: Number,
    numSides: Number,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawConnectedArrow")
  public open fun drawConnectedArrow(
    arrowToWorld: Transform,
    color: LinearColor,
    arrowHeight: Number,
    arrowWidth: Number,
    depthPriority: String,
    thickness: Number,
    numSpokes: Number,
  ): Unit

  @JsName("DrawDashedLine")
  public open fun drawDashedLine(
    start: Vector,
    end: Vector,
    color: LinearColor,
    dashSize: Number,
    depthPriority: String,
    depthBias: Number,
  ): Unit

  @JsName("DrawDirectionalArrow")
  public open fun drawDirectionalArrow(
    arrowToWorld: Transform,
    inColor: LinearColor,
    length: Number,
    arrowSize: Number,
    depthPriority: String,
    thickness: Number,
  ): Unit

  @JsName("DrawOrientedWireBox")
  public open fun drawOrientedWireBox(
    base: Vector,
    x: Vector,
    y: Vector,
    z: Vector,
    extent: Vector,
    color: LinearColor,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawPolygon")
  public open fun drawPolygon(
    verts: Array<Vector>,
    inColor: LinearColor,
    depthPriority: String,
    rhiFeatureLevel: String,
  ): Unit

  @JsName("DrawWireBox")
  public open fun drawWireBox(
    box: Box,
    color: LinearColor,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawWireBox2")
  public open fun drawWireBox2(
    matrix: Transform,
    box: Box,
    color: LinearColor,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawWireCapsule")
  public open fun drawWireCapsule(
    base: Vector,
    x: Vector,
    y: Vector,
    z: Vector,
    color: LinearColor,
    radius: Number,
    halfHeight: Number,
    numSides: Number,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawWireChoppedCone")
  public open fun drawWireChoppedCone(
    base: Vector,
    x: Vector,
    y: Vector,
    z: Vector,
    color: LinearColor,
    radius: Number,
    topRadius: Number,
    halfHeight: Number,
    numSides: Number,
    depthPriority: String,
  ): Unit

  @JsName("DrawWireCone")
  public open fun drawWireCone(
    verts: Array<Vector>,
    transform: Transform,
    coneRadius: Number,
    coneAngle: Number,
    coneSides: Number,
    color: LinearColor,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): VertsProvider

  @JsName("DrawWireCylinder")
  public open fun drawWireCylinder(
    base: Vector,
    x: Vector,
    y: Vector,
    z: Vector,
    color: LinearColor,
    radius: Number,
    halfHeight: Number,
    numSides: Number,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawWireDiamond")
  public open fun drawWireDiamond(
    transform: Transform,
    size: Number,
    inColor: LinearColor,
    depthPriority: String,
  ): Unit

  @JsName("DrawWireSphere")
  public open fun drawWireSphere(
    base: Vector,
    color: LinearColor,
    radius: Number,
    numSides: Number,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawWireSphere2")
  public open fun drawWireSphere2(
    transform: Transform,
    color: LinearColor,
    radius: Number,
    numSides: Number,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawWireSphereAutoSides")
  public open fun drawWireSphereAutoSides(
    base: Vector,
    color: LinearColor,
    radius: Number,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawWireSphereAutoSides2")
  public open fun drawWireSphereAutoSides2(
    transform: Transform,
    color: LinearColor,
    radius: Number,
    depthPriority: String,
    thickness: Number,
    depthBias: Number,
    screenSpace: Boolean,
  ): Unit

  @JsName("DrawWireSphereCappedCone")
  public open fun drawWireSphereCappedCone(
    transform: Transform,
    coneRadius: Number,
    coneAngle: Number,
    coneSides: Number,
    arcFrequency: Number,
    capSegments: Number,
    color: LinearColor,
    depthPriority: String,
  ): Unit

  @JsName("DrawWireStar")
  public open fun drawWireStar(
    position: Vector,
    size: Number,
    color: LinearColor,
    depthPriority: String,
  ): Unit

  @JsName("SetHitProxy")
  public open fun setHitProxy(name: String): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptPdi

    @JsName("C")
    public fun copy(other: Any): JavascriptPdi

    @JsName("DrawArc")
    public fun drawArc(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      minAngle: Number,
      maxAngle: Number,
      radius: Number,
      sections: Number,
      color: LinearColor,
      depthPriority: String,
    ): Unit

    @JsName("DrawCircle")
    public fun drawCircle(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      color: LinearColor,
      radius: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawConnectedArrow")
    public fun drawConnectedArrow(
      PDI: JavascriptPdi,
      arrowToWorld: Transform,
      color: LinearColor,
      arrowHeight: Number,
      arrowWidth: Number,
      depthPriority: String,
      thickness: Number,
      numSpokes: Number,
    ): Unit

    @JsName("DrawDashedLine")
    public fun drawDashedLine(
      PDI: JavascriptPdi,
      start: Vector,
      end: Vector,
      color: LinearColor,
      dashSize: Number,
      depthPriority: String,
      depthBias: Number,
    ): Unit

    @JsName("DrawDirectionalArrow")
    public fun drawDirectionalArrow(
      PDI: JavascriptPdi,
      arrowToWorld: Transform,
      inColor: LinearColor,
      length: Number,
      arrowSize: Number,
      depthPriority: String,
      thickness: Number,
    ): Unit

    @JsName("DrawOrientedWireBox")
    public fun drawOrientedWireBox(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      z: Vector,
      extent: Vector,
      color: LinearColor,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawPolygon")
    public fun drawPolygon(
      PDI: JavascriptPdi,
      verts: Array<Vector>,
      inColor: LinearColor,
      depthPriority: String,
      rhiFeatureLevel: String,
    ): Unit

    @JsName("DrawWireBox")
    public fun drawWireBox(
      PDI: JavascriptPdi,
      box: Box,
      color: LinearColor,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireBox2")
    public fun drawWireBox2(
      PDI: JavascriptPdi,
      matrix: Transform,
      box: Box,
      color: LinearColor,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireCapsule")
    public fun drawWireCapsule(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      z: Vector,
      color: LinearColor,
      radius: Number,
      halfHeight: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireChoppedCone")
    public fun drawWireChoppedCone(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      z: Vector,
      color: LinearColor,
      radius: Number,
      topRadius: Number,
      halfHeight: Number,
      numSides: Number,
      depthPriority: String,
    ): Unit

    @JsName("DrawWireCone")
    public fun drawWireCone(
      PDI: JavascriptPdi,
      verts: Array<Vector>,
      transform: Transform,
      coneRadius: Number,
      coneAngle: Number,
      coneSides: Number,
      color: LinearColor,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): VertsProvider

    @JsName("DrawWireCylinder")
    public fun drawWireCylinder(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      z: Vector,
      color: LinearColor,
      radius: Number,
      halfHeight: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireDiamond")
    public fun drawWireDiamond(
      PDI: JavascriptPdi,
      transform: Transform,
      size: Number,
      inColor: LinearColor,
      depthPriority: String,
    ): Unit

    @JsName("DrawWireSphere")
    public fun drawWireSphere(
      PDI: JavascriptPdi,
      base: Vector,
      color: LinearColor,
      radius: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireSphere2")
    public fun drawWireSphere2(
      PDI: JavascriptPdi,
      transform: Transform,
      color: LinearColor,
      radius: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireSphereAutoSides")
    public fun drawWireSphereAutoSides(
      PDI: JavascriptPdi,
      base: Vector,
      color: LinearColor,
      radius: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireSphereAutoSides2")
    public fun drawWireSphereAutoSides2(
      PDI: JavascriptPdi,
      transform: Transform,
      color: LinearColor,
      radius: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireSphereCappedCone")
    public fun drawWireSphereCappedCone(
      PDI: JavascriptPdi,
      transform: Transform,
      coneRadius: Number,
      coneAngle: Number,
      coneSides: Number,
      arcFrequency: Number,
      capSegments: Number,
      color: LinearColor,
      depthPriority: String,
    ): Unit

    @JsName("DrawWireStar")
    public fun drawWireStar(
      PDI: JavascriptPdi,
      position: Vector,
      size: Number,
      color: LinearColor,
      depthPriority: String,
    ): Unit

    @JsName("SetHitProxy")
    public fun setHitProxy(PDI: JavascriptPdi, name: String): Unit
  }
}

public open external class JavascriptExtensibilityManager {
  public open fun clone(): JavascriptExtensibilityManager

  @JsName("AddExtender")
  public open fun addExtender(extender: JavascriptExtender): Unit

  @JsName("AddLazyExtender")
  public open fun addLazyExtender(delegates: JavascriptLazyExtenderDelegates): Unit

  @JsName("RemoveAllLazyExtender")
  public open fun removeAllLazyExtender(): Unit

  @JsName("RemoveExtender")
  public open fun removeExtender(extender: JavascriptExtender): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptExtensibilityManager

    @JsName("C")
    public fun copy(other: Any): JavascriptExtensibilityManager

    @JsName("AddExtender")
    public fun addExtender(manager: JavascriptExtensibilityManager, extender: JavascriptExtender):
        Unit

    @JsName("AddLazyExtender")
    public fun addLazyExtender(manager: JavascriptExtensibilityManager,
        delegates: JavascriptLazyExtenderDelegates): Unit

    @JsName("RemoveAllLazyExtender")
    public fun removeAllLazyExtender(manager: JavascriptExtensibilityManager): Unit

    @JsName("RemoveExtender")
    public fun removeExtender(manager: JavascriptExtensibilityManager,
        extender: JavascriptExtender): Unit

    @JsName("GetMenuExtensibilityManager")
    public fun getMenuExtensibilityManager(what: String): JavascriptExtensibilityManager

    @JsName("GetToolBarExtensibilityManager")
    public fun getToolBarExtensibilityManager(what: String): JavascriptExtensibilityManager
  }
}

public open external class JavascriptViewportClick {
  public open fun clone(): JavascriptViewportClick

  @JsName("GetClickPos")
  public open fun getClickPos(): IntPoint

  @JsName("GetDirection")
  public open fun getDirection(): Vector

  @JsName("GetEvent")
  public open fun getEvent(): String

  @JsName("GetKey")
  public open fun getKey(): Key

  @JsName("GetOrigin")
  public open fun getOrigin(): Vector

  @JsName("IsAltDown")
  public open fun isAltDown(): Boolean

  @JsName("IsControlDown")
  public open fun isControlDown(): Boolean

  @JsName("IsShiftDown")
  public open fun isShiftDown(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptViewportClick

    @JsName("C")
    public fun copy(other: Any): JavascriptViewportClick

    @JsName("GetClickPos")
    public fun getClickPos(click: JavascriptViewportClick): IntPoint

    @JsName("GetDirection")
    public fun getDirection(click: JavascriptViewportClick): Vector

    @JsName("GetEvent")
    public fun getEvent(click: JavascriptViewportClick): String

    @JsName("GetKey")
    public fun getKey(click: JavascriptViewportClick): Key

    @JsName("GetOrigin")
    public fun getOrigin(click: JavascriptViewportClick): Vector

    @JsName("IsAltDown")
    public fun isAltDown(click: JavascriptViewportClick): Boolean

    @JsName("IsControlDown")
    public fun isControlDown(click: JavascriptViewportClick): Boolean

    @JsName("IsShiftDown")
    public fun isShiftDown(click: JavascriptViewportClick): Boolean
  }
}

public open external class JavascriptHitProxy {
  public open fun clone(): JavascriptHitProxy

  @JsName("GetActor")
  public open fun getActor(): Actor

  @JsName("GetName")
  public open fun getName(): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptHitProxy

    @JsName("C")
    public fun copy(other: Any): JavascriptHitProxy

    @JsName("GetActor")
    public fun getActor(proxy: JavascriptHitProxy): Actor

    @JsName("GetName")
    public fun getName(proxy: JavascriptHitProxy): String
  }
}

public open external class JavascriptEditorObjectManager(
  outer: UObject,
) : UObject {
  @JsName("SetStructRef")
  public open fun setStructRef(
    key: String,
    value: UnrealEngineClass,
    override: Boolean,
  ): Boolean

  @JsName("SetRef")
  public open fun setRef(
    key: String,
    value: UnrealEngineClass,
    override: Boolean,
  ): Boolean

  @JsName("SetObject")
  public open fun setObject(key: String, value: UObject): Boolean

  @JsName("RemoveStructRef")
  public open fun removeStructRef(key: String): Unit

  @JsName("RemoveRef")
  public open fun removeRef(key: String): Unit

  @JsName("RemoveObjects")
  public open fun removeObjects(key: String): Unit

  @JsName("HasStructRef")
  public open fun hasStructRef(key: String): Boolean

  @JsName("HasRef")
  public open fun hasRef(key: String): Boolean

  @JsName("GetStructRef")
  public open fun getStructRef(key: String): ScriptStruct

  @JsName("GetRef")
  public open fun getRef(key: String): UnrealEngineClass

  @JsName("GetObjects")
  public open fun getObjects(key: String): Array<UObject>

  @JsName("GetObjectKeys")
  public open fun getObjectKeys(): Array<String>

  @JsName("Clear")
  public open fun clear(withClass: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorObjectManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorObjectManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorObjectManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorObjectManager

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorObjectManager

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorObjectManager
  }
}

@JsName("EJavascriptMessageSeverity")
public external object JavascriptMessageSeverity {
  public var CriticalError: String

  public var Error: String

  public var PerformanceWarning: String

  public var Warning: String

  public var Info: String

  @JsName("EJavascriptMessageSeverity_MAX")
  public var Max: String
}

@JsName("T$503")
public external interface Object503 {
  @JsName("SweepHitResult")
  public var sweepHitResult: HitResult

  @JsName("$")
  public var value: Boolean
}

@JsName("T$506")
public external interface Object506 {
  @JsName("Data")
  public var data: String

  @JsName("$")
  public var value: Boolean
}

@JsName("T$507")
public external interface Object507 {
  @JsName("FileData")
  public var fileData: Array<Number>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$508")
public external interface Object508 {
  @JsName("Out")
  public var out: Array<UObject>

  @JsName("$")
  public var value: Number
}

@JsName("T$509")
public external interface Object509 {
  @JsName("MinX")
  public var minX: Number

  @JsName("MinY")
  public var minY: Number

  @JsName("MaxX")
  public var maxX: Number

  @JsName("MaxY")
  public var maxY: Number

  @JsName("$")
  public var value: Boolean
}

public open external class JavascriptEditorLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorLibrary

    @JsName("UpdateModelComponents")
    public fun updateModelComponents(level: Level): Unit

    @JsName("ToggleSelect")
    public fun toggleSelect(uSelection: USelection, inObject: UObject): Unit

    @JsName("ToggleIsExecuteTestModePIE")
    public fun toggleIsExecuteTestModePie(): Boolean

    @JsName("SetIsTemporarilyHiddenInEditor")
    public fun setIsTemporarilyHiddenInEditor(actor: Actor, isHidden: Boolean): Unit

    @JsName("SetHitProxy")
    public fun setHitProxy(PDI: JavascriptPdi, name: String): Unit

    @JsName("SetHeightmapDataFromMemory")
    public fun setHeightmapDataFromMemory(
      landscapeInfo: LandscapeInfo,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
    ): Unit

    @JsName("SetFolderPath_Recursively")
    public fun setFolderPathRecursively(actor: Actor, newFolderPath: String): Unit

    @JsName("SetFolderPath")
    public fun setFolderPath(actor: Actor, newFolderPath: String): Unit

    @JsName("SetAlphamapDataFromMemory")
    public fun setAlphamapDataFromMemory(
      landscapeInfo: LandscapeInfo,
      layerInfo: LandscapeLayerInfoObject,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
      paintingRestriction: String,
    ): Unit

    @JsName("SetActorLocation")
    public fun setActorLocation(
      actor: Actor,
      newLocation: Vector,
      sweep: Boolean,
      sweepHitResult: HitResult,
      teleport: Boolean,
    ): Object503

    @JsName("SetActorLabelUnique")
    public fun setActorLabelUnique(
      actor: Actor,
      newActorLabel: String,
      inExistingActorLabels: Array<String>,
    ): Unit

    @JsName("SetActorLabel")
    public fun setActorLabel(
      actor: Actor,
      newActorLabel: String,
      markDirty: Boolean,
    ): Unit

    @JsName("Select")
    public fun select(uSelection: USelection, inObject: UObject): Unit

    @JsName("SavePackage")
    public fun savePackage(`package`: Package, filename: String): Boolean

    @JsName("SaveFileDialog")
    public fun saveFileDialog(
      windowHandle: JavascriptWindow,
      dialogTitle: String,
      defaultPath: String,
      defaultFile: String,
      fileTypes: String,
      flags: Number,
      outFilenames: Array<String>,
    ): Object426

    @JsName("RequestEndPlayMapInPIE")
    public fun requestEndPlayMapInPie(): Unit

    @JsName("ReplaceAnimNotifyClass")
    public fun replaceAnimNotifyClass(
      sequence: AnimSequenceBase,
      notifyName: String,
      newNotifyName: String,
      newNotifyClass: UObject,
    ): Number

    @JsName("RemoveLevelInstance")
    public fun removeLevelInstance(world: World): Unit

    @JsName("RemoveExtender")
    public fun removeExtender(manager: JavascriptExtensibilityManager,
        extender: JavascriptExtender): Unit

    @JsName("RemoveComponentFromBlueprint")
    public fun removeComponentFromBlueprint(
      blueprint: Blueprint,
      removeComponent: ActorComponent,
      promoteChildren: Boolean,
    ): Unit

    @JsName("RemoveAllLazyExtender")
    public fun removeAllLazyExtender(manager: JavascriptExtensibilityManager): Unit

    @JsName("PostEditChange")
    public fun postEditChange(inObject: UObject): Unit

    @JsName("OpenFileDialog")
    public fun openFileDialog(
      windowHandle: JavascriptWindow,
      dialogTitle: String,
      defaultPath: String,
      defaultFile: String,
      fileTypes: String,
      flags: Number,
      outFilenames: Array<String>,
    ): Object426

    @JsName("OpenEditorForAssetByPath")
    public fun openEditorForAssetByPath(assetPathName: String, objectName: String): Unit

    @JsName("OpenEditorForAsset")
    public fun openEditorForAsset(asset: UObject): Boolean

    @JsName("OpenDirectoryDialog")
    public fun openDirectoryDialog(
      windowHandle: JavascriptWindow,
      dialogTitle: String,
      defaultPath: String,
      outFolderName: String,
    ): Object425

    @JsName("NotifyUpdateCurveTable")
    public fun notifyUpdateCurveTable(inCurveTable: CurveTable): Unit

    @JsName("ModifyObject")
    public fun modifyObject(uObject: UObject, alwaysMarkDirty: Boolean): Unit

    @JsName("MarkPackageDirty")
    public fun markPackageDirty(inObject: UObject): Boolean

    @JsName("LoadImageFromDiskAsync")
    public fun loadImageFromDiskAsync(imagePath: String, callback: AsyncTaskDownloadImage): Boolean

    @JsName("LoadFileToString")
    public fun loadFileToString(path: String, data: String): Object506

    @JsName("LoadFileToIntArray")
    public fun loadFileToIntArray(path: String, fileData: Array<Number>): Object507

    @JsName("IsShiftDown")
    public fun isShiftDown(click: JavascriptViewportClick): Boolean

    @JsName("IsControlDown")
    public fun isControlDown(click: JavascriptViewportClick): Boolean

    @JsName("IsAssetLoaded")
    public fun isAssetLoaded(assetData: JavascriptAssetData): Boolean

    @JsName("IsAltDown")
    public fun isAltDown(click: JavascriptViewportClick): Boolean

    @JsName("IsActorLabelEditable")
    public fun isActorLabelEditable(actor: Actor): Boolean

    @JsName("IsActive")
    public fun isActive(transactor: Transactor): Boolean

    @JsName("InvalidateModelGeometry")
    public fun invalidateModelGeometry(world: World, inLevel: Level): Unit

    @JsName("HasMetaData")
    public fun hasMetaData(field: Field, key: String): Boolean

    @JsName("GetUniqueID")
    public fun getUniqueId(inObject: UObject): Number

    @JsName("GetTransaction")
    public fun getTransaction(transactor: Transactor, queueIndex: Number): JavascriptTransaction

    @JsName("GetToolBarExtensibilityManager")
    public fun getToolBarExtensibilityManager(what: String): JavascriptExtensibilityManager

    @JsName("GetTitle")
    public fun getTitle(transaction: JavascriptTransaction): String

    @JsName("GetTagValue")
    public fun getTagValue(
      assetData: JavascriptAssetData,
      name: String,
      outValue: String,
    ): Object187

    @JsName("GetSourceControlStatusText")
    public fun getSourceControlStatusText(): String

    @JsName("GetSelectedObjects")
    public fun getSelectedObjects(uSelection: USelection, out: Array<UObject>): Object508

    @JsName("GetRootWindow")
    public fun getRootWindow(): JavascriptSlateWidget

    @JsName("GetQueueLength")
    public fun getQueueLength(transactor: Transactor): Number

    @JsName("GetPrimaryObject")
    public fun getPrimaryObject(transaction: JavascriptTransaction): UObject

    @JsName("GetParentClassOfBlueprint")
    public fun getParentClassOfBlueprint(blueprint: Blueprint): UnrealEngineClass

    @JsName("GetPackage")
    public fun getPackage(assetData: JavascriptAssetData): Package

    @JsName("GetOrigin")
    public fun getOrigin(click: JavascriptViewportClick): Vector

    @JsName("GetName")
    public fun getName(proxy: JavascriptHitProxy): String

    @JsName("GetMenuExtensibilityManager")
    public fun getMenuExtensibilityManager(what: String): JavascriptExtensibilityManager

    @JsName("GetLevelEditorActions")
    public fun getLevelEditorActions(): JavascriptUiCommandList

    @JsName("GetLayerInfoByName")
    public fun getLayerInfoByName(
      landscapeInfo: LandscapeInfo,
      layerName: String,
      owner: LandscapeProxy,
    ): LandscapeLayerInfoObject

    @JsName("GetLandscapeInfo")
    public fun getLandscapeInfo(landscape: Landscape, spawnNewActor: Boolean): LandscapeInfo

    @JsName("GetLandscapeExtent")
    public fun getLandscapeExtent(
      landscapeInfo: LandscapeInfo,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
    ): Object509

    @JsName("GetKeyNameByKeyEvent")
    public fun getKeyNameByKeyEvent(event: KeyEvent): String

    @JsName("GetKey")
    public fun getKey(click: JavascriptViewportClick): Key

    @JsName("GetIsShiftDownByKeyEvent")
    public fun getIsShiftDownByKeyEvent(event: KeyEvent): Boolean

    @JsName("GetIsExecuteTestModePIE")
    public fun getIsExecuteTestModePie(): Boolean

    @JsName("GetIsControlDownByKeyEvent")
    public fun getIsControlDownByKeyEvent(event: KeyEvent): Boolean

    @JsName("GetIsAltDownByKeyEvent")
    public fun getIsAltDownByKeyEvent(event: KeyEvent): Boolean

    @JsName("GetIPAddress")
    public fun getIpAddress(): String

    @JsName("GetHostName")
    public fun getHostName(): String

    @JsName("GetHeightmapDataToMemory")
    public fun getHeightmapDataToMemory(
      landscapeInfo: LandscapeInfo,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
    ): Unit

    @JsName("GetGroup")
    public fun getGroup(name: String): JavascriptWorkspaceItem

    @JsName("GetFolderPath")
    public fun getFolderPath(actor: Actor): String

    @JsName("GetEvent")
    public fun getEvent(click: JavascriptViewportClick): String

    @JsName("GetEngine")
    public fun getEngine(): EditorEngine

    @JsName("GetEditorPlayWorld")
    public fun getEditorPlayWorld(): World

    @JsName("GetEditorObjectManager")
    public fun getEditorObjectManager(): JavascriptEditorObjectManager

    @JsName("GetDirection")
    public fun getDirection(click: JavascriptViewportClick): Vector

    @JsName("GetDefaultBrush")
    public fun getDefaultBrush(world: World): Brush

    @JsName("GetDataTableAsJSON")
    public fun getDataTableAsJson(inDataTable: DataTable, inDtExportFlags: Number): String

    @JsName("GetContext")
    public fun getContext(transaction: JavascriptTransaction): String

    @JsName("GetClickPos")
    public fun getClickPos(click: JavascriptViewportClick): IntPoint

    @JsName("GetClass")
    public fun getClass(assetData: JavascriptAssetData): UnrealEngineClass

    @JsName("GetAverageMS")
    public fun getAverageMs(): Number

    @JsName("GetAverageFPS")
    public fun getAverageFps(): Number

    @JsName("GetAssetsByType")
    public fun getAssetsByType(types: Array<String>, recursiveClasses: Boolean): Array<AssetData>

    @JsName("GetAsset")
    public fun getAsset(assetData: JavascriptAssetData): UObject

    @JsName("GetAlphamapDataToMemory")
    public fun getAlphamapDataToMemory(
      landscapeInfo: LandscapeInfo,
      layerInfo: LandscapeLayerInfoObject,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
    ): Unit

    @JsName("GetAllTags")
    public fun getAllTags(assetData: JavascriptAssetData, outArray: Array<String>):
        StringArrayProvider

    @JsName("GetActorRotation")
    public fun getActorRotation(actor: Actor): Rotator

    @JsName("GetActorLocation")
    public fun getActorLocation(actor: Actor): Vector

    @JsName("GetActorLabel")
    public fun getActorLabel(actor: Actor): String

    @JsName("GetActor")
    public fun getActor(proxy: JavascriptHitProxy): Actor

    @JsName("FromStringTable")
    public fun fromStringTable(inTableId: String, inKey: String): JavascriptTextProperty

    @JsName("FindWorldInPackage")
    public fun findWorldInPackage(`package`: Package): World

    @JsName("ExportNavigation")
    public fun exportNavigation(inWorld: World, path: String): String

    @JsName("EditorExec")
    public fun editorExec(world: World, cmd: String): Boolean

    @JsName("EditorDestroyActor")
    public fun editorDestroyActor(
      world: World,
      actor: Actor,
      shouldModifyLevel: Boolean,
    ): Boolean

    @JsName("EditorAddModalWindow")
    public fun editorAddModalWindow(widget: JavascriptSlateWidget): Unit

    @JsName("DrawWireStar")
    public fun drawWireStar(
      PDI: JavascriptPdi,
      position: Vector,
      size: Number,
      color: LinearColor,
      depthPriority: String,
    ): Unit

    @JsName("DrawWireSphereCappedCone")
    public fun drawWireSphereCappedCone(
      PDI: JavascriptPdi,
      transform: Transform,
      coneRadius: Number,
      coneAngle: Number,
      coneSides: Number,
      arcFrequency: Number,
      capSegments: Number,
      color: LinearColor,
      depthPriority: String,
    ): Unit

    @JsName("DrawWireSphereAutoSides2")
    public fun drawWireSphereAutoSides2(
      PDI: JavascriptPdi,
      transform: Transform,
      color: LinearColor,
      radius: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireSphereAutoSides")
    public fun drawWireSphereAutoSides(
      PDI: JavascriptPdi,
      base: Vector,
      color: LinearColor,
      radius: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireSphere2")
    public fun drawWireSphere2(
      PDI: JavascriptPdi,
      transform: Transform,
      color: LinearColor,
      radius: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireSphere")
    public fun drawWireSphere(
      PDI: JavascriptPdi,
      base: Vector,
      color: LinearColor,
      radius: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireDiamond")
    public fun drawWireDiamond(
      PDI: JavascriptPdi,
      transform: Transform,
      size: Number,
      inColor: LinearColor,
      depthPriority: String,
    ): Unit

    @JsName("DrawWireCylinder")
    public fun drawWireCylinder(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      z: Vector,
      color: LinearColor,
      radius: Number,
      halfHeight: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireCone")
    public fun drawWireCone(
      PDI: JavascriptPdi,
      verts: Array<Vector>,
      transform: Transform,
      coneRadius: Number,
      coneAngle: Number,
      coneSides: Number,
      color: LinearColor,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): VertsProvider

    @JsName("DrawWireChoppedCone")
    public fun drawWireChoppedCone(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      z: Vector,
      color: LinearColor,
      radius: Number,
      topRadius: Number,
      halfHeight: Number,
      numSides: Number,
      depthPriority: String,
    ): Unit

    @JsName("DrawWireCapsule")
    public fun drawWireCapsule(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      z: Vector,
      color: LinearColor,
      radius: Number,
      halfHeight: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireBox2")
    public fun drawWireBox2(
      PDI: JavascriptPdi,
      matrix: Transform,
      box: Box,
      color: LinearColor,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawWireBox")
    public fun drawWireBox(
      PDI: JavascriptPdi,
      box: Box,
      color: LinearColor,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawPolygon")
    public fun drawPolygon(
      PDI: JavascriptPdi,
      verts: Array<Vector>,
      inColor: LinearColor,
      depthPriority: String,
      rhiFeatureLevel: String,
    ): Unit

    @JsName("DrawOrientedWireBox")
    public fun drawOrientedWireBox(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      z: Vector,
      extent: Vector,
      color: LinearColor,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawDirectionalArrow")
    public fun drawDirectionalArrow(
      PDI: JavascriptPdi,
      arrowToWorld: Transform,
      inColor: LinearColor,
      length: Number,
      arrowSize: Number,
      depthPriority: String,
      thickness: Number,
    ): Unit

    @JsName("DrawDashedLine")
    public fun drawDashedLine(
      PDI: JavascriptPdi,
      start: Vector,
      end: Vector,
      color: LinearColor,
      dashSize: Number,
      depthPriority: String,
      depthBias: Number,
    ): Unit

    @JsName("DrawConnectedArrow")
    public fun drawConnectedArrow(
      PDI: JavascriptPdi,
      arrowToWorld: Transform,
      color: LinearColor,
      arrowHeight: Number,
      arrowWidth: Number,
      depthPriority: String,
      thickness: Number,
      numSpokes: Number,
    ): Unit

    @JsName("DrawCircle")
    public fun drawCircle(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      color: LinearColor,
      radius: Number,
      numSides: Number,
      depthPriority: String,
      thickness: Number,
      depthBias: Number,
      screenSpace: Boolean,
    ): Unit

    @JsName("DrawArc")
    public fun drawArc(
      PDI: JavascriptPdi,
      base: Vector,
      x: Vector,
      y: Vector,
      minAngle: Number,
      maxAngle: Number,
      radius: Number,
      sections: Number,
      color: LinearColor,
      depthPriority: String,
    ): Unit

    @JsName("DeselectAll")
    public fun deselectAll(uSelection: USelection, inClass: UnrealEngineClass): Unit

    @JsName("Deselect")
    public fun deselect(uSelection: USelection, inObject: UObject): Unit

    @JsName("DeletePackage")
    public fun deletePackage(`package`: Package): Boolean

    public fun csgAdd(
      defaultBrush: Brush,
      polyFlags: Number,
      brushType: String,
    ): Brush

    @JsName("CreatePropertyEditorToolkit")
    public fun createPropertyEditorToolkit(objectsForPropertiesMenu: Array<UObject>): Unit

    @JsName("CreateLogListingWidget")
    public fun createLogListingWidget(inLogName: String): JavascriptSlateWidget

    @JsName("CreateLogListing")
    public fun createLogListing(inLogName: String, inLabel: String): Unit

    @JsName("CreateBrushForVolumeActor")
    public fun createBrushForVolumeActor(newActor: Volume, brushBuilder: BrushBuilder): Unit

    @JsName("ConditionalBeginDestroybyUObject")
    public fun conditionalBeginDestroybyUObject(targetObject: UObject): Boolean

    @JsName("CompileBlueprint")
    public fun compileBlueprint(blueprint: Blueprint): Unit

    @JsName("ClearActorLabel")
    public fun clearActorLabel(actor: Actor): Unit

    @JsName("CheckActivatedStatGroup")
    public fun checkActivatedStatGroup(groupName: String): Boolean

    @JsName("Build")
    public fun build(
      builder: BrushBuilder,
      inWorld: World,
      inBrush: Brush,
    ): Boolean

    @JsName("BroadcastHotReload")
    public fun broadcastHotReload(): Unit

    @JsName("BroadcastAssetCreated")
    public fun broadcastAssetCreated(newAsset: UObject): Unit

    @JsName("AddWhitelistedObject")
    public fun addWhitelistedObject(inObject: UObject): Unit

    @JsName("AddRichCurve")
    public fun addRichCurve(
      inCurveTable: CurveTable,
      key: String,
      inCurve: RichCurve,
    ): Unit

    @JsName("AddLogListingMessage")
    public fun addLogListingMessage(
      inLogName: String,
      inSeverity: String,
      logText: String,
    ): Unit

    @JsName("AddLazyExtender")
    public fun addLazyExtender(manager: JavascriptExtensibilityManager,
        delegates: JavascriptLazyExtenderDelegates): Unit

    @JsName("AddGroup")
    public fun addGroup(parent: JavascriptWorkspaceItem, displayName: String):
        JavascriptWorkspaceItem

    @JsName("AddExtender")
    public fun addExtender(manager: JavascriptExtensibilityManager, extender: JavascriptExtender):
        Unit

    @JsName("AddComponentsToBlueprint")
    public fun addComponentsToBlueprint(
      blueprint: Blueprint,
      components: Array<ActorComponent>,
      harvesting: Boolean,
      optionalNewRootComponent: ActorComponent,
      keepMobility: Boolean,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorLibrary
  }
}

public open external class JavascriptEditorPopupWindow(
  outer: UObject,
) : UObject {
  @JsName("Widget")
  public open var widget: Widget

  @JsName("Open")
  public open fun open(heading: String, desiredSize: Vector2d): Boolean

  @JsName("OnDismissed")
  public open fun onDismissed(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorPopupWindow

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorPopupWindow

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorPopupWindow

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorPopupWindow

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorPopupWindow

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorPopupWindow
  }
}

public open external class JavascriptEditorTabManager(
  outer: UObject,
) : Widget {
  @JsName("Layout")
  public open var layout: String

  @JsName("Tabs")
  public open var tabs: Array<JavascriptEditorTab>

  @JsName("InvokeTab")
  public open fun invokeTab(searchForTabId: String): Unit

  @JsName("InsertNewTab")
  public open fun insertNewTab(
    placeholderId: String,
    searchForTabId: String,
    newTab: JavascriptEditorTab,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorTabManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorTabManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorTabManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorTabManager

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorTabManager

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorTabManager
  }
}

public open external class JavascriptEditorTick(
  outer: UObject,
) : UObject {
  @JsName("OnTick")
  public open var onTick: UnrealEngineDelegate<(DeltaSeconds: Number) -> Unit>

  @JsName("GetEngine")
  public open fun getEngine(): EditorEngine

  @JsName("ForceTick")
  public open fun forceTick(deltaTime: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorTick

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorTick

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorTick

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorTick

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorTick

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorTick
  }
}

public open external class JavascriptEditorToolbar(
  outer: UObject,
) : Widget {
  @JsName("OnHook")
  public open var onHook: UnrealEngineDelegate<() -> JavascriptMenuBuilder>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorToolbar

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorToolbar

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorToolbar

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorToolbar

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorToolbar

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorToolbar
  }
}

public open external class JavascriptInputEventState {
  public open fun clone(): JavascriptInputEventState

  @JsName("GetInputEvent")
  public open fun getInputEvent(): String

  @JsName("GetKey")
  public open fun getKey(): Key

  @JsName("IsAltButtonEvent")
  public open fun isAltButtonEvent(): Boolean

  @JsName("IsAltButtonPressed")
  public open fun isAltButtonPressed(): Boolean

  @JsName("IsAnyMouseButtonDown")
  public open fun isAnyMouseButtonDown(): Boolean

  @JsName("IsButtonPressed")
  public open fun isButtonPressed(inKey: Key): Boolean

  @JsName("IsCtrlButtonEvent")
  public open fun isCtrlButtonEvent(): Boolean

  @JsName("IsCtrlButtonPressed")
  public open fun isCtrlButtonPressed(): Boolean

  @JsName("IsLeftMouseButtonPressed")
  public open fun isLeftMouseButtonPressed(): Boolean

  @JsName("IsMiddleMouseButtonPressed")
  public open fun isMiddleMouseButtonPressed(): Boolean

  @JsName("IsMouseButtonEvent")
  public open fun isMouseButtonEvent(): Boolean

  @JsName("IsRightMouseButtonPressed")
  public open fun isRightMouseButtonPressed(): Boolean

  @JsName("IsShiftButtonEvent")
  public open fun isShiftButtonEvent(): Boolean

  @JsName("IsShiftButtonPressed")
  public open fun isShiftButtonPressed(): Boolean

  @JsName("IsSpaceBarPressed")
  public open fun isSpaceBarPressed(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptInputEventState

    @JsName("C")
    public fun copy(other: Any): JavascriptInputEventState

    @JsName("GetInputEvent")
    public fun getInputEvent(inputEvent: JavascriptInputEventState): String

    @JsName("GetKey")
    public fun getKey(inputEvent: JavascriptInputEventState): Key

    @JsName("IsAltButtonEvent")
    public fun isAltButtonEvent(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsAltButtonPressed")
    public fun isAltButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsAnyMouseButtonDown")
    public fun isAnyMouseButtonDown(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsButtonPressed")
    public fun isButtonPressed(inputEvent: JavascriptInputEventState, inKey: Key): Boolean

    @JsName("IsCtrlButtonEvent")
    public fun isCtrlButtonEvent(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsCtrlButtonPressed")
    public fun isCtrlButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsLeftMouseButtonPressed")
    public fun isLeftMouseButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsMiddleMouseButtonPressed")
    public fun isMiddleMouseButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsMouseButtonEvent")
    public fun isMouseButtonEvent(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsRightMouseButtonPressed")
    public fun isRightMouseButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsShiftButtonEvent")
    public fun isShiftButtonEvent(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsShiftButtonPressed")
    public fun isShiftButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsSpaceBarPressed")
    public fun isSpaceBarPressed(inputEvent: JavascriptInputEventState): Boolean
  }
}

@JsName("EJavascriptWidgetMode")
public external object JavascriptWidgetMode {
  @JsName("WM_Translate")
  public var Translate: String

  @JsName("WM_TranslateRotateZ")
  public var TranslateRotateZ: String

  @JsName("WM_2D")
  public var TwoD: String

  @JsName("WM_Rotate")
  public var Rotate: String

  @JsName("WM_Scale")
  public var Scale: String

  @JsName("WM_Max")
  public var Max: String

  @JsName("WM_None")
  public var None: String
}

@JsName("T$512")
public external interface OutScreenPositionProvider {
  @JsName("OutScreenPosition")
  public var outScreenPosition: Vector2d
}

@JsName("T$513")
public external interface Object513 {
  @JsName("OutRayOrigin")
  public var outRayOrigin: Vector

  @JsName("OutRayDirection")
  public var outRayDirection: Vector
}

public open external class JavascriptEditorViewport(
  outer: UObject,
) : PanelWidget {
  @JsName("OnClick")
  public open var onClick: UnrealEngineDelegate<(
    ViewportClick: JavascriptViewportClick,
    HitProxy: JavascriptHitProxy,
    Instance: JavascriptEditorViewport,
  ) -> Unit>

  @JsName("OnTrackingStarted")
  public open var onTrackingStarted: UnrealEngineDelegate<(
    InputState: JavascriptInputEventState,
    bIsDraggingWidget: Boolean,
    bNudge: Boolean,
    Instance: JavascriptEditorViewport,
  ) -> Unit>

  @JsName("OnTrackingStopped")
  public open var onTrackingStopped:
      UnrealEngineDelegate<(Instance: JavascriptEditorViewport) -> Unit>

  @JsName("OnInputWidgetDelta")
  public open var onInputWidgetDelta: UnrealEngineDelegate<(
    Drag: Vector,
    Rot: Rotator,
    Scale: Vector,
    Instance: JavascriptEditorViewport,
  ) -> Boolean>

  @JsName("OnInputKey")
  public open var onInputKey: UnrealEngineDelegate<(
    ControllerId: Number,
    Key: Key,
    Event: String,
    Instance: JavascriptEditorViewport,
  ) -> Boolean>

  @JsName("OnInputAxis")
  public open var onInputAxis: UnrealEngineDelegate<(
    ControllerId: Number,
    Key: Key,
    Delta: Number,
    DeltaTime: Number,
    Instance: JavascriptEditorViewport,
  ) -> Boolean>

  @JsName("OnMouseEnter")
  public open var onMouseEnter: UnrealEngineDelegate<(
    X: Number,
    Y: Number,
    Instance: JavascriptEditorViewport,
  ) -> Boolean>

  @JsName("OnMouseMove")
  public open var onMouseMove: UnrealEngineDelegate<(
    X: Number,
    Y: Number,
    Instance: JavascriptEditorViewport,
  ) -> Boolean>

  @JsName("OnMouseLeave")
  public open var onMouseLeave:
      UnrealEngineDelegate<(Instance: JavascriptEditorViewport) -> Boolean>

  @JsName("OnDraw")
  public open var onDraw: UnrealEngineDelegate<(PDI: JavascriptPdi,
      Instance: JavascriptEditorViewport) -> Unit>

  @JsName("OnDrawCanvas")
  public open var onDrawCanvas: UnrealEngineDelegate<(Canvas: Canvas,
      Instance: JavascriptEditorViewport) -> Unit>

  @JsName("OnGetWidgetLocation")
  public open var onGetWidgetLocation:
      UnrealEngineDelegate<(Instance: JavascriptEditorViewport) -> Vector>

  @JsName("OnGetWidgetRotation")
  public open var onGetWidgetRotation:
      UnrealEngineDelegate<(Instance: JavascriptEditorViewport) -> Rotator>

  @JsName("OnGetWidgetMode")
  public open var onGetWidgetMode:
      UnrealEngineDelegate<(Instance: JavascriptEditorViewport) -> String>

  @JsName("SetWidgetMode")
  public open fun setWidgetMode(widgetMode: String): Unit

  @JsName("SetViewRotation")
  public open fun setViewRotation(viewRotation: Rotator): Unit

  @JsName("SetViewportType")
  public open fun setViewportType(inViewportType: String): Unit

  @JsName("SetViewMode")
  public open fun setViewMode(inViewModeIndex: String): Unit

  @JsName("SetViewLocation")
  public open fun setViewLocation(viewLocation: Vector): Unit

  @JsName("SetViewFOV")
  public open fun setViewFov(inViewFov: Number): Unit

  @JsName("SetSkyBrightness")
  public open fun setSkyBrightness(skyBrightness: Number): Unit

  @JsName("SetSimulatePhysics")
  public open fun setSimulatePhysics(shouldSimulatePhysics: Boolean): Unit

  @JsName("SetRealtime")
  public open fun setRealtime(inRealtime: Boolean, storeCurrentValue: Boolean): Unit

  @JsName("SetProfileIndex")
  public open fun setProfileIndex(inProfileIndex: Number): Unit

  @JsName("SetLightLocation")
  public open fun setLightLocation(inLightPos: Vector): Unit

  @JsName("SetLightDirection")
  public open fun setLightDirection(inLightDir: Rotator): Unit

  @JsName("SetLightColor")
  public open fun setLightColor(lightColor: Color): Unit

  @JsName("SetLightBrightness")
  public open fun setLightBrightness(lightBrightness: Number): Unit

  @JsName("SetFloorOffset")
  public open fun setFloorOffset(inFloorOffset: Number): Unit

  @JsName("SetEngineShowFlags")
  public open fun setEngineShowFlags(`in`: String): Boolean

  @JsName("SetCameraSpeedSetting")
  public open fun setCameraSpeedSetting(speedSetting: Number): Unit

  @JsName("SetBackgroundColor")
  public open fun setBackgroundColor(backgroundColor: LinearColor): Unit

  @JsName("Redraw")
  public open fun redraw(): Unit

  @JsName("ProjectWorldToScreen")
  public open fun projectWorldToScreen(worldPosition: Vector, outScreenPosition: Vector2d):
      OutScreenPositionProvider

  @JsName("OverridePostProcessSettings")
  public open fun overridePostProcessSettings(postProcessSettings: PostProcessSettings,
      weight: Number): Unit

  @JsName("GetWidgetMode")
  public open fun getWidgetMode(): String

  @JsName("GetViewRotation")
  public open fun getViewRotation(): Rotator

  @JsName("GetViewportWorld")
  public open fun getViewportWorld(): World

  @JsName("GetViewLocation")
  public open fun getViewLocation(): Vector

  @JsName("GetViewFOV")
  public open fun getViewFov(): Number

  @JsName("GetSkyComponent")
  public open fun getSkyComponent(): StaticMeshComponent

  @JsName("GetFloorMeshComponent")
  public open fun getFloorMeshComponent(): StaticMeshComponent

  @JsName("GetEngineShowFlags")
  public open fun getEngineShowFlags(): String

  @JsName("GetDefaultSphereReflectionComponent")
  public open fun getDefaultSphereReflectionComponent(): SphereReflectionCaptureComponent

  @JsName("GetDefaultSkySphereComponent")
  public open fun getDefaultSkySphereComponent(): StaticMeshComponent

  @JsName("GetDefaultSkyLightComponent")
  public open fun getDefaultSkyLightComponent(): SkyLightComponent

  @JsName("GetDefaultPostProcessComponent")
  public open fun getDefaultPostProcessComponent(): PostProcessComponent

  @JsName("GetDefaultInstancedSkyMaterial")
  public open fun getDefaultInstancedSkyMaterial(): MaterialInstanceConstant

  @JsName("GetDefaultDirectionalLightComponent")
  public open fun getDefaultDirectionalLightComponent(): DirectionalLightComponent

  @JsName("GetDefaultAssetViewerSettings")
  public open fun getDefaultAssetViewerSettings(): AssetViewerSettings

  @JsName("GetCurrentProfileIndex")
  public open fun getCurrentProfileIndex(): Number

  @JsName("GetCameraSpeedSetting")
  public open fun getCameraSpeedSetting(): Number

  @JsName("DeprojectScreenToWorld")
  public open fun deprojectScreenToWorld(
    screenPosition: Vector2d,
    outRayOrigin: Vector,
    outRayDirection: Vector,
  ): Object513

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEditorViewport

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEditorViewport

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEditorViewport

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEditorViewport

    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorViewport

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorViewport
  }
}

public open external class JavascriptEdViewport {
  public open fun clone(): JavascriptEdViewport

  @JsName("GetHitProxy")
  public open fun getHitProxy(): JavascriptHitProxy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptEdViewport

    @JsName("C")
    public fun copy(other: Any): JavascriptEdViewport

    @JsName("GetHitProxy")
    public fun getHitProxy(viewport: JavascriptEdViewport): JavascriptHitProxy
  }
}

@JsName("T$514")
public external interface ToolsProvider {
  @JsName("Tools")
  public var tools: JavascriptEditorModeTools
}

@JsName("T$515")
public external interface Object515 {
  @JsName("Tools")
  public var tools: JavascriptEditorModeTools

  @JsName("$")
  public var value: Boolean
}

public open external class JavascriptEditorModeTools {
  public open fun clone(): JavascriptEditorModeTools

  @JsName("ActivateDefaultMode")
  public open fun activateDefaultMode(): ToolsProvider

  @JsName("ActivateMode")
  public open fun activateMode(inId: String, toggle: Boolean): ToolsProvider

  @JsName("DeactivateAllModes")
  public open fun deactivateAllModes(): ToolsProvider

  @JsName("DeactivateMode")
  public open fun deactivateMode(inId: String): ToolsProvider

  @JsName("DestroyMode")
  public open fun destroyMode(inId: String): ToolsProvider

  @JsName("EndTracking")
  public open fun endTracking(viewport: JavascriptEdViewport): Boolean

  @JsName("EnsureNotInMode")
  public open fun ensureNotInMode(
    modeId: String,
    errorMsg: String,
    notifyUser: Boolean,
  ): Object515

  @JsName("IsDefaultModeActive")
  public open fun isDefaultModeActive(): Object515

  @JsName("IsModeActive")
  public open fun isModeActive(inId: String): Object515

  @JsName("IsTracking")
  public open fun isTracking(): Boolean

  @JsName("SetDefaultMode")
  public open fun setDefaultMode(defaultId: String): ToolsProvider

  @JsName("StartTracking")
  public open fun startTracking(viewport: JavascriptEdViewport): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorModeTools

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorModeTools

    @JsName("ActivateDefaultMode")
    public fun activateDefaultMode(tools: JavascriptEditorModeTools): ToolsProvider

    @JsName("ActivateMode")
    public fun activateMode(
      tools: JavascriptEditorModeTools,
      inId: String,
      toggle: Boolean,
    ): ToolsProvider

    @JsName("DeactivateAllModes")
    public fun deactivateAllModes(tools: JavascriptEditorModeTools): ToolsProvider

    @JsName("DeactivateMode")
    public fun deactivateMode(tools: JavascriptEditorModeTools, inId: String): ToolsProvider

    @JsName("DestroyMode")
    public fun destroyMode(tools: JavascriptEditorModeTools, inId: String): ToolsProvider

    @JsName("EndTracking")
    public fun endTracking(tools: JavascriptEditorModeTools, viewport: JavascriptEdViewport):
        Boolean

    @JsName("EnsureNotInMode")
    public fun ensureNotInMode(
      tools: JavascriptEditorModeTools,
      modeId: String,
      errorMsg: String,
      notifyUser: Boolean,
    ): Object515

    @JsName("IsDefaultModeActive")
    public fun isDefaultModeActive(tools: JavascriptEditorModeTools): Object515

    @JsName("IsModeActive")
    public fun isModeActive(tools: JavascriptEditorModeTools, inId: String): Object515

    @JsName("IsTracking")
    public fun isTracking(tools: JavascriptEditorModeTools): Boolean

    @JsName("SetDefaultMode")
    public fun setDefaultMode(tools: JavascriptEditorModeTools, defaultId: String): ToolsProvider

    @JsName("StartTracking")
    public fun startTracking(tools: JavascriptEditorModeTools, viewport: JavascriptEdViewport):
        Boolean

    @JsName("GetLevelEditorModeTools")
    public fun getLevelEditorModeTools(): JavascriptEditorModeTools
  }
}

public open external class JavascriptEditorMode {
  public open fun clone(): JavascriptEditorMode

  @JsName("GetCurrentWidgetAxis")
  public open fun getCurrentWidgetAxis(): Number

  @JsName("GetModeManager")
  public open fun getModeManager(): JavascriptEditorModeTools

  @JsName("SelectNone")
  public open fun selectNone(): Unit

  @JsName("SetCurrentWidgetAxis")
  public open fun setCurrentWidgetAxis(inAxis: Number): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptEditorMode

    @JsName("C")
    public fun copy(other: Any): JavascriptEditorMode

    @JsName("GetCurrentWidgetAxis")
    public fun getCurrentWidgetAxis(mode: JavascriptEditorMode): Number

    @JsName("GetModeManager")
    public fun getModeManager(mode: JavascriptEditorMode): JavascriptEditorModeTools

    @JsName("SelectNone")
    public fun selectNone(mode: JavascriptEditorMode): Unit

    @JsName("SetCurrentWidgetAxis")
    public fun setCurrentWidgetAxis(mode: JavascriptEditorMode, inAxis: Number): Unit
  }
}

@JsName("EJavascriptEditAction")
public external object JavascriptEditAction {
  public var Skip: String

  public var Process: String

  public var Halt: String

  @JsName("EJavascriptEditAction_MAX")
  public var Max: String
}

public open external class JavascriptEdMode(
  outer: UObject,
) : UObject {
  @JsName("OnGetWidgetLocation")
  public open var onGetWidgetLocation:
      UnrealEngineDelegate<(Instance: JavascriptEditorMode) -> Vector>

  @JsName("OnSelect")
  public open var onSelect: UnrealEngineDelegate<(
    Actor: Actor,
    bSelected: Boolean,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnDraw")
  public open var onDraw: UnrealEngineDelegate<(PDI: JavascriptPdi,
      Instance: JavascriptEditorMode) -> Unit>

  @JsName("OnDrawHUD")
  public open var onDrawHud: UnrealEngineDelegate<(Canvas: Canvas,
      Instance: JavascriptEditorMode) -> Unit>

  @JsName("IsSelectionAllowed")
  public open var isSelectionAllowed: UnrealEngineDelegate<(
    Actor: Actor,
    bSelected: Boolean,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnClick")
  public open var onClick: UnrealEngineDelegate<(
    ViewportClick: JavascriptViewportClick,
    HitProxy: JavascriptHitProxy,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnQuery")
  public open var onQuery: UnrealEngineDelegate<(Request: String,
      Instance: JavascriptEditorMode) -> Boolean>

  @JsName("OnStartTracking")
  public open var onStartTracking: UnrealEngineDelegate<(Viewport: JavascriptEdViewport,
      Instance: JavascriptEditorMode) -> Boolean>

  @JsName("OnEndTracking")
  public open var onEndTracking: UnrealEngineDelegate<(Viewport: JavascriptEdViewport,
      Instance: JavascriptEditorMode) -> Boolean>

  @JsName("OnInputAxis")
  public open var onInputAxis: UnrealEngineDelegate<(
    Viewport: JavascriptEdViewport,
    ControllerId: Number,
    Key: Key,
    Delta: Number,
    DeltaTime: Number,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnInputKey")
  public open var onInputKey: UnrealEngineDelegate<(
    Viewport: JavascriptEdViewport,
    Key: Key,
    Event: String,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnInputDelta")
  public open var onInputDelta: UnrealEngineDelegate<(
    Viewport: JavascriptEdViewport,
    Drag: Vector,
    Rot: Rotator,
    Scale: Vector,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnCapturedMouseMove")
  public open var onCapturedMouseMove: UnrealEngineDelegate<(
    Viewport: JavascriptEdViewport,
    X: Number,
    Y: Number,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnMouseEnter")
  public open var onMouseEnter: UnrealEngineDelegate<(
    Viewport: JavascriptEdViewport,
    X: Number,
    Y: Number,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnMouseLeave")
  public open var onMouseLeave: UnrealEngineDelegate<(Viewport: JavascriptEdViewport,
      Instance: JavascriptEditorMode) -> Boolean>

  @JsName("OnMouseMove")
  public open var onMouseMove: UnrealEngineDelegate<(
    Viewport: JavascriptEdViewport,
    X: Number,
    Y: Number,
    Instance: JavascriptEditorMode,
  ) -> Boolean>

  @JsName("OnLostFocus")
  public open var onLostFocus: UnrealEngineDelegate<(Viewport: JavascriptEdViewport,
      Instance: JavascriptEditorMode) -> Boolean>

  @JsName("OnReceivedFocus")
  public open var onReceivedFocus: UnrealEngineDelegate<(Viewport: JavascriptEdViewport,
      Instance: JavascriptEditorMode) -> Boolean>

  @JsName("OnSelectionChanged")
  public open var onSelectionChanged: UnrealEngineDelegate<(Tools: JavascriptEditorModeTools,
      Item: UObject) -> Unit>

  @JsName("OnGetContent")
  public open var onGetContent: UnrealEngineDelegate<() -> Widget>

  @JsName("OnProcess")
  public open var onProcess: UnrealEngineDelegate<(Request: String,
      Instance: JavascriptEditorMode) -> Boolean>

  @JsName("OnGetAction")
  public open var onGetAction: UnrealEngineDelegate<(Request: String,
      Instance: JavascriptEditorMode) -> String>

  @JsName("OnUsesToolkits")
  public open var onUsesToolkits: UnrealEngineDelegate<() -> Boolean>

  @JsName("OnIsCompatibleWith")
  public open var onIsCompatibleWith: UnrealEngineDelegate<(bIsCompatibleWith: String) -> Boolean>

  @JsName("OnActorMoved")
  public open var onActorMoved: UnrealEngineDelegate<(Instance: JavascriptEditorMode) -> Unit>

  @JsName("OnActorsDuplicated")
  public open var onActorsDuplicated: UnrealEngineDelegate<(
    PreDuplicateSelection: Array<Actor>,
    PostDuplicateSelection: Array<Actor>,
    bOffsetLocations: Boolean,
    Instance: JavascriptEditorMode,
  ) -> Unit>

  @JsName("OnActorSelectionChanged")
  public open var onActorSelectionChanged:
      UnrealEngineDelegate<(Instance: JavascriptEditorMode) -> Unit>

  @JsName("OnActorPropChanged")
  public open var onActorPropChanged: UnrealEngineDelegate<(Instance: JavascriptEditorMode) -> Unit>

  @JsName("OnMapChanged")
  public open var onMapChanged: UnrealEngineDelegate<(Instance: JavascriptEditorMode) -> Unit>

  @JsName("ModeId")
  public open var modeId: String

  @JsName("SlateIcon")
  public open var slateIcon: JavascriptSlateIcon

  @JsName("ModeName")
  public open var modeName: String

  @JsName("bVisible")
  public open var visible: Boolean

  @JsName("PriorityOrder")
  public open var priorityOrder: Number

  @JsName("Unregister")
  public open fun unregister(): Unit

  @JsName("Register")
  public open fun register(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEdMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEdMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEdMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEdMode

    @JsName("C")
    public fun copy(other: UObject): JavascriptEdMode

    @JsName("C")
    public fun copy(other: Any): JavascriptEdMode
  }
}

public open external class JavascriptEdModeLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptEdModeLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptEdModeLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEdModeLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptEdModeLibrary

    @JsName("StartTracking")
    public fun startTracking(tools: JavascriptEditorModeTools, viewport: JavascriptEdViewport):
        Boolean

    @JsName("SetDefaultMode")
    public fun setDefaultMode(tools: JavascriptEditorModeTools, defaultId: String): ToolsProvider

    @JsName("SetCurrentWidgetAxis")
    public fun setCurrentWidgetAxis(mode: JavascriptEditorMode, inAxis: Number): Unit

    @JsName("SelectNone")
    public fun selectNone(mode: JavascriptEditorMode): Unit

    @JsName("IsTracking")
    public fun isTracking(tools: JavascriptEditorModeTools): Boolean

    @JsName("IsModeActive")
    public fun isModeActive(tools: JavascriptEditorModeTools, inId: String): Object515

    @JsName("IsDefaultModeActive")
    public fun isDefaultModeActive(tools: JavascriptEditorModeTools): Object515

    @JsName("GetModeManager")
    public fun getModeManager(mode: JavascriptEditorMode): JavascriptEditorModeTools

    @JsName("GetLevelEditorModeTools")
    public fun getLevelEditorModeTools(): JavascriptEditorModeTools

    @JsName("GetHitProxy")
    public fun getHitProxy(viewport: JavascriptEdViewport): JavascriptHitProxy

    @JsName("GetCurrentWidgetAxis")
    public fun getCurrentWidgetAxis(mode: JavascriptEditorMode): Number

    @JsName("EnsureNotInMode")
    public fun ensureNotInMode(
      tools: JavascriptEditorModeTools,
      modeId: String,
      errorMsg: String,
      notifyUser: Boolean,
    ): Object515

    @JsName("EndTracking")
    public fun endTracking(tools: JavascriptEditorModeTools, viewport: JavascriptEdViewport):
        Boolean

    @JsName("DestroyMode")
    public fun destroyMode(tools: JavascriptEditorModeTools, inId: String): ToolsProvider

    @JsName("DeactivateMode")
    public fun deactivateMode(tools: JavascriptEditorModeTools, inId: String): ToolsProvider

    @JsName("DeactivateAllModes")
    public fun deactivateAllModes(tools: JavascriptEditorModeTools): ToolsProvider

    @JsName("ActivateMode")
    public fun activateMode(
      tools: JavascriptEditorModeTools,
      inId: String,
      toggle: Boolean,
    ): ToolsProvider

    @JsName("ActivateDefaultMode")
    public fun activateDefaultMode(tools: JavascriptEditorModeTools): ToolsProvider

    @JsName("C")
    public fun copy(other: UObject): JavascriptEdModeLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptEdModeLibrary
  }
}

public open external class JavascriptInputEventStateLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptInputEventStateLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptInputEventStateLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptInputEventStateLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptInputEventStateLibrary

    @JsName("IsSpaceBarPressed")
    public fun isSpaceBarPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsShiftButtonPressed")
    public fun isShiftButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsShiftButtonEvent")
    public fun isShiftButtonEvent(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsRightMouseButtonPressed")
    public fun isRightMouseButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsMouseButtonEvent")
    public fun isMouseButtonEvent(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsMiddleMouseButtonPressed")
    public fun isMiddleMouseButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsLeftMouseButtonPressed")
    public fun isLeftMouseButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsCtrlButtonPressed")
    public fun isCtrlButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsCtrlButtonEvent")
    public fun isCtrlButtonEvent(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsButtonPressed")
    public fun isButtonPressed(inputEvent: JavascriptInputEventState, inKey: Key): Boolean

    @JsName("IsAnyMouseButtonDown")
    public fun isAnyMouseButtonDown(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsAltButtonPressed")
    public fun isAltButtonPressed(inputEvent: JavascriptInputEventState): Boolean

    @JsName("IsAltButtonEvent")
    public fun isAltButtonEvent(inputEvent: JavascriptInputEventState): Boolean

    @JsName("GetKey")
    public fun getKey(inputEvent: JavascriptInputEventState): Key

    @JsName("GetInputEvent")
    public fun getInputEvent(inputEvent: JavascriptInputEventState): String

    @JsName("C")
    public fun copy(other: UObject): JavascriptInputEventStateLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptInputEventStateLibrary
  }
}

public open external class JavascriptLogSubscriber(
  outer: UObject,
) : UObject {
  @JsName("OnNewLogMessage")
  public open var onNewLogMessage: UnrealEngineMulticastDelegate<(
    Message: String,
    Type: String,
    Category: String,
  ) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptLogSubscriber

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptLogSubscriber

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptLogSubscriber

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptLogSubscriber

    @JsName("C")
    public fun copy(other: UObject): JavascriptLogSubscriber

    @JsName("C")
    public fun copy(other: Any): JavascriptLogSubscriber
  }
}

public open external class JavascriptMenuLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptMenuLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptMenuLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptMenuLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptMenuLibrary

    @JsName("UI_COMMAND_Function")
    public fun uicommandFunction(
      `this`: JavascriptBindingContext,
      command: JavascriptUiCommand,
      inTextSubNamespace: String,
    ): JavascriptUiCommandInfo

    @JsName("RemoveExtension")
    public fun removeExtension(extender: JavascriptExtender, extension: JavascriptExtensionBase):
        Unit

    @JsName("PushCommandList")
    public fun pushCommandList(builder: JavascriptMenuBuilder, list: JavascriptUiCommandList):
        BuilderProvider

    @JsName("ProcessCommandBindings_PointerEvent")
    public fun processCommandBindingsPointerEvent(commandList: JavascriptUiCommandList,
        inMouseEvent: UPointerEvent): Boolean

    @JsName("ProcessCommandBindings_KeyEvent")
    public fun processCommandBindingsKeyEvent(commandList: JavascriptUiCommandList,
        inKeyEvent: KeyEvent): Boolean

    @JsName("PopCommandList")
    public fun popCommandList(builder: JavascriptMenuBuilder): BuilderProvider

    @JsName("NewBindingContext")
    public fun newBindingContext(
      inContextName: String,
      inContextDesc: String,
      inContextParent: String,
      inStyleSetName: String,
    ): JavascriptBindingContext

    @JsName("GenericCommand")
    public fun genericCommand(what: String): JavascriptUiCommandInfo

    @JsName("EndSection")
    public fun endSection(builder: JavascriptMenuBuilder): BuilderProvider

    @JsName("Destroy")
    public fun destroy(context: JavascriptBindingContext): Unit

    @JsName("CreateUICommandList")
    public fun createUiCommandList(): JavascriptUiCommandList

    @JsName("CreateToolbarBuilder")
    public fun createToolbarBuilder(
      commandList: JavascriptUiCommandList,
      orientation: String,
      uFunction: JavascriptFunction,
    ): Unit

    @JsName("CreateMenuBuilder")
    public fun createMenuBuilder(
      commandList: JavascriptUiCommandList,
      inShouldCloseWindowAfterMenuSelection: Boolean,
      uFunction: JavascriptFunction,
    ): Unit

    @JsName("CreateMenuBarBuilder")
    public fun createMenuBarBuilder(commandList: JavascriptUiCommandList,
        uFunction: JavascriptFunction): Unit

    @JsName("Combine")
    public fun combine(extenders: Array<JavascriptExtender>): JavascriptExtender

    @JsName("BeginSection")
    public fun beginSection(
      builder: JavascriptMenuBuilder,
      inExtensionHook: String,
      menuHeadingText: String,
    ): BuilderProvider

    @JsName("Apply")
    public fun apply(
      extender: JavascriptExtender,
      extensionHook: String,
      hookPosition: String,
      menuBuilder: JavascriptMenuBuilder,
    ): MenuBuilderProvider

    @JsName("AddWidget")
    public fun addWidget(
      builder: JavascriptMenuBuilder,
      widget: Widget,
      label: String,
      noIndent: Boolean,
      inTutorialHighlightName: String,
      searchable: Boolean,
    ): BuilderProvider

    @JsName("AddToolBarExtension")
    public fun addToolBarExtension(
      extender: JavascriptExtender,
      extensionHook: String,
      hookPosition: String,
      commandList: JavascriptUiCommandList,
      uFunction: JavascriptFunction,
    ): JavascriptExtensionBase

    @JsName("AddToolBarButtonByContext")
    public fun addToolBarButtonByContext(
      builder: JavascriptMenuBuilder,
      context: JavascriptToolbarButtonContext,
      editingObject: UObject,
    ): BuilderProvider

    @JsName("AddToolBarButton")
    public fun addToolBarButton(builder: JavascriptMenuBuilder,
        commandInfo: JavascriptUiCommandInfo): BuilderProvider

    @JsName("AddSubMenu")
    public fun addSubMenu(
      builder: JavascriptMenuBuilder,
      label: String,
      tooltip: String,
      inOpenSubMenuOnClick: Boolean,
      uFunction: JavascriptFunction,
    ): BuilderProvider

    @JsName("AddSeparator")
    public fun addSeparator(builder: JavascriptMenuBuilder): BuilderProvider

    @JsName("AddPullDownMenu")
    public fun addPullDownMenu(
      menuBuilder: JavascriptMenuBuilder,
      inMenuLabel: String,
      inToolTip: String,
      inPullDownMenu: JavascriptFunction,
      inExtensionHook: String,
      inTutorialHighlightName: String,
    ): MenuBuilderProvider

    @JsName("AddMenuExtension")
    public fun addMenuExtension(
      extender: JavascriptExtender,
      extensionHook: String,
      hookPosition: String,
      commandList: JavascriptUiCommandList,
      uFunction: JavascriptFunction,
    ): JavascriptExtensionBase

    @JsName("AddMenuEntry")
    public fun addMenuEntry(builder: JavascriptMenuBuilder, uObject: JavascriptMenuContext):
        BuilderProvider

    @JsName("AddMenuByCommands")
    public fun addMenuByCommands(builder: JavascriptMenuBuilder, uiCommands: JavascriptUiCommands):
        BuilderProvider

    @JsName("AddMenubarExtension")
    public fun addMenubarExtension(
      extender: JavascriptExtender,
      extensionHook: String,
      hookPosition: String,
      commandList: JavascriptUiCommandList,
      uFunction: JavascriptFunction,
    ): JavascriptExtensionBase

    @JsName("AddComboButton")
    public fun addComboButton(
      builder: JavascriptMenuBuilder,
      uObject: JavascriptComboButtonContext,
      editingObject: UObject,
    ): BuilderProvider

    @JsName("C")
    public fun copy(other: UObject): JavascriptMenuLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptMenuLibrary
  }
}

public open external class JavascriptMultiBox(
  outer: UObject,
) : Widget {
  @JsName("OnHook")
  public open var onHook: UnrealEngineDelegate<(
    ID: String,
    Self: JavascriptMultiBox,
    CurrentBuilder: JavascriptMenuBuilder,
  ) -> Unit>

  @JsName("AddSubMenu")
  public open fun addSubMenu(
    builder: JavascriptMenuBuilder,
    ID: String,
    label: String,
    tooltip: String,
    inOpenSubMenuOnClick: Boolean,
  ): BuilderProvider

  @JsName("AddPullDownMenu")
  public open fun addPullDownMenu(
    builder: JavascriptMenuBuilder,
    ID: String,
    label: String,
    tooltip: String,
  ): BuilderProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptMultiBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptMultiBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptMultiBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptMultiBox

    @JsName("Bind")
    public fun bind(builder: JavascriptMenuBuilder): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptMultiBox

    @JsName("C")
    public fun copy(other: Any): JavascriptMultiBox
  }
}

@JsName("EJSCheckBoxState")
public external object JSCheckBoxState {
  public var Unchecked: String

  public var Checked: String

  public var Undetermined: String

  @JsName("EJSCheckBoxState_MAX")
  public var Max: String
}

public open external class JavascriptNotification(
  outer: UObject,
) : UObject {
  public open var text: String

  @JsName("bUseImage")
  public open var useImage: Boolean

  @JsName("UImage")
  public open var uImage: SlateBrush

  @JsName("FadeInDuration")
  public open var fadeInDuration: Number

  @JsName("FadeOutDuration")
  public open var fadeOutDuration: Number

  @JsName("ExpireDuration")
  public open var expireDuration: Number

  @JsName("bUseThrobber")
  public open var useThrobber: Boolean

  @JsName("bUseSuccessFailIcons")
  public open var useSuccessFailIcons: Boolean

  @JsName("bUseLargeFont")
  public open var useLargeFont: Boolean

  @JsName("bFireAndForget")
  public open var fireAndForget: Boolean

  @JsName("CheckBoxState")
  public open var checkBoxState: String

  @JsName("CheckBoxStateChanged")
  public open var checkBoxStateChanged: UnrealEngineDelegate<(State: String) -> Unit>

  @JsName("CheckBoxText")
  public open var checkBoxText: String

  @JsName("Hyperlink")
  public open var hyperlink: UnrealEngineDelegate<() -> Unit>

  @JsName("HyperlinkText")
  public open var hyperlinkText: String

  @JsName("bAllowThrottleWhenFrameRateIsLow")
  public open var allowThrottleWhenFrameRateIsLow: Boolean

  @JsName("Success")
  public open fun success(): Unit

  @JsName("SetText")
  public open fun setText(inText: String): Unit

  @JsName("Reset")
  public open fun reset(): Unit

  @JsName("Pending")
  public open fun pending(): Unit

  @JsName("Fire")
  public open fun fire(): Unit

  @JsName("Fail")
  public open fun fail(): Unit

  @JsName("Fadeout")
  public open fun fadeout(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptNotification

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptNotification

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptNotification

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptNotification

    @JsName("C")
    public fun copy(other: UObject): JavascriptNotification

    @JsName("C")
    public fun copy(other: Any): JavascriptNotification
  }
}

public open external class JavascriptOnEditorCommandlet(
  outer: UObject,
) : Commandlet {
  @JsName("CmdLineTokens")
  public open var cmdLineTokens: Array<String>

  @JsName("CmdLineSwitches")
  public open var cmdLineSwitches: Array<String>

  @JsName("GetEngine")
  public open fun getEngine(): EditorEngine

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptOnEditorCommandlet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptOnEditorCommandlet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptOnEditorCommandlet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptOnEditorCommandlet

    @JsName("C")
    public fun copy(other: UObject): JavascriptOnEditorCommandlet

    @JsName("C")
    public fun copy(other: Any): JavascriptOnEditorCommandlet
  }
}

@JsName("EPropertyAccessResult")
public external object PropertyAccessResult {
  public var MultipleValues: String

  public var Fail: String

  public var Success: String

  @JsName("EPropertyAccessResult_MAX")
  public var Max: String
}

public open external class JavascriptSimpleDelegateWrapper(
  outer: UObject,
) : UObject {
  public open var delegate: UnrealEngineDelegate<() -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptSimpleDelegateWrapper

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptSimpleDelegateWrapper

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptSimpleDelegateWrapper

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptSimpleDelegateWrapper

    @JsName("C")
    public fun copy(other: UObject): JavascriptSimpleDelegateWrapper

    @JsName("C")
    public fun copy(other: Any): JavascriptSimpleDelegateWrapper
  }
}

@JsName("T$516")
public external interface Object516 {
  @JsName("OutValue")
  public var outValue: JavascriptRef

  @JsName("$")
  public var value: String
}

@JsName("T$517")
public external interface Object517 {
  @JsName("OutValue")
  public var outValue: UObject

  @JsName("$")
  public var value: String
}

@JsName("T$518")
public external interface Object518 {
  @JsName("OutValue")
  public var outValue: String

  @JsName("$")
  public var value: String
}

public open external class JavascriptPropertyHandle {
  public open fun clone(): JavascriptPropertyHandle

  @JsName("CreatePropertyNameWidget")
  public open fun createPropertyNameWidget(
    nameOverride: String,
    toolTipOverride: String,
    displayResetToDefault: Boolean,
    hideText: Boolean,
    hideThumbnail: Boolean,
  ): JavascriptSlateWidget

  @JsName("CreatePropertyValueWidget")
  public open fun createPropertyValueWidget(hideDefaultPropertyButtons: Boolean):
      JavascriptSlateWidget

  @JsName("GeneratePathToProperty")
  public open fun generatePathToProperty(): String

  @JsName("GetChildHandle")
  public open fun getChildHandle(name: String): JavascriptPropertyHandle

  @JsName("GetIndexInArray")
  public open fun getIndexInArray(): Number

  @JsName("GetJavascriptRefValue")
  public open fun getJavascriptRefValue(outValue: JavascriptRef): Object516

  @JsName("GetKeyHandle")
  public open fun getKeyHandle(): JavascriptPropertyHandle

  @JsName("GetMetaData")
  public open fun getMetaData(key: String): String

  @JsName("GetObjectValue")
  public open fun getObjectValue(outValue: UObject): Object517

  @JsName("GetOuterObjects")
  public open fun getOuterObjects(): Array<UObject>

  @JsName("GetParentHandle")
  public open fun getParentHandle(): JavascriptPropertyHandle

  @JsName("GetProperty")
  public open fun getProperty(): Any

  @JsName("GetPropertyName")
  public open fun getPropertyName(): String

  @JsName("GetValueAsFormattedString")
  public open fun getValueAsFormattedString(outValue: String): Object518

  @JsName("IsArrayProperty")
  public open fun isArrayProperty(): Boolean

  @JsName("IsArrayPropertyWithValueType")
  public open fun isArrayPropertyWithValueType(): Boolean

  @JsName("IsEditConst")
  public open fun isEditConst(): Boolean

  @JsName("IsValidHandle")
  public open fun isValidHandle(): Boolean

  @JsName("SetJavascriptRefValue")
  public open fun setJavascriptRefValue(inValue: JavascriptRef): String

  @JsName("SetObjectValue")
  public open fun setObjectValue(inValue: UObject): String

  @JsName("SetOnPropertyValueChanged")
  public open fun setOnPropertyValueChanged(wrapper: JavascriptSimpleDelegateWrapper): Unit

  @JsName("SetValueFromFormattedString")
  public open fun setValueFromFormattedString(inValue: String): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptPropertyHandle

    @JsName("C")
    public fun copy(other: Any): JavascriptPropertyHandle

    @JsName("CreatePropertyNameWidget")
    public fun createPropertyNameWidget(
      handle: JavascriptPropertyHandle,
      nameOverride: String,
      toolTipOverride: String,
      displayResetToDefault: Boolean,
      hideText: Boolean,
      hideThumbnail: Boolean,
    ): JavascriptSlateWidget

    @JsName("CreatePropertyValueWidget")
    public fun createPropertyValueWidget(handle: JavascriptPropertyHandle,
        hideDefaultPropertyButtons: Boolean): JavascriptSlateWidget

    @JsName("GeneratePathToProperty")
    public fun generatePathToProperty(handle: JavascriptPropertyHandle): String

    @JsName("GetChildHandle")
    public fun getChildHandle(parent: JavascriptPropertyHandle, name: String):
        JavascriptPropertyHandle

    @JsName("GetIndexInArray")
    public fun getIndexInArray(handle: JavascriptPropertyHandle): Number

    @JsName("GetJavascriptRefValue")
    public fun getJavascriptRefValue(handle: JavascriptPropertyHandle, outValue: JavascriptRef):
        Object516

    @JsName("GetKeyHandle")
    public fun getKeyHandle(handle: JavascriptPropertyHandle): JavascriptPropertyHandle

    @JsName("GetMetaData")
    public fun getMetaData(handle: JavascriptPropertyHandle, key: String): String

    @JsName("GetObjectValue")
    public fun getObjectValue(handle: JavascriptPropertyHandle, outValue: UObject): Object517

    @JsName("GetOuterObjects")
    public fun getOuterObjects(handle: JavascriptPropertyHandle): Array<UObject>

    @JsName("GetParentHandle")
    public fun getParentHandle(handle: JavascriptPropertyHandle): JavascriptPropertyHandle

    @JsName("GetProperty")
    public fun getProperty(handle: JavascriptPropertyHandle): Any

    @JsName("GetPropertyName")
    public fun getPropertyName(handle: JavascriptPropertyHandle): String

    @JsName("GetValueAsFormattedString")
    public fun getValueAsFormattedString(handle: JavascriptPropertyHandle, outValue: String):
        Object518

    @JsName("IsArrayProperty")
    public fun isArrayProperty(handle: JavascriptPropertyHandle): Boolean

    @JsName("IsArrayPropertyWithValueType")
    public fun isArrayPropertyWithValueType(handle: JavascriptPropertyHandle): Boolean

    @JsName("IsEditConst")
    public fun isEditConst(handle: JavascriptPropertyHandle): Boolean

    @JsName("IsValidHandle")
    public fun isValidHandle(handle: JavascriptPropertyHandle): Boolean

    @JsName("SetJavascriptRefValue")
    public fun setJavascriptRefValue(handle: JavascriptPropertyHandle, inValue: JavascriptRef):
        String

    @JsName("SetObjectValue")
    public fun setObjectValue(handle: JavascriptPropertyHandle, inValue: UObject): String

    @JsName("SetOnPropertyValueChanged")
    public fun setOnPropertyValueChanged(handle: JavascriptPropertyHandle,
        wrapper: JavascriptSimpleDelegateWrapper): Unit

    @JsName("SetValueFromFormattedString")
    public fun setValueFromFormattedString(handle: JavascriptPropertyHandle, inValue: String):
        String
  }
}

public open external class JavascriptDetailWidgetDecl {
  public open fun clone(): JavascriptDetailWidgetDecl

  @JsName("SetContent")
  public open fun setContent(widget: JavascriptSlateWidget): Unit

  @JsName("SetHAlign")
  public open fun setHAlign(inAlignment: String): Unit

  @JsName("SetMaxDesiredWidth")
  public open fun setMaxDesiredWidth(maxWidth: Number): Unit

  @JsName("SetMinDesiredWidth")
  public open fun setMinDesiredWidth(minWidth: Number): Unit

  @JsName("SetVAlign")
  public open fun setVAlign(inAlignment: String): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptDetailWidgetDecl

    @JsName("C")
    public fun copy(other: Any): JavascriptDetailWidgetDecl

    @JsName("SetContent")
    public fun setContent(decl: JavascriptDetailWidgetDecl, widget: JavascriptSlateWidget): Unit

    @JsName("SetHAlign")
    public fun setHAlign(decl: JavascriptDetailWidgetDecl, inAlignment: String): Unit

    @JsName("SetMaxDesiredWidth")
    public fun setMaxDesiredWidth(decl: JavascriptDetailWidgetDecl, maxWidth: Number): Unit

    @JsName("SetMinDesiredWidth")
    public fun setMinDesiredWidth(decl: JavascriptDetailWidgetDecl, minWidth: Number): Unit

    @JsName("SetVAlign")
    public fun setVAlign(decl: JavascriptDetailWidgetDecl, inAlignment: String): Unit
  }
}

public open external class JavascriptDetailWidgetRow {
  public open fun clone(): JavascriptDetailWidgetRow

  @JsName("NameContent")
  public open fun nameContent(): JavascriptDetailWidgetDecl

  @JsName("SetFilterString")
  public open fun setFilterString(inFilterString: String): Unit

  @JsName("ValueContent")
  public open fun valueContent(): JavascriptDetailWidgetDecl

  @JsName("WholeRowContent")
  public open fun wholeRowContent(): JavascriptDetailWidgetDecl

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptDetailWidgetRow

    @JsName("C")
    public fun copy(other: Any): JavascriptDetailWidgetRow

    @JsName("NameContent")
    public fun nameContent(row: JavascriptDetailWidgetRow): JavascriptDetailWidgetDecl

    @JsName("SetFilterString")
    public fun setFilterString(row: JavascriptDetailWidgetRow, inFilterString: String): Unit

    @JsName("ValueContent")
    public fun valueContent(row: JavascriptDetailWidgetRow): JavascriptDetailWidgetDecl

    @JsName("WholeRowContent")
    public fun wholeRowContent(row: JavascriptDetailWidgetRow): JavascriptDetailWidgetDecl
  }
}

public open external class JavascriptPropertyTypeCustomizationUtils {
  public open fun clone(): JavascriptPropertyTypeCustomizationUtils

  @JsName("RequestRefresh")
  public open fun requestRefresh(force: Boolean): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptPropertyTypeCustomizationUtils

    @JsName("C")
    public fun copy(other: Any): JavascriptPropertyTypeCustomizationUtils

    @JsName("RequestRefresh")
    public fun requestRefresh(customizationUtils: JavascriptPropertyTypeCustomizationUtils,
        force: Boolean): Unit
  }
}

public open external class JavascriptSimpleGetBoolDelegateWrapper(
  outer: UObject,
) : UObject {
  public open var delegate: UnrealEngineDelegate<() -> Boolean>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptSimpleGetBoolDelegateWrapper

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptSimpleGetBoolDelegateWrapper

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptSimpleGetBoolDelegateWrapper

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptSimpleGetBoolDelegateWrapper

    @JsName("C")
    public fun copy(other: UObject): JavascriptSimpleGetBoolDelegateWrapper

    @JsName("C")
    public fun copy(other: Any): JavascriptSimpleGetBoolDelegateWrapper
  }
}

public open external class JavascriptDetailPropertyRow {
  public open fun clone(): JavascriptDetailPropertyRow

  @JsName("BindVisibility")
  public open fun bindVisibility(wrapper: JavascriptSimpleGetBoolDelegateWrapper): Unit

  @JsName("CustomWidget")
  public open fun customWidget(showChildren: Boolean): JavascriptDetailWidgetRow

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptDetailPropertyRow

    @JsName("C")
    public fun copy(other: Any): JavascriptDetailPropertyRow

    @JsName("BindVisibility")
    public fun bindVisibility(row: JavascriptDetailPropertyRow,
        wrapper: JavascriptSimpleGetBoolDelegateWrapper): Unit

    @JsName("CustomWidget")
    public fun customWidget(row: JavascriptDetailPropertyRow, showChildren: Boolean):
        JavascriptDetailWidgetRow
  }
}

@JsName("T$519")
public external interface Object519 {
  @JsName("Objects")
  public var objects: Array<UObject>

  @JsName("$")
  public var value: JavascriptDetailPropertyRow
}

public open external class JavascriptDetailChildrenBuilder {
  public open fun clone(): JavascriptDetailChildrenBuilder

  @JsName("AddChildContent")
  public open fun addChildContent(searchString: String): JavascriptDetailWidgetRow

  @JsName("AddChildProperty")
  public open fun addChildProperty(propertyHandle: JavascriptPropertyHandle):
      JavascriptDetailPropertyRow

  @JsName("AddExternalObjectProperty")
  public open fun addExternalObjectProperty(
    objects: Array<UObject>,
    propertyName: String,
    uniqueIdName: String,
    allowChildrenOverride: Boolean,
    createCategoryNodesOverride: Boolean,
  ): Object519

  @JsName("AddExternalObjects")
  public open fun addExternalObjects(objects: Array<UObject>, uniqueIdName: String): Object519

  @JsName("GenerateStructValueWidget")
  public open fun generateStructValueWidget(structPropertyHandle: JavascriptPropertyHandle):
      JavascriptSlateWidget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptDetailChildrenBuilder

    @JsName("C")
    public fun copy(other: Any): JavascriptDetailChildrenBuilder

    @JsName("AddChildContent")
    public fun addChildContent(childBuilder: JavascriptDetailChildrenBuilder, searchString: String):
        JavascriptDetailWidgetRow

    @JsName("AddChildProperty")
    public fun addChildProperty(childBuilder: JavascriptDetailChildrenBuilder,
        propertyHandle: JavascriptPropertyHandle): JavascriptDetailPropertyRow

    @JsName("AddExternalObjectProperty")
    public fun addExternalObjectProperty(
      childBuilder: JavascriptDetailChildrenBuilder,
      objects: Array<UObject>,
      propertyName: String,
      uniqueIdName: String,
      allowChildrenOverride: Boolean,
      createCategoryNodesOverride: Boolean,
    ): Object519

    @JsName("AddExternalObjects")
    public fun addExternalObjects(
      childBuilder: JavascriptDetailChildrenBuilder,
      objects: Array<UObject>,
      uniqueIdName: String,
    ): Object519

    @JsName("GenerateStructValueWidget")
    public fun generateStructValueWidget(childBuilder: JavascriptDetailChildrenBuilder,
        structPropertyHandle: JavascriptPropertyHandle): JavascriptSlateWidget
  }
}

public open external class JavascriptPropertyCustomization(
  outer: UObject,
) : UObject {
  @JsName("PropertyTypeName")
  public open var propertyTypeName: String

  @JsName("OnDestroy")
  public open var onDestroy: UnrealEngineDelegate<(ID: Number) -> Unit>

  @JsName("OnCustomizeHeader")
  public open var onCustomizeHeader: UnrealEngineDelegate<(
    Handle: JavascriptPropertyHandle,
    HeaderRow: JavascriptDetailWidgetRow,
    Utils: JavascriptPropertyTypeCustomizationUtils,
    ID: Number,
  ) -> Unit>

  @JsName("OnCustomizeChildren")
  public open var onCustomizeChildren: UnrealEngineDelegate<(
    Handle: JavascriptPropertyHandle,
    ChildBuilder: JavascriptDetailChildrenBuilder,
    Utils: JavascriptPropertyTypeCustomizationUtils,
    ID: Number,
  ) -> Unit>

  @JsName("OnPropertyValueChanged")
  public open var onPropertyValueChanged: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("Unregister")
  public open fun unregister(): Unit

  @JsName("Register")
  public open fun register(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptPropertyCustomization

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptPropertyCustomization

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptPropertyCustomization

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptPropertyCustomization

    @JsName("C")
    public fun copy(other: UObject): JavascriptPropertyCustomization

    @JsName("C")
    public fun copy(other: Any): JavascriptPropertyCustomization
  }
}

public open external class JavascriptPropertyCustomizationLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptPropertyCustomizationLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptPropertyCustomizationLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptPropertyCustomizationLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptPropertyCustomizationLibrary

    @JsName("WholeRowContent")
    public fun wholeRowContent(row: JavascriptDetailWidgetRow): JavascriptDetailWidgetDecl

    @JsName("ValueContent")
    public fun valueContent(row: JavascriptDetailWidgetRow): JavascriptDetailWidgetDecl

    @JsName("SetValueFromFormattedString")
    public fun setValueFromFormattedString(handle: JavascriptPropertyHandle, inValue: String):
        String

    @JsName("SetVAlign")
    public fun setVAlign(decl: JavascriptDetailWidgetDecl, inAlignment: String): Unit

    @JsName("SetOnPropertyValueChanged")
    public fun setOnPropertyValueChanged(handle: JavascriptPropertyHandle,
        wrapper: JavascriptSimpleDelegateWrapper): Unit

    @JsName("SetObjectValue")
    public fun setObjectValue(handle: JavascriptPropertyHandle, inValue: UObject): String

    @JsName("SetMinDesiredWidth")
    public fun setMinDesiredWidth(decl: JavascriptDetailWidgetDecl, minWidth: Number): Unit

    @JsName("SetMaxDesiredWidth")
    public fun setMaxDesiredWidth(decl: JavascriptDetailWidgetDecl, maxWidth: Number): Unit

    @JsName("SetJavascriptRefValue")
    public fun setJavascriptRefValue(handle: JavascriptPropertyHandle, inValue: JavascriptRef):
        String

    @JsName("SetHAlign")
    public fun setHAlign(decl: JavascriptDetailWidgetDecl, inAlignment: String): Unit

    @JsName("SetFilterString")
    public fun setFilterString(row: JavascriptDetailWidgetRow, inFilterString: String): Unit

    @JsName("SetContent")
    public fun setContent(decl: JavascriptDetailWidgetDecl, widget: JavascriptSlateWidget): Unit

    @JsName("RequestRefresh")
    public fun requestRefresh(customizationUtils: JavascriptPropertyTypeCustomizationUtils,
        force: Boolean): Unit

    @JsName("NameContent")
    public fun nameContent(row: JavascriptDetailWidgetRow): JavascriptDetailWidgetDecl

    @JsName("IsValidHandle")
    public fun isValidHandle(handle: JavascriptPropertyHandle): Boolean

    @JsName("IsEditConst")
    public fun isEditConst(handle: JavascriptPropertyHandle): Boolean

    @JsName("IsArrayPropertyWithValueType")
    public fun isArrayPropertyWithValueType(handle: JavascriptPropertyHandle): Boolean

    @JsName("IsArrayProperty")
    public fun isArrayProperty(handle: JavascriptPropertyHandle): Boolean

    @JsName("GetValueAsFormattedString")
    public fun getValueAsFormattedString(handle: JavascriptPropertyHandle, outValue: String):
        Object518

    @JsName("GetPropertyName")
    public fun getPropertyName(handle: JavascriptPropertyHandle): String

    @JsName("GetProperty")
    public fun getProperty(handle: JavascriptPropertyHandle): Any

    @JsName("GetParentHandle")
    public fun getParentHandle(handle: JavascriptPropertyHandle): JavascriptPropertyHandle

    @JsName("GetOuterObjects")
    public fun getOuterObjects(handle: JavascriptPropertyHandle): Array<UObject>

    @JsName("GetObjectValue")
    public fun getObjectValue(handle: JavascriptPropertyHandle, outValue: UObject): Object517

    @JsName("GetMetaData")
    public fun getMetaData(handle: JavascriptPropertyHandle, key: String): String

    @JsName("GetKeyHandle")
    public fun getKeyHandle(handle: JavascriptPropertyHandle): JavascriptPropertyHandle

    @JsName("GetJavascriptRefValue")
    public fun getJavascriptRefValue(handle: JavascriptPropertyHandle, outValue: JavascriptRef):
        Object516

    @JsName("GetIndexInArray")
    public fun getIndexInArray(handle: JavascriptPropertyHandle): Number

    @JsName("GetChildHandle")
    public fun getChildHandle(parent: JavascriptPropertyHandle, name: String):
        JavascriptPropertyHandle

    @JsName("GenerateStructValueWidget")
    public fun generateStructValueWidget(childBuilder: JavascriptDetailChildrenBuilder,
        structPropertyHandle: JavascriptPropertyHandle): JavascriptSlateWidget

    @JsName("GeneratePathToProperty")
    public fun generatePathToProperty(handle: JavascriptPropertyHandle): String

    @JsName("CustomWidget")
    public fun customWidget(row: JavascriptDetailPropertyRow, showChildren: Boolean):
        JavascriptDetailWidgetRow

    @JsName("CreatePropertyValueWidget")
    public fun createPropertyValueWidget(handle: JavascriptPropertyHandle,
        hideDefaultPropertyButtons: Boolean): JavascriptSlateWidget

    @JsName("CreatePropertyNameWidget")
    public fun createPropertyNameWidget(
      handle: JavascriptPropertyHandle,
      nameOverride: String,
      toolTipOverride: String,
      displayResetToDefault: Boolean,
      hideText: Boolean,
      hideThumbnail: Boolean,
    ): JavascriptSlateWidget

    @JsName("BindVisibility")
    public fun bindVisibility(row: JavascriptDetailPropertyRow,
        wrapper: JavascriptSimpleGetBoolDelegateWrapper): Unit

    @JsName("AddExternalObjects")
    public fun addExternalObjects(
      childBuilder: JavascriptDetailChildrenBuilder,
      objects: Array<UObject>,
      uniqueIdName: String,
    ): Object519

    @JsName("AddExternalObjectProperty")
    public fun addExternalObjectProperty(
      childBuilder: JavascriptDetailChildrenBuilder,
      objects: Array<UObject>,
      propertyName: String,
      uniqueIdName: String,
      allowChildrenOverride: Boolean,
      createCategoryNodesOverride: Boolean,
    ): Object519

    @JsName("AddChildProperty")
    public fun addChildProperty(childBuilder: JavascriptDetailChildrenBuilder,
        propertyHandle: JavascriptPropertyHandle): JavascriptDetailPropertyRow

    @JsName("AddChildContent")
    public fun addChildContent(childBuilder: JavascriptDetailChildrenBuilder, searchString: String):
        JavascriptDetailWidgetRow

    @JsName("C")
    public fun copy(other: UObject): JavascriptPropertyCustomizationLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptPropertyCustomizationLibrary
  }
}

@JsName("EPropertyEditorNameAreaSettings")
public external object PropertyEditorNameAreaSettings {
  public var HideNameArea: String

  public var ObjectsUseNameArea: String

  public var ActorsUseNameArea: String

  public var ComponentsAndActorsUseNameArea: String

  @JsName("EPropertyEditorNameAreaSettings_MAX")
  public var Max: String
}

public open external class PropertyEditor(
  outer: UObject,
) : Widget {
  @JsName("OnChange")
  public open var onChange: UnrealEngineMulticastDelegate<(PropertyName: String,
      MemberPropertyName: String) -> Unit>

  @JsName("bUpdateFromSelection")
  public open var updateFromSelection: Boolean

  @JsName("bLockable")
  public open var lockable: Boolean

  @JsName("bAllowSearch")
  public open var allowSearch: Boolean

  @JsName("bHideSelectionTip")
  public open var hideSelectionTip: Boolean

  @JsName("bReadOnly")
  public open var readOnly: Boolean

  @JsName("bEnablePropertyPath")
  public open var enablePropertyPath: Boolean

  @JsName("NameAreaSettings")
  public open var nameAreaSettings: String

  @JsName("ReadOnlyDelegate")
  public open var readOnlyDelegate: UnrealEngineDelegate<() -> Boolean>

  @JsName("SetObjects")
  public open fun setObjects(
    objects: Array<UObject>,
    forceRefresh: Boolean,
    overrideLock: Boolean,
  ): Unit

  @JsName("SetObject")
  public open fun setObject(uObject: UObject, forceRefresh: Boolean): Unit

  @JsName("IsPropertyVisible")
  public open fun isPropertyVisible(
    propertName: String,
    parentPropertyName: String,
    propertyPaths: Array<String>,
  ): Boolean

  @JsName("IsPropertyReadOnly")
  public open fun isPropertyReadOnly(
    propertyName: String,
    parentPropertyName: String,
    propertyPaths: Array<String>,
  ): Boolean

  @JsName("ForceRefresh")
  public open fun forceRefresh(): Unit

  @JsName("Destruct")
  public open fun destruct(): Unit

  @JsName("Construct")
  public open fun construct(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PropertyEditor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PropertyEditor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyEditor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyEditor

    @JsName("C")
    public fun copy(other: UObject): PropertyEditor

    @JsName("C")
    public fun copy(other: Any): PropertyEditor
  }
}

public open external class JavascriptPropertyTable(
  outer: UObject,
) : Widget {
  @JsName("OnGenerateCustomCellWidget")
  public open var onGenerateCustomCellWidget: UnrealEngineDelegate<(UObject: UObject,
      ColumnName: String) -> JavascriptSlateWidget>

  @JsName("OnUseCustomCellWidget")
  public open var onUseCustomCellWidget: UnrealEngineDelegate<(UObject: UObject,
      ColumnName: String) -> Boolean>

  @JsName("bUseCustomColumns")
  public open var useCustomColumns: Boolean

  @JsName("SetEditingObjects")
  public open fun setEditingObjects(inEditingObjects: Array<UObject>): Unit

  @JsName("GetSelectedTableObjects")
  public open fun getSelectedTableObjects(): Array<UObject>

  @JsName("GetEditingObjects")
  public open fun getEditingObjects(): Array<UObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptPropertyTable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptPropertyTable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptPropertyTable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptPropertyTable

    @JsName("C")
    public fun copy(other: UObject): JavascriptPropertyTable

    @JsName("C")
    public fun copy(other: Any): JavascriptPropertyTable
  }
}

public open external class JavascriptRawMeshLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptRawMeshLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptRawMeshLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptRawMeshLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptRawMeshLibrary

    @JsName("SetSectionInfo")
    public fun setSectionInfo(
      staticMesh: StaticMesh,
      lodIndex: Number,
      sectionIndex: Number,
      info: MeshSectionInfo,
    ): Unit

    @JsName("SaveRawMesh")
    public fun saveRawMesh(
      staticMesh: StaticMesh,
      sourceModelIndex: Number,
      inMesh: JavascriptRawMesh,
    ): InMeshProvider

    @JsName("LoadRawMesh")
    public fun loadRawMesh(
      staticMesh: StaticMesh,
      sourceModelIndex: Number,
      outMesh: JavascriptRawMesh,
    ): OutMeshProvider

    @JsName("IsValidOrFixable")
    public fun isValidOrFixable(rawMesh: JavascriptRawMesh): Boolean

    @JsName("IsValid")
    public fun isValid(rawMesh: JavascriptRawMesh): Boolean

    @JsName("GetWedgePosition")
    public fun getWedgePosition(rawMesh: JavascriptRawMesh, wedgeIndex: Number): Vector

    @JsName("GetSectionInfo")
    public fun getSectionInfo(
      staticMesh: StaticMesh,
      lodIndex: Number,
      sectionIndex: Number,
    ): MeshSectionInfo

    @JsName("GetPhysicsBodySetupFromStaticMeshComponent")
    public fun getPhysicsBodySetupFromStaticMeshComponent(inStaticMeshComp: StaticMeshComponent):
        BodySetup

    @JsName("GetPhysicsBodySetupFromStaticMesh")
    public fun getPhysicsBodySetupFromStaticMesh(inStaticMesh: StaticMesh): BodySetup

    @JsName("GetPhysicsBodySetupFromMesh")
    public fun getPhysicsBodySetupFromMesh(inSkeletalMesh: SkeletalMesh, inName: String): BodySetup

    @JsName("GetPhysicsBodySetup")
    public fun getPhysicsBodySetup(inSkeletalMeshComp: SkeletalMeshComponent, inName: String):
        BodySetup

    @JsName("Empty")
    public fun empty(rawMesh: JavascriptRawMesh): RawMeshProvider

    @JsName("CompactMaterialIndices")
    public fun compactMaterialIndices(rawMesh: JavascriptRawMesh): RawMeshProvider

    @JsName("Build")
    public fun build(staticMesh: StaticMesh): Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptRawMeshLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptRawMeshLibrary
  }
}

public open external class JavascriptScrubControlPanel(
  outer: UObject,
) : Widget {
  @JsName("OnClick_Forward_Delegate")
  public open var onClickForwardDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnClick_Forward_Step_Delegate")
  public open var onClickForwardStepDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnClick_Forward_End_Delegate")
  public open var onClickForwardEndDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnClick_Backward_Delegate")
  public open var onClickBackwardDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnClick_Backward_Step_Delegate")
  public open var onClickBackwardStepDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnClick_Backward_End_Delegate")
  public open var onClickBackwardEndDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnClick_ToggleLoop_Delegate")
  public open var onClickToggleLoopDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SetPlaybackPosition_Delegate")
  public open var setPlaybackPositionDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SetViewRange")
  public open fun setViewRange(newMin: Number, newMax: Number): Unit

  @JsName("SetSumFrames")
  public open fun setSumFrames(newSumFrames: Number): Unit

  @JsName("SetPlaybackPosition")
  public open fun setPlaybackPosition(newTime: Number): Unit

  @JsName("SetLooping")
  public open fun setLooping(newbLooping: Boolean): Unit

  @JsName("SetFramesPerSecond")
  public open fun setFramesPerSecond(newFramesPerSecond: Number): Unit

  @JsName("IsLooping")
  public open fun isLooping(): Boolean

  @JsName("GetViewRangeMin")
  public open fun getViewRangeMin(): Number

  @JsName("GetViewRangeMax")
  public open fun getViewRangeMax(): Number

  @JsName("GetTotalSequenceLength")
  public open fun getTotalSequenceLength(): Number

  @JsName("GetTotalFrameCount")
  public open fun getTotalFrameCount(): Any

  @JsName("GetPlaybackPosition")
  public open fun getPlaybackPosition(): Number

  @JsName("GetFramesPerSecond")
  public open fun getFramesPerSecond(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptScrubControlPanel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptScrubControlPanel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptScrubControlPanel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptScrubControlPanel

    @JsName("C")
    public fun copy(other: UObject): JavascriptScrubControlPanel

    @JsName("C")
    public fun copy(other: Any): JavascriptScrubControlPanel
  }
}

public open external class JavascriptWebBrowser(
  outer: UObject,
) : Widget {
  @JsName("OnUrlChanged")
  public open var onUrlChanged: UnrealEngineMulticastDelegate<(text: String) -> Unit>

  @JsName("OnBeforePopup")
  public open var onBeforePopup: UnrealEngineMulticastDelegate<(URL: String, Frame: String) -> Unit>

  @JsName("bShowAddressBar")
  public open var showAddressBar: Boolean

  @JsName("bShowControls")
  public open var showControls: Boolean

  @JsName("bSupportsThumbMouseButtonNavigation")
  public open var supportsThumbMouseButtonNavigation: Boolean

  @JsName("LoadURL")
  public open fun loadUrl(newUrl: String): Unit

  @JsName("LoadString")
  public open fun loadString(contents: String, dummyUrl: String): Unit

  @JsName("GetUrl")
  public open fun getUrl(): String

  @JsName("GetTitleText")
  public open fun getTitleText(): String

  @JsName("ExecuteJavascript")
  public open fun executeJavascript(scriptText: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptWebBrowser

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptWebBrowser

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptWebBrowser

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptWebBrowser

    @JsName("C")
    public fun copy(other: UObject): JavascriptWebBrowser

    @JsName("C")
    public fun copy(other: Any): JavascriptWebBrowser
  }
}

public open external class JavascriptPinParams {
  @JsName("ContainerType")
  public open var containerType: String

  @JsName("bIsReference")
  public open var isReference: Boolean

  @JsName("bIsConst")
  public open var isConst: Boolean

  public open var index: Number

  public open fun clone(): JavascriptPinParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptPinParams

    @JsName("C")
    public fun copy(other: Any): JavascriptPinParams
  }
}

public open external class JavascriptGraphEdNode(
  outer: UObject,
) : EdGraphNode {
  @JsName("BackgroundColor")
  public open var backgroundColor: SlateColor

  @JsName("GraphNode")
  public open var graphNode: UObject

  @JsName("IsTitleOnly")
  public open var isTitleOnly: Boolean

  @JsName("IsCustomNode")
  public open var isCustomNode: Boolean

  @JsName("WidgetFinalized")
  public open var widgetFinalized: JavascriptFunction

  @JsName("RenderOpacity")
  public open var renderOpacity: Number

  @JsName("Bidirectional")
  public open var bidirectional: Boolean

  @JsName("PriorityOrder")
  public open var priorityOrder: Number

  @JsName("PinRefMap")
  public open var pinRefMap: Any

  @JsName("UpdateSlate")
  public open fun updateSlate(): Unit

  @JsName("SetVisible")
  public open fun setVisible(visible: Boolean): Unit

  @JsName("SetTitleSelectionMode")
  public open fun setTitleSelectionMode(inTitleHeight: Number): Unit

  @JsName("SetRenderOpacity")
  public open fun setRenderOpacity(opacity: Number): Unit

  @JsName("SetEnable")
  public open fun setEnable(enable: Boolean): Unit

  @JsName("ResetTitleSelectionMode")
  public open fun resetTitleSelectionMode(): Unit

  @JsName("RemovePinByName")
  public open fun removePinByName(pinName: String): Boolean

  @JsName("RemovePin")
  public open fun removePin(pin: JavascriptEdGraphPin): Boolean

  @JsName("GetVisible")
  public open fun getVisible(): Boolean

  @JsName("GetNumOfPins")
  public open fun getNumOfPins(direction: String): Number

  @JsName("GetDesiredSize")
  public open fun getDesiredSize(): Vector2d

  @JsName("CreatePin")
  public open fun createPin(
    dir: String,
    pinCategory: String,
    pinSubCategory: String,
    pinSubCategoryObject: UObject,
    pinName: String,
    pinToolTip: String,
    pinDisplayName: String,
    inPinParams: JavascriptPinParams,
  ): JavascriptEdGraphPin

  @JsName("GetOwnerPanel")
  public open fun getOwnerPanel(): JavascriptSlateWidget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphEdNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGraphEdNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphEdNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphEdNode

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphEdNode

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphEdNode

    @JsName("GetOwnerPanel")
    public fun getOwnerPanel(uNode: JavascriptGraphEdNode): JavascriptSlateWidget
  }
}

public open external class JavascriptSlateEdNode {
  public open fun clone(): JavascriptSlateEdNode

  @JsName("AddPinToHoverSet")
  public open fun addPinToHoverSet(pin: JavascriptEdGraphPin): Unit

  @JsName("RemovePinFromHoverSet")
  public open fun removePinFromHoverSet(pin: JavascriptEdGraphPin): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptSlateEdNode

    @JsName("C")
    public fun copy(other: Any): JavascriptSlateEdNode

    @JsName("AddPinToHoverSet")
    public fun addPinToHoverSet(inSlateEdNode: JavascriptSlateEdNode, pin: JavascriptEdGraphPin):
        Unit

    @JsName("RemovePinFromHoverSet")
    public fun removePinFromHoverSet(inSlateNode: JavascriptSlateEdNode, pin: JavascriptEdGraphPin):
        Unit
  }
}

public open external class JavascriptPerformSecondPassLayoutContainer {
  @JsName("PrevNode")
  public open var prevNode: EdGraphNode

  @JsName("NextNode")
  public open var nextNode: EdGraphNode

  @JsName("NodeIndex")
  public open var nodeIndex: Number

  @JsName("MaxNodes")
  public open var maxNodes: Number

  public open fun clone(): JavascriptPerformSecondPassLayoutContainer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptPerformSecondPassLayoutContainer

    @JsName("C")
    public fun copy(other: Any): JavascriptPerformSecondPassLayoutContainer
  }
}

public open external class JavascriptConnectionParams {
  @JsName("WireColor")
  public open var wireColor: LinearColor

  @JsName("AssociatedPin1")
  public open var associatedPin1: JavascriptEdGraphPin

  @JsName("AssociatedPin2")
  public open var associatedPin2: JavascriptEdGraphPin

  @JsName("WireThickness")
  public open var wireThickness: Number

  @JsName("bDrawBubbles")
  public open var drawBubbles: Boolean

  @JsName("bUserFlag1")
  public open var userFlag1: Boolean

  @JsName("bUserFlag2")
  public open var userFlag2: Boolean

  @JsName("StartDirection")
  public open var startDirection: String

  @JsName("EndDirection")
  public open var endDirection: String

  public open fun clone(): JavascriptConnectionParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptConnectionParams

    @JsName("C")
    public fun copy(other: Any): JavascriptConnectionParams
  }
}

@JsName("T$525")
public external interface JavascriptConnectionParamsProvider {
  @JsName("Params")
  public var params: JavascriptConnectionParams
}

public open external class JavascriptGraphConnectionDrawingPolicyContainer {
  public open fun clone(): JavascriptGraphConnectionDrawingPolicyContainer

  @JsName("ApplyHoverDeemphasis")
  public open fun applyHoverDeemphasis(
    outputPin: JavascriptEdGraphPin,
    inputPin: JavascriptEdGraphPin,
    thickness: Number,
    wireColor: LinearColor,
  ): Unit

  @JsName("DetermineWiringStyle")
  public open fun determineWiringStyle(
    outputPin: JavascriptEdGraphPin,
    inputPin: JavascriptEdGraphPin,
    params: JavascriptConnectionParams,
  ): JavascriptConnectionParamsProvider

  @JsName("DrawConnection")
  public open fun drawConnection(
    a: Vector2d,
    b: Vector2d,
    params: JavascriptConnectionParams,
  ): Unit

  @JsName("DrawSplineWithArrow")
  public open fun drawSplineWithArrow(
    startAnchorPoint: Vector2d,
    endAnchorPoint: Vector2d,
    params: JavascriptConnectionParams,
  ): Unit

  @JsName("GetHorveredPinNum")
  public open fun getHorveredPinNum(): Number

  @JsName("IsContainedHoveredPins")
  public open fun isContainedHoveredPins(pin: JavascriptEdGraphPin): Boolean

  @JsName("MakeRotatedBox")
  public open fun makeRotatedBox(
    arrowDrawPos: Vector2d,
    angleInRadians: Number,
    wireColor: LinearColor,
  ): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphConnectionDrawingPolicyContainer

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphConnectionDrawingPolicyContainer

    @JsName("ApplyHoverDeemphasis")
    public fun applyHoverDeemphasis(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      outputPin: JavascriptEdGraphPin,
      inputPin: JavascriptEdGraphPin,
      thickness: Number,
      wireColor: LinearColor,
    ): Unit

    @JsName("DetermineWiringStyle")
    public fun determineWiringStyle(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      outputPin: JavascriptEdGraphPin,
      inputPin: JavascriptEdGraphPin,
      params: JavascriptConnectionParams,
    ): JavascriptConnectionParamsProvider

    @JsName("DrawConnection")
    public fun drawConnection(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      a: Vector2d,
      b: Vector2d,
      params: JavascriptConnectionParams,
    ): Unit

    @JsName("DrawSplineWithArrow")
    public fun drawSplineWithArrow(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      startAnchorPoint: Vector2d,
      endAnchorPoint: Vector2d,
      params: JavascriptConnectionParams,
    ): Unit

    @JsName("GetHorveredPinNum")
    public fun getHorveredPinNum(container: JavascriptGraphConnectionDrawingPolicyContainer): Number

    @JsName("IsContainedHoveredPins")
    public fun isContainedHoveredPins(container: JavascriptGraphConnectionDrawingPolicyContainer,
        pin: JavascriptEdGraphPin): Boolean

    @JsName("MakeRotatedBox")
    public fun makeRotatedBox(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      arrowDrawPos: Vector2d,
      angleInRadians: Number,
      wireColor: LinearColor,
    ): Unit
  }
}

@JsName("EGraphSchemaGetStringQuery")
public external object GraphSchemaGetStringQuery {
  public var Description: String

  public var Title: String

  @JsName("EGraphSchemaGetStringQuery_MAX")
  public var Max: String
}

public open external class JavascriptGraphMenuBuilder : JavascriptMenuBuilder {
  @JsName("Graph")
  public open var graph: EdGraph

  @JsName("GraphNode")
  public open var graphNode: EdGraphNode

  @JsName("GraphPin")
  public open var graphPin: JavascriptEdGraphPin

  @JsName("bIsDebugging")
  public open var isDebugging: Boolean

  public override fun clone(): JavascriptGraphMenuBuilder

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphMenuBuilder

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphMenuBuilder
  }
}

@JsName("ECanCreateConnectionResponse")
public external object CanCreateConnectionResponse {
  @JsName("CONNECT_RESPONSE_MAKE")
  public var MAKE: String

  @JsName("CONNECT_RESPONSE_DISALLOW")
  public var DISALLOW: String

  @JsName("CONNECT_RESPONSE_BREAK_OTHERS_A")
  public var Breakothersa: String

  @JsName("CONNECT_RESPONSE_BREAK_OTHERS_B")
  public var Breakothersb: String

  @JsName("CONNECT_RESPONSE_BREAK_OTHERS_AB")
  public var Breakothersab: String

  @JsName("CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE")
  public var Makewithconversionnode: String

  @JsName("CONNECT_RESPONSE_MAKE_WITH_PROMOTION")
  public var Makewithpromotion: String

  @JsName("CONNECT_RESPONSE_MAX")
  public var Max: String
}

public open external class JavascriptPinConnectionResponse {
  @JsName("Message")
  public open var message: String

  @JsName("Response")
  public open var response: String

  public open fun clone(): JavascriptPinConnectionResponse

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptPinConnectionResponse

    @JsName("C")
    public fun copy(other: Any): JavascriptPinConnectionResponse
  }
}

public open external class EdGraphSchemaAction {
  @JsName("MenuDescription")
  public open var menuDescription: String

  @JsName("TooltipDescription")
  public open var tooltipDescription: String

  @JsName("Category")
  public open var category: String

  @JsName("Keywords")
  public open var keywords: String

  @JsName("Grouping")
  public open var grouping: Number

  @JsName("SectionID")
  public open var sectionId: Number

  @JsName("MenuDescriptionArray")
  public open var menuDescriptionArray: Array<String>

  @JsName("FullSearchTitlesArray")
  public open var fullSearchTitlesArray: Array<String>

  @JsName("FullSearchKeywordsArray")
  public open var fullSearchKeywordsArray: Array<String>

  @JsName("FullSearchCategoryArray")
  public open var fullSearchCategoryArray: Array<String>

  @JsName("LocalizedMenuDescriptionArray")
  public open var localizedMenuDescriptionArray: Array<String>

  @JsName("LocalizedFullSearchTitlesArray")
  public open var localizedFullSearchTitlesArray: Array<String>

  @JsName("LocalizedFullSearchKeywordsArray")
  public open var localizedFullSearchKeywordsArray: Array<String>

  @JsName("LocalizedFullSearchCategoryArray")
  public open var localizedFullSearchCategoryArray: Array<String>

  @JsName("SearchText")
  public open var searchText: String

  public open fun clone(): EdGraphSchemaAction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EdGraphSchemaAction

    @JsName("C")
    public fun copy(other: Any): EdGraphSchemaAction
  }
}

public open external class PerformActionContext {
  @JsName("ParentGraph")
  public open var parentGraph: EdGraph

  @JsName("FromPins")
  public open var fromPins: Array<JavascriptEdGraphPin>

  @JsName("Location")
  public open var location: Vector2d

  @JsName("bSelectNewNode")
  public open var selectNewNode: Boolean

  public open fun clone(): PerformActionContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PerformActionContext

    @JsName("C")
    public fun copy(other: Any): PerformActionContext
  }
}

public open external class JavascriptArrangedWidget {
  public open fun clone(): JavascriptArrangedWidget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptArrangedWidget

    @JsName("C")
    public fun copy(other: Any): JavascriptArrangedWidget
  }
}

public open external class JavascriptPinWidget {
  public open fun clone(): JavascriptPinWidget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptPinWidget

    @JsName("C")
    public fun copy(other: Any): JavascriptPinWidget
  }
}

public open external class JavascriptDetermineLinkGeometryContainer {
  public open fun clone(): JavascriptDetermineLinkGeometryContainer

  @JsName("FindPinGeometries")
  public open fun findPinGeometries(pinWidget: JavascriptPinWidget): JavascriptArrangedWidget

  @JsName("FindPinToPinWidgetMap")
  public open fun findPinToPinWidgetMap(pin: JavascriptEdGraphPin): JavascriptPinWidget

  @JsName("GetArrangedNodes")
  public open fun getArrangedNodes(uNode: EdGraphNode): JavascriptArrangedWidget

  @JsName("GetOutputPinWidget")
  public open fun getOutputPinWidget(): JavascriptPinWidget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptDetermineLinkGeometryContainer

    @JsName("C")
    public fun copy(other: Any): JavascriptDetermineLinkGeometryContainer

    @JsName("FindPinGeometries")
    public fun findPinGeometries(container: JavascriptDetermineLinkGeometryContainer,
        pinWidget: JavascriptPinWidget): JavascriptArrangedWidget

    @JsName("FindPinToPinWidgetMap")
    public fun findPinToPinWidgetMap(container: JavascriptDetermineLinkGeometryContainer,
        pin: JavascriptEdGraphPin): JavascriptPinWidget

    @JsName("GetArrangedNodes")
    public fun getArrangedNodes(container: JavascriptDetermineLinkGeometryContainer,
        uNode: EdGraphNode): JavascriptArrangedWidget

    @JsName("GetOutputPinWidget")
    public fun getOutputPinWidget(container: JavascriptDetermineLinkGeometryContainer):
        JavascriptPinWidget
  }
}

public open external class JavascriptGraphAssetGraphSchema(
  outer: UObject,
) : EdGraphSchema {
  @JsName("OnGetPinColor")
  public open var onGetPinColor: UnrealEngineDelegate<(bHovered: Boolean,
      Pin: JavascriptEdGraphPin) -> SlateColor>

  @JsName("OnGetPinTextColor")
  public open var onGetPinTextColor: UnrealEngineDelegate<(bHovered: Boolean,
      Pin: JavascriptEdGraphPin) -> SlateColor>

  @JsName("OnGetDefaultValueVisibility")
  public open var onGetDefaultValueVisibility:
      UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> Boolean>

  @JsName("OnGetSlateBrushName")
  public open var onGetSlateBrushName: UnrealEngineDelegate<(bHovered: Boolean,
      Pin: JavascriptEdGraphPin) -> String>

  @JsName("OnPinConnectionListChanged")
  public open var onPinConnectionListChanged:
      UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> Unit>

  @JsName("OnTryCreateConnection")
  public open var onTryCreateConnection: UnrealEngineDelegate<(PinA: JavascriptEdGraphPin,
      PinB: JavascriptEdGraphPin) -> Unit>

  @JsName("OnMouseEnter")
  public open var onMouseEnter: UnrealEngineDelegate<(
    Instance: JavascriptGraphEdNode,
    SlateEdNode: JavascriptSlateEdNode,
    UPointerEvent: UPointerEvent,
  ) -> Unit>

  @JsName("OnMouseLeave")
  public open var onMouseLeave: UnrealEngineDelegate<(
    Instance: JavascriptGraphEdNode,
    SlateEdNode: JavascriptSlateEdNode,
    UPointerEvent: UPointerEvent,
  ) -> Unit>

  @JsName("OnMouseMove")
  public open var onMouseMove: UnrealEngineDelegate<(
    Instance: JavascriptGraphEdNode,
    Delta: Vector2d,
    bUserIsDragging: Boolean,
    MouseZone: Number,
    UPointerEvent: UPointerEvent,
  ) -> Boolean>

  @JsName("OnMouseButtonDown")
  public open var onMouseButtonDown: UnrealEngineDelegate<(
    Instance: JavascriptGraphEdNode,
    MyGeometry: Geometry,
    UPointerEvent: UPointerEvent,
  ) -> Boolean>

  @JsName("OnMouseButtonUp")
  public open var onMouseButtonUp: UnrealEngineDelegate<(
    Instance: JavascriptGraphEdNode,
    MyGeometry: Geometry,
    UPointerEvent: UPointerEvent,
  ) -> Boolean>

  @JsName("OnPerformSecondPassLayout")
  public open var onPerformSecondPassLayout:
      UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> JavascriptPerformSecondPassLayoutContainer>

  @JsName("OnRequiresSecondPassLayout")
  public open var onRequiresSecondPassLayout:
      UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> Boolean>

  @JsName("OnMoveTo")
  public open var onMoveTo: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode,
      NewPosition: Vector2d) -> Boolean>

  @JsName("OnTakeContentWidget")
  public open var onTakeContentWidget: UnrealEngineDelegate<(
    Instance: JavascriptGraphEdNode,
    OutLeftNodeBoxWidget: JavascriptSlateWidget,
    OutRightNodeBoxWidget: JavascriptSlateWidget,
  ) -> JavascriptSlateWidget>

  @JsName("OnGetValueWidget")
  public open var onGetValueWidget:
      UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> JavascriptSlateWidget>

  @JsName("OnGetActualPinWidget")
  public open var onGetActualPinWidget:
      UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> JavascriptSlateWidget>

  @JsName("OnGetPinStatusIndicator")
  public open var onGetPinStatusIndicator:
      UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> JavascriptSlateWidget>

  @JsName("OnDisableMakePins")
  public open var onDisableMakePins:
      UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> Boolean>

  @JsName("OnEnablePin")
  public open var onEnablePin: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> Boolean>

  @JsName("OnUsingDefaultPin")
  public open var onUsingDefaultPin: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> Boolean>

  @JsName("OnGetPinLabelVisibility")
  public open var onGetPinLabelVisibility:
      UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> Boolean>

  @JsName("OnGetCustomPinBoxWidget")
  public open var onGetCustomPinBoxWidget:
      UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> JavascriptSlateWidget>

  @JsName("OnUsingNodeWidgetMap")
  public open var onUsingNodeWidgetMap: UnrealEngineDelegate<() -> Boolean>

  @JsName("OnDetermineWiringStyle")
  public open var onDetermineWiringStyle: UnrealEngineDelegate<(
    A: JavascriptEdGraphPin,
    B: JavascriptEdGraphPin,
    Params: JavascriptConnectionParams,
    Container: JavascriptGraphConnectionDrawingPolicyContainer,
  ) -> Unit>

  @JsName("OnComputeSplineTangent")
  public open var onComputeSplineTangent: UnrealEngineDelegate<(A: Vector2d,
      B: Vector2d) -> Vector2d>

  @JsName("OnDrawSplineWithArrow")
  public open var onDrawSplineWithArrow: UnrealEngineDelegate<(
    A: Vector2d,
    B: Vector2d,
    Params: JavascriptConnectionParams,
    Container: JavascriptGraphConnectionDrawingPolicyContainer,
    ArrowRadius: Vector2d,
  ) -> Boolean>

  @JsName("OnDrawSplineWithArrow_Geom")
  public open var onDrawSplineWithArrowGeom: UnrealEngineDelegate<(
    A: Geometry,
    B: Geometry,
    Params: JavascriptConnectionParams,
    Container: JavascriptGraphConnectionDrawingPolicyContainer,
  ) -> Boolean>

  @JsName("OnDrawPreviewConnector")
  public open var onDrawPreviewConnector: UnrealEngineDelegate<(
    PinGeometry: Geometry,
    StartPoint: Vector2d,
    Endpoint: Vector2d,
    Pin: JavascriptEdGraphPin,
    Params: JavascriptConnectionParams,
    Container: JavascriptGraphConnectionDrawingPolicyContainer,
  ) -> Boolean>

  @JsName("OnTakeUserWidget")
  public open var onTakeUserWidget:
      UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> JavascriptSlateWidget>

  @JsName("OnTakeTitleAreaWidget")
  public open var onTakeTitleAreaWidget:
      UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> JavascriptSlateWidget>

  @JsName("OnTakeErrorReportingWidget")
  public open var onTakeErrorReportingWidget:
      UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> JavascriptSlateWidget>

  @JsName("OnGetString")
  public open var onGetString: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode,
      Query: String) -> String>

  @JsName("OnBuildMenu")
  public open var onBuildMenu: UnrealEngineDelegate<(Builder: JavascriptGraphMenuBuilder) -> Unit>

  @JsName("OnAllocateDefaultPins")
  public open var onAllocateDefaultPins:
      UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) -> Unit>

  @JsName("OnCreatePin")
  public open var onCreatePin:
      UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> JavascriptSlateWidget>

  @JsName("OnCanCreateConnection")
  public open var onCanCreateConnection: UnrealEngineDelegate<(A: JavascriptEdGraphPin,
      B: JavascriptEdGraphPin) -> JavascriptPinConnectionResponse>

  @JsName("OnPerformAction")
  public open var onPerformAction: UnrealEngineDelegate<(Action: EdGraphSchemaAction,
      Context: PerformActionContext) -> EdGraphNode>

  @JsName("OnContextActions")
  public open var onContextActions:
      UnrealEngineDelegate<(FromPin: JavascriptEdGraphPin) -> Array<EdGraphSchemaAction>>

  @JsName("OnNodeConnectionListChanged")
  public open var onNodeConnectionListChanged:
      UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) -> Unit>

  @JsName("OnCreateAutomaticConversionNodeAndConnections")
  public open var onCreateAutomaticConversionNodeAndConnections:
      UnrealEngineDelegate<(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin) -> Boolean>

  @JsName("OnDetermineLinkGeometry")
  public open var onDetermineLinkGeometry: UnrealEngineDelegate<(
    OutPin: JavascriptEdGraphPin,
    InputPin: JavascriptEdGraphPin,
    StartWidgetGeometry: JavascriptArrangedWidget,
    EndWidgetGeometry: JavascriptArrangedWidget,
    Container: JavascriptDetermineLinkGeometryContainer,
  ) -> Boolean>

  @JsName("OnIsNodeComment")
  public open var onIsNodeComment:
      UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> Boolean>

  @JsName("OnEndUserInteraction")
  public open var onEndUserInteraction: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) -> Unit>

  @JsName("OnCreateOutputSideAddButton")
  public open var onCreateOutputSideAddButton:
      UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> Boolean>

  @JsName("OnAddPinByAddButton")
  public open var onAddPinByAddButton: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) -> Unit>

  @JsName("OnShouldAlwaysPurgeOnModification")
  public open var onShouldAlwaysPurgeOnModification: UnrealEngineDelegate<() -> Boolean>

  @JsName("OnDragEnter")
  public open var onDragEnter: UnrealEngineDelegate<(
    Target: JavascriptGraphEdNode,
    Capture: JavascriptGraphEdNode,
    MyGeometry: Geometry,
  ) -> Boolean>

  @JsName("OnDragLeave")
  public open var onDragLeave: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) -> Boolean>

  @JsName("OnDragOver")
  public open var onDragOver: UnrealEngineDelegate<(
    Target: JavascriptGraphEdNode,
    Capture: JavascriptGraphEdNode,
    MyGeometry: Geometry,
  ) -> Boolean>

  @JsName("OnDrop")
  public open var onDrop: UnrealEngineDelegate<(
    Target: JavascriptGraphEdNode,
    Capture: JavascriptGraphEdNode,
    MyGeometry: Geometry,
  ) -> Boolean>

  @JsName("OnGetSideMarginInPin")
  public open var onGetSideMarginInPin: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) -> Number>

  @JsName("BreakSinglePinLink")
  public open fun breakSinglePinLink(sourcePin: JavascriptEdGraphPin,
      targetPin: JavascriptEdGraphPin): Unit

  @JsName("BreakPinLinks")
  public open fun breakPinLinks(targetPin: JavascriptEdGraphPin, sendsNodeNotifcation: Boolean):
      Unit

  @JsName("BreakNodeLinks")
  public open fun breakNodeLinks(targetNode: EdGraphNode): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphAssetGraphSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGraphAssetGraphSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphAssetGraphSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphAssetGraphSchema

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphAssetGraphSchema

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphAssetGraphSchema
  }
}

public open external class JavascriptGraphEdCustomNodeWidget(
  outer: UObject,
) : Widget {
  @JsName("EdNode")
  public open var edNode: JavascriptGraphEdNode

  @JsName("SetNode")
  public open fun setNode(inEdNode: JavascriptGraphEdNode): Unit

  @JsName("SetGraphPanel")
  public open fun setGraphPanel(inGraphPanel: JavascriptSlateWidget): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphEdCustomNodeWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGraphEdCustomNodeWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphEdCustomNodeWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphEdCustomNodeWidget

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphEdCustomNodeWidget

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphEdCustomNodeWidget
  }
}

@JsName("T$526")
public external interface CreatorProvider {
  @JsName("Creator")
  public var creator: JavascriptNodeCreator
}

public open external class JavascriptNodeCreator {
  @JsName("UNode")
  public open var uNode: JavascriptGraphEdNode

  public open fun clone(): JavascriptNodeCreator

  @JsName("Finalize")
  public open fun finalize(): CreatorProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptNodeCreator

    @JsName("C")
    public fun copy(other: Any): JavascriptNodeCreator

    @JsName("Finalize")
    public fun finalize(creator: JavascriptNodeCreator): CreatorProvider
  }
}

public open external class JavascriptGraphEdGraph(
  outer: UObject,
) : EdGraph {
  @JsName("CustomNodes")
  public open var customNodes: Array<JavascriptGraphEdNode>

  @JsName("RebuildGenericGraph")
  public open fun rebuildGenericGraph(): Unit

  @JsName("CommentNodeCreator")
  public open fun commentNodeCreator(selectNewNode: Boolean): JavascriptNodeCreator

  @JsName("CustomNodeCreator")
  public open fun customNodeCreator(): JavascriptNodeCreator

  @JsName("NodeCreator")
  public open fun nodeCreator(selectNewNode: Boolean): JavascriptNodeCreator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphEdGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGraphEdGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphEdGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphEdGraph

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphEdGraph

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphEdGraph

    @JsName("CommentNodeCreator")
    public fun commentNodeCreator(graph: JavascriptGraphEdGraph, selectNewNode: Boolean):
        JavascriptNodeCreator

    @JsName("CustomNodeCreator")
    public fun customNodeCreator(graph: JavascriptGraphEdGraph): JavascriptNodeCreator

    @JsName("NodeCreator")
    public fun nodeCreator(graph: JavascriptGraphEdGraph, selectNewNode: Boolean):
        JavascriptNodeCreator
  }
}

public open external class JavascriptGraphEditorLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphEditorLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGraphEditorLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphEditorLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphEditorLibrary

    @JsName("TryConnection")
    public fun tryConnection(
      schema: EdGraphSchema,
      a: JavascriptEdGraphPin,
      b: JavascriptEdGraphPin,
    ): Boolean

    @JsName("SetPinType")
    public fun setPinType(pin: JavascriptEdGraphPin, pinType: EdGraphPinType): Unit

    @JsName("SetPinRefObject")
    public fun setPinRefObject(inPin: JavascriptEdGraphPin, inObject: UObject): Unit

    @JsName("SetPinInfo")
    public fun setPinInfo(
      a: JavascriptEdGraphPin,
      inPinName: String,
      inPinToolTip: String,
    ): Unit

    @JsName("SetPinHidden")
    public fun setPinHidden(a: JavascriptEdGraphPin, hidden: Boolean): Unit

    @JsName("SetPinContainerType")
    public fun setPinContainerType(a: JavascriptEdGraphPin, containerType: String): Unit

    @JsName("SetPinAdvancedView")
    public fun setPinAdvancedView(a: JavascriptEdGraphPin, advancedView: Boolean): Unit

    @JsName("SetParentPin")
    public fun setParentPin(a: JavascriptEdGraphPin, parent: JavascriptEdGraphPin): Unit

    @JsName("SetNodeMetaData")
    public fun setNodeMetaData(
      schema: EdGraphSchema,
      uNode: EdGraphNode,
      keyValue: String,
    ): Boolean

    @JsName("ResizeNode")
    public fun resizeNode(uNode: EdGraphNode, newSize: Vector2d): Unit

    @JsName("RemovePinFromHoverSet")
    public fun removePinFromHoverSet(inSlateNode: JavascriptSlateEdNode, pin: JavascriptEdGraphPin):
        Unit

    @JsName("NodeCreator")
    public fun nodeCreator(graph: JavascriptGraphEdGraph, selectNewNode: Boolean):
        JavascriptNodeCreator

    @JsName("MakeRotatedBox")
    public fun makeRotatedBox(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      arrowDrawPos: Vector2d,
      angleInRadians: Number,
      wireColor: LinearColor,
    ): Unit

    @JsName("MakeLinkTo")
    public fun makeLinkTo(a: JavascriptEdGraphPin, b: JavascriptEdGraphPin): Unit

    @JsName("IsValid")
    public fun isValid(a: JavascriptEdGraphPin): Boolean

    @JsName("IsPinHidden")
    public fun isPinHidden(a: JavascriptEdGraphPin): Boolean

    @JsName("IsContainedHoveredPins")
    public fun isContainedHoveredPins(container: JavascriptGraphConnectionDrawingPolicyContainer,
        pin: JavascriptEdGraphPin): Boolean

    @JsName("GetSubPins")
    public fun getSubPins(a: JavascriptEdGraphPin): Array<JavascriptEdGraphPin>

    @JsName("GetPinType")
    public fun getPinType(a: JavascriptEdGraphPin): EdGraphPinType

    @JsName("GetPins")
    public fun getPins(uNode: EdGraphNode): Array<JavascriptEdGraphPin>

    @JsName("GetPinRefObject")
    public fun getPinRefObject(inPin: JavascriptEdGraphPin): UObject

    @JsName("GetPinName")
    public fun getPinName(a: JavascriptEdGraphPin): String

    @JsName("GetPinIndex")
    public fun getPinIndex(a: JavascriptEdGraphPin): Number

    @JsName("GetPinGUID")
    public fun getPinGuid(a: JavascriptEdGraphPin): Guid

    @JsName("GetPinContainerType")
    public fun getPinContainerType(a: JavascriptEdGraphPin): String

    @JsName("GetParentPin")
    public fun getParentPin(a: JavascriptEdGraphPin): JavascriptEdGraphPin

    @JsName("GetOwningNode")
    public fun getOwningNode(a: JavascriptEdGraphPin): EdGraphNode

    @JsName("GetOwnerPanel")
    public fun getOwnerPanel(uNode: JavascriptGraphEdNode): JavascriptSlateWidget

    @JsName("GetOutputPinWidget")
    public fun getOutputPinWidget(container: JavascriptDetermineLinkGeometryContainer):
        JavascriptPinWidget

    @JsName("GetLinkedTo")
    public fun getLinkedTo(a: JavascriptEdGraphPin): Array<JavascriptEdGraphPin>

    @JsName("GetLinkedPinNum")
    public fun getLinkedPinNum(a: JavascriptEdGraphPin): Number

    @JsName("GetHorveredPinNum")
    public fun getHorveredPinNum(container: JavascriptGraphConnectionDrawingPolicyContainer): Number

    @JsName("GetDirection")
    public fun getDirection(a: JavascriptEdGraphPin): String

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEdGraphPin

    @JsName("GetArrangedNodes")
    public fun getArrangedNodes(container: JavascriptDetermineLinkGeometryContainer,
        uNode: EdGraphNode): JavascriptArrangedWidget

    @JsName("FindPinToPinWidgetMap")
    public fun findPinToPinWidgetMap(container: JavascriptDetermineLinkGeometryContainer,
        pin: JavascriptEdGraphPin): JavascriptPinWidget

    @JsName("FindPinGeometries")
    public fun findPinGeometries(container: JavascriptDetermineLinkGeometryContainer,
        pinWidget: JavascriptPinWidget): JavascriptArrangedWidget

    @JsName("FindPin")
    public fun findPin(
      uNode: EdGraphNode,
      pinName: String,
      direction: String,
    ): JavascriptEdGraphPin

    @JsName("FindClosestPointOnGeom")
    public fun findClosestPointOnGeom(geom: Geometry, testPoint: Vector2d): Vector2d

    @JsName("Finalize")
    public fun finalize(creator: JavascriptNodeCreator): CreatorProvider

    @JsName("DrawSplineWithArrow")
    public fun drawSplineWithArrow(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      startAnchorPoint: Vector2d,
      endAnchorPoint: Vector2d,
      params: JavascriptConnectionParams,
    ): Unit

    @JsName("DrawConnection")
    public fun drawConnection(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      a: Vector2d,
      b: Vector2d,
      params: JavascriptConnectionParams,
    ): Unit

    @JsName("DetermineWiringStyle")
    public fun determineWiringStyle(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      outputPin: JavascriptEdGraphPin,
      inputPin: JavascriptEdGraphPin,
      params: JavascriptConnectionParams,
    ): JavascriptConnectionParamsProvider

    @JsName("DestroyNode")
    public fun destroyNode(uNode: EdGraphNode): Unit

    @JsName("CustomNodeCreator")
    public fun customNodeCreator(graph: JavascriptGraphEdGraph): JavascriptNodeCreator

    @JsName("CommentNodeCreator")
    public fun commentNodeCreator(graph: JavascriptGraphEdGraph, selectNewNode: Boolean):
        JavascriptNodeCreator

    @JsName("CenterOf")
    public fun centerOf(geom: Geometry): Vector2d

    @JsName("CanUserDeleteNode")
    public fun canUserDeleteNode(uNode: EdGraphNode): Boolean

    @JsName("CanDuplicateNode")
    public fun canDuplicateNode(uNode: EdGraphNode): Boolean

    @JsName("BreakLinkTo")
    public fun breakLinkTo(a: JavascriptEdGraphPin, b: JavascriptEdGraphPin): Unit

    @JsName("BreakAllPinLinks")
    public fun breakAllPinLinks(a: JavascriptEdGraphPin): Unit

    @JsName("AutowireNewNode")
    public fun autowireNewNode(uNode: EdGraphNode, fromPin: JavascriptEdGraphPin): Unit

    @JsName("ApplyHoverDeemphasis")
    public fun applyHoverDeemphasis(
      container: JavascriptGraphConnectionDrawingPolicyContainer,
      outputPin: JavascriptEdGraphPin,
      inputPin: JavascriptEdGraphPin,
      thickness: Number,
      wireColor: LinearColor,
    ): Unit

    @JsName("AddPinToHoverSet")
    public fun addPinToHoverSet(inSlateEdNode: JavascriptSlateEdNode, pin: JavascriptEdGraphPin):
        Unit

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphEditorLibrary

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphEditorLibrary
  }
}

public open external class JavascriptGraphAppearanceInfo {
  @JsName("CornerImage")
  public open var cornerImage: SlateBrush

  @JsName("CornerText")
  public open var cornerText: String

  @JsName("PIENotifyText")
  public open var pieNotifyText: String

  @JsName("ReadOnlyText")
  public open var readOnlyText: String

  @JsName("InstructionText")
  public open var instructionText: String

  public open fun clone(): JavascriptGraphAppearanceInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphAppearanceInfo

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphAppearanceInfo
  }
}

@JsName("EPinVisibility")
public external object PinVisibility {
  @JsName("Pin_Show")
  public var Show: String

  @JsName("Pin_HideNoConnection")
  public var HideNoConnection: String

  @JsName("Pin_HideNoConnectionNoDefault")
  public var HideNoConnectionNoDefault: String

  @JsName("Pin_MAX")
  public var Max: String
}

@JsName("T$527")
public external interface Object527 {
  @JsName("OutLocation")
  public var outLocation: Vector2d

  @JsName("OutZoomAmount")
  public var outZoomAmount: Number
}

public open external class JavascriptGraphEditorWidget(
  outer: UObject,
) : Widget {
  @JsName("EdGraph")
  public open var edGraph: JavascriptGraphEdGraph

  @JsName("OnNodeDoubleClicked")
  public open var onNodeDoubleClicked: UnrealEngineDelegate<(UNode: EdGraphNode) -> Unit>

  @JsName("OnDropActor")
  public open var onDropActor: UnrealEngineDelegate<(
    Actors: Array<Actor>,
    Graph: EdGraph,
    Point: Vector2d,
  ) -> Unit>

  @JsName("OnDisallowedPinConnection")
  public open var onDisallowedPinConnection: UnrealEngineDelegate<(A: JavascriptEdGraphPin,
      B: JavascriptEdGraphPin) -> Unit>

  @JsName("OnSelectedNodesChanged")
  public open var onSelectedNodesChanged: UnrealEngineDelegate<(Set: Array<UObject>) -> Unit>

  @JsName("OnInitialGraphPanelUpdated")
  public open var onInitialGraphPanelUpdated: UnrealEngineDelegate<() -> Unit>

  @JsName("AppearanceInfo")
  public open var appearanceInfo: JavascriptGraphAppearanceInfo

  @JsName("CommandList")
  public open var commandList: JavascriptUiCommandList

  @JsName("SetViewLocation")
  public open fun setViewLocation(location: Vector2d, zoomAmount: Number): Unit

  @JsName("SetPinVisibility")
  public open fun setPinVisibility(inVisibility: String): Unit

  @JsName("SetNodeSelection")
  public open fun setNodeSelection(uNode: EdGraphNode, select: Boolean): Unit

  @JsName("SetGraph")
  public open fun setGraph(inEdGraph: JavascriptGraphEdGraph): Unit

  @JsName("SelectAllNodes")
  public open fun selectAllNodes(): Unit

  @JsName("NotifyGraphChanged")
  public open fun notifyGraphChanged(): Unit

  @JsName("JumpToPin")
  public open fun jumpToPin(jumpToMe: JavascriptEdGraphPin): Unit

  @JsName("JumpToNode")
  public open fun jumpToNode(
    jumpToMe: EdGraphNode,
    requestRename: Boolean,
    selectNode: Boolean,
  ): Unit

  @JsName("GetViewLocation")
  public open fun getViewLocation(outLocation: Vector2d, outZoomAmount: Number): Object527

  @JsName("GetSelectedNodes")
  public open fun getSelectedNodes(): Array<UObject>

  @JsName("GetPasteLocation")
  public open fun getPasteLocation(): Vector2d

  @JsName("ClearSelectionSet")
  public open fun clearSelectionSet(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphEditorWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGraphEditorWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphEditorWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphEditorWidget

    @JsName("NewGraph")
    public fun newGraph(parentScope: UObject): JavascriptGraphEdGraph

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphEditorWidget

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphEditorWidget
  }
}

public open external class JavascriptGraphEdNodeWidget(
  outer: UObject,
) : Widget {
  @JsName("EdNode")
  public open var edNode: JavascriptGraphEdNode

  @JsName("SetNode")
  public open fun setNode(inEdNode: JavascriptGraphEdNode): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphEdNodeWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGraphEdNodeWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphEdNodeWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphEdNodeWidget

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphEdNodeWidget

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphEdNodeWidget
  }
}

@JsName("JavascriptGraphEdNode_Comment")
public open external class JavascriptGraphEdNodeComment(
  outer: UObject,
) : JavascriptGraphEdNode {
  @JsName("CommentColor")
  public open var commentColor: LinearColor

  @JsName("FontSize")
  public open var fontSize: Number

  @JsName("bCommentBubbleVisible_InDetailsPanel")
  public open var commentBubbleVisibleInDetailsPanel: Boolean

  @JsName("bColorCommentBubble")
  public open var colorCommentBubble: Boolean

  @JsName("MoveMode")
  public open var moveMode: String

  @JsName("CommentDepth")
  public open var commentDepth: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphEdNodeComment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptGraphEdNodeComment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphEdNodeComment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphEdNodeComment

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphEdNodeComment

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphEdNodeComment
  }
}

public open external class JavascriptGraphTextPropertyEditableTextBox(
  outer: UObject,
) : Widget {
  @JsName("OnGetGraphPin")
  public open var onGetGraphPin: UnrealEngineDelegate<() -> JavascriptEdGraphPin>

  @JsName("OnGetDefaultValue")
  public open var onGetDefaultValue: UnrealEngineDelegate<() -> JavascriptTextProperty>

  @JsName("OnTextCommitted")
  public open var onTextCommitted:
      UnrealEngineMulticastDelegate<(TextProperty: JavascriptTextProperty) -> Unit>

  @JsName("WidgetStyle")
  public open var widgetStyle: EditableTextBoxStyle

  @JsName("WrapTextAt")
  public open var wrapTextAt: Number

  @JsName("AutoWrapText")
  public open var autoWrapText: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptGraphTextPropertyEditableTextBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        JavascriptGraphTextPropertyEditableTextBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptGraphTextPropertyEditableTextBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptGraphTextPropertyEditableTextBox

    @JsName("C")
    public fun copy(other: UObject): JavascriptGraphTextPropertyEditableTextBox

    @JsName("C")
    public fun copy(other: Any): JavascriptGraphTextPropertyEditableTextBox
  }
}

@JsName("OnGetGraphPin__PythonCallable")
public open external class OnGetGraphPinPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetGraphPinPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetGraphPinPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetGraphPinPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetGraphPinPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetGraphPinPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetGraphPinPythonCallable
  }
}

@JsName("OnDisallowedPinConnection__PythonCallable")
public open external class OnDisallowedPinConnectionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDisallowedPinConnectionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDisallowedPinConnectionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDisallowedPinConnectionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDisallowedPinConnectionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDisallowedPinConnectionPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDisallowedPinConnectionPythonCallable
  }
}

@JsName("OnDropActor__PythonCallable")
public open external class OnDropActorPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDropActorPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDropActorPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDropActorPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDropActorPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDropActorPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDropActorPythonCallable
  }
}

@JsName("SetNodes__PythonCallable")
public open external class SetNodesPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SetNodesPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SetNodesPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SetNodesPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SetNodesPythonCallable

    @JsName("C")
    public fun copy(other: UObject): SetNodesPythonCallable

    @JsName("C")
    public fun copy(other: Any): SetNodesPythonCallable
  }
}

@JsName("SimpleDelegate__PythonCallable")
public open external class SimpleDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SimpleDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SimpleDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SimpleDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SimpleDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): SimpleDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): SimpleDelegatePythonCallable
  }
}

@JsName("SingleNode__PythonCallable")
public open external class SingleNodePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleNodePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleNodePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleNodePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleNodePythonCallable

    @JsName("C")
    public fun copy(other: UObject): SingleNodePythonCallable

    @JsName("C")
    public fun copy(other: Any): SingleNodePythonCallable
  }
}

@JsName("OnBuildMenu__PythonCallable")
public open external class OnBuildMenuPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnBuildMenuPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnBuildMenuPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnBuildMenuPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnBuildMenuPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnBuildMenuPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnBuildMenuPythonCallable
  }
}

@JsName("OnCanCreateConnection__PythonCallable")
public open external class OnCanCreateConnectionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnCanCreateConnectionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnCanCreateConnectionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnCanCreateConnectionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnCanCreateConnectionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnCanCreateConnectionPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnCanCreateConnectionPythonCallable
  }
}

@JsName("OnContextActions__PythonCallable")
public open external class OnContextActionsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnContextActionsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnContextActionsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnContextActionsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnContextActionsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnContextActionsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnContextActionsPythonCallable
  }
}

@JsName("OnCreateAutomaticConversionNodeAndConnections__PythonCallable")
public open external class OnCreateAutomaticConversionNodeAndConnectionsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String):
        OnCreateAutomaticConversionNodeAndConnectionsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnCreateAutomaticConversionNodeAndConnectionsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnCreateAutomaticConversionNodeAndConnectionsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnCreateAutomaticConversionNodeAndConnectionsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnCreateAutomaticConversionNodeAndConnectionsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnCreateAutomaticConversionNodeAndConnectionsPythonCallable
  }
}

@JsName("OnCreatePin__PythonCallable")
public open external class OnCreatePinPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnCreatePinPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnCreatePinPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnCreatePinPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnCreatePinPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnCreatePinPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnCreatePinPythonCallable
  }
}

@JsName("OnDetermineLinkGeometry__PythonCallable")
public open external class OnDetermineLinkGeometryPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDetermineLinkGeometryPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDetermineLinkGeometryPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDetermineLinkGeometryPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDetermineLinkGeometryPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDetermineLinkGeometryPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDetermineLinkGeometryPythonCallable
  }
}

@JsName("OnDetermineWiringStyle__PythonCallable")
public open external class OnDetermineWiringStylePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDetermineWiringStylePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDetermineWiringStylePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDetermineWiringStylePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDetermineWiringStylePythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDetermineWiringStylePythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDetermineWiringStylePythonCallable
  }
}

@JsName("OnDrawPreviewConnector__PythonCallable")
public open external class OnDrawPreviewConnectorPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDrawPreviewConnectorPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDrawPreviewConnectorPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDrawPreviewConnectorPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDrawPreviewConnectorPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDrawPreviewConnectorPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDrawPreviewConnectorPythonCallable
  }
}

@JsName("OnDrawSplineWithArrow__PythonCallable")
public open external class OnDrawSplineWithArrowPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDrawSplineWithArrowPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDrawSplineWithArrowPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDrawSplineWithArrowPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDrawSplineWithArrowPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDrawSplineWithArrowPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDrawSplineWithArrowPythonCallable
  }
}

@JsName("OnDrawSplineWithArrow_Geom__PythonCallable")
public open external class OnDrawSplineWithArrowGeomPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDrawSplineWithArrowGeomPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDrawSplineWithArrowGeomPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDrawSplineWithArrowGeomPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDrawSplineWithArrowGeomPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDrawSplineWithArrowGeomPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDrawSplineWithArrowGeomPythonCallable
  }
}

@JsName("OnEdNodeAction__PythonCallable")
public open external class OnEdNodeActionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnEdNodeActionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnEdNodeActionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnEdNodeActionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnEdNodeActionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnEdNodeActionPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnEdNodeActionPythonCallable
  }
}

@JsName("OnGetBoolean__PythonCallable")
public open external class OnGetBooleanPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetBooleanPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetBooleanPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetBooleanPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetBooleanPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetBooleanPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetBooleanPythonCallable
  }
}

@JsName("OnGetBoolean_GraphPin__PythonCallable")
public open external class OnGetBooleanGraphPinPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetBooleanGraphPinPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetBooleanGraphPinPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetBooleanGraphPinPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetBooleanGraphPinPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetBooleanGraphPinPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetBooleanGraphPinPythonCallable
  }
}

@JsName("OnGetBooleanMoveTo__PythonCallable")
public open external class OnGetBooleanMoveToPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetBooleanMoveToPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetBooleanMoveToPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetBooleanMoveToPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetBooleanMoveToPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetBooleanMoveToPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetBooleanMoveToPythonCallable
  }
}

@JsName("OnGetBooleanWidget__PythonCallable")
public open external class OnGetBooleanWidgetPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetBooleanWidgetPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetBooleanWidgetPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetBooleanWidgetPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetBooleanWidgetPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetBooleanWidgetPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetBooleanWidgetPythonCallable
  }
}

@JsName("OnGetCustomPinBoxWidget__PythonCallable")
public open external class OnGetCustomPinBoxWidgetPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetCustomPinBoxWidgetPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetCustomPinBoxWidgetPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetCustomPinBoxWidgetPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetCustomPinBoxWidgetPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetCustomPinBoxWidgetPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetCustomPinBoxWidgetPythonCallable
  }
}

@JsName("OnGetPinColor__PythonCallable")
public open external class OnGetPinColorPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetPinColorPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetPinColorPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetPinColorPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetPinColorPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetPinColorPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetPinColorPythonCallable
  }
}

@JsName("OnGetPins__PythonCallable")
public open external class OnGetPinsPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetPinsPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetPinsPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetPinsPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetPinsPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetPinsPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetPinsPythonCallable
  }
}

@JsName("OnGetSideMarginInPin__PythonCallable")
public open external class OnGetSideMarginInPinPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetSideMarginInPinPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetSideMarginInPinPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetSideMarginInPinPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetSideMarginInPinPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetSideMarginInPinPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetSideMarginInPinPythonCallable
  }
}

@JsName("OnGetSlateBrushName__PythonCallable")
public open external class OnGetSlateBrushNamePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetSlateBrushNamePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetSlateBrushNamePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetSlateBrushNamePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetSlateBrushNamePythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetSlateBrushNamePythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetSlateBrushNamePythonCallable
  }
}

@JsName("OnGetString__PythonCallable")
public open external class OnGetStringPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetStringPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetStringPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetStringPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetStringPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetStringPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetStringPythonCallable
  }
}

@JsName("OnMouseDragEvent__PythonCallable")
public open external class OnMouseDragEventPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnMouseDragEventPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnMouseDragEventPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnMouseDragEventPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnMouseDragEventPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnMouseDragEventPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnMouseDragEventPythonCallable
  }
}

@JsName("OnMouseEvent__PythonCallable")
public open external class OnMouseEventPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnMouseEventPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnMouseEventPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnMouseEventPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnMouseEventPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnMouseEventPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnMouseEventPythonCallable
  }
}

@JsName("OnMouseEventAdvanced__PythonCallable")
public open external class OnMouseEventAdvancedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnMouseEventAdvancedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnMouseEventAdvancedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnMouseEventAdvancedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnMouseEventAdvancedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnMouseEventAdvancedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnMouseEventAdvancedPythonCallable
  }
}

@JsName("OnPerformAction__PythonCallable")
public open external class OnPerformActionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnPerformActionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnPerformActionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnPerformActionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnPerformActionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnPerformActionPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnPerformActionPythonCallable
  }
}

@JsName("OnPerformSecondPassLayout__PythonCallable")
public open external class OnPerformSecondPassLayoutPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnPerformSecondPassLayoutPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnPerformSecondPassLayoutPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnPerformSecondPassLayoutPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnPerformSecondPassLayoutPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnPerformSecondPassLayoutPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnPerformSecondPassLayoutPythonCallable
  }
}

@JsName("OnPinConnectionListChanged__PythonCallable")
public open external class OnPinConnectionListChangedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnPinConnectionListChangedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnPinConnectionListChangedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnPinConnectionListChangedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnPinConnectionListChangedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnPinConnectionListChangedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnPinConnectionListChangedPythonCallable
  }
}

@JsName("OnShouldAlwaysPurgeOnModification__PythonCallable")
public open external class OnShouldAlwaysPurgeOnModificationPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnShouldAlwaysPurgeOnModificationPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        OnShouldAlwaysPurgeOnModificationPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnShouldAlwaysPurgeOnModificationPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnShouldAlwaysPurgeOnModificationPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnShouldAlwaysPurgeOnModificationPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnShouldAlwaysPurgeOnModificationPythonCallable
  }
}

@JsName("OnTakeContentWidget__PythonCallable")
public open external class OnTakeContentWidgetPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnTakeContentWidgetPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnTakeContentWidgetPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnTakeContentWidgetPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnTakeContentWidgetPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnTakeContentWidgetPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnTakeContentWidgetPythonCallable
  }
}

@JsName("OnTakeWidget__PythonCallable")
public open external class OnTakeWidgetPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnTakeWidgetPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnTakeWidgetPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnTakeWidgetPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnTakeWidgetPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnTakeWidgetPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnTakeWidgetPythonCallable
  }
}

@JsName("OnTryCreateConnection__PythonCallable")
public open external class OnTryCreateConnectionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnTryCreateConnectionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnTryCreateConnectionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnTryCreateConnectionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnTryCreateConnectionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnTryCreateConnectionPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnTryCreateConnectionPythonCallable
  }
}

@JsName("OnVectorArith__PythonCallable")
public open external class OnVectorArithPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnVectorArithPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnVectorArithPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnVectorArithPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnVectorArithPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnVectorArithPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnVectorArithPythonCallable
  }
}

@JsName("DynamicSimpleDelegate__PythonCallable")
public open external class DynamicSimpleDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicSimpleDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicSimpleDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicSimpleDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicSimpleDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): DynamicSimpleDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): DynamicSimpleDelegatePythonCallable
  }
}

@JsName("DynamicSimpleGetBoolDelegate__PythonCallable")
public open external class DynamicSimpleGetBoolDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicSimpleGetBoolDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        DynamicSimpleGetBoolDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicSimpleGetBoolDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicSimpleGetBoolDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): DynamicSimpleGetBoolDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): DynamicSimpleGetBoolDelegatePythonCallable
  }
}

@JsName("OnGenerateCustomCellWidget__PythonCallable")
public open external class OnGenerateCustomCellWidgetPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGenerateCustomCellWidgetPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGenerateCustomCellWidgetPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGenerateCustomCellWidgetPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGenerateCustomCellWidgetPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGenerateCustomCellWidgetPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGenerateCustomCellWidgetPythonCallable
  }
}

@JsName("OnUseCustomCellWidget__PythonCallable")
public open external class OnUseCustomCellWidgetPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnUseCustomCellWidgetPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnUseCustomCellWidgetPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnUseCustomCellWidgetPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnUseCustomCellWidgetPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnUseCustomCellWidgetPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnUseCustomCellWidgetPythonCallable
  }
}

@JsName("PropertyEditorPropertyChanged__PythonCallable")
public open external class PropertyEditorPropertyChangedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PropertyEditorPropertyChangedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        PropertyEditorPropertyChangedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyEditorPropertyChangedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyEditorPropertyChangedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): PropertyEditorPropertyChangedPythonCallable

    @JsName("C")
    public fun copy(other: Any): PropertyEditorPropertyChangedPythonCallable
  }
}

@JsName("PropertyEditorReadOnly__PythonCallable")
public open external class PropertyEditorReadOnlyPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PropertyEditorReadOnlyPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PropertyEditorReadOnlyPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyEditorReadOnlyPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyEditorReadOnlyPythonCallable

    @JsName("C")
    public fun copy(other: UObject): PropertyEditorReadOnlyPythonCallable

    @JsName("C")
    public fun copy(other: Any): PropertyEditorReadOnlyPythonCallable
  }
}

@JsName("OnBeforePopup__PythonCallable")
public open external class OnBeforePopupPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnBeforePopupPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnBeforePopupPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnBeforePopupPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnBeforePopupPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnBeforePopupPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnBeforePopupPythonCallable
  }
}

@JsName("OnUrlChanged__PythonCallable")
public open external class OnUrlChangedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnUrlChangedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnUrlChangedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnUrlChangedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnUrlChangedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnUrlChangedPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnUrlChangedPythonCallable
  }
}

@JsName("OnHook__PythonCallable")
public open external class OnHookPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnHookPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnHookPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnHookPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnHookPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnHookPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnHookPythonCallable
  }
}

@JsName("JavascriptCanExecuteAction__PythonCallable")
public open external class JavascriptCanExecuteActionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptCanExecuteActionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptCanExecuteActionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptCanExecuteActionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptCanExecuteActionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptCanExecuteActionPythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptCanExecuteActionPythonCallable
  }
}

@JsName("JavascriptExecuteAction__PythonCallable")
public open external class JavascriptExecuteActionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JavascriptExecuteActionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JavascriptExecuteActionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptExecuteActionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JavascriptExecuteActionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): JavascriptExecuteActionPythonCallable

    @JsName("C")
    public fun copy(other: Any): JavascriptExecuteActionPythonCallable
  }
}

@JsName("OnClick_Backward__PythonCallable")
public open external class OnClickBackwardPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnClickBackwardPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnClickBackwardPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnClickBackwardPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnClickBackwardPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnClickBackwardPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnClickBackwardPythonCallable
  }
}

@JsName("OnClick_Backward_End__PythonCallable")
public open external class OnClickBackwardEndPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnClickBackwardEndPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnClickBackwardEndPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnClickBackwardEndPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnClickBackwardEndPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnClickBackwardEndPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnClickBackwardEndPythonCallable
  }
}

@JsName("OnClick_Backward_Step__PythonCallable")
public open external class OnClickBackwardStepPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnClickBackwardStepPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnClickBackwardStepPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnClickBackwardStepPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnClickBackwardStepPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnClickBackwardStepPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnClickBackwardStepPythonCallable
  }
}

@JsName("OnClick_Forward__PythonCallable")
public open external class OnClickForwardPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnClickForwardPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnClickForwardPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnClickForwardPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnClickForwardPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnClickForwardPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnClickForwardPythonCallable
  }
}

@JsName("OnClick_Forward_End__PythonCallable")
public open external class OnClickForwardEndPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnClickForwardEndPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnClickForwardEndPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnClickForwardEndPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnClickForwardEndPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnClickForwardEndPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnClickForwardEndPythonCallable
  }
}

@JsName("OnClick_Forward_Step__PythonCallable")
public open external class OnClickForwardStepPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnClickForwardStepPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnClickForwardStepPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnClickForwardStepPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnClickForwardStepPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnClickForwardStepPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnClickForwardStepPythonCallable
  }
}

@JsName("OnClick_ToggleLoop__PythonCallable")
public open external class OnClickToggleLoopPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnClickToggleLoopPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnClickToggleLoopPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnClickToggleLoopPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnClickToggleLoopPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnClickToggleLoopPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnClickToggleLoopPythonCallable
  }
}

@JsName("SetPlaybackPosition__PythonCallable")
public open external class SetPlaybackPositionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SetPlaybackPositionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SetPlaybackPositionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SetPlaybackPositionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SetPlaybackPositionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): SetPlaybackPositionPythonCallable

    @JsName("C")
    public fun copy(other: Any): SetPlaybackPositionPythonCallable
  }
}

@JsName("CustomChildren__PythonCallable")
public open external class CustomChildrenPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CustomChildrenPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CustomChildrenPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CustomChildrenPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CustomChildrenPythonCallable

    @JsName("C")
    public fun copy(other: UObject): CustomChildrenPythonCallable

    @JsName("C")
    public fun copy(other: Any): CustomChildrenPythonCallable
  }
}

@JsName("CustomHeader__PythonCallable")
public open external class CustomHeaderPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CustomHeaderPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CustomHeaderPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CustomHeaderPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CustomHeaderPythonCallable

    @JsName("C")
    public fun copy(other: UObject): CustomHeaderPythonCallable

    @JsName("C")
    public fun copy(other: Any): CustomHeaderPythonCallable
  }
}

@JsName("OnDestroy__PythonCallable")
public open external class OnDestroyPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDestroyPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDestroyPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDestroyPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDestroyPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDestroyPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDestroyPythonCallable
  }
}

@JsName("CheckDelegate__PythonCallable")
public open external class CheckDelegatePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CheckDelegatePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CheckDelegatePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CheckDelegatePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CheckDelegatePythonCallable

    @JsName("C")
    public fun copy(other: UObject): CheckDelegatePythonCallable

    @JsName("C")
    public fun copy(other: Any): CheckDelegatePythonCallable
  }
}

@JsName("OnNewLogMessage__PythonCallable")
public open external class OnNewLogMessagePythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnNewLogMessagePythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnNewLogMessagePythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnNewLogMessagePythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnNewLogMessagePythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnNewLogMessagePythonCallable

    @JsName("C")
    public fun copy(other: Any): OnNewLogMessagePythonCallable
  }
}

@JsName("ActorDuplicated__PythonCallable")
public open external class ActorDuplicatedPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorDuplicatedPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorDuplicatedPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorDuplicatedPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorDuplicatedPythonCallable

    @JsName("C")
    public fun copy(other: UObject): ActorDuplicatedPythonCallable

    @JsName("C")
    public fun copy(other: Any): ActorDuplicatedPythonCallable
  }
}

@JsName("OnClick__PythonCallable")
public open external class OnClickPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnClickPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnClickPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnClickPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnClickPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnClickPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnClickPythonCallable
  }
}

@JsName("OnDraw__PythonCallable")
public open external class OnDrawPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDrawPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDrawPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDrawPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDrawPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDrawPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDrawPythonCallable
  }
}

@JsName("OnDrawHUD__PythonCallable")
public open external class OnDrawHudPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnDrawHudPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnDrawHudPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnDrawHudPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnDrawHudPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnDrawHudPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnDrawHudPythonCallable
  }
}

@JsName("OnGetAction__PythonCallable")
public open external class OnGetActionPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetActionPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetActionPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetActionPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetActionPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetActionPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetActionPythonCallable
  }
}

@JsName("OnGetWidget__PythonCallable")
public open external class OnGetWidgetPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnGetWidgetPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnGetWidgetPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnGetWidgetPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnGetWidgetPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnGetWidgetPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnGetWidgetPythonCallable
  }
}

@JsName("OnIsCompatibleWith__PythonCallable")
public open external class OnIsCompatibleWithPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnIsCompatibleWithPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnIsCompatibleWithPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnIsCompatibleWithPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnIsCompatibleWithPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnIsCompatibleWithPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnIsCompatibleWithPythonCallable
  }
}

@JsName("OnProcess__PythonCallable")
public open external class OnProcessPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnProcessPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnProcessPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnProcessPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnProcessPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnProcessPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnProcessPythonCallable
  }
}

@JsName("OnSelect__PythonCallable")
public open external class OnSelectPythonCallable(
  outer: UObject,
) : PythonCallableForDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnSelectPythonCallable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnSelectPythonCallable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnSelectPythonCallable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnSelectPythonCallable

    @JsName("C")
    public fun copy(other: UObject): OnSelectPythonCallable

    @JsName("C")
    public fun copy(other: Any): OnSelectPythonCallable
  }
}
