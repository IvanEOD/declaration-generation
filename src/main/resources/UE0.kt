// Generated by Detonate Productions Declaration Generation, do not edit manually!
@file:Suppress(
  "INTERFACE_WITH_SUPERCLASS",
  "OVERRIDING_FINAL_MEMBER",
  "RETURN_TYPE_MISMATCH_ON_OVERRIDE",
  "CONFLICTING_OVERLOADS",
)

package ue


import kotlin.js.Console
import org.khronos.webgl.ArrayBuffer


public open external class UnrealEngineMulticastDelegate<T> {
  @JsName("Add")
  public open fun add(fn: T): Unit

  @JsName("Remove")
  public open fun remove(fn: T): Unit
}

public open external class UnrealEngineDelegate<T> {
  @JsName("Add")
  public open fun add(fn: T): Unit

  @JsName("Remove")
  public open fun remove(fn: T): Unit
}

public open external class Process {
  public open fun nextTick(fn: (number: Any) -> Unit): Unit
}

public open external class Memory {
  public open fun exec(ab: ArrayBuffer, fn: (ab: ArrayBuffer) -> Unit): Unit

  public open fun access(obj: JavascriptMemoryObject): ArrayBuffer
}

@JsName("ECastToControlRigBlueprintCases")
public external object CastToControlRigBlueprintCases {
  @JsName("CastSucceeded")
  public var Succeeded: String

  @JsName("CastFailed")
  public var Failed: String

  @JsName("ECastToControlRigBlueprintCases_MAX")
  public var Max: String
}

@JsName("T$0")
public external interface GuidProvider {
  @JsName("InGuid")
  public var inGuid: Guid
}

public open external class Guid {
  @JsName("A")
  public open var a: Number

  @JsName("B")
  public open var b: Number

  @JsName("C")
  public open var c: Number

  @JsName("D")
  public open var d: Number

  public open fun clone(): Guid

  @JsName("Conv_GuidToString")
  public open fun convertGuidToString(): String

  @JsName("EqualEqual_GuidGuid")
  public open fun equalEqualGuidGuid(b: Guid): Boolean

  @JsName("Invalidate_Guid")
  public open fun invalidateGuid(): GuidProvider

  @JsName("IsValid_Guid")
  public open fun isValidGuid(): Boolean

  @JsName("NotEqual_GuidGuid")
  public open fun notEqualGuidGuid(b: Guid): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Guid

    @JsName("C")
    public fun copy(other: Any): Guid

    @JsName("Conv_GuidToString")
    public fun convertGuidToString(inGuid: Guid): String

    @JsName("EqualEqual_GuidGuid")
    public fun equalEqualGuidGuid(a: Guid, b: Guid): Boolean

    @JsName("Invalidate_Guid")
    public fun invalidateGuid(inGuid: Guid): GuidProvider

    @JsName("IsValid_Guid")
    public fun isValidGuid(inGuid: Guid): Boolean

    @JsName("NotEqual_GuidGuid")
    public fun notEqualGuidGuid(a: Guid, b: Guid): Boolean

    @JsName("NewGuid")
    public fun newGuid(): Guid
  }
}

public open external class BlueprintCore(
  outer: UObject,
) : UObject {
  @JsName("SkeletonGeneratedClass")
  public open var skeletonGeneratedClass: UnrealEngineClass

  @JsName("GeneratedClass")
  public open var generatedClass: UnrealEngineClass

  @JsName("bLegacyNeedToPurgeSkelRefs")
  public open var legacyNeedToPurgeSkelRefs: Boolean

  @JsName("BlueprintGuid")
  public open var blueprintGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintCore

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintCore

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintCore

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintCore

    @JsName("C")
    public fun copy(other: UObject): BlueprintCore

    @JsName("C")
    public fun copy(other: Any): BlueprintCore
  }
}

@JsName("EBlueprintType")
public external object BlueprintType {
  @JsName("BPTYPE_Normal")
  public var Normal: String

  @JsName("BPTYPE_Const")
  public var Const: String

  @JsName("BPTYPE_MacroLibrary")
  public var MacroLibrary: String

  @JsName("BPTYPE_Interface")
  public var Interface: String

  @JsName("BPTYPE_LevelScript")
  public var LevelScript: String

  @JsName("BPTYPE_FunctionLibrary")
  public var FunctionLibrary: String

  @JsName("BPTYPE_MAX")
  public var Max: String
}

@JsName("EBlueprintNativizationFlag")
public external object BlueprintNativizationFlag {
  public var Disabled: String

  public var Dependency: String

  public var ExplicitlyEnabled: String

  @JsName("EBlueprintNativizationFlag_MAX")
  public var Max: String
}

@JsName("EBlueprintCompileMode")
public external object BlueprintCompileMode {
  public var Default: String

  public var Development: String

  public var FinalRelease: String

  @JsName("EBlueprintCompileMode_MAX")
  public var Max: String
}

@JsName("EBlueprintStatus")
public external object BlueprintStatus {
  @JsName("BS_Unknown")
  public var Unknown: String

  @JsName("BS_Dirty")
  public var Dirty: String

  @JsName("BS_Error")
  public var Error: String

  @JsName("BS_UpToDate")
  public var UpToDate: String

  @JsName("BS_BeingCreated")
  public var BeingCreated: String

  @JsName("BS_UpToDateWithWarnings")
  public var UpToDateWithWarnings: String

  @JsName("BS_MAX")
  public var Max: String
}

@JsName("ETickingGroup")
public external object TickingGroup {
  @JsName("TG_PrePhysics")
  public var PrePhysics: String

  @JsName("TG_StartPhysics")
  public var StartPhysics: String

  @JsName("TG_DuringPhysics")
  public var DuringPhysics: String

  @JsName("TG_EndPhysics")
  public var EndPhysics: String

  @JsName("TG_PostPhysics")
  public var PostPhysics: String

  @JsName("TG_PostUpdateWork")
  public var PostUpdateWork: String

  @JsName("TG_LastDemotable")
  public var LastDemotable: String

  @JsName("TG_NewlySpawned")
  public var NewlySpawned: String

  @JsName("TG_MAX")
  public var Max: String
}

public open external class TickFunction {
  @JsName("TickGroup")
  public open var tickGroup: String

  @JsName("EndTickGroup")
  public open var endTickGroup: String

  @JsName("bTickEvenWhenPaused")
  public open var tickEvenWhenPaused: Boolean

  @JsName("bCanEverTick")
  public open var canEverTick: Boolean

  @JsName("bStartWithTickEnabled")
  public open var startWithTickEnabled: Boolean

  @JsName("bAllowTickOnDedicatedServer")
  public open var allowTickOnDedicatedServer: Boolean

  @JsName("TickInterval")
  public open var tickInterval: Number

  public open fun clone(): TickFunction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TickFunction

    @JsName("C")
    public fun copy(other: Any): TickFunction
  }
}

public open external class ActorComponentTickFunction : TickFunction {
  public override fun clone(): ActorComponentTickFunction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorComponentTickFunction

    @JsName("C")
    public fun copy(other: Any): ActorComponentTickFunction
  }
}

public open external class AssetUserData(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetUserData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetUserData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetUserData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetUserData

    @JsName("C")
    public fun copy(other: UObject): AssetUserData

    @JsName("C")
    public fun copy(other: Any): AssetUserData
  }
}

@JsName("EComponentCreationMethod")
public external object ComponentCreationMethod {
  public var Native: String

  public var SimpleConstructionScript: String

  public var UserConstructionScript: String

  public var Instance: String

  @JsName("EComponentCreationMethod_MAX")
  public var Max: String
}

public open external class SimpleMemberReference {
  @JsName("MemberParent")
  public open var memberParent: UObject

  @JsName("MemberName")
  public open var memberName: String

  @JsName("MemberGuid")
  public open var memberGuid: Guid

  public open fun clone(): SimpleMemberReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SimpleMemberReference

    @JsName("C")
    public fun copy(other: Any): SimpleMemberReference
  }
}

public open external class ActorTickFunction : TickFunction {
  public override fun clone(): ActorTickFunction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorTickFunction

    @JsName("C")
    public fun copy(other: Any): ActorTickFunction
  }
}

@JsName("EActorUpdateOverlapsMethod")
public external object ActorUpdateOverlapsMethod {
  public var UseConfigDefault: String

  public var AlwaysUpdate: String

  public var OnlyUpdateMovable: String

  public var NeverUpdate: String

  @JsName("EActorUpdateOverlapsMethod_MAX")
  public var Max: String
}

@JsName("ENetRole")
public external object NetRole {
  @JsName("ROLE_None")
  public var None: String

  @JsName("ROLE_SimulatedProxy")
  public var SimulatedProxy: String

  @JsName("ROLE_AutonomousProxy")
  public var AutonomousProxy: String

  @JsName("ROLE_Authority")
  public var Authority: String

  @JsName("ROLE_MAX")
  public var Max: String
}

public open external class IntPoint {
  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  public open fun clone(): IntPoint

  @JsName("Conv_IntPointToString")
  public open fun convertIntPointToString(): String

  @JsName("Add_IntPointInt")
  public open fun addIntPointInt(b: Number): IntPoint

  @JsName("Add_IntPointIntPoint")
  public open fun addIntPointIntPoint(b: IntPoint): IntPoint

  @JsName("Conv_IntPointToVector2D")
  public open fun convertIntPointToVector2d(): Vector2d

  @JsName("Divide_IntPointInt")
  public open fun divideIntPointInt(b: Number): IntPoint

  @JsName("Divide_IntPointIntPoint")
  public open fun divideIntPointIntPoint(b: IntPoint): IntPoint

  @JsName("Equal_IntPointIntPoint")
  public open fun equalIntPointIntPoint(b: IntPoint): Boolean

  @JsName("Multiply_IntPointInt")
  public open fun multiplyIntPointInt(b: Number): IntPoint

  @JsName("Multiply_IntPointIntPoint")
  public open fun multiplyIntPointIntPoint(b: IntPoint): IntPoint

  @JsName("NotEqual_IntPointIntPoint")
  public open fun notEqualIntPointIntPoint(b: IntPoint): Boolean

  @JsName("Subtract_IntPointInt")
  public open fun subtractIntPointInt(b: Number): IntPoint

  @JsName("Subtract_IntPointIntPoint")
  public open fun subtractIntPointIntPoint(b: IntPoint): IntPoint

  @JsName("ResizeXRCamera")
  public open fun resizeXrCamera(): IntPoint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IntPoint

    @JsName("C")
    public fun copy(other: Any): IntPoint

    @JsName("Conv_IntPointToString")
    public fun convertIntPointToString(inIntPoint: IntPoint): String

    @JsName("Add_IntPointInt")
    public fun addIntPointInt(a: IntPoint, b: Number): IntPoint

    @JsName("Add_IntPointIntPoint")
    public fun addIntPointIntPoint(a: IntPoint, b: IntPoint): IntPoint

    @JsName("Conv_IntPointToVector2D")
    public fun convertIntPointToVector2d(inIntPoint: IntPoint): Vector2d

    @JsName("Divide_IntPointInt")
    public fun divideIntPointInt(a: IntPoint, b: Number): IntPoint

    @JsName("Divide_IntPointIntPoint")
    public fun divideIntPointIntPoint(a: IntPoint, b: IntPoint): IntPoint

    @JsName("Equal_IntPointIntPoint")
    public fun equalIntPointIntPoint(a: IntPoint, b: IntPoint): Boolean

    @JsName("Multiply_IntPointInt")
    public fun multiplyIntPointInt(a: IntPoint, b: Number): IntPoint

    @JsName("Multiply_IntPointIntPoint")
    public fun multiplyIntPointIntPoint(a: IntPoint, b: IntPoint): IntPoint

    @JsName("NotEqual_IntPointIntPoint")
    public fun notEqualIntPointIntPoint(a: IntPoint, b: IntPoint): Boolean

    @JsName("Subtract_IntPointInt")
    public fun subtractIntPointInt(a: IntPoint, b: Number): IntPoint

    @JsName("Subtract_IntPointIntPoint")
    public fun subtractIntPointIntPoint(a: IntPoint, b: IntPoint): IntPoint

    @JsName("ResizeXRCamera")
    public fun resizeXrCamera(inSize: IntPoint): IntPoint

    @JsName("IntPoint_Down")
    public fun intPointDown(): IntPoint

    @JsName("IntPoint_Left")
    public fun intPointLeft(): IntPoint

    @JsName("IntPoint_One")
    public fun intPointOne(): IntPoint

    @JsName("IntPoint_Right")
    public fun intPointRight(): IntPoint

    @JsName("IntPoint_Up")
    public fun intPointUp(): IntPoint

    @JsName("IntPoint_Zero")
    public fun intPointZero(): IntPoint
  }
}

@JsName("Box2D")
public open external class Box2d {
  @JsName("Min")
  public open var min: Vector2d

  @JsName("Max")
  public open var max: Vector2d

  @JsName("bIsValid")
  public open var isValid: Number

  public open fun clone(): Box2d

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Box2d

    @JsName("C")
    public fun copy(other: Any): Box2d
  }
}

@JsName("EARLineTraceChannels")
public external object ARLineTraceChannels {
  public var None: String

  public var FeaturePoint: String

  public var GroundPlane: String

  public var PlaneUsingExtent: String

  public var PlaneUsingBoundaryPolygon: String

  @JsName("EARLineTraceChannels_MAX")
  public var Max: String
}

@JsName("EEasingFunc")
public external object EasingFunc {
  public var Linear: String

  public var Step: String

  public var SinusoidalIn: String

  public var SinusoidalOut: String

  public var SinusoidalInOut: String

  public var EaseIn: String

  public var EaseOut: String

  public var EaseInOut: String

  public var ExpoIn: String

  public var ExpoOut: String

  public var ExpoInOut: String

  public var CircularIn: String

  public var CircularOut: String

  public var CircularInOut: String

  @JsName("EEasingFunc_MAX")
  public var Max: String
}

@JsName("T$1")
public external interface InitialSeedProvider {
  @JsName("InitialSeed")
  public var initialSeed: Number
}

@JsName("T$2")
public external interface RandomStreamProvider {
  @JsName("Stream")
  public var stream: RandomStream
}

public open external class RandomStream {
  @JsName("InitialSeed")
  public open var initialSeed: Number

  @JsName("Seed")
  public open var seed: Number

  public open fun clone(): RandomStream

  @JsName("BreakRandomStream")
  public open fun breakRandomStream(initialSeed: Number): InitialSeedProvider

  @JsName("RandomBoolFromStream")
  public open fun randomBoolFromStream(): Boolean

  @JsName("RandomFloatFromStream")
  public open fun randomFloatFromStream(): Number

  @JsName("RandomUnitVectorFromStream")
  public open fun randomUnitVectorFromStream(): Vector

  @JsName("ResetRandomStream")
  public open fun resetRandomStream(): Unit

  @JsName("SeedRandomStream")
  public open fun seedRandomStream(): RandomStreamProvider

  @JsName("SetRandomStreamSeed")
  public open fun setRandomStreamSeed(newSeed: Number): RandomStreamProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RandomStream

    @JsName("C")
    public fun copy(other: Any): RandomStream

    @JsName("BreakRandomStream")
    public fun breakRandomStream(inRandomStream: RandomStream, initialSeed: Number):
        InitialSeedProvider

    @JsName("RandomBoolFromStream")
    public fun randomBoolFromStream(stream: RandomStream): Boolean

    @JsName("RandomFloatFromStream")
    public fun randomFloatFromStream(stream: RandomStream): Number

    @JsName("RandomUnitVectorFromStream")
    public fun randomUnitVectorFromStream(stream: RandomStream): Vector

    @JsName("ResetRandomStream")
    public fun resetRandomStream(stream: RandomStream): Unit

    @JsName("SeedRandomStream")
    public fun seedRandomStream(stream: RandomStream): RandomStreamProvider

    @JsName("SetRandomStreamSeed")
    public fun setRandomStreamSeed(stream: RandomStream, newSeed: Number): RandomStreamProvider

    @JsName("MakeRandomStream")
    public fun makeRandomStream(initialSeed: Number): RandomStream
  }
}

@JsName("T$3")
public external interface RotationProvider {
  @JsName("Roll")
  public var roll: Number

  @JsName("Pitch")
  public var pitch: Number

  @JsName("Yaw")
  public var yaw: Number
}

@JsName("T$4")
public external interface AxesProvider {
  @JsName("X")
  public var x: Vector

  @JsName("Y")
  public var y: Vector

  @JsName("Z")
  public var z: Vector
}

@JsName("T$5")
public external interface OrientationAndPositionProvider {
  @JsName("DeviceRotation")
  public var deviceRotation: Rotator

  @JsName("DevicePosition")
  public var devicePosition: Vector
}

public open external class Rotator {
  @JsName("Pitch")
  public open var pitch: Any

  @JsName("Yaw")
  public open var yaw: Any

  @JsName("Roll")
  public open var roll: Any

  public open fun clone(): Rotator

  @JsName("Conv_RotatorToText")
  public open fun convertRotatorToText(): String

  @JsName("Conv_RotatorToString")
  public open fun convertRotatorToString(): String

  @JsName("BreakRotator")
  public open fun breakRotator(
    roll: Number,
    pitch: Number,
    yaw: Number,
  ): RotationProvider

  @JsName("BreakRotIntoAxes")
  public open fun breakRotIntoAxes(
    x: Vector,
    y: Vector,
    z: Vector,
  ): AxesProvider

  @JsName("ComposeRotators")
  public open fun composeRotators(b: Rotator): Rotator

  @JsName("Conv_RotatorToQuaternion")
  public open fun convertRotatorToQuaternion(): Quat

  @JsName("Conv_RotatorToTransform")
  public open fun convertRotatorToTransform(): Transform

  @JsName("Conv_RotatorToVector")
  public open fun convertRotatorToVector(): Vector

  @JsName("DynamicWeightedMovingAverage_FRotator")
  public open fun dynamicWeightedMovingAverageFRotator(
    previousSample: Rotator,
    maxDistance: Number,
    minWeight: Number,
    maxWeight: Number,
  ): Rotator

  @JsName("EqualEqual_RotatorRotator")
  public open fun equalEqualRotatorRotator(b: Rotator, errorTolerance: Number): Boolean

  @JsName("GetAxes")
  public open fun getAxes(
    x: Vector,
    y: Vector,
    z: Vector,
  ): AxesProvider

  @JsName("GetForwardVector")
  public open fun getForwardVector(): Vector

  @JsName("GetRightVector")
  public open fun getRightVector(): Vector

  @JsName("GetUpVector")
  public open fun getUpVector(): Vector

  @JsName("Multiply_RotatorFloat")
  public open fun multiplyRotatorFloat(b: Number): Rotator

  @JsName("Multiply_RotatorInt")
  public open fun multiplyRotatorInt(b: Number): Rotator

  @JsName("NegateRotator")
  public open fun negateRotator(): Rotator

  @JsName("NormalizedDeltaRotator")
  public open fun normalizedDeltaRotator(b: Rotator): Rotator

  @JsName("NotEqual_RotatorRotator")
  public open fun notEqualRotatorRotator(b: Rotator, errorTolerance: Number): Boolean

  @JsName("REase")
  public open fun rEase(
    b: Rotator,
    alpha: Number,
    shortestPath: Boolean,
    easingFunc: String,
    blendExp: Number,
    steps: Number,
  ): Rotator

  @JsName("RInterpTo")
  public open fun rInterpTo(
    target: Rotator,
    deltaTime: Number,
    interpSpeed: Number,
  ): Rotator

  @JsName("RInterpTo_Constant")
  public open fun rInterpToConstant(
    target: Rotator,
    deltaTime: Number,
    interpSpeed: Number,
  ): Rotator

  @JsName("RLerp")
  public open fun rLerp(
    b: Rotator,
    alpha: Number,
    shortestPath: Boolean,
  ): Rotator

  @JsName("SelectRotator")
  public open fun selectRotator(b: Rotator, pickA: Boolean): Rotator

  @JsName("WeightedMovingAverage_FRotator")
  public open fun weightedMovingAverageFRotator(previousSample: Rotator, weight: Number): Rotator

  @JsName("IsValidAIRotation")
  public open fun isValidAiRotation(): Boolean

  @JsName("GetOrientationAndPosition")
  public open fun getOrientationAndPosition(devicePosition: Vector): OrientationAndPositionProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Rotator

    @JsName("C")
    public fun copy(other: Any): Rotator

    @JsName("Conv_RotatorToText")
    public fun convertRotatorToText(inRot: Rotator): String

    @JsName("Conv_RotatorToString")
    public fun convertRotatorToString(inRot: Rotator): String

    @JsName("BreakRotator")
    public fun breakRotator(
      inRot: Rotator,
      roll: Number,
      pitch: Number,
      yaw: Number,
    ): RotationProvider

    @JsName("BreakRotIntoAxes")
    public fun breakRotIntoAxes(
      inRot: Rotator,
      x: Vector,
      y: Vector,
      z: Vector,
    ): AxesProvider

    @JsName("ComposeRotators")
    public fun composeRotators(a: Rotator, b: Rotator): Rotator

    @JsName("Conv_RotatorToQuaternion")
    public fun convertRotatorToQuaternion(inRot: Rotator): Quat

    @JsName("Conv_RotatorToTransform")
    public fun convertRotatorToTransform(inRotator: Rotator): Transform

    @JsName("Conv_RotatorToVector")
    public fun convertRotatorToVector(inRot: Rotator): Vector

    @JsName("DynamicWeightedMovingAverage_FRotator")
    public fun dynamicWeightedMovingAverageFRotator(
      currentSample: Rotator,
      previousSample: Rotator,
      maxDistance: Number,
      minWeight: Number,
      maxWeight: Number,
    ): Rotator

    @JsName("EqualEqual_RotatorRotator")
    public fun equalEqualRotatorRotator(
      a: Rotator,
      b: Rotator,
      errorTolerance: Number,
    ): Boolean

    @JsName("GetAxes")
    public fun getAxes(
      a: Rotator,
      x: Vector,
      y: Vector,
      z: Vector,
    ): AxesProvider

    @JsName("GetForwardVector")
    public fun getForwardVector(inRot: Rotator): Vector

    @JsName("GetRightVector")
    public fun getRightVector(inRot: Rotator): Vector

    @JsName("GetUpVector")
    public fun getUpVector(inRot: Rotator): Vector

    @JsName("Multiply_RotatorFloat")
    public fun multiplyRotatorFloat(a: Rotator, b: Number): Rotator

    @JsName("Multiply_RotatorInt")
    public fun multiplyRotatorInt(a: Rotator, b: Number): Rotator

    @JsName("NegateRotator")
    public fun negateRotator(a: Rotator): Rotator

    @JsName("NormalizedDeltaRotator")
    public fun normalizedDeltaRotator(a: Rotator, b: Rotator): Rotator

    @JsName("NotEqual_RotatorRotator")
    public fun notEqualRotatorRotator(
      a: Rotator,
      b: Rotator,
      errorTolerance: Number,
    ): Boolean

    @JsName("REase")
    public fun rEase(
      a: Rotator,
      b: Rotator,
      alpha: Number,
      shortestPath: Boolean,
      easingFunc: String,
      blendExp: Number,
      steps: Number,
    ): Rotator

    @JsName("RInterpTo")
    public fun rInterpTo(
      current: Rotator,
      target: Rotator,
      deltaTime: Number,
      interpSpeed: Number,
    ): Rotator

    @JsName("RInterpTo_Constant")
    public fun rInterpToConstant(
      current: Rotator,
      target: Rotator,
      deltaTime: Number,
      interpSpeed: Number,
    ): Rotator

    @JsName("RLerp")
    public fun rLerp(
      a: Rotator,
      b: Rotator,
      alpha: Number,
      shortestPath: Boolean,
    ): Rotator

    @JsName("SelectRotator")
    public fun selectRotator(
      a: Rotator,
      b: Rotator,
      pickA: Boolean,
    ): Rotator

    @JsName("WeightedMovingAverage_FRotator")
    public fun weightedMovingAverageFRotator(
      currentSample: Rotator,
      previousSample: Rotator,
      weight: Number,
    ): Rotator

    @JsName("IsValidAIRotation")
    public fun isValidAiRotation(rotation: Rotator): Boolean

    @JsName("GetOrientationAndPosition")
    public fun getOrientationAndPosition(deviceRotation: Rotator, devicePosition: Vector):
        OrientationAndPositionProvider

    @JsName("MakeRotator")
    public fun makeRotator(
      roll: Number,
      pitch: Number,
      yaw: Number,
    ): Rotator

    @JsName("RandomRotator")
    public fun randomRotator(roll: Boolean): Rotator

    @JsName("RandomRotatorFromStream")
    public fun randomRotatorFromStream(roll: Boolean, stream: RandomStream): Rotator
  }
}

@JsName("T$6")
public external interface SpringStateProvider {
  @JsName("SpringState")
  public var springState: QuaternionSpringState
}

public open external class QuaternionSpringState {
  public open fun clone(): QuaternionSpringState

  @JsName("ResetQuaternionSpringState")
  public open fun resetQuaternionSpringState(): SpringStateProvider

  @JsName("SetQuaternionSpringStateAngularVelocity")
  public open fun setQuaternionSpringStateAngularVelocity(angularVelocity: Vector):
      SpringStateProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): QuaternionSpringState

    @JsName("C")
    public fun copy(other: Any): QuaternionSpringState

    @JsName("ResetQuaternionSpringState")
    public fun resetQuaternionSpringState(springState: QuaternionSpringState): SpringStateProvider

    @JsName("SetQuaternionSpringStateAngularVelocity")
    public fun setQuaternionSpringStateAngularVelocity(springState: QuaternionSpringState,
        angularVelocity: Vector): SpringStateProvider
  }
}

@JsName("T$7")
public external interface Object7 {
  @JsName("X")
  public var x: Number

  @JsName("Y")
  public var y: Number

  @JsName("Z")
  public var z: Number

  @JsName("W")
  public var w: Number
}

@JsName("T$8")
public external interface Object8 {
  @JsName("A")
  public var a: Quat
}

@JsName("T$9")
public external interface QuatProvider {
  @JsName("Q")
  public var q: Quat
}

@JsName("T$10")
public external interface Object10 {
  @JsName("SpringState")
  public var springState: QuaternionSpringState

  @JsName("$")
  public var value: Quat
}

public open external class Quat {
  @JsName("X")
  public open var x: Any

  @JsName("Y")
  public open var y: Any

  @JsName("Z")
  public open var z: Any

  @JsName("W")
  public open var w: Any

  public open fun clone(): Quat

  @JsName("Add_QuatQuat")
  public open fun addQuatQuat(b: Quat): Quat

  @JsName("BreakQuat")
  public open fun breakQuat(
    x: Number,
    y: Number,
    z: Number,
    w: Number,
  ): Object7

  @JsName("EqualEqual_QuatQuat")
  public open fun equalEqualQuatQuat(b: Quat, tolerance: Number): Boolean

  @JsName("Multiply_QuatQuat")
  public open fun multiplyQuatQuat(b: Quat): Quat

  @JsName("NotEqual_QuatQuat")
  public open fun notEqualQuatQuat(b: Quat, errorTolerance: Number): Boolean

  @JsName("Quat_AngularDistance")
  public open fun quatAngularDistance(b: Quat): Number

  @JsName("Quat_EnforceShortestArcWith")
  public open fun quatEnforceShortestArcWith(b: Quat): Object8

  @JsName("Quat_Euler")
  public open fun quatEuler(): Vector

  @JsName("Quat_Exp")
  public open fun quatExp(): Quat

  @JsName("Quat_GetAngle")
  public open fun quatGetAngle(): Number

  @JsName("Quat_GetAxisX")
  public open fun quatGetAxisX(): Vector

  @JsName("Quat_GetAxisY")
  public open fun quatGetAxisY(): Vector

  @JsName("Quat_GetAxisZ")
  public open fun quatGetAxisZ(): Vector

  @JsName("Quat_GetRotationAxis")
  public open fun quatGetRotationAxis(): Vector

  @JsName("Quat_Inversed")
  public open fun quatInversed(): Quat

  @JsName("Quat_IsFinite")
  public open fun quatIsFinite(): Boolean

  @JsName("Quat_IsIdentity")
  public open fun quatIsIdentity(tolerance: Number): Boolean

  @JsName("Quat_IsNonFinite")
  public open fun quatIsNonFinite(): Boolean

  @JsName("Quat_IsNormalized")
  public open fun quatIsNormalized(): Boolean

  @JsName("Quat_Log")
  public open fun quatLog(): Quat

  @JsName("Quat_Normalize")
  public open fun quatNormalize(tolerance: Number): QuatProvider

  @JsName("Quat_Normalized")
  public open fun quatNormalized(tolerance: Number): Quat

  @JsName("Quat_RotateVector")
  public open fun quatRotateVector(v: Vector): Vector

  @JsName("Quat_Rotator")
  public open fun quatRotator(): Rotator

  @JsName("Quat_SetComponents")
  public open fun quatSetComponents(
    x: Number,
    y: Number,
    z: Number,
    w: Number,
  ): QuatProvider

  @JsName("Quat_SetFromEuler")
  public open fun quatSetFromEuler(euler: Vector): QuatProvider

  @JsName("Quat_Size")
  public open fun quatSize(): Number

  @JsName("Quat_SizeSquared")
  public open fun quatSizeSquared(): Number

  @JsName("Quat_UnrotateVector")
  public open fun quatUnrotateVector(v: Vector): Vector

  @JsName("Quat_VectorForward")
  public open fun quatVectorForward(): Vector

  @JsName("Quat_VectorRight")
  public open fun quatVectorRight(): Vector

  @JsName("Quat_VectorUp")
  public open fun quatVectorUp(): Vector

  @JsName("QuaternionSpringInterp")
  public open fun quaternionSpringInterp(
    target: Quat,
    springState: QuaternionSpringState,
    stiffness: Number,
    criticalDampingFactor: Number,
    deltaTime: Number,
    mass: Number,
    targetVelocityAmount: Number,
    initializeFromTarget: Boolean,
  ): Object10

  @JsName("Subtract_QuatQuat")
  public open fun subtractQuatQuat(b: Quat): Quat

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Quat

    @JsName("C")
    public fun copy(other: Any): Quat

    @JsName("Add_QuatQuat")
    public fun addQuatQuat(a: Quat, b: Quat): Quat

    @JsName("BreakQuat")
    public fun breakQuat(
      inQuat: Quat,
      x: Number,
      y: Number,
      z: Number,
      w: Number,
    ): Object7

    @JsName("EqualEqual_QuatQuat")
    public fun equalEqualQuatQuat(
      a: Quat,
      b: Quat,
      tolerance: Number,
    ): Boolean

    @JsName("Multiply_QuatQuat")
    public fun multiplyQuatQuat(a: Quat, b: Quat): Quat

    @JsName("NotEqual_QuatQuat")
    public fun notEqualQuatQuat(
      a: Quat,
      b: Quat,
      errorTolerance: Number,
    ): Boolean

    @JsName("Quat_AngularDistance")
    public fun quatAngularDistance(a: Quat, b: Quat): Number

    @JsName("Quat_EnforceShortestArcWith")
    public fun quatEnforceShortestArcWith(a: Quat, b: Quat): Object8

    @JsName("Quat_Euler")
    public fun quatEuler(q: Quat): Vector

    @JsName("Quat_Exp")
    public fun quatExp(q: Quat): Quat

    @JsName("Quat_GetAngle")
    public fun quatGetAngle(q: Quat): Number

    @JsName("Quat_GetAxisX")
    public fun quatGetAxisX(q: Quat): Vector

    @JsName("Quat_GetAxisY")
    public fun quatGetAxisY(q: Quat): Vector

    @JsName("Quat_GetAxisZ")
    public fun quatGetAxisZ(q: Quat): Vector

    @JsName("Quat_GetRotationAxis")
    public fun quatGetRotationAxis(q: Quat): Vector

    @JsName("Quat_Inversed")
    public fun quatInversed(q: Quat): Quat

    @JsName("Quat_IsFinite")
    public fun quatIsFinite(q: Quat): Boolean

    @JsName("Quat_IsIdentity")
    public fun quatIsIdentity(q: Quat, tolerance: Number): Boolean

    @JsName("Quat_IsNonFinite")
    public fun quatIsNonFinite(q: Quat): Boolean

    @JsName("Quat_IsNormalized")
    public fun quatIsNormalized(q: Quat): Boolean

    @JsName("Quat_Log")
    public fun quatLog(q: Quat): Quat

    @JsName("Quat_Normalize")
    public fun quatNormalize(q: Quat, tolerance: Number): QuatProvider

    @JsName("Quat_Normalized")
    public fun quatNormalized(q: Quat, tolerance: Number): Quat

    @JsName("Quat_RotateVector")
    public fun quatRotateVector(q: Quat, v: Vector): Vector

    @JsName("Quat_Rotator")
    public fun quatRotator(q: Quat): Rotator

    @JsName("Quat_SetComponents")
    public fun quatSetComponents(
      q: Quat,
      x: Number,
      y: Number,
      z: Number,
      w: Number,
    ): QuatProvider

    @JsName("Quat_SetFromEuler")
    public fun quatSetFromEuler(q: Quat, euler: Vector): QuatProvider

    @JsName("Quat_Size")
    public fun quatSize(q: Quat): Number

    @JsName("Quat_SizeSquared")
    public fun quatSizeSquared(q: Quat): Number

    @JsName("Quat_UnrotateVector")
    public fun quatUnrotateVector(q: Quat, v: Vector): Vector

    @JsName("Quat_VectorForward")
    public fun quatVectorForward(q: Quat): Vector

    @JsName("Quat_VectorRight")
    public fun quatVectorRight(q: Quat): Vector

    @JsName("Quat_VectorUp")
    public fun quatVectorUp(q: Quat): Vector

    @JsName("QuaternionSpringInterp")
    public fun quaternionSpringInterp(
      current: Quat,
      target: Quat,
      springState: QuaternionSpringState,
      stiffness: Number,
      criticalDampingFactor: Number,
      deltaTime: Number,
      mass: Number,
      targetVelocityAmount: Number,
      initializeFromTarget: Boolean,
    ): Object10

    @JsName("Subtract_QuatQuat")
    public fun subtractQuatQuat(a: Quat, b: Quat): Quat

    @JsName("MakeQuat")
    public fun makeQuat(
      x: Number,
      y: Number,
      z: Number,
      w: Number,
    ): Quat

    @JsName("Quat_Identity")
    public fun quatIdentity(): Quat
  }
}

public open external class Plane : Vector {
  @JsName("W")
  public open var w: Any

  public override fun clone(): Plane

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Plane

    @JsName("C")
    public fun copy(other: Any): Plane
  }
}

@JsName("EMatrixColumns")
public external object MatrixColumns {
  public var First: String

  public var Second: String

  public var Third: String

  public var Fourth: String

  @JsName("EMatrixColumns_MAX")
  public var Max: String
}

@JsName("EAxis")
public external object AxisEnum {
  public var None: String

  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  @JsName("EAxis_MAX")
  public var Max: String
}

@JsName("T$11")
public external interface Vector4ComponentsProvider {
  @JsName("X")
  public var x: Any

  @JsName("Y")
  public var y: Any

  @JsName("Z")
  public var z: Any

  @JsName("W")
  public var w: Any
}

@JsName("T$12")
public external interface Vector4Provider {
  @JsName("A")
  public var a: Vector4
}

public open external class Vector4 {
  @JsName("X")
  public open var x: Any

  @JsName("Y")
  public open var y: Any

  @JsName("Z")
  public open var z: Any

  @JsName("W")
  public open var w: Any

  public open fun clone(): Vector4

  @JsName("Add_Vector4Vector4")
  public open fun addVector4Vector4(b: Vector4): Vector4

  @JsName("BreakVector4")
  public open fun breakVector4(
    x: Any,
    y: Any,
    z: Any,
    w: Any,
  ): Vector4ComponentsProvider

  @JsName("Conv_Vector4ToQuaternion")
  public open fun convertVector4ToQuaternion(): Quat

  @JsName("Conv_Vector4ToRotator")
  public open fun convertVector4ToRotator(): Rotator

  @JsName("Conv_Vector4ToVector")
  public open fun convertVector4ToVector(): Vector

  @JsName("Divide_Vector4Vector4")
  public open fun divideVector4Vector4(b: Vector4): Vector4

  @JsName("EqualEqual_Vector4Vector4")
  public open fun equalEqualVector4Vector4(b: Vector4, errorTolerance: Number): Boolean

  @JsName("EqualExactly_Vector4Vector4")
  public open fun equalExactlyVector4Vector4(b: Vector4): Boolean

  @JsName("Multiply_Vector4Vector4")
  public open fun multiplyVector4Vector4(b: Vector4): Vector4

  @JsName("NotEqual_Vector4Vector4")
  public open fun notEqualVector4Vector4(b: Vector4, errorTolerance: Number): Boolean

  @JsName("NotEqualExactly_Vector4Vector4")
  public open fun notEqualExactlyVector4Vector4(b: Vector4): Boolean

  @JsName("Subtract_Vector4Vector4")
  public open fun subtractVector4Vector4(b: Vector4): Vector4

  @JsName("Vector4_Assign")
  public open fun vector4Assign(inVector: Vector4): Vector4Provider

  @JsName("Vector4_CrossProduct3")
  public open fun vector4CrossProduct3(b: Vector4): Vector4

  @JsName("Vector4_DotProduct")
  public open fun vector4DotProduct(b: Vector4): Any

  @JsName("Vector4_DotProduct3")
  public open fun vector4DotProduct3(b: Vector4): Any

  @JsName("Vector4_IsNAN")
  public open fun vector4IsNan(): Boolean

  @JsName("Vector4_IsNearlyZero3")
  public open fun vector4IsNearlyZero3(tolerance: Number): Boolean

  @JsName("Vector4_IsNormal3")
  public open fun vector4IsNormal3(): Boolean

  @JsName("Vector4_IsUnit3")
  public open fun vector4IsUnit3(squaredLenthTolerance: Number): Boolean

  @JsName("Vector4_IsZero")
  public open fun vector4IsZero(): Boolean

  @JsName("Vector4_MirrorByVector3")
  public open fun vector4MirrorByVector3(surfaceNormal: Vector4): Vector4

  @JsName("Vector4_Negated")
  public open fun vector4Negated(): Vector4

  @JsName("Vector4_Normal3")
  public open fun vector4Normal3(tolerance: Number): Vector4

  @JsName("Vector4_Normalize3")
  public open fun vector4Normalize3(tolerance: Number): Vector4Provider

  @JsName("Vector4_NormalUnsafe3")
  public open fun vector4NormalUnsafe3(): Vector4

  @JsName("Vector4_Set")
  public open fun vector4Set(
    x: Any,
    y: Any,
    z: Any,
    w: Any,
  ): Vector4Provider

  @JsName("Vector4_Size")
  public open fun vector4Size(): Any

  @JsName("Vector4_Size3")
  public open fun vector4Size3(): Any

  @JsName("Vector4_SizeSquared")
  public open fun vector4SizeSquared(): Any

  @JsName("Vector4_SizeSquared3")
  public open fun vector4SizeSquared3(): Any

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Vector4

    @JsName("C")
    public fun copy(other: Any): Vector4

    @JsName("Add_Vector4Vector4")
    public fun addVector4Vector4(a: Vector4, b: Vector4): Vector4

    @JsName("BreakVector4")
    public fun breakVector4(
      inVec: Vector4,
      x: Any,
      y: Any,
      z: Any,
      w: Any,
    ): Vector4ComponentsProvider

    @JsName("Conv_Vector4ToQuaternion")
    public fun convertVector4ToQuaternion(inVec: Vector4): Quat

    @JsName("Conv_Vector4ToRotator")
    public fun convertVector4ToRotator(inVec: Vector4): Rotator

    @JsName("Conv_Vector4ToVector")
    public fun convertVector4ToVector(inVector4: Vector4): Vector

    @JsName("Divide_Vector4Vector4")
    public fun divideVector4Vector4(a: Vector4, b: Vector4): Vector4

    @JsName("EqualEqual_Vector4Vector4")
    public fun equalEqualVector4Vector4(
      a: Vector4,
      b: Vector4,
      errorTolerance: Number,
    ): Boolean

    @JsName("EqualExactly_Vector4Vector4")
    public fun equalExactlyVector4Vector4(a: Vector4, b: Vector4): Boolean

    @JsName("Multiply_Vector4Vector4")
    public fun multiplyVector4Vector4(a: Vector4, b: Vector4): Vector4

    @JsName("NotEqual_Vector4Vector4")
    public fun notEqualVector4Vector4(
      a: Vector4,
      b: Vector4,
      errorTolerance: Number,
    ): Boolean

    @JsName("NotEqualExactly_Vector4Vector4")
    public fun notEqualExactlyVector4Vector4(a: Vector4, b: Vector4): Boolean

    @JsName("Subtract_Vector4Vector4")
    public fun subtractVector4Vector4(a: Vector4, b: Vector4): Vector4

    @JsName("Vector4_Assign")
    public fun vector4Assign(a: Vector4, inVector: Vector4): Vector4Provider

    @JsName("Vector4_CrossProduct3")
    public fun vector4CrossProduct3(a: Vector4, b: Vector4): Vector4

    @JsName("Vector4_DotProduct")
    public fun vector4DotProduct(a: Vector4, b: Vector4): Any

    @JsName("Vector4_DotProduct3")
    public fun vector4DotProduct3(a: Vector4, b: Vector4): Any

    @JsName("Vector4_IsNAN")
    public fun vector4IsNan(a: Vector4): Boolean

    @JsName("Vector4_IsNearlyZero3")
    public fun vector4IsNearlyZero3(a: Vector4, tolerance: Number): Boolean

    @JsName("Vector4_IsNormal3")
    public fun vector4IsNormal3(a: Vector4): Boolean

    @JsName("Vector4_IsUnit3")
    public fun vector4IsUnit3(a: Vector4, squaredLenthTolerance: Number): Boolean

    @JsName("Vector4_IsZero")
    public fun vector4IsZero(a: Vector4): Boolean

    @JsName("Vector4_MirrorByVector3")
    public fun vector4MirrorByVector3(direction: Vector4, surfaceNormal: Vector4): Vector4

    @JsName("Vector4_Negated")
    public fun vector4Negated(a: Vector4): Vector4

    @JsName("Vector4_Normal3")
    public fun vector4Normal3(a: Vector4, tolerance: Number): Vector4

    @JsName("Vector4_Normalize3")
    public fun vector4Normalize3(a: Vector4, tolerance: Number): Vector4Provider

    @JsName("Vector4_NormalUnsafe3")
    public fun vector4NormalUnsafe3(a: Vector4): Vector4

    @JsName("Vector4_Set")
    public fun vector4Set(
      a: Vector4,
      x: Any,
      y: Any,
      z: Any,
      w: Any,
    ): Vector4Provider

    @JsName("Vector4_Size")
    public fun vector4Size(a: Vector4): Any

    @JsName("Vector4_Size3")
    public fun vector4Size3(a: Vector4): Any

    @JsName("Vector4_SizeSquared")
    public fun vector4SizeSquared(a: Vector4): Any

    @JsName("Vector4_SizeSquared3")
    public fun vector4SizeSquared3(a: Vector4): Any

    @JsName("MakeVector4")
    public fun makeVector4(
      x: Any,
      y: Any,
      z: Any,
      w: Any,
    ): Vector4

    @JsName("Vector4_Zero")
    public fun vector4Zero(): Vector4
  }
}

@JsName("T$13")
public external interface Object13 {
  @JsName("OutPlane")
  public var outPlane: Plane

  @JsName("$")
  public var value: Boolean
}

@JsName("T$14")
public external interface MatrixProvider {
  @JsName("M")
  public var m: Matrix
}

public open external class Matrix {
  @JsName("XPlane")
  public open var xPlane: Plane

  @JsName("YPlane")
  public open var yPlane: Plane

  @JsName("ZPlane")
  public open var zPlane: Plane

  @JsName("WPlane")
  public open var wPlane: Plane

  public open fun clone(): Matrix

  @JsName("Conv_MatrixToString")
  public open fun convertMatrixToString(): String

  @JsName("Add_MatrixMatrix")
  public open fun addMatrixMatrix(b: Matrix): Matrix

  @JsName("Conv_MatrixToRotator")
  public open fun convertMatrixToRotator(): Rotator

  @JsName("Conv_MatrixToTransform")
  public open fun convertMatrixToTransform(): Transform

  @JsName("EqualEqual_MatrixMatrix")
  public open fun equalEqualMatrixMatrix(b: Matrix, tolerance: Number): Boolean

  @JsName("Matrix_ApplyScale")
  public open fun matrixApplyScale(scale: Number): Matrix

  @JsName("Matrix_ConcatenateTranslation")
  public open fun matrixConcatenateTranslation(translation: Vector): Matrix

  @JsName("Matrix_ContainsNaN")
  public open fun matrixContainsNaN(): Boolean

  @JsName("Matrix_GetColumn")
  public open fun matrixGetColumn(column: String): Vector

  @JsName("Matrix_GetDeterminant")
  public open fun matrixGetDeterminant(): Number

  @JsName("Matrix_GetFrustumBottomPlane")
  public open fun matrixGetFrustumBottomPlane(outPlane: Plane): Object13

  @JsName("Matrix_GetFrustumFarPlane")
  public open fun matrixGetFrustumFarPlane(outPlane: Plane): Object13

  @JsName("Matrix_GetFrustumLeftPlane")
  public open fun matrixGetFrustumLeftPlane(outPlane: Plane): Object13

  @JsName("Matrix_GetFrustumNearPlane")
  public open fun matrixGetFrustumNearPlane(outPlane: Plane): Object13

  @JsName("Matrix_GetFrustumRightPlane")
  public open fun matrixGetFrustumRightPlane(outPlane: Plane): Object13

  @JsName("Matrix_GetFrustumTopPlane")
  public open fun matrixGetFrustumTopPlane(outPlane: Plane): Object13

  @JsName("Matrix_GetInverse")
  public open fun matrixGetInverse(): Matrix

  @JsName("Matrix_GetMatrixWithoutScale")
  public open fun matrixGetMatrixWithoutScale(tolerance: Number): Matrix

  @JsName("Matrix_GetMaximumAxisScale")
  public open fun matrixGetMaximumAxisScale(): Number

  @JsName("Matrix_GetOrigin")
  public open fun matrixGetOrigin(): Vector

  @JsName("Matrix_GetRotator")
  public open fun matrixGetRotator(): Rotator

  @JsName("Matrix_GetRotDeterminant")
  public open fun matrixGetRotDeterminant(): Number

  @JsName("Matrix_GetScaledAxes")
  public open fun matrixGetScaledAxes(
    x: Vector,
    y: Vector,
    z: Vector,
  ): AxesProvider

  @JsName("Matrix_GetScaledAxis")
  public open fun matrixGetScaledAxis(axis: String): Vector

  @JsName("Matrix_GetScaleVector")
  public open fun matrixGetScaleVector(tolerance: Number): Vector

  @JsName("Matrix_GetTransposeAdjoint")
  public open fun matrixGetTransposeAdjoint(): Matrix

  @JsName("Matrix_GetTransposed")
  public open fun matrixGetTransposed(): Matrix

  @JsName("Matrix_GetUnitAxes")
  public open fun matrixGetUnitAxes(
    x: Vector,
    y: Vector,
    z: Vector,
  ): AxesProvider

  @JsName("Matrix_GetUnitAxis")
  public open fun matrixGetUnitAxis(axis: String): Vector

  @JsName("Matrix_InverseTransformPosition")
  public open fun matrixInverseTransformPosition(v: Vector): Vector

  @JsName("Matrix_InverseTransformVector")
  public open fun matrixInverseTransformVector(v: Vector): Vector

  @JsName("Matrix_Mirror")
  public open fun matrixMirror(mirrorAxis: String, flipAxis: String): Matrix

  @JsName("Matrix_RemoveScaling")
  public open fun matrixRemoveScaling(tolerance: Number): MatrixProvider

  @JsName("Matrix_RemoveTranslation")
  public open fun matrixRemoveTranslation(): Matrix

  @JsName("Matrix_ScaleTranslation")
  public open fun matrixScaleTranslation(scale3d: Vector): Matrix

  @JsName("Matrix_SetAxis")
  public open fun matrixSetAxis(axis: String, axisVector: Vector): MatrixProvider

  @JsName("Matrix_SetColumn")
  public open fun matrixSetColumn(column: String, value: Vector): MatrixProvider

  @JsName("Matrix_SetOrigin")
  public open fun matrixSetOrigin(newOrigin: Vector): MatrixProvider

  @JsName("Matrix_ToQuat")
  public open fun matrixToQuat(): Quat

  @JsName("Matrix_TransformPosition")
  public open fun matrixTransformPosition(v: Vector): Vector4

  @JsName("Matrix_TransformVector")
  public open fun matrixTransformVector(v: Vector): Vector4

  @JsName("Matrix_TransformVector4")
  public open fun matrixTransformVector4(v: Vector4): Vector4

  @JsName("Multiply_MatrixFloat")
  public open fun multiplyMatrixFloat(b: Any): Matrix

  @JsName("Multiply_MatrixMatrix")
  public open fun multiplyMatrixMatrix(b: Matrix): Matrix

  @JsName("NotEqual_MatrixMatrix")
  public open fun notEqualMatrixMatrix(b: Matrix, tolerance: Number): Boolean

  @JsName("TransformVector4")
  public open fun transformVector4(vec4: Vector4): Vector4

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Matrix

    @JsName("C")
    public fun copy(other: Any): Matrix

    @JsName("Conv_MatrixToString")
    public fun convertMatrixToString(inMatrix: Matrix): String

    @JsName("Add_MatrixMatrix")
    public fun addMatrixMatrix(a: Matrix, b: Matrix): Matrix

    @JsName("Conv_MatrixToRotator")
    public fun convertMatrixToRotator(inMatrix: Matrix): Rotator

    @JsName("Conv_MatrixToTransform")
    public fun convertMatrixToTransform(inMatrix: Matrix): Transform

    @JsName("EqualEqual_MatrixMatrix")
    public fun equalEqualMatrixMatrix(
      a: Matrix,
      b: Matrix,
      tolerance: Number,
    ): Boolean

    @JsName("Matrix_ApplyScale")
    public fun matrixApplyScale(m: Matrix, scale: Number): Matrix

    @JsName("Matrix_ConcatenateTranslation")
    public fun matrixConcatenateTranslation(m: Matrix, translation: Vector): Matrix

    @JsName("Matrix_ContainsNaN")
    public fun matrixContainsNaN(m: Matrix): Boolean

    @JsName("Matrix_GetColumn")
    public fun matrixGetColumn(m: Matrix, column: String): Vector

    @JsName("Matrix_GetDeterminant")
    public fun matrixGetDeterminant(m: Matrix): Number

    @JsName("Matrix_GetFrustumBottomPlane")
    public fun matrixGetFrustumBottomPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumFarPlane")
    public fun matrixGetFrustumFarPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumLeftPlane")
    public fun matrixGetFrustumLeftPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumNearPlane")
    public fun matrixGetFrustumNearPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumRightPlane")
    public fun matrixGetFrustumRightPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetFrustumTopPlane")
    public fun matrixGetFrustumTopPlane(m: Matrix, outPlane: Plane): Object13

    @JsName("Matrix_GetInverse")
    public fun matrixGetInverse(m: Matrix): Matrix

    @JsName("Matrix_GetMatrixWithoutScale")
    public fun matrixGetMatrixWithoutScale(m: Matrix, tolerance: Number): Matrix

    @JsName("Matrix_GetMaximumAxisScale")
    public fun matrixGetMaximumAxisScale(m: Matrix): Number

    @JsName("Matrix_GetOrigin")
    public fun matrixGetOrigin(inMatrix: Matrix): Vector

    @JsName("Matrix_GetRotator")
    public fun matrixGetRotator(m: Matrix): Rotator

    @JsName("Matrix_GetRotDeterminant")
    public fun matrixGetRotDeterminant(m: Matrix): Number

    @JsName("Matrix_GetScaledAxes")
    public fun matrixGetScaledAxes(
      m: Matrix,
      x: Vector,
      y: Vector,
      z: Vector,
    ): AxesProvider

    @JsName("Matrix_GetScaledAxis")
    public fun matrixGetScaledAxis(m: Matrix, axis: String): Vector

    @JsName("Matrix_GetScaleVector")
    public fun matrixGetScaleVector(m: Matrix, tolerance: Number): Vector

    @JsName("Matrix_GetTransposeAdjoint")
    public fun matrixGetTransposeAdjoint(m: Matrix): Matrix

    @JsName("Matrix_GetTransposed")
    public fun matrixGetTransposed(m: Matrix): Matrix

    @JsName("Matrix_GetUnitAxes")
    public fun matrixGetUnitAxes(
      m: Matrix,
      x: Vector,
      y: Vector,
      z: Vector,
    ): AxesProvider

    @JsName("Matrix_GetUnitAxis")
    public fun matrixGetUnitAxis(m: Matrix, axis: String): Vector

    @JsName("Matrix_InverseTransformPosition")
    public fun matrixInverseTransformPosition(m: Matrix, v: Vector): Vector

    @JsName("Matrix_InverseTransformVector")
    public fun matrixInverseTransformVector(m: Matrix, v: Vector): Vector

    @JsName("Matrix_Mirror")
    public fun matrixMirror(
      m: Matrix,
      mirrorAxis: String,
      flipAxis: String,
    ): Matrix

    @JsName("Matrix_RemoveScaling")
    public fun matrixRemoveScaling(m: Matrix, tolerance: Number): MatrixProvider

    @JsName("Matrix_RemoveTranslation")
    public fun matrixRemoveTranslation(m: Matrix): Matrix

    @JsName("Matrix_ScaleTranslation")
    public fun matrixScaleTranslation(m: Matrix, scale3d: Vector): Matrix

    @JsName("Matrix_SetAxis")
    public fun matrixSetAxis(
      m: Matrix,
      axis: String,
      axisVector: Vector,
    ): MatrixProvider

    @JsName("Matrix_SetColumn")
    public fun matrixSetColumn(
      m: Matrix,
      column: String,
      value: Vector,
    ): MatrixProvider

    @JsName("Matrix_SetOrigin")
    public fun matrixSetOrigin(m: Matrix, newOrigin: Vector): MatrixProvider

    @JsName("Matrix_ToQuat")
    public fun matrixToQuat(m: Matrix): Quat

    @JsName("Matrix_TransformPosition")
    public fun matrixTransformPosition(m: Matrix, v: Vector): Vector4

    @JsName("Matrix_TransformVector")
    public fun matrixTransformVector(m: Matrix, v: Vector): Vector4

    @JsName("Matrix_TransformVector4")
    public fun matrixTransformVector4(m: Matrix, v: Vector4): Vector4

    @JsName("Multiply_MatrixFloat")
    public fun multiplyMatrixFloat(a: Matrix, b: Any): Matrix

    @JsName("Multiply_MatrixMatrix")
    public fun multiplyMatrixMatrix(a: Matrix, b: Matrix): Matrix

    @JsName("NotEqual_MatrixMatrix")
    public fun notEqualMatrixMatrix(
      a: Matrix,
      b: Matrix,
      tolerance: Number,
    ): Boolean

    @JsName("TransformVector4")
    public fun transformVector4(matrix: Matrix, vec4: Vector4): Vector4

    @JsName("Matrix_Identity")
    public fun matrixIdentity(): Matrix
  }
}

@JsName("ELerpInterpolationMode")
public external object LerpInterpolationMode {
  public var QuatInterp: String

  public var EulerInterp: String

  public var DualQuatInterp: String

  @JsName("ELerpInterpolationMode_MAX")
  public var Max: String
}

@JsName("T$15")
public external interface Object15 {
  @JsName("Location")
  public var location: Vector

  @JsName("Rotation")
  public var rotation: Rotator

  @JsName("Scale")
  public var scale: Vector
}

@JsName("T$16")
public external interface AlignmentTransformProvider {
  @JsName("AlignmentTransform")
  public var alignmentTransform: Transform
}

public open external class Transform {
  @JsName("Rotation")
  public open var rotation: Quat

  @JsName("Translation")
  public open var translation: Vector

  @JsName("Scale3D")
  public open var scale3d: Vector

  public open fun clone(): Transform

  @JsName("Conv_TransformToText")
  public open fun convertTransformToText(): String

  @JsName("Conv_TransformToString")
  public open fun convertTransformToString(): String

  @JsName("BreakTransform")
  public open fun breakTransform(
    location: Vector,
    rotation: Rotator,
    scale: Vector,
  ): Object15

  @JsName("ComposeTransforms")
  public open fun composeTransforms(b: Transform): Transform

  @JsName("Conv_TransformToMatrix")
  public open fun convertTransformToMatrix(): Matrix

  @JsName("ConvertTransformToRelative")
  public open fun convertTransformToRelative(parentTransform: Transform): Transform

  @JsName("EqualEqual_TransformTransform")
  public open fun equalEqualTransformTransform(b: Transform): Boolean

  @JsName("FindRelativeLookAtRotation")
  public open fun findRelativeLookAtRotation(targetLocation: Vector): Rotator

  @JsName("InverseTransformDirection")
  public open fun inverseTransformDirection(direction: Vector): Vector

  @JsName("InverseTransformLocation")
  public open fun inverseTransformLocation(location: Vector): Vector

  @JsName("InverseTransformRotation")
  public open fun inverseTransformRotation(rotation: Rotator): Rotator

  @JsName("InvertTransform")
  public open fun invertTransform(): Transform

  @JsName("MakeRelativeTransform")
  public open fun makeRelativeTransform(relativeTo: Transform): Transform

  @JsName("NearlyEqual_TransformTransform")
  public open fun nearlyEqualTransformTransform(
    b: Transform,
    locationTolerance: Number,
    rotationTolerance: Number,
    scale3dTolerance: Number,
  ): Boolean

  @JsName("SelectTransform")
  public open fun selectTransform(b: Transform, pickA: Boolean): Transform

  @JsName("TEase")
  public open fun tEase(
    b: Transform,
    alpha: Number,
    easingFunc: String,
    blendExp: Number,
    steps: Number,
  ): Transform

  @JsName("TInterpTo")
  public open fun tInterpTo(
    target: Transform,
    deltaTime: Number,
    interpSpeed: Number,
  ): Transform

  @JsName("TLerp")
  public open fun tLerp(
    b: Transform,
    alpha: Number,
    interpMode: String,
  ): Transform

  @JsName("Transform_Determinant")
  public open fun transformDeterminant(): Number

  @JsName("TransformDirection")
  public open fun transformDirection(direction: Vector): Vector

  @JsName("TransformLocation")
  public open fun transformLocation(location: Vector): Vector

  @JsName("TransformRotation")
  public open fun transformRotation(rotation: Rotator): Rotator

  @JsName("K2_LookAt")
  public open fun k2LookAt(
    targetPosition: Vector,
    lookAtVector: Vector,
    useUpVector: Boolean,
    upVector: Vector,
    clampConeInDegree: Number,
  ): Transform

  @JsName("CalibrateExternalTrackingToHMD")
  public open fun calibrateExternalTrackingToHmd(): Unit

  @JsName("UpdateExternalTrackingHMDPosition")
  public open fun updateExternalTrackingHmdPosition(): Unit

  @JsName("AddTrackedPointWithName")
  public open fun addTrackedPointWithName(pointName: String, deletePointsWithSameName: Boolean):
      Boolean

  @JsName("CalculateAlignmentTransform")
  public open fun calculateAlignmentTransform(transformInSecondCoordinateSystem: Transform,
      alignmentTransform: Transform): AlignmentTransformProvider

  @JsName("SetAlignmentTransform")
  public open fun setAlignmentTransform(): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Transform

    @JsName("C")
    public fun copy(other: Any): Transform

    @JsName("Conv_TransformToText")
    public fun convertTransformToText(inTrans: Transform): String

    @JsName("Conv_TransformToString")
    public fun convertTransformToString(inTrans: Transform): String

    @JsName("BreakTransform")
    public fun breakTransform(
      inTransform: Transform,
      location: Vector,
      rotation: Rotator,
      scale: Vector,
    ): Object15

    @JsName("ComposeTransforms")
    public fun composeTransforms(a: Transform, b: Transform): Transform

    @JsName("Conv_TransformToMatrix")
    public fun convertTransformToMatrix(transform: Transform): Matrix

    @JsName("ConvertTransformToRelative")
    public fun convertTransformToRelative(transform: Transform, parentTransform: Transform):
        Transform

    @JsName("EqualEqual_TransformTransform")
    public fun equalEqualTransformTransform(a: Transform, b: Transform): Boolean

    @JsName("FindRelativeLookAtRotation")
    public fun findRelativeLookAtRotation(startTransform: Transform, targetLocation: Vector):
        Rotator

    @JsName("InverseTransformDirection")
    public fun inverseTransformDirection(t: Transform, direction: Vector): Vector

    @JsName("InverseTransformLocation")
    public fun inverseTransformLocation(t: Transform, location: Vector): Vector

    @JsName("InverseTransformRotation")
    public fun inverseTransformRotation(t: Transform, rotation: Rotator): Rotator

    @JsName("InvertTransform")
    public fun invertTransform(t: Transform): Transform

    @JsName("MakeRelativeTransform")
    public fun makeRelativeTransform(a: Transform, relativeTo: Transform): Transform

    @JsName("NearlyEqual_TransformTransform")
    public fun nearlyEqualTransformTransform(
      a: Transform,
      b: Transform,
      locationTolerance: Number,
      rotationTolerance: Number,
      scale3dTolerance: Number,
    ): Boolean

    @JsName("SelectTransform")
    public fun selectTransform(
      a: Transform,
      b: Transform,
      pickA: Boolean,
    ): Transform

    @JsName("TEase")
    public fun tEase(
      a: Transform,
      b: Transform,
      alpha: Number,
      easingFunc: String,
      blendExp: Number,
      steps: Number,
    ): Transform

    @JsName("TInterpTo")
    public fun tInterpTo(
      current: Transform,
      target: Transform,
      deltaTime: Number,
      interpSpeed: Number,
    ): Transform

    @JsName("TLerp")
    public fun tLerp(
      a: Transform,
      b: Transform,
      alpha: Number,
      interpMode: String,
    ): Transform

    @JsName("Transform_Determinant")
    public fun transformDeterminant(transform: Transform): Number

    @JsName("TransformDirection")
    public fun transformDirection(t: Transform, direction: Vector): Vector

    @JsName("TransformLocation")
    public fun transformLocation(t: Transform, location: Vector): Vector

    @JsName("TransformRotation")
    public fun transformRotation(t: Transform, rotation: Rotator): Rotator

    @JsName("K2_LookAt")
    public fun k2LookAt(
      currentTransform: Transform,
      targetPosition: Vector,
      lookAtVector: Vector,
      useUpVector: Boolean,
      upVector: Vector,
      clampConeInDegree: Number,
    ): Transform

    @JsName("CalibrateExternalTrackingToHMD")
    public fun calibrateExternalTrackingToHmd(externalTrackingTransform: Transform): Unit

    @JsName("UpdateExternalTrackingHMDPosition")
    public fun updateExternalTrackingHmdPosition(externalTrackingTransform: Transform): Unit

    @JsName("AddTrackedPointWithName")
    public fun addTrackedPointWithName(
      worldTransform: Transform,
      pointName: String,
      deletePointsWithSameName: Boolean,
    ): Boolean

    @JsName("CalculateAlignmentTransform")
    public fun calculateAlignmentTransform(
      transformInFirstCoordinateSystem: Transform,
      transformInSecondCoordinateSystem: Transform,
      alignmentTransform: Transform,
    ): AlignmentTransformProvider

    @JsName("SetAlignmentTransform")
    public fun setAlignmentTransform(inAlignmentTransform: Transform): Unit

    @JsName("GetAlignmentTransform")
    public fun getAlignmentTransform(): Transform
  }
}

@JsName("EARTrackingState")
public external object ARTrackingState {
  public var Unknown: String

  public var Tracking: String

  public var NotTracking: String

  public var StoppedTracking: String

  @JsName("EARTrackingState_MAX")
  public var Max: String
}

@JsName("EComponentMobility")
public external object ComponentMobility {
  public var Static: String

  public var Stationary: String

  public var Movable: String

  @JsName("EComponentMobility_MAX")
  public var Max: String
}

@JsName("EDetailMode")
public external object DetailMode {
  @JsName("DM_Low")
  public var Low: String

  @JsName("DM_Medium")
  public var Medium: String

  @JsName("DM_High")
  public var High: String

  @JsName("DM_MAX")
  public var Max: String
}

@JsName("EBrushType")
public external object BrushType {
  @JsName("Brush_Default")
  public var Default: String

  @JsName("Brush_Add")
  public var Add: String

  @JsName("Brush_Subtract")
  public var Subtract: String

  @JsName("Brush_MAX")
  public var Max: String
}

@JsName("T$17")
public external interface Object17 {
  @JsName("R")
  public var r: Number

  @JsName("G")
  public var g: Number

  @JsName("B")
  public var b: Number

  @JsName("A")
  public var a: Number
}

@JsName("T$18")
public external interface RGBProvider {
  public var RGB: LinearColor
}

@JsName("T$19")
public external interface InOutColorProvider {
  @JsName("InOutColor")
  public var inOutColor: LinearColor
}

@JsName("T$20")
public external interface Object20 {
  @JsName("H")
  public var h: Number

  @JsName("S")
  public var s: Number

  @JsName("V")
  public var v: Number

  @JsName("A")
  public var a: Number
}

@JsName("T$21")
public external interface HSVProvider {
  public var HSV: LinearColor
}

public open external class LinearColor {
  @JsName("R")
  public open var r: Number

  @JsName("G")
  public open var g: Number

  @JsName("B")
  public open var b: Number

  @JsName("A")
  public open var a: Number

  public open fun clone(): LinearColor

  @JsName("Conv_ColorToText")
  public open fun convertColorToText(): String

  @JsName("Conv_ColorToString")
  public open fun convertColorToString(): String

  @JsName("Add_LinearColorLinearColor")
  public open fun addLinearColorLinearColor(b: LinearColor): LinearColor

  @JsName("BreakColor")
  public open fun breakColor(
    r: Number,
    g: Number,
    b: Number,
    a: Number,
  ): Object17

  @JsName("CInterpTo")
  public open fun cInterpTo(
    target: LinearColor,
    deltaTime: Number,
    interpSpeed: Number,
  ): LinearColor

  @JsName("Conv_LinearColorToColor")
  public open fun convertLinearColorToColor(inUseSrgb: Boolean): Color

  @JsName("Conv_LinearColorToVector")
  public open fun convertLinearColorToVector(): Vector

  @JsName("Divide_LinearColorLinearColor")
  public open fun divideLinearColorLinearColor(b: LinearColor): LinearColor

  @JsName("EqualEqual_LinearColorLinearColor")
  public open fun equalEqualLinearColorLinearColor(b: LinearColor): Boolean

  @JsName("HSVToRGB_Vector")
  public open fun hsvToRgbVector(RGB: LinearColor): RGBProvider

  @JsName("HSVToRGBLinear")
  public open fun hsvToRgbLinear(): LinearColor

  @JsName("LinearColor_Desaturated")
  public open fun linearColorDesaturated(inDesaturation: Number): LinearColor

  @JsName("LinearColor_Distance")
  public open fun linearColorDistance(c2: LinearColor): Number

  @JsName("LinearColor_GetLuminance")
  public open fun linearColorGetLuminance(): Number

  @JsName("LinearColor_GetMax")
  public open fun linearColorGetMax(): Number

  @JsName("LinearColor_GetMin")
  public open fun linearColorGetMin(): Number

  @JsName("LinearColor_IsNearEqual")
  public open fun linearColorIsNearEqual(b: LinearColor, tolerance: Number): Boolean

  @JsName("LinearColor_Quantize")
  public open fun linearColorQuantize(): Color

  @JsName("LinearColor_QuantizeRound")
  public open fun linearColorQuantizeRound(): Color

  @JsName("LinearColor_Set")
  public open fun linearColorSet(inColor: LinearColor): InOutColorProvider

  @JsName("LinearColor_SetFromHSV")
  public open fun linearColorSetFromHsv(
    h: Number,
    s: Number,
    v: Number,
    a: Number,
  ): InOutColorProvider

  @JsName("LinearColor_SetFromPow22")
  public open fun linearColorSetFromPow22(inColor: Color): InOutColorProvider

  @JsName("LinearColor_SetFromSRGB")
  public open fun linearColorSetFromSrgb(inSrgb: Color): InOutColorProvider

  @JsName("LinearColor_SetRandomHue")
  public open fun linearColorSetRandomHue(): InOutColorProvider

  @JsName("LinearColor_SetRGBA")
  public open fun linearColorSetRgba(
    r: Number,
    g: Number,
    b: Number,
    a: Number,
  ): InOutColorProvider

  @JsName("LinearColor_SetTemperature")
  public open fun linearColorSetTemperature(inTemperature: Number): InOutColorProvider

  @JsName("LinearColor_ToNewOpacity")
  public open fun linearColorToNewOpacity(inOpacity: Number): LinearColor

  @JsName("LinearColor_ToRGBE")
  public open fun linearColorToRgbe(): Color

  @JsName("LinearColorLerp")
  public open fun linearColorLerp(b: LinearColor, alpha: Number): LinearColor

  @JsName("LinearColorLerpUsingHSV")
  public open fun linearColorLerpUsingHsv(b: LinearColor, alpha: Number): LinearColor

  @JsName("Multiply_LinearColorFloat")
  public open fun multiplyLinearColorFloat(b: Number): LinearColor

  @JsName("Multiply_LinearColorLinearColor")
  public open fun multiplyLinearColorLinearColor(b: LinearColor): LinearColor

  @JsName("NotEqual_LinearColorLinearColor")
  public open fun notEqualLinearColorLinearColor(b: LinearColor): Boolean

  @JsName("RGBLinearToHSV")
  public open fun rgbLinearToHsv(): LinearColor

  @JsName("RGBToHSV")
  public open fun rgbToHsv(
    h: Number,
    s: Number,
    v: Number,
    a: Number,
  ): Object20

  @JsName("RGBToHSV_Vector")
  public open fun rgbToHsvVector(HSV: LinearColor): HSVProvider

  @JsName("SelectColor")
  public open fun selectColor(b: LinearColor, pickA: Boolean): LinearColor

  @JsName("Subtract_LinearColorLinearColor")
  public open fun subtractLinearColorLinearColor(b: LinearColor): LinearColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LinearColor

    @JsName("C")
    public fun copy(other: Any): LinearColor

    @JsName("Conv_ColorToText")
    public fun convertColorToText(inColor: LinearColor): String

    @JsName("Conv_ColorToString")
    public fun convertColorToString(inColor: LinearColor): String

    @JsName("Add_LinearColorLinearColor")
    public fun addLinearColorLinearColor(a: LinearColor, b: LinearColor): LinearColor

    @JsName("BreakColor")
    public fun breakColor(
      inColor: LinearColor,
      r: Number,
      g: Number,
      b: Number,
      a: Number,
    ): Object17

    @JsName("CInterpTo")
    public fun cInterpTo(
      current: LinearColor,
      target: LinearColor,
      deltaTime: Number,
      interpSpeed: Number,
    ): LinearColor

    @JsName("Conv_LinearColorToColor")
    public fun convertLinearColorToColor(inLinearColor: LinearColor, inUseSrgb: Boolean): Color

    @JsName("Conv_LinearColorToVector")
    public fun convertLinearColorToVector(inLinearColor: LinearColor): Vector

    @JsName("Divide_LinearColorLinearColor")
    public fun divideLinearColorLinearColor(a: LinearColor, b: LinearColor): LinearColor

    @JsName("EqualEqual_LinearColorLinearColor")
    public fun equalEqualLinearColorLinearColor(a: LinearColor, b: LinearColor): Boolean

    @JsName("HSVToRGB_Vector")
    public fun hsvToRgbVector(HSV: LinearColor, RGB: LinearColor): RGBProvider

    @JsName("HSVToRGBLinear")
    public fun hsvToRgbLinear(HSV: LinearColor): LinearColor

    @JsName("LinearColor_Desaturated")
    public fun linearColorDesaturated(inColor: LinearColor, inDesaturation: Number): LinearColor

    @JsName("LinearColor_Distance")
    public fun linearColorDistance(c1: LinearColor, c2: LinearColor): Number

    @JsName("LinearColor_GetLuminance")
    public fun linearColorGetLuminance(inColor: LinearColor): Number

    @JsName("LinearColor_GetMax")
    public fun linearColorGetMax(inColor: LinearColor): Number

    @JsName("LinearColor_GetMin")
    public fun linearColorGetMin(inColor: LinearColor): Number

    @JsName("LinearColor_IsNearEqual")
    public fun linearColorIsNearEqual(
      a: LinearColor,
      b: LinearColor,
      tolerance: Number,
    ): Boolean

    @JsName("LinearColor_Quantize")
    public fun linearColorQuantize(inColor: LinearColor): Color

    @JsName("LinearColor_QuantizeRound")
    public fun linearColorQuantizeRound(inColor: LinearColor): Color

    @JsName("LinearColor_Set")
    public fun linearColorSet(inOutColor: LinearColor, inColor: LinearColor): InOutColorProvider

    @JsName("LinearColor_SetFromHSV")
    public fun linearColorSetFromHsv(
      inOutColor: LinearColor,
      h: Number,
      s: Number,
      v: Number,
      a: Number,
    ): InOutColorProvider

    @JsName("LinearColor_SetFromPow22")
    public fun linearColorSetFromPow22(inOutColor: LinearColor, inColor: Color): InOutColorProvider

    @JsName("LinearColor_SetFromSRGB")
    public fun linearColorSetFromSrgb(inOutColor: LinearColor, inSrgb: Color): InOutColorProvider

    @JsName("LinearColor_SetRandomHue")
    public fun linearColorSetRandomHue(inOutColor: LinearColor): InOutColorProvider

    @JsName("LinearColor_SetRGBA")
    public fun linearColorSetRgba(
      inOutColor: LinearColor,
      r: Number,
      g: Number,
      b: Number,
      a: Number,
    ): InOutColorProvider

    @JsName("LinearColor_SetTemperature")
    public fun linearColorSetTemperature(inOutColor: LinearColor, inTemperature: Number):
        InOutColorProvider

    @JsName("LinearColor_ToNewOpacity")
    public fun linearColorToNewOpacity(inColor: LinearColor, inOpacity: Number): LinearColor

    @JsName("LinearColor_ToRGBE")
    public fun linearColorToRgbe(inLinearColor: LinearColor): Color

    @JsName("LinearColorLerp")
    public fun linearColorLerp(
      a: LinearColor,
      b: LinearColor,
      alpha: Number,
    ): LinearColor

    @JsName("LinearColorLerpUsingHSV")
    public fun linearColorLerpUsingHsv(
      a: LinearColor,
      b: LinearColor,
      alpha: Number,
    ): LinearColor

    @JsName("Multiply_LinearColorFloat")
    public fun multiplyLinearColorFloat(a: LinearColor, b: Number): LinearColor

    @JsName("Multiply_LinearColorLinearColor")
    public fun multiplyLinearColorLinearColor(a: LinearColor, b: LinearColor): LinearColor

    @JsName("NotEqual_LinearColorLinearColor")
    public fun notEqualLinearColorLinearColor(a: LinearColor, b: LinearColor): Boolean

    @JsName("RGBLinearToHSV")
    public fun rgbLinearToHsv(RGB: LinearColor): LinearColor

    @JsName("RGBToHSV")
    public fun rgbToHsv(
      inColor: LinearColor,
      h: Number,
      s: Number,
      v: Number,
      a: Number,
    ): Object20

    @JsName("RGBToHSV_Vector")
    public fun rgbToHsvVector(RGB: LinearColor, HSV: LinearColor): HSVProvider

    @JsName("SelectColor")
    public fun selectColor(
      a: LinearColor,
      b: LinearColor,
      pickA: Boolean,
    ): LinearColor

    @JsName("Subtract_LinearColorLinearColor")
    public fun subtractLinearColorLinearColor(a: LinearColor, b: LinearColor): LinearColor

    @JsName("Conv_DoubleToLinearColor")
    public fun convertDoubleToLinearColor(inDouble: Any): LinearColor

    @JsName("Conv_FloatToLinearColor")
    public fun convertFloatToLinearColor(inFloat: Number): LinearColor

    @JsName("HSVToRGB")
    public fun hsvToRgb(
      h: Number,
      s: Number,
      v: Number,
      a: Number,
    ): LinearColor

    @JsName("LinearColor_Black")
    public fun linearColorBlack(): LinearColor

    @JsName("LinearColor_Blue")
    public fun linearColorBlue(): LinearColor

    @JsName("LinearColor_Gray")
    public fun linearColorGray(): LinearColor

    @JsName("LinearColor_Green")
    public fun linearColorGreen(): LinearColor

    @JsName("LinearColor_Red")
    public fun linearColorRed(): LinearColor

    @JsName("LinearColor_Transparent")
    public fun linearColorTransparent(): LinearColor

    @JsName("LinearColor_White")
    public fun linearColorWhite(): LinearColor

    @JsName("LinearColor_Yellow")
    public fun linearColorYellow(): LinearColor

    @JsName("MakeColor")
    public fun makeColor(
      r: Number,
      g: Number,
      b: Number,
      a: Number,
    ): LinearColor
  }
}

public open external class Color {
  @JsName("B")
  public open var b: Number

  @JsName("G")
  public open var g: Number

  @JsName("R")
  public open var r: Number

  @JsName("A")
  public open var a: Number

  public open fun clone(): Color

  @JsName("Conv_ColorToLinearColor")
  public open fun convertColorToLinearColor(): LinearColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Color

    @JsName("C")
    public fun copy(other: Any): Color

    @JsName("Conv_ColorToLinearColor")
    public fun convertColorToLinearColor(inColor: Color): LinearColor
  }
}

public open external class Model(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Model

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Model

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Model

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Model

    @JsName("C")
    public fun copy(other: UObject): Model

    @JsName("C")
    public fun copy(other: Any): Model
  }
}

@JsName("EPhysicsType")
public external object PhysicsType {
  @JsName("PhysType_Default")
  public var Default: String

  @JsName("PhysType_Kinematic")
  public var Kinematic: String

  @JsName("PhysType_Simulated")
  public var Simulated: String

  @JsName("PhysType_MAX")
  public var Max: String
}

@JsName("ECollisionTraceFlag")
public external object CollisionTraceFlag {
  @JsName("CTF_UseDefault")
  public var UseDefault: String

  @JsName("CTF_UseSimpleAndComplex")
  public var UseSimpleAndComplex: String

  @JsName("CTF_UseSimpleAsComplex")
  public var UseSimpleAsComplex: String

  @JsName("CTF_UseComplexAsSimple")
  public var UseComplexAsSimple: String

  @JsName("CTF_MAX")
  public var Max: String
}

@JsName("EBodyCollisionResponse")
public external object BodyCollisionResponse {
  @JsName("BodyCollision_Enabled")
  public var Enabled: String

  @JsName("BodyCollision_Disabled")
  public var Disabled: String

  @JsName("BodyCollision_MAX")
  public var Max: String
}

public open external class BodySetupCore(
  outer: UObject,
) : UObject {
  @JsName("BoneName")
  public open var boneName: String

  @JsName("PhysicsType")
  public open var physicsType: String

  @JsName("CollisionTraceFlag")
  public open var collisionTraceFlag: String

  @JsName("CollisionReponse")
  public open var collisionReponse: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BodySetupCore

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BodySetupCore

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BodySetupCore

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BodySetupCore

    @JsName("C")
    public fun copy(other: UObject): BodySetupCore

    @JsName("C")
    public fun copy(other: Any): BodySetupCore
  }
}

@JsName("ECollisionEnabled")
public external object CollisionEnabled {
  public var NoCollision: String

  public var QueryOnly: String

  public var PhysicsOnly: String

  public var QueryAndPhysics: String

  @JsName("ECollisionEnabled_MAX")
  public var Max: String
}

public open external class KShapeElem {
  @JsName("RestOffset")
  public open var restOffset: Number

  @JsName("bIsGenerated")
  public open var isGenerated: Boolean

  @JsName("Name")
  public open var name: String

  @JsName("bContributeToMass")
  public open var contributeToMass: Boolean

  @JsName("CollisionEnabled")
  public open var collisionEnabled: String

  public open fun clone(): KShapeElem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KShapeElem

    @JsName("C")
    public fun copy(other: Any): KShapeElem
  }
}

public open external class KSphereElem : KShapeElem {
  public open var TM: Matrix

  @JsName("Center")
  public open var center: Vector

  @JsName("Radius")
  public open var radius: Number

  public override fun clone(): KSphereElem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KSphereElem

    @JsName("C")
    public fun copy(other: Any): KSphereElem
  }
}

public open external class KBoxElem : KShapeElem {
  public open var TM: Matrix

  @JsName("Orientation")
  public open var orientation: Quat

  @JsName("Center")
  public open var center: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  @JsName("Z")
  public open var z: Number

  public override fun clone(): KBoxElem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KBoxElem

    @JsName("C")
    public fun copy(other: Any): KBoxElem
  }
}

public open external class KSphylElem : KShapeElem {
  public open var TM: Matrix

  @JsName("Orientation")
  public open var orientation: Quat

  @JsName("Center")
  public open var center: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("Radius")
  public open var radius: Number

  @JsName("Length")
  public open var length: Number

  public override fun clone(): KSphylElem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KSphylElem

    @JsName("C")
    public fun copy(other: Any): KSphylElem
  }
}

public open external class Box {
  @JsName("Min")
  public open var min: Vector

  @JsName("Max")
  public open var max: Vector

  @JsName("IsValid")
  public open var isValid: Number

  public open fun clone(): Box

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Box

    @JsName("C")
    public fun copy(other: Any): Box
  }
}

public open external class KConvexElem : KShapeElem {
  @JsName("VertexData")
  public open var vertexData: Array<Vector>

  @JsName("IndexData")
  public open var indexData: Array<Number>

  @JsName("ElemBox")
  public open var elemBox: Box

  @JsName("Transform")
  public open var transform: Transform

  public override fun clone(): KConvexElem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KConvexElem

    @JsName("C")
    public fun copy(other: Any): KConvexElem
  }
}

public open external class KTaperedCapsuleElem : KShapeElem {
  @JsName("Center")
  public open var center: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("Radius0")
  public open var radius0: Number

  @JsName("Radius1")
  public open var radius1: Number

  @JsName("Length")
  public open var length: Number

  public override fun clone(): KTaperedCapsuleElem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KTaperedCapsuleElem

    @JsName("C")
    public fun copy(other: Any): KTaperedCapsuleElem
  }
}

public open external class KAggregateGeom {
  @JsName("SphereElems")
  public open var sphereElems: Array<KSphereElem>

  @JsName("BoxElems")
  public open var boxElems: Array<KBoxElem>

  @JsName("SphylElems")
  public open var sphylElems: Array<KSphylElem>

  @JsName("ConvexElems")
  public open var convexElems: Array<KConvexElem>

  @JsName("TaperedCapsuleElems")
  public open var taperedCapsuleElems: Array<KTaperedCapsuleElem>

  public open fun clone(): KAggregateGeom

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KAggregateGeom

    @JsName("C")
    public fun copy(other: Any): KAggregateGeom
  }
}

@JsName("EFrictionCombineMode")
public external object FrictionCombineMode {
  public var Average: String

  public var Min: String

  public var Multiply: String

  public var Max: String

  @JsName("EFrictionCombineMode_MAX")
  public var _Max: String
}

public open external class PhysicalMaterialPropertyBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicalMaterialPropertyBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicalMaterialPropertyBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicalMaterialPropertyBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicalMaterialPropertyBase

    @JsName("C")
    public fun copy(other: UObject): PhysicalMaterialPropertyBase

    @JsName("C")
    public fun copy(other: Any): PhysicalMaterialPropertyBase
  }
}

@JsName("EPhysicalSurface")
public external object PhysicalSurface {
  @JsName("SurfaceType_Default")
  public var Default: String

  @JsName("SurfaceType1")
  public var One: String

  @JsName("SurfaceType2")
  public var Two: String

  @JsName("SurfaceType3")
  public var Three: String

  @JsName("SurfaceType4")
  public var Four: String

  @JsName("SurfaceType5")
  public var Five: String

  @JsName("SurfaceType6")
  public var Six: String

  @JsName("SurfaceType7")
  public var Seven: String

  @JsName("SurfaceType8")
  public var Eight: String

  @JsName("SurfaceType9")
  public var Nine: String

  @JsName("SurfaceType10")
  public var Ten: String

  @JsName("SurfaceType11")
  public var Eleven: String

  @JsName("SurfaceType12")
  public var Twelve: String

  @JsName("SurfaceType13")
  public var Thirteen: String

  @JsName("SurfaceType14")
  public var Fourteen: String

  @JsName("SurfaceType15")
  public var Fifteen: String

  @JsName("SurfaceType16")
  public var Sixteen: String

  @JsName("SurfaceType17")
  public var Seventeen: String

  @JsName("SurfaceType18")
  public var Eighteen: String

  @JsName("SurfaceType19")
  public var Nineteen: String

  @JsName("SurfaceType20")
  public var Twenty: String

  @JsName("SurfaceType21")
  public var TwentyOne: String

  @JsName("SurfaceType22")
  public var TwentyTwo: String

  @JsName("SurfaceType23")
  public var TwentyThree: String

  @JsName("SurfaceType24")
  public var TwentyFour: String

  @JsName("SurfaceType25")
  public var TwentyFive: String

  @JsName("SurfaceType26")
  public var TwentySix: String

  @JsName("SurfaceType27")
  public var TwentySeven: String

  @JsName("SurfaceType28")
  public var TwentyEight: String

  @JsName("SurfaceType29")
  public var TwentyNine: String

  @JsName("SurfaceType30")
  public var Thirty: String

  @JsName("SurfaceType31")
  public var ThirtyOne: String

  @JsName("SurfaceType32")
  public var ThirtyTwo: String

  @JsName("SurfaceType33")
  public var ThirtyThree: String

  @JsName("SurfaceType34")
  public var ThirtyFour: String

  @JsName("SurfaceType35")
  public var ThirtyFive: String

  @JsName("SurfaceType36")
  public var ThirtySix: String

  @JsName("SurfaceType37")
  public var ThirtySeven: String

  @JsName("SurfaceType38")
  public var ThirtyEight: String

  @JsName("SurfaceType39")
  public var ThirtyNine: String

  @JsName("SurfaceType40")
  public var Forty: String

  @JsName("SurfaceType41")
  public var FortyOne: String

  @JsName("SurfaceType42")
  public var FortyTwo: String

  @JsName("SurfaceType43")
  public var FortyThree: String

  @JsName("SurfaceType44")
  public var FortyFour: String

  @JsName("SurfaceType45")
  public var FortyFive: String

  @JsName("SurfaceType46")
  public var FortySix: String

  @JsName("SurfaceType47")
  public var FortySeven: String

  @JsName("SurfaceType48")
  public var FortyEight: String

  @JsName("SurfaceType49")
  public var FortyNine: String

  @JsName("SurfaceType50")
  public var Fifty: String

  @JsName("SurfaceType51")
  public var FiftyOne: String

  @JsName("SurfaceType52")
  public var FiftyTwo: String

  @JsName("SurfaceType53")
  public var FiftyThree: String

  @JsName("SurfaceType54")
  public var FiftyFour: String

  @JsName("SurfaceType55")
  public var FiftyFive: String

  @JsName("SurfaceType56")
  public var FiftySix: String

  @JsName("SurfaceType57")
  public var FiftySeven: String

  @JsName("SurfaceType58")
  public var FiftyEight: String

  @JsName("SurfaceType59")
  public var FiftyNine: String

  @JsName("SurfaceType60")
  public var Sixty: String

  @JsName("SurfaceType61")
  public var SixtyOne: String

  @JsName("SurfaceType62")
  public var SixtyTwo: String

  @JsName("SurfaceType_Max")
  public var Max: String

  @JsName("EPhysicalSurface_MAX")
  public var _Max: String
}

public open external class PhysicalMaterial(
  outer: UObject,
) : UObject {
  @JsName("Friction")
  public open var friction: Number

  @JsName("StaticFriction")
  public open var staticFriction: Number

  @JsName("FrictionCombineMode")
  public open var frictionCombineMode: String

  @JsName("bOverrideFrictionCombineMode")
  public open var overrideFrictionCombineMode: Boolean

  @JsName("Restitution")
  public open var restitution: Number

  @JsName("RestitutionCombineMode")
  public open var restitutionCombineMode: String

  @JsName("bOverrideRestitutionCombineMode")
  public open var overrideRestitutionCombineMode: Boolean

  @JsName("Density")
  public open var density: Number

  @JsName("SleepLinearVelocityThreshold")
  public open var sleepLinearVelocityThreshold: Number

  @JsName("SleepAngularVelocityThreshold")
  public open var sleepAngularVelocityThreshold: Number

  @JsName("SleepCounterThreshold")
  public open var sleepCounterThreshold: Number

  @JsName("RaiseMassToPower")
  public open var raiseMassToPower: Number

  @JsName("DestructibleDamageThresholdScale")
  public open var destructibleDamageThresholdScale: Number

  @JsName("PhysicalMaterialProperty")
  public open var physicalMaterialProperty: PhysicalMaterialPropertyBase

  @JsName("SurfaceType")
  public open var surfaceType: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicalMaterial

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicalMaterial

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicalMaterial

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicalMaterial

    @JsName("C")
    public fun copy(other: UObject): PhysicalMaterial

    @JsName("C")
    public fun copy(other: Any): PhysicalMaterial
  }
}

@JsName("EWalkableSlopeBehavior")
public external object WalkableSlopeBehavior {
  @JsName("WalkableSlope_Default")
  public var Default: String

  @JsName("WalkableSlope_Increase")
  public var Increase: String

  @JsName("WalkableSlope_Decrease")
  public var Decrease: String

  @JsName("WalkableSlope_Unwalkable")
  public var Unwalkable: String

  @JsName("WalkableSlope_Max")
  public var Max: String
}

public open external class WalkableSlopeOverride {
  @JsName("WalkableSlopeBehavior")
  public open var walkableSlopeBehavior: String

  @JsName("WalkableSlopeAngle")
  public open var walkableSlopeAngle: Number

  public open fun clone(): WalkableSlopeOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WalkableSlopeOverride

    @JsName("C")
    public fun copy(other: Any): WalkableSlopeOverride
  }
}

public open external class BodyInstanceCore {
  @JsName("bSimulatePhysics")
  public open var simulatePhysics: Boolean

  @JsName("bOverrideMass")
  public open var overrideMass: Boolean

  @JsName("bEnableGravity")
  public open var enableGravity: Boolean

  @JsName("bAutoWeld")
  public open var autoWeld: Boolean

  @JsName("bStartAwake")
  public open var startAwake: Boolean

  @JsName("bGenerateWakeEvents")
  public open var generateWakeEvents: Boolean

  @JsName("bUpdateMassWhenScaleChanges")
  public open var updateMassWhenScaleChanges: Boolean

  public open fun clone(): BodyInstanceCore

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BodyInstanceCore

    @JsName("C")
    public fun copy(other: Any): BodyInstanceCore
  }
}

@JsName("ECollisionChannel")
public external object CollisionChannel {
  @JsName("ECC_WorldStatic")
  public var WorldStatic: String

  @JsName("ECC_WorldDynamic")
  public var WorldDynamic: String

  @JsName("ECC_Pawn")
  public var Pawn: String

  @JsName("ECC_Visibility")
  public var Visibility: String

  @JsName("ECC_Camera")
  public var Camera: String

  @JsName("ECC_PhysicsBody")
  public var PhysicsBody: String

  @JsName("ECC_Vehicle")
  public var Vehicle: String

  @JsName("ECC_Destructible")
  public var Destructible: String

  @JsName("ECC_EngineTraceChannel1")
  public var EngineTraceChannel1: String

  @JsName("ECC_EngineTraceChannel2")
  public var EngineTraceChannel2: String

  @JsName("ECC_EngineTraceChannel3")
  public var EngineTraceChannel3: String

  @JsName("ECC_EngineTraceChannel4")
  public var EngineTraceChannel4: String

  @JsName("ECC_EngineTraceChannel5")
  public var EngineTraceChannel5: String

  @JsName("ECC_EngineTraceChannel6")
  public var EngineTraceChannel6: String

  @JsName("ECC_GameTraceChannel1")
  public var GameTraceChannel1: String

  @JsName("ECC_GameTraceChannel2")
  public var GameTraceChannel2: String

  @JsName("ECC_GameTraceChannel3")
  public var GameTraceChannel3: String

  @JsName("ECC_GameTraceChannel4")
  public var GameTraceChannel4: String

  @JsName("ECC_GameTraceChannel5")
  public var GameTraceChannel5: String

  @JsName("ECC_GameTraceChannel6")
  public var GameTraceChannel6: String

  @JsName("ECC_GameTraceChannel7")
  public var GameTraceChannel7: String

  @JsName("ECC_GameTraceChannel8")
  public var GameTraceChannel8: String

  @JsName("ECC_GameTraceChannel9")
  public var GameTraceChannel9: String

  @JsName("ECC_GameTraceChannel10")
  public var GameTraceChannel10: String

  @JsName("ECC_GameTraceChannel11")
  public var GameTraceChannel11: String

  @JsName("ECC_GameTraceChannel12")
  public var GameTraceChannel12: String

  @JsName("ECC_GameTraceChannel13")
  public var GameTraceChannel13: String

  @JsName("ECC_GameTraceChannel14")
  public var GameTraceChannel14: String

  @JsName("ECC_GameTraceChannel15")
  public var GameTraceChannel15: String

  @JsName("ECC_GameTraceChannel16")
  public var GameTraceChannel16: String

  @JsName("ECC_GameTraceChannel17")
  public var GameTraceChannel17: String

  @JsName("ECC_GameTraceChannel18")
  public var GameTraceChannel18: String

  @JsName("ECC_OverlapAll_Deprecated")
  public var OverlapAllDeprecated: String

  @JsName("ECC_MAX")
  public var Max: String
}

@JsName("ESleepFamily")
public external object SleepFamily {
  public var Normal: String

  public var Sensitive: String

  public var Custom: String

  @JsName("ESleepFamily_MAX")
  public var Max: String
}

@JsName("EDOFMode")
public external object DOFMode {
  public var Default: String

  @JsName("SixDOF")
  public var SixDof: String

  @JsName("YZPlane")
  public var YzPlane: String

  @JsName("XZPlane")
  public var XzPlane: String

  @JsName("XYPlane")
  public var XyPlane: String

  public var CustomPlane: String

  public var None: String

  @JsName("EDOFMode_MAX")
  public var Max: String
}

@JsName("ECollisionResponse")
public external object CollisionResponseEnum {
  @JsName("ECR_Ignore")
  public var Ignore: String

  @JsName("ECR_Overlap")
  public var Overlap: String

  @JsName("ECR_Block")
  public var Block: String

  @JsName("ECR_MAX")
  public var Max: String
}

public open external class CollisionResponseContainer {
  @JsName("WorldStatic")
  public open var worldStatic: String

  @JsName("WorldDynamic")
  public open var worldDynamic: String

  @JsName("Pawn")
  public open var pawn: String

  @JsName("Visibility")
  public open var visibility: String

  @JsName("Camera")
  public open var camera: String

  @JsName("PhysicsBody")
  public open var physicsBody: String

  @JsName("Vehicle")
  public open var vehicle: String

  @JsName("Destructible")
  public open var destructible: String

  @JsName("EngineTraceChannel1")
  public open var engineTraceChannel1: String

  @JsName("EngineTraceChannel2")
  public open var engineTraceChannel2: String

  @JsName("EngineTraceChannel3")
  public open var engineTraceChannel3: String

  @JsName("EngineTraceChannel4")
  public open var engineTraceChannel4: String

  @JsName("EngineTraceChannel5")
  public open var engineTraceChannel5: String

  @JsName("EngineTraceChannel6")
  public open var engineTraceChannel6: String

  @JsName("GameTraceChannel1")
  public open var gameTraceChannel1: String

  @JsName("GameTraceChannel2")
  public open var gameTraceChannel2: String

  @JsName("GameTraceChannel3")
  public open var gameTraceChannel3: String

  @JsName("GameTraceChannel4")
  public open var gameTraceChannel4: String

  @JsName("GameTraceChannel5")
  public open var gameTraceChannel5: String

  @JsName("GameTraceChannel6")
  public open var gameTraceChannel6: String

  @JsName("GameTraceChannel7")
  public open var gameTraceChannel7: String

  @JsName("GameTraceChannel8")
  public open var gameTraceChannel8: String

  @JsName("GameTraceChannel9")
  public open var gameTraceChannel9: String

  @JsName("GameTraceChannel10")
  public open var gameTraceChannel10: String

  @JsName("GameTraceChannel11")
  public open var gameTraceChannel11: String

  @JsName("GameTraceChannel12")
  public open var gameTraceChannel12: String

  @JsName("GameTraceChannel13")
  public open var gameTraceChannel13: String

  @JsName("GameTraceChannel14")
  public open var gameTraceChannel14: String

  @JsName("GameTraceChannel15")
  public open var gameTraceChannel15: String

  @JsName("GameTraceChannel16")
  public open var gameTraceChannel16: String

  @JsName("GameTraceChannel17")
  public open var gameTraceChannel17: String

  @JsName("GameTraceChannel18")
  public open var gameTraceChannel18: String

  public open fun clone(): CollisionResponseContainer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CollisionResponseContainer

    @JsName("C")
    public fun copy(other: Any): CollisionResponseContainer
  }
}

public open external class ResponseChannel {
  @JsName("Channel")
  public open var channel: String

  @JsName("Response")
  public open var response: String

  public open fun clone(): ResponseChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ResponseChannel

    @JsName("C")
    public fun copy(other: Any): ResponseChannel
  }
}

public open external class CollisionResponse {
  @JsName("ResponseToChannels")
  public open var responseToChannels: CollisionResponseContainer

  @JsName("ResponseArray")
  public open var responseArray: Array<ResponseChannel>

  public open fun clone(): CollisionResponse

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CollisionResponse

    @JsName("C")
    public fun copy(other: Any): CollisionResponse
  }
}

public open external class BodyInstance : BodyInstanceCore {
  @JsName("ObjectType")
  public open var objectType: String

  @JsName("CollisionEnabled")
  public open var collisionEnabled: String

  @JsName("SleepFamily")
  public open var sleepFamily: String

  @JsName("DOFMode")
  public open var dofMode: String

  @JsName("bUseCCD")
  public open var useCcd: Boolean

  @JsName("bIgnoreAnalyticCollisions")
  public open var ignoreAnalyticCollisions: Boolean

  @JsName("bNotifyRigidBodyCollision")
  public open var notifyRigidBodyCollision: Boolean

  @JsName("bSmoothEdgeCollisions")
  public open var smoothEdgeCollisions: Boolean

  @JsName("bLockTranslation")
  public open var lockTranslation: Boolean

  @JsName("bLockRotation")
  public open var lockRotation: Boolean

  @JsName("bLockXTranslation")
  public open var lockXTranslation: Boolean

  @JsName("bLockYTranslation")
  public open var lockYTranslation: Boolean

  @JsName("bLockZTranslation")
  public open var lockZTranslation: Boolean

  @JsName("bLockXRotation")
  public open var lockXRotation: Boolean

  @JsName("bLockYRotation")
  public open var lockYRotation: Boolean

  @JsName("bLockZRotation")
  public open var lockZRotation: Boolean

  @JsName("bOverrideMaxAngularVelocity")
  public open var overrideMaxAngularVelocity: Boolean

  @JsName("bOverrideMaxDepenetrationVelocity")
  public open var overrideMaxDepenetrationVelocity: Boolean

  @JsName("bOverrideWalkableSlopeOnInstance")
  public open var overrideWalkableSlopeOnInstance: Boolean

  @JsName("bInterpolateWhenSubStepping")
  public open var interpolateWhenSubStepping: Boolean

  @JsName("ResponseToChannels")
  public open var responseToChannels: CollisionResponseContainer

  @JsName("CollisionProfileName")
  public open var collisionProfileName: String

  @JsName("PositionSolverIterationCount")
  public open var positionSolverIterationCount: Number

  @JsName("VelocitySolverIterationCount")
  public open var velocitySolverIterationCount: Number

  @JsName("CollisionResponses")
  public open var collisionResponses: CollisionResponse

  @JsName("MaxDepenetrationVelocity")
  public open var maxDepenetrationVelocity: Number

  @JsName("MassInKgOverride")
  public open var massInKgOverride: Number

  @JsName("LinearDamping")
  public open var linearDamping: Number

  @JsName("AngularDamping")
  public open var angularDamping: Number

  @JsName("CustomDOFPlaneNormal")
  public open var customDofPlaneNormal: Vector

  @JsName("COMNudge")
  public open var comNudge: Vector

  @JsName("MassScale")
  public open var massScale: Number

  @JsName("InertiaTensorScale")
  public open var inertiaTensorScale: Vector

  @JsName("WalkableSlopeOverride")
  public open var walkableSlopeOverride: WalkableSlopeOverride

  @JsName("PhysMaterialOverride")
  public open var physMaterialOverride: PhysicalMaterial

  @JsName("MaxAngularVelocity")
  public open var maxAngularVelocity: Number

  @JsName("CustomSleepThresholdMultiplier")
  public open var customSleepThresholdMultiplier: Number

  @JsName("StabilizationThresholdMultiplier")
  public open var stabilizationThresholdMultiplier: Number

  @JsName("PhysicsBlendWeight")
  public open var physicsBlendWeight: Number

  public override fun clone(): BodyInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BodyInstance

    @JsName("C")
    public fun copy(other: Any): BodyInstance
  }
}

public open external class BodySetup(
  outer: UObject,
) : BodySetupCore {
  @JsName("AggGeom")
  public open var aggGeom: KAggregateGeom

  @JsName("bAlwaysFullAnimWeight")
  public open var alwaysFullAnimWeight: Boolean

  @JsName("bConsiderForBounds")
  public open var considerForBounds: Boolean

  @JsName("bMeshCollideAll")
  public open var meshCollideAll: Boolean

  @JsName("bDoubleSidedGeometry")
  public open var doubleSidedGeometry: Boolean

  @JsName("bGenerateNonMirroredCollision")
  public open var generateNonMirroredCollision: Boolean

  @JsName("bSharedCookedData")
  public open var sharedCookedData: Boolean

  @JsName("bGenerateMirroredCollision")
  public open var generateMirroredCollision: Boolean

  @JsName("bSupportUVsAndFaceRemap")
  public open var supportUVsAndFaceRemap: Boolean

  @JsName("bNeverNeedsCookedCollisionData")
  public open var neverNeedsCookedCollisionData: Boolean

  @JsName("PhysMaterial")
  public open var physMaterial: PhysicalMaterial

  @JsName("WalkableSlopeOverride")
  public open var walkableSlopeOverride: WalkableSlopeOverride

  @JsName("BuildScale")
  public open var buildScale: Number

  @JsName("DefaultInstance")
  public open var defaultInstance: BodyInstance

  @JsName("BuildScale3D")
  public open var buildScale3d: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BodySetup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BodySetup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BodySetup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BodySetup

    @JsName("C")
    public fun copy(other: UObject): BodySetup

    @JsName("C")
    public fun copy(other: Any): BodySetup
  }
}

public open external class BrushComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("Brush")
  public open var brush: Model

  @JsName("BrushBodySetup")
  public open var brushBodySetup: BodySetup

  @JsName("PrePivot")
  public open var prePivot: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrushComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrushComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushComponent

    @JsName("C")
    public fun copy(other: UObject): BrushComponent

    @JsName("C")
    public fun copy(other: Any): BrushComponent
  }
}

public open external class BuilderPoly {
  @JsName("VertexIndices")
  public open var vertexIndices: Array<Number>

  @JsName("Direction")
  public open var direction: Number

  @JsName("ItemName")
  public open var itemName: String

  @JsName("PolyFlags")
  public open var polyFlags: Number

  public open fun clone(): BuilderPoly

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BuilderPoly

    @JsName("C")
    public fun copy(other: Any): BuilderPoly
  }
}

public open external class LayerActorStats {
  @JsName("Type")
  public open var type: UnrealEngineClass

  @JsName("Total")
  public open var total: Number

  public open fun clone(): LayerActorStats

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LayerActorStats

    @JsName("C")
    public fun copy(other: Any): LayerActorStats
  }
}

public open external class Layer(
  outer: UObject,
) : UObject {
  @JsName("LayerName")
  public open var layerName: String

  @JsName("bIsVisible")
  public open var isVisible: Boolean

  @JsName("ActorStats")
  public open var actorStats: Array<LayerActorStats>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Layer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Layer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Layer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Layer

    @JsName("C")
    public fun copy(other: UObject): Layer

    @JsName("C")
    public fun copy(other: Any): Layer
  }
}

public open external class ThumbnailInfo(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ThumbnailInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ThumbnailInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ThumbnailInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ThumbnailInfo

    @JsName("C")
    public fun copy(other: UObject): ThumbnailInfo

    @JsName("C")
    public fun copy(other: Any): ThumbnailInfo
  }
}

public open external class ModelComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("ModelBodySetup")
  public open var modelBodySetup: BodySetup

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModelComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModelComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModelComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModelComponent

    @JsName("C")
    public fun copy(other: UObject): ModelComponent

    @JsName("C")
    public fun copy(other: Any): ModelComponent
  }
}

public open external class LevelActorContainer(
  outer: UObject,
) : UObject {
  @JsName("Actors")
  public open var actors: Array<Actor>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelActorContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelActorContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelActorContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelActorContainer

    @JsName("C")
    public fun copy(other: UObject): LevelActorContainer

    @JsName("C")
    public fun copy(other: Any): LevelActorContainer
  }
}

public open external class LevelScriptBlueprint(
  outer: UObject,
) : Blueprint {
  @JsName("FriendlyName")
  public open var friendlyName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelScriptBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelScriptBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelScriptBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelScriptBlueprint

    @JsName("C")
    public fun copy(other: UObject): LevelScriptBlueprint

    @JsName("C")
    public fun copy(other: Any): LevelScriptBlueprint
  }
}

public open external class IntVector {
  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  @JsName("Z")
  public open var z: Number

  public open fun clone(): IntVector

  @JsName("Conv_IntVectorToString")
  public open fun convertIntVectorToString(): String

  @JsName("Conv_IntVectorToVector")
  public open fun convertIntVectorToVector(): Vector

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IntVector

    @JsName("C")
    public fun copy(other: Any): IntVector

    @JsName("Conv_IntVectorToString")
    public fun convertIntVectorToString(inIntVec: IntVector): String

    @JsName("Conv_IntVectorToVector")
    public fun convertIntVectorToVector(inIntVector: IntVector): Vector

    @JsName("Conv_IntToIntVector")
    public fun convertIntToIntVector(inInt: Number): IntVector
  }
}

public open external class LevelScriptActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("bInputEnabled")
  public open var inputEnabled: Boolean

  @JsName("WorldOriginLocationChanged")
  public open fun worldOriginLocationChanged(oldOriginLocation: IntVector,
      newOriginLocation: IntVector): Unit

  @JsName("SetCinematicMode")
  public open fun setCinematicMode(
    cinematicMode: Boolean,
    hidePlayer: Boolean,
    affectsHud: Boolean,
    affectsMovement: Boolean,
    affectsTurning: Boolean,
  ): Unit

  @JsName("RemoteEvent")
  public open fun remoteEvent(eventName: String): Boolean

  @JsName("LevelReset")
  public open fun levelReset(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelScriptActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelScriptActor

    @JsName("C")
    public fun copy(other: UObject): LevelScriptActor

    @JsName("C")
    public fun copy(other: Any): LevelScriptActor
  }
}

public open external class NavAreaBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavAreaBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavAreaBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavAreaBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavAreaBase

    @JsName("C")
    public fun copy(other: UObject): NavAreaBase

    @JsName("C")
    public fun copy(other: Any): NavAreaBase
  }
}

public open external class ShapeComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("ShapeBodySetup")
  public open var shapeBodySetup: BodySetup

  @JsName("AreaClass")
  public open var areaClass: UnrealEngineClass

  @JsName("ShapeColor")
  public open var shapeColor: Color

  @JsName("bDrawOnlyIfSelected")
  public open var drawOnlyIfSelected: Boolean

  @JsName("bShouldCollideWhenPlacing")
  public open var shouldCollideWhenPlacing: Boolean

  @JsName("bDynamicObstacle")
  public open var dynamicObstacle: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ShapeComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ShapeComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ShapeComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ShapeComponent

    @JsName("C")
    public fun copy(other: UObject): ShapeComponent

    @JsName("C")
    public fun copy(other: Any): ShapeComponent
  }
}

@JsName("T$22")
public external interface Object22 {
  @JsName("OutRadius")
  public var outRadius: Number

  @JsName("OutHalfHeightWithoutHemisphere")
  public var outHalfHeightWithoutHemisphere: Number
}

@JsName("T$23")
public external interface Object23 {
  @JsName("OutRadius")
  public var outRadius: Number

  @JsName("OutHalfHeight")
  public var outHalfHeight: Number
}

public open external class CapsuleComponent(
  outer: UObject,
) : ShapeComponent {
  @JsName("CapsuleHalfHeight")
  public open var capsuleHalfHeight: Number

  @JsName("CapsuleRadius")
  public open var capsuleRadius: Number

  @JsName("CapsuleHeight")
  public open var capsuleHeight: Number

  @JsName("SetCapsuleSize")
  public open fun setCapsuleSize(
    inRadius: Number,
    inHalfHeight: Number,
    updateOverlaps: Boolean,
  ): Unit

  @JsName("SetCapsuleRadius")
  public open fun setCapsuleRadius(radius: Number, updateOverlaps: Boolean): Unit

  @JsName("SetCapsuleHalfHeight")
  public open fun setCapsuleHalfHeight(halfHeight: Number, updateOverlaps: Boolean): Unit

  @JsName("GetUnscaledCapsuleSize_WithoutHemisphere")
  public open fun getUnscaledCapsuleSizeWithoutHemisphere(outRadius: Number,
      outHalfHeightWithoutHemisphere: Number): Object22

  @JsName("GetUnscaledCapsuleSize")
  public open fun getUnscaledCapsuleSize(outRadius: Number, outHalfHeight: Number): Object23

  @JsName("GetUnscaledCapsuleRadius")
  public open fun getUnscaledCapsuleRadius(): Number

  @JsName("GetUnscaledCapsuleHalfHeight_WithoutHemisphere")
  public open fun getUnscaledCapsuleHalfHeightWithoutHemisphere(): Number

  @JsName("GetUnscaledCapsuleHalfHeight")
  public open fun getUnscaledCapsuleHalfHeight(): Number

  @JsName("GetShapeScale")
  public open fun getShapeScale(): Number

  @JsName("GetScaledCapsuleSize_WithoutHemisphere")
  public open fun getScaledCapsuleSizeWithoutHemisphere(outRadius: Number,
      outHalfHeightWithoutHemisphere: Number): Object22

  @JsName("GetScaledCapsuleSize")
  public open fun getScaledCapsuleSize(outRadius: Number, outHalfHeight: Number): Object23

  @JsName("GetScaledCapsuleRadius")
  public open fun getScaledCapsuleRadius(): Number

  @JsName("GetScaledCapsuleHalfHeight_WithoutHemisphere")
  public open fun getScaledCapsuleHalfHeightWithoutHemisphere(): Number

  @JsName("GetScaledCapsuleHalfHeight")
  public open fun getScaledCapsuleHalfHeight(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CapsuleComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CapsuleComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CapsuleComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CapsuleComponent

    @JsName("C")
    public fun copy(other: UObject): CapsuleComponent

    @JsName("C")
    public fun copy(other: Any): CapsuleComponent
  }
}

public open external class PerQualityLevelInt {
  @JsName("Default")
  public open var default: Number

  @JsName("PerQuality")
  public open var perQuality: Any

  public open fun clone(): PerQualityLevelInt

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PerQualityLevelInt

    @JsName("C")
    public fun copy(other: Any): PerQualityLevelInt
  }
}

public open external class StreamableRenderAsset(
  outer: UObject,
) : UObject {
  @JsName("ForceMipLevelsToBeResidentTimestamp")
  public open var forceMipLevelsToBeResidentTimestamp: Any

  @JsName("NumCinematicMipLevels")
  public open var numCinematicMipLevels: Number

  @JsName("NoRefStreamingLODBias")
  public open var noRefStreamingLodBias: PerQualityLevelInt

  @JsName("StreamingIndex")
  public open var streamingIndex: Number

  @JsName("CachedCombinedLODBias")
  public open var cachedCombinedLodBias: Number

  @JsName("NeverStream")
  public open var neverStream: Boolean

  @JsName("bGlobalForceMipLevelsToBeResident")
  public open var globalForceMipLevelsToBeResident: Boolean

  @JsName("bHasStreamingUpdatePending")
  public open var hasStreamingUpdatePending: Boolean

  @JsName("bForceMiplevelsToBeResident")
  public open var forceMiplevelsToBeResident: Boolean

  @JsName("bIgnoreStreamingMipBias")
  public open var ignoreStreamingMipBias: Boolean

  @JsName("bUseCinematicMipLevels")
  public open var useCinematicMipLevels: Boolean

  @JsName("SetForceMipLevelsToBeResident")
  public open fun setForceMipLevelsToBeResident(seconds: Number, cinematicLodGroupMask: Number):
      Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StreamableRenderAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StreamableRenderAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StreamableRenderAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StreamableRenderAsset

    @JsName("C")
    public fun copy(other: UObject): StreamableRenderAsset

    @JsName("C")
    public fun copy(other: Any): StreamableRenderAsset
  }
}

@JsName("ETextureSourceCompressionFormat")
public external object TextureSourceCompressionFormat {
  @JsName("TSCF_None")
  public var None: String

  @JsName("TSCF_PNG")
  public var PNG: String

  @JsName("TSCF_JPEG")
  public var JPEG: String

  @JsName("TSCF_MAX")
  public var Max: String
}

@JsName("ETextureSourceFormat")
public external object TextureSourceFormat {
  @JsName("TSF_Invalid")
  public var Invalid: String

  @JsName("TSF_G8")
  public var G8: String

  @JsName("TSF_BGRA8")
  public var Bgra8: String

  @JsName("TSF_BGRE8")
  public var Bgre8: String

  @JsName("TSF_RGBA16")
  public var Rgba16: String

  @JsName("TSF_RGBA16F")
  public var Rgba16f: String

  @JsName("TSF_RGBA8")
  public var Rgba8: String

  @JsName("TSF_RGBE8")
  public var Rgbe8: String

  @JsName("TSF_G16")
  public var G16: String

  @JsName("TSF_MAX")
  public var Max: String
}

public open external class TextureSourceBlock {
  @JsName("BlockX")
  public open var blockX: Number

  @JsName("BlockY")
  public open var blockY: Number

  @JsName("SizeX")
  public open var sizeX: Number

  @JsName("SizeY")
  public open var sizeY: Number

  @JsName("NumSlices")
  public open var numSlices: Number

  @JsName("NumMips")
  public open var numMips: Number

  public open fun clone(): TextureSourceBlock

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TextureSourceBlock

    @JsName("C")
    public fun copy(other: Any): TextureSourceBlock
  }
}

public open external class TextureSource {
  public open var ID: Guid

  @JsName("BaseBlockX")
  public open var baseBlockX: Number

  @JsName("BaseBlockY")
  public open var baseBlockY: Number

  @JsName("SizeX")
  public open var sizeX: Number

  @JsName("SizeY")
  public open var sizeY: Number

  @JsName("NumSlices")
  public open var numSlices: Number

  @JsName("NumMips")
  public open var numMips: Number

  @JsName("NumLayers")
  public open var numLayers: Number

  @JsName("bPNGCompressed")
  public open var pngCompressed: Boolean

  @JsName("bLongLatCubemap")
  public open var longLatCubemap: Boolean

  @JsName("CompressionFormat")
  public open var compressionFormat: String

  @JsName("bGuidIsHash")
  public open var guidIsHash: Boolean

  @JsName("Format")
  public open var format: String

  @JsName("LayerFormat")
  public open var layerFormat: Array<String>

  @JsName("Blocks")
  public open var blocks: Array<TextureSourceBlock>

  @JsName("BlockDataOffsets")
  public open var blockDataOffsets: Array<Any>

  public open fun clone(): TextureSource

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TextureSource

    @JsName("C")
    public fun copy(other: Any): TextureSource
  }
}

public open external class AssetImportInfo {
  public open fun clone(): AssetImportInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetImportInfo

    @JsName("C")
    public fun copy(other: Any): AssetImportInfo
  }
}

public open external class AssetImportData(
  outer: UObject,
) : UObject {
  @JsName("SourceFilePath")
  public open var sourceFilePath: String

  @JsName("SourceFileTimestamp")
  public open var sourceFileTimestamp: String

  @JsName("SourceData")
  public open var sourceData: AssetImportInfo

  @JsName("ScriptedAddFilename")
  public open fun scriptedAddFilename(
    inPath: String,
    index: Number,
    sourceFileLabel: String,
  ): Unit

  @JsName("K2_GetFirstFilename")
  public open fun k2GetFirstFilename(): String

  @JsName("K2_ExtractFilenames")
  public open fun k2ExtractFilenames(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetImportData

    @JsName("C")
    public fun copy(other: UObject): AssetImportData

    @JsName("C")
    public fun copy(other: Any): AssetImportData
  }
}

@JsName("ETextureLossyCompressionAmount")
public external object TextureLossyCompressionAmount {
  @JsName("TLCA_Default")
  public var Default: String

  @JsName("TLCA_None")
  public var None: String

  @JsName("TLCA_Lowest")
  public var Lowest: String

  @JsName("TLCA_Low")
  public var Low: String

  @JsName("TLCA_Medium")
  public var Medium: String

  @JsName("TLCA_High")
  public var High: String

  @JsName("TLCA_Highest")
  public var Highest: String

  @JsName("TLCA_MAX")
  public var Max: String
}

@JsName("ETextureCompressionQuality")
public external object TextureCompressionQuality {
  @JsName("TCQ_Default")
  public var Default: String

  @JsName("TCQ_Lowest")
  public var Lowest: String

  @JsName("TCQ_Low")
  public var Low: String

  @JsName("TCQ_Medium")
  public var Medium: String

  @JsName("TCQ_High")
  public var High: String

  @JsName("TCQ_Highest")
  public var Highest: String

  @JsName("TCQ_MAX")
  public var Max: String
}

@JsName("ETexturePowerOfTwoSetting")
public external object TexturePowerOfTwoSetting {
  public var None: String

  public var PadToPowerOfTwo: String

  public var PadToSquarePowerOfTwo: String

  @JsName("ETexturePowerOfTwoSetting_MAX")
  public var Max: String
}

public external object TextureMipGenSettings {
  @JsName("TMGS_FromTextureGroup")
  public var tmgsFromTextureGroup: String

  @JsName("TMGS_SimpleAverage")
  public var tmgsSimpleAverage: String

  @JsName("TMGS_Sharpen0")
  public var tmgsSharpen0: String

  @JsName("TMGS_Sharpen1")
  public var tmgsSharpen1: String

  @JsName("TMGS_Sharpen2")
  public var tmgsSharpen2: String

  @JsName("TMGS_Sharpen3")
  public var tmgsSharpen3: String

  @JsName("TMGS_Sharpen4")
  public var tmgsSharpen4: String

  @JsName("TMGS_Sharpen5")
  public var tmgsSharpen5: String

  @JsName("TMGS_Sharpen6")
  public var tmgsSharpen6: String

  @JsName("TMGS_Sharpen7")
  public var tmgsSharpen7: String

  @JsName("TMGS_Sharpen8")
  public var tmgsSharpen8: String

  @JsName("TMGS_Sharpen9")
  public var tmgsSharpen9: String

  @JsName("TMGS_Sharpen10")
  public var tmgsSharpen10: String

  @JsName("TMGS_NoMipmaps")
  public var tmgsNoMipmaps: String

  @JsName("TMGS_LeaveExistingMips")
  public var tmgsLeaveExistingMips: String

  @JsName("TMGS_Blur1")
  public var tmgsBlur1: String

  @JsName("TMGS_Blur2")
  public var tmgsBlur2: String

  @JsName("TMGS_Blur3")
  public var tmgsBlur3: String

  @JsName("TMGS_Blur4")
  public var tmgsBlur4: String

  @JsName("TMGS_Blur5")
  public var tmgsBlur5: String

  @JsName("TMGS_Unfiltered")
  public var tmgsUnfiltered: String

  @JsName("TMGS_Angular")
  public var tmgsAngular: String

  @JsName("TMGS_MAX")
  public var tmgsmax: String
}

@JsName("ECompositeTextureMode")
public external object CompositeTextureMode {
  @JsName("CTM_Disabled")
  public var Disabled: String

  @JsName("CTM_NormalRoughnessToRed")
  public var NormalRoughnessToRed: String

  @JsName("CTM_NormalRoughnessToGreen")
  public var NormalRoughnessToGreen: String

  @JsName("CTM_NormalRoughnessToBlue")
  public var NormalRoughnessToBlue: String

  @JsName("CTM_NormalRoughnessToAlpha")
  public var NormalRoughnessToAlpha: String

  @JsName("CTM_MAX")
  public var Max: String
}

public external object TextureCompressionSettings {
  @JsName("TC_Default")
  public var tcDefault: String

  @JsName("TC_Normalmap")
  public var tcNormalmap: String

  @JsName("TC_Masks")
  public var tcMasks: String

  @JsName("TC_Grayscale")
  public var tcGrayscale: String

  @JsName("TC_Displacementmap")
  public var tcDisplacementmap: String

  @JsName("TC_VectorDisplacementmap")
  public var tcVectorDisplacementmap: String

  @JsName("TC_HDR")
  public var tchdr: String

  @JsName("TC_EditorIcon")
  public var tcEditorIcon: String

  @JsName("TC_Alpha")
  public var tcAlpha: String

  @JsName("TC_DistanceFieldFont")
  public var tcDistanceFieldFont: String

  @JsName("TC_HDR_Compressed")
  public var tchdrCompressed: String

  @JsName("TC_BC7")
  public var tcbc7: String

  @JsName("TC_HalfFloat")
  public var tcHalfFloat: String

  @JsName("TC_LQ")
  public var tclq: String

  @JsName("TC_EncodedReflectionCapture")
  public var tcEncodedReflectionCapture: String

  @JsName("TC_MAX")
  public var tcmax: String
}

public open external class TextureFormatSettings {
  @JsName("CompressionSettings")
  public open var compressionSettings: String

  @JsName("CompressionNoAlpha")
  public open var compressionNoAlpha: Boolean

  @JsName("CompressionForceAlpha")
  public open var compressionForceAlpha: Boolean

  @JsName("CompressionNone")
  public open var compressionNone: Boolean

  @JsName("CompressionYCoCg")
  public open var compressionYCoCg: Boolean

  @JsName("sRGB")
  public open var sRgb: Boolean

  public open fun clone(): TextureFormatSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TextureFormatSettings

    @JsName("C")
    public fun copy(other: Any): TextureFormatSettings
  }
}

public external object TextureFilter {
  @JsName("TF_Nearest")
  public var tfNearest: String

  @JsName("TF_Bilinear")
  public var tfBilinear: String

  @JsName("TF_Trilinear")
  public var tfTrilinear: String

  @JsName("TF_Default")
  public var tfDefault: String

  @JsName("TF_MAX")
  public var tfmax: String
}

@JsName("ETextureMipLoadOptions")
public external object TextureMipLoadOptions {
  public var Default: String

  public var AllMips: String

  public var OnlyFirstMip: String

  @JsName("ETextureMipLoadOptions_MAX")
  public var Max: String
}

public external object TextureGroup {
  @JsName("TEXTUREGROUP_World")
  public var texturegroupWorld: String

  @JsName("TEXTUREGROUP_WorldNormalMap")
  public var texturegroupWorldNormalMap: String

  @JsName("TEXTUREGROUP_WorldSpecular")
  public var texturegroupWorldSpecular: String

  @JsName("TEXTUREGROUP_Character")
  public var texturegroupCharacter: String

  @JsName("TEXTUREGROUP_CharacterNormalMap")
  public var texturegroupCharacterNormalMap: String

  @JsName("TEXTUREGROUP_CharacterSpecular")
  public var texturegroupCharacterSpecular: String

  @JsName("TEXTUREGROUP_Weapon")
  public var texturegroupWeapon: String

  @JsName("TEXTUREGROUP_WeaponNormalMap")
  public var texturegroupWeaponNormalMap: String

  @JsName("TEXTUREGROUP_WeaponSpecular")
  public var texturegroupWeaponSpecular: String

  @JsName("TEXTUREGROUP_Vehicle")
  public var texturegroupVehicle: String

  @JsName("TEXTUREGROUP_VehicleNormalMap")
  public var texturegroupVehicleNormalMap: String

  @JsName("TEXTUREGROUP_VehicleSpecular")
  public var texturegroupVehicleSpecular: String

  @JsName("TEXTUREGROUP_Cinematic")
  public var texturegroupCinematic: String

  @JsName("TEXTUREGROUP_Effects")
  public var texturegroupEffects: String

  @JsName("TEXTUREGROUP_EffectsNotFiltered")
  public var texturegroupEffectsNotFiltered: String

  @JsName("TEXTUREGROUP_Skybox")
  public var texturegroupSkybox: String

  @JsName("TEXTUREGROUP_UI")
  public var texturegroupui: String

  @JsName("TEXTUREGROUP_Lightmap")
  public var texturegroupLightmap: String

  @JsName("TEXTUREGROUP_RenderTarget")
  public var texturegroupRenderTarget: String

  @JsName("TEXTUREGROUP_MobileFlattened")
  public var texturegroupMobileFlattened: String

  @JsName("TEXTUREGROUP_ProcBuilding_Face")
  public var texturegroupProcBuildingFace: String

  @JsName("TEXTUREGROUP_ProcBuilding_LightMap")
  public var texturegroupProcBuildingLightMap: String

  @JsName("TEXTUREGROUP_Shadowmap")
  public var texturegroupShadowmap: String

  @JsName("TEXTUREGROUP_ColorLookupTable")
  public var texturegroupColorLookupTable: String

  @JsName("TEXTUREGROUP_Terrain_Heightmap")
  public var texturegroupTerrainHeightmap: String

  @JsName("TEXTUREGROUP_Terrain_Weightmap")
  public var texturegroupTerrainWeightmap: String

  @JsName("TEXTUREGROUP_Bokeh")
  public var texturegroupBokeh: String

  @JsName("TEXTUREGROUP_IESLightProfile")
  public var texturegroupiesLightProfile: String

  @JsName("TEXTUREGROUP_Pixels2D")
  public var texturegroupPixels2d: String

  @JsName("TEXTUREGROUP_HierarchicalLOD")
  public var texturegroupHierarchicalLod: String

  @JsName("TEXTUREGROUP_Impostor")
  public var texturegroupImpostor: String

  @JsName("TEXTUREGROUP_ImpostorNormalDepth")
  public var texturegroupImpostorNormalDepth: String

  @JsName("TEXTUREGROUP_8BitData")
  public var texturegroup8BitData: String

  @JsName("TEXTUREGROUP_16BitData")
  public var texturegroup16BitData: String

  @JsName("TEXTUREGROUP_Project01")
  public var texturegroupProject01: String

  @JsName("TEXTUREGROUP_Project02")
  public var texturegroupProject02: String

  @JsName("TEXTUREGROUP_Project03")
  public var texturegroupProject03: String

  @JsName("TEXTUREGROUP_Project04")
  public var texturegroupProject04: String

  @JsName("TEXTUREGROUP_Project05")
  public var texturegroupProject05: String

  @JsName("TEXTUREGROUP_Project06")
  public var texturegroupProject06: String

  @JsName("TEXTUREGROUP_Project07")
  public var texturegroupProject07: String

  @JsName("TEXTUREGROUP_Project08")
  public var texturegroupProject08: String

  @JsName("TEXTUREGROUP_Project09")
  public var texturegroupProject09: String

  @JsName("TEXTUREGROUP_Project10")
  public var texturegroupProject10: String

  @JsName("TEXTUREGROUP_Project11")
  public var texturegroupProject11: String

  @JsName("TEXTUREGROUP_Project12")
  public var texturegroupProject12: String

  @JsName("TEXTUREGROUP_Project13")
  public var texturegroupProject13: String

  @JsName("TEXTUREGROUP_Project14")
  public var texturegroupProject14: String

  @JsName("TEXTUREGROUP_Project15")
  public var texturegroupProject15: String

  @JsName("TEXTUREGROUP_Project16")
  public var texturegroupProject16: String

  @JsName("TEXTUREGROUP_MAX")
  public var texturegroupmax: String
}

public open external class PerPlatformFloat {
  @JsName("Default")
  public open var default: Number

  @JsName("PerPlatform")
  public open var perPlatform: Any

  public open fun clone(): PerPlatformFloat

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PerPlatformFloat

    @JsName("C")
    public fun copy(other: Any): PerPlatformFloat
  }
}

@JsName("ETextureDownscaleOptions")
public external object TextureDownscaleOptions {
  public var Default: String

  public var Unfiltered: String

  public var SimpleAverage: String

  public var Sharpen0: String

  public var Sharpen1: String

  public var Sharpen2: String

  public var Sharpen3: String

  public var Sharpen4: String

  public var Sharpen5: String

  public var Sharpen6: String

  public var Sharpen7: String

  public var Sharpen8: String

  public var Sharpen9: String

  public var Sharpen10: String

  @JsName("ETextureDownscaleOptions_MAX")
  public var Max: String
}

@JsName("ETextureSourceEncoding")
public external object TextureSourceEncoding {
  @JsName("TSE_None")
  public var None: String

  @JsName("TSE_Linear")
  public var Linear: String

  @JsName("TSE_sRGB")
  public var SRgb: String

  @JsName("TSE_ST2084")
  public var St2084: String

  @JsName("TSE_Gamma22")
  public var Gamma22: String

  @JsName("TSE_BT1886")
  public var Bt1886: String

  @JsName("TSE_Gamma26")
  public var Gamma26: String

  @JsName("TSE_Cineon")
  public var Cineon: String

  @JsName("TSE_REDLog")
  public var RedLog: String

  @JsName("TSE_REDLog3G10")
  public var RedLog3g10: String

  @JsName("TSE_SLog1")
  public var SLog1: String

  @JsName("TSE_SLog2")
  public var SLog2: String

  @JsName("TSE_SLog3")
  public var SLog3: String

  @JsName("TSE_AlexaV3LogC")
  public var AlexaV3LogC: String

  @JsName("TSE_CanonLog")
  public var CanonLog: String

  @JsName("TSE_ProTune")
  public var ProTune: String

  @JsName("TSE_VLog")
  public var VLog: String

  @JsName("TSE_MAX")
  public var Max: String
}

@JsName("ETextureColorSpace")
public external object TextureColorSpace {
  @JsName("TCS_None")
  public var None: String

  @JsName("TCS_sRGB")
  public var SRgb: String

  @JsName("TCS_Rec2020")
  public var Rec2020: String

  @JsName("TCS_ACESAP0")
  public var Acesap0: String

  @JsName("TCS_ACESAP1")
  public var Acesap1: String

  @JsName("TCS_P3DCI")
  public var P3dci: String

  @JsName("TCS_P3D65")
  public var P3d65: String

  @JsName("TCS_REDWideGamut")
  public var RedWideGamut: String

  @JsName("TCS_SonySGamut3")
  public var SonySGamut3: String

  @JsName("TCS_SonySGamut3Cine")
  public var SonySGamut3Cine: String

  @JsName("TCS_AlexaWideGamut")
  public var AlexaWideGamut: String

  @JsName("TCS_CanonCinemaGamut")
  public var CanonCinemaGamut: String

  @JsName("TCS_GoProProtuneNative")
  public var GoProProtuneNative: String

  @JsName("TCS_PanasonicVGamut")
  public var PanasonicVGamut: String

  @JsName("TCS_Custom")
  public var Custom: String

  @JsName("TCS_MAX")
  public var Max: String
}

@JsName("ETextureChromaticAdaptationMethod")
public external object TextureChromaticAdaptationMethod {
  @JsName("TCAM_None")
  public var None: String

  @JsName("TCAM_Bradford")
  public var Bradford: String

  @JsName("TCAM_CAT02")
  public var Cat02: String

  @JsName("TCAM_MAX")
  public var Max: String
}

public open external class TextureSourceColorSettings {
  @JsName("EncodingOverride")
  public open var encodingOverride: String

  @JsName("ColorSpace")
  public open var colorSpace: String

  @JsName("RedChromaticityCoordinate")
  public open var redChromaticityCoordinate: Vector2d

  @JsName("GreenChromaticityCoordinate")
  public open var greenChromaticityCoordinate: Vector2d

  @JsName("BlueChromaticityCoordinate")
  public open var blueChromaticityCoordinate: Vector2d

  @JsName("WhiteChromaticityCoordinate")
  public open var whiteChromaticityCoordinate: Vector2d

  @JsName("ChromaticAdaptationMethod")
  public open var chromaticAdaptationMethod: String

  public open fun clone(): TextureSourceColorSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TextureSourceColorSettings

    @JsName("C")
    public fun copy(other: Any): TextureSourceColorSettings
  }
}

@JsName("EDesiredImageFormat")
public external object DesiredImageFormat {
  public var PNG: String

  public var JPG: String

  public var BMP: String

  public var EXR: String

  @JsName("EDesiredImageFormat_MAX")
  public var Max: String
}

public open external class ImageWriteOptions {
  @JsName("Format")
  public open var format: String

  @JsName("OnComplete")
  public open var onComplete: UnrealEngineDelegate<(bSuccess: Boolean) -> Unit>

  @JsName("CompressionQuality")
  public open var compressionQuality: Number

  @JsName("bOverwriteFile")
  public open var overwriteFile: Boolean

  @JsName("bAsync")
  public open var async: Boolean

  public open fun clone(): ImageWriteOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ImageWriteOptions

    @JsName("C")
    public fun copy(other: Any): ImageWriteOptions
  }
}

public open external class Texture(
  outer: UObject,
) : StreamableRenderAsset {
  @JsName("Source")
  public open var source: TextureSource

  @JsName("LightingGuid")
  public open var lightingGuid: Guid

  @JsName("SourceFilePath")
  public open var sourceFilePath: String

  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("AdjustBrightness")
  public open var adjustBrightness: Number

  @JsName("AdjustBrightnessCurve")
  public open var adjustBrightnessCurve: Number

  @JsName("AdjustVibrance")
  public open var adjustVibrance: Number

  @JsName("AdjustSaturation")
  public open var adjustSaturation: Number

  @JsName("AdjustRGBCurve")
  public open var adjustRgbCurve: Number

  @JsName("AdjustHue")
  public open var adjustHue: Number

  @JsName("AdjustMinAlpha")
  public open var adjustMinAlpha: Number

  @JsName("AdjustMaxAlpha")
  public open var adjustMaxAlpha: Number

  @JsName("CompressionNoAlpha")
  public open var compressionNoAlpha: Boolean

  @JsName("CompressionNone")
  public open var compressionNone: Boolean

  @JsName("DeferCompression")
  public open var deferCompression: Boolean

  @JsName("LossyCompressionAmount")
  public open var lossyCompressionAmount: String

  @JsName("OodleTextureSdkVersion")
  public open var oodleTextureSdkVersion: String

  @JsName("MaxTextureSize")
  public open var maxTextureSize: Number

  @JsName("CompressionQuality")
  public open var compressionQuality: String

  @JsName("bDitherMipMapAlpha")
  public open var ditherMipMapAlpha: Boolean

  @JsName("bDoScaleMipsForAlphaCoverage")
  public open var doScaleMipsForAlphaCoverage: Boolean

  @JsName("AlphaCoverageThresholds")
  public open var alphaCoverageThresholds: Vector4

  @JsName("bPreserveBorder")
  public open var preserveBorder: Boolean

  @JsName("bFlipGreenChannel")
  public open var flipGreenChannel: Boolean

  @JsName("PowerOfTwoMode")
  public open var powerOfTwoMode: String

  @JsName("PaddingColor")
  public open var paddingColor: Color

  @JsName("bChromaKeyTexture")
  public open var chromaKeyTexture: Boolean

  @JsName("ChromaKeyThreshold")
  public open var chromaKeyThreshold: Number

  @JsName("ChromaKeyColor")
  public open var chromaKeyColor: Color

  @JsName("MipGenSettings")
  public open var mipGenSettings: String

  @JsName("CompositeTexture")
  public open var compositeTexture: Texture

  @JsName("CompositeTextureMode")
  public open var compositeTextureMode: String

  @JsName("CompositePower")
  public open var compositePower: Number

  @JsName("LayerFormatSettings")
  public open var layerFormatSettings: Array<TextureFormatSettings>

  @JsName("LevelIndex")
  public open var levelIndex: Number

  @JsName("LODBias")
  public open var lodBias: Number

  @JsName("CompressionSettings")
  public open var compressionSettings: String

  @JsName("Filter")
  public open var filter: String

  @JsName("MipLoadOptions")
  public open var mipLoadOptions: String

  @JsName("LODGroup")
  public open var lodGroup: String

  @JsName("Downscale")
  public open var downscale: PerPlatformFloat

  @JsName("DownscaleOptions")
  public open var downscaleOptions: String

  @JsName("sRGB")
  public open var sRgb: Boolean

  @JsName("SourceColorSettings")
  public open var sourceColorSettings: TextureSourceColorSettings

  @JsName("bUseLegacyGamma")
  public open var useLegacyGamma: Boolean

  @JsName("bNoTiling")
  public open var noTiling: Boolean

  @JsName("VirtualTextureStreaming")
  public open var virtualTextureStreaming: Boolean

  @JsName("CompressionYCoCg")
  public open var compressionYCoCg: Boolean

  @JsName("bNotOfflineProcessed")
  public open var notOfflineProcessed: Boolean

  @JsName("bAsyncResourceReleaseHasBeenStarted")
  public open var asyncResourceReleaseHasBeenStarted: Boolean

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("SetSplashScreen")
  public open fun setSplashScreen(
    scale: Vector2d,
    offset: Vector,
    showLoadingMovie: Boolean,
    showOnSet: Boolean,
  ): Unit

  @JsName("ExportToDisk")
  public open fun exportToDisk(filename: String, options: ImageWriteOptions): Unit

  @JsName("AddLoadingScreenSplash")
  public open fun addLoadingScreenSplash(
    translation: Vector,
    rotation: Rotator,
    size: Vector2d,
    deltaRotation: Rotator,
    clearBeforeAdd: Boolean,
  ): Unit

  @JsName("SetLoadingScreen")
  public open fun setLoadingScreen(
    scale: Vector2d,
    offset: Vector,
    showLoadingMovie: Boolean,
    showOnSet: Boolean,
  ): Unit

  @JsName("SetSpectatorScreenTexture")
  public open fun setSpectatorScreenTexture(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Texture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Texture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Texture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Texture

    @JsName("C")
    public fun copy(other: UObject): Texture

    @JsName("C")
    public fun copy(other: Any): Texture

    @JsName("SetSplashScreen")
    public fun setSplashScreen(
      texture: Texture,
      scale: Vector2d,
      offset: Vector,
      showLoadingMovie: Boolean,
      showOnSet: Boolean,
    ): Unit

    @JsName("ExportToDisk")
    public fun exportToDisk(
      texture: Texture,
      filename: String,
      options: ImageWriteOptions,
    ): Unit

    @JsName("AddLoadingScreenSplash")
    public fun addLoadingScreenSplash(
      texture: Texture,
      translation: Vector,
      rotation: Rotator,
      size: Vector2d,
      deltaRotation: Rotator,
      clearBeforeAdd: Boolean,
    ): Unit

    @JsName("SetLoadingScreen")
    public fun setLoadingScreen(
      texture: Texture,
      scale: Vector2d,
      offset: Vector,
      showLoadingMovie: Boolean,
      showOnSet: Boolean,
    ): Unit

    @JsName("SetSpectatorScreenTexture")
    public fun setSpectatorScreenTexture(inTexture: Texture): Unit
  }
}

public external object TextureAddress {
  @JsName("TA_Wrap")
  public var taWrap: String

  @JsName("TA_Clamp")
  public var taClamp: String

  @JsName("TA_Mirror")
  public var taMirror: String

  @JsName("TA_MAX")
  public var tamax: String
}

@JsName("EImportanceWeight")
public external object ImportanceWeight {
  public var Luminance: String

  public var Red: String

  public var Green: String

  public var Blue: String

  public var Alpha: String

  @JsName("EImportanceWeight_MAX")
  public var Max: String
}

@JsName("T$24")
public external interface Object24 {
  @JsName("Texture")
  public var texture: Texture2d

  @JsName("WeightingFunc")
  public var weightingFunc: String
}

@JsName("T$25")
public external interface Object25 {
  @JsName("SamplePosition")
  public var samplePosition: Vector2d

  @JsName("SampleColor")
  public var sampleColor: LinearColor

  @JsName("SampleIntensity")
  public var sampleIntensity: Number

  @JsName("SampleSize")
  public var sampleSize: Number
}

public open external class ImportanceTexture {
  @JsName("Size")
  public open var size: IntPoint

  @JsName("NumMips")
  public open var numMips: Number

  @JsName("MarginalCDF")
  public open var marginalCdf: Array<Number>

  @JsName("ConditionalCDF")
  public open var conditionalCdf: Array<Number>

  @JsName("TextureData")
  public open var textureData: Array<Color>

  @JsName("Texture")
  public open var texture: Any

  @JsName("Weighting")
  public open var weighting: String

  public open fun clone(): ImportanceTexture

  @JsName("BreakImportanceTexture")
  public open fun breakImportanceTexture(texture: Texture2d, weightingFunc: String): Object24

  @JsName("ImportanceSample")
  public open fun importanceSample(
    rand: Vector2d,
    samples: Number,
    intensity: Number,
    samplePosition: Vector2d,
    sampleColor: LinearColor,
    sampleIntensity: Number,
    sampleSize: Number,
  ): Object25

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ImportanceTexture

    @JsName("C")
    public fun copy(other: Any): ImportanceTexture

    @JsName("BreakImportanceTexture")
    public fun breakImportanceTexture(
      importanceTexture: ImportanceTexture,
      texture: Texture2d,
      weightingFunc: String,
    ): Object24

    @JsName("ImportanceSample")
    public fun importanceSample(
      texture: ImportanceTexture,
      rand: Vector2d,
      samples: Number,
      intensity: Number,
      samplePosition: Vector2d,
      sampleColor: LinearColor,
      sampleIntensity: Number,
      sampleSize: Number,
    ): Object25
  }
}

public open external class Margin {
  @JsName("Left")
  public open var left: Number

  @JsName("Top")
  public open var top: Number

  @JsName("Right")
  public open var right: Number

  @JsName("Bottom")
  public open var bottom: Number

  public open fun clone(): Margin

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Margin

    @JsName("C")
    public fun copy(other: Any): Margin
  }
}

@JsName("ESlateColorStylingMode")
public external object SlateColorStylingMode {
  @JsName("UseColor_Specified")
  public var Specified: String

  @JsName("UseColor_ColorTable")
  public var ColorTable: String

  @JsName("UseColor_Foreground")
  public var Foreground: String

  @JsName("UseColor_Foreground_Subdued")
  public var ForegroundSubdued: String

  @JsName("UseColor_UseStyle")
  public var UseStyle: String

  @JsName("UseColor_MAX")
  public var Max: String
}

public open external class SlateColor {
  @JsName("SpecifiedColor")
  public open var specifiedColor: LinearColor

  @JsName("ColorUseRule")
  public open var colorUseRule: String

  public open fun clone(): SlateColor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlateColor

    @JsName("C")
    public fun copy(other: Any): SlateColor

    @JsName("SlateColor_UseForeground")
    public fun slateColorUseForeground(): SlateColor

    @JsName("SlateColor_UseSubduedForeground")
    public fun slateColorUseSubduedForeground(): SlateColor
  }
}

@JsName("ESlateBrushRoundingType")
public external object SlateBrushRoundingType {
  public var FixedRadius: String

  public var HalfHeightRadius: String

  @JsName("ESlateBrushRoundingType_MAX")
  public var Max: String
}

public open external class SlateBrushOutlineSettings {
  @JsName("CornerRadii")
  public open var cornerRadii: Vector4

  @JsName("Color")
  public open var color: SlateColor

  @JsName("Width")
  public open var width: Number

  @JsName("RoundingType")
  public open var roundingType: String

  @JsName("bUseBrushTransparency")
  public open var useBrushTransparency: Boolean

  public open fun clone(): SlateBrushOutlineSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlateBrushOutlineSettings

    @JsName("C")
    public fun copy(other: Any): SlateBrushOutlineSettings
  }
}

public open external class Vector2f {
  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  public open fun clone(): Vector2f

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Vector2f

    @JsName("C")
    public fun copy(other: Any): Vector2f
  }
}

public open external class Box2f {
  @JsName("Min")
  public open var min: Vector2f

  @JsName("Max")
  public open var max: Vector2f

  @JsName("bIsValid")
  public open var isValid: Number

  public open fun clone(): Box2f

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Box2f

    @JsName("C")
    public fun copy(other: Any): Box2f
  }
}

@JsName("ESlateBrushDrawType")
public external object SlateBrushDrawType {
  public var NoDrawType: String

  public var Box: String

  public var Border: String

  public var Image: String

  public var RoundedBox: String

  @JsName("ESlateBrushDrawType_MAX")
  public var Max: String
}

@JsName("ESlateBrushTileType")
public external object SlateBrushTileType {
  public var NoTile: String

  public var Horizontal: String

  public var Vertical: String

  public var Both: String

  @JsName("ESlateBrushTileType_MAX")
  public var Max: String
}

@JsName("ESlateBrushMirrorType")
public external object SlateBrushMirrorType {
  public var NoMirror: String

  public var Horizontal: String

  public var Vertical: String

  public var Both: String

  @JsName("ESlateBrushMirrorType_MAX")
  public var Max: String
}

@JsName("ESlateBrushImageType")
public external object SlateBrushImageType {
  public var NoImage: String

  public var FullColor: String

  public var Linear: String

  public var Vector: String

  @JsName("ESlateBrushImageType_MAX")
  public var Max: String
}

public open external class SubsurfaceProfileStruct {
  @JsName("SurfaceAlbedo")
  public open var surfaceAlbedo: LinearColor

  @JsName("MeanFreePathColor")
  public open var meanFreePathColor: LinearColor

  @JsName("MeanFreePathDistance")
  public open var meanFreePathDistance: Number

  @JsName("WorldUnitScale")
  public open var worldUnitScale: Number

  @JsName("bEnableBurley")
  public open var enableBurley: Boolean

  @JsName("Tint")
  public open var tint: LinearColor

  @JsName("ScatterRadius")
  public open var scatterRadius: Number

  @JsName("SubsurfaceColor")
  public open var subsurfaceColor: LinearColor

  @JsName("FalloffColor")
  public open var falloffColor: LinearColor

  @JsName("BoundaryColorBleed")
  public open var boundaryColorBleed: LinearColor

  @JsName("ExtinctionScale")
  public open var extinctionScale: Number

  @JsName("NormalScale")
  public open var normalScale: Number

  @JsName("ScatteringDistribution")
  public open var scatteringDistribution: Number

  public open var IOR: Number

  @JsName("Roughness0")
  public open var roughness0: Number

  @JsName("Roughness1")
  public open var roughness1: Number

  @JsName("LobeMix")
  public open var lobeMix: Number

  @JsName("TransmissionTintColor")
  public open var transmissionTintColor: LinearColor

  public open fun clone(): SubsurfaceProfileStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubsurfaceProfileStruct

    @JsName("C")
    public fun copy(other: Any): SubsurfaceProfileStruct
  }
}

public open external class SubsurfaceProfile(
  outer: UObject,
) : UObject {
  @JsName("Settings")
  public open var settings: SubsurfaceProfileStruct

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubsurfaceProfile

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubsurfaceProfile

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubsurfaceProfile

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubsurfaceProfile

    @JsName("C")
    public fun copy(other: UObject): SubsurfaceProfile

    @JsName("C")
    public fun copy(other: Any): SubsurfaceProfile
  }
}

public open external class LightmassMaterialInterfaceSettings {
  @JsName("EmissiveBoost")
  public open var emissiveBoost: Number

  @JsName("DiffuseBoost")
  public open var diffuseBoost: Number

  @JsName("ExportResolutionScale")
  public open var exportResolutionScale: Number

  @JsName("bCastShadowAsMasked")
  public open var castShadowAsMasked: Boolean

  @JsName("bOverrideCastShadowAsMasked")
  public open var overrideCastShadowAsMasked: Boolean

  @JsName("bOverrideEmissiveBoost")
  public open var overrideEmissiveBoost: Boolean

  @JsName("bOverrideDiffuseBoost")
  public open var overrideDiffuseBoost: Boolean

  @JsName("bOverrideExportResolutionScale")
  public open var overrideExportResolutionScale: Boolean

  public open fun clone(): LightmassMaterialInterfaceSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassMaterialInterfaceSettings

    @JsName("C")
    public fun copy(other: Any): LightmassMaterialInterfaceSettings
  }
}

@JsName("T$26")
public external interface PathStringProvider {
  @JsName("PathString")
  public var pathString: String
}

public open external class SoftObjectPath {
  @JsName("AssetPathName")
  public open var assetPathName: String

  @JsName("SubPathString")
  public open var subPathString: String

  public open fun clone(): SoftObjectPath

  @JsName("BreakSoftObjectPath")
  public open fun breakSoftObjectPath(pathString: String): PathStringProvider

  @JsName("Conv_SoftObjPathToSoftObjRef")
  public open fun convertSoftObjPathToSoftObjRef(): UObject

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoftObjectPath

    @JsName("C")
    public fun copy(other: Any): SoftObjectPath

    @JsName("BreakSoftObjectPath")
    public fun breakSoftObjectPath(inSoftObjectPath: SoftObjectPath, pathString: String):
        PathStringProvider

    @JsName("Conv_SoftObjPathToSoftObjRef")
    public fun convertSoftObjPathToSoftObjRef(softObjectPath: SoftObjectPath): UObject

    @JsName("MakeSoftObjectPath")
    public fun makeSoftObjectPath(pathString: String): SoftObjectPath
  }
}

public open external class MaterialTextureInfo {
  @JsName("SamplingScale")
  public open var samplingScale: Number

  @JsName("UVChannelIndex")
  public open var uvChannelIndex: Number

  @JsName("TextureName")
  public open var textureName: String

  @JsName("TextureReference")
  public open var textureReference: SoftObjectPath

  @JsName("TextureIndex")
  public open var textureIndex: Number

  public open fun clone(): MaterialTextureInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialTextureInfo

    @JsName("C")
    public fun copy(other: Any): MaterialTextureInfo
  }
}

public open external class PhysicalMaterialMask(
  outer: UObject,
) : UObject {
  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("MaskTexture")
  public open var maskTexture: Texture

  @JsName("UVChannelIndex")
  public open var uvChannelIndex: Number

  @JsName("AddressX")
  public open var addressX: String

  @JsName("AddressY")
  public open var addressY: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicalMaterialMask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicalMaterialMask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicalMaterialMask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicalMaterialMask

    @JsName("C")
    public fun copy(other: UObject): PhysicalMaterialMask

    @JsName("C")
    public fun copy(other: Any): PhysicalMaterialMask
  }
}

@JsName("EMaterialParameterAssociation")
public external object MaterialParameterAssociation {
  public var LayerParameter: String

  public var BlendParameter: String

  public var GlobalParameter: String

  @JsName("EMaterialParameterAssociation_MAX")
  public var Max: String
}

@JsName("EMaterialFunctionUsage")
public external object MaterialFunctionUsage {
  public var Default: String

  public var MaterialLayer: String

  public var MaterialLayerBlend: String

  @JsName("EMaterialFunctionUsage_MAX")
  public var Max: String
}

@JsName("EEdGraphPinDirection")
public external object EdGraphPinDirection {
  @JsName("EGPD_Input")
  public var Input: String

  @JsName("EGPD_Output")
  public var Output: String

  @JsName("EGPD_MAX")
  public var Max: String
}

public open external class EdGraphTerminalType {
  @JsName("TerminalCategory")
  public open var terminalCategory: String

  @JsName("TerminalSubCategory")
  public open var terminalSubCategory: String

  @JsName("TerminalSubCategoryObject")
  public open var terminalSubCategoryObject: Any

  @JsName("bTerminalIsConst")
  public open var terminalIsConst: Boolean

  @JsName("bTerminalIsWeakPointer")
  public open var terminalIsWeakPointer: Boolean

  @JsName("bTerminalIsUObjectWrapper")
  public open var terminalIsUObjectWrapper: Boolean

  public open fun clone(): EdGraphTerminalType

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EdGraphTerminalType

    @JsName("C")
    public fun copy(other: Any): EdGraphTerminalType
  }
}

@JsName("EPinContainerType")
public external object PinContainerType {
  public var None: String

  public var Array: String

  public var Set: String

  public var Map: String

  @JsName("EPinContainerType_MAX")
  public var Max: String
}

public open external class EdGraphPinType {
  @JsName("PinCategory")
  public open var pinCategory: String

  @JsName("PinSubCategory")
  public open var pinSubCategory: String

  @JsName("PinSubCategoryObject")
  public open var pinSubCategoryObject: Any

  @JsName("PinSubCategoryMemberReference")
  public open var pinSubCategoryMemberReference: SimpleMemberReference

  @JsName("PinValueType")
  public open var pinValueType: EdGraphTerminalType

  @JsName("ContainerType")
  public open var containerType: String

  @JsName("bIsArray")
  public open var isArray: Boolean

  @JsName("bIsReference")
  public open var isReference: Boolean

  @JsName("bIsConst")
  public open var isConst: Boolean

  @JsName("bIsWeakPointer")
  public open var isWeakPointer: Boolean

  @JsName("bIsUObjectWrapper")
  public open var isUObjectWrapper: Boolean

  @JsName("bSerializeAsSinglePrecisionFloat")
  public open var serializeAsSinglePrecisionFloat: Boolean

  public open fun clone(): EdGraphPinType

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EdGraphPinType

    @JsName("C")
    public fun copy(other: Any): EdGraphPinType
  }
}

@JsName("EdGraphPin_Deprecated")
public open external class EdGraphPinDeprecated(
  outer: UObject,
) : UObject {
  @JsName("PinName")
  public open var pinName: String

  @JsName("PinFriendlyName")
  public open var pinFriendlyName: String

  @JsName("PinToolTip")
  public open var pinToolTip: String

  @JsName("Direction")
  public open var direction: String

  @JsName("PinType")
  public open var pinType: EdGraphPinType

  @JsName("DefaultValue")
  public open var defaultValue: String

  @JsName("AutogeneratedDefaultValue")
  public open var autogeneratedDefaultValue: String

  @JsName("DefaultObject")
  public open var defaultObject: UObject

  @JsName("DefaultTextValue")
  public open var defaultTextValue: String

  @JsName("LinkedTo")
  public open var linkedTo: Array<EdGraphPinDeprecated>

  @JsName("SubPins")
  public open var subPins: Array<EdGraphPinDeprecated>

  @JsName("ParentPin")
  public open var parentPin: EdGraphPinDeprecated

  @JsName("ReferencePassThroughConnection")
  public open var referencePassThroughConnection: EdGraphPinDeprecated

  @JsName("bHidden")
  public open var hidden: Boolean

  @JsName("bNotConnectable")
  public open var notConnectable: Boolean

  @JsName("bDefaultValueIsReadOnly")
  public open var defaultValueIsReadOnly: Boolean

  @JsName("bDefaultValueIsIgnored")
  public open var defaultValueIsIgnored: Boolean

  @JsName("bIsDiffing")
  public open var isDiffing: Boolean

  @JsName("bAdvancedView")
  public open var advancedView: Boolean

  @JsName("bDisplayAsMutableRef")
  public open var displayAsMutableRef: Boolean

  @JsName("PersistentGuid")
  public open var persistentGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdGraphPinDeprecated

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdGraphPinDeprecated

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdGraphPinDeprecated

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdGraphPinDeprecated

    @JsName("C")
    public fun copy(other: UObject): EdGraphPinDeprecated

    @JsName("C")
    public fun copy(other: Any): EdGraphPinDeprecated
  }
}

@JsName("ENodeAdvancedPins")
public external object NodeAdvancedPins {
  public var NoPins: String

  public var Shown: String

  public var Hidden: String

  @JsName("ENodeAdvancedPins_MAX")
  public var Max: String
}

@JsName("ENodeEnabledState")
public external object NodeEnabledState {
  public var Enabled: String

  public var Disabled: String

  public var DevelopmentOnly: String

  @JsName("ENodeEnabledState_MAX")
  public var Max: String
}

@JsName("EJavascriptPinContainerType")
public external object JavascriptPinContainerType {
  public var None: String

  public var Array: String

  public var Set: String

  public var Map: String

  @JsName("EJavascriptPinContainerType_MAX")
  public var Max: String
}

public open external class JavascriptEdGraphPin {
  public open fun clone(): JavascriptEdGraphPin

  @JsName("BreakAllPinLinks")
  public open fun breakAllPinLinks(): Unit

  @JsName("BreakLinkTo")
  public open fun breakLinkTo(b: JavascriptEdGraphPin): Unit

  @JsName("GetDirection")
  public open fun getDirection(): String

  @JsName("GetLinkedPinNum")
  public open fun getLinkedPinNum(): Number

  @JsName("GetLinkedTo")
  public open fun getLinkedTo(): Array<JavascriptEdGraphPin>

  @JsName("GetOwningNode")
  public open fun getOwningNode(): EdGraphNode

  @JsName("GetParentPin")
  public open fun getParentPin(): JavascriptEdGraphPin

  @JsName("GetPinContainerType")
  public open fun getPinContainerType(): String

  @JsName("GetPinGUID")
  public open fun getPinGuid(): Guid

  @JsName("GetPinIndex")
  public open fun getPinIndex(): Number

  @JsName("GetPinName")
  public open fun getPinName(): String

  @JsName("GetPinRefObject")
  public open fun getPinRefObject(): UObject

  @JsName("GetPinType")
  public open fun getPinType(): EdGraphPinType

  @JsName("GetSubPins")
  public open fun getSubPins(): Array<JavascriptEdGraphPin>

  @JsName("IsPinHidden")
  public open fun isPinHidden(): Boolean

  @JsName("IsValid")
  public open fun isValid(): Boolean

  @JsName("MakeLinkTo")
  public open fun makeLinkTo(b: JavascriptEdGraphPin): Unit

  @JsName("SetParentPin")
  public open fun setParentPin(parent: JavascriptEdGraphPin): Unit

  @JsName("SetPinAdvancedView")
  public open fun setPinAdvancedView(advancedView: Boolean): Unit

  @JsName("SetPinContainerType")
  public open fun setPinContainerType(containerType: String): Unit

  @JsName("SetPinHidden")
  public open fun setPinHidden(hidden: Boolean): Unit

  @JsName("SetPinInfo")
  public open fun setPinInfo(inPinName: String, inPinToolTip: String): Unit

  @JsName("SetPinRefObject")
  public open fun setPinRefObject(inObject: UObject): Unit

  @JsName("SetPinType")
  public open fun setPinType(pinType: EdGraphPinType): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptEdGraphPin

    @JsName("C")
    public fun copy(other: Any): JavascriptEdGraphPin

    @JsName("BreakAllPinLinks")
    public fun breakAllPinLinks(a: JavascriptEdGraphPin): Unit

    @JsName("BreakLinkTo")
    public fun breakLinkTo(a: JavascriptEdGraphPin, b: JavascriptEdGraphPin): Unit

    @JsName("GetDirection")
    public fun getDirection(a: JavascriptEdGraphPin): String

    @JsName("GetLinkedPinNum")
    public fun getLinkedPinNum(a: JavascriptEdGraphPin): Number

    @JsName("GetLinkedTo")
    public fun getLinkedTo(a: JavascriptEdGraphPin): Array<JavascriptEdGraphPin>

    @JsName("GetOwningNode")
    public fun getOwningNode(a: JavascriptEdGraphPin): EdGraphNode

    @JsName("GetParentPin")
    public fun getParentPin(a: JavascriptEdGraphPin): JavascriptEdGraphPin

    @JsName("GetPinContainerType")
    public fun getPinContainerType(a: JavascriptEdGraphPin): String

    @JsName("GetPinGUID")
    public fun getPinGuid(a: JavascriptEdGraphPin): Guid

    @JsName("GetPinIndex")
    public fun getPinIndex(a: JavascriptEdGraphPin): Number

    @JsName("GetPinName")
    public fun getPinName(a: JavascriptEdGraphPin): String

    @JsName("GetPinRefObject")
    public fun getPinRefObject(inPin: JavascriptEdGraphPin): UObject

    @JsName("GetPinType")
    public fun getPinType(a: JavascriptEdGraphPin): EdGraphPinType

    @JsName("GetSubPins")
    public fun getSubPins(a: JavascriptEdGraphPin): Array<JavascriptEdGraphPin>

    @JsName("IsPinHidden")
    public fun isPinHidden(a: JavascriptEdGraphPin): Boolean

    @JsName("IsValid")
    public fun isValid(a: JavascriptEdGraphPin): Boolean

    @JsName("MakeLinkTo")
    public fun makeLinkTo(a: JavascriptEdGraphPin, b: JavascriptEdGraphPin): Unit

    @JsName("SetParentPin")
    public fun setParentPin(a: JavascriptEdGraphPin, parent: JavascriptEdGraphPin): Unit

    @JsName("SetPinAdvancedView")
    public fun setPinAdvancedView(a: JavascriptEdGraphPin, advancedView: Boolean): Unit

    @JsName("SetPinContainerType")
    public fun setPinContainerType(a: JavascriptEdGraphPin, containerType: String): Unit

    @JsName("SetPinHidden")
    public fun setPinHidden(a: JavascriptEdGraphPin, hidden: Boolean): Unit

    @JsName("SetPinInfo")
    public fun setPinInfo(
      a: JavascriptEdGraphPin,
      inPinName: String,
      inPinToolTip: String,
    ): Unit

    @JsName("SetPinRefObject")
    public fun setPinRefObject(inPin: JavascriptEdGraphPin, inObject: UObject): Unit

    @JsName("SetPinType")
    public fun setPinType(pin: JavascriptEdGraphPin, pinType: EdGraphPinType): Unit

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JavascriptEdGraphPin
  }
}

public open external class EdGraphNode(
  outer: UObject,
) : UObject {
  @JsName("DeprecatedPins")
  public open var deprecatedPins: Array<EdGraphPinDeprecated>

  @JsName("NodePosX")
  public open var nodePosX: Number

  @JsName("NodePosY")
  public open var nodePosY: Number

  @JsName("NodeWidth")
  public open var nodeWidth: Number

  @JsName("NodeHeight")
  public open var nodeHeight: Number

  @JsName("AdvancedPinDisplay")
  public open var advancedPinDisplay: String

  @JsName("EnabledState")
  public open var enabledState: String

  @JsName("bDisplayAsDisabled")
  public open var displayAsDisabled: Boolean

  @JsName("bUserSetEnabledState")
  public open var userSetEnabledState: Boolean

  @JsName("bIsNodeEnabled")
  public open var isNodeEnabled: Boolean

  @JsName("bCanResizeNode")
  public open var canResizeNode: Boolean

  @JsName("bHasCompilerMessage")
  public open var hasCompilerMessage: Boolean

  @JsName("bCommentBubblePinned")
  public open var commentBubblePinned: Boolean

  @JsName("bCommentBubbleVisible")
  public open var commentBubbleVisible: Boolean

  @JsName("bCommentBubbleMakeVisible")
  public open var commentBubbleMakeVisible: Boolean

  @JsName("bCanRenameNode")
  public open var canRenameNode: Boolean

  @JsName("NodeUpgradeMessage")
  public open var nodeUpgradeMessage: String

  @JsName("NodeComment")
  public open var nodeComment: String

  @JsName("ErrorType")
  public open var errorType: Number

  @JsName("ErrorMsg")
  public open var errorMsg: String

  @JsName("NodeGuid")
  public open var nodeGuid: Guid

  @JsName("AutowireNewNode")
  public open fun autowireNewNode(fromPin: JavascriptEdGraphPin): Unit

  @JsName("CanDuplicateNode")
  public open fun canDuplicateNode(): Boolean

  @JsName("CanUserDeleteNode")
  public open fun canUserDeleteNode(): Boolean

  @JsName("DestroyNode")
  public open fun destroyNode(): Unit

  @JsName("FindPin")
  public open fun findPin(pinName: String, direction: String): JavascriptEdGraphPin

  @JsName("GetPins")
  public open fun getPins(): Array<JavascriptEdGraphPin>

  @JsName("ResizeNode")
  public open fun resizeNode(newSize: Vector2d): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdGraphNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdGraphNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdGraphNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdGraphNode

    @JsName("C")
    public fun copy(other: UObject): EdGraphNode

    @JsName("C")
    public fun copy(other: Any): EdGraphNode

    @JsName("AutowireNewNode")
    public fun autowireNewNode(uNode: EdGraphNode, fromPin: JavascriptEdGraphPin): Unit

    @JsName("CanDuplicateNode")
    public fun canDuplicateNode(uNode: EdGraphNode): Boolean

    @JsName("CanUserDeleteNode")
    public fun canUserDeleteNode(uNode: EdGraphNode): Boolean

    @JsName("DestroyNode")
    public fun destroyNode(uNode: EdGraphNode): Unit

    @JsName("FindPin")
    public fun findPin(
      uNode: EdGraphNode,
      pinName: String,
      direction: String,
    ): JavascriptEdGraphPin

    @JsName("GetPins")
    public fun getPins(uNode: EdGraphNode): Array<JavascriptEdGraphPin>

    @JsName("ResizeNode")
    public fun resizeNode(uNode: EdGraphNode, newSize: Vector2d): Unit
  }
}

public open external class MaterialExpressionComment(
  outer: UObject,
) : MaterialExpression {
  @JsName("SizeX")
  public open var sizeX: Number

  @JsName("SizeY")
  public open var sizeY: Number

  public open var text: String

  @JsName("CommentColor")
  public open var commentColor: LinearColor

  @JsName("FontSize")
  public open var fontSize: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionComment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionComment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionComment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionComment

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionComment

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionComment
  }
}

public open external class ExpressionInput {
  @JsName("Expression")
  public open var expression: MaterialExpression

  @JsName("OutputIndex")
  public open var outputIndex: Number

  @JsName("InputName")
  public open var inputName: String

  public open var mask: Number

  @JsName("MaskR")
  public open var maskR: Number

  @JsName("MaskG")
  public open var maskG: Number

  @JsName("MaskB")
  public open var maskB: Number

  @JsName("MaskA")
  public open var maskA: Number

  @JsName("ExpressionName")
  public open var expressionName: String

  public open fun clone(): ExpressionInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExpressionInput

    @JsName("C")
    public fun copy(other: Any): ExpressionInput
  }
}

@JsName("EFunctionInputType")
public external object FunctionInputType {
  @JsName("FunctionInput_Scalar")
  public var Scalar: String

  @JsName("FunctionInput_Vector2")
  public var Vector2: String

  @JsName("FunctionInput_Vector3")
  public var Vector3: String

  @JsName("FunctionInput_Vector4")
  public var Vector4: String

  @JsName("FunctionInput_Texture2D")
  public var Texture2d: String

  @JsName("FunctionInput_TextureCube")
  public var TextureCube: String

  @JsName("FunctionInput_Texture2DArray")
  public var Texture2dArray: String

  @JsName("FunctionInput_VolumeTexture")
  public var VolumeTexture: String

  @JsName("FunctionInput_StaticBool")
  public var StaticBool: String

  @JsName("FunctionInput_MaterialAttributes")
  public var MaterialAttributes: String

  @JsName("FunctionInput_TextureExternal")
  public var TextureExternal: String

  @JsName("FunctionInput_MAX")
  public var Max: String
}

public open external class MaterialExpressionFunctionInput(
  outer: UObject,
) : MaterialExpression {
  @JsName("Preview")
  public open var preview: ExpressionInput

  @JsName("InputName")
  public open var inputName: String

  @JsName("Description")
  public open var description: String

  public open var ID: Guid

  @JsName("InputType")
  public open var inputType: String

  @JsName("PreviewValue")
  public open var previewValue: Vector4

  @JsName("bUsePreviewValueAsDefault")
  public open var usePreviewValueAsDefault: Boolean

  @JsName("SortPriority")
  public open var sortPriority: Number

  @JsName("bCompilingFunctionPreview")
  public open var compilingFunctionPreview: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFunctionInput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFunctionInput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFunctionInput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFunctionInput

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFunctionInput

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFunctionInput
  }
}

public open external class FunctionExpressionInput {
  @JsName("ExpressionInput")
  public open var expressionInput: MaterialExpressionFunctionInput

  @JsName("ExpressionInputId")
  public open var expressionInputId: Guid

  @JsName("Input")
  public open var input: ExpressionInput

  public open fun clone(): FunctionExpressionInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FunctionExpressionInput

    @JsName("C")
    public fun copy(other: Any): FunctionExpressionInput
  }
}

public open external class MaterialExpressionFunctionOutput(
  outer: UObject,
) : MaterialExpression {
  @JsName("OutputName")
  public open var outputName: String

  @JsName("Description")
  public open var description: String

  @JsName("SortPriority")
  public open var sortPriority: Number

  @JsName("A")
  public open var a: ExpressionInput

  @JsName("bLastPreviewed")
  public open var lastPreviewed: Boolean

  public open var ID: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionFunctionOutput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionFunctionOutput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionFunctionOutput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionFunctionOutput

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionFunctionOutput

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionFunctionOutput
  }
}

public open external class ExpressionOutput {
  @JsName("OutputName")
  public open var outputName: String

  public open var mask: Number

  @JsName("MaskR")
  public open var maskR: Number

  @JsName("MaskG")
  public open var maskG: Number

  @JsName("MaskB")
  public open var maskB: Number

  @JsName("MaskA")
  public open var maskA: Number

  public open fun clone(): ExpressionOutput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExpressionOutput

    @JsName("C")
    public fun copy(other: Any): ExpressionOutput
  }
}

public open external class FunctionExpressionOutput {
  @JsName("ExpressionOutput")
  public open var expressionOutput: MaterialExpressionFunctionOutput

  @JsName("ExpressionOutputId")
  public open var expressionOutputId: Guid

  @JsName("Output")
  public open var output: ExpressionOutput

  public open fun clone(): FunctionExpressionOutput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FunctionExpressionOutput

    @JsName("C")
    public fun copy(other: Any): FunctionExpressionOutput
  }
}

public open external class MaterialParameterInfo {
  @JsName("Name")
  public open var name: String

  @JsName("Association")
  public open var association: String

  public open var index: Number

  public open fun clone(): MaterialParameterInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialParameterInfo

    @JsName("C")
    public fun copy(other: Any): MaterialParameterInfo
  }
}

public open external class MaterialExpressionMaterialFunctionCall(
  outer: UObject,
) : MaterialExpression {
  @JsName("MaterialFunction")
  public open var materialFunction: MaterialFunctionInterface

  @JsName("FunctionInputs")
  public open var functionInputs: Array<FunctionExpressionInput>

  @JsName("FunctionOutputs")
  public open var functionOutputs: Array<FunctionExpressionOutput>

  @JsName("FunctionParameterInfo")
  public open var functionParameterInfo: MaterialParameterInfo

  @JsName("SetMaterialFunction")
  public open fun setMaterialFunction(newMaterialFunction: MaterialFunctionInterface): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionMaterialFunctionCall

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionMaterialFunctionCall

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionMaterialFunctionCall

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionMaterialFunctionCall

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionMaterialFunctionCall

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionMaterialFunctionCall
  }
}

@JsName("EBlendMode")
public external object BlendMode {
  @JsName("BLEND_Opaque")
  public var Opaque: String

  @JsName("BLEND_Masked")
  public var Masked: String

  @JsName("BLEND_Translucent")
  public var Translucent: String

  @JsName("BLEND_Additive")
  public var Additive: String

  @JsName("BLEND_Modulate")
  public var Modulate: String

  @JsName("BLEND_AlphaComposite")
  public var AlphaComposite: String

  @JsName("BLEND_AlphaHoldout")
  public var AlphaHoldout: String

  @JsName("BLEND_MAX")
  public var Max: String
}

public open external class MaterialFunction(
  outer: UObject,
) : MaterialFunctionInterface {
  @JsName("ParentFunction")
  public open var parentFunction: MaterialFunction

  @JsName("Description")
  public open var description: String

  @JsName("FunctionExpressions")
  public open var functionExpressions: Array<MaterialExpression>

  @JsName("bExposeToLibrary")
  public open var exposeToLibrary: Boolean

  @JsName("bPrefixParameterNames")
  public open var prefixParameterNames: Boolean

  @JsName("LibraryCategories")
  public open var libraryCategories: Array<String>

  @JsName("LibraryCategoriesText")
  public open var libraryCategoriesText: Array<String>

  @JsName("FunctionEditorComments")
  public open var functionEditorComments: Array<MaterialExpressionComment>

  @JsName("PreviewMaterial")
  public open var previewMaterial: Material

  @JsName("DependentFunctionExpressionCandidates")
  public open var dependentFunctionExpressionCandidates:
      Array<MaterialExpressionMaterialFunctionCall>

  @JsName("PreviewBlendMode")
  public open var previewBlendMode: String

  @JsName("bReentrantFlag")
  public open var reentrantFlag: Boolean

  @JsName("CreateMaterialExpressionInFunction")
  public open fun createMaterialExpressionInFunction(
    expressionClass: UnrealEngineClass,
    nodePosX: Number,
    nodePosY: Number,
  ): MaterialExpression

  @JsName("DeleteAllMaterialExpressionsInFunction")
  public open fun deleteAllMaterialExpressionsInFunction(): Unit

  @JsName("DeleteMaterialExpressionInFunction")
  public open fun deleteMaterialExpressionInFunction(expression: MaterialExpression): Unit

  @JsName("GetNumMaterialExpressionsInFunction")
  public open fun getNumMaterialExpressionsInFunction(): Number

  @JsName("LayoutMaterialFunctionExpressions")
  public open fun layoutMaterialFunctionExpressions(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunction

    @JsName("C")
    public fun copy(other: UObject): MaterialFunction

    @JsName("C")
    public fun copy(other: Any): MaterialFunction

    @JsName("CreateMaterialExpressionInFunction")
    public fun createMaterialExpressionInFunction(
      materialFunction: MaterialFunction,
      expressionClass: UnrealEngineClass,
      nodePosX: Number,
      nodePosY: Number,
    ): MaterialExpression

    @JsName("DeleteAllMaterialExpressionsInFunction")
    public fun deleteAllMaterialExpressionsInFunction(materialFunction: MaterialFunction): Unit

    @JsName("DeleteMaterialExpressionInFunction")
    public fun deleteMaterialExpressionInFunction(materialFunction: MaterialFunction,
        expression: MaterialExpression): Unit

    @JsName("GetNumMaterialExpressionsInFunction")
    public fun getNumMaterialExpressionsInFunction(materialFunction: MaterialFunction): Number

    @JsName("LayoutMaterialFunctionExpressions")
    public fun layoutMaterialFunctionExpressions(materialFunction: MaterialFunction): Unit
  }
}

@JsName("EMaterialProperty")
public external object MaterialProperty {
  @JsName("MP_EmissiveColor")
  public var EmissiveColor: String

  @JsName("MP_Opacity")
  public var Opacity: String

  @JsName("MP_OpacityMask")
  public var OpacityMask: String

  @JsName("MP_DiffuseColor")
  public var DiffuseColor: String

  @JsName("MP_SpecularColor")
  public var SpecularColor: String

  @JsName("MP_BaseColor")
  public var BaseColor: String

  @JsName("MP_Metallic")
  public var Metallic: String

  @JsName("MP_Specular")
  public var Specular: String

  @JsName("MP_Roughness")
  public var Roughness: String

  @JsName("MP_Anisotropy")
  public var Anisotropy: String

  @JsName("MP_Normal")
  public var Normal: String

  @JsName("MP_Tangent")
  public var Tangent: String

  @JsName("MP_WorldPositionOffset")
  public var WorldPositionOffset: String

  @JsName("MP_WorldDisplacement_DEPRECATED")
  public var WorldDisplacementDeprecated: String

  @JsName("MP_TessellationMultiplier_DEPRECATED")
  public var TessellationMultiplierDeprecated: String

  @JsName("MP_SubsurfaceColor")
  public var SubsurfaceColor: String

  @JsName("MP_CustomData0")
  public var CustomData0: String

  @JsName("MP_CustomData1")
  public var CustomData1: String

  @JsName("MP_AmbientOcclusion")
  public var AmbientOcclusion: String

  @JsName("MP_Refraction")
  public var Refraction: String

  @JsName("MP_CustomizedUVs0")
  public var CustomizedUVs0: String

  @JsName("MP_CustomizedUVs1")
  public var CustomizedUVs1: String

  @JsName("MP_CustomizedUVs2")
  public var CustomizedUVs2: String

  @JsName("MP_CustomizedUVs3")
  public var CustomizedUVs3: String

  @JsName("MP_CustomizedUVs4")
  public var CustomizedUVs4: String

  @JsName("MP_CustomizedUVs5")
  public var CustomizedUVs5: String

  @JsName("MP_CustomizedUVs6")
  public var CustomizedUVs6: String

  @JsName("MP_CustomizedUVs7")
  public var CustomizedUVs7: String

  @JsName("MP_PixelDepthOffset")
  public var PixelDepthOffset: String

  @JsName("MP_ShadingModel")
  public var ShadingModel: String

  @JsName("MP_FrontMaterial")
  public var FrontMaterial: String

  @JsName("MP_MaterialAttributes")
  public var MaterialAttributes: String

  @JsName("MP_CustomOutput")
  public var CustomOutput: String

  @JsName("MP_MAX")
  public var Max: String
}

public open external class MaterialExpression(
  outer: UObject,
) : UObject {
  @JsName("MaterialExpressionEditorX")
  public open var materialExpressionEditorX: Number

  @JsName("MaterialExpressionEditorY")
  public open var materialExpressionEditorY: Number

  @JsName("GraphNode")
  public open var graphNode: EdGraphNode

  @JsName("SubgraphExpression")
  public open var subgraphExpression: MaterialExpression

  @JsName("MaterialExpressionGuid")
  public open var materialExpressionGuid: Guid

  @JsName("Material")
  public open var material: Material

  @JsName("UFunction")
  public open var uFunction: MaterialFunction

  @JsName("Desc")
  public open var desc: String

  @JsName("bRealtimePreview")
  public open var realtimePreview: Boolean

  @JsName("bNeedToUpdatePreview")
  public open var needToUpdatePreview: Boolean

  @JsName("bIsParameterExpression")
  public open var isParameterExpression: Boolean

  @JsName("bCommentBubbleVisible")
  public open var commentBubbleVisible: Boolean

  @JsName("bShowOutputNameOnPin")
  public open var showOutputNameOnPin: Boolean

  @JsName("bShowMaskColorsOnPin")
  public open var showMaskColorsOnPin: Boolean

  @JsName("bHidePreviewWindow")
  public open var hidePreviewWindow: Boolean

  @JsName("bCollapsed")
  public open var collapsed: Boolean

  @JsName("bShaderInputData")
  public open var shaderInputData: Boolean

  @JsName("bShowInputs")
  public open var showInputs: Boolean

  @JsName("bShowOutputs")
  public open var showOutputs: Boolean

  @JsName("MenuCategories")
  public open var menuCategories: Array<String>

  @JsName("Outputs")
  public open var outputs: Array<ExpressionOutput>

  @JsName("ConnectMaterialExpressions")
  public open fun connectMaterialExpressions(
    fromOutputName: String,
    toExpression: MaterialExpression,
    toInputName: String,
  ): Boolean

  @JsName("ConnectMaterialProperty")
  public open fun connectMaterialProperty(fromOutputName: String, property: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpression

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpression

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpression

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpression

    @JsName("C")
    public fun copy(other: UObject): MaterialExpression

    @JsName("C")
    public fun copy(other: Any): MaterialExpression

    @JsName("ConnectMaterialExpressions")
    public fun connectMaterialExpressions(
      fromExpression: MaterialExpression,
      fromOutputName: String,
      toExpression: MaterialExpression,
      toInputName: String,
    ): Boolean

    @JsName("ConnectMaterialProperty")
    public fun connectMaterialProperty(
      fromExpression: MaterialExpression,
      fromOutputName: String,
      property: String,
    ): Boolean
  }
}

public open external class MaterialInput {
  @JsName("Expression")
  public open var expression: MaterialExpression

  @JsName("OutputIndex")
  public open var outputIndex: Number

  @JsName("InputName")
  public open var inputName: String

  public open var mask: Number

  @JsName("MaskR")
  public open var maskR: Number

  @JsName("MaskG")
  public open var maskG: Number

  @JsName("MaskB")
  public open var maskB: Number

  @JsName("MaskA")
  public open var maskA: Number

  @JsName("ExpressionName")
  public open var expressionName: String

  public open fun clone(): MaterialInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialInput

    @JsName("C")
    public fun copy(other: Any): MaterialInput
  }
}

public open external class ColorMaterialInput : MaterialInput {
  @JsName("UseConstant")
  public open var useConstant: Boolean

  @JsName("Constant")
  public open var constant: Color

  public override fun clone(): ColorMaterialInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ColorMaterialInput

    @JsName("C")
    public fun copy(other: Any): ColorMaterialInput
  }
}

public open external class ScalarMaterialInput : MaterialInput {
  @JsName("UseConstant")
  public open var useConstant: Boolean

  @JsName("Constant")
  public open var constant: Number

  public override fun clone(): ScalarMaterialInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScalarMaterialInput

    @JsName("C")
    public fun copy(other: Any): ScalarMaterialInput
  }
}

@JsName("T$27")
public external interface Object27 {
  @JsName("X")
  public var x: Number

  @JsName("Y")
  public var y: Number

  @JsName("Z")
  public var z: Number
}

public open external class Vector3f {
  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  @JsName("Z")
  public open var z: Number

  public open fun clone(): Vector3f

  @JsName("Conv_Vector3fToString")
  public open fun convertVector3fToString(): String

  @JsName("BreakVector3f")
  public open fun breakVector3f(
    x: Number,
    y: Number,
    z: Number,
  ): Object27

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Vector3f

    @JsName("C")
    public fun copy(other: Any): Vector3f

    @JsName("Conv_Vector3fToString")
    public fun convertVector3fToString(inVec: Vector3f): String

    @JsName("BreakVector3f")
    public fun breakVector3f(
      inVec: Vector3f,
      x: Number,
      y: Number,
      z: Number,
    ): Object27
  }
}

public open external class VectorMaterialInput : MaterialInput {
  @JsName("UseConstant")
  public open var useConstant: Boolean

  @JsName("Constant")
  public open var constant: Vector3f

  public override fun clone(): VectorMaterialInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorMaterialInput

    @JsName("C")
    public fun copy(other: Any): VectorMaterialInput
  }
}

@JsName("EMaterialDomain")
public external object MaterialDomain {
  @JsName("MD_Surface")
  public var Surface: String

  @JsName("MD_DeferredDecal")
  public var DeferredDecal: String

  @JsName("MD_LightFunction")
  public var LightFunction: String

  @JsName("MD_Volume")
  public var Volume: String

  @JsName("MD_PostProcess")
  public var PostProcess: String

  @JsName("MD_UI")
  public var UI: String

  @JsName("MD_RuntimeVirtualTexture")
  public var RuntimeVirtualTexture: String

  @JsName("MD_MAX")
  public var Max: String
}

@JsName("EDecalBlendMode")
public external object DecalBlendMode {
  @JsName("DBM_Translucent")
  public var Translucent: String

  @JsName("DBM_Stain")
  public var Stain: String

  @JsName("DBM_Normal")
  public var Normal: String

  @JsName("DBM_Emissive")
  public var Emissive: String

  @JsName("DBM_DBuffer_ColorNormalRoughness")
  public var DBufferColorNormalRoughness: String

  @JsName("DBM_DBuffer_Color")
  public var DBufferColor: String

  @JsName("DBM_DBuffer_ColorNormal")
  public var DBufferColorNormal: String

  @JsName("DBM_DBuffer_ColorRoughness")
  public var DBufferColorRoughness: String

  @JsName("DBM_DBuffer_Normal")
  public var DBufferNormal: String

  @JsName("DBM_DBuffer_NormalRoughness")
  public var DBufferNormalRoughness: String

  @JsName("DBM_DBuffer_Roughness")
  public var DBufferRoughness: String

  @JsName("DBM_DBuffer_Emissive")
  public var DBufferEmissive: String

  @JsName("DBM_DBuffer_AlphaComposite")
  public var DBufferAlphaComposite: String

  @JsName("DBM_DBuffer_EmissiveAlphaComposite")
  public var DBufferEmissiveAlphaComposite: String

  @JsName("DBM_Volumetric_DistanceFunction")
  public var VolumetricDistanceFunction: String

  @JsName("DBM_AlphaComposite")
  public var AlphaComposite: String

  @JsName("DBM_AmbientOcclusion")
  public var AmbientOcclusion: String

  @JsName("DBM_MAX")
  public var Max: String
}

@JsName("EMaterialDecalResponse")
public external object MaterialDecalResponse {
  @JsName("MDR_None")
  public var None: String

  @JsName("MDR_ColorNormalRoughness")
  public var ColorNormalRoughness: String

  @JsName("MDR_Color")
  public var Color: String

  @JsName("MDR_ColorNormal")
  public var ColorNormal: String

  @JsName("MDR_ColorRoughness")
  public var ColorRoughness: String

  @JsName("MDR_Normal")
  public var Normal: String

  @JsName("MDR_NormalRoughness")
  public var NormalRoughness: String

  @JsName("MDR_Roughness")
  public var Roughness: String

  @JsName("MDR_MAX")
  public var Max: String
}

@JsName("EMaterialShadingModel")
public external object MaterialShadingModel {
  @JsName("MSM_Unlit")
  public var Unlit: String

  @JsName("MSM_DefaultLit")
  public var DefaultLit: String

  @JsName("MSM_Subsurface")
  public var Subsurface: String

  @JsName("MSM_PreintegratedSkin")
  public var PreintegratedSkin: String

  @JsName("MSM_ClearCoat")
  public var ClearCoat: String

  @JsName("MSM_SubsurfaceProfile")
  public var SubsurfaceProfile: String

  @JsName("MSM_TwoSidedFoliage")
  public var TwoSidedFoliage: String

  @JsName("MSM_Hair")
  public var Hair: String

  @JsName("MSM_Cloth")
  public var Cloth: String

  @JsName("MSM_Eye")
  public var Eye: String

  @JsName("MSM_SingleLayerWater")
  public var SingleLayerWater: String

  @JsName("MSM_ThinTranslucent")
  public var ThinTranslucent: String

  @JsName("MSM_Strata")
  public var Strata: String

  @JsName("MSM_NUM")
  public var NUM: String

  @JsName("MSM_FromMaterialExpression")
  public var FromMaterialExpression: String

  @JsName("MSM_MAX")
  public var Max: String
}

public open external class MaterialShadingModelField {
  @JsName("ShadingModelField")
  public open var shadingModelField: Any

  public open fun clone(): MaterialShadingModelField

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialShadingModelField

    @JsName("C")
    public fun copy(other: Any): MaterialShadingModelField
  }
}

public open external class Vector2MaterialInput : MaterialInput {
  @JsName("UseConstant")
  public open var useConstant: Boolean

  @JsName("ConstantX")
  public open var constantX: Number

  @JsName("ConstantY")
  public open var constantY: Number

  public override fun clone(): Vector2MaterialInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Vector2MaterialInput

    @JsName("C")
    public fun copy(other: Any): Vector2MaterialInput
  }
}

public open external class MaterialAttributesInput : ExpressionInput {
  @JsName("PropertyConnectedBitmask")
  public open var propertyConnectedBitmask: Number

  public override fun clone(): MaterialAttributesInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialAttributesInput

    @JsName("C")
    public fun copy(other: Any): MaterialAttributesInput
  }
}

public open external class ShadingModelMaterialInput : MaterialInput {
  public override fun clone(): ShadingModelMaterialInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ShadingModelMaterialInput

    @JsName("C")
    public fun copy(other: Any): ShadingModelMaterialInput
  }
}

public open external class StrataMaterialInput : MaterialInput {
  public override fun clone(): StrataMaterialInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StrataMaterialInput

    @JsName("C")
    public fun copy(other: Any): StrataMaterialInput
  }
}

@JsName("EMaterialTranslucencyPass")
public external object MaterialTranslucencyPass {
  @JsName("MTP_BeforeDOF")
  public var BeforeDof: String

  @JsName("MTP_AfterDOF")
  public var AfterDof: String

  @JsName("MTP_AfterMotionBlur")
  public var AfterMotionBlur: String

  @JsName("MTP_MAX")
  public var Max: String
}

@JsName("ETranslucencyLightingMode")
public external object TranslucencyLightingMode {
  @JsName("TLM_VolumetricNonDirectional")
  public var VolumetricNonDirectional: String

  @JsName("TLM_VolumetricDirectional")
  public var VolumetricDirectional: String

  @JsName("TLM_VolumetricPerVertexNonDirectional")
  public var VolumetricPerVertexNonDirectional: String

  @JsName("TLM_VolumetricPerVertexDirectional")
  public var VolumetricPerVertexDirectional: String

  @JsName("TLM_Surface")
  public var Surface: String

  @JsName("TLM_SurfacePerPixelLighting")
  public var SurfacePerPixelLighting: String

  @JsName("TLM_MAX")
  public var Max: String
}

@JsName("EMaterialFloatPrecisionMode")
public external object MaterialFloatPrecisionMode {
  @JsName("MFPM_Default")
  public var Default: String

  @JsName("MFPM_Full_MaterialExpressionOnly")
  public var FullMaterialExpressionOnly: String

  @JsName("MFPM_Full")
  public var Full: String

  @JsName("MFPM_Half")
  public var Half: String

  @JsName("MFPM_MAX")
  public var Max: String
}

@JsName("EMaterialShadingRate")
public external object MaterialShadingRate {
  @JsName("MSR_1x1")
  public var Onex1: String

  @JsName("MSR_2x1")
  public var Twox1: String

  @JsName("MSR_1x2")
  public var Onex2: String

  @JsName("MSR_2x2")
  public var Twox2: String

  @JsName("MSR_4x2")
  public var Fourx2: String

  @JsName("MSR_2x4")
  public var Twox4: String

  @JsName("MSR_4x4")
  public var Fourx4: String

  @JsName("MSR_Count")
  public var Count: String

  @JsName("MSR_MAX")
  public var Max: String
}

public open external class ExpressionExecOutput {
  @JsName("Expression")
  public open var expression: MaterialExpression

  public open fun clone(): ExpressionExecOutput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExpressionExecOutput

    @JsName("C")
    public fun copy(other: Any): ExpressionExecOutput
  }
}

public open external class MaterialExpressionExecBegin(
  outer: UObject,
) : MaterialExpression {
  public open var exec: ExpressionExecOutput

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionExecBegin

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionExecBegin

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionExecBegin

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionExecBegin

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionExecBegin

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionExecBegin
  }
}

public open external class MaterialExpressionExecEnd(
  outer: UObject,
) : MaterialExpression {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialExpressionExecEnd

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialExpressionExecEnd

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialExpressionExecEnd

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialExpressionExecEnd

    @JsName("C")
    public fun copy(other: UObject): MaterialExpressionExecEnd

    @JsName("C")
    public fun copy(other: Any): MaterialExpressionExecEnd
  }
}

public open external class ParameterGroupData {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupSortPriority")
  public open var groupSortPriority: Number

  public open fun clone(): ParameterGroupData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParameterGroupData

    @JsName("C")
    public fun copy(other: Any): ParameterGroupData
  }
}

@JsName("EBlendableLocation")
public external object BlendableLocation {
  @JsName("BL_AfterTonemapping")
  public var AfterTonemapping: String

  @JsName("BL_BeforeTonemapping")
  public var BeforeTonemapping: String

  @JsName("BL_BeforeTranslucency")
  public var BeforeTranslucency: String

  @JsName("BL_ReplacingTonemapper")
  public var ReplacingTonemapper: String

  @JsName("BL_SSRInput")
  public var SsrInput: String

  @JsName("BL_MAX")
  public var Max: String
}

@JsName("EMaterialStencilCompare")
public external object MaterialStencilCompare {
  @JsName("MSC_Less")
  public var Less: String

  @JsName("MSC_LessEqual")
  public var LessEqual: String

  @JsName("MSC_Greater")
  public var Greater: String

  @JsName("MSC_GreaterEqual")
  public var GreaterEqual: String

  @JsName("MSC_Equal")
  public var Equal: String

  @JsName("MSC_NotEqual")
  public var NotEqual: String

  @JsName("MSC_Never")
  public var Never: String

  @JsName("MSC_Always")
  public var Always: String

  @JsName("MSC_Count")
  public var Count: String

  @JsName("MSC_MAX")
  public var Max: String
}

@JsName("ERefractionMode")
public external object RefractionMode {
  @JsName("RM_IndexOfRefraction")
  public var IndexOfRefraction: String

  @JsName("RM_PixelNormalOffset")
  public var PixelNormalOffset: String

  @JsName("RM_MAX")
  public var Max: String
}

@JsName("EMaterialUsage")
public external object MaterialUsage {
  @JsName("MATUSAGE_SkeletalMesh")
  public var SkeletalMesh: String

  @JsName("MATUSAGE_ParticleSprites")
  public var ParticleSprites: String

  @JsName("MATUSAGE_BeamTrails")
  public var BeamTrails: String

  @JsName("MATUSAGE_MeshParticles")
  public var MeshParticles: String

  @JsName("MATUSAGE_StaticLighting")
  public var StaticLighting: String

  @JsName("MATUSAGE_MorphTargets")
  public var MorphTargets: String

  @JsName("MATUSAGE_SplineMesh")
  public var SplineMesh: String

  @JsName("MATUSAGE_InstancedStaticMeshes")
  public var InstancedStaticMeshes: String

  @JsName("MATUSAGE_GeometryCollections")
  public var GeometryCollections: String

  @JsName("MATUSAGE_Clothing")
  public var Clothing: String

  @JsName("MATUSAGE_NiagaraSprites")
  public var NiagaraSprites: String

  @JsName("MATUSAGE_NiagaraRibbons")
  public var NiagaraRibbons: String

  @JsName("MATUSAGE_NiagaraMeshParticles")
  public var NiagaraMeshParticles: String

  @JsName("MATUSAGE_GeometryCache")
  public var GeometryCache: String

  @JsName("MATUSAGE_Water")
  public var Water: String

  @JsName("MATUSAGE_HairStrands")
  public var HairStrands: String

  @JsName("MATUSAGE_LidarPointCloud")
  public var LidarPointCloud: String

  @JsName("MATUSAGE_VirtualHeightfieldMesh")
  public var VirtualHeightfieldMesh: String

  @JsName("MATUSAGE_Nanite")
  public var Nanite: String

  @JsName("MATUSAGE_MAX")
  public var Max: String
}

@JsName("T$28")
public external interface Object28 {
  @JsName("bNeedsRecompile")
  public var needsRecompile: Boolean

  @JsName("$")
  public var value: Boolean
}

public open external class Material(
  outer: UObject,
) : MaterialInterface {
  @JsName("PhysMaterial")
  public open var physMaterial: PhysicalMaterial

  @JsName("PhysMaterialMask")
  public open var physMaterialMask: PhysicalMaterialMask

  @JsName("PhysicalMaterialMap")
  public open var physicalMaterialMap: PhysicalMaterial

  @JsName("DiffuseColor")
  public open var diffuseColor: ColorMaterialInput

  @JsName("SpecularColor")
  public open var specularColor: ColorMaterialInput

  @JsName("BaseColor")
  public open var baseColor: ColorMaterialInput

  @JsName("Metallic")
  public open var metallic: ScalarMaterialInput

  @JsName("Specular")
  public open var specular: ScalarMaterialInput

  @JsName("Roughness")
  public open var roughness: ScalarMaterialInput

  @JsName("Anisotropy")
  public open var anisotropy: ScalarMaterialInput

  @JsName("Normal")
  public open var normal: VectorMaterialInput

  @JsName("Tangent")
  public open var tangent: VectorMaterialInput

  @JsName("EmissiveColor")
  public open var emissiveColor: ColorMaterialInput

  @JsName("Opacity")
  public open var opacity: ScalarMaterialInput

  @JsName("OpacityMask")
  public open var opacityMask: ScalarMaterialInput

  @JsName("MaterialDomain")
  public open var materialDomain: String

  @JsName("BlendMode")
  public open var blendMode: String

  @JsName("DecalBlendMode")
  public open var decalBlendMode: String

  @JsName("MaterialDecalResponse")
  public open var materialDecalResponse: String

  @JsName("ShadingModel")
  public open var shadingModel: String

  @JsName("bCastDynamicShadowAsMasked")
  public open var castDynamicShadowAsMasked: Boolean

  @JsName("ShadingModels")
  public open var shadingModels: MaterialShadingModelField

  @JsName("UsedShadingModels")
  public open var usedShadingModels: String

  @JsName("OpacityMaskClipValue")
  public open var opacityMaskClipValue: Number

  @JsName("WorldPositionOffset")
  public open var worldPositionOffset: VectorMaterialInput

  @JsName("SubsurfaceColor")
  public open var subsurfaceColor: ColorMaterialInput

  @JsName("ClearCoat")
  public open var clearCoat: ScalarMaterialInput

  @JsName("ClearCoatRoughness")
  public open var clearCoatRoughness: ScalarMaterialInput

  @JsName("AmbientOcclusion")
  public open var ambientOcclusion: ScalarMaterialInput

  @JsName("Refraction")
  public open var refraction: ScalarMaterialInput

  @JsName("CustomizedUVs")
  public open var customizedUVs: Vector2MaterialInput

  @JsName("MaterialAttributes")
  public open var materialAttributes: MaterialAttributesInput

  @JsName("PixelDepthOffset")
  public open var pixelDepthOffset: ScalarMaterialInput

  @JsName("ShadingModelFromMaterialExpression")
  public open var shadingModelFromMaterialExpression: ShadingModelMaterialInput

  @JsName("FrontMaterial")
  public open var frontMaterial: StrataMaterialInput

  @JsName("bEnableSeparateTranslucency")
  public open var enableSeparateTranslucency: Boolean

  @JsName("bEnableResponsiveAA")
  public open var enableResponsiveAa: Boolean

  @JsName("bScreenSpaceReflections")
  public open var screenSpaceReflections: Boolean

  @JsName("bContactShadows")
  public open var contactShadows: Boolean

  @JsName("TwoSided")
  public open var twoSided: Boolean

  @JsName("DitheredLODTransition")
  public open var ditheredLodTransition: Boolean

  @JsName("DitherOpacityMask")
  public open var ditherOpacityMask: Boolean

  @JsName("bAllowNegativeEmissiveColor")
  public open var allowNegativeEmissiveColor: Boolean

  @JsName("TranslucencyPass")
  public open var translucencyPass: String

  @JsName("TranslucencyLightingMode")
  public open var translucencyLightingMode: String

  @JsName("bEnableMobileSeparateTranslucency")
  public open var enableMobileSeparateTranslucency: Boolean

  @JsName("NumCustomizedUVs")
  public open var numCustomizedUVs: Number

  @JsName("TranslucencyDirectionalLightingIntensity")
  public open var translucencyDirectionalLightingIntensity: Number

  @JsName("TranslucentShadowDensityScale")
  public open var translucentShadowDensityScale: Number

  @JsName("TranslucentSelfShadowDensityScale")
  public open var translucentSelfShadowDensityScale: Number

  @JsName("TranslucentSelfShadowSecondDensityScale")
  public open var translucentSelfShadowSecondDensityScale: Number

  @JsName("TranslucentSelfShadowSecondOpacity")
  public open var translucentSelfShadowSecondOpacity: Number

  @JsName("TranslucentBackscatteringExponent")
  public open var translucentBackscatteringExponent: Number

  @JsName("TranslucentMultipleScatteringExtinction")
  public open var translucentMultipleScatteringExtinction: LinearColor

  @JsName("TranslucentShadowStartOffset")
  public open var translucentShadowStartOffset: Number

  @JsName("bDisableDepthTest")
  public open var disableDepthTest: Boolean

  @JsName("bWriteOnlyAlpha")
  public open var writeOnlyAlpha: Boolean

  @JsName("bGenerateSphericalParticleNormals")
  public open var generateSphericalParticleNormals: Boolean

  @JsName("bTangentSpaceNormal")
  public open var tangentSpaceNormal: Boolean

  @JsName("bUseEmissiveForDynamicAreaLighting")
  public open var useEmissiveForDynamicAreaLighting: Boolean

  @JsName("bUsedAsSpecialEngineMaterial")
  public open var usedAsSpecialEngineMaterial: Boolean

  @JsName("bUsedWithSkeletalMesh")
  public open var usedWithSkeletalMesh: Boolean

  @JsName("bUsedWithEditorCompositing")
  public open var usedWithEditorCompositing: Boolean

  @JsName("bUsedWithParticleSprites")
  public open var usedWithParticleSprites: Boolean

  @JsName("bUsedWithBeamTrails")
  public open var usedWithBeamTrails: Boolean

  @JsName("bUsedWithMeshParticles")
  public open var usedWithMeshParticles: Boolean

  @JsName("bUsedWithNiagaraSprites")
  public open var usedWithNiagaraSprites: Boolean

  @JsName("bUsedWithNiagaraRibbons")
  public open var usedWithNiagaraRibbons: Boolean

  @JsName("bUsedWithNiagaraMeshParticles")
  public open var usedWithNiagaraMeshParticles: Boolean

  @JsName("bUsedWithGeometryCache")
  public open var usedWithGeometryCache: Boolean

  @JsName("bUsedWithStaticLighting")
  public open var usedWithStaticLighting: Boolean

  @JsName("bUsedWithMorphTargets")
  public open var usedWithMorphTargets: Boolean

  @JsName("bUsedWithSplineMeshes")
  public open var usedWithSplineMeshes: Boolean

  @JsName("bUsedWithInstancedStaticMeshes")
  public open var usedWithInstancedStaticMeshes: Boolean

  @JsName("bUsedWithGeometryCollections")
  public open var usedWithGeometryCollections: Boolean

  @JsName("bUsesDistortion")
  public open var usesDistortion: Boolean

  @JsName("bUsedWithClothing")
  public open var usedWithClothing: Boolean

  @JsName("bUsedWithWater")
  public open var usedWithWater: Boolean

  @JsName("bUsedWithHairStrands")
  public open var usedWithHairStrands: Boolean

  @JsName("bUsedWithLidarPointCloud")
  public open var usedWithLidarPointCloud: Boolean

  @JsName("bUsedWithVirtualHeightfieldMesh")
  public open var usedWithVirtualHeightfieldMesh: Boolean

  @JsName("bUsedWithNanite")
  public open var usedWithNanite: Boolean

  @JsName("bUsedWithUI")
  public open var usedWithUi: Boolean

  @JsName("bAutomaticallySetUsageInEditor")
  public open var automaticallySetUsageInEditor: Boolean

  @JsName("bFullyRough")
  public open var fullyRough: Boolean

  @JsName("bUseFullPrecision")
  public open var useFullPrecision: Boolean

  @JsName("FloatPrecisionMode")
  public open var floatPrecisionMode: String

  @JsName("bUseLightmapDirectionality")
  public open var useLightmapDirectionality: Boolean

  @JsName("bMobileEnableHighQualityBRDF")
  public open var mobileEnableHighQualityBrdf: Boolean

  @JsName("bUseAlphaToCoverage")
  public open var useAlphaToCoverage: Boolean

  @JsName("bForwardRenderUsePreintegratedGFForSimpleIBL")
  public open var forwardRenderUsePreintegratedGfForSimpleIbl: Boolean

  @JsName("bUseHQForwardReflections")
  public open var useHqForwardReflections: Boolean

  @JsName("bForwardBlendsSkyLightCubemaps")
  public open var forwardBlendsSkyLightCubemaps: Boolean

  @JsName("bUsePlanarForwardReflections")
  public open var usePlanarForwardReflections: Boolean

  @JsName("bNormalCurvatureToRoughness")
  public open var normalCurvatureToRoughness: Boolean

  @JsName("AllowTranslucentCustomDepthWrites")
  public open var allowTranslucentCustomDepthWrites: Boolean

  @JsName("Wireframe")
  public open var wireframe: Boolean

  @JsName("ShadingRate")
  public open var shadingRate: String

  @JsName("EditorX")
  public open var editorX: Number

  @JsName("EditorY")
  public open var editorY: Number

  @JsName("EditorPitch")
  public open var editorPitch: Number

  @JsName("EditorYaw")
  public open var editorYaw: Number

  @JsName("Expressions")
  public open var expressions: Array<MaterialExpression>

  @JsName("EditorComments")
  public open var editorComments: Array<MaterialExpressionComment>

  @JsName("ExpressionExecBegin")
  public open var expressionExecBegin: MaterialExpressionExecBegin

  @JsName("ExpressionExecEnd")
  public open var expressionExecEnd: MaterialExpressionExecEnd

  @JsName("ParameterGroupData")
  public open var parameterGroupData: Array<ParameterGroupData>

  @JsName("bCanMaskedBeAssumedOpaque")
  public open var canMaskedBeAssumedOpaque: Boolean

  @JsName("bIsMasked")
  public open var isMasked: Boolean

  @JsName("bIsPreviewMaterial")
  public open var isPreviewMaterial: Boolean

  @JsName("bIsFunctionPreviewMaterial")
  public open var isFunctionPreviewMaterial: Boolean

  @JsName("bUseMaterialAttributes")
  public open var useMaterialAttributes: Boolean

  @JsName("bEnableExecWire")
  public open var enableExecWire: Boolean

  @JsName("bEnableNewHLSLGenerator")
  public open var enableNewHlslGenerator: Boolean

  @JsName("bCastRayTracedShadows")
  public open var castRayTracedShadows: Boolean

  @JsName("bUseTranslucencyVertexFog")
  public open var useTranslucencyVertexFog: Boolean

  @JsName("bApplyCloudFogging")
  public open var applyCloudFogging: Boolean

  @JsName("bIsSky")
  public open var isSky: Boolean

  @JsName("bComputeFogPerPixel")
  public open var computeFogPerPixel: Boolean

  @JsName("bOutputTranslucentVelocity")
  public open var outputTranslucentVelocity: Boolean

  @JsName("bAllowDevelopmentShaderCompile")
  public open var allowDevelopmentShaderCompile: Boolean

  @JsName("bIsMaterialEditorStatsMaterial")
  public open var isMaterialEditorStatsMaterial: Boolean

  @JsName("BlendableLocation")
  public open var blendableLocation: String

  @JsName("BlendableOutputAlpha")
  public open var blendableOutputAlpha: Boolean

  @JsName("bEnableStencilTest")
  public open var enableStencilTest: Boolean

  @JsName("StencilCompare")
  public open var stencilCompare: String

  @JsName("StencilRefValue")
  public open var stencilRefValue: Number

  @JsName("RefractionMode")
  public open var refractionMode: String

  @JsName("BlendablePriority")
  public open var blendablePriority: Number

  @JsName("bIsBlendable")
  public open var isBlendable: Boolean

  @JsName("UsageFlagWarnings")
  public open var usageFlagWarnings: Any

  @JsName("RefractionDepthBias")
  public open var refractionDepthBias: Number

  @JsName("StateId")
  public open var stateId: Guid

  @JsName("bSavedCachedExpressionData")
  public open var savedCachedExpressionData: Boolean

  @JsName("ReferencedTextureGuids")
  public open var referencedTextureGuids: Array<Guid>

  @JsName("CreateMaterialExpression")
  public open fun createMaterialExpression(
    expressionClass: UnrealEngineClass,
    nodePosX: Number,
    nodePosY: Number,
  ): MaterialExpression

  @JsName("DeleteAllMaterialExpressions")
  public open fun deleteAllMaterialExpressions(): Unit

  @JsName("DeleteMaterialExpression")
  public open fun deleteMaterialExpression(expression: MaterialExpression): Unit

  @JsName("DuplicateMaterialExpression")
  public open fun duplicateMaterialExpression(materialFunction: MaterialFunction,
      expression: MaterialExpression): MaterialExpression

  @JsName("GetInputsForMaterialExpression")
  public open fun getInputsForMaterialExpression(materialExpression: MaterialExpression):
      Array<MaterialExpression>

  @JsName("GetMaterialDefaultScalarParameterValue")
  public open fun getMaterialDefaultScalarParameterValue(parameterName: String): Number

  @JsName("GetMaterialDefaultStaticSwitchParameterValue")
  public open fun getMaterialDefaultStaticSwitchParameterValue(parameterName: String): Boolean

  @JsName("GetMaterialDefaultTextureParameterValue")
  public open fun getMaterialDefaultTextureParameterValue(parameterName: String): Texture

  @JsName("GetMaterialDefaultVectorParameterValue")
  public open fun getMaterialDefaultVectorParameterValue(parameterName: String): LinearColor

  @JsName("GetMaterialPropertyInputNode")
  public open fun getMaterialPropertyInputNode(property: String): MaterialExpression

  @JsName("GetMaterialSelectedNodes")
  public open fun getMaterialSelectedNodes(): Any

  @JsName("GetNumMaterialExpressions")
  public open fun getNumMaterialExpressions(): Number

  @JsName("GetUsedTextures")
  public open fun getUsedTextures(): Array<Texture>

  @JsName("HasMaterialUsage")
  public open fun hasMaterialUsage(usage: String): Boolean

  @JsName("LayoutMaterialExpressions")
  public open fun layoutMaterialExpressions(): Unit

  @JsName("RecompileMaterial")
  public open fun recompileMaterial(): Unit

  @JsName("SetMaterialUsage")
  public open fun setMaterialUsage(usage: String, needsRecompile: Boolean): Object28

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Material

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Material

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Material

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Material

    @JsName("C")
    public fun copy(other: UObject): Material

    @JsName("C")
    public fun copy(other: Any): Material

    @JsName("CreateMaterialExpression")
    public fun createMaterialExpression(
      material: Material,
      expressionClass: UnrealEngineClass,
      nodePosX: Number,
      nodePosY: Number,
    ): MaterialExpression

    @JsName("DeleteAllMaterialExpressions")
    public fun deleteAllMaterialExpressions(material: Material): Unit

    @JsName("DeleteMaterialExpression")
    public fun deleteMaterialExpression(material: Material, expression: MaterialExpression): Unit

    @JsName("DuplicateMaterialExpression")
    public fun duplicateMaterialExpression(
      material: Material,
      materialFunction: MaterialFunction,
      expression: MaterialExpression,
    ): MaterialExpression

    @JsName("GetInputsForMaterialExpression")
    public fun getInputsForMaterialExpression(material: Material,
        materialExpression: MaterialExpression): Array<MaterialExpression>

    @JsName("GetMaterialDefaultScalarParameterValue")
    public fun getMaterialDefaultScalarParameterValue(material: Material, parameterName: String):
        Number

    @JsName("GetMaterialDefaultStaticSwitchParameterValue")
    public fun getMaterialDefaultStaticSwitchParameterValue(material: Material,
        parameterName: String): Boolean

    @JsName("GetMaterialDefaultTextureParameterValue")
    public fun getMaterialDefaultTextureParameterValue(material: Material, parameterName: String):
        Texture

    @JsName("GetMaterialDefaultVectorParameterValue")
    public fun getMaterialDefaultVectorParameterValue(material: Material, parameterName: String):
        LinearColor

    @JsName("GetMaterialPropertyInputNode")
    public fun getMaterialPropertyInputNode(material: Material, property: String):
        MaterialExpression

    @JsName("GetMaterialSelectedNodes")
    public fun getMaterialSelectedNodes(material: Material): Any

    @JsName("GetNumMaterialExpressions")
    public fun getNumMaterialExpressions(material: Material): Number

    @JsName("GetUsedTextures")
    public fun getUsedTextures(material: Material): Array<Texture>

    @JsName("HasMaterialUsage")
    public fun hasMaterialUsage(material: Material, usage: String): Boolean

    @JsName("LayoutMaterialExpressions")
    public fun layoutMaterialExpressions(material: Material): Unit

    @JsName("RecompileMaterial")
    public fun recompileMaterial(material: Material): Unit

    @JsName("SetMaterialUsage")
    public fun setMaterialUsage(
      material: Material,
      usage: String,
      needsRecompile: Boolean,
    ): Object28
  }
}

public open external class MaterialFunctionInterface(
  outer: UObject,
) : UObject {
  @JsName("StateId")
  public open var stateId: Guid

  @JsName("MaterialFunctionUsage")
  public open var materialFunctionUsage: String

  @JsName("CombinedInputTypes")
  public open var combinedInputTypes: Any

  @JsName("CombinedOutputTypes")
  public open var combinedOutputTypes: Any

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("UpdateMaterialFunction")
  public open fun updateMaterialFunction(previewMaterial: Material): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialFunctionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialFunctionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialFunctionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialFunctionInterface

    @JsName("C")
    public fun copy(other: UObject): MaterialFunctionInterface

    @JsName("C")
    public fun copy(other: Any): MaterialFunctionInterface

    @JsName("UpdateMaterialFunction")
    public fun updateMaterialFunction(materialFunction: MaterialFunctionInterface,
        previewMaterial: Material): Unit
  }
}

@JsName("EAttachLocation")
public external object AttachLocation {
  public var KeepRelativeOffset: String

  public var KeepWorldPosition: String

  public var SnapToTarget: String

  public var SnapToTargetIncludingScale: String

  @JsName("EAttachLocation_MAX")
  public var Max: String
}

@JsName("T$29")
public external interface Object29 {
  @JsName("MinValue")
  public var minValue: Number

  @JsName("MaxValue")
  public var maxValue: Number
}

@JsName("T$30")
public external interface Object30 {
  @JsName("MinTime")
  public var minTime: Number

  @JsName("MaxTime")
  public var maxTime: Number
}

public open external class CurveBase(
  outer: UObject,
) : UObject {
  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("ImportPath")
  public open var importPath: String

  @JsName("GetValueRange")
  public open fun getValueRange(minValue: Number, maxValue: Number): Object29

  @JsName("GetTimeRange")
  public open fun getTimeRange(minTime: Number, maxTime: Number): Object30

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveBase

    @JsName("C")
    public fun copy(other: UObject): CurveBase

    @JsName("C")
    public fun copy(other: Any): CurveBase
  }
}

public open external class KeyHandleMap {
  public open fun clone(): KeyHandleMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KeyHandleMap

    @JsName("C")
    public fun copy(other: Any): KeyHandleMap
  }
}

public open external class IndexedCurve {
  @JsName("KeyHandlesToIndices")
  public open var keyHandlesToIndices: KeyHandleMap

  public open fun clone(): IndexedCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IndexedCurve

    @JsName("C")
    public fun copy(other: Any): IndexedCurve
  }
}

@JsName("ERichCurveExtrapolation")
public external object RichCurveExtrapolation {
  @JsName("RCCE_Cycle")
  public var Cycle: String

  @JsName("RCCE_CycleWithOffset")
  public var CycleWithOffset: String

  @JsName("RCCE_Oscillate")
  public var Oscillate: String

  @JsName("RCCE_Linear")
  public var Linear: String

  @JsName("RCCE_Constant")
  public var Constant: String

  @JsName("RCCE_None")
  public var None: String

  @JsName("RCCE_MAX")
  public var Max: String
}

public open external class RealCurve : IndexedCurve {
  @JsName("DefaultValue")
  public open var defaultValue: Number

  @JsName("PreInfinityExtrap")
  public open var preInfinityExtrap: String

  @JsName("PostInfinityExtrap")
  public open var postInfinityExtrap: String

  public override fun clone(): RealCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RealCurve

    @JsName("C")
    public fun copy(other: Any): RealCurve
  }
}

@JsName("ERichCurveInterpMode")
public external object RichCurveInterpMode {
  @JsName("RCIM_Linear")
  public var Linear: String

  @JsName("RCIM_Constant")
  public var Constant: String

  @JsName("RCIM_Cubic")
  public var Cubic: String

  @JsName("RCIM_None")
  public var None: String

  @JsName("RCIM_MAX")
  public var Max: String
}

@JsName("ERichCurveTangentMode")
public external object RichCurveTangentMode {
  @JsName("RCTM_Auto")
  public var Auto: String

  @JsName("RCTM_User")
  public var User: String

  @JsName("RCTM_Break")
  public var Break: String

  @JsName("RCTM_None")
  public var None: String

  @JsName("RCTM_MAX")
  public var Max: String
}

@JsName("ERichCurveTangentWeightMode")
public external object RichCurveTangentWeightMode {
  @JsName("RCTWM_WeightedNone")
  public var WeightedNone: String

  @JsName("RCTWM_WeightedArrive")
  public var WeightedArrive: String

  @JsName("RCTWM_WeightedLeave")
  public var WeightedLeave: String

  @JsName("RCTWM_WeightedBoth")
  public var WeightedBoth: String

  @JsName("RCTWM_MAX")
  public var Max: String
}

public open external class RichCurveKey {
  @JsName("InterpMode")
  public open var interpMode: String

  @JsName("TangentMode")
  public open var tangentMode: String

  @JsName("TangentWeightMode")
  public open var tangentWeightMode: String

  @JsName("Time")
  public open var time: Number

  @JsName("Value")
  public open var value: Number

  @JsName("ArriveTangent")
  public open var arriveTangent: Number

  @JsName("ArriveTangentWeight")
  public open var arriveTangentWeight: Number

  @JsName("LeaveTangent")
  public open var leaveTangent: Number

  @JsName("LeaveTangentWeight")
  public open var leaveTangentWeight: Number

  public open fun clone(): RichCurveKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RichCurveKey

    @JsName("C")
    public fun copy(other: Any): RichCurveKey
  }
}

public open external class RichCurve : RealCurve {
  @JsName("Keys")
  public open var keys: Array<RichCurveKey>

  public override fun clone(): RichCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RichCurve

    @JsName("C")
    public fun copy(other: Any): RichCurve
  }
}

public open external class CurveLinearColor(
  outer: UObject,
) : CurveBase {
  @JsName("FloatCurves")
  public open var floatCurves: RichCurve

  @JsName("AdjustHue")
  public open var adjustHue: Number

  @JsName("AdjustSaturation")
  public open var adjustSaturation: Number

  @JsName("AdjustBrightness")
  public open var adjustBrightness: Number

  @JsName("AdjustBrightnessCurve")
  public open var adjustBrightnessCurve: Number

  @JsName("AdjustVibrance")
  public open var adjustVibrance: Number

  @JsName("AdjustMinAlpha")
  public open var adjustMinAlpha: Number

  @JsName("AdjustMaxAlpha")
  public open var adjustMaxAlpha: Number

  @JsName("GetUnadjustedLinearColorValue")
  public open fun getUnadjustedLinearColorValue(inTime: Number): LinearColor

  @JsName("GetLinearColorValue")
  public open fun getLinearColorValue(inTime: Number): LinearColor

  @JsName("GetClampedLinearColorValue")
  public open fun getClampedLinearColorValue(inTime: Number): LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveLinearColor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveLinearColor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveLinearColor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveLinearColor

    @JsName("C")
    public fun copy(other: UObject): CurveLinearColor

    @JsName("C")
    public fun copy(other: Any): CurveLinearColor
  }
}

public open external class CurveAtlasColorAdjustments {
  @JsName("bChromaKeyTexture")
  public open var chromaKeyTexture: Boolean

  @JsName("AdjustBrightness")
  public open var adjustBrightness: Number

  @JsName("AdjustBrightnessCurve")
  public open var adjustBrightnessCurve: Number

  @JsName("AdjustVibrance")
  public open var adjustVibrance: Number

  @JsName("AdjustSaturation")
  public open var adjustSaturation: Number

  @JsName("AdjustRGBCurve")
  public open var adjustRgbCurve: Number

  @JsName("AdjustHue")
  public open var adjustHue: Number

  @JsName("AdjustMinAlpha")
  public open var adjustMinAlpha: Number

  @JsName("AdjustMaxAlpha")
  public open var adjustMaxAlpha: Number

  public open fun clone(): CurveAtlasColorAdjustments

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CurveAtlasColorAdjustments

    @JsName("C")
    public fun copy(other: Any): CurveAtlasColorAdjustments
  }
}

@JsName("T$31")
public external interface Object31 {
  public var position: Number

  @JsName("$")
  public var value: Boolean
}

public open external class CurveLinearColorAtlas(
  outer: UObject,
) : Texture2d {
  @JsName("bIsDirty")
  public open var isDirty: Boolean

  @JsName("TextureSize")
  public open var textureSize: Any

  @JsName("bSquareResolution")
  public open var squareResolution: Boolean

  @JsName("TextureHeight")
  public open var textureHeight: Any

  @JsName("GradientCurves")
  public open var gradientCurves: Array<CurveLinearColor>

  @JsName("bDisableAllAdjustments")
  public open var disableAllAdjustments: Boolean

  @JsName("bHasCachedColorAdjustments")
  public open var hasCachedColorAdjustments: Boolean

  @JsName("CachedColorAdjustments")
  public open var cachedColorAdjustments: CurveAtlasColorAdjustments

  @JsName("GetCurvePosition")
  public open fun getCurvePosition(inCurve: CurveLinearColor, position: Number): Object31

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveLinearColorAtlas

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveLinearColorAtlas

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveLinearColorAtlas

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveLinearColorAtlas

    @JsName("C")
    public fun copy(other: UObject): CurveLinearColorAtlas

    @JsName("C")
    public fun copy(other: Any): CurveLinearColorAtlas
  }
}

public open external class ScalarParameterAtlasInstanceData {
  @JsName("bIsUsedAsAtlasPosition")
  public open var isUsedAsAtlasPosition: Boolean

  @JsName("Curve")
  public open var curve: CurveLinearColor

  @JsName("Atlas")
  public open var atlas: CurveLinearColorAtlas

  public open fun clone(): ScalarParameterAtlasInstanceData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScalarParameterAtlasInstanceData

    @JsName("C")
    public fun copy(other: Any): ScalarParameterAtlasInstanceData
  }
}

public open external class ScalarParameterValue {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("AtlasData")
  public open var atlasData: ScalarParameterAtlasInstanceData

  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("ParameterValue")
  public open var parameterValue: Number

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  public open fun clone(): ScalarParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScalarParameterValue

    @JsName("C")
    public fun copy(other: Any): ScalarParameterValue
  }
}

public open external class VectorParameterValue {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("ParameterValue")
  public open var parameterValue: LinearColor

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  public open fun clone(): VectorParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorParameterValue

    @JsName("C")
    public fun copy(other: Any): VectorParameterValue
  }
}

public open external class Vector4d {
  @JsName("X")
  public open var x: Any

  @JsName("Y")
  public open var y: Any

  @JsName("Z")
  public open var z: Any

  @JsName("W")
  public open var w: Any

  public open fun clone(): Vector4d

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Vector4d

    @JsName("C")
    public fun copy(other: Any): Vector4d
  }
}

public open external class DoubleVectorParameterValue {
  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("ParameterValue")
  public open var parameterValue: Vector4d

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  public open fun clone(): DoubleVectorParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DoubleVectorParameterValue

    @JsName("C")
    public fun copy(other: Any): DoubleVectorParameterValue
  }
}

public open external class TextureParameterValue {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("ParameterValue")
  public open var parameterValue: Texture

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  public open fun clone(): TextureParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TextureParameterValue

    @JsName("C")
    public fun copy(other: Any): TextureParameterValue
  }
}

@JsName("ERuntimeVirtualTextureMaterialType")
public external object RuntimeVirtualTextureMaterialType {
  public var BaseColor: String

  @JsName("BaseColor_Normal_DEPRECATED")
  public var BaseColorNormalDeprecated: String

  @JsName("BaseColor_Normal_Roughness")
  public var BaseColorNormalRoughness: String

  @JsName("BaseColor_Normal_Specular")
  public var BaseColorNormalSpecular: String

  @JsName("BaseColor_Normal_Specular_YCoCg")
  public var BaseColorNormalSpecularYCoCg: String

  @JsName("BaseColor_Normal_Specular_Mask_YCoCg")
  public var BaseColorNormalSpecularMaskYCoCg: String

  public var WorldHeight: String

  public var Count: String

  @JsName("ERuntimeVirtualTextureMaterialType_MAX")
  public var Max: String
}

public open external class RuntimeVirtualTextureStreamingProxy(
  outer: UObject,
) : Texture2d {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RuntimeVirtualTextureStreamingProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RuntimeVirtualTextureStreamingProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RuntimeVirtualTextureStreamingProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RuntimeVirtualTextureStreamingProxy

    @JsName("C")
    public fun copy(other: UObject): RuntimeVirtualTextureStreamingProxy

    @JsName("C")
    public fun copy(other: Any): RuntimeVirtualTextureStreamingProxy
  }
}

public open external class RuntimeVirtualTexture(
  outer: UObject,
) : UObject {
  @JsName("TileCount")
  public open var tileCount: Number

  @JsName("TileSize")
  public open var tileSize: Number

  @JsName("TileBorderSize")
  public open var tileBorderSize: Number

  @JsName("MaterialType")
  public open var materialType: String

  @JsName("bCompressTextures")
  public open var compressTextures: Boolean

  @JsName("bUseLowQualityCompression")
  public open var useLowQualityCompression: Boolean

  @JsName("bClearTextures")
  public open var clearTextures: Boolean

  @JsName("bSinglePhysicalSpace")
  public open var singlePhysicalSpace: Boolean

  @JsName("bPrivateSpace")
  public open var privateSpace: Boolean

  @JsName("bAdaptive")
  public open var adaptive: Boolean

  @JsName("bContinuousUpdate")
  public open var continuousUpdate: Boolean

  @JsName("RemoveLowMips")
  public open var removeLowMips: Number

  @JsName("LODGroup")
  public open var lodGroup: String

  @JsName("Size")
  public open var size: Number

  @JsName("StreamingTexture")
  public open var streamingTexture: RuntimeVirtualTextureStreamingProxy

  @JsName("GetTileSize")
  public open fun getTileSize(): Number

  @JsName("GetTileCount")
  public open fun getTileCount(): Number

  @JsName("GetTileBorderSize")
  public open fun getTileBorderSize(): Number

  @JsName("GetSize")
  public open fun getSize(): Number

  @JsName("GetPageTableSize")
  public open fun getPageTableSize(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RuntimeVirtualTexture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RuntimeVirtualTexture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RuntimeVirtualTexture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RuntimeVirtualTexture

    @JsName("C")
    public fun copy(other: UObject): RuntimeVirtualTexture

    @JsName("C")
    public fun copy(other: Any): RuntimeVirtualTexture
  }
}

public open external class RuntimeVirtualTextureParameterValue {
  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("ParameterValue")
  public open var parameterValue: RuntimeVirtualTexture

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  public open fun clone(): RuntimeVirtualTextureParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RuntimeVirtualTextureParameterValue

    @JsName("C")
    public fun copy(other: Any): RuntimeVirtualTextureParameterValue
  }
}

@JsName("EFontCacheType")
public external object FontCacheType {
  public var Offline: String

  public var Runtime: String

  @JsName("EFontCacheType_MAX")
  public var Max: String
}

public open external class FontCharacter {
  @JsName("StartU")
  public open var startU: Number

  @JsName("StartV")
  public open var startV: Number

  @JsName("USize")
  public open var uSize: Number

  @JsName("VSize")
  public open var vSize: Number

  @JsName("TextureIndex")
  public open var textureIndex: Number

  @JsName("VerticalOffset")
  public open var verticalOffset: Number

  public open fun clone(): FontCharacter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FontCharacter

    @JsName("C")
    public fun copy(other: Any): FontCharacter
  }
}

@JsName("EFontImportCharacterSet")
public external object FontImportCharacterSet {
  @JsName("FontICS_Default")
  public var Default: String

  @JsName("FontICS_Ansi")
  public var Ansi: String

  @JsName("FontICS_Symbol")
  public var Symbol: String

  @JsName("FontICS_MAX")
  public var Max: String
}

public open external class FontImportOptionsData {
  @JsName("FontName")
  public open var fontName: String

  @JsName("Height")
  public open var height: Number

  @JsName("bEnableAntialiasing")
  public open var enableAntialiasing: Boolean

  @JsName("bEnableBold")
  public open var enableBold: Boolean

  @JsName("bEnableItalic")
  public open var enableItalic: Boolean

  @JsName("bEnableUnderline")
  public open var enableUnderline: Boolean

  @JsName("bAlphaOnly")
  public open var alphaOnly: Boolean

  @JsName("CharacterSet")
  public open var characterSet: String

  @JsName("Chars")
  public open var chars: String

  @JsName("UnicodeRange")
  public open var unicodeRange: String

  @JsName("CharsFilePath")
  public open var charsFilePath: String

  @JsName("CharsFileWildcard")
  public open var charsFileWildcard: String

  @JsName("bCreatePrintableOnly")
  public open var createPrintableOnly: Boolean

  @JsName("bIncludeASCIIRange")
  public open var includeAsciiRange: Boolean

  @JsName("ForegroundColor")
  public open var foregroundColor: LinearColor

  @JsName("bEnableDropShadow")
  public open var enableDropShadow: Boolean

  @JsName("TexturePageWidth")
  public open var texturePageWidth: Number

  @JsName("TexturePageMaxHeight")
  public open var texturePageMaxHeight: Number

  @JsName("XPadding")
  public open var xPadding: Number

  @JsName("YPadding")
  public open var yPadding: Number

  @JsName("ExtendBoxTop")
  public open var extendBoxTop: Number

  @JsName("ExtendBoxBottom")
  public open var extendBoxBottom: Number

  @JsName("ExtendBoxRight")
  public open var extendBoxRight: Number

  @JsName("ExtendBoxLeft")
  public open var extendBoxLeft: Number

  @JsName("bEnableLegacyMode")
  public open var enableLegacyMode: Boolean

  @JsName("Kerning")
  public open var kerning: Number

  @JsName("bUseDistanceFieldAlpha")
  public open var useDistanceFieldAlpha: Boolean

  @JsName("DistanceFieldScaleFactor")
  public open var distanceFieldScaleFactor: Number

  @JsName("DistanceFieldScanRadiusScale")
  public open var distanceFieldScanRadiusScale: Number

  public open fun clone(): FontImportOptionsData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FontImportOptionsData

    @JsName("C")
    public fun copy(other: Any): FontImportOptionsData
  }
}

@JsName("EFontHinting")
public external object FontHinting {
  public var Default: String

  public var Auto: String

  public var AutoLight: String

  public var Monochrome: String

  public var None: String

  @JsName("EFontHinting_MAX")
  public var Max: String
}

@JsName("EFontLoadingPolicy")
public external object FontLoadingPolicy {
  public var LazyLoad: String

  public var Stream: String

  public var Inline: String

  @JsName("EFontLoadingPolicy_MAX")
  public var Max: String
}

public open external class FontBulkData(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FontBulkData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FontBulkData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FontBulkData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FontBulkData

    @JsName("C")
    public fun copy(other: UObject): FontBulkData

    @JsName("C")
    public fun copy(other: Any): FontBulkData
  }
}

public open external class FontData {
  @JsName("FontFilename")
  public open var fontFilename: String

  @JsName("Hinting")
  public open var hinting: String

  @JsName("LoadingPolicy")
  public open var loadingPolicy: String

  @JsName("SubFaceIndex")
  public open var subFaceIndex: Number

  @JsName("FontFaceAsset")
  public open var fontFaceAsset: UObject

  @JsName("BulkDataPtr")
  public open var bulkDataPtr: FontBulkData

  @JsName("FontData")
  public open var fontData: Array<Number>

  public open fun clone(): FontData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FontData

    @JsName("C")
    public fun copy(other: Any): FontData
  }
}

public open external class TypefaceEntry {
  @JsName("Name")
  public open var name: String

  @JsName("Font")
  public open var font: FontData

  public open fun clone(): TypefaceEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TypefaceEntry

    @JsName("C")
    public fun copy(other: Any): TypefaceEntry
  }
}

public open external class Typeface {
  @JsName("Fonts")
  public open var fonts: Array<TypefaceEntry>

  public open fun clone(): Typeface

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Typeface

    @JsName("C")
    public fun copy(other: Any): Typeface
  }
}

public open external class CompositeFallbackFont {
  @JsName("Typeface")
  public open var typeface: Typeface

  @JsName("ScalingFactor")
  public open var scalingFactor: Number

  public open fun clone(): CompositeFallbackFont

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CompositeFallbackFont

    @JsName("C")
    public fun copy(other: Any): CompositeFallbackFont
  }
}

@JsName("ERangeBoundTypes")
public external object RangeBoundTypes {
  public var Exclusive: String

  public var Inclusive: String

  public var Open: String

  @JsName("ERangeBoundTypes_MAX")
  public var Max: String
}

public open external class Int32RangeBound {
  @JsName("Type")
  public open var type: String

  @JsName("Value")
  public open var value: Number

  public open fun clone(): Int32RangeBound

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Int32RangeBound

    @JsName("C")
    public fun copy(other: Any): Int32RangeBound
  }
}

public open external class Int32Range {
  @JsName("LowerBound")
  public open var lowerBound: Int32RangeBound

  @JsName("UpperBound")
  public open var upperBound: Int32RangeBound

  public open fun clone(): Int32Range

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Int32Range

    @JsName("C")
    public fun copy(other: Any): Int32Range
  }
}

public open external class CompositeSubFont : CompositeFallbackFont {
  @JsName("CharacterRanges")
  public open var characterRanges: Array<Int32Range>

  @JsName("Cultures")
  public open var cultures: String

  @JsName("EditorName")
  public open var editorName: String

  public override fun clone(): CompositeSubFont

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CompositeSubFont

    @JsName("C")
    public fun copy(other: Any): CompositeSubFont
  }
}

public open external class CompositeFont {
  @JsName("DefaultTypeface")
  public open var defaultTypeface: Typeface

  @JsName("FallbackTypeface")
  public open var fallbackTypeface: CompositeFallbackFont

  @JsName("SubTypefaces")
  public open var subTypefaces: Array<CompositeSubFont>

  public open fun clone(): CompositeFont

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CompositeFont

    @JsName("C")
    public fun copy(other: Any): CompositeFont
  }
}

public open external class Font(
  outer: UObject,
) : UObject {
  @JsName("FontCacheType")
  public open var fontCacheType: String

  @JsName("Characters")
  public open var characters: Array<FontCharacter>

  @JsName("Textures")
  public open var textures: Array<Texture2d>

  @JsName("IsRemapped")
  public open var isRemapped: Number

  @JsName("EmScale")
  public open var emScale: Number

  @JsName("Ascent")
  public open var ascent: Number

  @JsName("Descent")
  public open var descent: Number

  @JsName("Leading")
  public open var leading: Number

  @JsName("Kerning")
  public open var kerning: Number

  @JsName("ImportOptions")
  public open var importOptions: FontImportOptionsData

  @JsName("NumCharacters")
  public open var numCharacters: Number

  @JsName("MaxCharHeight")
  public open var maxCharHeight: Array<Number>

  @JsName("ScalingFactor")
  public open var scalingFactor: Number

  @JsName("LegacyFontSize")
  public open var legacyFontSize: Number

  @JsName("LegacyFontName")
  public open var legacyFontName: String

  @JsName("CompositeFont")
  public open var compositeFont: CompositeFont

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Font

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Font

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Font

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Font

    @JsName("C")
    public fun copy(other: UObject): Font

    @JsName("C")
    public fun copy(other: Any): Font
  }
}

public open external class FontParameterValue {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("FontValue")
  public open var fontValue: Font

  @JsName("FontPage")
  public open var fontPage: Number

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  public open fun clone(): FontParameterValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FontParameterValue

    @JsName("C")
    public fun copy(other: Any): FontParameterValue
  }
}

public open external class MaterialInstanceBasePropertyOverrides {
  @JsName("bOverride_OpacityMaskClipValue")
  public open var overrideOpacityMaskClipValue: Boolean

  @JsName("bOverride_BlendMode")
  public open var overrideBlendMode: Boolean

  @JsName("bOverride_ShadingModel")
  public open var overrideShadingModel: Boolean

  @JsName("bOverride_DitheredLODTransition")
  public open var overrideDitheredLodTransition: Boolean

  @JsName("bOverride_CastDynamicShadowAsMasked")
  public open var overrideCastDynamicShadowAsMasked: Boolean

  @JsName("bOverride_TwoSided")
  public open var overrideTwoSided: Boolean

  @JsName("bOverride_OutputTranslucentVelocity")
  public open var overrideOutputTranslucentVelocity: Boolean

  @JsName("TwoSided")
  public open var twoSided: Boolean

  @JsName("DitheredLODTransition")
  public open var ditheredLodTransition: Boolean

  @JsName("bCastDynamicShadowAsMasked")
  public open var castDynamicShadowAsMasked: Boolean

  @JsName("bOutputTranslucentVelocity")
  public open var outputTranslucentVelocity: Boolean

  @JsName("BlendMode")
  public open var blendMode: String

  @JsName("ShadingModel")
  public open var shadingModel: String

  @JsName("OpacityMaskClipValue")
  public open var opacityMaskClipValue: Number

  public open fun clone(): MaterialInstanceBasePropertyOverrides

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialInstanceBasePropertyOverrides

    @JsName("C")
    public fun copy(other: Any): MaterialInstanceBasePropertyOverrides
  }
}

public open external class StaticParameterBase {
  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("bOverride")
  public open var override: Boolean

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  public open fun clone(): StaticParameterBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticParameterBase

    @JsName("C")
    public fun copy(other: Any): StaticParameterBase
  }
}

public open external class StaticSwitchParameter : StaticParameterBase {
  @JsName("Value")
  public open var value: Boolean

  public override fun clone(): StaticSwitchParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticSwitchParameter

    @JsName("C")
    public fun copy(other: Any): StaticSwitchParameter
  }
}

public open external class StaticComponentMaskParameter : StaticParameterBase {
  @JsName("R")
  public open var r: Boolean

  @JsName("G")
  public open var g: Boolean

  @JsName("B")
  public open var b: Boolean

  @JsName("A")
  public open var a: Boolean

  public override fun clone(): StaticComponentMaskParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticComponentMaskParameter

    @JsName("C")
    public fun copy(other: Any): StaticComponentMaskParameter
  }
}

public open external class StaticTerrainLayerWeightParameter {
  @JsName("ParameterInfo")
  public open var parameterInfo: MaterialParameterInfo

  @JsName("ExpressionGuid")
  public open var expressionGuid: Guid

  @JsName("bOverride")
  public open var override: Boolean

  @JsName("LayerName")
  public open var layerName: String

  @JsName("WeightmapIndex")
  public open var weightmapIndex: Number

  @JsName("bWeightBasedBlend")
  public open var weightBasedBlend: Boolean

  public open fun clone(): StaticTerrainLayerWeightParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticTerrainLayerWeightParameter

    @JsName("C")
    public fun copy(other: Any): StaticTerrainLayerWeightParameter
  }
}

@JsName("EMaterialLayerLinkState")
public external object MaterialLayerLinkState {
  public var Uninitialized: String

  public var LinkedToParent: String

  public var UnlinkedFromParent: String

  public var NotFromParent: String

  @JsName("EMaterialLayerLinkState_MAX")
  public var Max: String
}

public open external class MaterialLayersFunctions {
  @JsName("Layers")
  public open var layers: Array<MaterialFunctionInterface>

  @JsName("Blends")
  public open var blends: Array<MaterialFunctionInterface>

  @JsName("LayerStates")
  public open var layerStates: Array<Boolean>

  @JsName("LayerNames")
  public open var layerNames: Array<String>

  @JsName("RestrictToLayerRelatives")
  public open var restrictToLayerRelatives: Array<Boolean>

  @JsName("RestrictToBlendRelatives")
  public open var restrictToBlendRelatives: Array<Boolean>

  @JsName("LayerGuids")
  public open var layerGuids: Array<Guid>

  @JsName("LayerLinkStates")
  public open var layerLinkStates: Array<String>

  @JsName("DeletedParentLayerGuids")
  public open var deletedParentLayerGuids: Array<Guid>

  public open fun clone(): MaterialLayersFunctions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialLayersFunctions

    @JsName("C")
    public fun copy(other: Any): MaterialLayersFunctions
  }
}

public open external class StaticMaterialLayersParameter : StaticParameterBase {
  @JsName("Value")
  public open var value: MaterialLayersFunctions

  public override fun clone(): StaticMaterialLayersParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticMaterialLayersParameter

    @JsName("C")
    public fun copy(other: Any): StaticMaterialLayersParameter
  }
}

public open external class StaticParameterSet {
  @JsName("StaticSwitchParameters")
  public open var staticSwitchParameters: Array<StaticSwitchParameter>

  @JsName("StaticComponentMaskParameters")
  public open var staticComponentMaskParameters: Array<StaticComponentMaskParameter>

  @JsName("TerrainLayerWeightParameters")
  public open var terrainLayerWeightParameters: Array<StaticTerrainLayerWeightParameter>

  @JsName("MaterialLayers")
  public open var materialLayers: MaterialLayersFunctions

  @JsName("bHasMaterialLayers")
  public open var hasMaterialLayers: Boolean

  @JsName("MaterialLayersParameters")
  public open var materialLayersParameters: Array<StaticMaterialLayersParameter>

  public open fun clone(): StaticParameterSet

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticParameterSet

    @JsName("C")
    public fun copy(other: Any): StaticParameterSet
  }
}

public open external class MaterialInstance(
  outer: UObject,
) : MaterialInterface {
  @JsName("PhysMaterial")
  public open var physMaterial: PhysicalMaterial

  @JsName("PhysicalMaterialMap")
  public open var physicalMaterialMap: PhysicalMaterial

  @JsName("Parent")
  public open var parent: MaterialInterface

  @JsName("bHasStaticPermutationResource")
  public open var hasStaticPermutationResource: Boolean

  @JsName("bOverrideSubsurfaceProfile")
  public open var overrideSubsurfaceProfile: Boolean

  @JsName("ScalarParameterValues")
  public open var scalarParameterValues: Array<ScalarParameterValue>

  @JsName("VectorParameterValues")
  public open var vectorParameterValues: Array<VectorParameterValue>

  @JsName("DoubleVectorParameterValues")
  public open var doubleVectorParameterValues: Array<DoubleVectorParameterValue>

  @JsName("TextureParameterValues")
  public open var textureParameterValues: Array<TextureParameterValue>

  @JsName("RuntimeVirtualTextureParameterValues")
  public open var runtimeVirtualTextureParameterValues: Array<RuntimeVirtualTextureParameterValue>

  @JsName("FontParameterValues")
  public open var fontParameterValues: Array<FontParameterValue>

  @JsName("bOverrideBaseProperties")
  public open var overrideBaseProperties: Boolean

  @JsName("BasePropertyOverrides")
  public open var basePropertyOverrides: MaterialInstanceBasePropertyOverrides

  @JsName("ReferencedTextureGuids")
  public open var referencedTextureGuids: Array<Guid>

  @JsName("StaticParameters")
  public open var staticParameters: StaticParameterSet

  @JsName("bSavedCachedData")
  public open var savedCachedData: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialInstance

    @JsName("C")
    public fun copy(other: UObject): MaterialInstance

    @JsName("C")
    public fun copy(other: Any): MaterialInstance
  }
}

public open external class MaterialInstanceDynamic(
  outer: UObject,
) : MaterialInstance {
  @JsName("SetVectorParameterValueByInfo")
  public open fun setVectorParameterValueByInfo(parameterInfo: MaterialParameterInfo,
      value: LinearColor): Unit

  @JsName("SetVectorParameterValue")
  public open fun setVectorParameterValue(parameterName: String, value: LinearColor): Unit

  @JsName("SetTextureParameterValueByInfo")
  public open fun setTextureParameterValueByInfo(parameterInfo: MaterialParameterInfo,
      value: Texture): Unit

  @JsName("SetTextureParameterValue")
  public open fun setTextureParameterValue(parameterName: String, value: Texture): Unit

  @JsName("SetScalarParameterValueByInfo")
  public open fun setScalarParameterValueByInfo(parameterInfo: MaterialParameterInfo,
      value: Number): Unit

  @JsName("SetScalarParameterValue")
  public open fun setScalarParameterValue(parameterName: String, value: Number): Unit

  @JsName("SetRuntimeVirtualTextureParameterValueByInfo")
  public open fun setRuntimeVirtualTextureParameterValueByInfo(parameterInfo: MaterialParameterInfo,
      value: RuntimeVirtualTexture): Unit

  @JsName("SetRuntimeVirtualTextureParameterValue")
  public open fun setRuntimeVirtualTextureParameterValue(parameterName: String,
      value: RuntimeVirtualTexture): Unit

  @JsName("SetDoubleVectorParameterValue")
  public open fun setDoubleVectorParameterValue(parameterName: String, value: Vector): Unit

  @JsName("K2_InterpolateMaterialInstanceParams")
  public open fun k2InterpolateMaterialInstanceParams(
    sourceA: MaterialInstance,
    sourceB: MaterialInstance,
    alpha: Number,
  ): Unit

  @JsName("K2_GetVectorParameterValueByInfo")
  public open fun k2GetVectorParameterValueByInfo(parameterInfo: MaterialParameterInfo): LinearColor

  @JsName("K2_GetVectorParameterValue")
  public open fun k2GetVectorParameterValue(parameterName: String): LinearColor

  @JsName("K2_GetTextureParameterValueByInfo")
  public open fun k2GetTextureParameterValueByInfo(parameterInfo: MaterialParameterInfo): Texture

  @JsName("K2_GetTextureParameterValue")
  public open fun k2GetTextureParameterValue(parameterName: String): Texture

  @JsName("K2_GetScalarParameterValueByInfo")
  public open fun k2GetScalarParameterValueByInfo(parameterInfo: MaterialParameterInfo): Number

  @JsName("K2_GetScalarParameterValue")
  public open fun k2GetScalarParameterValue(parameterName: String): Number

  @JsName("K2_CopyMaterialInstanceParameters")
  public open fun k2CopyMaterialInstanceParameters(source: MaterialInterface,
      quickParametersOnly: Boolean): Unit

  @JsName("CopyParameterOverrides")
  public open fun copyParameterOverrides(materialInstance: MaterialInstance): Unit

  @JsName("CopyInterpParameters")
  public open fun copyInterpParameters(source: MaterialInstance): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialInstanceDynamic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialInstanceDynamic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialInstanceDynamic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialInstanceDynamic

    @JsName("C")
    public fun copy(other: UObject): MaterialInstanceDynamic

    @JsName("C")
    public fun copy(other: Any): MaterialInstanceDynamic
  }
}

public open external class DecalComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("DecalMaterial")
  public open var decalMaterial: MaterialInterface

  @JsName("SortOrder")
  public open var sortOrder: Number

  @JsName("FadeScreenSize")
  public open var fadeScreenSize: Number

  @JsName("FadeStartDelay")
  public open var fadeStartDelay: Number

  @JsName("FadeDuration")
  public open var fadeDuration: Number

  @JsName("FadeInDuration")
  public open var fadeInDuration: Number

  @JsName("FadeInStartDelay")
  public open var fadeInStartDelay: Number

  @JsName("bDestroyOwnerAfterFade")
  public open var destroyOwnerAfterFade: Boolean

  @JsName("DecalSize")
  public open var decalSize: Vector

  @JsName("SetSortOrder")
  public open fun setSortOrder(value: Number): Unit

  @JsName("SetFadeScreenSize")
  public open fun setFadeScreenSize(newFadeScreenSize: Number): Unit

  @JsName("SetFadeOut")
  public open fun setFadeOut(
    startDelay: Number,
    duration: Number,
    destroyOwnerAfterFade: Boolean,
  ): Unit

  @JsName("SetFadeIn")
  public open fun setFadeIn(startDelay: Number, duaration: Number): Unit

  @JsName("SetDecalMaterial")
  public open fun setDecalMaterial(newDecalMaterial: MaterialInterface): Unit

  @JsName("GetFadeStartDelay")
  public open fun getFadeStartDelay(): Number

  @JsName("GetFadeInStartDelay")
  public open fun getFadeInStartDelay(): Number

  @JsName("GetFadeInDuration")
  public open fun getFadeInDuration(): Number

  @JsName("GetFadeDuration")
  public open fun getFadeDuration(): Number

  @JsName("GetDecalMaterial")
  public open fun getDecalMaterial(): MaterialInterface

  @JsName("CreateDynamicMaterialInstance")
  public open fun createDynamicMaterialInstance(): MaterialInstanceDynamic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DecalComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DecalComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DecalComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DecalComponent

    @JsName("C")
    public fun copy(other: UObject): DecalComponent

    @JsName("C")
    public fun copy(other: Any): DecalComponent
  }
}

public open external class AssetData {
  @JsName("ObjectPath")
  public open var objectPath: String

  @JsName("PackageName")
  public open var packageName: String

  @JsName("PackagePath")
  public open var packagePath: String

  @JsName("AssetName")
  public open var assetName: String

  @JsName("AssetClass")
  public open var assetClass: String

  public open fun clone(): AssetData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetData

    @JsName("C")
    public fun copy(other: Any): AssetData

    @JsName("FindAssetData")
    public fun findAssetData(assetPath: String): AssetData
  }
}

public open external class MaterialStatistics {
  @JsName("NumVertexShaderInstructions")
  public open var numVertexShaderInstructions: Number

  @JsName("NumPixelShaderInstructions")
  public open var numPixelShaderInstructions: Number

  @JsName("NumSamplers")
  public open var numSamplers: Number

  @JsName("NumVertexTextureSamples")
  public open var numVertexTextureSamples: Number

  @JsName("NumPixelTextureSamples")
  public open var numPixelTextureSamples: Number

  @JsName("NumVirtualTextureSamples")
  public open var numVirtualTextureSamples: Number

  @JsName("NumUVScalars")
  public open var numUvScalars: Number

  @JsName("NumInterpolatorScalars")
  public open var numInterpolatorScalars: Number

  public open fun clone(): MaterialStatistics

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialStatistics

    @JsName("C")
    public fun copy(other: Any): MaterialStatistics
  }
}

@JsName("T$32")
public external interface ChildInstancesProvider {
  @JsName("ChildInstances")
  public var childInstances: Array<AssetData>
}

@JsName("T$33")
public external interface ParameterNamesProvider {
  @JsName("ParameterNames")
  public var parameterNames: Array<String>
}

@JsName("T$34")
public external interface Object34 {
  @JsName("ParameterSource")
  public var parameterSource: SoftObjectPath

  @JsName("$")
  public var value: Boolean
}

public open external class MaterialInterface(
  outer: UObject,
) : UObject {
  @JsName("SubsurfaceProfile")
  public open var subsurfaceProfile: SubsurfaceProfile

  @JsName("LightmassSettings")
  public open var lightmassSettings: LightmassMaterialInterfaceSettings

  @JsName("bTextureStreamingDataSorted")
  public open var textureStreamingDataSorted: Boolean

  @JsName("TextureStreamingDataVersion")
  public open var textureStreamingDataVersion: Number

  @JsName("TextureStreamingData")
  public open var textureStreamingData: Array<MaterialTextureInfo>

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("TextureStreamingDataMissingEntries")
  public open var textureStreamingDataMissingEntries: Array<MaterialTextureInfo>

  @JsName("PreviewMesh")
  public open var previewMesh: SoftObjectPath

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("LayerParameterExpansion")
  public open var layerParameterExpansion: Any

  @JsName("ParameterOverviewExpansion")
  public open var parameterOverviewExpansion: Any

  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("LightingGuid")
  public open var lightingGuid: Guid

  @JsName("SetForceMipLevelsToBeResident")
  public open fun setForceMipLevelsToBeResident(
    overrideForceMiplevelsToBeResident: Boolean,
    forceMiplevelsToBeResidentValue: Boolean,
    forceDuration: Number,
    cinematicTextureGroups: Number,
    fastResponse: Boolean,
  ): Unit

  @JsName("GetPhysicalMaterialMask")
  public open fun getPhysicalMaterialMask(): PhysicalMaterialMask

  @JsName("GetPhysicalMaterialFromMap")
  public open fun getPhysicalMaterialFromMap(index: Number): PhysicalMaterial

  @JsName("GetPhysicalMaterial")
  public open fun getPhysicalMaterial(): PhysicalMaterial

  @JsName("GetParameterInfo")
  public open fun getParameterInfo(
    association: String,
    parameterName: String,
    layerFunction: MaterialFunctionInterface,
  ): MaterialParameterInfo

  @JsName("GetBaseMaterial")
  public open fun getBaseMaterial(): Material

  @JsName("SpawnDecalAttached")
  public open fun spawnDecalAttached(
    decalSize: Vector,
    attachToComponent: SceneComponent,
    attachPointName: String,
    location: Vector,
    rotation: Rotator,
    locationType: String,
    lifeSpan: Number,
  ): DecalComponent

  @JsName("MakeBrushFromMaterial")
  public open fun makeBrushFromMaterial(width: Number, height: Number): SlateBrush

  @JsName("GetChildInstances")
  public open fun getChildInstances(childInstances: Array<AssetData>): ChildInstancesProvider

  @JsName("GetScalarParameterNames")
  public open fun getScalarParameterNames(parameterNames: Array<String>): ParameterNamesProvider

  @JsName("GetScalarParameterSource")
  public open fun getScalarParameterSource(parameterName: String, parameterSource: SoftObjectPath):
      Object34

  @JsName("GetStaticSwitchParameterNames")
  public open fun getStaticSwitchParameterNames(parameterNames: Array<String>):
      ParameterNamesProvider

  @JsName("GetStaticSwitchParameterSource")
  public open fun getStaticSwitchParameterSource(parameterName: String,
      parameterSource: SoftObjectPath): Object34

  @JsName("GetStatistics")
  public open fun getStatistics(): MaterialStatistics

  @JsName("GetTextureParameterNames")
  public open fun getTextureParameterNames(parameterNames: Array<String>): ParameterNamesProvider

  @JsName("GetTextureParameterSource")
  public open fun getTextureParameterSource(parameterName: String, parameterSource: SoftObjectPath):
      Object34

  @JsName("GetVectorParameterNames")
  public open fun getVectorParameterNames(parameterNames: Array<String>): ParameterNamesProvider

  @JsName("GetVectorParameterSource")
  public open fun getVectorParameterSource(parameterName: String, parameterSource: SoftObjectPath):
      Object34

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialInterface

    @JsName("C")
    public fun copy(other: UObject): MaterialInterface

    @JsName("C")
    public fun copy(other: Any): MaterialInterface

    @JsName("SpawnDecalAttached")
    public fun spawnDecalAttached(
      decalMaterial: MaterialInterface,
      decalSize: Vector,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      lifeSpan: Number,
    ): DecalComponent

    @JsName("MakeBrushFromMaterial")
    public fun makeBrushFromMaterial(
      material: MaterialInterface,
      width: Number,
      height: Number,
    ): SlateBrush

    @JsName("GetChildInstances")
    public fun getChildInstances(parent: MaterialInterface, childInstances: Array<AssetData>):
        ChildInstancesProvider

    @JsName("GetScalarParameterNames")
    public fun getScalarParameterNames(material: MaterialInterface, parameterNames: Array<String>):
        ParameterNamesProvider

    @JsName("GetScalarParameterSource")
    public fun getScalarParameterSource(
      material: MaterialInterface,
      parameterName: String,
      parameterSource: SoftObjectPath,
    ): Object34

    @JsName("GetStaticSwitchParameterNames")
    public fun getStaticSwitchParameterNames(material: MaterialInterface,
        parameterNames: Array<String>): ParameterNamesProvider

    @JsName("GetStaticSwitchParameterSource")
    public fun getStaticSwitchParameterSource(
      material: MaterialInterface,
      parameterName: String,
      parameterSource: SoftObjectPath,
    ): Object34

    @JsName("GetStatistics")
    public fun getStatistics(material: MaterialInterface): MaterialStatistics

    @JsName("GetTextureParameterNames")
    public fun getTextureParameterNames(material: MaterialInterface, parameterNames: Array<String>):
        ParameterNamesProvider

    @JsName("GetTextureParameterSource")
    public fun getTextureParameterSource(
      material: MaterialInterface,
      parameterName: String,
      parameterSource: SoftObjectPath,
    ): Object34

    @JsName("GetVectorParameterNames")
    public fun getVectorParameterNames(material: MaterialInterface, parameterNames: Array<String>):
        ParameterNamesProvider

    @JsName("GetVectorParameterSource")
    public fun getVectorParameterSource(
      material: MaterialInterface,
      parameterName: String,
      parameterSource: SoftObjectPath,
    ): Object34
  }
}

@JsName("T$43")
public external interface Object43 {
  @JsName("Brush")
  public var brush: SlateBrush

  @JsName("$")
  public var value: MaterialInstanceDynamic
}

@JsName("T$44")
public external interface BrushProvider {
  @JsName("Brush")
  public var brush: SlateBrush
}

public open external class SlateBrush {
  @JsName("ImageSize")
  public open var imageSize: Vector2d

  @JsName("Margin")
  public open var margin: Margin

  @JsName("Tint")
  public open var tint: LinearColor

  @JsName("TintColor")
  public open var tintColor: SlateColor

  @JsName("OutlineSettings")
  public open var outlineSettings: SlateBrushOutlineSettings

  @JsName("ResourceObject")
  public open var resourceObject: UObject

  @JsName("ResourceName")
  public open var resourceName: String

  @JsName("UVRegion")
  public open var uvRegion: Box2f

  @JsName("DrawAs")
  public open var drawAs: String

  @JsName("Tiling")
  public open var tiling: String

  @JsName("Mirroring")
  public open var mirroring: String

  @JsName("ImageType")
  public open var imageType: String

  @JsName("bIsDynamicallyLoaded")
  public open var isDynamicallyLoaded: Boolean

  @JsName("bHasUObject")
  public open var hasUObject: Boolean

  public open fun clone(): SlateBrush

  @JsName("GetBrushResource")
  public open fun getBrushResource(): UObject

  @JsName("GetBrushResourceAsMaterial")
  public open fun getBrushResourceAsMaterial(): MaterialInterface

  @JsName("GetBrushResourceAsTexture2D")
  public open fun getBrushResourceAsTexture2d(): Texture2d

  @JsName("GetDynamicMaterial")
  public open fun getDynamicMaterial(): Object43

  @JsName("SetBrushResourceToMaterial")
  public open fun setBrushResourceToMaterial(material: MaterialInterface): BrushProvider

  @JsName("SetBrushResourceToTexture")
  public open fun setBrushResourceToTexture(texture: Texture2d): BrushProvider

  @JsName("EqualEqual_SlateBrush")
  public open fun equalEqualSlateBrush(b: SlateBrush): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlateBrush

    @JsName("C")
    public fun copy(other: Any): SlateBrush

    @JsName("GetBrushResource")
    public fun getBrushResource(brush: SlateBrush): UObject

    @JsName("GetBrushResourceAsMaterial")
    public fun getBrushResourceAsMaterial(brush: SlateBrush): MaterialInterface

    @JsName("GetBrushResourceAsTexture2D")
    public fun getBrushResourceAsTexture2d(brush: SlateBrush): Texture2d

    @JsName("GetDynamicMaterial")
    public fun getDynamicMaterial(brush: SlateBrush): Object43

    @JsName("SetBrushResourceToMaterial")
    public fun setBrushResourceToMaterial(brush: SlateBrush, material: MaterialInterface):
        BrushProvider

    @JsName("SetBrushResourceToTexture")
    public fun setBrushResourceToTexture(brush: SlateBrush, texture: Texture2d): BrushProvider

    @JsName("EqualEqual_SlateBrush")
    public fun equalEqualSlateBrush(a: SlateBrush, b: SlateBrush): Boolean

    @JsName("NoResourceBrush")
    public fun noResourceBrush(): SlateBrush
  }
}

@JsName("Texture2D")
public open external class Texture2d(
  outer: UObject,
) : Texture {
  @JsName("FirstResourceMemMip")
  public open var firstResourceMemMip: Number

  @JsName("bTemporarilyDisableStreaming")
  public open var temporarilyDisableStreaming: Boolean

  @JsName("bHasBeenPaintedInEditor")
  public open var hasBeenPaintedInEditor: Boolean

  @JsName("AddressX")
  public open var addressX: String

  @JsName("AddressY")
  public open var addressY: String

  @JsName("ImportedSize")
  public open var importedSize: IntPoint

  @JsName("Blueprint_GetSizeY")
  public open fun blueprintGetSizeY(): Number

  @JsName("Blueprint_GetSizeX")
  public open fun blueprintGetSizeX(): Number

  @JsName("MakeImportanceTexture")
  public open fun makeImportanceTexture(weightingFunc: String): ImportanceTexture

  @JsName("MakeBrushFromTexture")
  public open fun makeBrushFromTexture(width: Number, height: Number): SlateBrush

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Texture2d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Texture2d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Texture2d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Texture2d

    @JsName("C")
    public fun copy(other: UObject): Texture2d

    @JsName("C")
    public fun copy(other: Any): Texture2d

    @JsName("MakeImportanceTexture")
    public fun makeImportanceTexture(texture: Texture2d, weightingFunc: String): ImportanceTexture

    @JsName("MakeBrushFromTexture")
    public fun makeBrushFromTexture(
      texture: Texture2d,
      width: Number,
      height: Number,
    ): SlateBrush
  }
}

public open external class SpriteCategoryInfo {
  @JsName("Category")
  public open var category: String

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("Description")
  public open var description: String

  public open fun clone(): SpriteCategoryInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SpriteCategoryInfo

    @JsName("C")
    public fun copy(other: Any): SpriteCategoryInfo
  }
}

public open external class BillboardComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("Sprite")
  public open var sprite: Texture2d

  @JsName("bIsScreenSizeScaled")
  public open var isScreenSizeScaled: Boolean

  @JsName("ScreenSize")
  public open var screenSize: Number

  @JsName("U")
  public open var u: Number

  public open var UL: Number

  @JsName("V")
  public open var v: Number

  public open var VL: Number

  @JsName("OpacityMaskRefVal")
  public open var opacityMaskRefVal: Number

  @JsName("SpriteCategoryName")
  public open var spriteCategoryName: String

  @JsName("SpriteInfo")
  public open var spriteInfo: SpriteCategoryInfo

  @JsName("bUseInEditorScaling")
  public open var useInEditorScaling: Boolean

  @JsName("SetUV")
  public open fun setUv(
    newU: Number,
    newUl: Number,
    newV: Number,
    newVl: Number,
  ): Unit

  @JsName("SetSpriteAndUV")
  public open fun setSpriteAndUv(
    newSprite: Texture2d,
    newU: Number,
    newUl: Number,
    newV: Number,
    newVl: Number,
  ): Unit

  @JsName("SetSprite")
  public open fun setSprite(newSprite: Texture2d): Unit

  @JsName("SetOpacityMaskRefVal")
  public open fun setOpacityMaskRefVal(refVal: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BillboardComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BillboardComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BillboardComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BillboardComponent

    @JsName("C")
    public fun copy(other: UObject): BillboardComponent

    @JsName("C")
    public fun copy(other: Any): BillboardComponent
  }
}

public open external class NavigationObjectBase(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("CapsuleComponent")
  public open var capsuleComponent: CapsuleComponent

  @JsName("GoodSprite")
  public open var goodSprite: BillboardComponent

  @JsName("BadSprite")
  public open var badSprite: BillboardComponent

  @JsName("bIsPIEPlayerStart")
  public open var isPiePlayerStart: Boolean

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationObjectBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationObjectBase

    @JsName("C")
    public fun copy(other: UObject): NavigationObjectBase

    @JsName("C")
    public fun copy(other: Any): NavigationObjectBase
  }
}

public open external class NavigationDataChunk(
  outer: UObject,
) : UObject {
  @JsName("NavigationDataName")
  public open var navigationDataName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationDataChunk

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationDataChunk

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationDataChunk

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationDataChunk

    @JsName("C")
    public fun copy(other: UObject): NavigationDataChunk

    @JsName("C")
    public fun copy(other: Any): NavigationDataChunk
  }
}

@JsName("ELightingBuildQuality")
public external object LightingBuildQuality {
  @JsName("Quality_Preview")
  public var Preview: String

  @JsName("Quality_Medium")
  public var Medium: String

  @JsName("Quality_High")
  public var High: String

  @JsName("Quality_Production")
  public var Production: String

  @JsName("Quality_MAX")
  public var Max: String
}

public open external class MapBuildDataRegistry(
  outer: UObject,
) : UObject {
  @JsName("LevelLightingQuality")
  public open var levelLightingQuality: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MapBuildDataRegistry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MapBuildDataRegistry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MapBuildDataRegistry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MapBuildDataRegistry

    @JsName("C")
    public fun copy(other: UObject): MapBuildDataRegistry

    @JsName("C")
    public fun copy(other: Any): MapBuildDataRegistry
  }
}

@JsName("ETextureSizingType")
public external object TextureSizingType {
  @JsName("TextureSizingType_UseSingleTextureSize")
  public var UseSingleTextureSize: String

  @JsName("TextureSizingType_UseAutomaticBiasedSizes")
  public var UseAutomaticBiasedSizes: String

  @JsName("TextureSizingType_UseManualOverrideTextureSize")
  public var UseManualOverrideTextureSize: String

  @JsName("TextureSizingType_UseSimplygonAutomaticSizing")
  public var UseSimplygonAutomaticSizing: String

  @JsName("TextureSizingType_AutomaticFromTexelDensity")
  public var AutomaticFromTexelDensity: String

  @JsName("TextureSizingType_AutomaticFromMeshScreenSize")
  public var AutomaticFromMeshScreenSize: String

  @JsName("TextureSizingType_AutomaticFromMeshDrawDistance")
  public var AutomaticFromMeshDrawDistance: String

  @JsName("TextureSizingType_MAX")
  public var Max: String
}

@JsName("EMaterialMergeType")
public external object MaterialMergeType {
  @JsName("MaterialMergeType_Default")
  public var Default: String

  @JsName("MaterialMergeType_Simplygon")
  public var Simplygon: String

  @JsName("MaterialMergeType_MAX")
  public var Max: String
}

public open external class MaterialProxySettings {
  @JsName("TextureSizingType")
  public open var textureSizingType: String

  @JsName("TextureSize")
  public open var textureSize: IntPoint

  @JsName("TargetTexelDensityPerMeter")
  public open var targetTexelDensityPerMeter: Number

  @JsName("MeshMaxScreenSizePercent")
  public open var meshMaxScreenSizePercent: Number

  @JsName("MeshMinDrawDistance")
  public open var meshMinDrawDistance: Number

  @JsName("GutterSpace")
  public open var gutterSpace: Number

  @JsName("MetallicConstant")
  public open var metallicConstant: Number

  @JsName("RoughnessConstant")
  public open var roughnessConstant: Number

  @JsName("AnisotropyConstant")
  public open var anisotropyConstant: Number

  @JsName("SpecularConstant")
  public open var specularConstant: Number

  @JsName("OpacityConstant")
  public open var opacityConstant: Number

  @JsName("OpacityMaskConstant")
  public open var opacityMaskConstant: Number

  @JsName("AmbientOcclusionConstant")
  public open var ambientOcclusionConstant: Number

  @JsName("MaterialMergeType")
  public open var materialMergeType: String

  @JsName("BlendMode")
  public open var blendMode: String

  @JsName("bAllowTwoSidedMaterial")
  public open var allowTwoSidedMaterial: Boolean

  @JsName("bNormalMap")
  public open var normalMap: Boolean

  @JsName("bTangentMap")
  public open var tangentMap: Boolean

  @JsName("bMetallicMap")
  public open var metallicMap: Boolean

  @JsName("bRoughnessMap")
  public open var roughnessMap: Boolean

  @JsName("bAnisotropyMap")
  public open var anisotropyMap: Boolean

  @JsName("bSpecularMap")
  public open var specularMap: Boolean

  @JsName("bEmissiveMap")
  public open var emissiveMap: Boolean

  @JsName("bOpacityMap")
  public open var opacityMap: Boolean

  @JsName("bOpacityMaskMap")
  public open var opacityMaskMap: Boolean

  @JsName("bAmbientOcclusionMap")
  public open var ambientOcclusionMap: Boolean

  @JsName("DiffuseTextureSize")
  public open var diffuseTextureSize: IntPoint

  @JsName("NormalTextureSize")
  public open var normalTextureSize: IntPoint

  @JsName("TangentTextureSize")
  public open var tangentTextureSize: IntPoint

  @JsName("MetallicTextureSize")
  public open var metallicTextureSize: IntPoint

  @JsName("RoughnessTextureSize")
  public open var roughnessTextureSize: IntPoint

  @JsName("AnisotropyTextureSize")
  public open var anisotropyTextureSize: IntPoint

  @JsName("SpecularTextureSize")
  public open var specularTextureSize: IntPoint

  @JsName("EmissiveTextureSize")
  public open var emissiveTextureSize: IntPoint

  @JsName("OpacityTextureSize")
  public open var opacityTextureSize: IntPoint

  @JsName("OpacityMaskTextureSize")
  public open var opacityMaskTextureSize: IntPoint

  @JsName("AmbientOcclusionTextureSize")
  public open var ambientOcclusionTextureSize: IntPoint

  public open fun clone(): MaterialProxySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialProxySettings

    @JsName("C")
    public fun copy(other: Any): MaterialProxySettings
  }
}

public open external class LevelSimplificationDetails {
  @JsName("bCreatePackagePerAsset")
  public open var createPackagePerAsset: Boolean

  @JsName("DetailsPercentage")
  public open var detailsPercentage: Number

  @JsName("StaticMeshMaterialSettings")
  public open var staticMeshMaterialSettings: MaterialProxySettings

  @JsName("bOverrideLandscapeExportLOD")
  public open var overrideLandscapeExportLod: Boolean

  @JsName("LandscapeExportLOD")
  public open var landscapeExportLod: Number

  @JsName("LandscapeMaterialSettings")
  public open var landscapeMaterialSettings: MaterialProxySettings

  @JsName("bBakeFoliageToLandscape")
  public open var bakeFoliageToLandscape: Boolean

  @JsName("bBakeGrassToLandscape")
  public open var bakeGrassToLandscape: Boolean

  @JsName("bGenerateMeshNormalMap")
  public open var generateMeshNormalMap: Boolean

  @JsName("bGenerateMeshMetallicMap")
  public open var generateMeshMetallicMap: Boolean

  @JsName("bGenerateMeshRoughnessMap")
  public open var generateMeshRoughnessMap: Boolean

  @JsName("bGenerateMeshSpecularMap")
  public open var generateMeshSpecularMap: Boolean

  @JsName("bGenerateLandscapeNormalMap")
  public open var generateLandscapeNormalMap: Boolean

  @JsName("bGenerateLandscapeMetallicMap")
  public open var generateLandscapeMetallicMap: Boolean

  @JsName("bGenerateLandscapeRoughnessMap")
  public open var generateLandscapeRoughnessMap: Boolean

  @JsName("bGenerateLandscapeSpecularMap")
  public open var generateLandscapeSpecularMap: Boolean

  public open fun clone(): LevelSimplificationDetails

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelSimplificationDetails

    @JsName("C")
    public fun copy(other: Any): LevelSimplificationDetails
  }
}

@JsName("EActorPackagingScheme")
public external object ActorPackagingScheme {
  public var Original: String

  public var Reduced: String

  @JsName("EActorPackagingScheme_MAX")
  public var Max: String
}

public open external class Info(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Info

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Info

    @JsName("C")
    public fun copy(other: UObject): Info

    @JsName("C")
    public fun copy(other: Any): Info
  }
}

@JsName("EVisibilityAggressiveness")
public external object VisibilityAggressiveness {
  @JsName("VIS_LeastAggressive")
  public var LeastAggressive: String

  @JsName("VIS_ModeratelyAggressive")
  public var ModeratelyAggressive: String

  @JsName("VIS_MostAggressive")
  public var MostAggressive: String

  @JsName("VIS_Max")
  public var Max: String
}

public open external class Field(
  outer: UObject,
) : UObject {
  @JsName("HasMetaData")
  public open fun hasMetaData(key: String): Boolean

  @JsName("GetMetaData")
  public open fun getMetaData(key: String): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Field

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Field

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Field

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Field

    @JsName("C")
    public fun copy(other: UObject): Field

    @JsName("C")
    public fun copy(other: Any): Field

    @JsName("HasMetaData")
    public fun hasMetaData(field: Field, key: String): Boolean

    @JsName("GetMetaData")
    public fun getMetaData(field: Field, key: String): String
  }
}

public open external class Struct(
  outer: UObject,
) : Field {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Struct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Struct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Struct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Struct

    @JsName("C")
    public fun copy(other: UObject): Struct

    @JsName("C")
    public fun copy(other: Any): Struct
  }
}

public open external class DynamicBlueprintBinding(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicBlueprintBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicBlueprintBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicBlueprintBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicBlueprintBinding

    @JsName("C")
    public fun copy(other: UObject): DynamicBlueprintBinding

    @JsName("C")
    public fun copy(other: Any): DynamicBlueprintBinding
  }
}

public open external class DatasmithAssetUserData(
  outer: UObject,
) : AssetUserData {
  @JsName("MetaData")
  public open var metaData: Any

  @JsName("ObjectTemplates")
  public open var objectTemplates: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DatasmithAssetUserData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DatasmithAssetUserData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DatasmithAssetUserData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DatasmithAssetUserData

    @JsName("C")
    public fun copy(other: UObject): DatasmithAssetUserData

    @JsName("C")
    public fun copy(other: Any): DatasmithAssetUserData
  }
}

public open external class Subsystem(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Subsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Subsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Subsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Subsystem

    @JsName("C")
    public fun copy(other: UObject): Subsystem

    @JsName("C")
    public fun copy(other: Any): Subsystem
  }
}

public open external class DynamicSubsystem(
  outer: UObject,
) : Subsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicSubsystem

    @JsName("C")
    public fun copy(other: UObject): DynamicSubsystem

    @JsName("C")
    public fun copy(other: Any): DynamicSubsystem
  }
}

public open external class EngineSubsystem(
  outer: UObject,
) : DynamicSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EngineSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EngineSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EngineSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EngineSubsystem

    @JsName("C")
    public fun copy(other: UObject): EngineSubsystem

    @JsName("C")
    public fun copy(other: Any): EngineSubsystem
  }
}

@JsName("EDataLayerRuntimeState")
public external object DataLayerRuntimeState {
  public var Unloaded: String

  public var Loaded: String

  public var Activated: String

  @JsName("EDataLayerRuntimeState_MAX")
  public var Max: String
}

@JsName("EDataLayerState")
public external object DataLayerState {
  public var Unloaded: String

  public var Loaded: String

  public var Activated: String

  @JsName("EDataLayerState_MAX")
  public var Max: String
}

public open external class ActorDataLayer {
  @JsName("Name")
  public open var name: String

  public open fun clone(): ActorDataLayer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorDataLayer

    @JsName("C")
    public fun copy(other: Any): ActorDataLayer
  }
}

public open external class DataLayer(
  outer: UObject,
) : UObject {
  @JsName("bIsInitiallyActive")
  public open var isInitiallyActive: Boolean

  @JsName("bIsVisible")
  public open var isVisible: Boolean

  @JsName("bIsInitiallyVisible")
  public open var isInitiallyVisible: Boolean

  @JsName("bIsInitiallyLoadedInEditor")
  public open var isInitiallyLoadedInEditor: Boolean

  @JsName("bIsLoadedInEditor")
  public open var isLoadedInEditor: Boolean

  @JsName("bIsLoadedInEditorChangedByUserOperation")
  public open var isLoadedInEditorChangedByUserOperation: Boolean

  @JsName("bIsLocked")
  public open var isLocked: Boolean

  @JsName("DataLayerLabel")
  public open var dataLayerLabel: String

  @JsName("bIsRuntime")
  public open var isRuntime: Boolean

  @JsName("InitialRuntimeState")
  public open var initialRuntimeState: String

  @JsName("DebugColor")
  public open var debugColor: Color

  @JsName("Parent")
  public open var parent: DataLayer

  @JsName("Children")
  public open var children: Array<DataLayer>

  @JsName("IsVisible")
  public open fun isVisible(): Boolean

  @JsName("IsRuntime")
  public open fun isRuntime(): Boolean

  @JsName("IsInitiallyVisible")
  public open fun isInitiallyVisible(): Boolean

  @JsName("IsInitiallyActive")
  public open fun isInitiallyActive(): Boolean

  @JsName("IsEffectiveVisible")
  public open fun isEffectiveVisible(): Boolean

  @JsName("IsDynamicallyLoaded")
  public open fun isDynamicallyLoaded(): Boolean

  @JsName("GetInitialState")
  public open fun getInitialState(): String

  @JsName("GetInitialRuntimeState")
  public open fun getInitialRuntimeState(): String

  @JsName("GetDebugColor")
  public open fun getDebugColor(): Color

  @JsName("GetDataLayerLabel")
  public open fun getDataLayerLabel(): String

  @JsName("Equals")
  public open fun equals(actorDataLayer: ActorDataLayer): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataLayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataLayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataLayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataLayer

    @JsName("C")
    public fun copy(other: UObject): DataLayer

    @JsName("C")
    public fun copy(other: Any): DataLayer
  }
}

public open external class ActorInstanceHandle {
  @JsName("Actor")
  public open var actor: Any

  public open fun clone(): ActorInstanceHandle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorInstanceHandle

    @JsName("C")
    public fun copy(other: Any): ActorInstanceHandle
  }
}

@JsName("T$45")
public external interface OutPrimaryAssetIdListProvider {
  @JsName("OutPrimaryAssetIdList")
  public var outPrimaryAssetIdList: Array<PrimaryAssetId>
}

public open external class PrimaryAssetType {
  @JsName("Name")
  public open var name: String

  public open fun clone(): PrimaryAssetType

  @JsName("Conv_PrimaryAssetTypeToString")
  public open fun convertPrimaryAssetTypeToString(): String

  @JsName("EqualEqual_PrimaryAssetType")
  public open fun equalEqualPrimaryAssetType(b: PrimaryAssetType): Boolean

  @JsName("GetPrimaryAssetIdList")
  public open fun getPrimaryAssetIdList(outPrimaryAssetIdList: Array<PrimaryAssetId>):
      OutPrimaryAssetIdListProvider

  @JsName("IsValidPrimaryAssetType")
  public open fun isValidPrimaryAssetType(): Boolean

  @JsName("NotEqual_PrimaryAssetType")
  public open fun notEqualPrimaryAssetType(b: PrimaryAssetType): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PrimaryAssetType

    @JsName("C")
    public fun copy(other: Any): PrimaryAssetType

    @JsName("Conv_PrimaryAssetTypeToString")
    public fun convertPrimaryAssetTypeToString(primaryAssetType: PrimaryAssetType): String

    @JsName("EqualEqual_PrimaryAssetType")
    public fun equalEqualPrimaryAssetType(a: PrimaryAssetType, b: PrimaryAssetType): Boolean

    @JsName("GetPrimaryAssetIdList")
    public fun getPrimaryAssetIdList(primaryAssetType: PrimaryAssetType,
        outPrimaryAssetIdList: Array<PrimaryAssetId>): OutPrimaryAssetIdListProvider

    @JsName("IsValidPrimaryAssetType")
    public fun isValidPrimaryAssetType(primaryAssetType: PrimaryAssetType): Boolean

    @JsName("NotEqual_PrimaryAssetType")
    public fun notEqualPrimaryAssetType(a: PrimaryAssetType, b: PrimaryAssetType): Boolean
  }
}

@JsName("T$47")
public external interface Object47 {
  @JsName("OutBundles")
  public var outBundles: Array<String>

  @JsName("$")
  public var value: Boolean
}

public open external class PrimaryAssetId {
  @JsName("PrimaryAssetType")
  public open var primaryAssetType: PrimaryAssetType

  @JsName("PrimaryAssetName")
  public open var primaryAssetName: String

  public open fun clone(): PrimaryAssetId

  @JsName("Conv_PrimaryAssetIdToString")
  public open fun convertPrimaryAssetIdToString(): String

  @JsName("EqualEqual_PrimaryAssetId")
  public open fun equalEqualPrimaryAssetId(b: PrimaryAssetId): Boolean

  @JsName("GetClassFromPrimaryAssetId")
  public open fun getClassFromPrimaryAssetId(): UnrealEngineClass

  @JsName("GetCurrentBundleState")
  public open fun getCurrentBundleState(forceCurrentState: Boolean, outBundles: Array<String>):
      Object47

  @JsName("GetObjectFromPrimaryAssetId")
  public open fun getObjectFromPrimaryAssetId(): UObject

  @JsName("GetSoftClassReferenceFromPrimaryAssetId")
  public open fun getSoftClassReferenceFromPrimaryAssetId(): Class

  @JsName("GetSoftObjectReferenceFromPrimaryAssetId")
  public open fun getSoftObjectReferenceFromPrimaryAssetId(): UObject

  @JsName("IsValidPrimaryAssetId")
  public open fun isValidPrimaryAssetId(): Boolean

  @JsName("NotEqual_PrimaryAssetId")
  public open fun notEqualPrimaryAssetId(b: PrimaryAssetId): Boolean

  @JsName("UnloadPrimaryAsset")
  public open fun unloadPrimaryAsset(): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PrimaryAssetId

    @JsName("C")
    public fun copy(other: Any): PrimaryAssetId

    @JsName("Conv_PrimaryAssetIdToString")
    public fun convertPrimaryAssetIdToString(primaryAssetId: PrimaryAssetId): String

    @JsName("EqualEqual_PrimaryAssetId")
    public fun equalEqualPrimaryAssetId(a: PrimaryAssetId, b: PrimaryAssetId): Boolean

    @JsName("GetClassFromPrimaryAssetId")
    public fun getClassFromPrimaryAssetId(primaryAssetId: PrimaryAssetId): UnrealEngineClass

    @JsName("GetCurrentBundleState")
    public fun getCurrentBundleState(
      primaryAssetId: PrimaryAssetId,
      forceCurrentState: Boolean,
      outBundles: Array<String>,
    ): Object47

    @JsName("GetObjectFromPrimaryAssetId")
    public fun getObjectFromPrimaryAssetId(primaryAssetId: PrimaryAssetId): UObject

    @JsName("GetSoftClassReferenceFromPrimaryAssetId")
    public fun getSoftClassReferenceFromPrimaryAssetId(primaryAssetId: PrimaryAssetId): Class

    @JsName("GetSoftObjectReferenceFromPrimaryAssetId")
    public fun getSoftObjectReferenceFromPrimaryAssetId(primaryAssetId: PrimaryAssetId): UObject

    @JsName("IsValidPrimaryAssetId")
    public fun isValidPrimaryAssetId(primaryAssetId: PrimaryAssetId): Boolean

    @JsName("NotEqual_PrimaryAssetId")
    public fun notEqualPrimaryAssetId(a: PrimaryAssetId, b: PrimaryAssetId): Boolean

    @JsName("UnloadPrimaryAsset")
    public fun unloadPrimaryAsset(primaryAssetId: PrimaryAssetId): Unit
  }
}

public open external class SaveGame(
  outer: UObject,
) : UObject {
  @JsName("SaveGameToSlot")
  public open fun saveGameToSlot(slotName: String, userIndex: Number): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SaveGame

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SaveGame

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SaveGame

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SaveGame

    @JsName("C")
    public fun copy(other: UObject): SaveGame

    @JsName("C")
    public fun copy(other: Any): SaveGame

    @JsName("SaveGameToSlot")
    public fun saveGameToSlot(
      saveGameObject: SaveGame,
      slotName: String,
      userIndex: Number,
    ): Boolean
  }
}

@JsName("EInterfaceValidResult")
public external object InterfaceValidResult {
  public var Valid: String

  public var Invalid: String

  @JsName("EInterfaceValidResult_MAX")
  public var Max: String
}

@JsName("T$49")
public external interface StringResultProvider {
  @JsName("Result")
  public var result: String
}

public open external class CameraLensInterfaceClassSupport {
  @JsName("Class")
  public open var `class`: UnrealEngineClass

  public open fun clone(): CameraLensInterfaceClassSupport

  @JsName("GetInterfaceClass")
  public open fun getInterfaceClass(): UnrealEngineClass

  @JsName("IsInterfaceClassValid")
  public open fun isInterfaceClassValid(result: String): StringResultProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraLensInterfaceClassSupport

    @JsName("C")
    public fun copy(other: Any): CameraLensInterfaceClassSupport

    @JsName("GetInterfaceClass")
    public fun getInterfaceClass(cameraLens: CameraLensInterfaceClassSupport): UnrealEngineClass

    @JsName("IsInterfaceClassValid")
    public fun isInterfaceClassValid(cameraLens: CameraLensInterfaceClassSupport, result: String):
        StringResultProvider
  }
}

public open external class EditorSubsystem(
  outer: UObject,
) : DynamicSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): EditorSubsystem

    @JsName("C")
    public fun copy(other: Any): EditorSubsystem
  }
}

public open external class Visual(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Visual

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Visual

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Visual

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Visual

    @JsName("C")
    public fun copy(other: UObject): Visual

    @JsName("C")
    public fun copy(other: Any): Visual
  }
}

public open external class PanelWidget(
  outer: UObject,
) : Widget {
  @JsName("Slots")
  public open var slots: Array<PanelSlot>

  @JsName("RemoveChildAt")
  public open fun removeChildAt(index: Number): Boolean

  @JsName("RemoveChild")
  public open fun removeChild(content: Widget): Boolean

  @JsName("HasChild")
  public open fun hasChild(content: Widget): Boolean

  @JsName("HasAnyChildren")
  public open fun hasAnyChildren(): Boolean

  @JsName("GetChildrenCount")
  public open fun getChildrenCount(): Number

  @JsName("GetChildIndex")
  public open fun getChildIndex(content: Widget): Number

  @JsName("GetChildAt")
  public open fun getChildAt(index: Number): Widget

  @JsName("GetAllChildren")
  public open fun getAllChildren(): Array<Widget>

  @JsName("ClearChildren")
  public open fun clearChildren(): Unit

  @JsName("AddChild")
  public open fun addChild(content: Widget): PanelSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PanelWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PanelWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PanelWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PanelWidget

    @JsName("C")
    public fun copy(other: UObject): PanelWidget

    @JsName("C")
    public fun copy(other: Any): PanelWidget
  }
}

public open external class PanelSlot(
  outer: UObject,
) : Visual {
  @JsName("Parent")
  public open var parent: PanelWidget

  @JsName("Content")
  public open var content: Widget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PanelSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PanelSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PanelSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PanelSlot

    @JsName("C")
    public fun copy(other: UObject): PanelSlot

    @JsName("C")
    public fun copy(other: Any): PanelSlot
  }
}

@JsName("ESlateVisibility")
public external object SlateVisibility {
  public var Visible: String

  public var Collapsed: String

  public var Hidden: String

  public var HitTestInvisible: String

  public var SelfHitTestInvisible: String

  @JsName("ESlateVisibility_MAX")
  public var Max: String
}

public open external class WidgetTransform {
  @JsName("Translation")
  public open var translation: Vector2d

  @JsName("Scale")
  public open var scale: Vector2d

  @JsName("Shear")
  public open var shear: Vector2d

  @JsName("Angle")
  public open var angle: Number

  public open fun clone(): WidgetTransform

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WidgetTransform

    @JsName("C")
    public fun copy(other: Any): WidgetTransform
  }
}

@JsName("EFlowDirectionPreference")
public external object FlowDirectionPreference {
  public var Inherit: String

  public var Culture: String

  public var LeftToRight: String

  public var RightToLeft: String

  @JsName("EFlowDirectionPreference_MAX")
  public var Max: String
}

@JsName("ESlateAccessibleBehavior")
public external object SlateAccessibleBehavior {
  public var NotAccessible: String

  public var Auto: String

  public var Summary: String

  public var Custom: String

  public var ToolTip: String

  @JsName("ESlateAccessibleBehavior_MAX")
  public var Max: String
}

public open external class SlateAccessibleWidgetData(
  outer: UObject,
) : UObject {
  @JsName("bCanChildrenBeAccessible")
  public open var canChildrenBeAccessible: Boolean

  @JsName("AccessibleBehavior")
  public open var accessibleBehavior: String

  @JsName("AccessibleSummaryBehavior")
  public open var accessibleSummaryBehavior: String

  @JsName("AccessibleText")
  public open var accessibleText: String

  @JsName("AccessibleTextDelegate")
  public open var accessibleTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("AccessibleSummaryText")
  public open var accessibleSummaryText: String

  @JsName("AccessibleSummaryTextDelegate")
  public open var accessibleSummaryTextDelegate: UnrealEngineDelegate<() -> String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateAccessibleWidgetData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateAccessibleWidgetData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateAccessibleWidgetData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateAccessibleWidgetData

    @JsName("C")
    public fun copy(other: UObject): SlateAccessibleWidgetData

    @JsName("C")
    public fun copy(other: Any): SlateAccessibleWidgetData
  }
}

@JsName("EMouseCursor")
public external object MouseCursor {
  public var None: String

  public var Default: String

  public var TextEditBeam: String

  public var ResizeLeftRight: String

  public var ResizeUpDown: String

  public var ResizeSouthEast: String

  public var ResizeSouthWest: String

  public var CardinalCross: String

  public var Crosshairs: String

  public var Hand: String

  public var GrabHand: String

  public var GrabHandClosed: String

  public var SlashedCircle: String

  public var EyeDropper: String

  @JsName("EMouseCursor_MAX")
  public var Max: String
}

@JsName("EWidgetClipping")
public external object WidgetClipping {
  public var Inherit: String

  public var ClipToBounds: String

  public var ClipToBoundsWithoutIntersecting: String

  public var ClipToBoundsAlways: String

  public var OnDemand: String

  @JsName("EWidgetClipping_MAX")
  public var Max: String
}

@JsName("EUINavigationRule")
public external object UINavigationRule {
  public var Escape: String

  public var Explicit: String

  public var Wrap: String

  public var Stop: String

  public var Custom: String

  public var CustomBoundary: String

  public var Invalid: String

  @JsName("EUINavigationRule_MAX")
  public var Max: String
}

@JsName("EUINavigation")
public external object UINavigation {
  public var Left: String

  public var Right: String

  public var Up: String

  public var Down: String

  public var Next: String

  public var Previous: String

  public var Num: String

  public var Invalid: String

  @JsName("EUINavigation_MAX")
  public var Max: String
}

public open external class WidgetNavigationData {
  @JsName("Rule")
  public open var rule: String

  @JsName("WidgetToFocus")
  public open var widgetToFocus: String

  @JsName("Widget")
  public open var widget: Any

  @JsName("CustomDelegate")
  public open var customDelegate: UnrealEngineDelegate<(Navigation: String) -> Widget>

  public open fun clone(): WidgetNavigationData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WidgetNavigationData

    @JsName("C")
    public fun copy(other: Any): WidgetNavigationData
  }
}

public open external class WidgetNavigation(
  outer: UObject,
) : UObject {
  @JsName("Up")
  public open var up: WidgetNavigationData

  @JsName("Down")
  public open var down: WidgetNavigationData

  @JsName("Left")
  public open var left: WidgetNavigationData

  @JsName("Right")
  public open var right: WidgetNavigationData

  @JsName("Next")
  public open var next: WidgetNavigationData

  @JsName("Previous")
  public open var previous: WidgetNavigationData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetNavigation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetNavigation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetNavigation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetNavigation

    @JsName("C")
    public fun copy(other: UObject): WidgetNavigation

    @JsName("C")
    public fun copy(other: Any): WidgetNavigation
  }
}

public open external class PropertyPathSegment {
  @JsName("Name")
  public open var name: String

  @JsName("ArrayIndex")
  public open var arrayIndex: Number

  public open var struct: Struct

  public open fun clone(): PropertyPathSegment

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyPathSegment

    @JsName("C")
    public fun copy(other: Any): PropertyPathSegment
  }
}

public open external class UFunction(
  outer: UObject,
) : Struct {
  @JsName("GetFunctionParmsSize")
  public open fun getFunctionParmsSize(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UFunction

    @JsName("C")
    public fun copy(other: UObject): UFunction

    @JsName("C")
    public fun copy(other: Any): UFunction

    @JsName("GetFunctionParmsSize")
    public fun getFunctionParmsSize(uFunction: UFunction): Number
  }
}

public open external class CachedPropertyPath {
  @JsName("Segments")
  public open var segments: Array<PropertyPathSegment>

  @JsName("CachedFunction")
  public open var cachedFunction: UFunction

  public open fun clone(): CachedPropertyPath

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CachedPropertyPath

    @JsName("C")
    public fun copy(other: Any): CachedPropertyPath
  }
}

public open external class DynamicPropertyPath : CachedPropertyPath {
  public override fun clone(): DynamicPropertyPath

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DynamicPropertyPath

    @JsName("C")
    public fun copy(other: Any): DynamicPropertyPath
  }
}

public open external class PropertyBinding(
  outer: UObject,
) : UObject {
  @JsName("SourceObject")
  public open var sourceObject: Any

  @JsName("SourcePath")
  public open var sourcePath: DynamicPropertyPath

  @JsName("DestinationProperty")
  public open var destinationProperty: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PropertyBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PropertyBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyBinding

    @JsName("C")
    public fun copy(other: UObject): PropertyBinding

    @JsName("C")
    public fun copy(other: Any): PropertyBinding
  }
}

public open external class LocalMessage(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalMessage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalMessage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalMessage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalMessage

    @JsName("C")
    public fun copy(other: UObject): LocalMessage

    @JsName("C")
    public fun copy(other: Any): LocalMessage
  }
}

public open external class UniqueNetIdWrapper {
  public open fun clone(): UniqueNetIdWrapper

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UniqueNetIdWrapper

    @JsName("C")
    public fun copy(other: Any): UniqueNetIdWrapper
  }
}

public open external class UniqueNetIdRepl : UniqueNetIdWrapper {
  @JsName("ReplicationBytes")
  public open var replicationBytes: Array<Number>

  public override fun clone(): UniqueNetIdRepl

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UniqueNetIdRepl

    @JsName("C")
    public fun copy(other: Any): UniqueNetIdRepl
  }
}

@JsName("EAutoReceiveInput")
public external object AutoReceiveInput {
  public var Disabled: String

  public var Player0: String

  public var Player1: String

  public var Player2: String

  public var Player3: String

  public var Player4: String

  public var Player5: String

  public var Player6: String

  public var Player7: String

  @JsName("EAutoReceiveInput_MAX")
  public var Max: String
}

@JsName("EAutoPossessAI")
public external object AutoPossessAI {
  public var Disabled: String

  public var PlacedInWorld: String

  public var Spawned: String

  public var PlacedInWorldOrSpawned: String

  @JsName("EAutoPossessAI_MAX")
  public var Max: String
}

@JsName("EPlaneConstraintAxisSetting")
public external object PlaneConstraintAxisSetting {
  public var Custom: String

  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  public var UseGlobalPhysicsSetting: String

  @JsName("EPlaneConstraintAxisSetting_MAX")
  public var Max: String
}

@JsName("T$50")
public external interface Object50 {
  @JsName("X")
  public var x: Any

  @JsName("Y")
  public var y: Any

  @JsName("Z")
  public var z: Any
}

@JsName("Vector_NetQuantize")
public open external class VectorNetQuantize : Vector {
  public override fun clone(): VectorNetQuantize

  @JsName("BreakVector_NetQuantize")
  public open fun breakVectorNetQuantize(
    x: Any,
    y: Any,
    z: Any,
  ): Object50

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorNetQuantize

    @JsName("C")
    public fun copy(other: Any): VectorNetQuantize

    @JsName("BreakVector_NetQuantize")
    public fun breakVectorNetQuantize(
      inVec: VectorNetQuantize,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("MakeVector_NetQuantize")
    public fun makeVectorNetQuantize(
      x: Any,
      y: Any,
      z: Any,
    ): VectorNetQuantize
  }
}

@JsName("Vector_NetQuantizeNormal")
public open external class VectorNetQuantizeNormal : Vector {
  public override fun clone(): VectorNetQuantizeNormal

  @JsName("BreakVector_NetQuantizeNormal")
  public open fun breakVectorNetQuantizeNormal(
    x: Any,
    y: Any,
    z: Any,
  ): Object50

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorNetQuantizeNormal

    @JsName("C")
    public fun copy(other: Any): VectorNetQuantizeNormal

    @JsName("BreakVector_NetQuantizeNormal")
    public fun breakVectorNetQuantizeNormal(
      inVec: VectorNetQuantizeNormal,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("MakeVector_NetQuantizeNormal")
    public fun makeVectorNetQuantizeNormal(
      x: Any,
      y: Any,
      z: Any,
    ): VectorNetQuantizeNormal
  }
}

@JsName("T$51")
public external interface Object51 {
  @JsName("bBlockingHit")
  public var blockingHit: Boolean

  @JsName("bInitialOverlap")
  public var initialOverlap: Boolean

  @JsName("Time")
  public var time: Number

  @JsName("Distance")
  public var distance: Number

  @JsName("Location")
  public var location: Vector

  @JsName("ImpactPoint")
  public var impactPoint: Vector

  @JsName("Normal")
  public var normal: Vector

  @JsName("ImpactNormal")
  public var impactNormal: Vector

  @JsName("PhysMat")
  public var physMat: PhysicalMaterial

  @JsName("HitActor")
  public var hitActor: Actor

  @JsName("HitComponent")
  public var hitComponent: PrimitiveComponent

  @JsName("HitBoneName")
  public var hitBoneName: String

  @JsName("BoneName")
  public var boneName: String

  @JsName("HitItem")
  public var hitItem: Number

  @JsName("ElementIndex")
  public var elementIndex: Number

  @JsName("FaceIndex")
  public var faceIndex: Number

  @JsName("TraceStart")
  public var traceStart: Vector

  @JsName("TraceEnd")
  public var traceEnd: Vector
}

@JsName("T$52")
public external interface Object52 {
  public var UV: Vector2d

  @JsName("$")
  public var value: Boolean
}

public open external class HitResult {
  @JsName("FaceIndex")
  public open var faceIndex: Number

  @JsName("Time")
  public open var time: Number

  @JsName("Distance")
  public open var distance: Number

  @JsName("Location")
  public open var location: VectorNetQuantize

  @JsName("ImpactPoint")
  public open var impactPoint: VectorNetQuantize

  @JsName("Normal")
  public open var normal: VectorNetQuantizeNormal

  @JsName("ImpactNormal")
  public open var impactNormal: VectorNetQuantizeNormal

  @JsName("TraceStart")
  public open var traceStart: VectorNetQuantize

  @JsName("TraceEnd")
  public open var traceEnd: VectorNetQuantize

  @JsName("PenetrationDepth")
  public open var penetrationDepth: Number

  @JsName("MyItem")
  public open var myItem: Number

  @JsName("Item")
  public open var item: Number

  @JsName("ElementIndex")
  public open var elementIndex: Number

  @JsName("bBlockingHit")
  public open var blockingHit: Boolean

  @JsName("bStartPenetrating")
  public open var startPenetrating: Boolean

  @JsName("PhysMaterial")
  public open var physMaterial: Any

  @JsName("HitObjectHandle")
  public open var hitObjectHandle: ActorInstanceHandle

  @JsName("Component")
  public open var component: Any

  @JsName("BoneName")
  public open var boneName: String

  @JsName("MyBoneName")
  public open var myBoneName: String

  public open fun clone(): HitResult

  @JsName("BreakHitResult")
  public open fun breakHitResult(
    blockingHit: Boolean,
    initialOverlap: Boolean,
    time: Number,
    distance: Number,
    location: Vector,
    impactPoint: Vector,
    normal: Vector,
    impactNormal: Vector,
    physMat: PhysicalMaterial,
    hitActor: Actor,
    hitComponent: PrimitiveComponent,
    hitBoneName: String,
    boneName: String,
    hitItem: Number,
    elementIndex: Number,
    faceIndex: Number,
    traceStart: Vector,
    traceEnd: Vector,
  ): Object51

  @JsName("FindCollisionUV")
  public open fun findCollisionUv(uvChannel: Number, UV: Vector2d): Object52

  @JsName("GetSurfaceType")
  public open fun getSurfaceType(): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): HitResult

    @JsName("C")
    public fun copy(other: Any): HitResult

    @JsName("BreakHitResult")
    public fun breakHitResult(
      hit: HitResult,
      blockingHit: Boolean,
      initialOverlap: Boolean,
      time: Number,
      distance: Number,
      location: Vector,
      impactPoint: Vector,
      normal: Vector,
      impactNormal: Vector,
      physMat: PhysicalMaterial,
      hitActor: Actor,
      hitComponent: PrimitiveComponent,
      hitBoneName: String,
      boneName: String,
      hitItem: Number,
      elementIndex: Number,
      faceIndex: Number,
      traceStart: Vector,
      traceEnd: Vector,
    ): Object51

    @JsName("FindCollisionUV")
    public fun findCollisionUv(
      hit: HitResult,
      uvChannel: Number,
      UV: Vector2d,
    ): Object52

    @JsName("GetSurfaceType")
    public fun getSurfaceType(hit: HitResult): String

    @JsName("MakeHitResult")
    public fun makeHitResult(
      blockingHit: Boolean,
      initialOverlap: Boolean,
      time: Number,
      distance: Number,
      location: Vector,
      impactPoint: Vector,
      normal: Vector,
      impactNormal: Vector,
      physMat: PhysicalMaterial,
      hitActor: Actor,
      hitComponent: PrimitiveComponent,
      hitBoneName: String,
      boneName: String,
      hitItem: Number,
      elementIndex: Number,
      faceIndex: Number,
      traceStart: Vector,
      traceEnd: Vector,
    ): HitResult
  }
}

@JsName("T$53")
public external interface Object53 {
  @JsName("OutHit")
  public var outHit: HitResult

  @JsName("$")
  public var value: Boolean
}

public open external class MovementComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("UpdatedComponent")
  public open var updatedComponent: SceneComponent

  @JsName("UpdatedPrimitive")
  public open var updatedPrimitive: PrimitiveComponent

  @JsName("Velocity")
  public open var velocity: Vector

  @JsName("PlaneConstraintNormal")
  public open var planeConstraintNormal: Vector

  @JsName("PlaneConstraintOrigin")
  public open var planeConstraintOrigin: Vector

  @JsName("bUpdateOnlyIfRendered")
  public open var updateOnlyIfRendered: Boolean

  @JsName("bAutoUpdateTickRegistration")
  public open var autoUpdateTickRegistration: Boolean

  @JsName("bTickBeforeOwner")
  public open var tickBeforeOwner: Boolean

  @JsName("bAutoRegisterUpdatedComponent")
  public open var autoRegisterUpdatedComponent: Boolean

  @JsName("bConstrainToPlane")
  public open var constrainToPlane: Boolean

  @JsName("bSnapToPlaneAtStart")
  public open var snapToPlaneAtStart: Boolean

  @JsName("bAutoRegisterPhysicsVolumeUpdates")
  public open var autoRegisterPhysicsVolumeUpdates: Boolean

  @JsName("bComponentShouldUpdatePhysicsVolume")
  public open var componentShouldUpdatePhysicsVolume: Boolean

  @JsName("PlaneConstraintAxisSetting")
  public open var planeConstraintAxisSetting: String

  @JsName("StopMovementImmediately")
  public open fun stopMovementImmediately(): Unit

  @JsName("SnapUpdatedComponentToPlane")
  public open fun snapUpdatedComponentToPlane(): Unit

  @JsName("SetUpdatedComponent")
  public open fun setUpdatedComponent(newUpdatedComponent: SceneComponent): Unit

  @JsName("SetPlaneConstraintOrigin")
  public open fun setPlaneConstraintOrigin(planeOrigin: Vector): Unit

  @JsName("SetPlaneConstraintNormal")
  public open fun setPlaneConstraintNormal(planeNormal: Vector): Unit

  @JsName("SetPlaneConstraintFromVectors")
  public open fun setPlaneConstraintFromVectors(forward: Vector, up: Vector): Unit

  @JsName("SetPlaneConstraintEnabled")
  public open fun setPlaneConstraintEnabled(enabled: Boolean): Unit

  @JsName("SetPlaneConstraintAxisSetting")
  public open fun setPlaneConstraintAxisSetting(newAxisSetting: String): Unit

  @JsName("PhysicsVolumeChanged")
  public open fun physicsVolumeChanged(newVolume: PhysicsVolume): Unit

  @JsName("K2_MoveUpdatedComponent")
  public open fun k2MoveUpdatedComponent(
    delta: Vector,
    newRotation: Rotator,
    outHit: HitResult,
    sweep: Boolean,
    teleport: Boolean,
  ): Object53

  @JsName("IsExceedingMaxSpeed")
  public open fun isExceedingMaxSpeed(maxSpeed: Number): Boolean

  @JsName("GetPlaneConstraintOrigin")
  public open fun getPlaneConstraintOrigin(): Vector

  @JsName("GetPlaneConstraintNormal")
  public open fun getPlaneConstraintNormal(): Vector

  @JsName("GetPlaneConstraintAxisSetting")
  public open fun getPlaneConstraintAxisSetting(): String

  @JsName("GetPhysicsVolume")
  public open fun getPhysicsVolume(): PhysicsVolume

  @JsName("GetMaxSpeed")
  public open fun getMaxSpeed(): Number

  @JsName("GetGravityZ")
  public open fun getGravityZ(): Number

  @JsName("ConstrainNormalToPlane")
  public open fun constrainNormalToPlane(normal: Vector): Vector

  @JsName("ConstrainLocationToPlane")
  public open fun constrainLocationToPlane(location: Vector): Vector

  @JsName("ConstrainDirectionToPlane")
  public open fun constrainDirectionToPlane(direction: Vector): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovementComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovementComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovementComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovementComponent

    @JsName("C")
    public fun copy(other: UObject): MovementComponent

    @JsName("C")
    public fun copy(other: Any): MovementComponent
  }
}

public open external class MovementProperties {
  @JsName("bCanCrouch")
  public open var canCrouch: Boolean

  @JsName("bCanJump")
  public open var canJump: Boolean

  @JsName("bCanWalk")
  public open var canWalk: Boolean

  @JsName("bCanSwim")
  public open var canSwim: Boolean

  @JsName("bCanFly")
  public open var canFly: Boolean

  public open fun clone(): MovementProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovementProperties

    @JsName("C")
    public fun copy(other: Any): MovementProperties
  }
}

public open external class SoftClassPath : SoftObjectPath {
  public override fun clone(): SoftClassPath

  @JsName("BreakSoftClassPath")
  public open fun breakSoftClassPath(pathString: String): PathStringProvider

  @JsName("Conv_SoftClassPathToSoftClassRef")
  public open fun convertSoftClassPathToSoftClassRef(): Class

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoftClassPath

    @JsName("C")
    public fun copy(other: Any): SoftClassPath

    @JsName("BreakSoftClassPath")
    public fun breakSoftClassPath(inSoftClassPath: SoftClassPath, pathString: String):
        PathStringProvider

    @JsName("Conv_SoftClassPathToSoftClassRef")
    public fun convertSoftClassPathToSoftClassRef(softClassPath: SoftClassPath): Class

    @JsName("MakeSoftClassPath")
    public fun makeSoftClassPath(pathString: String): SoftClassPath
  }
}

public open external class NavAgentProperties : MovementProperties {
  @JsName("AgentRadius")
  public open var agentRadius: Number

  @JsName("AgentHeight")
  public open var agentHeight: Number

  @JsName("AgentStepHeight")
  public open var agentStepHeight: Number

  @JsName("NavWalkingSearchHeightScale")
  public open var navWalkingSearchHeightScale: Number

  @JsName("PreferredNavData")
  public open var preferredNavData: SoftClassPath

  public override fun clone(): NavAgentProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavAgentProperties

    @JsName("C")
    public fun copy(other: Any): NavAgentProperties
  }
}

public open external class NavMovementComponent(
  outer: UObject,
) : MovementComponent {
  @JsName("NavAgentProps")
  public open var navAgentProps: NavAgentProperties

  @JsName("FixedPathBrakingDistance")
  public open var fixedPathBrakingDistance: Number

  @JsName("bUpdateNavAgentWithOwnersCollision")
  public open var updateNavAgentWithOwnersCollision: Boolean

  @JsName("bUseAccelerationForPaths")
  public open var useAccelerationForPaths: Boolean

  @JsName("bUseFixedBrakingDistanceForPaths")
  public open var useFixedBrakingDistanceForPaths: Boolean

  @JsName("MovementState")
  public open var movementState: MovementProperties

  @JsName("PathFollowingComp")
  public open var pathFollowingComp: UObject

  @JsName("StopMovementKeepPathing")
  public open fun stopMovementKeepPathing(): Unit

  @JsName("StopActiveMovement")
  public open fun stopActiveMovement(): Unit

  @JsName("IsSwimming")
  public open fun isSwimming(): Boolean

  @JsName("IsMovingOnGround")
  public open fun isMovingOnGround(): Boolean

  @JsName("IsFlying")
  public open fun isFlying(): Boolean

  @JsName("IsFalling")
  public open fun isFalling(): Boolean

  @JsName("IsCrouching")
  public open fun isCrouching(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavMovementComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavMovementComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavMovementComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavMovementComponent

    @JsName("C")
    public fun copy(other: UObject): NavMovementComponent

    @JsName("C")
    public fun copy(other: Any): NavMovementComponent
  }
}

public open external class PawnMovementComponent(
  outer: UObject,
) : NavMovementComponent {
  @JsName("PawnOwner")
  public open var pawnOwner: Pawn

  @JsName("IsMoveInputIgnored")
  public open fun isMoveInputIgnored(): Boolean

  @JsName("GetPendingInputVector")
  public open fun getPendingInputVector(): Vector

  @JsName("GetPawnOwner")
  public open fun getPawnOwner(): Pawn

  @JsName("GetLastInputVector")
  public open fun getLastInputVector(): Vector

  @JsName("ConsumeInputVector")
  public open fun consumeInputVector(): Vector

  @JsName("AddInputVector")
  public open fun addInputVector(worldVector: Vector, force: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnMovementComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnMovementComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnMovementComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnMovementComponent

    @JsName("C")
    public fun copy(other: UObject): PawnMovementComponent

    @JsName("C")
    public fun copy(other: Any): PawnMovementComponent
  }
}

public open external class Pawn(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("bUseControllerRotationPitch")
  public open var useControllerRotationPitch: Boolean

  @JsName("bUseControllerRotationYaw")
  public open var useControllerRotationYaw: Boolean

  @JsName("bUseControllerRotationRoll")
  public open var useControllerRotationRoll: Boolean

  @JsName("bCanAffectNavigationGeneration")
  public open var canAffectNavigationGeneration: Boolean

  @JsName("bIsLocalViewTarget")
  public open var isLocalViewTarget: Boolean

  @JsName("BaseEyeHeight")
  public open var baseEyeHeight: Number

  @JsName("AutoPossessPlayer")
  public open var autoPossessPlayer: String

  @JsName("AutoPossessAI")
  public open var autoPossessAi: String

  @JsName("RemoteViewPitch")
  public open var remoteViewPitch: Number

  @JsName("AIControllerClass")
  public open var aiControllerClass: UnrealEngineClass

  @JsName("PlayerState")
  public open var playerState: PlayerState

  @JsName("LastHitBy")
  public open var lastHitBy: Controller

  @JsName("Controller")
  public open var controller: Controller

  @JsName("PreviousController")
  public open var previousController: Controller

  @JsName("ReceiveControllerChangedDelegate")
  public open var receiveControllerChangedDelegate: UnrealEngineMulticastDelegate<(
    Pawn: Pawn,
    OldController: Controller,
    NewController: Controller,
  ) -> Unit>

  @JsName("ReceiveRestartedDelegate")
  public open var receiveRestartedDelegate: UnrealEngineMulticastDelegate<(Pawn: Pawn) -> Unit>

  @JsName("ControlInputVector")
  public open var controlInputVector: Vector

  @JsName("LastControlInputVector")
  public open var lastControlInputVector: Vector

  @JsName("SpawnDefaultController")
  public open fun spawnDefaultController(): Unit

  @JsName("SetCanAffectNavigationGeneration")
  public open fun setCanAffectNavigationGeneration(newValue: Boolean, forceUpdate: Boolean): Unit

  @JsName("ReceiveUnpossessed")
  public open fun receiveUnpossessed(oldController: Controller): Unit

  @JsName("ReceiveRestarted")
  public open fun receiveRestarted(): Unit

  @JsName("ReceivePossessed")
  public open fun receivePossessed(newController: Controller): Unit

  @JsName("ReceiveControllerChanged")
  public open fun receiveControllerChanged(oldController: Controller, newController: Controller):
      Unit

  @JsName("PawnMakeNoise")
  public open fun pawnMakeNoise(
    loudness: Number,
    noiseLocation: Vector,
    useNoiseMakerLocation: Boolean,
    noiseMaker: Actor,
  ): Unit

  @JsName("OnRep_PlayerState")
  public open fun onRepPlayerState(): Unit

  @JsName("OnRep_Controller")
  public open fun onRepController(): Unit

  @JsName("IsPlayerControlled")
  public open fun isPlayerControlled(): Boolean

  @JsName("IsPawnControlled")
  public open fun isPawnControlled(): Boolean

  @JsName("IsMoveInputIgnored")
  public open fun isMoveInputIgnored(): Boolean

  @JsName("IsLocallyViewed")
  public open fun isLocallyViewed(): Boolean

  @JsName("IsLocallyControlled")
  public open fun isLocallyControlled(): Boolean

  @JsName("IsControlled")
  public open fun isControlled(): Boolean

  @JsName("IsBotControlled")
  public open fun isBotControlled(): Boolean

  @JsName("GetPendingMovementInputVector")
  public open fun getPendingMovementInputVector(): Vector

  @JsName("GetNavAgentLocation")
  public open fun getNavAgentLocation(): Vector

  @JsName("GetMovementComponent")
  public open fun getMovementComponent(): PawnMovementComponent

  @JsName("GetLocalViewingPlayerController")
  public open fun getLocalViewingPlayerController(): PlayerController

  @JsName("GetLastMovementInputVector")
  public open fun getLastMovementInputVector(): Vector

  @JsName("GetControlRotation")
  public open fun getControlRotation(): Rotator

  @JsName("GetController")
  public open fun getController(): Controller

  @JsName("GetBaseAimRotation")
  public open fun getBaseAimRotation(): Rotator

  @JsName("DetachFromControllerPendingDestroy")
  public open fun detachFromControllerPendingDestroy(): Unit

  @JsName("ConsumeMovementInputVector")
  public open fun consumeMovementInputVector(): Vector

  @JsName("AddMovementInput")
  public open fun addMovementInput(
    worldDirection: Vector,
    scaleValue: Number,
    force: Boolean,
  ): Unit

  @JsName("AddControllerYawInput")
  public open fun addControllerYawInput(`val`: Number): Unit

  @JsName("AddControllerRollInput")
  public open fun addControllerRollInput(`val`: Number): Unit

  @JsName("AddControllerPitchInput")
  public open fun addControllerPitchInput(`val`: Number): Unit

  @JsName("SendAIMessage")
  public open fun sendAiMessage(
    message: String,
    messageSource: UObject,
    success: Boolean,
  ): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Pawn

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Pawn

    @JsName("GetMovementBaseActor")
    public fun getMovementBaseActor(pawn: Pawn): Actor

    @JsName("C")
    public fun copy(other: UObject): Pawn

    @JsName("C")
    public fun copy(other: Any): Pawn

    @JsName("SendAIMessage")
    public fun sendAiMessage(
      target: Pawn,
      message: String,
      messageSource: UObject,
      success: Boolean,
    ): Unit
  }
}

public open external class PlayerState(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("Score")
  public open var score: Number

  @JsName("PlayerId")
  public open var playerId: Number

  @JsName("CompressedPing")
  public open var compressedPing: Number

  @JsName("bShouldUpdateReplicatedPing")
  public open var shouldUpdateReplicatedPing: Boolean

  @JsName("bIsSpectator")
  public open var isSpectator: Boolean

  @JsName("bOnlySpectator")
  public open var onlySpectator: Boolean

  @JsName("bIsABot")
  public open var isABot: Boolean

  @JsName("bIsInactive")
  public open var isInactive: Boolean

  @JsName("bFromPreviousLevel")
  public open var fromPreviousLevel: Boolean

  @JsName("StartTime")
  public open var startTime: Number

  @JsName("EngineMessageClass")
  public open var engineMessageClass: UnrealEngineClass

  @JsName("SavedNetworkAddress")
  public open var savedNetworkAddress: String

  @JsName("UniqueId")
  public open var uniqueId: UniqueNetIdRepl

  @JsName("OnPawnSet")
  public open var onPawnSet: UnrealEngineMulticastDelegate<(
    Player: PlayerState,
    NewPawn: Pawn,
    OldPawn: Pawn,
  ) -> Unit>

  @JsName("PawnPrivate")
  public open var pawnPrivate: Pawn

  @JsName("PlayerNamePrivate")
  public open var playerNamePrivate: String

  @JsName("ReceiveOverrideWith")
  public open fun receiveOverrideWith(oldPlayerState: PlayerState): Unit

  @JsName("ReceiveCopyProperties")
  public open fun receiveCopyProperties(newPlayerState: PlayerState): Unit

  @JsName("OnRep_UniqueId")
  public open fun onRepUniqueId(): Unit

  @JsName("OnRep_Score")
  public open fun onRepScore(): Unit

  @JsName("OnRep_PlayerName")
  public open fun onRepPlayerName(): Unit

  @JsName("OnRep_PlayerId")
  public open fun onRepPlayerId(): Unit

  @JsName("OnRep_bIsInactive")
  public open fun onRepbIsInactive(): Unit

  @JsName("OnPawnPrivateDestroyed")
  public open fun onPawnPrivateDestroyed(inActor: Actor): Unit

  @JsName("IsOnlyASpectator")
  public open fun isOnlyASpectator(): Boolean

  @JsName("GetPlayerName")
  public open fun getPlayerName(): String

  @JsName("GetPlayerController")
  public open fun getPlayerController(): PlayerController

  @JsName("GetPingInMilliseconds")
  public open fun getPingInMilliseconds(): Number

  @JsName("GetPawn")
  public open fun getPawn(): Pawn

  @JsName("BP_GetUniqueId")
  public open fun bpGetUniqueId(): UniqueNetIdRepl

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlayerState

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlayerState

    @JsName("C")
    public fun copy(other: UObject): PlayerState

    @JsName("C")
    public fun copy(other: Any): PlayerState
  }
}

public open external class DamageType(
  outer: UObject,
) : UObject {
  @JsName("bCausedByWorld")
  public open var causedByWorld: Boolean

  @JsName("bScaleMomentumByMass")
  public open var scaleMomentumByMass: Boolean

  @JsName("bRadialDamageVelChange")
  public open var radialDamageVelChange: Boolean

  @JsName("DamageImpulse")
  public open var damageImpulse: Number

  @JsName("DestructibleImpulse")
  public open var destructibleImpulse: Number

  @JsName("DestructibleDamageSpreadScale")
  public open var destructibleDamageSpreadScale: Number

  @JsName("DamageFalloff")
  public open var damageFalloff: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DamageType

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DamageType

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DamageType

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DamageType

    @JsName("C")
    public fun copy(other: UObject): DamageType

    @JsName("C")
    public fun copy(other: Any): DamageType
  }
}

public open external class MeshComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("OverrideMaterials")
  public open var overrideMaterials: Array<MaterialInterface>

  @JsName("bEnableMaterialParameterCaching")
  public open var enableMaterialParameterCaching: Boolean

  @JsName("SetVectorParameterValueOnMaterials")
  public open fun setVectorParameterValueOnMaterials(parameterName: String, parameterValue: Vector):
      Unit

  @JsName("SetScalarParameterValueOnMaterials")
  public open fun setScalarParameterValueOnMaterials(parameterName: String, parameterValue: Number):
      Unit

  @JsName("PrestreamTextures")
  public open fun prestreamTextures(
    seconds: Number,
    prioritizeCharacterTextures: Boolean,
    cinematicTextureGroups: Number,
  ): Unit

  @JsName("IsMaterialSlotNameValid")
  public open fun isMaterialSlotNameValid(materialSlotName: String): Boolean

  @JsName("GetMaterialSlotNames")
  public open fun getMaterialSlotNames(): Array<String>

  @JsName("GetMaterials")
  public open fun getMaterials(): Array<MaterialInterface>

  @JsName("GetMaterialIndex")
  public open fun getMaterialIndex(materialSlotName: String): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshComponent

    @JsName("C")
    public fun copy(other: UObject): MeshComponent

    @JsName("C")
    public fun copy(other: Any): MeshComponent
  }
}

public open external class SkeletalMeshEditorData(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshEditorData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshEditorData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshEditorData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshEditorData

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshEditorData

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshEditorData
  }
}

@JsName("EBoneTranslationRetargetingMode")
public external object BoneTranslationRetargetingMode {
  public var Animation: String

  public var Skeleton: String

  public var AnimationScaled: String

  public var AnimationRelative: String

  public var OrientAndScale: String

  @JsName("EBoneTranslationRetargetingMode_MAX")
  public var Max: String
}

public open external class BoneNode {
  @JsName("Name")
  public open var name: String

  @JsName("ParentIndex")
  public open var parentIndex: Number

  @JsName("TranslationRetargetingMode")
  public open var translationRetargetingMode: String

  public open fun clone(): BoneNode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoneNode

    @JsName("C")
    public fun copy(other: Any): BoneNode
  }
}

public open external class VirtualBone {
  @JsName("SourceBoneName")
  public open var sourceBoneName: String

  @JsName("TargetBoneName")
  public open var targetBoneName: String

  @JsName("VirtualBoneName")
  public open var virtualBoneName: String

  public open fun clone(): VirtualBone

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VirtualBone

    @JsName("C")
    public fun copy(other: Any): VirtualBone
  }
}

public open external class SkeletalMeshSocket(
  outer: UObject,
) : UObject {
  @JsName("SocketName")
  public open var socketName: String

  @JsName("BoneName")
  public open var boneName: String

  @JsName("RelativeLocation")
  public open var relativeLocation: Vector

  @JsName("RelativeRotation")
  public open var relativeRotation: Rotator

  @JsName("RelativeScale")
  public open var relativeScale: Vector

  @JsName("bForceAlwaysAnimated")
  public open var forceAlwaysAnimated: Boolean

  @JsName("InitializeSocketFromLocation")
  public open fun initializeSocketFromLocation(
    skelComp: SkeletalMeshComponent,
    worldLocation: Vector,
    worldNormal: Vector,
  ): Unit

  @JsName("GetSocketLocation")
  public open fun getSocketLocation(skelComp: SkeletalMeshComponent): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshSocket

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshSocket

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshSocket

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshSocket

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshSocket

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshSocket
  }
}

public open external class SmartNameContainer {
  public open fun clone(): SmartNameContainer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SmartNameContainer

    @JsName("C")
    public fun copy(other: Any): SmartNameContainer
  }
}

public open external class BoneReference {
  @JsName("BoneName")
  public open var boneName: String

  public open fun clone(): BoneReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoneReference

    @JsName("C")
    public fun copy(other: Any): BoneReference
  }
}

public open external class BlendProfileBoneEntry {
  @JsName("BoneReference")
  public open var boneReference: BoneReference

  @JsName("BlendScale")
  public open var blendScale: Number

  public open fun clone(): BlendProfileBoneEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlendProfileBoneEntry

    @JsName("C")
    public fun copy(other: Any): BlendProfileBoneEntry
  }
}

@JsName("EBlendProfileMode")
public external object BlendProfileMode {
  public var TimeFactor: String

  public var WeightFactor: String

  public var BlendMask: String

  @JsName("EBlendProfileMode_MAX")
  public var Max: String
}

public open external class BlendProfile(
  outer: UObject,
) : UObject {
  @JsName("OwningSkeleton")
  public open var owningSkeleton: Skeleton

  @JsName("ProfileEntries")
  public open var profileEntries: Array<BlendProfileBoneEntry>

  @JsName("Mode")
  public open var mode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlendProfile

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlendProfile

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlendProfile

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlendProfile

    @JsName("C")
    public fun copy(other: UObject): BlendProfile

    @JsName("C")
    public fun copy(other: Any): BlendProfile
  }
}

public open external class AnimSlotGroup {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("SlotNames")
  public open var slotNames: Array<String>

  public open fun clone(): AnimSlotGroup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSlotGroup

    @JsName("C")
    public fun copy(other: Any): AnimSlotGroup
  }
}

public open external class DataAsset(
  outer: UObject,
) : UObject {
  @JsName("NativeClass")
  public open var nativeClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataAsset

    @JsName("C")
    public fun copy(other: UObject): DataAsset

    @JsName("C")
    public fun copy(other: Any): DataAsset
  }
}

@JsName("EConstraintTransform")
public external object ConstraintTransform {
  public var Absolute: String

  public var Relative: String

  @JsName("EConstraintTransform_MAX")
  public var Max: String
}

public open external class RigTransformConstraint {
  @JsName("TranformType")
  public open var tranformType: String

  @JsName("ParentSpace")
  public open var parentSpace: String

  @JsName("Weight")
  public open var weight: Number

  public open fun clone(): RigTransformConstraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigTransformConstraint

    @JsName("C")
    public fun copy(other: Any): RigTransformConstraint
  }
}

public open external class TransformBaseConstraint {
  @JsName("TransformConstraints")
  public open var transformConstraints: Array<RigTransformConstraint>

  public open fun clone(): TransformBaseConstraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TransformBaseConstraint

    @JsName("C")
    public fun copy(other: Any): TransformBaseConstraint
  }
}

public open external class TransformBase {
  @JsName("UNode")
  public open var uNode: String

  @JsName("Constraints")
  public open var constraints: TransformBaseConstraint

  public open fun clone(): TransformBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TransformBase

    @JsName("C")
    public fun copy(other: Any): TransformBase
  }
}

public open external class UNode {
  @JsName("Name")
  public open var name: String

  @JsName("ParentName")
  public open var parentName: String

  @JsName("Transform")
  public open var transform: Transform

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("bAdvanced")
  public open var advanced: Boolean

  public open fun clone(): UNode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UNode

    @JsName("C")
    public fun copy(other: Any): UNode
  }
}

public open external class Rig(
  outer: UObject,
) : UObject {
  @JsName("TransformBases")
  public open var transformBases: Array<TransformBase>

  @JsName("Nodes")
  public open var nodes: Array<UNode>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Rig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Rig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Rig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Rig

    @JsName("C")
    public fun copy(other: UObject): Rig

    @JsName("C")
    public fun copy(other: Any): Rig
  }
}

public open external class NameMapping {
  @JsName("NodeName")
  public open var nodeName: String

  @JsName("BoneName")
  public open var boneName: String

  public open fun clone(): NameMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NameMapping

    @JsName("C")
    public fun copy(other: Any): NameMapping
  }
}

public open external class RigConfiguration {
  @JsName("Rig")
  public open var rig: Rig

  @JsName("BoneMappingTable")
  public open var boneMappingTable: Array<NameMapping>

  public open fun clone(): RigConfiguration

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigConfiguration

    @JsName("C")
    public fun copy(other: Any): RigConfiguration
  }
}

public open external class PreviewAttachedObjectPair {
  @JsName("AttachedObject")
  public open var attachedObject: UObject

  @JsName("UObject")
  public open var uObject: UObject

  @JsName("AttachedTo")
  public open var attachedTo: String

  public open fun clone(): PreviewAttachedObjectPair

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PreviewAttachedObjectPair

    @JsName("C")
    public fun copy(other: Any): PreviewAttachedObjectPair
  }
}

public open external class PreviewAssetAttachContainer {
  @JsName("AttachedObjects")
  public open var attachedObjects: Array<PreviewAttachedObjectPair>

  public open fun clone(): PreviewAssetAttachContainer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PreviewAssetAttachContainer

    @JsName("C")
    public fun copy(other: Any): PreviewAssetAttachContainer
  }
}

@JsName("ERawCurveTrackTypes")
public external object RawCurveTrackTypes {
  @JsName("RCT_Float")
  public var Float: String

  @JsName("RCT_Vector")
  public var Vector: String

  @JsName("RCT_Transform")
  public var Transform: String

  @JsName("RCT_MAX")
  public var Max: String
}

@JsName("ETransformCurveChannel")
public external object TransformCurveChannel {
  public var Position: String

  public var Rotation: String

  public var Scale: String

  public var Invalid: String

  @JsName("ETransformCurveChannel_MAX")
  public var Max: String
}

@JsName("EVectorCurveChannel")
public external object VectorCurveChannel {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  public var Invalid: String

  @JsName("EVectorCurveChannel_MAX")
  public var Max: String
}

@JsName("T$54")
public external interface Object54 {
  @JsName("Identifier")
  public var identifier: AnimationCurveIdentifier

  @JsName("$")
  public var value: String
}

@JsName("T$55")
public external interface Object55 {
  @JsName("InOutIdentifier")
  public var inOutIdentifier: AnimationCurveIdentifier

  @JsName("$")
  public var value: Boolean
}

@JsName("T$57")
public external interface Object57 {
  @JsName("Identifier")
  public var identifier: AnimationCurveIdentifier

  @JsName("$")
  public var value: Boolean
}

public open external class AnimationCurveIdentifier {
  public open fun clone(): AnimationCurveIdentifier

  @JsName("GetName")
  public open fun getName(): Object54

  @JsName("GetTransformChildCurveIdentifier")
  public open fun getTransformChildCurveIdentifier(channel: String, axis: String): Object55

  @JsName("GetType")
  public open fun getType(): Object54

  @JsName("IsValid")
  public open fun isValid(): Object57

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationCurveIdentifier

    @JsName("C")
    public fun copy(other: Any): AnimationCurveIdentifier

    @JsName("GetName")
    public fun getName(identifier: AnimationCurveIdentifier): Object54

    @JsName("GetTransformChildCurveIdentifier")
    public fun getTransformChildCurveIdentifier(
      inOutIdentifier: AnimationCurveIdentifier,
      channel: String,
      axis: String,
    ): Object55

    @JsName("GetType")
    public fun getType(identifier: AnimationCurveIdentifier): Object54

    @JsName("IsValid")
    public fun isValid(identifier: AnimationCurveIdentifier): Object57
  }
}

public open external class AnimGroupInfo {
  @JsName("Name")
  public open var name: String

  @JsName("Color")
  public open var color: LinearColor

  public open fun clone(): AnimGroupInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimGroupInfo

    @JsName("C")
    public fun copy(other: Any): AnimGroupInfo
  }
}

public open external class AnimMetaData(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimMetaData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimMetaData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimMetaData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimMetaData

    @JsName("C")
    public fun copy(other: UObject): AnimMetaData

    @JsName("C")
    public fun copy(other: Any): AnimMetaData
  }
}

public open external class AssetMapping {
  @JsName("SourceAsset")
  public open var sourceAsset: AnimationAsset

  @JsName("TargetAsset")
  public open var targetAsset: AnimationAsset

  public open fun clone(): AssetMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetMapping

    @JsName("C")
    public fun copy(other: Any): AssetMapping
  }
}

public open external class AssetMappingTable(
  outer: UObject,
) : UObject {
  @JsName("MappedAssets")
  public open var mappedAssets: Array<AssetMapping>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetMappingTable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetMappingTable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetMappingTable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetMappingTable

    @JsName("C")
    public fun copy(other: UObject): AssetMappingTable

    @JsName("C")
    public fun copy(other: Any): AssetMappingTable
  }
}

public open external class SmartName {
  @JsName("DisplayName")
  public open var displayName: String

  public open fun clone(): SmartName

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SmartName

    @JsName("C")
    public fun copy(other: Any): SmartName
  }
}

public open external class PoseAssetInfluence {
  @JsName("PoseIndex")
  public open var poseIndex: Number

  @JsName("BoneTransformIndex")
  public open var boneTransformIndex: Number

  public open fun clone(): PoseAssetInfluence

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseAssetInfluence

    @JsName("C")
    public fun copy(other: Any): PoseAssetInfluence
  }
}

public open external class PoseAssetInfluences {
  @JsName("Influences")
  public open var influences: Array<PoseAssetInfluence>

  public open fun clone(): PoseAssetInfluences

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseAssetInfluences

    @JsName("C")
    public fun copy(other: Any): PoseAssetInfluences
  }
}

public open external class PoseData {
  @JsName("SourceLocalSpacePose")
  public open var sourceLocalSpacePose: Array<Transform>

  @JsName("SourceCurveData")
  public open var sourceCurveData: Array<Number>

  @JsName("LocalSpacePose")
  public open var localSpacePose: Array<Transform>

  @JsName("CurveData")
  public open var curveData: Array<Number>

  public open fun clone(): PoseData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseData

    @JsName("C")
    public fun copy(other: Any): PoseData
  }
}

public open external class AnimCurveBase {
  @JsName("LastObservedName")
  public open var lastObservedName: String

  @JsName("Name")
  public open var name: SmartName

  @JsName("Color")
  public open var color: LinearColor

  @JsName("CurveTypeFlags")
  public open var curveTypeFlags: Number

  public open fun clone(): AnimCurveBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimCurveBase

    @JsName("C")
    public fun copy(other: Any): AnimCurveBase
  }
}

public open external class PoseDataContainer {
  @JsName("PoseNames")
  public open var poseNames: Array<SmartName>

  @JsName("Tracks")
  public open var tracks: Array<String>

  @JsName("TrackBoneIndices")
  public open var trackBoneIndices: Array<Number>

  @JsName("TrackPoseInfluenceIndices")
  public open var trackPoseInfluenceIndices: Array<PoseAssetInfluences>

  @JsName("Poses")
  public open var poses: Array<PoseData>

  @JsName("Curves")
  public open var curves: Array<AnimCurveBase>

  public open fun clone(): PoseDataContainer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseDataContainer

    @JsName("C")
    public fun copy(other: Any): PoseDataContainer
  }
}

public open external class AnimCompositeBase(
  outer: UObject,
) : AnimSequenceBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCompositeBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCompositeBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCompositeBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCompositeBase

    @JsName("C")
    public fun copy(other: UObject): AnimCompositeBase

    @JsName("C")
    public fun copy(other: Any): AnimCompositeBase
  }
}

@JsName("EMontageBlendMode")
public external object MontageBlendMode {
  public var Standard: String

  public var Inertialization: String

  @JsName("EMontageBlendMode_MAX")
  public var Max: String
}

public open external class CurveFloat(
  outer: UObject,
) : CurveBase {
  @JsName("FloatCurve")
  public open var floatCurve: RichCurve

  @JsName("bIsEventCurve")
  public open var isEventCurve: Boolean

  @JsName("GetFloatValue")
  public open fun getFloatValue(inTime: Number): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveFloat

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveFloat

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveFloat

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveFloat

    @JsName("C")
    public fun copy(other: UObject): CurveFloat

    @JsName("C")
    public fun copy(other: Any): CurveFloat
  }
}

@JsName("EAlphaBlendOption")
public external object AlphaBlendOption {
  public var Linear: String

  public var Cubic: String

  public var HermiteCubic: String

  public var Sinusoidal: String

  public var QuadraticInOut: String

  public var CubicInOut: String

  public var QuarticInOut: String

  public var QuinticInOut: String

  public var CircularIn: String

  public var CircularOut: String

  public var CircularInOut: String

  public var ExpIn: String

  public var ExpOut: String

  public var ExpInOut: String

  public var Custom: String

  @JsName("EAlphaBlendOption_MAX")
  public var Max: String
}

public open external class AlphaBlend {
  @JsName("CustomCurve")
  public open var customCurve: CurveFloat

  @JsName("BlendTime")
  public open var blendTime: Number

  @JsName("BlendOption")
  public open var blendOption: String

  public open fun clone(): AlphaBlend

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AlphaBlend

    @JsName("C")
    public fun copy(other: Any): AlphaBlend
  }
}

public open external class AnimSyncMarker {
  @JsName("MarkerName")
  public open var markerName: String

  @JsName("Time")
  public open var time: Number

  @JsName("TrackIndex")
  public open var trackIndex: Number

  @JsName("Guid")
  public open var guid: Guid

  public open fun clone(): AnimSyncMarker

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSyncMarker

    @JsName("C")
    public fun copy(other: Any): AnimSyncMarker
  }
}

public open external class MarkerSyncData {
  @JsName("AuthoredSyncMarkers")
  public open var authoredSyncMarkers: Array<AnimSyncMarker>

  public open fun clone(): MarkerSyncData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MarkerSyncData

    @JsName("C")
    public fun copy(other: Any): MarkerSyncData
  }
}

public open external class CompositeSection : AnimLinkableElement {
  @JsName("SectionName")
  public open var sectionName: String

  @JsName("StartTime")
  public open var startTime: Number

  @JsName("NextSectionName")
  public open var nextSectionName: String

  @JsName("MetaData")
  public open var metaData: Array<AnimMetaData>

  public override fun clone(): CompositeSection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CompositeSection

    @JsName("C")
    public fun copy(other: Any): CompositeSection
  }
}

public open external class AnimSegment {
  @JsName("AnimReference")
  public open var animReference: AnimSequenceBase

  @JsName("StartPos")
  public open var startPos: Number

  @JsName("AnimStartTime")
  public open var animStartTime: Number

  @JsName("AnimEndTime")
  public open var animEndTime: Number

  @JsName("AnimPlayRate")
  public open var animPlayRate: Number

  @JsName("LoopingCount")
  public open var loopingCount: Number

  public open fun clone(): AnimSegment

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSegment

    @JsName("C")
    public fun copy(other: Any): AnimSegment
  }
}

public open external class AnimTrack {
  @JsName("AnimSegments")
  public open var animSegments: Array<AnimSegment>

  public open fun clone(): AnimTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimTrack

    @JsName("C")
    public fun copy(other: Any): AnimTrack
  }
}

public open external class SlotAnimationTrack {
  @JsName("SlotName")
  public open var slotName: String

  @JsName("AnimTrack")
  public open var animTrack: AnimTrack

  public open fun clone(): SlotAnimationTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlotAnimationTrack

    @JsName("C")
    public fun copy(other: Any): SlotAnimationTrack
  }
}

public open external class BranchingPoint : AnimLinkableElement {
  @JsName("EventName")
  public open var eventName: String

  @JsName("DisplayTime")
  public open var displayTime: Number

  @JsName("TriggerTimeOffset")
  public open var triggerTimeOffset: Number

  public override fun clone(): BranchingPoint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BranchingPoint

    @JsName("C")
    public fun copy(other: Any): BranchingPoint
  }
}

@JsName("ERootMotionRootLock")
public external object RootMotionRootLock {
  public var RefPose: String

  public var AnimFirstFrame: String

  public var Zero: String

  @JsName("ERootMotionRootLock_MAX")
  public var Max: String
}

@JsName("EAnimNotifyEventType")
public external object AnimNotifyEventType {
  public var Begin: String

  public var End: String

  @JsName("EAnimNotifyEventType_MAX")
  public var Max: String
}

public open external class BranchingPointMarker {
  @JsName("NotifyIndex")
  public open var notifyIndex: Number

  @JsName("TriggerTime")
  public open var triggerTime: Number

  @JsName("NotifyEventType")
  public open var notifyEventType: String

  public open fun clone(): BranchingPointMarker

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BranchingPointMarker

    @JsName("C")
    public fun copy(other: Any): BranchingPointMarker
  }
}

public open external class TimeStretchCurveMarker {
  @JsName("Time")
  public open var time: Number

  @JsName("Alpha")
  public open var alpha: Number

  public open fun clone(): TimeStretchCurveMarker

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TimeStretchCurveMarker

    @JsName("C")
    public fun copy(other: Any): TimeStretchCurveMarker
  }
}

public open external class TimeStretchCurve {
  @JsName("SamplingRate")
  public open var samplingRate: Number

  @JsName("CurveValueMinPrecision")
  public open var curveValueMinPrecision: Number

  @JsName("Markers")
  public open var markers: Array<TimeStretchCurveMarker>

  @JsName("Sum_dT_i_by_C_i")
  public open var sumdTibyCi: Number

  public open fun clone(): TimeStretchCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TimeStretchCurve

    @JsName("C")
    public fun copy(other: Any): TimeStretchCurve
  }
}

public open external class AlphaBlendArgs {
  @JsName("CustomCurve")
  public open var customCurve: CurveFloat

  @JsName("BlendTime")
  public open var blendTime: Number

  @JsName("BlendOption")
  public open var blendOption: String

  public open fun clone(): AlphaBlendArgs

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AlphaBlendArgs

    @JsName("C")
    public fun copy(other: Any): AlphaBlendArgs
  }
}

public open external class MontageBlendSettings {
  @JsName("BlendProfile")
  public open var blendProfile: BlendProfile

  @JsName("Blend")
  public open var blend: AlphaBlendArgs

  @JsName("BlendMode")
  public open var blendMode: String

  public open fun clone(): MontageBlendSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MontageBlendSettings

    @JsName("C")
    public fun copy(other: Any): MontageBlendSettings
  }
}

public open external class AnimMontage(
  outer: UObject,
) : AnimCompositeBase {
  @JsName("BlendModeIn")
  public open var blendModeIn: String

  @JsName("BlendModeOut")
  public open var blendModeOut: String

  @JsName("BlendIn")
  public open var blendIn: AlphaBlend

  @JsName("BlendInTime")
  public open var blendInTime: Number

  @JsName("BlendOut")
  public open var blendOut: AlphaBlend

  @JsName("BlendOutTime")
  public open var blendOutTime: Number

  @JsName("BlendOutTriggerTime")
  public open var blendOutTriggerTime: Number

  @JsName("SyncGroup")
  public open var syncGroup: String

  @JsName("SyncSlotIndex")
  public open var syncSlotIndex: Number

  @JsName("MarkerData")
  public open var markerData: MarkerSyncData

  @JsName("CompositeSections")
  public open var compositeSections: Array<CompositeSection>

  @JsName("SlotAnimTracks")
  public open var slotAnimTracks: Array<SlotAnimationTrack>

  @JsName("BranchingPoints")
  public open var branchingPoints: Array<BranchingPoint>

  @JsName("bEnableRootMotionTranslation")
  public open var enableRootMotionTranslation: Boolean

  @JsName("bEnableRootMotionRotation")
  public open var enableRootMotionRotation: Boolean

  @JsName("bEnableAutoBlendOut")
  public open var enableAutoBlendOut: Boolean

  @JsName("BlendProfileIn")
  public open var blendProfileIn: BlendProfile

  @JsName("BlendProfileOut")
  public open var blendProfileOut: BlendProfile

  @JsName("RootMotionRootLock")
  public open var rootMotionRootLock: String

  @JsName("PreviewBasePose")
  public open var previewBasePose: AnimSequence

  @JsName("BranchingPointMarkers")
  public open var branchingPointMarkers: Array<BranchingPointMarker>

  @JsName("BranchingPointStateNotifyIndices")
  public open var branchingPointStateNotifyIndices: Array<Number>

  @JsName("TimeStretchCurve")
  public open var timeStretchCurve: TimeStretchCurve

  @JsName("TimeStretchCurveName")
  public open var timeStretchCurveName: String

  @JsName("IsValidSectionName")
  public open fun isValidSectionName(inSectionName: String): Boolean

  @JsName("GetDefaultBlendOutTime")
  public open fun getDefaultBlendOutTime(): Number

  @JsName("GetDefaultBlendInTime")
  public open fun getDefaultBlendInTime(): Number

  @JsName("GetBlendOutArgs")
  public open fun getBlendOutArgs(): AlphaBlendArgs

  @JsName("GetBlendInArgs")
  public open fun getBlendInArgs(): AlphaBlendArgs

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimMontage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimMontage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimMontage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimMontage

    @JsName("CreateSlotAnimationAsDynamicMontage_WithBlendSettings")
    public fun createSlotAnimationAsDynamicMontageWithBlendSettings(
      asset: AnimSequenceBase,
      slotNodeName: String,
      blendInSettings: MontageBlendSettings,
      blendOutSettings: MontageBlendSettings,
      inPlayRate: Number,
      loopCount: Number,
      inBlendOutTriggerTime: Number,
    ): AnimMontage

    @JsName("C")
    public fun copy(other: UObject): AnimMontage

    @JsName("C")
    public fun copy(other: Any): AnimMontage
  }
}

@JsName("EAnimLinkMethod")
public external object AnimLinkMethod {
  public var Absolute: String

  public var Relative: String

  public var Proportional: String

  @JsName("EAnimLinkMethod_MAX")
  public var Max: String
}

public open external class AnimLinkableElement {
  @JsName("LinkedMontage")
  public open var linkedMontage: AnimMontage

  @JsName("SlotIndex")
  public open var slotIndex: Number

  @JsName("SegmentIndex")
  public open var segmentIndex: Number

  @JsName("LinkMethod")
  public open var linkMethod: String

  @JsName("CachedLinkMethod")
  public open var cachedLinkMethod: String

  @JsName("SegmentBeginTime")
  public open var segmentBeginTime: Number

  @JsName("SegmentLength")
  public open var segmentLength: Number

  @JsName("LinkValue")
  public open var linkValue: Number

  @JsName("LinkedSequence")
  public open var linkedSequence: AnimSequenceBase

  public open fun clone(): AnimLinkableElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimLinkableElement

    @JsName("C")
    public fun copy(other: Any): AnimLinkableElement
  }
}

public open external class ScriptStruct(
  outer: UObject,
) : Struct {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScriptStruct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScriptStruct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScriptStruct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScriptStruct

    @JsName("C")
    public fun copy(other: UObject): ScriptStruct

    @JsName("C")
    public fun copy(other: Any): ScriptStruct
  }
}

public open external class TableRowBase {
  public open fun clone(): TableRowBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TableRowBase

    @JsName("C")
    public fun copy(other: Any): TableRowBase
  }
}

@JsName("T$58")
public external interface Object58 {
  @JsName("OutRow")
  public var outRow: TableRowBase

  @JsName("$")
  public var value: Boolean
}

@JsName("T$59")
public external interface OutRowNamesProvider {
  @JsName("OutRowNames")
  public var outRowNames: Array<String>
}

public open external class DataTable(
  outer: UObject,
) : UObject {
  @JsName("RowStruct")
  public open var rowStruct: ScriptStruct

  @JsName("bStripFromClientBuilds")
  public open var stripFromClientBuilds: Boolean

  @JsName("bIgnoreExtraFields")
  public open var ignoreExtraFields: Boolean

  @JsName("bIgnoreMissingFields")
  public open var ignoreMissingFields: Boolean

  @JsName("ImportKeyField")
  public open var importKeyField: String

  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("ImportPath")
  public open var importPath: String

  @JsName("RowStructName")
  public open var rowStructName: String

  @JsName("RowsSerializedWithTags")
  public open var rowsSerializedWithTags: Array<Number>

  @JsName("TemporarilyReferencedObjects")
  public open var temporarilyReferencedObjects: Any

  @JsName("GetDataTableAsJSON")
  public open fun getDataTableAsJson(inDtExportFlags: Number): String

  @JsName("DoesDataTableRowExist")
  public open fun doesDataTableRowExist(rowName: String): Boolean

  @JsName("FillDataTableFromCSVFile")
  public open fun fillDataTableFromCsvFile(csvFilePath: String): Boolean

  @JsName("FillDataTableFromCSVString")
  public open fun fillDataTableFromCsvString(csvString: String): Boolean

  @JsName("FillDataTableFromJSONFile")
  public open fun fillDataTableFromJsonFile(jsonFilePath: String, importRowStruct: ScriptStruct):
      Boolean

  @JsName("FillDataTableFromJSONString")
  public open fun fillDataTableFromJsonString(jsonString: String): Boolean

  @JsName("GetDataTableColumnAsString")
  public open fun getDataTableColumnAsString(propertyName: String): Array<String>

  @JsName("GetDataTableRowFromName")
  public open fun getDataTableRowFromName(rowName: String, outRow: TableRowBase): Object58

  @JsName("GetDataTableRowNames")
  public open fun getDataTableRowNames(outRowNames: Array<String>): OutRowNamesProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataTable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataTable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataTable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataTable

    @JsName("C")
    public fun copy(other: UObject): DataTable

    @JsName("C")
    public fun copy(other: Any): DataTable

    @JsName("GetDataTableAsJSON")
    public fun getDataTableAsJson(inDataTable: DataTable, inDtExportFlags: Number): String

    @JsName("DoesDataTableRowExist")
    public fun doesDataTableRowExist(table: DataTable, rowName: String): Boolean

    @JsName("FillDataTableFromCSVFile")
    public fun fillDataTableFromCsvFile(dataTable: DataTable, csvFilePath: String): Boolean

    @JsName("FillDataTableFromCSVString")
    public fun fillDataTableFromCsvString(dataTable: DataTable, csvString: String): Boolean

    @JsName("FillDataTableFromJSONFile")
    public fun fillDataTableFromJsonFile(
      dataTable: DataTable,
      jsonFilePath: String,
      importRowStruct: ScriptStruct,
    ): Boolean

    @JsName("FillDataTableFromJSONString")
    public fun fillDataTableFromJsonString(dataTable: DataTable, jsonString: String): Boolean

    @JsName("GetDataTableColumnAsString")
    public fun getDataTableColumnAsString(dataTable: DataTable, propertyName: String): Array<String>

    @JsName("GetDataTableRowFromName")
    public fun getDataTableRowFromName(
      table: DataTable,
      rowName: String,
      outRow: TableRowBase,
    ): Object58

    @JsName("GetDataTableRowNames")
    public fun getDataTableRowNames(table: DataTable, outRowNames: Array<String>):
        OutRowNamesProvider
  }
}

@JsName("EMirrorFindReplaceMethod")
public external object MirrorFindReplaceMethod {
  public var Prefix: String

  public var Suffix: String

  public var RegularExpression: String

  @JsName("EMirrorFindReplaceMethod_MAX")
  public var Max: String
}

public open external class MirrorFindReplaceExpression {
  @JsName("FindExpression")
  public open var findExpression: String

  @JsName("ReplaceExpression")
  public open var replaceExpression: String

  @JsName("FindReplaceMethod")
  public open var findReplaceMethod: String

  public open fun clone(): MirrorFindReplaceExpression

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MirrorFindReplaceExpression

    @JsName("C")
    public fun copy(other: Any): MirrorFindReplaceExpression
  }
}

public open external class MirrorDataTable(
  outer: UObject,
) : DataTable {
  @JsName("MirrorFindReplaceExpressions")
  public open var mirrorFindReplaceExpressions: Array<MirrorFindReplaceExpression>

  @JsName("MirrorAxis")
  public open var mirrorAxis: String

  @JsName("Skeleton")
  public open var skeleton: Skeleton

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MirrorDataTable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MirrorDataTable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MirrorDataTable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MirrorDataTable

    @JsName("C")
    public fun copy(other: UObject): MirrorDataTable

    @JsName("C")
    public fun copy(other: Any): MirrorDataTable
  }
}

@JsName("ERootMotionMode")
public external object RootMotionMode {
  public var NoRootMotionExtraction: String

  public var IgnoreRootMotion: String

  public var RootMotionFromEverything: String

  public var RootMotionFromMontagesOnly: String

  @JsName("ERootMotionMode_MAX")
  public var Max: String
}

public open external class AnimNotifyQueue {
  @JsName("AnimNotifies")
  public open var animNotifies: Array<AnimNotifyEventReference>

  @JsName("UnfilteredMontageAnimNotifies")
  public open var unfilteredMontageAnimNotifies: Any

  public open fun clone(): AnimNotifyQueue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNotifyQueue

    @JsName("C")
    public fun copy(other: Any): AnimNotifyQueue
  }
}

public open external class AnimNotifyState(
  outer: UObject,
) : UObject {
  @JsName("NotifyColor")
  public open var notifyColor: Color

  @JsName("bShouldFireInEditor")
  public open var shouldFireInEditor: Boolean

  @JsName("Received_NotifyTick")
  public open fun receivedNotifyTick(
    meshComp: SkeletalMeshComponent,
    animation: AnimSequenceBase,
    frameDeltaTime: Number,
    eventReference: AnimNotifyEventReference,
  ): Boolean

  @JsName("Received_NotifyEnd")
  public open fun receivedNotifyEnd(
    meshComp: SkeletalMeshComponent,
    animation: AnimSequenceBase,
    eventReference: AnimNotifyEventReference,
  ): Boolean

  @JsName("Received_NotifyBegin")
  public open fun receivedNotifyBegin(
    meshComp: SkeletalMeshComponent,
    animation: AnimSequenceBase,
    totalDuration: Number,
    eventReference: AnimNotifyEventReference,
  ): Boolean

  @JsName("GetNotifyName")
  public open fun getNotifyName(): String

  @JsName("GetDefaultTriggerWeightThreshold")
  public open fun getDefaultTriggerWeightThreshold(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotifyState

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotifyState

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotifyState

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotifyState

    @JsName("C")
    public fun copy(other: UObject): AnimNotifyState

    @JsName("C")
    public fun copy(other: Any): AnimNotifyState
  }
}

public open external class PoseSnapshot {
  @JsName("LocalTransforms")
  public open var localTransforms: Array<Transform>

  @JsName("BoneNames")
  public open var boneNames: Array<String>

  @JsName("SkeletalMeshName")
  public open var skeletalMeshName: String

  @JsName("SnapshotName")
  public open var snapshotName: String

  @JsName("bIsValid")
  public open var isValid: Boolean

  public open fun clone(): PoseSnapshot

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseSnapshot

    @JsName("C")
    public fun copy(other: Any): PoseSnapshot
  }
}

@JsName("ETeleportType")
public external object TeleportType {
  public var None: String

  public var TeleportPhysics: String

  public var ResetPhysics: String

  @JsName("ETeleportType_MAX")
  public var Max: String
}

@JsName("EMontagePlayReturnType")
public external object MontagePlayReturnType {
  public var MontageLength: String

  public var Duration: String

  @JsName("EMontagePlayReturnType_MAX")
  public var Max: String
}

public open external class MarkerSyncAnimPosition {
  @JsName("PreviousMarkerName")
  public open var previousMarkerName: String

  @JsName("NextMarkerName")
  public open var nextMarkerName: String

  @JsName("PositionBetweenMarkers")
  public open var positionBetweenMarkers: Number

  public open fun clone(): MarkerSyncAnimPosition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MarkerSyncAnimPosition

    @JsName("C")
    public fun copy(other: Any): MarkerSyncAnimPosition
  }
}

@JsName("EAnimCurveType")
public external object AnimCurveType {
  public var AttributeCurve: String

  public var MaterialCurve: String

  public var MorphTargetCurve: String

  public var MaxAnimCurveType: String

  @JsName("EAnimCurveType_MAX")
  public var Max: String
}

public open external class CachedAnimStateData {
  @JsName("StateMachineName")
  public open var stateMachineName: String

  @JsName("StateName")
  public open var stateName: String

  public open fun clone(): CachedAnimStateData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CachedAnimStateData

    @JsName("C")
    public fun copy(other: Any): CachedAnimStateData
  }
}

@JsName("EAnimNodeReferenceConversionResult")
public external object AnimNodeReferenceConversionResult {
  public var Succeeded: String

  public var Failed: String

  @JsName("EAnimNodeReferenceConversionResult_MAX")
  public var Max: String
}

public open external class SkeletalControlReference : AnimNodeReference {
  public override fun clone(): SkeletalControlReference

  @JsName("GetAlpha")
  public open fun getAlpha(): Number

  @JsName("SetAlpha")
  public open fun setAlpha(alpha: Number): SkeletalControlReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalControlReference

    @JsName("C")
    public fun copy(other: Any): SkeletalControlReference

    @JsName("GetAlpha")
    public fun getAlpha(skeletalControl: SkeletalControlReference): Number

    @JsName("SetAlpha")
    public fun setAlpha(skeletalControl: SkeletalControlReference, alpha: Number):
        SkeletalControlReference
  }
}

@JsName("T$61")
public external interface Object61 {
  @JsName("SequenceBase")
  public var sequenceBase: AnimSequenceBase

  @JsName("$")
  public var value: SequencePlayerReference
}

public open external class SequencePlayerReference : AnimNodeReference {
  public override fun clone(): SequencePlayerReference

  @JsName("GetAccumulatedTime")
  public open fun getAccumulatedTime(): Number

  @JsName("GetLoopAnimation")
  public open fun getLoopAnimation(): Boolean

  @JsName("GetPlayRate")
  public open fun getPlayRate(): Number

  @JsName("GetSequence")
  public open fun getSequence(sequenceBase: AnimSequenceBase): Object61

  @JsName("GetSequencePure")
  public open fun getSequencePure(): AnimSequenceBase

  @JsName("GetStartPosition")
  public open fun getStartPosition(): Number

  @JsName("SetAccumulatedTime")
  public open fun setAccumulatedTime(time: Number): SequencePlayerReference

  @JsName("SetPlayRate")
  public open fun setPlayRate(playRate: Number): SequencePlayerReference

  @JsName("SetSequence")
  public open fun setSequence(sequence: AnimSequenceBase): SequencePlayerReference

  @JsName("SetStartPosition")
  public open fun setStartPosition(startPosition: Number): SequencePlayerReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SequencePlayerReference

    @JsName("C")
    public fun copy(other: Any): SequencePlayerReference

    @JsName("GetAccumulatedTime")
    public fun getAccumulatedTime(sequencePlayer: SequencePlayerReference): Number

    @JsName("GetLoopAnimation")
    public fun getLoopAnimation(sequencePlayer: SequencePlayerReference): Boolean

    @JsName("GetPlayRate")
    public fun getPlayRate(sequencePlayer: SequencePlayerReference): Number

    @JsName("GetSequence")
    public fun getSequence(sequencePlayer: SequencePlayerReference, sequenceBase: AnimSequenceBase):
        Object61

    @JsName("GetSequencePure")
    public fun getSequencePure(sequencePlayer: SequencePlayerReference): AnimSequenceBase

    @JsName("GetStartPosition")
    public fun getStartPosition(sequencePlayer: SequencePlayerReference): Number

    @JsName("SetAccumulatedTime")
    public fun setAccumulatedTime(sequencePlayer: SequencePlayerReference, time: Number):
        SequencePlayerReference

    @JsName("SetPlayRate")
    public fun setPlayRate(sequencePlayer: SequencePlayerReference, playRate: Number):
        SequencePlayerReference

    @JsName("SetSequence")
    public fun setSequence(sequencePlayer: SequencePlayerReference, sequence: AnimSequenceBase):
        SequencePlayerReference

    @JsName("SetStartPosition")
    public fun setStartPosition(sequencePlayer: SequencePlayerReference, startPosition: Number):
        SequencePlayerReference
  }
}

public open external class SequenceEvaluatorReference : AnimNodeReference {
  public override fun clone(): SequenceEvaluatorReference

  @JsName("GetAccumulatedTime")
  public open fun getAccumulatedTime(): Number

  @JsName("GetSequence")
  public open fun getSequence(): AnimSequenceBase

  @JsName("SetExplicitTime")
  public open fun setExplicitTime(time: Number): SequenceEvaluatorReference

  @JsName("SetSequence")
  public open fun setSequence(sequence: AnimSequenceBase): SequenceEvaluatorReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SequenceEvaluatorReference

    @JsName("C")
    public fun copy(other: Any): SequenceEvaluatorReference

    @JsName("GetAccumulatedTime")
    public fun getAccumulatedTime(sequenceEvaluator: SequenceEvaluatorReference): Number

    @JsName("GetSequence")
    public fun getSequence(sequenceEvaluator: SequenceEvaluatorReference): AnimSequenceBase

    @JsName("SetExplicitTime")
    public fun setExplicitTime(sequenceEvaluator: SequenceEvaluatorReference, time: Number):
        SequenceEvaluatorReference

    @JsName("SetSequence")
    public fun setSequence(sequenceEvaluator: SequenceEvaluatorReference,
        sequence: AnimSequenceBase): SequenceEvaluatorReference
  }
}

public open external class LinkedAnimGraphReference : AnimNodeReference {
  public override fun clone(): LinkedAnimGraphReference

  @JsName("GetLinkedAnimInstance")
  public open fun getLinkedAnimInstance(): AnimInstance

  @JsName("HasLinkedAnimInstance")
  public open fun hasLinkedAnimInstance(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LinkedAnimGraphReference

    @JsName("C")
    public fun copy(other: Any): LinkedAnimGraphReference

    @JsName("GetLinkedAnimInstance")
    public fun getLinkedAnimInstance(uNode: LinkedAnimGraphReference): AnimInstance

    @JsName("HasLinkedAnimInstance")
    public fun hasLinkedAnimInstance(uNode: LinkedAnimGraphReference): Boolean
  }
}

public open external class AnimationStateResultReference : AnimNodeReference {
  public override fun clone(): AnimationStateResultReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationStateResultReference

    @JsName("C")
    public fun copy(other: Any): AnimationStateResultReference
  }
}

@JsName("T$62")
public external interface Object62 {
  @JsName("Result")
  public var result: String

  @JsName("$")
  public var value: SkeletalControlReference
}

@JsName("T$63")
public external interface Object63 {
  @JsName("SkeletalControl")
  public var skeletalControl: SkeletalControlReference

  @JsName("Result")
  public var result: Boolean
}

@JsName("T$64")
public external interface Object64 {
  @JsName("Result")
  public var result: String

  @JsName("$")
  public var value: SequencePlayerReference
}

@JsName("T$65")
public external interface Object65 {
  @JsName("SequencePlayer")
  public var sequencePlayer: SequencePlayerReference

  @JsName("Result")
  public var result: Boolean
}

@JsName("T$66")
public external interface Object66 {
  @JsName("Result")
  public var result: String

  @JsName("$")
  public var value: SequenceEvaluatorReference
}

@JsName("T$67")
public external interface Object67 {
  @JsName("SequenceEvaluator")
  public var sequenceEvaluator: SequenceEvaluatorReference

  @JsName("Result")
  public var result: Boolean
}

@JsName("T$68")
public external interface Object68 {
  @JsName("Result")
  public var result: String

  @JsName("$")
  public var value: LinkedAnimGraphReference
}

@JsName("T$69")
public external interface Object69 {
  @JsName("LinkedAnimGraph")
  public var linkedAnimGraph: LinkedAnimGraphReference

  @JsName("Result")
  public var result: Boolean
}

@JsName("T$70")
public external interface Object70 {
  @JsName("AnimationState")
  public var animationState: AnimationStateResultReference

  @JsName("Result")
  public var result: String
}

@JsName("T$71")
public external interface Object71 {
  @JsName("AnimationState")
  public var animationState: AnimationStateResultReference

  @JsName("Result")
  public var result: Boolean
}

public open external class AnimNodeReference {
  public open fun clone(): AnimNodeReference

  @JsName("ConvertToSkeletalControl")
  public open fun convertToSkeletalControl(result: String): Object62

  @JsName("ConvertToSkeletalControlPure")
  public open fun convertToSkeletalControlPure(skeletalControl: SkeletalControlReference,
      result: Boolean): Object63

  @JsName("ConvertToSequencePlayer")
  public open fun convertToSequencePlayer(result: String): Object64

  @JsName("ConvertToSequencePlayerPure")
  public open fun convertToSequencePlayerPure(sequencePlayer: SequencePlayerReference,
      result: Boolean): Object65

  @JsName("ConvertToSequenceEvaluator")
  public open fun convertToSequenceEvaluator(result: String): Object66

  @JsName("ConvertToSequenceEvaluatorPure")
  public open fun convertToSequenceEvaluatorPure(sequenceEvaluator: SequenceEvaluatorReference,
      result: Boolean): Object67

  @JsName("ConvertToLinkedAnimGraph")
  public open fun convertToLinkedAnimGraph(result: String): Object68

  @JsName("ConvertToLinkedAnimGraphPure")
  public open fun convertToLinkedAnimGraphPure(linkedAnimGraph: LinkedAnimGraphReference,
      result: Boolean): Object69

  @JsName("ConvertToAnimationStateResult")
  public open fun convertToAnimationStateResult(animationState: AnimationStateResultReference,
      result: String): Object70

  @JsName("ConvertToAnimationStateResultPure")
  public open fun convertToAnimationStateResultPure(animationState: AnimationStateResultReference,
      result: Boolean): Object71

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeReference

    @JsName("C")
    public fun copy(other: Any): AnimNodeReference

    @JsName("ConvertToSkeletalControl")
    public fun convertToSkeletalControl(uNode: AnimNodeReference, result: String): Object62

    @JsName("ConvertToSkeletalControlPure")
    public fun convertToSkeletalControlPure(
      uNode: AnimNodeReference,
      skeletalControl: SkeletalControlReference,
      result: Boolean,
    ): Object63

    @JsName("ConvertToSequencePlayer")
    public fun convertToSequencePlayer(uNode: AnimNodeReference, result: String): Object64

    @JsName("ConvertToSequencePlayerPure")
    public fun convertToSequencePlayerPure(
      uNode: AnimNodeReference,
      sequencePlayer: SequencePlayerReference,
      result: Boolean,
    ): Object65

    @JsName("ConvertToSequenceEvaluator")
    public fun convertToSequenceEvaluator(uNode: AnimNodeReference, result: String): Object66

    @JsName("ConvertToSequenceEvaluatorPure")
    public fun convertToSequenceEvaluatorPure(
      uNode: AnimNodeReference,
      sequenceEvaluator: SequenceEvaluatorReference,
      result: Boolean,
    ): Object67

    @JsName("ConvertToLinkedAnimGraph")
    public fun convertToLinkedAnimGraph(uNode: AnimNodeReference, result: String): Object68

    @JsName("ConvertToLinkedAnimGraphPure")
    public fun convertToLinkedAnimGraphPure(
      uNode: AnimNodeReference,
      linkedAnimGraph: LinkedAnimGraphReference,
      result: Boolean,
    ): Object69

    @JsName("ConvertToAnimationStateResult")
    public fun convertToAnimationStateResult(
      uNode: AnimNodeReference,
      animationState: AnimationStateResultReference,
      result: String,
    ): Object70

    @JsName("ConvertToAnimationStateResultPure")
    public fun convertToAnimationStateResultPure(
      uNode: AnimNodeReference,
      animationState: AnimationStateResultReference,
      result: Boolean,
    ): Object71
  }
}

@JsName("T$72")
public external interface SnapshotProvider {
  @JsName("Snapshot")
  public var snapshot: PoseSnapshot
}

@JsName("T$73")
public external interface Object73 {
  @JsName("OutMarkerTime")
  public var outMarkerTime: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$74")
public external interface OutLinkedInstancesProvider {
  @JsName("OutLinkedInstances")
  public var outLinkedInstances: Array<AnimInstance>
}

@JsName("T$76")
public external interface OutNamesProvider {
  @JsName("OutNames")
  public var outNames: Array<String>
}

public open external class AnimInstance(
  outer: UObject,
) : UObject {
  @JsName("CurrentSkeleton")
  public open var currentSkeleton: Skeleton

  @JsName("RootMotionMode")
  public open var rootMotionMode: String

  @JsName("bUseMultiThreadedAnimationUpdate")
  public open var useMultiThreadedAnimationUpdate: Boolean

  @JsName("bUsingCopyPoseFromMesh")
  public open var usingCopyPoseFromMesh: Boolean

  @JsName("bReceiveNotifiesFromLinkedInstances")
  public open var receiveNotifiesFromLinkedInstances: Boolean

  @JsName("bPropagateNotifiesToLinkedInstances")
  public open var propagateNotifiesToLinkedInstances: Boolean

  @JsName("bUseMainInstanceMontageEvaluationData")
  public open var useMainInstanceMontageEvaluationData: Boolean

  @JsName("bQueueMontageEvents")
  public open var queueMontageEvents: Boolean

  @JsName("OnMontageBlendingOut")
  public open var onMontageBlendingOut: UnrealEngineMulticastDelegate<(Montage: AnimMontage,
      bInterrupted: Boolean) -> Unit>

  @JsName("OnMontageStarted")
  public open var onMontageStarted: UnrealEngineMulticastDelegate<(Montage: AnimMontage) -> Unit>

  @JsName("OnMontageEnded")
  public open var onMontageEnded: UnrealEngineMulticastDelegate<(Montage: AnimMontage,
      bInterrupted: Boolean) -> Unit>

  @JsName("OnAllMontageInstancesEnded")
  public open var onAllMontageInstancesEnded: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("PostCompileValidationClassName")
  public open var postCompileValidationClassName: SoftClassPath

  @JsName("NotifyQueue")
  public open var notifyQueue: AnimNotifyQueue

  @JsName("ActiveAnimNotifyState")
  public open var activeAnimNotifyState: Array<AnimNotifyEvent>

  @JsName("ActiveAnimNotifyEventReference")
  public open var activeAnimNotifyEventReference: Array<AnimNotifyEventReference>

  @JsName("WasAnimNotifyTriggeredInStateMachine")
  public open fun wasAnimNotifyTriggeredInStateMachine(machineIndex: Number,
      animNotifyType: UnrealEngineClass): Boolean

  @JsName("WasAnimNotifyTriggeredInSourceState")
  public open fun wasAnimNotifyTriggeredInSourceState(
    machineIndex: Number,
    stateIndex: Number,
    animNotifyType: UnrealEngineClass,
  ): Boolean

  @JsName("WasAnimNotifyTriggeredInAnyState")
  public open fun wasAnimNotifyTriggeredInAnyState(animNotifyType: UnrealEngineClass): Boolean

  @JsName("WasAnimNotifyStateActiveInStateMachine")
  public open fun wasAnimNotifyStateActiveInStateMachine(machineIndex: Number,
      animNotifyStateType: UnrealEngineClass): Boolean

  @JsName("WasAnimNotifyStateActiveInSourceState")
  public open fun wasAnimNotifyStateActiveInSourceState(
    machineIndex: Number,
    stateIndex: Number,
    animNotifyStateType: UnrealEngineClass,
  ): Boolean

  @JsName("WasAnimNotifyStateActiveInAnyState")
  public open fun wasAnimNotifyStateActiveInAnyState(animNotifyStateType: UnrealEngineClass):
      Boolean

  @JsName("WasAnimNotifyNameTriggeredInStateMachine")
  public open fun wasAnimNotifyNameTriggeredInStateMachine(machineIndex: Number,
      notifyName: String): Boolean

  @JsName("WasAnimNotifyNameTriggeredInSourceState")
  public open fun wasAnimNotifyNameTriggeredInSourceState(
    machineIndex: Number,
    stateIndex: Number,
    notifyName: String,
  ): Boolean

  @JsName("WasAnimNotifyNameTriggeredInAnyState")
  public open fun wasAnimNotifyNameTriggeredInAnyState(notifyName: String): Boolean

  @JsName("UnlockAIResources")
  public open fun unlockAiResources(unlockMovement: Boolean, unlockAiLogic: Boolean): Unit

  @JsName("UnlinkAnimClassLayers")
  public open fun unlinkAnimClassLayers(inClass: UnrealEngineClass): Unit

  @JsName("TryGetPawnOwner")
  public open fun tryGetPawnOwner(): Pawn

  @JsName("StopSlotAnimation")
  public open fun stopSlotAnimation(inBlendOutTime: Number, slotNodeName: String): Unit

  @JsName("SnapshotPose")
  public open fun snapshotPose(snapshot: PoseSnapshot): SnapshotProvider

  @JsName("SetUseMainInstanceMontageEvaluationData")
  public open fun setUseMainInstanceMontageEvaluationData(set: Boolean): Unit

  @JsName("SetRootMotionMode")
  public open fun setRootMotionMode(value: String): Unit

  @JsName("SetReceiveNotifiesFromLinkedInstances")
  public open fun setReceiveNotifiesFromLinkedInstances(set: Boolean): Unit

  @JsName("SetPropagateNotifiesToLinkedInstances")
  public open fun setPropagateNotifiesToLinkedInstances(set: Boolean): Unit

  @JsName("SetMorphTarget")
  public open fun setMorphTarget(morphTargetName: String, value: Number): Unit

  @JsName("SavePoseSnapshot")
  public open fun savePoseSnapshot(snapshotName: String): Unit

  @JsName("ResetDynamics")
  public open fun resetDynamics(inTeleportType: String): Unit

  @JsName("RequestSlotGroupInertialization")
  public open fun requestSlotGroupInertialization(inSlotGroupName: String, duration: Number): Unit

  @JsName("RemovePoseSnapshot")
  public open fun removePoseSnapshot(snapshotName: String): Unit

  @JsName("PlaySlotAnimationAsDynamicMontage_WithBlendSettings")
  public open fun playSlotAnimationAsDynamicMontageWithBlendSettings(
    asset: AnimSequenceBase,
    slotNodeName: String,
    blendInSettings: MontageBlendSettings,
    blendOutSettings: MontageBlendSettings,
    inPlayRate: Number,
    loopCount: Number,
    blendOutTriggerTime: Number,
    inTimeToStartMontageAt: Number,
  ): AnimMontage

  @JsName("PlaySlotAnimationAsDynamicMontage_WithBlendArgs")
  public open fun playSlotAnimationAsDynamicMontageWithBlendArgs(
    asset: AnimSequenceBase,
    slotNodeName: String,
    blendIn: AlphaBlendArgs,
    blendOut: AlphaBlendArgs,
    inPlayRate: Number,
    loopCount: Number,
    blendOutTriggerTime: Number,
    inTimeToStartMontageAt: Number,
  ): AnimMontage

  @JsName("PlaySlotAnimationAsDynamicMontage")
  public open fun playSlotAnimationAsDynamicMontage(
    asset: AnimSequenceBase,
    slotNodeName: String,
    blendInTime: Number,
    blendOutTime: Number,
    inPlayRate: Number,
    loopCount: Number,
    blendOutTriggerTime: Number,
    inTimeToStartMontageAt: Number,
  ): AnimMontage

  @JsName("MontageSync_StopFollowing")
  public open fun montageSyncStopFollowing(montageFollower: AnimMontage): Unit

  @JsName("MontageSync_Follow")
  public open fun montageSyncFollow(
    montageFollower: AnimMontage,
    otherAnimInstance: AnimInstance,
    montageLeader: AnimMontage,
  ): Unit

  @JsName("Montage_StopWithBlendSettings")
  public open fun montageStopWithBlendSettings(blendOutSettings: MontageBlendSettings,
      montage: AnimMontage): Unit

  @JsName("Montage_StopWithBlendOut")
  public open fun montageStopWithBlendOut(blendOut: AlphaBlendArgs, montage: AnimMontage): Unit

  @JsName("Montage_StopGroupByName")
  public open fun montageStopGroupByName(inBlendOutTime: Number, groupName: String): Unit

  @JsName("Montage_Stop")
  public open fun montageStop(inBlendOutTime: Number, montage: AnimMontage): Unit

  @JsName("Montage_SetPosition")
  public open fun montageSetPosition(montage: AnimMontage, newPosition: Number): Unit

  @JsName("Montage_SetPlayRate")
  public open fun montageSetPlayRate(montage: AnimMontage, newPlayRate: Number): Unit

  @JsName("Montage_SetNextSection")
  public open fun montageSetNextSection(
    sectionNameToChange: String,
    nextSection: String,
    montage: AnimMontage,
  ): Unit

  @JsName("Montage_Resume")
  public open fun montageResume(montage: AnimMontage): Unit

  @JsName("Montage_PlayWithBlendSettings")
  public open fun montagePlayWithBlendSettings(
    montageToPlay: AnimMontage,
    blendInSettings: MontageBlendSettings,
    inPlayRate: Number,
    returnValueType: String,
    inTimeToStartMontageAt: Number,
    stopAllMontages: Boolean,
  ): Number

  @JsName("Montage_PlayWithBlendIn")
  public open fun montagePlayWithBlendIn(
    montageToPlay: AnimMontage,
    blendIn: AlphaBlendArgs,
    inPlayRate: Number,
    returnValueType: String,
    inTimeToStartMontageAt: Number,
    stopAllMontages: Boolean,
  ): Number

  @JsName("Montage_Play")
  public open fun montagePlay(
    montageToPlay: AnimMontage,
    inPlayRate: Number,
    returnValueType: String,
    inTimeToStartMontageAt: Number,
    stopAllMontages: Boolean,
  ): Number

  @JsName("Montage_Pause")
  public open fun montagePause(montage: AnimMontage): Unit

  @JsName("Montage_JumpToSectionsEnd")
  public open fun montageJumpToSectionsEnd(sectionName: String, montage: AnimMontage): Unit

  @JsName("Montage_JumpToSection")
  public open fun montageJumpToSection(sectionName: String, montage: AnimMontage): Unit

  @JsName("Montage_IsPlaying")
  public open fun montageIsPlaying(montage: AnimMontage): Boolean

  @JsName("Montage_IsActive")
  public open fun montageIsActive(montage: AnimMontage): Boolean

  @JsName("Montage_GetPosition")
  public open fun montageGetPosition(montage: AnimMontage): Number

  @JsName("Montage_GetPlayRate")
  public open fun montageGetPlayRate(montage: AnimMontage): Number

  @JsName("Montage_GetIsStopped")
  public open fun montageGetIsStopped(montage: AnimMontage): Boolean

  @JsName("Montage_GetCurrentSection")
  public open fun montageGetCurrentSection(montage: AnimMontage): String

  @JsName("Montage_GetBlendTime")
  public open fun montageGetBlendTime(montage: AnimMontage): Number

  @JsName("LockAIResources")
  public open fun lockAiResources(lockMovement: Boolean, lockAiLogic: Boolean): Unit

  @JsName("LinkAnimGraphByTag")
  public open fun linkAnimGraphByTag(inTag: String, inClass: UnrealEngineClass): Unit

  @JsName("LinkAnimClassLayers")
  public open fun linkAnimClassLayers(inClass: UnrealEngineClass): Unit

  @JsName("IsUsingMainInstanceMontageEvaluationData")
  public open fun isUsingMainInstanceMontageEvaluationData(): Boolean

  @JsName("IsSyncGroupBetweenMarkers")
  public open fun isSyncGroupBetweenMarkers(
    inSyncGroupName: String,
    previousMarker: String,
    nextMarker: String,
    respectMarkerOrder: Boolean,
  ): Boolean

  @JsName("IsPlayingSlotAnimation")
  public open fun isPlayingSlotAnimation(asset: AnimSequenceBase, slotNodeName: String): Boolean

  @JsName("IsAnyMontagePlaying")
  public open fun isAnyMontagePlaying(): Boolean

  @JsName("HasMarkerBeenHitThisFrame")
  public open fun hasMarkerBeenHitThisFrame(syncGroup: String, markerName: String): Boolean

  @JsName("GetTimeToClosestMarker")
  public open fun getTimeToClosestMarker(
    syncGroup: String,
    markerName: String,
    outMarkerTime: Number,
  ): Object73

  @JsName("GetSyncGroupPosition")
  public open fun getSyncGroupPosition(inSyncGroupName: String): MarkerSyncAnimPosition

  @JsName("GetRelevantAnimTimeRemainingFraction")
  public open fun getRelevantAnimTimeRemainingFraction(machineIndex: Number, stateIndex: Number):
      Number

  @JsName("GetRelevantAnimTimeRemaining")
  public open fun getRelevantAnimTimeRemaining(machineIndex: Number, stateIndex: Number): Number

  @JsName("GetRelevantAnimTimeFraction")
  public open fun getRelevantAnimTimeFraction(machineIndex: Number, stateIndex: Number): Number

  @JsName("GetRelevantAnimTime")
  public open fun getRelevantAnimTime(machineIndex: Number, stateIndex: Number): Number

  @JsName("GetRelevantAnimLength")
  public open fun getRelevantAnimLength(machineIndex: Number, stateIndex: Number): Number

  @JsName("GetReceiveNotifiesFromLinkedInstances")
  public open fun getReceiveNotifiesFromLinkedInstances(): Boolean

  @JsName("GetPropagateNotifiesToLinkedInstances")
  public open fun getPropagateNotifiesToLinkedInstances(): Boolean

  @JsName("GetOwningComponent")
  public open fun getOwningComponent(): SkeletalMeshComponent

  @JsName("GetOwningActor")
  public open fun getOwningActor(): Actor

  @JsName("GetLinkedAnimLayerInstancesByGroup")
  public open fun getLinkedAnimLayerInstancesByGroup(inGroup: String,
      outLinkedInstances: Array<AnimInstance>): OutLinkedInstancesProvider

  @JsName("GetLinkedAnimLayerInstanceByGroupAndClass")
  public open fun getLinkedAnimLayerInstanceByGroupAndClass(inGroup: String,
      inClass: UnrealEngineClass): AnimInstance

  @JsName("GetLinkedAnimLayerInstanceByGroup")
  public open fun getLinkedAnimLayerInstanceByGroup(inGroup: String): AnimInstance

  @JsName("GetLinkedAnimLayerInstanceByClass")
  public open fun getLinkedAnimLayerInstanceByClass(inClass: UnrealEngineClass): AnimInstance

  @JsName("GetLinkedAnimGraphInstancesByTag")
  public open fun getLinkedAnimGraphInstancesByTag(inTag: String,
      outLinkedInstances: Array<AnimInstance>): OutLinkedInstancesProvider

  @JsName("GetLinkedAnimGraphInstanceByTag")
  public open fun getLinkedAnimGraphInstanceByTag(inTag: String): AnimInstance

  @JsName("GetInstanceTransitionTimeElapsedFraction")
  public open fun getInstanceTransitionTimeElapsedFraction(machineIndex: Number,
      transitionIndex: Number): Number

  @JsName("GetInstanceTransitionTimeElapsed")
  public open fun getInstanceTransitionTimeElapsed(machineIndex: Number, transitionIndex: Number):
      Number

  @JsName("GetInstanceTransitionCrossfadeDuration")
  public open fun getInstanceTransitionCrossfadeDuration(machineIndex: Number,
      transitionIndex: Number): Number

  @JsName("GetInstanceStateWeight")
  public open fun getInstanceStateWeight(machineIndex: Number, stateIndex: Number): Number

  @JsName("GetInstanceMachineWeight")
  public open fun getInstanceMachineWeight(machineIndex: Number): Number

  @JsName("GetInstanceCurrentStateElapsedTime")
  public open fun getInstanceCurrentStateElapsedTime(machineIndex: Number): Number

  @JsName("GetInstanceAssetPlayerTimeFromEndFraction")
  public open fun getInstanceAssetPlayerTimeFromEndFraction(assetPlayerIndex: Number): Number

  @JsName("GetInstanceAssetPlayerTimeFromEnd")
  public open fun getInstanceAssetPlayerTimeFromEnd(assetPlayerIndex: Number): Number

  @JsName("GetInstanceAssetPlayerTimeFraction")
  public open fun getInstanceAssetPlayerTimeFraction(assetPlayerIndex: Number): Number

  @JsName("GetInstanceAssetPlayerTime")
  public open fun getInstanceAssetPlayerTime(assetPlayerIndex: Number): Number

  @JsName("GetInstanceAssetPlayerLength")
  public open fun getInstanceAssetPlayerLength(assetPlayerIndex: Number): Number

  @JsName("GetDeltaSeconds")
  public open fun getDeltaSeconds(): Number

  @JsName("GetCurveValue")
  public open fun getCurveValue(curveName: String): Number

  @JsName("GetCurrentStateName")
  public open fun getCurrentStateName(machineIndex: Number): String

  @JsName("GetCurrentActiveMontage")
  public open fun getCurrentActiveMontage(): AnimMontage

  @JsName("GetAllCurveNames")
  public open fun getAllCurveNames(outNames: Array<String>): OutNamesProvider

  @JsName("GetActiveCurveNames")
  public open fun getActiveCurveNames(curveType: String, outNames: Array<String>): OutNamesProvider

  @JsName("ClearMorphTargets")
  public open fun clearMorphTargets(): Unit

  @JsName("CalculateDirection")
  public open fun calculateDirection(velocity: Vector, baseRotation: Rotator): Number

  @JsName("BlueprintUpdateAnimation")
  public open fun blueprintUpdateAnimation(deltaTimeX: Number): Unit

  @JsName("BlueprintThreadSafeUpdateAnimation")
  public open fun blueprintThreadSafeUpdateAnimation(deltaTime: Number): Unit

  @JsName("BlueprintPostEvaluateAnimation")
  public open fun blueprintPostEvaluateAnimation(): Unit

  @JsName("BlueprintLinkedAnimationLayersInitialized")
  public open fun blueprintLinkedAnimationLayersInitialized(): Unit

  @JsName("BlueprintInitializeAnimation")
  public open fun blueprintInitializeAnimation(): Unit

  @JsName("BlueprintBeginPlay")
  public open fun blueprintBeginPlay(): Unit

  @JsName("StateMachine_GetGlobalWeight")
  public open fun stateMachineGetGlobalWeight(cachedAnimStateData: CachedAnimStateData): Number

  @JsName("StateMachine_GetLocalWeight")
  public open fun stateMachineGetLocalWeight(cachedAnimStateData: CachedAnimStateData): Number

  @JsName("StateMachine_IsStateRelevant")
  public open fun stateMachineIsStateRelevant(cachedAnimStateData: CachedAnimStateData): Boolean

  @JsName("GetAnimNodeReference")
  public open fun getAnimNodeReference(index: Number): AnimNodeReference

  @JsName("LockAIResourcesWithAnimation")
  public open fun lockAiResourcesWithAnimation(lockMovement: Boolean, lockAiLogic: Boolean): Unit

  @JsName("UnlockAIResourcesWithAnimation")
  public open fun unlockAiResourcesWithAnimation(unlockMovement: Boolean, unlockAiLogic: Boolean):
      Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimInstance

    @JsName("C")
    public fun copy(other: UObject): AnimInstance

    @JsName("C")
    public fun copy(other: Any): AnimInstance

    @JsName("StateMachine_GetGlobalWeight")
    public fun stateMachineGetGlobalWeight(inAnimInstance: AnimInstance,
        cachedAnimStateData: CachedAnimStateData): Number

    @JsName("StateMachine_GetLocalWeight")
    public fun stateMachineGetLocalWeight(inAnimInstance: AnimInstance,
        cachedAnimStateData: CachedAnimStateData): Number

    @JsName("StateMachine_IsStateRelevant")
    public fun stateMachineIsStateRelevant(inAnimInstance: AnimInstance,
        cachedAnimStateData: CachedAnimStateData): Boolean

    @JsName("GetAnimNodeReference")
    public fun getAnimNodeReference(instance: AnimInstance, index: Number): AnimNodeReference

    @JsName("LockAIResourcesWithAnimation")
    public fun lockAiResourcesWithAnimation(
      animInstance: AnimInstance,
      lockMovement: Boolean,
      lockAiLogic: Boolean,
    ): Unit

    @JsName("UnlockAIResourcesWithAnimation")
    public fun unlockAiResourcesWithAnimation(
      animInstance: AnimInstance,
      unlockMovement: Boolean,
      unlockAiLogic: Boolean,
    ): Unit
  }
}

public open external class AnimNotifyEventReference {
  @JsName("MirrorTable")
  public open var mirrorTable: MirrorDataTable

  @JsName("NotifySource")
  public open var notifySource: UObject

  public open fun clone(): AnimNotifyEventReference

  @JsName("IsTriggeredByState")
  public open fun isTriggeredByState(animInstance: AnimInstance, stateName: String): Boolean

  @JsName("IsTriggeredByStateInStateMachine")
  public open fun isTriggeredByStateInStateMachine(
    animInstance: AnimInstance,
    stateMachineName: String,
    stateName: String,
  ): Boolean

  @JsName("IsTriggeredByStateMachine")
  public open fun isTriggeredByStateMachine(animInstance: AnimInstance, stateMachineName: String):
      Boolean

  @JsName("GetMirrorDataTable")
  public open fun getMirrorDataTable(): MirrorDataTable

  @JsName("IsTriggeredByMirroredAnimation")
  public open fun isTriggeredByMirroredAnimation(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNotifyEventReference

    @JsName("C")
    public fun copy(other: Any): AnimNotifyEventReference

    @JsName("IsTriggeredByState")
    public fun isTriggeredByState(
      eventReference: AnimNotifyEventReference,
      animInstance: AnimInstance,
      stateName: String,
    ): Boolean

    @JsName("IsTriggeredByStateInStateMachine")
    public fun isTriggeredByStateInStateMachine(
      eventReference: AnimNotifyEventReference,
      animInstance: AnimInstance,
      stateMachineName: String,
      stateName: String,
    ): Boolean

    @JsName("IsTriggeredByStateMachine")
    public fun isTriggeredByStateMachine(
      eventReference: AnimNotifyEventReference,
      animInstance: AnimInstance,
      stateMachineName: String,
    ): Boolean

    @JsName("GetMirrorDataTable")
    public fun getMirrorDataTable(eventReference: AnimNotifyEventReference): MirrorDataTable

    @JsName("IsTriggeredByMirroredAnimation")
    public fun isTriggeredByMirroredAnimation(eventReference: AnimNotifyEventReference): Boolean
  }
}

public open external class AnimNotify(
  outer: UObject,
) : UObject {
  @JsName("NotifyColor")
  public open var notifyColor: Color

  @JsName("bShouldFireInEditor")
  public open var shouldFireInEditor: Boolean

  @JsName("Received_Notify")
  public open fun receivedNotify(
    meshComp: SkeletalMeshComponent,
    animation: AnimSequenceBase,
    eventReference: AnimNotifyEventReference,
  ): Boolean

  @JsName("GetNotifyName")
  public open fun getNotifyName(): String

  @JsName("GetDefaultTriggerWeightThreshold")
  public open fun getDefaultTriggerWeightThreshold(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimNotify

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimNotify

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimNotify

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimNotify

    @JsName("C")
    public fun copy(other: UObject): AnimNotify

    @JsName("C")
    public fun copy(other: Any): AnimNotify
  }
}

@JsName("EMontageNotifyTickType")
public external object MontageNotifyTickType {
  public var Queued: String

  public var BranchingPoint: String

  @JsName("EMontageNotifyTickType_MAX")
  public var Max: String
}

@JsName("ENotifyFilterType")
public external object NotifyFilterType {
  public var NoFiltering: String

  public var LOD: String

  @JsName("ENotifyFilterType_MAX")
  public var Max: String
}

public open external class AnimNotifyEvent : AnimLinkableElement {
  @JsName("DisplayTime")
  public open var displayTime: Number

  @JsName("TriggerTimeOffset")
  public open var triggerTimeOffset: Number

  @JsName("EndTriggerTimeOffset")
  public open var endTriggerTimeOffset: Number

  @JsName("TriggerWeightThreshold")
  public open var triggerWeightThreshold: Number

  @JsName("NotifyName")
  public open var notifyName: String

  @JsName("Notify")
  public open var notify: AnimNotify

  @JsName("NotifyStateClass")
  public open var notifyStateClass: AnimNotifyState

  @JsName("Duration")
  public open var duration: Number

  @JsName("EndLink")
  public open var endLink: AnimLinkableElement

  @JsName("bConvertedFromBranchingPoint")
  public open var convertedFromBranchingPoint: Boolean

  @JsName("MontageTickType")
  public open var montageTickType: String

  @JsName("NotifyTriggerChance")
  public open var notifyTriggerChance: Number

  @JsName("NotifyFilterType")
  public open var notifyFilterType: String

  @JsName("NotifyFilterLOD")
  public open var notifyFilterLod: Number

  @JsName("bTriggerOnDedicatedServer")
  public open var triggerOnDedicatedServer: Boolean

  @JsName("bTriggerOnFollower")
  public open var triggerOnFollower: Boolean

  @JsName("NotifyColor")
  public open var notifyColor: Color

  @JsName("Guid")
  public open var guid: Guid

  @JsName("TrackIndex")
  public open var trackIndex: Number

  public override fun clone(): AnimNotifyEvent

  @JsName("GetAnimNotifyEventDuration")
  public open fun getAnimNotifyEventDuration(): Number

  @JsName("GetAnimNotifyEventTriggerTime")
  public open fun getAnimNotifyEventTriggerTime(): Number

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNotifyEvent

    @JsName("C")
    public fun copy(other: Any): AnimNotifyEvent

    @JsName("GetAnimNotifyEventDuration")
    public fun getAnimNotifyEventDuration(notifyEvent: AnimNotifyEvent): Number

    @JsName("GetAnimNotifyEventTriggerTime")
    public fun getAnimNotifyEventTriggerTime(notifyEvent: AnimNotifyEvent): Number
  }
}

public open external class FloatCurve : AnimCurveBase {
  @JsName("FloatCurve")
  public open var floatCurve: RichCurve

  public override fun clone(): FloatCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FloatCurve

    @JsName("C")
    public fun copy(other: Any): FloatCurve
  }
}

public open external class VectorCurve : AnimCurveBase {
  @JsName("FloatCurves")
  public open var floatCurves: RichCurve

  public override fun clone(): VectorCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorCurve

    @JsName("C")
    public fun copy(other: Any): VectorCurve
  }
}

public open external class TransformCurve : AnimCurveBase {
  @JsName("TranslationCurve")
  public open var translationCurve: VectorCurve

  @JsName("RotationCurve")
  public open var rotationCurve: VectorCurve

  @JsName("ScaleCurve")
  public open var scaleCurve: VectorCurve

  public override fun clone(): TransformCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TransformCurve

    @JsName("C")
    public fun copy(other: Any): TransformCurve
  }
}

public open external class RawCurveTracks {
  @JsName("FloatCurves")
  public open var floatCurves: Array<FloatCurve>

  @JsName("VectorCurves")
  public open var vectorCurves: Array<VectorCurve>

  @JsName("TransformCurves")
  public open var transformCurves: Array<TransformCurve>

  public open fun clone(): RawCurveTracks

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RawCurveTracks

    @JsName("C")
    public fun copy(other: Any): RawCurveTracks
  }
}

public open external class AnimNotifyTrack {
  @JsName("TrackName")
  public open var trackName: String

  @JsName("TrackColor")
  public open var trackColor: LinearColor

  public open fun clone(): AnimNotifyTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNotifyTrack

    @JsName("C")
    public fun copy(other: Any): AnimNotifyTrack
  }
}

@JsName("EAnimDataModelNotifyType")
public external object AnimDataModelNotifyType {
  public var BracketOpened: String

  public var BracketClosed: String

  public var TrackAdded: String

  public var TrackChanged: String

  public var TrackRemoved: String

  public var SequenceLengthChanged: String

  public var FrameRateChanged: String

  public var CurveAdded: String

  public var CurveChanged: String

  public var CurveRemoved: String

  public var CurveFlagsChanged: String

  public var CurveRenamed: String

  public var CurveScaled: String

  public var CurveColorChanged: String

  public var AttributeAdded: String

  public var AttributeRemoved: String

  public var AttributeChanged: String

  public var Populated: String

  public var Reset: String

  public var Invalid: String

  @JsName("EAnimDataModelNotifyType_MAX")
  public var Max: String
}

public open external class EmptyPayload {
  public open fun clone(): EmptyPayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EmptyPayload

    @JsName("C")
    public fun copy(other: Any): EmptyPayload
  }
}

@JsName("T$78")
public external interface OutPayloadProvider {
  @JsName("OutPayload")
  public var outPayload: EmptyPayload
}

public open external class AnimDataModelNotifPayload {
  public open fun clone(): AnimDataModelNotifPayload

  @JsName("CopyPayload")
  public open fun copyPayload(expectedStruct: ScriptStruct, outPayload: EmptyPayload):
      OutPayloadProvider

  @JsName("GetPayload")
  public open fun getPayload(): EmptyPayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimDataModelNotifPayload

    @JsName("C")
    public fun copy(other: Any): AnimDataModelNotifPayload

    @JsName("CopyPayload")
    public fun copyPayload(
      payload: AnimDataModelNotifPayload,
      expectedStruct: ScriptStruct,
      outPayload: EmptyPayload,
    ): OutPayloadProvider

    @JsName("GetPayload")
    public fun getPayload(payload: AnimDataModelNotifPayload): EmptyPayload
  }
}

public open external class Quat4f {
  @JsName("X")
  public open var x: Number

  @JsName("Y")
  public open var y: Number

  @JsName("Z")
  public open var z: Number

  @JsName("W")
  public open var w: Number

  public open fun clone(): Quat4f

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Quat4f

    @JsName("C")
    public fun copy(other: Any): Quat4f
  }
}

public open external class RawAnimSequenceTrack {
  @JsName("PosKeys")
  public open var posKeys: Array<Vector3f>

  @JsName("RotKeys")
  public open var rotKeys: Array<Quat4f>

  @JsName("ScaleKeys")
  public open var scaleKeys: Array<Vector3f>

  public open fun clone(): RawAnimSequenceTrack

  @JsName("GetPositionalKeys")
  public open fun getPositionalKeys(): Array<Vector>

  @JsName("GetRotationalKeys")
  public open fun getRotationalKeys(): Array<Quat>

  @JsName("GetScaleKeys")
  public open fun getScaleKeys(): Array<Vector>

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RawAnimSequenceTrack

    @JsName("C")
    public fun copy(other: Any): RawAnimSequenceTrack

    @JsName("GetPositionalKeys")
    public fun getPositionalKeys(track: RawAnimSequenceTrack): Array<Vector>

    @JsName("GetRotationalKeys")
    public fun getRotationalKeys(track: RawAnimSequenceTrack): Array<Quat>

    @JsName("GetScaleKeys")
    public fun getScaleKeys(track: RawAnimSequenceTrack): Array<Vector>
  }
}

public open external class BoneAnimationTrack {
  @JsName("InternalTrackData")
  public open var internalTrackData: RawAnimSequenceTrack

  @JsName("BoneTreeIndex")
  public open var boneTreeIndex: Number

  @JsName("Name")
  public open var name: String

  public open fun clone(): BoneAnimationTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoneAnimationTrack

    @JsName("C")
    public fun copy(other: Any): BoneAnimationTrack
  }
}

@JsName("T$79")
public external interface Object79 {
  @JsName("Numerator")
  public var numerator: Number

  @JsName("Denominator")
  public var denominator: Number
}

public open external class FrameRate {
  @JsName("Numerator")
  public open var numerator: Number

  @JsName("Denominator")
  public open var denominator: Number

  public open fun clone(): FrameRate

  @JsName("BreakFrameRate")
  public open fun breakFrameRate(numerator: Number, denominator: Number): Object79

  @JsName("Conv_FrameRateToSeconds")
  public open fun convertFrameRateToSeconds(): Number

  @JsName("IsValid_Framerate")
  public open fun isValidFramerate(): Boolean

  @JsName("IsValid_MultipleOf")
  public open fun isValidMultipleOf(otherFramerate: FrameRate): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FrameRate

    @JsName("C")
    public fun copy(other: Any): FrameRate

    @JsName("BreakFrameRate")
    public fun breakFrameRate(
      inFrameRate: FrameRate,
      numerator: Number,
      denominator: Number,
    ): Object79

    @JsName("Conv_FrameRateToSeconds")
    public fun convertFrameRateToSeconds(inFrameRate: FrameRate): Number

    @JsName("IsValid_Framerate")
    public fun isValidFramerate(inFrameRate: FrameRate): Boolean

    @JsName("IsValid_MultipleOf")
    public fun isValidMultipleOf(inFrameRate: FrameRate, otherFramerate: FrameRate): Boolean

    @JsName("MakeFrameRate")
    public fun makeFrameRate(numerator: Number, denominator: Number): FrameRate

    @JsName("GetTimecodeFrameRate")
    public fun getTimecodeFrameRate(): FrameRate
  }
}

public open external class AnimationCurveData {
  @JsName("FloatCurves")
  public open var floatCurves: Array<FloatCurve>

  @JsName("TransformCurves")
  public open var transformCurves: Array<TransformCurve>

  public open fun clone(): AnimationCurveData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationCurveData

    @JsName("C")
    public fun copy(other: Any): AnimationCurveData
  }
}

@JsName("T$80")
public external interface Object80 {
  @JsName("Identifier")
  public var identifier: AnimationAttributeIdentifier

  @JsName("$")
  public var value: Boolean
}

public open external class AnimationAttributeIdentifier {
  @JsName("Name")
  public open var name: String

  @JsName("BoneName")
  public open var boneName: String

  @JsName("BoneIndex")
  public open var boneIndex: Number

  @JsName("ScriptStruct")
  public open var scriptStruct: ScriptStruct

  @JsName("ScriptStructPath")
  public open var scriptStructPath: SoftObjectPath

  public open fun clone(): AnimationAttributeIdentifier

  @JsName("IsValid")
  public open fun isValid(): Object80

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationAttributeIdentifier

    @JsName("C")
    public fun copy(other: Any): AnimationAttributeIdentifier

    @JsName("IsValid")
    public fun isValid(identifier: AnimationAttributeIdentifier): Object80
  }
}

public open external class AttributeKey {
  @JsName("Time")
  public open var time: Number

  public open fun clone(): AttributeKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AttributeKey

    @JsName("C")
    public fun copy(other: Any): AttributeKey
  }
}

public open external class AttributeCurve : IndexedCurve {
  @JsName("Keys")
  public open var keys: Array<AttributeKey>

  @JsName("ScriptStructPath")
  public open var scriptStructPath: SoftObjectPath

  @JsName("ScriptStruct")
  public open var scriptStruct: ScriptStruct

  @JsName("bShouldInterpolate")
  public open var shouldInterpolate: Boolean

  public override fun clone(): AttributeCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AttributeCurve

    @JsName("C")
    public fun copy(other: Any): AttributeCurve
  }
}

public open external class AnimatedBoneAttribute {
  @JsName("Identifier")
  public open var identifier: AnimationAttributeIdentifier

  @JsName("Curve")
  public open var curve: AttributeCurve

  public open fun clone(): AnimatedBoneAttribute

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimatedBoneAttribute

    @JsName("C")
    public fun copy(other: Any): AnimatedBoneAttribute
  }
}

public open external class TrackToSkeletonMap {
  @JsName("BoneTreeIndex")
  public open var boneTreeIndex: Number

  public open fun clone(): TrackToSkeletonMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TrackToSkeletonMap

    @JsName("C")
    public fun copy(other: Any): TrackToSkeletonMap
  }
}

public open external class AnimDataModel(
  outer: UObject,
) : UObject {
  @JsName("BracketCounter")
  public open var bracketCounter: Number

  @JsName("ModifiedEventDynamic")
  public open var modifiedEventDynamic: UnrealEngineMulticastDelegate<(
    NotifType: String,
    Model: AnimDataModel,
    Payload: AnimDataModelNotifPayload,
  ) -> Unit>

  @JsName("BoneAnimationTracks")
  public open var boneAnimationTracks: Array<BoneAnimationTrack>

  @JsName("PlayLength")
  public open var playLength: Number

  @JsName("FrameRate")
  public open var frameRate: FrameRate

  @JsName("NumberOfFrames")
  public open var numberOfFrames: Number

  @JsName("NumberOfKeys")
  public open var numberOfKeys: Number

  @JsName("CurveData")
  public open var curveData: AnimationCurveData

  @JsName("AnimatedBoneAttributes")
  public open var animatedBoneAttributes: Array<AnimatedBoneAttribute>

  @JsName("RawAnimationTracks")
  public open var rawAnimationTracks: Array<RawAnimSequenceTrack>

  @JsName("RawAnimationTrackNames")
  public open var rawAnimationTrackNames: Array<String>

  @JsName("RawAnimationTrackSkeletonMappings")
  public open var rawAnimationTrackSkeletonMappings: Array<TrackToSkeletonMap>

  @JsName("RawCurveTracks")
  public open var rawCurveTracks: RawCurveTracks

  @JsName("IsValidBoneTrackIndex")
  public open fun isValidBoneTrackIndex(trackIndex: Number): Boolean

  @JsName("GetPlayLength")
  public open fun getPlayLength(): Number

  @JsName("GetNumBoneTracks")
  public open fun getNumBoneTracks(): Number

  @JsName("GetNumberOfTransformCurves")
  public open fun getNumberOfTransformCurves(): Number

  @JsName("GetNumberOfKeys")
  public open fun getNumberOfKeys(): Number

  @JsName("GetNumberOfFrames")
  public open fun getNumberOfFrames(): Number

  @JsName("GetNumberOfFloatCurves")
  public open fun getNumberOfFloatCurves(): Number

  @JsName("GetFrameRate")
  public open fun getFrameRate(): FrameRate

  @JsName("GetBoneTrackNames")
  public open fun getBoneTrackNames(outNames: Array<String>): OutNamesProvider

  @JsName("GetBoneTrackIndexByName")
  public open fun getBoneTrackIndexByName(trackName: String): Number

  @JsName("GetBoneTrackIndex")
  public open fun getBoneTrackIndex(track: BoneAnimationTrack): Number

  @JsName("GetBoneTrackByName")
  public open fun getBoneTrackByName(trackName: String): BoneAnimationTrack

  @JsName("GetBoneTrackByIndex")
  public open fun getBoneTrackByIndex(trackIndex: Number): BoneAnimationTrack

  @JsName("GetBoneAnimationTracks")
  public open fun getBoneAnimationTracks(): Array<BoneAnimationTrack>

  @JsName("GetAnimationSequence")
  public open fun getAnimationSequence(): AnimSequence

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimDataModel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimDataModel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimDataModel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimDataModel

    @JsName("C")
    public fun copy(other: UObject): AnimDataModel

    @JsName("C")
    public fun copy(other: Any): AnimDataModel
  }
}

@JsName("EAnimDataEvalType")
public external object AnimDataEvalType {
  public var Source: String

  public var Raw: String

  public var Compressed: String

  @JsName("EAnimDataEvalType_MAX")
  public var Max: String
}

public open external class AnimPoseEvaluationOptions {
  @JsName("EvaluationType")
  public open var evaluationType: String

  @JsName("bShouldRetarget")
  public open var shouldRetarget: Boolean

  @JsName("bExtractRootMotion")
  public open var extractRootMotion: Boolean

  @JsName("OptionalSkeletalMesh")
  public open var optionalSkeletalMesh: SkeletalMesh

  public open fun clone(): AnimPoseEvaluationOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimPoseEvaluationOptions

    @JsName("C")
    public fun copy(other: Any): AnimPoseEvaluationOptions
  }
}

public open external class FrameNumber {
  @JsName("Value")
  public open var value: Number

  public open fun clone(): FrameNumber

  @JsName("MakeQualifiedFrameTime")
  public open fun makeQualifiedFrameTime(frameRate: FrameRate, subFrame: Number): QualifiedFrameTime

  @JsName("Add_FrameNumberFrameNumber")
  public open fun addFrameNumberFrameNumber(b: FrameNumber): FrameNumber

  @JsName("Add_FrameNumberInteger")
  public open fun addFrameNumberInteger(b: Number): FrameNumber

  @JsName("Conv_FrameNumberToInteger")
  public open fun convertFrameNumberToInteger(): Number

  @JsName("Divide_FrameNumberInteger")
  public open fun divideFrameNumberInteger(b: Number): FrameNumber

  @JsName("Multiply_FrameNumberInteger")
  public open fun multiplyFrameNumberInteger(b: Number): FrameNumber

  @JsName("Subtract_FrameNumberFrameNumber")
  public open fun subtractFrameNumberFrameNumber(b: FrameNumber): FrameNumber

  @JsName("Subtract_FrameNumberInteger")
  public open fun subtractFrameNumberInteger(b: Number): FrameNumber

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FrameNumber

    @JsName("C")
    public fun copy(other: Any): FrameNumber

    @JsName("MakeQualifiedFrameTime")
    public fun makeQualifiedFrameTime(
      frame: FrameNumber,
      frameRate: FrameRate,
      subFrame: Number,
    ): QualifiedFrameTime

    @JsName("Add_FrameNumberFrameNumber")
    public fun addFrameNumberFrameNumber(a: FrameNumber, b: FrameNumber): FrameNumber

    @JsName("Add_FrameNumberInteger")
    public fun addFrameNumberInteger(a: FrameNumber, b: Number): FrameNumber

    @JsName("Conv_FrameNumberToInteger")
    public fun convertFrameNumberToInteger(inFrameNumber: FrameNumber): Number

    @JsName("Divide_FrameNumberInteger")
    public fun divideFrameNumberInteger(a: FrameNumber, b: Number): FrameNumber

    @JsName("Multiply_FrameNumberInteger")
    public fun multiplyFrameNumberInteger(a: FrameNumber, b: Number): FrameNumber

    @JsName("Subtract_FrameNumberFrameNumber")
    public fun subtractFrameNumberFrameNumber(a: FrameNumber, b: FrameNumber): FrameNumber

    @JsName("Subtract_FrameNumberInteger")
    public fun subtractFrameNumberInteger(a: FrameNumber, b: Number): FrameNumber
  }
}

public open external class FrameTime {
  @JsName("FrameNumber")
  public open var frameNumber: FrameNumber

  @JsName("SubFrame")
  public open var subFrame: Number

  public open fun clone(): FrameTime

  @JsName("SnapFrameTimeToRate")
  public open fun snapFrameTimeToRate(sourceRate: FrameRate, snapToRate: FrameRate): FrameTime

  @JsName("TransformTime")
  public open fun transformTime(sourceRate: FrameRate, destinationRate: FrameRate): FrameTime

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FrameTime

    @JsName("C")
    public fun copy(other: Any): FrameTime

    @JsName("SnapFrameTimeToRate")
    public fun snapFrameTimeToRate(
      sourceTime: FrameTime,
      sourceRate: FrameRate,
      snapToRate: FrameRate,
    ): FrameTime

    @JsName("TransformTime")
    public fun transformTime(
      sourceTime: FrameTime,
      sourceRate: FrameRate,
      destinationRate: FrameRate,
    ): FrameTime

    @JsName("Multiply_SecondsFrameRate")
    public fun multiplySecondsFrameRate(timeInSeconds: Number, frameRate: FrameRate): FrameTime
  }
}

@JsName("T$82")
public external interface Object82 {
  @JsName("Frame")
  public var frame: FrameNumber

  @JsName("FrameRate")
  public var frameRate: FrameRate

  @JsName("SubFrame")
  public var subFrame: Number
}

public open external class QualifiedFrameTime {
  @JsName("Time")
  public open var time: FrameTime

  @JsName("Rate")
  public open var rate: FrameRate

  public open fun clone(): QualifiedFrameTime

  @JsName("BreakQualifiedFrameTime")
  public open fun breakQualifiedFrameTime(
    frame: FrameNumber,
    frameRate: FrameRate,
    subFrame: Number,
  ): Object82

  @JsName("Conv_QualifiedFrameTimeToSeconds")
  public open fun convertQualifiedFrameTimeToSeconds(): Number

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): QualifiedFrameTime

    @JsName("C")
    public fun copy(other: Any): QualifiedFrameTime

    @JsName("BreakQualifiedFrameTime")
    public fun breakQualifiedFrameTime(
      inFrameTime: QualifiedFrameTime,
      frame: FrameNumber,
      frameRate: FrameRate,
      subFrame: Number,
    ): Object82

    @JsName("Conv_QualifiedFrameTimeToSeconds")
    public fun convertQualifiedFrameTimeToSeconds(inFrameTime: QualifiedFrameTime): Number
  }
}

@JsName("T$83")
public external interface AnimPoseProvider {
  @JsName("Pose")
  public var pose: AnimPose
}

@JsName("T$84")
public external interface Object84 {
  @JsName("OutQualifiedFrameTime")
  public var outQualifiedFrameTime: QualifiedFrameTime

  @JsName("$")
  public var value: Boolean
}

@JsName("T$85")
public external interface BonePathProvider {
  @JsName("BonePath")
  public var bonePath: Array<String>
}

@JsName("T$86")
public external interface EventNamesProvider {
  @JsName("EventNames")
  public var eventNames: Array<String>
}

@JsName("T$87")
public external interface NotifyEventsProvider {
  @JsName("NotifyEvents")
  public var notifyEvents: Array<AnimNotifyEvent>
}

@JsName("T$88")
public external interface EventsProvider {
  @JsName("Events")
  public var events: Array<AnimNotifyEvent>
}

@JsName("T$89")
public external interface TrackNamesProvider {
  @JsName("TrackNames")
  public var trackNames: Array<String>
}

@JsName("T$91")
public external interface TransformProvider {
  @JsName("Pose")
  public var pose: Transform
}

@JsName("T$92")
public external interface PosesProvider {
  @JsName("Poses")
  public var poses: Array<Transform>
}

@JsName("T$94")
public external interface FrameProvider {
  @JsName("Frame")
  public var frame: Number
}

@JsName("T$95")
public external interface NumFramesProvider {
  @JsName("NumFrames")
  public var numFrames: Number
}

@JsName("T$96")
public external interface NumKeysProvider {
  @JsName("NumKeys")
  public var numKeys: Number
}

@JsName("T$97")
public external interface RateScaleProvider {
  @JsName("RateScale")
  public var rateScale: Number
}

@JsName("T$98")
public external interface Object98 {
  @JsName("PositionKeys")
  public var positionKeys: Array<Vector>

  @JsName("RotationKeys")
  public var rotationKeys: Array<Quat>

  @JsName("ScalingKeys")
  public var scalingKeys: Array<Vector>
}

@JsName("T$99")
public external interface PositionDataProvider {
  @JsName("PositionData")
  public var positionData: Array<Vector>
}

@JsName("T$100")
public external interface RotationDataProvider {
  @JsName("RotationData")
  public var rotationData: Array<Quat>
}

@JsName("T$101")
public external interface ScaleDataProvider {
  @JsName("ScaleData")
  public var scaleData: Array<Vector>
}

@JsName("T$102")
public external interface LengthProvider {
  @JsName("Length")
  public var length: Number
}

@JsName("T$103")
public external interface TimeProvider {
  @JsName("Time")
  public var time: Number
}

@JsName("T$104")
public external interface IsValidProvider {
  @JsName("IsValid")
  public var isValid: Boolean
}

public open external class AnimSequenceBase(
  outer: UObject,
) : AnimationAsset {
  @JsName("Notifies")
  public open var notifies: Array<AnimNotifyEvent>

  @JsName("SequenceLength")
  public open var sequenceLength: Number

  @JsName("RateScale")
  public open var rateScale: Number

  @JsName("RawCurveData")
  public open var rawCurveData: RawCurveTracks

  @JsName("AnimNotifyTracks")
  public open var animNotifyTracks: Array<AnimNotifyTrack>

  @JsName("DataModel")
  public open var dataModel: AnimDataModel

  @JsName("Controller")
  public open var controller: Any

  @JsName("ReplaceAnimNotifyClass")
  public open fun replaceAnimNotifyClass(
    notifyName: String,
    newNotifyName: String,
    newNotifyClass: UObject,
  ): Number

  @JsName("AddTransformAttribute")
  public open fun addTransformAttribute(
    attributeName: String,
    boneName: String,
    keys: Array<Number>,
    values: Array<Transform>,
  ): Boolean

  @JsName("GetAnimPoseAtFrame")
  public open fun getAnimPoseAtFrame(
    frameIndex: Number,
    evaluationOptions: AnimPoseEvaluationOptions,
    pose: AnimPose,
  ): AnimPoseProvider

  @JsName("GetAnimPoseAtTime")
  public open fun getAnimPoseAtTime(
    time: Number,
    evaluationOptions: AnimPoseEvaluationOptions,
    pose: AnimPose,
  ): AnimPoseProvider

  @JsName("AddAnimationNotifyEvent")
  public open fun addAnimationNotifyEvent(
    notifyTrackName: String,
    startTime: Number,
    notifyClass: UnrealEngineClass,
  ): AnimNotify

  @JsName("AddAnimationNotifyEventObject")
  public open fun addAnimationNotifyEventObject(
    startTime: Number,
    notify: AnimNotify,
    notifyTrackName: String,
  ): Unit

  @JsName("AddAnimationNotifyStateEvent")
  public open fun addAnimationNotifyStateEvent(
    notifyTrackName: String,
    startTime: Number,
    duration: Number,
    notifyStateClass: UnrealEngineClass,
  ): AnimNotifyState

  @JsName("AddAnimationNotifyStateEventObject")
  public open fun addAnimationNotifyStateEventObject(
    startTime: Number,
    duration: Number,
    notifyState: AnimNotifyState,
    notifyTrackName: String,
  ): Unit

  @JsName("AddAnimationNotifyTrack")
  public open fun addAnimationNotifyTrack(notifyTrackName: String, trackColor: LinearColor): Unit

  @JsName("CopyAnimNotifiesFromSequence")
  public open fun copyAnimNotifiesFromSequence(destinationAnimationSequenceBase: AnimSequenceBase,
      deleteExistingNotifies: Boolean): Unit

  @JsName("EvaluateRootBoneTimecodeAttributesAtTime")
  public open fun evaluateRootBoneTimecodeAttributesAtTime(evalTime: Number,
      outQualifiedFrameTime: QualifiedFrameTime): Object84

  @JsName("FindBonePathToRoot")
  public open fun findBonePathToRoot(boneName: String, bonePath: Array<String>): BonePathProvider

  @JsName("GetAnimationNotifyEventNames")
  public open fun getAnimationNotifyEventNames(eventNames: Array<String>): EventNamesProvider

  @JsName("GetAnimationNotifyEvents")
  public open fun getAnimationNotifyEvents(notifyEvents: Array<AnimNotifyEvent>):
      NotifyEventsProvider

  @JsName("GetAnimationNotifyEventsForTrack")
  public open fun getAnimationNotifyEventsForTrack(notifyTrackName: String,
      events: Array<AnimNotifyEvent>): EventsProvider

  @JsName("GetAnimationNotifyTrackNames")
  public open fun getAnimationNotifyTrackNames(trackNames: Array<String>): TrackNamesProvider

  @JsName("GetAnimationTrackNames")
  public open fun getAnimationTrackNames(trackNames: Array<String>): TrackNamesProvider

  @JsName("GetBonePoseForFrame")
  public open fun getBonePoseForFrame(
    boneName: String,
    frame: Number,
    extractRootMotion: Boolean,
    pose: Transform,
  ): TransformProvider

  @JsName("GetBonePoseForTime")
  public open fun getBonePoseForTime(
    boneName: String,
    time: Number,
    extractRootMotion: Boolean,
    pose: Transform,
  ): TransformProvider

  @JsName("GetBonePosesForFrame")
  public open fun getBonePosesForFrame(
    boneNames: Array<String>,
    frame: Number,
    extractRootMotion: Boolean,
    poses: Array<Transform>,
    previewMesh: SkeletalMesh,
  ): PosesProvider

  @JsName("GetBonePosesForTime")
  public open fun getBonePosesForTime(
    boneNames: Array<String>,
    time: Number,
    extractRootMotion: Boolean,
    poses: Array<Transform>,
    previewMesh: SkeletalMesh,
  ): PosesProvider

  @JsName("GetFrameAtTime")
  public open fun getFrameAtTime(time: Number, frame: Number): FrameProvider

  @JsName("GetNumFrames")
  public open fun getNumFrames(numFrames: Number): NumFramesProvider

  @JsName("GetNumKeys")
  public open fun getNumKeys(numKeys: Number): NumKeysProvider

  @JsName("GetRateScale")
  public open fun getRateScale(rateScale: Number): RateScaleProvider

  @JsName("GetRawTrackData")
  public open fun getRawTrackData(
    trackName: String,
    positionKeys: Array<Vector>,
    rotationKeys: Array<Quat>,
    scalingKeys: Array<Vector>,
  ): Object98

  @JsName("GetRawTrackPositionData")
  public open fun getRawTrackPositionData(trackName: String, positionData: Array<Vector>):
      PositionDataProvider

  @JsName("GetRawTrackRotationData")
  public open fun getRawTrackRotationData(trackName: String, rotationData: Array<Quat>):
      RotationDataProvider

  @JsName("GetRawTrackScaleData")
  public open fun getRawTrackScaleData(trackName: String, scaleData: Array<Vector>):
      ScaleDataProvider

  @JsName("GetSequenceLength")
  public open fun getSequenceLength(length: Number): LengthProvider

  @JsName("GetTimeAtFrame")
  public open fun getTimeAtFrame(frame: Number, time: Number): TimeProvider

  @JsName("IsValidAnimNotifyTrackName")
  public open fun isValidAnimNotifyTrackName(notifyTrackName: String): Boolean

  @JsName("IsValidRawAnimationTrackName")
  public open fun isValidRawAnimationTrackName(trackName: String): Boolean

  @JsName("IsValidTime")
  public open fun isValidTime(time: Number, isValid: Boolean): IsValidProvider

  @JsName("RemoveAllAnimationNotifyTracks")
  public open fun removeAllAnimationNotifyTracks(): Unit

  @JsName("RemoveAnimationNotifyEventsByName")
  public open fun removeAnimationNotifyEventsByName(notifyName: String): Number

  @JsName("RemoveAnimationNotifyEventsByTrack")
  public open fun removeAnimationNotifyEventsByTrack(notifyTrackName: String): Number

  @JsName("RemoveAnimationNotifyTrack")
  public open fun removeAnimationNotifyTrack(notifyTrackName: String): Unit

  @JsName("ReplaceAnimNotifies")
  public open fun replaceAnimNotifies(
    oldNotifyClass: UnrealEngineClass,
    newNotifyClass: UnrealEngineClass,
    onNotifyReplaced: UnrealEngineDelegate<(OldNotify: AnimNotify, NewNotify: AnimNotify) -> Unit>,
  ): Unit

  @JsName("ReplaceAnimNotifyStates")
  public open fun replaceAnimNotifyStates(
    oldNotifyClass: UnrealEngineClass,
    newNotifyClass: UnrealEngineClass,
    onNotifyStateReplaced: UnrealEngineDelegate<(OldNotifyState: AnimNotifyState,
        NewNotifyState: AnimNotifyState) -> Unit>,
  ): Unit

  @JsName("SetRateScale")
  public open fun setRateScale(rateScale: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSequenceBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSequenceBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSequenceBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSequenceBase

    @JsName("C")
    public fun copy(other: UObject): AnimSequenceBase

    @JsName("C")
    public fun copy(other: Any): AnimSequenceBase

    @JsName("ReplaceAnimNotifyClass")
    public fun replaceAnimNotifyClass(
      sequence: AnimSequenceBase,
      notifyName: String,
      newNotifyName: String,
      newNotifyClass: UObject,
    ): Number

    @JsName("AddTransformAttribute")
    public fun addTransformAttribute(
      animSequenceBase: AnimSequenceBase,
      attributeName: String,
      boneName: String,
      keys: Array<Number>,
      values: Array<Transform>,
    ): Boolean

    @JsName("GetAnimPoseAtFrame")
    public fun getAnimPoseAtFrame(
      animationSequenceBase: AnimSequenceBase,
      frameIndex: Number,
      evaluationOptions: AnimPoseEvaluationOptions,
      pose: AnimPose,
    ): AnimPoseProvider

    @JsName("GetAnimPoseAtTime")
    public fun getAnimPoseAtTime(
      animationSequenceBase: AnimSequenceBase,
      time: Number,
      evaluationOptions: AnimPoseEvaluationOptions,
      pose: AnimPose,
    ): AnimPoseProvider

    @JsName("AddAnimationNotifyEvent")
    public fun addAnimationNotifyEvent(
      animationSequenceBase: AnimSequenceBase,
      notifyTrackName: String,
      startTime: Number,
      notifyClass: UnrealEngineClass,
    ): AnimNotify

    @JsName("AddAnimationNotifyEventObject")
    public fun addAnimationNotifyEventObject(
      animationSequenceBase: AnimSequenceBase,
      startTime: Number,
      notify: AnimNotify,
      notifyTrackName: String,
    ): Unit

    @JsName("AddAnimationNotifyStateEvent")
    public fun addAnimationNotifyStateEvent(
      animationSequenceBase: AnimSequenceBase,
      notifyTrackName: String,
      startTime: Number,
      duration: Number,
      notifyStateClass: UnrealEngineClass,
    ): AnimNotifyState

    @JsName("AddAnimationNotifyStateEventObject")
    public fun addAnimationNotifyStateEventObject(
      animationSequenceBase: AnimSequenceBase,
      startTime: Number,
      duration: Number,
      notifyState: AnimNotifyState,
      notifyTrackName: String,
    ): Unit

    @JsName("AddAnimationNotifyTrack")
    public fun addAnimationNotifyTrack(
      animationSequenceBase: AnimSequenceBase,
      notifyTrackName: String,
      trackColor: LinearColor,
    ): Unit

    @JsName("CopyAnimNotifiesFromSequence")
    public fun copyAnimNotifiesFromSequence(
      sourceAnimationSequenceBase: AnimSequenceBase,
      destinationAnimationSequenceBase: AnimSequenceBase,
      deleteExistingNotifies: Boolean,
    ): Unit

    @JsName("EvaluateRootBoneTimecodeAttributesAtTime")
    public fun evaluateRootBoneTimecodeAttributesAtTime(
      animationSequenceBase: AnimSequenceBase,
      evalTime: Number,
      outQualifiedFrameTime: QualifiedFrameTime,
    ): Object84

    @JsName("FindBonePathToRoot")
    public fun findBonePathToRoot(
      animationSequenceBase: AnimSequenceBase,
      boneName: String,
      bonePath: Array<String>,
    ): BonePathProvider

    @JsName("GetAnimationNotifyEventNames")
    public fun getAnimationNotifyEventNames(animationSequenceBase: AnimSequenceBase,
        eventNames: Array<String>): EventNamesProvider

    @JsName("GetAnimationNotifyEvents")
    public fun getAnimationNotifyEvents(animationSequenceBase: AnimSequenceBase,
        notifyEvents: Array<AnimNotifyEvent>): NotifyEventsProvider

    @JsName("GetAnimationNotifyEventsForTrack")
    public fun getAnimationNotifyEventsForTrack(
      animationSequenceBase: AnimSequenceBase,
      notifyTrackName: String,
      events: Array<AnimNotifyEvent>,
    ): EventsProvider

    @JsName("GetAnimationNotifyTrackNames")
    public fun getAnimationNotifyTrackNames(animationSequenceBase: AnimSequenceBase,
        trackNames: Array<String>): TrackNamesProvider

    @JsName("GetAnimationTrackNames")
    public fun getAnimationTrackNames(animationSequenceBase: AnimSequenceBase,
        trackNames: Array<String>): TrackNamesProvider

    @JsName("GetBonePoseForFrame")
    public fun getBonePoseForFrame(
      animationSequenceBase: AnimSequenceBase,
      boneName: String,
      frame: Number,
      extractRootMotion: Boolean,
      pose: Transform,
    ): TransformProvider

    @JsName("GetBonePoseForTime")
    public fun getBonePoseForTime(
      animationSequenceBase: AnimSequenceBase,
      boneName: String,
      time: Number,
      extractRootMotion: Boolean,
      pose: Transform,
    ): TransformProvider

    @JsName("GetBonePosesForFrame")
    public fun getBonePosesForFrame(
      animationSequenceBase: AnimSequenceBase,
      boneNames: Array<String>,
      frame: Number,
      extractRootMotion: Boolean,
      poses: Array<Transform>,
      previewMesh: SkeletalMesh,
    ): PosesProvider

    @JsName("GetBonePosesForTime")
    public fun getBonePosesForTime(
      animationSequenceBase: AnimSequenceBase,
      boneNames: Array<String>,
      time: Number,
      extractRootMotion: Boolean,
      poses: Array<Transform>,
      previewMesh: SkeletalMesh,
    ): PosesProvider

    @JsName("GetFrameAtTime")
    public fun getFrameAtTime(
      animationSequenceBase: AnimSequenceBase,
      time: Number,
      frame: Number,
    ): FrameProvider

    @JsName("GetNumFrames")
    public fun getNumFrames(animationSequenceBase: AnimSequenceBase, numFrames: Number):
        NumFramesProvider

    @JsName("GetNumKeys")
    public fun getNumKeys(animationSequenceBase: AnimSequenceBase, numKeys: Number): NumKeysProvider

    @JsName("GetRateScale")
    public fun getRateScale(animationSequenceBase: AnimSequenceBase, rateScale: Number):
        RateScaleProvider

    @JsName("GetRawTrackData")
    public fun getRawTrackData(
      animationSequenceBase: AnimSequenceBase,
      trackName: String,
      positionKeys: Array<Vector>,
      rotationKeys: Array<Quat>,
      scalingKeys: Array<Vector>,
    ): Object98

    @JsName("GetRawTrackPositionData")
    public fun getRawTrackPositionData(
      animationSequenceBase: AnimSequenceBase,
      trackName: String,
      positionData: Array<Vector>,
    ): PositionDataProvider

    @JsName("GetRawTrackRotationData")
    public fun getRawTrackRotationData(
      animationSequenceBase: AnimSequenceBase,
      trackName: String,
      rotationData: Array<Quat>,
    ): RotationDataProvider

    @JsName("GetRawTrackScaleData")
    public fun getRawTrackScaleData(
      animationSequenceBase: AnimSequenceBase,
      trackName: String,
      scaleData: Array<Vector>,
    ): ScaleDataProvider

    @JsName("GetSequenceLength")
    public fun getSequenceLength(animationSequenceBase: AnimSequenceBase, length: Number):
        LengthProvider

    @JsName("GetTimeAtFrame")
    public fun getTimeAtFrame(
      animationSequenceBase: AnimSequenceBase,
      frame: Number,
      time: Number,
    ): TimeProvider

    @JsName("IsValidAnimNotifyTrackName")
    public fun isValidAnimNotifyTrackName(animationSequenceBase: AnimSequenceBase,
        notifyTrackName: String): Boolean

    @JsName("IsValidRawAnimationTrackName")
    public fun isValidRawAnimationTrackName(animationSequenceBase: AnimSequenceBase,
        trackName: String): Boolean

    @JsName("IsValidTime")
    public fun isValidTime(
      animationSequenceBase: AnimSequenceBase,
      time: Number,
      isValid: Boolean,
    ): IsValidProvider

    @JsName("RemoveAllAnimationNotifyTracks")
    public fun removeAllAnimationNotifyTracks(animationSequenceBase: AnimSequenceBase): Unit

    @JsName("RemoveAnimationNotifyEventsByName")
    public fun removeAnimationNotifyEventsByName(animationSequenceBase: AnimSequenceBase,
        notifyName: String): Number

    @JsName("RemoveAnimationNotifyEventsByTrack")
    public fun removeAnimationNotifyEventsByTrack(animationSequenceBase: AnimSequenceBase,
        notifyTrackName: String): Number

    @JsName("RemoveAnimationNotifyTrack")
    public fun removeAnimationNotifyTrack(animationSequenceBase: AnimSequenceBase,
        notifyTrackName: String): Unit

    @JsName("ReplaceAnimNotifies")
    public fun replaceAnimNotifies(
      animationSequenceBase: AnimSequenceBase,
      oldNotifyClass: UnrealEngineClass,
      newNotifyClass: UnrealEngineClass,
      onNotifyReplaced: UnrealEngineDelegate<(OldNotify: AnimNotify,
          NewNotify: AnimNotify) -> Unit>,
    ): Unit

    @JsName("ReplaceAnimNotifyStates")
    public fun replaceAnimNotifyStates(
      animationSequenceBase: AnimSequenceBase,
      oldNotifyClass: UnrealEngineClass,
      newNotifyClass: UnrealEngineClass,
      onNotifyStateReplaced: UnrealEngineDelegate<(OldNotifyState: AnimNotifyState,
          NewNotifyState: AnimNotifyState) -> Unit>,
    ): Unit

    @JsName("SetRateScale")
    public fun setRateScale(animationSequenceBase: AnimSequenceBase, rateScale: Number): Unit
  }
}

public open external class AnimBoneCompressionCodec(
  outer: UObject,
) : UObject {
  @JsName("Description")
  public open var description: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBoneCompressionCodec

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBoneCompressionCodec

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBoneCompressionCodec

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBoneCompressionCodec

    @JsName("C")
    public fun copy(other: UObject): AnimBoneCompressionCodec

    @JsName("C")
    public fun copy(other: Any): AnimBoneCompressionCodec
  }
}

public open external class AnimBoneCompressionSettings(
  outer: UObject,
) : UObject {
  @JsName("Codecs")
  public open var codecs: Array<AnimBoneCompressionCodec>

  @JsName("ErrorThreshold")
  public open var errorThreshold: Number

  @JsName("bForceBelowThreshold")
  public open var forceBelowThreshold: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBoneCompressionSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBoneCompressionSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBoneCompressionSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBoneCompressionSettings

    @JsName("C")
    public fun copy(other: UObject): AnimBoneCompressionSettings

    @JsName("C")
    public fun copy(other: Any): AnimBoneCompressionSettings
  }
}

public open external class AnimCurveCompressionCodec(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCurveCompressionCodec

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCurveCompressionCodec

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCurveCompressionCodec

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCurveCompressionCodec

    @JsName("C")
    public fun copy(other: UObject): AnimCurveCompressionCodec

    @JsName("C")
    public fun copy(other: Any): AnimCurveCompressionCodec
  }
}

public open external class AnimCurveCompressionSettings(
  outer: UObject,
) : UObject {
  @JsName("Codec")
  public open var codec: AnimCurveCompressionCodec

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimCurveCompressionSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimCurveCompressionSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimCurveCompressionSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimCurveCompressionSettings

    @JsName("C")
    public fun copy(other: UObject): AnimCurveCompressionSettings

    @JsName("C")
    public fun copy(other: Any): AnimCurveCompressionSettings
  }
}

@JsName("EAdditiveAnimationType")
public external object AdditiveAnimationType {
  @JsName("AAT_None")
  public var None: String

  @JsName("AAT_LocalSpaceBase")
  public var LocalSpaceBase: String

  @JsName("AAT_RotationOffsetMeshSpace")
  public var RotationOffsetMeshSpace: String

  @JsName("AAT_MAX")
  public var Max: String
}

@JsName("EAdditiveBasePoseType")
public external object AdditiveBasePoseType {
  @JsName("ABPT_None")
  public var None: String

  @JsName("ABPT_RefPose")
  public var RefPose: String

  @JsName("ABPT_AnimScaled")
  public var AnimScaled: String

  @JsName("ABPT_AnimFrame")
  public var AnimFrame: String

  @JsName("ABPT_LocalAnimFrame")
  public var LocalAnimFrame: String

  @JsName("ABPT_MAX")
  public var Max: String
}

@JsName("EAnimInterpolationType")
public external object AnimInterpolationType {
  public var Linear: String

  public var Step: String

  @JsName("EAnimInterpolationType_MAX")
  public var Max: String
}

public open external class CustomAttribute {
  @JsName("Name")
  public open var name: String

  @JsName("VariantType")
  public open var variantType: Number

  @JsName("Times")
  public open var times: Array<Number>

  public open fun clone(): CustomAttribute

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomAttribute

    @JsName("C")
    public fun copy(other: Any): CustomAttribute
  }
}

public open external class CustomAttributePerBoneData {
  @JsName("BoneTreeIndex")
  public open var boneTreeIndex: Number

  @JsName("Attributes")
  public open var attributes: Array<CustomAttribute>

  public open fun clone(): CustomAttributePerBoneData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomAttributePerBoneData

    @JsName("C")
    public fun copy(other: Any): CustomAttributePerBoneData
  }
}

@JsName("T$117")
public external interface VirtualBoneNameProvider {
  @JsName("VirtualBoneName")
  public var virtualBoneName: String
}

@JsName("T$118")
public external interface ExistsProvider {
  @JsName("bExists")
  public var exists: Boolean
}

@JsName("T$119")
public external interface AdditiveAnimationTypeProvider {
  @JsName("AdditiveAnimationType")
  public var additiveAnimationType: String
}

@JsName("T$120")
public external interface AdditiveBasePoseTypeProvider {
  @JsName("AdditiveBasePoseType")
  public var additiveBasePoseType: String
}

@JsName("T$121")
public external interface CurveNamesProvider {
  @JsName("CurveNames")
  public var curveNames: Array<String>
}

@JsName("T$122")
public external interface InterpolationTypeProvider {
  @JsName("InterpolationType")
  public var interpolationType: String
}

@JsName("T$123")
public external interface MarkersProvider {
  @JsName("Markers")
  public var markers: Array<AnimSyncMarker>
}

@JsName("T$125")
public external interface AnimBoneCompressionSettingsProvider {
  @JsName("CompressionSettings")
  public var compressionSettings: AnimBoneCompressionSettings
}

@JsName("T$126")
public external interface AnimBoneCompressionCurveProvider {
  @JsName("CompressionSettings")
  public var compressionSettings: AnimCurveCompressionSettings
}

@JsName("T$127")
public external interface Object127 {
  @JsName("Times")
  public var times: Array<Number>

  @JsName("Values")
  public var values: Array<Number>
}

@JsName("T$128")
public external interface LockTypeProvider {
  @JsName("LockType")
  public var lockType: String
}

@JsName("T$129")
public external interface Object129 {
  @JsName("Times")
  public var times: Array<Number>

  @JsName("Values")
  public var values: Array<Transform>
}

@JsName("T$130")
public external interface MarkerNamesProvider {
  @JsName("MarkerNames")
  public var markerNames: Array<String>
}

@JsName("T$131")
public external interface Object131 {
  @JsName("Times")
  public var times: Array<Number>

  @JsName("Values")
  public var values: Array<Vector>
}

public open external class AnimSequence(
  outer: UObject,
) : AnimSequenceBase {
  @JsName("ImportFileFramerate")
  public open var importFileFramerate: Number

  @JsName("ImportResampleFramerate")
  public open var importResampleFramerate: Number

  @JsName("NumFrames")
  public open var numFrames: Number

  @JsName("NumberOfKeys")
  public open var numberOfKeys: Number

  @JsName("SamplingFrameRate")
  public open var samplingFrameRate: FrameRate

  @JsName("TrackToSkeletonMapTable")
  public open var trackToSkeletonMapTable: Array<TrackToSkeletonMap>

  @JsName("RawDataGuid")
  public open var rawDataGuid: Guid

  @JsName("AnimationTrackNames")
  public open var animationTrackNames: Array<String>

  @JsName("bAllowFrameStripping")
  public open var allowFrameStripping: Boolean

  @JsName("CompressionErrorThresholdScale")
  public open var compressionErrorThresholdScale: Number

  @JsName("BoneCompressionSettings")
  public open var boneCompressionSettings: AnimBoneCompressionSettings

  @JsName("CurveCompressionSettings")
  public open var curveCompressionSettings: AnimCurveCompressionSettings

  @JsName("AdditiveAnimType")
  public open var additiveAnimType: String

  @JsName("RefPoseType")
  public open var refPoseType: String

  @JsName("RefFrameIndex")
  public open var refFrameIndex: Number

  @JsName("RefPoseSeq")
  public open var refPoseSeq: AnimSequence

  @JsName("RetargetSource")
  public open var retargetSource: String

  @JsName("RetargetSourceAsset")
  public open var retargetSourceAsset: SkeletalMesh

  @JsName("RetargetSourceAssetReferencePose")
  public open var retargetSourceAssetReferencePose: Array<Transform>

  @JsName("Interpolation")
  public open var interpolation: String

  @JsName("bEnableRootMotion")
  public open var enableRootMotion: Boolean

  @JsName("RootMotionRootLock")
  public open var rootMotionRootLock: String

  @JsName("bForceRootLock")
  public open var forceRootLock: Boolean

  @JsName("bUseNormalizedRootMotionScale")
  public open var useNormalizedRootMotionScale: Boolean

  @JsName("bRootMotionSettingsCopiedFromMontage")
  public open var rootMotionSettingsCopiedFromMontage: Boolean

  @JsName("CompressCommandletVersion")
  public open var compressCommandletVersion: Number

  @JsName("bDoNotOverrideCompression")
  public open var doNotOverrideCompression: Boolean

  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("SourceFilePath")
  public open var sourceFilePath: String

  @JsName("SourceFileTimestamp")
  public open var sourceFileTimestamp: String

  @JsName("bNeedsRebake")
  public open var needsRebake: Boolean

  @JsName("AuthoredSyncMarkers")
  public open var authoredSyncMarkers: Array<AnimSyncMarker>

  @JsName("TargetFrameRate")
  public open var targetFrameRate: FrameRate

  @JsName("NumberOfSampledKeys")
  public open var numberOfSampledKeys: Number

  @JsName("NumberOfSampledFrames")
  public open var numberOfSampledFrames: Number

  @JsName("ResampledAnimationTrackData")
  public open var resampledAnimationTrackData: Array<BoneAnimationTrack>

  @JsName("PerBoneCustomAttributeData")
  public open var perBoneCustomAttributeData: Array<CustomAttributePerBoneData>

  @JsName("AttributeCurves")
  public open var attributeCurves: Any

  @JsName("RemoveCustomAttribute")
  public open fun removeCustomAttribute(boneName: String, attributeName: String): Unit

  @JsName("RemoveAllCustomAttributesForBone")
  public open fun removeAllCustomAttributesForBone(boneName: String): Unit

  @JsName("RemoveAllCustomAttributes")
  public open fun removeAllCustomAttributes(): Unit

  @JsName("AddBoneStringCustomAttribute")
  public open fun addBoneStringCustomAttribute(
    boneName: String,
    attributeName: String,
    timeKeys: Array<Number>,
    valueKeys: Array<String>,
  ): Unit

  @JsName("AddBoneIntegerCustomAttribute")
  public open fun addBoneIntegerCustomAttribute(
    boneName: String,
    attributeName: String,
    timeKeys: Array<Number>,
    valueKeys: Array<Number>,
  ): Unit

  @JsName("AddBoneFloatCustomAttribute")
  public open fun addBoneFloatCustomAttribute(
    boneName: String,
    attributeName: String,
    timeKeys: Array<Number>,
    valueKeys: Array<Number>,
  ): Unit

  @JsName("AddAnimationSyncMarker")
  public open fun addAnimationSyncMarker(
    markerName: String,
    time: Number,
    notifyTrackName: String,
  ): Unit

  @JsName("AddCurve")
  public open fun addCurve(
    curveName: String,
    curveType: String,
    metaDataCurve: Boolean,
  ): Unit

  @JsName("AddFloatCurveKey")
  public open fun addFloatCurveKey(
    curveName: String,
    time: Number,
    value: Number,
  ): Unit

  @JsName("AddFloatCurveKeys")
  public open fun addFloatCurveKeys(
    curveName: String,
    times: Array<Number>,
    values: Array<Number>,
  ): Unit

  @JsName("AddTransformationCurveKey")
  public open fun addTransformationCurveKey(
    curveName: String,
    time: Number,
    transform: Transform,
  ): Unit

  @JsName("AddTransformationCurveKeys")
  public open fun addTransformationCurveKeys(
    curveName: String,
    times: Array<Number>,
    transforms: Array<Transform>,
  ): Unit

  @JsName("AddVectorCurveKey")
  public open fun addVectorCurveKey(
    curveName: String,
    time: Number,
    vector: Vector,
  ): Unit

  @JsName("AddVectorCurveKeys")
  public open fun addVectorCurveKeys(
    curveName: String,
    times: Array<Number>,
    vectors: Array<Vector>,
  ): Unit

  @JsName("AddVirtualBone")
  public open fun addVirtualBone(
    sourceBoneName: String,
    targetBoneName: String,
    virtualBoneName: String,
  ): VirtualBoneNameProvider

  @JsName("DoesBoneNameExist")
  public open fun doesBoneNameExist(boneName: String, exists: Boolean): ExistsProvider

  @JsName("DoesCurveExist")
  public open fun doesCurveExist(curveName: String, curveType: String): Boolean

  @JsName("FinalizeBoneAnimation")
  public open fun finalizeBoneAnimation(): Unit

  @JsName("GetAdditiveAnimationType")
  public open fun getAdditiveAnimationType(additiveAnimationType: String):
      AdditiveAnimationTypeProvider

  @JsName("GetAdditiveBasePoseType")
  public open fun getAdditiveBasePoseType(additiveBasePoseType: String):
      AdditiveBasePoseTypeProvider

  @JsName("GetAnimationCurveNames")
  public open fun getAnimationCurveNames(curveType: String, curveNames: Array<String>):
      CurveNamesProvider

  @JsName("GetAnimationInterpolationType")
  public open fun getAnimationInterpolationType(interpolationType: String):
      InterpolationTypeProvider

  @JsName("GetAnimationSyncMarkers")
  public open fun getAnimationSyncMarkers(markers: Array<AnimSyncMarker>): MarkersProvider

  @JsName("GetAnimationSyncMarkersForTrack")
  public open fun getAnimationSyncMarkersForTrack(notifyTrackName: String,
      markers: Array<AnimSyncMarker>): MarkersProvider

  @JsName("GetBoneCompressionSettings")
  public open fun getBoneCompressionSettings(compressionSettings: AnimBoneCompressionSettings):
      AnimBoneCompressionSettingsProvider

  @JsName("GetCurveCompressionSettings")
  public open fun getCurveCompressionSettings(compressionSettings: AnimCurveCompressionSettings):
      AnimBoneCompressionCurveProvider

  @JsName("GetFloatKeys")
  public open fun getFloatKeys(
    curveName: String,
    times: Array<Number>,
    values: Array<Number>,
  ): Object127

  @JsName("GetRootMotionLockType")
  public open fun getRootMotionLockType(lockType: String): LockTypeProvider

  @JsName("GetTransformationKeys")
  public open fun getTransformationKeys(
    curveName: String,
    times: Array<Number>,
    values: Array<Transform>,
  ): Object129

  @JsName("GetUniqueMarkerNames")
  public open fun getUniqueMarkerNames(markerNames: Array<String>): MarkerNamesProvider

  @JsName("GetVectorKeys")
  public open fun getVectorKeys(
    curveName: String,
    times: Array<Number>,
    values: Array<Vector>,
  ): Object131

  @JsName("IsRootMotionEnabled")
  public open fun isRootMotionEnabled(): Boolean

  @JsName("IsRootMotionLockForced")
  public open fun isRootMotionLockForced(): Boolean

  @JsName("IsValidAnimationSyncMarkerName")
  public open fun isValidAnimationSyncMarkerName(markerName: String): Boolean

  @JsName("RemoveAllAnimationSyncMarkers")
  public open fun removeAllAnimationSyncMarkers(): Unit

  @JsName("RemoveAllBoneAnimation")
  public open fun removeAllBoneAnimation(): Unit

  @JsName("RemoveAllCurveData")
  public open fun removeAllCurveData(): Unit

  @JsName("RemoveAllVirtualBones")
  public open fun removeAllVirtualBones(): Unit

  @JsName("RemoveAnimationSyncMarkersByName")
  public open fun removeAnimationSyncMarkersByName(markerName: String): Number

  @JsName("RemoveAnimationSyncMarkersByTrack")
  public open fun removeAnimationSyncMarkersByTrack(notifyTrackName: String): Number

  @JsName("RemoveBoneAnimation")
  public open fun removeBoneAnimation(
    boneName: String,
    includeChildren: Boolean,
    finalize: Boolean,
  ): Unit

  @JsName("RemoveCurve")
  public open fun removeCurve(curveName: String, removeNameFromSkeleton: Boolean): Unit

  @JsName("RemoveVirtualBone")
  public open fun removeVirtualBone(virtualBoneName: String): Unit

  @JsName("RemoveVirtualBones")
  public open fun removeVirtualBones(virtualBoneNames: Array<String>): Unit

  @JsName("SetAdditiveAnimationType")
  public open fun setAdditiveAnimationType(additiveAnimationType: String): Unit

  @JsName("SetAdditiveBasePoseType")
  public open fun setAdditiveBasePoseType(additiveBasePoseType: String): Unit

  @JsName("SetAnimationInterpolationType")
  public open fun setAnimationInterpolationType(interpolationType: String): Unit

  @JsName("SetBoneCompressionSettings")
  public open fun setBoneCompressionSettings(compressionSettings: AnimBoneCompressionSettings): Unit

  @JsName("SetCurveCompressionSettings")
  public open fun setCurveCompressionSettings(compressionSettings: AnimCurveCompressionSettings):
      Unit

  @JsName("SetIsRootMotionLockForced")
  public open fun setIsRootMotionLockForced(forced: Boolean): Unit

  @JsName("SetRootMotionEnabled")
  public open fun setRootMotionEnabled(enabled: Boolean): Unit

  @JsName("SetRootMotionLockType")
  public open fun setRootMotionLockType(rootMotionLockType: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSequence

    @JsName("C")
    public fun copy(other: UObject): AnimSequence

    @JsName("C")
    public fun copy(other: Any): AnimSequence

    @JsName("AddAnimationSyncMarker")
    public fun addAnimationSyncMarker(
      animationSequence: AnimSequence,
      markerName: String,
      time: Number,
      notifyTrackName: String,
    ): Unit

    @JsName("AddCurve")
    public fun addCurve(
      animationSequence: AnimSequence,
      curveName: String,
      curveType: String,
      metaDataCurve: Boolean,
    ): Unit

    @JsName("AddFloatCurveKey")
    public fun addFloatCurveKey(
      animationSequence: AnimSequence,
      curveName: String,
      time: Number,
      value: Number,
    ): Unit

    @JsName("AddFloatCurveKeys")
    public fun addFloatCurveKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      values: Array<Number>,
    ): Unit

    @JsName("AddTransformationCurveKey")
    public fun addTransformationCurveKey(
      animationSequence: AnimSequence,
      curveName: String,
      time: Number,
      transform: Transform,
    ): Unit

    @JsName("AddTransformationCurveKeys")
    public fun addTransformationCurveKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      transforms: Array<Transform>,
    ): Unit

    @JsName("AddVectorCurveKey")
    public fun addVectorCurveKey(
      animationSequence: AnimSequence,
      curveName: String,
      time: Number,
      vector: Vector,
    ): Unit

    @JsName("AddVectorCurveKeys")
    public fun addVectorCurveKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      vectors: Array<Vector>,
    ): Unit

    @JsName("AddVirtualBone")
    public fun addVirtualBone(
      animationSequence: AnimSequence,
      sourceBoneName: String,
      targetBoneName: String,
      virtualBoneName: String,
    ): VirtualBoneNameProvider

    @JsName("DoesBoneNameExist")
    public fun doesBoneNameExist(
      animationSequence: AnimSequence,
      boneName: String,
      exists: Boolean,
    ): ExistsProvider

    @JsName("DoesCurveExist")
    public fun doesCurveExist(
      animationSequence: AnimSequence,
      curveName: String,
      curveType: String,
    ): Boolean

    @JsName("FinalizeBoneAnimation")
    public fun finalizeBoneAnimation(animationSequence: AnimSequence): Unit

    @JsName("GetAdditiveAnimationType")
    public fun getAdditiveAnimationType(animationSequence: AnimSequence,
        additiveAnimationType: String): AdditiveAnimationTypeProvider

    @JsName("GetAdditiveBasePoseType")
    public fun getAdditiveBasePoseType(animationSequence: AnimSequence,
        additiveBasePoseType: String): AdditiveBasePoseTypeProvider

    @JsName("GetAnimationCurveNames")
    public fun getAnimationCurveNames(
      animationSequence: AnimSequence,
      curveType: String,
      curveNames: Array<String>,
    ): CurveNamesProvider

    @JsName("GetAnimationInterpolationType")
    public fun getAnimationInterpolationType(animationSequence: AnimSequence,
        interpolationType: String): InterpolationTypeProvider

    @JsName("GetAnimationSyncMarkers")
    public fun getAnimationSyncMarkers(animationSequence: AnimSequence,
        markers: Array<AnimSyncMarker>): MarkersProvider

    @JsName("GetAnimationSyncMarkersForTrack")
    public fun getAnimationSyncMarkersForTrack(
      animationSequence: AnimSequence,
      notifyTrackName: String,
      markers: Array<AnimSyncMarker>,
    ): MarkersProvider

    @JsName("GetBoneCompressionSettings")
    public fun getBoneCompressionSettings(animationSequence: AnimSequence,
        compressionSettings: AnimBoneCompressionSettings): AnimBoneCompressionSettingsProvider

    @JsName("GetCurveCompressionSettings")
    public fun getCurveCompressionSettings(animationSequence: AnimSequence,
        compressionSettings: AnimCurveCompressionSettings): AnimBoneCompressionCurveProvider

    @JsName("GetFloatKeys")
    public fun getFloatKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      values: Array<Number>,
    ): Object127

    @JsName("GetRootMotionLockType")
    public fun getRootMotionLockType(animationSequence: AnimSequence, lockType: String):
        LockTypeProvider

    @JsName("GetTransformationKeys")
    public fun getTransformationKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      values: Array<Transform>,
    ): Object129

    @JsName("GetUniqueMarkerNames")
    public fun getUniqueMarkerNames(animationSequence: AnimSequence, markerNames: Array<String>):
        MarkerNamesProvider

    @JsName("GetVectorKeys")
    public fun getVectorKeys(
      animationSequence: AnimSequence,
      curveName: String,
      times: Array<Number>,
      values: Array<Vector>,
    ): Object131

    @JsName("IsRootMotionEnabled")
    public fun isRootMotionEnabled(animationSequence: AnimSequence): Boolean

    @JsName("IsRootMotionLockForced")
    public fun isRootMotionLockForced(animationSequence: AnimSequence): Boolean

    @JsName("IsValidAnimationSyncMarkerName")
    public fun isValidAnimationSyncMarkerName(animationSequence: AnimSequence, markerName: String):
        Boolean

    @JsName("RemoveAllAnimationSyncMarkers")
    public fun removeAllAnimationSyncMarkers(animationSequence: AnimSequence): Unit

    @JsName("RemoveAllBoneAnimation")
    public fun removeAllBoneAnimation(animationSequence: AnimSequence): Unit

    @JsName("RemoveAllCurveData")
    public fun removeAllCurveData(animationSequence: AnimSequence): Unit

    @JsName("RemoveAllVirtualBones")
    public fun removeAllVirtualBones(animationSequence: AnimSequence): Unit

    @JsName("RemoveAnimationSyncMarkersByName")
    public fun removeAnimationSyncMarkersByName(animationSequence: AnimSequence,
        markerName: String): Number

    @JsName("RemoveAnimationSyncMarkersByTrack")
    public fun removeAnimationSyncMarkersByTrack(animationSequence: AnimSequence,
        notifyTrackName: String): Number

    @JsName("RemoveBoneAnimation")
    public fun removeBoneAnimation(
      animationSequence: AnimSequence,
      boneName: String,
      includeChildren: Boolean,
      finalize: Boolean,
    ): Unit

    @JsName("RemoveCurve")
    public fun removeCurve(
      animationSequence: AnimSequence,
      curveName: String,
      removeNameFromSkeleton: Boolean,
    ): Unit

    @JsName("RemoveVirtualBone")
    public fun removeVirtualBone(animationSequence: AnimSequence, virtualBoneName: String): Unit

    @JsName("RemoveVirtualBones")
    public fun removeVirtualBones(animationSequence: AnimSequence, virtualBoneNames: Array<String>):
        Unit

    @JsName("SetAdditiveAnimationType")
    public fun setAdditiveAnimationType(animationSequence: AnimSequence,
        additiveAnimationType: String): Unit

    @JsName("SetAdditiveBasePoseType")
    public fun setAdditiveBasePoseType(animationSequence: AnimSequence,
        additiveBasePoseType: String): Unit

    @JsName("SetAnimationInterpolationType")
    public fun setAnimationInterpolationType(animationSequence: AnimSequence,
        interpolationType: String): Unit

    @JsName("SetBoneCompressionSettings")
    public fun setBoneCompressionSettings(animationSequence: AnimSequence,
        compressionSettings: AnimBoneCompressionSettings): Unit

    @JsName("SetCurveCompressionSettings")
    public fun setCurveCompressionSettings(animationSequence: AnimSequence,
        compressionSettings: AnimCurveCompressionSettings): Unit

    @JsName("SetIsRootMotionLockForced")
    public fun setIsRootMotionLockForced(animationSequence: AnimSequence, forced: Boolean): Unit

    @JsName("SetRootMotionEnabled")
    public fun setRootMotionEnabled(animationSequence: AnimSequence, enabled: Boolean): Unit

    @JsName("SetRootMotionLockType")
    public fun setRootMotionLockType(animationSequence: AnimSequence, rootMotionLockType: String):
        Unit
  }
}

@JsName("T$139")
public external interface PoseNamesProvider {
  @JsName("PoseNames")
  public var poseNames: Array<String>
}

public open external class PoseAsset(
  outer: UObject,
) : AnimationAsset {
  @JsName("PoseContainer")
  public open var poseContainer: PoseDataContainer

  @JsName("bAdditivePose")
  public open var additivePose: Boolean

  @JsName("BasePoseIndex")
  public open var basePoseIndex: Number

  @JsName("RetargetSource")
  public open var retargetSource: String

  @JsName("RetargetSourceAsset")
  public open var retargetSourceAsset: SkeletalMesh

  @JsName("RetargetSourceAssetReferencePose")
  public open var retargetSourceAssetReferencePose: Array<Transform>

  @JsName("SourceAnimation")
  public open var sourceAnimation: AnimSequence

  @JsName("SourceAnimationRawDataGUID")
  public open var sourceAnimationRawDataGuid: Guid

  @JsName("UpdatePoseFromAnimation")
  public open fun updatePoseFromAnimation(animSequence: AnimSequence): Unit

  @JsName("RenamePose")
  public open fun renamePose(originalPoseName: String, newPoseName: String): Unit

  @JsName("GetPoseNames")
  public open fun getPoseNames(poseNames: Array<String>): PoseNamesProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PoseAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PoseAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PoseAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PoseAsset

    @JsName("C")
    public fun copy(other: UObject): PoseAsset

    @JsName("C")
    public fun copy(other: Any): PoseAsset
  }
}

@JsName("T$140")
public external interface MetaDataInstanceProvider {
  @JsName("MetaDataInstance")
  public var metaDataInstance: AnimMetaData
}

@JsName("T$141")
public external interface MetaDataProvider {
  @JsName("MetaData")
  public var metaData: Array<AnimMetaData>
}

@JsName("T$142")
public external interface MetaDataOfClassProvider {
  @JsName("MetaDataOfClass")
  public var metaDataOfClass: Array<AnimMetaData>
}

public open external class AnimationAsset(
  outer: UObject,
) : UObject {
  @JsName("Skeleton")
  public open var skeleton: Skeleton

  @JsName("MetaData")
  public open var metaData: Array<AnimMetaData>

  @JsName("ParentAsset")
  public open var parentAsset: AnimationAsset

  @JsName("ChildrenAssets")
  public open var childrenAssets: Array<AnimationAsset>

  @JsName("AssetMappingTable")
  public open var assetMappingTable: AssetMappingTable

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("PreviewPoseAsset")
  public open var previewPoseAsset: PoseAsset

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  @JsName("SetPreviewSkeletalMesh")
  public open fun setPreviewSkeletalMesh(previewMesh: SkeletalMesh): Unit

  @JsName("GetPlayLength")
  public open fun getPlayLength(): Number

  @JsName("CreateAttributeIdentifier")
  public open fun createAttributeIdentifier(
    attributeName: String,
    boneName: String,
    attributeType: ScriptStruct,
    validateExistsOnAsset: Boolean,
  ): AnimationAttributeIdentifier

  @JsName("GetSkeleton")
  public open fun getSkeleton(): Skeleton

  @JsName("AddMetaData")
  public open fun addMetaData(metaDataClass: UnrealEngineClass, metaDataInstance: AnimMetaData):
      MetaDataInstanceProvider

  @JsName("AddMetaDataObject")
  public open fun addMetaDataObject(metaDataObject: AnimMetaData): Unit

  @JsName("ContainsMetaDataOfClass")
  public open fun containsMetaDataOfClass(metaDataClass: UnrealEngineClass): Boolean

  @JsName("GetMetaData")
  public open fun getMetaData(metaData: Array<AnimMetaData>): MetaDataProvider

  @JsName("GetMetaDataOfClass")
  public open fun getMetaDataOfClass(metaDataClass: UnrealEngineClass,
      metaDataOfClass: Array<AnimMetaData>): MetaDataOfClassProvider

  @JsName("RemoveAllMetaData")
  public open fun removeAllMetaData(): Unit

  @JsName("RemoveMetaData")
  public open fun removeMetaData(metaDataObject: AnimMetaData): Unit

  @JsName("RemoveMetaDataOfClass")
  public open fun removeMetaDataOfClass(metaDataClass: UnrealEngineClass): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationAsset

    @JsName("C")
    public fun copy(other: UObject): AnimationAsset

    @JsName("C")
    public fun copy(other: Any): AnimationAsset

    @JsName("CreateAttributeIdentifier")
    public fun createAttributeIdentifier(
      animationAsset: AnimationAsset,
      attributeName: String,
      boneName: String,
      attributeType: ScriptStruct,
      validateExistsOnAsset: Boolean,
    ): AnimationAttributeIdentifier

    @JsName("GetSkeleton")
    public fun getSkeleton(inAsset: AnimationAsset): Skeleton

    @JsName("AddMetaData")
    public fun addMetaData(
      animationAsset: AnimationAsset,
      metaDataClass: UnrealEngineClass,
      metaDataInstance: AnimMetaData,
    ): MetaDataInstanceProvider

    @JsName("AddMetaDataObject")
    public fun addMetaDataObject(animationAsset: AnimationAsset, metaDataObject: AnimMetaData): Unit

    @JsName("ContainsMetaDataOfClass")
    public fun containsMetaDataOfClass(animationAsset: AnimationAsset,
        metaDataClass: UnrealEngineClass): Boolean

    @JsName("GetMetaData")
    public fun getMetaData(animationAsset: AnimationAsset, metaData: Array<AnimMetaData>):
        MetaDataProvider

    @JsName("GetMetaDataOfClass")
    public fun getMetaDataOfClass(
      animationAsset: AnimationAsset,
      metaDataClass: UnrealEngineClass,
      metaDataOfClass: Array<AnimMetaData>,
    ): MetaDataOfClassProvider

    @JsName("RemoveAllMetaData")
    public fun removeAllMetaData(animationAsset: AnimationAsset): Unit

    @JsName("RemoveMetaData")
    public fun removeMetaData(animationAsset: AnimationAsset, metaDataObject: AnimMetaData): Unit

    @JsName("RemoveMetaDataOfClass")
    public fun removeMetaDataOfClass(animationAsset: AnimationAsset,
        metaDataClass: UnrealEngineClass): Unit
  }
}

public open external class AnimParentNodeAssetOverride {
  @JsName("NewAsset")
  public open var newAsset: AnimationAsset

  @JsName("ParentNodeGuid")
  public open var parentNodeGuid: Guid

  public open fun clone(): AnimParentNodeAssetOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimParentNodeAssetOverride

    @JsName("C")
    public fun copy(other: Any): AnimParentNodeAssetOverride
  }
}

public open external class PoseWatchFolder(
  outer: UObject,
) : UObject {
  @JsName("Label")
  public open var label: String

  @JsName("Parent")
  public open var parent: Any

  @JsName("bIsVisible")
  public open var isVisible: Boolean

  @JsName("bIsExpanded")
  public open var isExpanded: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PoseWatchFolder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PoseWatchFolder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PoseWatchFolder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PoseWatchFolder

    @JsName("C")
    public fun copy(other: UObject): PoseWatchFolder

    @JsName("C")
    public fun copy(other: Any): PoseWatchFolder
  }
}

public open external class PoseWatch(
  outer: UObject,
) : UObject {
  @JsName("UNode")
  public open var uNode: Any

  @JsName("bDeleteOnDeselection")
  public open var deleteOnDeselection: Boolean

  @JsName("bIsVisible")
  public open var isVisible: Boolean

  @JsName("bIsEnabled")
  public open var isEnabled: Boolean

  @JsName("Color")
  public open var color: Color

  @JsName("Label")
  public open var label: String

  @JsName("Parent")
  public open var parent: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PoseWatch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PoseWatch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PoseWatch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PoseWatch

    @JsName("C")
    public fun copy(other: UObject): PoseWatch

    @JsName("C")
    public fun copy(other: Any): PoseWatch
  }
}

@JsName("EPreviewAnimationBlueprintApplicationMethod")
public external object PreviewAnimationBlueprintApplicationMethod {
  @JsName("LinkedLayers")
  public var Layers: String

  @JsName("LinkedAnimGraph")
  public var AnimGraph: String

  @JsName("EPreviewAnimationBlueprintApplicationMethod_MAX")
  public var Max: String
}

public open external class EdGraphSchema(
  outer: UObject,
) : UObject {
  @JsName("SetNodeMetaData")
  public open fun setNodeMetaData(uNode: EdGraphNode, keyValue: String): Boolean

  @JsName("TryConnection")
  public open fun tryConnection(a: JavascriptEdGraphPin, b: JavascriptEdGraphPin): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdGraphSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdGraphSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdGraphSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdGraphSchema

    @JsName("C")
    public fun copy(other: UObject): EdGraphSchema

    @JsName("C")
    public fun copy(other: Any): EdGraphSchema

    @JsName("SetNodeMetaData")
    public fun setNodeMetaData(
      schema: EdGraphSchema,
      uNode: EdGraphNode,
      keyValue: String,
    ): Boolean

    @JsName("TryConnection")
    public fun tryConnection(
      schema: EdGraphSchema,
      a: JavascriptEdGraphPin,
      b: JavascriptEdGraphPin,
    ): Boolean
  }
}

public open external class EdGraph(
  outer: UObject,
) : UObject {
  @JsName("Schema")
  public open var schema: UnrealEngineClass

  @JsName("Nodes")
  public open var nodes: Array<EdGraphNode>

  @JsName("bEditable")
  public open var editable: Boolean

  @JsName("bAllowDeletion")
  public open var allowDeletion: Boolean

  @JsName("bAllowRenaming")
  public open var allowRenaming: Boolean

  @JsName("SubGraphs")
  public open var subGraphs: Array<EdGraph>

  @JsName("GraphGuid")
  public open var graphGuid: Guid

  @JsName("InterfaceGuid")
  public open var interfaceGuid: Guid

  @JsName("RenameGraph")
  public open fun renameGraph(newNameStr: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdGraph

    @JsName("C")
    public fun copy(other: UObject): EdGraph

    @JsName("C")
    public fun copy(other: Any): EdGraph

    @JsName("RenameGraph")
    public fun renameGraph(graph: EdGraph, newNameStr: String): Unit
  }
}

public open external class AnimGraphBlendOptions {
  @JsName("BlendInTime")
  public open var blendInTime: Number

  @JsName("BlendOutTime")
  public open var blendOutTime: Number

  public open fun clone(): AnimGraphBlendOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimGraphBlendOptions

    @JsName("C")
    public fun copy(other: Any): AnimGraphBlendOptions
  }
}

public open external class K2Node(
  outer: UObject,
) : EdGraphNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2Node

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2Node

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2Node

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2Node

    @JsName("C")
    public fun copy(other: UObject): K2Node

    @JsName("C")
    public fun copy(other: Any): K2Node
  }
}

public open external class OptionalPinFromProperty {
  @JsName("PropertyName")
  public open var propertyName: String

  @JsName("PropertyFriendlyName")
  public open var propertyFriendlyName: String

  @JsName("PropertyTooltip")
  public open var propertyTooltip: String

  @JsName("CategoryName")
  public open var categoryName: String

  @JsName("bShowPin")
  public open var showPin: Boolean

  @JsName("bCanToggleVisibility")
  public open var canToggleVisibility: Boolean

  @JsName("bPropertyIsCustomized")
  public open var propertyIsCustomized: Boolean

  @JsName("bHasOverridePin")
  public open var hasOverridePin: Boolean

  @JsName("bIsMarkedForAdvancedDisplay")
  public open var isMarkedForAdvancedDisplay: Boolean

  @JsName("bIsOverrideEnabled")
  public open var isOverrideEnabled: Boolean

  @JsName("bIsSetValuePinVisible")
  public open var isSetValuePinVisible: Boolean

  @JsName("bIsOverridePinVisible")
  public open var isOverridePinVisible: Boolean

  public open fun clone(): OptionalPinFromProperty

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): OptionalPinFromProperty

    @JsName("C")
    public fun copy(other: Any): OptionalPinFromProperty
  }
}

@JsName("EBlueprintUsage")
public external object BlueprintUsage {
  public var NoProperties: String

  public var DoesNotUseBlueprint: String

  public var UsesBlueprint: String

  @JsName("EBlueprintUsage_MAX")
  public var Max: String
}

public open external class MemberReference {
  @JsName("MemberParent")
  public open var memberParent: UObject

  @JsName("MemberScope")
  public open var memberScope: String

  @JsName("MemberName")
  public open var memberName: String

  @JsName("MemberGuid")
  public open var memberGuid: Guid

  @JsName("bSelfContext")
  public open var selfContext: Boolean

  @JsName("bWasDeprecated")
  public open var wasDeprecated: Boolean

  public open fun clone(): MemberReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MemberReference

    @JsName("C")
    public fun copy(other: Any): MemberReference
  }
}

@JsName("AnimGraphNode_Base")
public open external class AnimGraphNodeBase(
  outer: UObject,
) : K2Node {
  @JsName("ShowPinForProperties")
  public open var showPinForProperties: Array<OptionalPinFromProperty>

  @JsName("PropertyBindings")
  public open var propertyBindings: Any

  @JsName("AlwaysDynamicProperties")
  public open var alwaysDynamicProperties: Any

  @JsName("BlueprintUsage")
  public open var blueprintUsage: String

  @JsName("InitialUpdateFunction")
  public open var initialUpdateFunction: MemberReference

  @JsName("BecomeRelevantFunction")
  public open var becomeRelevantFunction: MemberReference

  @JsName("UpdateFunction")
  public open var updateFunction: MemberReference

  @JsName("Tag")
  public open var tag: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBase
  }
}

@JsName("T$145")
public external interface GraphNodesProvider {
  @JsName("GraphNodes")
  public var graphNodes: Array<AnimGraphNodeBase>
}

public open external class AnimationGraph(
  outer: UObject,
) : EdGraph {
  @JsName("BlendOptions")
  public open var blendOptions: AnimGraphBlendOptions

  @JsName("GetGraphNodesOfClass")
  public open fun getGraphNodesOfClass(
    nodeClass: UnrealEngineClass,
    graphNodes: Array<AnimGraphNodeBase>,
    includeChildClasses: Boolean,
  ): GraphNodesProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationGraph

    @JsName("C")
    public fun copy(other: UObject): AnimationGraph

    @JsName("C")
    public fun copy(other: Any): AnimationGraph
  }
}

@JsName("T$146")
public external interface AnimationGraphsProvider {
  @JsName("AnimationGraphs")
  public var animationGraphs: Array<AnimationGraph>
}

public open external class AnimBlueprint(
  outer: UObject,
) : Blueprint {
  @JsName("TargetSkeleton")
  public open var targetSkeleton: Skeleton

  @JsName("Groups")
  public open var groups: Array<AnimGroupInfo>

  @JsName("bIsTemplate")
  public open var isTemplate: Boolean

  @JsName("bUseMultiThreadedAnimationUpdate")
  public open var useMultiThreadedAnimationUpdate: Boolean

  @JsName("bWarnAboutBlueprintUsage")
  public open var warnAboutBlueprintUsage: Boolean

  @JsName("ParentAssetOverrides")
  public open var parentAssetOverrides: Array<AnimParentNodeAssetOverride>

  @JsName("PoseWatchFolders")
  public open var poseWatchFolders: Array<PoseWatchFolder>

  @JsName("PoseWatches")
  public open var poseWatches: Array<PoseWatch>

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  @JsName("PreviewAnimationBlueprint")
  public open var previewAnimationBlueprint: AnimBlueprint

  @JsName("PreviewAnimationBlueprintApplicationMethod")
  public open var previewAnimationBlueprintApplicationMethod: String

  @JsName("PreviewAnimationBlueprintTag")
  public open var previewAnimationBlueprintTag: String

  @JsName("GetAnimationGraphs")
  public open fun getAnimationGraphs(animationGraphs: Array<AnimationGraph>):
      AnimationGraphsProvider

  @JsName("GetNodesOfClass")
  public open fun getNodesOfClass(
    nodeClass: UnrealEngineClass,
    graphNodes: Array<AnimGraphNodeBase>,
    includeChildClasses: Boolean,
  ): GraphNodesProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprint

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprint

    @JsName("C")
    public fun copy(other: Any): AnimBlueprint

    @JsName("GetAnimationGraphs")
    public fun getAnimationGraphs(animationBlueprint: AnimBlueprint,
        animationGraphs: Array<AnimationGraph>): AnimationGraphsProvider

    @JsName("GetNodesOfClass")
    public fun getNodesOfClass(
      animationBlueprint: AnimBlueprint,
      nodeClass: UnrealEngineClass,
      graphNodes: Array<AnimGraphNodeBase>,
      includeChildClasses: Boolean,
    ): GraphNodesProvider
  }
}

@JsName("EAnimPoseSpaces")
public external object AnimPoseSpaces {
  public var Local: String

  public var World: String

  @JsName("EAnimPoseSpaces_MAX")
  public var Max: String
}

@JsName("T$150")
public external interface OutAnimPoseProvider {
  @JsName("OutPose")
  public var outPose: AnimPose
}

@JsName("T$151")
public external interface BonesProvider {
  @JsName("Bones")
  public var bones: Array<String>
}

public open external class AnimPose {
  @JsName("BoneNames")
  public open var boneNames: Array<String>

  @JsName("BoneIndices")
  public open var boneIndices: Array<Number>

  @JsName("ParentBoneIndices")
  public open var parentBoneIndices: Array<Number>

  @JsName("LocalSpacePoses")
  public open var localSpacePoses: Array<Transform>

  @JsName("WorldSpacePoses")
  public open var worldSpacePoses: Array<Transform>

  @JsName("RefLocalSpacePoses")
  public open var refLocalSpacePoses: Array<Transform>

  @JsName("RefWorldSpacePoses")
  public open var refWorldSpacePoses: Array<Transform>

  public open fun clone(): AnimPose

  @JsName("EvaluateAnimationBlueprintWithInputPose")
  public open fun evaluateAnimationBlueprintWithInputPose(
    targetSkeletalMesh: SkeletalMesh,
    animationBlueprint: AnimBlueprint,
    outPose: AnimPose,
  ): OutAnimPoseProvider

  @JsName("GetBoneNames")
  public open fun getBoneNames(bones: Array<String>): BonesProvider

  @JsName("GetBonePose")
  public open fun getBonePose(boneName: String, space: String): Transform

  @JsName("GetRefBonePose")
  public open fun getRefBonePose(boneName: String, space: String): Transform

  @JsName("GetRefPoseRelativeTransform")
  public open fun getRefPoseRelativeTransform(
    fromBoneName: String,
    toBoneName: String,
    space: String,
  ): Transform

  @JsName("GetRelativeToRefPoseTransform")
  public open fun getRelativeToRefPoseTransform(boneName: String, space: String): Transform

  @JsName("GetRelativeTransform")
  public open fun getRelativeTransform(
    fromBoneName: String,
    toBoneName: String,
    space: String,
  ): Transform

  @JsName("IsValid")
  public open fun isValid(): Boolean

  @JsName("SetBonePose")
  public open fun setBonePose(
    transform: Transform,
    boneName: String,
    space: String,
  ): AnimPoseProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimPose

    @JsName("C")
    public fun copy(other: Any): AnimPose

    @JsName("EvaluateAnimationBlueprintWithInputPose")
    public fun evaluateAnimationBlueprintWithInputPose(
      inputPose: AnimPose,
      targetSkeletalMesh: SkeletalMesh,
      animationBlueprint: AnimBlueprint,
      outPose: AnimPose,
    ): OutAnimPoseProvider

    @JsName("GetBoneNames")
    public fun getBoneNames(pose: AnimPose, bones: Array<String>): BonesProvider

    @JsName("GetBonePose")
    public fun getBonePose(
      pose: AnimPose,
      boneName: String,
      space: String,
    ): Transform

    @JsName("GetRefBonePose")
    public fun getRefBonePose(
      pose: AnimPose,
      boneName: String,
      space: String,
    ): Transform

    @JsName("GetRefPoseRelativeTransform")
    public fun getRefPoseRelativeTransform(
      pose: AnimPose,
      fromBoneName: String,
      toBoneName: String,
      space: String,
    ): Transform

    @JsName("GetRelativeToRefPoseTransform")
    public fun getRelativeToRefPoseTransform(
      pose: AnimPose,
      boneName: String,
      space: String,
    ): Transform

    @JsName("GetRelativeTransform")
    public fun getRelativeTransform(
      pose: AnimPose,
      fromBoneName: String,
      toBoneName: String,
      space: String,
    ): Transform

    @JsName("IsValid")
    public fun isValid(pose: AnimPose): Boolean

    @JsName("SetBonePose")
    public fun setBonePose(
      pose: AnimPose,
      transform: Transform,
      boneName: String,
      space: String,
    ): AnimPoseProvider
  }
}

public open external class Skeleton(
  outer: UObject,
) : UObject {
  @JsName("BoneTree")
  public open var boneTree: Array<BoneNode>

  @JsName("RefLocalPoses")
  public open var refLocalPoses: Array<Transform>

  @JsName("VirtualBoneGuid")
  public open var virtualBoneGuid: Guid

  @JsName("VirtualBones")
  public open var virtualBones: Array<VirtualBone>

  @JsName("CompatibleSkeletons")
  public open var compatibleSkeletons: Array<Skeleton>

  @JsName("Sockets")
  public open var sockets: Array<SkeletalMeshSocket>

  @JsName("SmartNames")
  public open var smartNames: SmartNameContainer

  @JsName("BlendProfiles")
  public open var blendProfiles: Array<BlendProfile>

  @JsName("SlotGroups")
  public open var slotGroups: Array<AnimSlotGroup>

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  @JsName("AdditionalPreviewSkeletalMeshes")
  public open var additionalPreviewSkeletalMeshes: DataAsset

  @JsName("RigConfig")
  public open var rigConfig: RigConfiguration

  @JsName("AnimationNotifies")
  public open var animationNotifies: Array<String>

  @JsName("PreviewAttachedAssetContainer")
  public open var previewAttachedAssetContainer: PreviewAssetAttachContainer

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("GetBlendProfile")
  public open fun getBlendProfile(inProfileName: String): BlendProfile

  @JsName("AddCompatibleSkeleton")
  public open fun addCompatibleSkeleton(sourceSkeleton: Skeleton): Unit

  @JsName("FindCurveIdentifier")
  public open fun findCurveIdentifier(name: String, curveType: String): AnimationCurveIdentifier

  @JsName("GetCurveIdentifier")
  public open fun getCurveIdentifier(name: String, curveType: String): AnimationCurveIdentifier

  @JsName("GetCurveIdentifiers")
  public open fun getCurveIdentifiers(curveType: String): Array<AnimationCurveIdentifier>

  @JsName("GetReferencePose")
  public open fun getReferencePose(outPose: AnimPose): OutAnimPoseProvider

  @JsName("CopyAnimationCurveNamesToSkeleton")
  public open fun copyAnimationCurveNamesToSkeleton(
    newSkeleton: Skeleton,
    sequenceBase: AnimSequenceBase,
    curveType: String,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Skeleton

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Skeleton

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Skeleton

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Skeleton

    @JsName("C")
    public fun copy(other: UObject): Skeleton

    @JsName("C")
    public fun copy(other: Any): Skeleton

    @JsName("FindCurveIdentifier")
    public fun findCurveIdentifier(
      inSkeleton: Skeleton,
      name: String,
      curveType: String,
    ): AnimationCurveIdentifier

    @JsName("GetCurveIdentifier")
    public fun getCurveIdentifier(
      inSkeleton: Skeleton,
      name: String,
      curveType: String,
    ): AnimationCurveIdentifier

    @JsName("GetCurveIdentifiers")
    public fun getCurveIdentifiers(inSkeleton: Skeleton, curveType: String):
        Array<AnimationCurveIdentifier>

    @JsName("GetReferencePose")
    public fun getReferencePose(skeleton: Skeleton, outPose: AnimPose): OutAnimPoseProvider

    @JsName("CopyAnimationCurveNamesToSkeleton")
    public fun copyAnimationCurveNamesToSkeleton(
      oldSkeleton: Skeleton,
      newSkeleton: Skeleton,
      sequenceBase: AnimSequenceBase,
      curveType: String,
    ): Unit
  }
}

@JsName("T$153")
public external interface Object153 {
  @JsName("Origin")
  public var origin: Vector

  @JsName("BoxExtent")
  public var boxExtent: Vector

  @JsName("SphereRadius")
  public var sphereRadius: Number
}

public open external class BoxSphereBounds {
  @JsName("Origin")
  public open var origin: Vector

  @JsName("BoxExtent")
  public open var boxExtent: Vector

  @JsName("SphereRadius")
  public open var sphereRadius: Any

  public open fun clone(): BoxSphereBounds

  @JsName("BreakBoxSphereBounds")
  public open fun breakBoxSphereBounds(
    origin: Vector,
    boxExtent: Vector,
    sphereRadius: Number,
  ): Object153

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoxSphereBounds

    @JsName("C")
    public fun copy(other: Any): BoxSphereBounds

    @JsName("BreakBoxSphereBounds")
    public fun breakBoxSphereBounds(
      inBoxSphereBounds: BoxSphereBounds,
      origin: Vector,
      boxExtent: Vector,
      sphereRadius: Number,
    ): Object153
  }
}

@JsName("MeshUVChannelInfo")
public open external class MeshUvChannelInfo {
  @JsName("bInitialized")
  public open var initialized: Boolean

  @JsName("bOverrideDensities")
  public open var overrideDensities: Boolean

  @JsName("LocalUVDensities")
  public open var localUvDensities: Number

  public open fun clone(): MeshUvChannelInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshUvChannelInfo

    @JsName("C")
    public fun copy(other: Any): MeshUvChannelInfo
  }
}

public open external class SkeletalMaterial {
  @JsName("MaterialInterface")
  public open var materialInterface: MaterialInterface

  @JsName("MaterialSlotName")
  public open var materialSlotName: String

  @JsName("bEnableShadowCasting")
  public open var enableShadowCasting: Boolean

  @JsName("bRecomputeTangent")
  public open var recomputeTangent: Boolean

  @JsName("ImportedMaterialSlotName")
  public open var importedMaterialSlotName: String

  @JsName("UVChannelData")
  public open var uvChannelData: MeshUvChannelInfo

  public open fun clone(): SkeletalMaterial

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMaterial

    @JsName("C")
    public fun copy(other: Any): SkeletalMaterial
  }
}

public open external class BoneMirrorInfo {
  @JsName("SourceIndex")
  public open var sourceIndex: Number

  @JsName("BoneFlipAxis")
  public open var boneFlipAxis: String

  public open fun clone(): BoneMirrorInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoneMirrorInfo

    @JsName("C")
    public fun copy(other: Any): BoneMirrorInfo
  }
}

public open external class SkeletalMeshBuildSettings {
  @JsName("bRecomputeNormals")
  public open var recomputeNormals: Boolean

  @JsName("bRecomputeTangents")
  public open var recomputeTangents: Boolean

  @JsName("bUseMikkTSpace")
  public open var useMikkTSpace: Boolean

  @JsName("bComputeWeightedNormals")
  public open var computeWeightedNormals: Boolean

  @JsName("bRemoveDegenerates")
  public open var removeDegenerates: Boolean

  @JsName("bUseHighPrecisionTangentBasis")
  public open var useHighPrecisionTangentBasis: Boolean

  @JsName("bUseFullPrecisionUVs")
  public open var useFullPrecisionUVs: Boolean

  @JsName("bUseBackwardsCompatibleF16TruncUVs")
  public open var useBackwardsCompatibleF16TruncUVs: Boolean

  @JsName("ThresholdPosition")
  public open var thresholdPosition: Number

  @JsName("ThresholdTangentNormal")
  public open var thresholdTangentNormal: Number

  @JsName("ThresholdUV")
  public open var thresholdUv: Number

  @JsName("MorphThresholdPosition")
  public open var morphThresholdPosition: Number

  public open fun clone(): SkeletalMeshBuildSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshBuildSettings

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshBuildSettings
  }
}

public external object SkeletalMeshTerminationCriterion {
  @JsName("SMTC_NumOfTriangles")
  public var smtcNumOfTriangles: String

  @JsName("SMTC_NumOfVerts")
  public var smtcNumOfVerts: String

  @JsName("SMTC_TriangleOrVert")
  public var smtcTriangleOrVert: String

  @JsName("SMTC_AbsNumOfTriangles")
  public var smtcAbsNumOfTriangles: String

  @JsName("SMTC_AbsNumOfVerts")
  public var smtcAbsNumOfVerts: String

  @JsName("SMTC_AbsTriangleOrVert")
  public var smtcAbsTriangleOrVert: String

  @JsName("SMTC_MAX")
  public var smtcmax: String
}

public external object SkeletalMeshOptimizationType {
  @JsName("SMOT_NumOfTriangles")
  public var smotNumOfTriangles: String

  @JsName("SMOT_MaxDeviation")
  public var smotMaxDeviation: String

  @JsName("SMOT_TriangleOrDeviation")
  public var smotTriangleOrDeviation: String

  @JsName("SMOT_MAX")
  public var smotmax: String
}

public external object SkeletalMeshOptimizationImportance {
  @JsName("SMOI_Off")
  public var smoiOff: String

  @JsName("SMOI_Lowest")
  public var smoiLowest: String

  @JsName("SMOI_Low")
  public var smoiLow: String

  @JsName("SMOI_Normal")
  public var smoiNormal: String

  @JsName("SMOI_High")
  public var smoiHigh: String

  @JsName("SMOI_Highest")
  public var smoiHighest: String

  @JsName("SMOI_MAX")
  public var smoimax: String
}

public open external class SkeletalMeshOptimizationSettings {
  @JsName("TerminationCriterion")
  public open var terminationCriterion: String

  @JsName("NumOfTrianglesPercentage")
  public open var numOfTrianglesPercentage: Number

  @JsName("NumOfVertPercentage")
  public open var numOfVertPercentage: Number

  @JsName("MaxNumOfTriangles")
  public open var maxNumOfTriangles: Any

  @JsName("MaxNumOfVerts")
  public open var maxNumOfVerts: Any

  @JsName("MaxNumOfTrianglesPercentage")
  public open var maxNumOfTrianglesPercentage: Any

  @JsName("MaxNumOfVertsPercentage")
  public open var maxNumOfVertsPercentage: Any

  @JsName("MaxDeviationPercentage")
  public open var maxDeviationPercentage: Number

  @JsName("ReductionMethod")
  public open var reductionMethod: String

  @JsName("SilhouetteImportance")
  public open var silhouetteImportance: String

  @JsName("TextureImportance")
  public open var textureImportance: String

  @JsName("ShadingImportance")
  public open var shadingImportance: String

  @JsName("SkinningImportance")
  public open var skinningImportance: String

  @JsName("bRemapMorphTargets")
  public open var remapMorphTargets: Boolean

  @JsName("bRecalcNormals")
  public open var recalcNormals: Boolean

  @JsName("WeldingThreshold")
  public open var weldingThreshold: Number

  @JsName("NormalsThreshold")
  public open var normalsThreshold: Number

  @JsName("MaxBonesPerVertex")
  public open var maxBonesPerVertex: Number

  @JsName("bEnforceBoneBoundaries")
  public open var enforceBoneBoundaries: Boolean

  @JsName("bMergeCoincidentVertBones")
  public open var mergeCoincidentVertBones: Boolean

  @JsName("VolumeImportance")
  public open var volumeImportance: Number

  @JsName("bLockEdges")
  public open var lockEdges: Boolean

  @JsName("bLockColorBounaries")
  public open var lockColorBounaries: Boolean

  @JsName("BaseLOD")
  public open var baseLod: Number

  @JsName("BonesToRemove")
  public open var bonesToRemove: Array<BoneReference>

  @JsName("BakePose")
  public open var bakePose: AnimSequence

  public open fun clone(): SkeletalMeshOptimizationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshOptimizationSettings

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshOptimizationSettings
  }
}

public open external class SectionReference {
  @JsName("SectionIndex")
  public open var sectionIndex: Number

  public open fun clone(): SectionReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SectionReference

    @JsName("C")
    public fun copy(other: Any): SectionReference
  }
}

@JsName("ESkinCacheUsage")
public external object SkinCacheUsage {
  public var Auto: String

  public var Disabled: String

  public var Enabled: String

  @JsName("ESkinCacheUsage_MAX")
  public var Max: String
}

@JsName("SkeletalMeshLODInfo")
public open external class SkeletalMeshLodInfo {
  @JsName("ScreenSize")
  public open var screenSize: PerPlatformFloat

  @JsName("LODHysteresis")
  public open var lodHysteresis: Number

  @JsName("LODMaterialMap")
  public open var lodMaterialMap: Array<Number>

  @JsName("bEnableShadowCasting")
  public open var enableShadowCasting: Array<Boolean>

  @JsName("RemovedBones")
  public open var removedBones: Array<String>

  @JsName("BuildSettings")
  public open var buildSettings: SkeletalMeshBuildSettings

  @JsName("ReductionSettings")
  public open var reductionSettings: SkeletalMeshOptimizationSettings

  @JsName("BonesToRemove")
  public open var bonesToRemove: Array<BoneReference>

  @JsName("BonesToPrioritize")
  public open var bonesToPrioritize: Array<BoneReference>

  @JsName("SectionsToPrioritize")
  public open var sectionsToPrioritize: Array<SectionReference>

  @JsName("WeightOfPrioritization")
  public open var weightOfPrioritization: Number

  @JsName("BakePose")
  public open var bakePose: AnimSequence

  @JsName("BakePoseOverride")
  public open var bakePoseOverride: AnimSequence

  @JsName("SourceImportFilename")
  public open var sourceImportFilename: String

  @JsName("SkinCacheUsage")
  public open var skinCacheUsage: String

  @JsName("MorphTargetPositionErrorTolerance")
  public open var morphTargetPositionErrorTolerance: Number

  @JsName("bHasBeenSimplified")
  public open var hasBeenSimplified: Boolean

  @JsName("bHasPerLODVertexColors")
  public open var hasPerLodVertexColors: Boolean

  @JsName("bAllowCPUAccess")
  public open var allowCpuAccess: Boolean

  @JsName("bSupportUniformlyDistributedSampling")
  public open var supportUniformlyDistributedSampling: Boolean

  @JsName("bImportWithBaseMesh")
  public open var importWithBaseMesh: Boolean

  public open fun clone(): SkeletalMeshLodInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshLodInfo

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshLodInfo
  }
}

public open external class PerPlatformInt {
  @JsName("Default")
  public open var default: Number

  @JsName("PerPlatform")
  public open var perPlatform: Any

  public open fun clone(): PerPlatformInt

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PerPlatformInt

    @JsName("C")
    public fun copy(other: Any): PerPlatformInt
  }
}

public open external class PerPlatformBool {
  @JsName("Default")
  public open var default: Boolean

  @JsName("PerPlatform")
  public open var perPlatform: Any

  public open fun clone(): PerPlatformBool

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PerPlatformBool

    @JsName("C")
    public fun copy(other: Any): PerPlatformBool
  }
}

@JsName("EBoneFilterActionOption")
public external object BoneFilterActionOption {
  public var Remove: String

  public var Keep: String

  public var Invalid: String

  @JsName("EBoneFilterActionOption_MAX")
  public var Max: String
}

public open external class BoneFilter {
  @JsName("bExcludeSelf")
  public open var excludeSelf: Boolean

  @JsName("BoneName")
  public open var boneName: String

  public open fun clone(): BoneFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoneFilter

    @JsName("C")
    public fun copy(other: Any): BoneFilter
  }
}

@JsName("SkeletalMeshLODGroupSettings")
public open external class SkeletalMeshLodGroupSettings {
  @JsName("ScreenSize")
  public open var screenSize: PerPlatformFloat

  @JsName("LODHysteresis")
  public open var lodHysteresis: Number

  @JsName("BoneFilterActionOption")
  public open var boneFilterActionOption: String

  @JsName("BoneList")
  public open var boneList: Array<BoneFilter>

  @JsName("BonesToPrioritize")
  public open var bonesToPrioritize: Array<String>

  @JsName("SectionsToPrioritize")
  public open var sectionsToPrioritize: Array<Number>

  @JsName("WeightOfPrioritization")
  public open var weightOfPrioritization: Number

  @JsName("BakePose")
  public open var bakePose: AnimSequence

  @JsName("ReductionSettings")
  public open var reductionSettings: SkeletalMeshOptimizationSettings

  public open fun clone(): SkeletalMeshLodGroupSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshLodGroupSettings

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshLodGroupSettings
  }
}

@JsName("SkeletalMeshLODSettings")
public open external class SkeletalMeshLodSettings(
  outer: UObject,
) : DataAsset {
  @JsName("MinLOD")
  public open var minLod: PerPlatformInt

  @JsName("DisableBelowMinLodStripping")
  public open var disableBelowMinLodStripping: PerPlatformBool

  @JsName("bOverrideLODStreamingSettings")
  public open var overrideLodStreamingSettings: Boolean

  @JsName("bSupportLODStreaming")
  public open var supportLodStreaming: PerPlatformBool

  @JsName("MaxNumStreamedLODs")
  public open var maxNumStreamedLoDs: PerPlatformInt

  @JsName("MaxNumOptionalLODs")
  public open var maxNumOptionalLoDs: PerPlatformInt

  @JsName("LODGroups")
  public open var lodGroups: Array<SkeletalMeshLodGroupSettings>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshLodSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshLodSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshLodSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshLodSettings

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshLodSettings

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshLodSettings
  }
}

public open external class PhysicalAnimationData {
  @JsName("BodyName")
  public open var bodyName: String

  @JsName("bIsLocalSimulation")
  public open var isLocalSimulation: Boolean

  @JsName("OrientationStrength")
  public open var orientationStrength: Number

  @JsName("AngularVelocityStrength")
  public open var angularVelocityStrength: Number

  @JsName("PositionStrength")
  public open var positionStrength: Number

  @JsName("VelocityStrength")
  public open var velocityStrength: Number

  @JsName("MaxLinearForce")
  public open var maxLinearForce: Number

  @JsName("MaxAngularForce")
  public open var maxAngularForce: Number

  public open fun clone(): PhysicalAnimationData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicalAnimationData

    @JsName("C")
    public fun copy(other: Any): PhysicalAnimationData
  }
}

public open external class PhysicalAnimationProfile {
  @JsName("ProfileName")
  public open var profileName: String

  @JsName("PhysicalAnimationData")
  public open var physicalAnimationData: PhysicalAnimationData

  public open fun clone(): PhysicalAnimationProfile

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicalAnimationProfile

    @JsName("C")
    public fun copy(other: Any): PhysicalAnimationProfile
  }
}

public open external class SkeletalBodySetup(
  outer: UObject,
) : BodySetup {
  @JsName("CurrentPhysicalAnimationProfile")
  public open var currentPhysicalAnimationProfile: PhysicalAnimationProfile

  @JsName("bSkipScaleFromAnimation")
  public open var skipScaleFromAnimation: Boolean

  @JsName("PhysicalAnimationData")
  public open var physicalAnimationData: Array<PhysicalAnimationProfile>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalBodySetup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalBodySetup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalBodySetup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalBodySetup

    @JsName("C")
    public fun copy(other: UObject): SkeletalBodySetup

    @JsName("C")
    public fun copy(other: Any): SkeletalBodySetup
  }
}

public open external class ConstraintInstanceBase {
  public open fun clone(): ConstraintInstanceBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ConstraintInstanceBase

    @JsName("C")
    public fun copy(other: Any): ConstraintInstanceBase
  }
}

public open external class ConstraintBaseParams {
  @JsName("Stiffness")
  public open var stiffness: Number

  @JsName("Damping")
  public open var damping: Number

  @JsName("Restitution")
  public open var restitution: Number

  @JsName("ContactDistance")
  public open var contactDistance: Number

  @JsName("bSoftConstraint")
  public open var softConstraint: Boolean

  public open fun clone(): ConstraintBaseParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ConstraintBaseParams

    @JsName("C")
    public fun copy(other: Any): ConstraintBaseParams
  }
}

@JsName("ELinearConstraintMotion")
public external object LinearConstraintMotion {
  @JsName("LCM_Free")
  public var Free: String

  @JsName("LCM_Limited")
  public var Limited: String

  @JsName("LCM_Locked")
  public var Locked: String

  @JsName("LCM_MAX")
  public var Max: String
}

public open external class LinearConstraint : ConstraintBaseParams {
  @JsName("Limit")
  public open var limit: Number

  @JsName("XMotion")
  public open var xMotion: String

  @JsName("YMotion")
  public open var yMotion: String

  @JsName("ZMotion")
  public open var zMotion: String

  public override fun clone(): LinearConstraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LinearConstraint

    @JsName("C")
    public fun copy(other: Any): LinearConstraint
  }
}

@JsName("EAngularConstraintMotion")
public external object AngularConstraintMotion {
  @JsName("ACM_Free")
  public var Free: String

  @JsName("ACM_Limited")
  public var Limited: String

  @JsName("ACM_Locked")
  public var Locked: String

  @JsName("ACM_MAX")
  public var Max: String
}

public open external class ConeConstraint : ConstraintBaseParams {
  @JsName("Swing1LimitDegrees")
  public open var swing1LimitDegrees: Number

  @JsName("Swing2LimitDegrees")
  public open var swing2LimitDegrees: Number

  @JsName("Swing1Motion")
  public open var swing1Motion: String

  @JsName("Swing2Motion")
  public open var swing2Motion: String

  public override fun clone(): ConeConstraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ConeConstraint

    @JsName("C")
    public fun copy(other: Any): ConeConstraint
  }
}

public open external class TwistConstraint : ConstraintBaseParams {
  @JsName("TwistLimitDegrees")
  public open var twistLimitDegrees: Number

  @JsName("TwistMotion")
  public open var twistMotion: String

  public override fun clone(): TwistConstraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TwistConstraint

    @JsName("C")
    public fun copy(other: Any): TwistConstraint
  }
}

public open external class ConstraintDrive {
  @JsName("Stiffness")
  public open var stiffness: Number

  @JsName("Damping")
  public open var damping: Number

  @JsName("MaxForce")
  public open var maxForce: Number

  @JsName("bEnablePositionDrive")
  public open var enablePositionDrive: Boolean

  @JsName("bEnableVelocityDrive")
  public open var enableVelocityDrive: Boolean

  public open fun clone(): ConstraintDrive

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ConstraintDrive

    @JsName("C")
    public fun copy(other: Any): ConstraintDrive
  }
}

public open external class LinearDriveConstraint {
  @JsName("PositionTarget")
  public open var positionTarget: Vector

  @JsName("VelocityTarget")
  public open var velocityTarget: Vector

  @JsName("XDrive")
  public open var xDrive: ConstraintDrive

  @JsName("YDrive")
  public open var yDrive: ConstraintDrive

  @JsName("ZDrive")
  public open var zDrive: ConstraintDrive

  @JsName("bEnablePositionDrive")
  public open var enablePositionDrive: Boolean

  public open fun clone(): LinearDriveConstraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LinearDriveConstraint

    @JsName("C")
    public fun copy(other: Any): LinearDriveConstraint
  }
}

@JsName("EAngularDriveMode")
public external object AngularDriveMode {
  public var SLERP: String

  public var TwistAndSwing: String

  @JsName("EAngularDriveMode_MAX")
  public var Max: String
}

public open external class AngularDriveConstraint {
  @JsName("TwistDrive")
  public open var twistDrive: ConstraintDrive

  @JsName("SwingDrive")
  public open var swingDrive: ConstraintDrive

  @JsName("SlerpDrive")
  public open var slerpDrive: ConstraintDrive

  @JsName("OrientationTarget")
  public open var orientationTarget: Rotator

  @JsName("AngularVelocityTarget")
  public open var angularVelocityTarget: Vector

  @JsName("AngularDriveMode")
  public open var angularDriveMode: String

  public open fun clone(): AngularDriveConstraint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AngularDriveConstraint

    @JsName("C")
    public fun copy(other: Any): AngularDriveConstraint
  }
}

@JsName("EConstraintPlasticityType")
public external object ConstraintPlasticityType {
  @JsName("CCPT_Free")
  public var Free: String

  @JsName("CCPT_Shrink")
  public var Shrink: String

  @JsName("CCPT_Grow")
  public var Grow: String

  @JsName("CCPT_MAX")
  public var Max: String
}

public open external class ConstraintProfileProperties {
  @JsName("ProjectionLinearTolerance")
  public open var projectionLinearTolerance: Number

  @JsName("ProjectionAngularTolerance")
  public open var projectionAngularTolerance: Number

  @JsName("ProjectionLinearAlpha")
  public open var projectionLinearAlpha: Number

  @JsName("ProjectionAngularAlpha")
  public open var projectionAngularAlpha: Number

  @JsName("ShockPropagationAlpha")
  public open var shockPropagationAlpha: Number

  @JsName("LinearBreakThreshold")
  public open var linearBreakThreshold: Number

  @JsName("LinearPlasticityThreshold")
  public open var linearPlasticityThreshold: Number

  @JsName("AngularBreakThreshold")
  public open var angularBreakThreshold: Number

  @JsName("AngularPlasticityThreshold")
  public open var angularPlasticityThreshold: Number

  @JsName("ContactTransferScale")
  public open var contactTransferScale: Number

  @JsName("LinearLimit")
  public open var linearLimit: LinearConstraint

  @JsName("ConeLimit")
  public open var coneLimit: ConeConstraint

  @JsName("TwistLimit")
  public open var twistLimit: TwistConstraint

  @JsName("LinearDrive")
  public open var linearDrive: LinearDriveConstraint

  @JsName("AngularDrive")
  public open var angularDrive: AngularDriveConstraint

  @JsName("bDisableCollision")
  public open var disableCollision: Boolean

  @JsName("bParentDominates")
  public open var parentDominates: Boolean

  @JsName("bEnableLinearProjection")
  public open var enableLinearProjection: Boolean

  @JsName("bEnableAngularProjection")
  public open var enableAngularProjection: Boolean

  @JsName("bEnableShockPropagation")
  public open var enableShockPropagation: Boolean

  @JsName("bEnableProjection")
  public open var enableProjection: Boolean

  @JsName("bEnableSoftProjection")
  public open var enableSoftProjection: Boolean

  @JsName("bAngularBreakable")
  public open var angularBreakable: Boolean

  @JsName("bAngularPlasticity")
  public open var angularPlasticity: Boolean

  @JsName("bLinearBreakable")
  public open var linearBreakable: Boolean

  @JsName("bLinearPlasticity")
  public open var linearPlasticity: Boolean

  @JsName("LinearPlasticityType")
  public open var linearPlasticityType: String

  public open fun clone(): ConstraintProfileProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ConstraintProfileProperties

    @JsName("C")
    public fun copy(other: Any): ConstraintProfileProperties
  }
}

public open external class ConstraintInstance : ConstraintInstanceBase {
  @JsName("JointName")
  public open var jointName: String

  @JsName("ConstraintBone1")
  public open var constraintBone1: String

  @JsName("ConstraintBone2")
  public open var constraintBone2: String

  @JsName("Pos1")
  public open var pos1: Vector

  @JsName("PriAxis1")
  public open var priAxis1: Vector

  @JsName("SecAxis1")
  public open var secAxis1: Vector

  @JsName("Pos2")
  public open var pos2: Vector

  @JsName("PriAxis2")
  public open var priAxis2: Vector

  @JsName("SecAxis2")
  public open var secAxis2: Vector

  @JsName("AngularRotationOffset")
  public open var angularRotationOffset: Rotator

  @JsName("bScaleLinearLimits")
  public open var scaleLinearLimits: Boolean

  @JsName("ProfileInstance")
  public open var profileInstance: ConstraintProfileProperties

  @JsName("bDisableCollision")
  public open var disableCollision: Boolean

  @JsName("bEnableProjection")
  public open var enableProjection: Boolean

  @JsName("ProjectionLinearTolerance")
  public open var projectionLinearTolerance: Number

  @JsName("ProjectionAngularTolerance")
  public open var projectionAngularTolerance: Number

  @JsName("LinearXMotion")
  public open var linearXMotion: String

  @JsName("LinearYMotion")
  public open var linearYMotion: String

  @JsName("LinearZMotion")
  public open var linearZMotion: String

  @JsName("LinearLimitSize")
  public open var linearLimitSize: Number

  @JsName("bLinearLimitSoft")
  public open var linearLimitSoft: Boolean

  @JsName("LinearLimitStiffness")
  public open var linearLimitStiffness: Number

  @JsName("LinearLimitDamping")
  public open var linearLimitDamping: Number

  @JsName("bLinearBreakable")
  public open var linearBreakable: Boolean

  @JsName("LinearBreakThreshold")
  public open var linearBreakThreshold: Number

  @JsName("AngularSwing1Motion")
  public open var angularSwing1Motion: String

  @JsName("AngularTwistMotion")
  public open var angularTwistMotion: String

  @JsName("AngularSwing2Motion")
  public open var angularSwing2Motion: String

  @JsName("bSwingLimitSoft")
  public open var swingLimitSoft: Boolean

  @JsName("bTwistLimitSoft")
  public open var twistLimitSoft: Boolean

  @JsName("Swing1LimitAngle")
  public open var swing1LimitAngle: Number

  @JsName("TwistLimitAngle")
  public open var twistLimitAngle: Number

  @JsName("Swing2LimitAngle")
  public open var swing2LimitAngle: Number

  @JsName("SwingLimitStiffness")
  public open var swingLimitStiffness: Number

  @JsName("SwingLimitDamping")
  public open var swingLimitDamping: Number

  @JsName("TwistLimitStiffness")
  public open var twistLimitStiffness: Number

  @JsName("TwistLimitDamping")
  public open var twistLimitDamping: Number

  @JsName("bAngularBreakable")
  public open var angularBreakable: Boolean

  @JsName("AngularBreakThreshold")
  public open var angularBreakThreshold: Number

  @JsName("bLinearXPositionDrive")
  public open var linearXPositionDrive: Boolean

  @JsName("bLinearXVelocityDrive")
  public open var linearXVelocityDrive: Boolean

  @JsName("bLinearYPositionDrive")
  public open var linearYPositionDrive: Boolean

  @JsName("bLinearYVelocityDrive")
  public open var linearYVelocityDrive: Boolean

  @JsName("bLinearZPositionDrive")
  public open var linearZPositionDrive: Boolean

  @JsName("bLinearZVelocityDrive")
  public open var linearZVelocityDrive: Boolean

  @JsName("bLinearPositionDrive")
  public open var linearPositionDrive: Boolean

  @JsName("bLinearVelocityDrive")
  public open var linearVelocityDrive: Boolean

  @JsName("LinearPositionTarget")
  public open var linearPositionTarget: Vector

  @JsName("LinearVelocityTarget")
  public open var linearVelocityTarget: Vector

  @JsName("LinearDriveSpring")
  public open var linearDriveSpring: Number

  @JsName("LinearDriveDamping")
  public open var linearDriveDamping: Number

  @JsName("LinearDriveForceLimit")
  public open var linearDriveForceLimit: Number

  @JsName("bSwingPositionDrive")
  public open var swingPositionDrive: Boolean

  @JsName("bSwingVelocityDrive")
  public open var swingVelocityDrive: Boolean

  @JsName("bTwistPositionDrive")
  public open var twistPositionDrive: Boolean

  @JsName("bTwistVelocityDrive")
  public open var twistVelocityDrive: Boolean

  @JsName("bAngularSlerpDrive")
  public open var angularSlerpDrive: Boolean

  @JsName("bAngularOrientationDrive")
  public open var angularOrientationDrive: Boolean

  @JsName("bEnableSwingDrive")
  public open var enableSwingDrive: Boolean

  @JsName("bEnableTwistDrive")
  public open var enableTwistDrive: Boolean

  @JsName("bAngularVelocityDrive")
  public open var angularVelocityDrive: Boolean

  @JsName("AngularPositionTarget")
  public open var angularPositionTarget: Quat

  @JsName("AngularDriveMode")
  public open var angularDriveMode: String

  @JsName("AngularOrientationTarget")
  public open var angularOrientationTarget: Rotator

  @JsName("AngularVelocityTarget")
  public open var angularVelocityTarget: Vector

  @JsName("AngularDriveSpring")
  public open var angularDriveSpring: Number

  @JsName("AngularDriveDamping")
  public open var angularDriveDamping: Number

  @JsName("AngularDriveForceLimit")
  public open var angularDriveForceLimit: Number

  public override fun clone(): ConstraintInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ConstraintInstance

    @JsName("C")
    public fun copy(other: Any): ConstraintInstance
  }
}

public open external class PhysicsConstraintProfileHandle {
  @JsName("ProfileProperties")
  public open var profileProperties: ConstraintProfileProperties

  @JsName("ProfileName")
  public open var profileName: String

  public open fun clone(): PhysicsConstraintProfileHandle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicsConstraintProfileHandle

    @JsName("C")
    public fun copy(other: Any): PhysicsConstraintProfileHandle
  }
}

public open external class PhysicsConstraintTemplate(
  outer: UObject,
) : UObject {
  @JsName("DefaultInstance")
  public open var defaultInstance: ConstraintInstance

  @JsName("ProfileHandles")
  public open var profileHandles: Array<PhysicsConstraintProfileHandle>

  @JsName("DefaultProfile")
  public open var defaultProfile: ConstraintProfileProperties

  @JsName("JointName")
  public open var jointName: String

  @JsName("ConstraintBone1")
  public open var constraintBone1: String

  @JsName("ConstraintBone2")
  public open var constraintBone2: String

  @JsName("Pos1")
  public open var pos1: Vector

  @JsName("PriAxis1")
  public open var priAxis1: Vector

  @JsName("SecAxis1")
  public open var secAxis1: Vector

  @JsName("Pos2")
  public open var pos2: Vector

  @JsName("PriAxis2")
  public open var priAxis2: Vector

  @JsName("SecAxis2")
  public open var secAxis2: Vector

  @JsName("bEnableProjection")
  public open var enableProjection: Boolean

  @JsName("ProjectionLinearTolerance")
  public open var projectionLinearTolerance: Number

  @JsName("ProjectionAngularTolerance")
  public open var projectionAngularTolerance: Number

  @JsName("LinearXMotion")
  public open var linearXMotion: String

  @JsName("LinearYMotion")
  public open var linearYMotion: String

  @JsName("LinearZMotion")
  public open var linearZMotion: String

  @JsName("LinearLimitSize")
  public open var linearLimitSize: Number

  @JsName("bLinearLimitSoft")
  public open var linearLimitSoft: Boolean

  @JsName("LinearLimitStiffness")
  public open var linearLimitStiffness: Number

  @JsName("LinearLimitDamping")
  public open var linearLimitDamping: Number

  @JsName("bLinearBreakable")
  public open var linearBreakable: Boolean

  @JsName("LinearBreakThreshold")
  public open var linearBreakThreshold: Number

  @JsName("AngularSwing1Motion")
  public open var angularSwing1Motion: String

  @JsName("AngularSwing2Motion")
  public open var angularSwing2Motion: String

  @JsName("AngularTwistMotion")
  public open var angularTwistMotion: String

  @JsName("bSwingLimitSoft")
  public open var swingLimitSoft: Boolean

  @JsName("bTwistLimitSoft")
  public open var twistLimitSoft: Boolean

  @JsName("Swing1LimitAngle")
  public open var swing1LimitAngle: Number

  @JsName("Swing2LimitAngle")
  public open var swing2LimitAngle: Number

  @JsName("TwistLimitAngle")
  public open var twistLimitAngle: Number

  @JsName("SwingLimitStiffness")
  public open var swingLimitStiffness: Number

  @JsName("SwingLimitDamping")
  public open var swingLimitDamping: Number

  @JsName("TwistLimitStiffness")
  public open var twistLimitStiffness: Number

  @JsName("TwistLimitDamping")
  public open var twistLimitDamping: Number

  @JsName("bAngularBreakable")
  public open var angularBreakable: Boolean

  @JsName("AngularBreakThreshold")
  public open var angularBreakThreshold: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsConstraintTemplate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsConstraintTemplate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsConstraintTemplate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsConstraintTemplate

    @JsName("C")
    public fun copy(other: UObject): PhysicsConstraintTemplate

    @JsName("C")
    public fun copy(other: Any): PhysicsConstraintTemplate
  }
}

public open external class PhysicsAssetSolverSettings {
  @JsName("PositionIterations")
  public open var positionIterations: Number

  @JsName("VelocityIterations")
  public open var velocityIterations: Number

  @JsName("ProjectionIterations")
  public open var projectionIterations: Number

  @JsName("CullDistance")
  public open var cullDistance: Number

  @JsName("MaxDepenetrationVelocity")
  public open var maxDepenetrationVelocity: Number

  @JsName("FixedTimeStep")
  public open var fixedTimeStep: Number

  public open fun clone(): PhysicsAssetSolverSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PhysicsAssetSolverSettings

    @JsName("C")
    public fun copy(other: Any): PhysicsAssetSolverSettings
  }
}

public open external class SolverIterations {
  @JsName("SolverIterations")
  public open var solverIterations: Number

  @JsName("JointIterations")
  public open var jointIterations: Number

  @JsName("CollisionIterations")
  public open var collisionIterations: Number

  @JsName("SolverPushOutIterations")
  public open var solverPushOutIterations: Number

  @JsName("JointPushOutIterations")
  public open var jointPushOutIterations: Number

  @JsName("CollisionPushOutIterations")
  public open var collisionPushOutIterations: Number

  public open fun clone(): SolverIterations

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SolverIterations

    @JsName("C")
    public fun copy(other: Any): SolverIterations
  }
}

@JsName("EPhysicsAssetSolverType")
public external object PhysicsAssetSolverType {
  public var RBAN: String

  public var World: String

  @JsName("EPhysicsAssetSolverType_MAX")
  public var Max: String
}

@JsName("T$154")
public external interface Object154 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("SourceAccessor")
  public var sourceAccessor: ConstraintInstanceAccessor
}

@JsName("T$155")
public external interface Object155 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bAngularBreakable")
  public var angularBreakable: Boolean

  @JsName("AngularBreakThreshold")
  public var angularBreakThreshold: Number
}

@JsName("T$156")
public external interface Object156 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("OutDriveMode")
  public var outDriveMode: String
}

@JsName("T$157")
public external interface Object157 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("OutPositionStrength")
  public var outPositionStrength: Number

  @JsName("OutVelocityStrength")
  public var outVelocityStrength: Number

  @JsName("OutForceLimit")
  public var outForceLimit: Number
}

@JsName("T$158")
public external interface Object158 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("Swing1MotionType")
  public var swing1MotionType: String

  @JsName("Swing1LimitAngle")
  public var swing1LimitAngle: Number

  @JsName("Swing2MotionType")
  public var swing2MotionType: String

  @JsName("Swing2LimitAngle")
  public var swing2LimitAngle: Number

  @JsName("TwistMotionType")
  public var twistMotionType: String

  @JsName("TwistLimitAngle")
  public var twistLimitAngle: Number
}

@JsName("T$159")
public external interface Object159 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("OutPosTarget")
  public var outPosTarget: Rotator
}

@JsName("T$160")
public external interface Object160 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bAngularPlasticity")
  public var angularPlasticity: Boolean

  @JsName("AngularPlasticityThreshold")
  public var angularPlasticityThreshold: Number
}

@JsName("T$161")
public external interface Object161 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bSoftSwingLimit")
  public var softSwingLimit: Boolean

  @JsName("SwingLimitStiffness")
  public var swingLimitStiffness: Number

  @JsName("SwingLimitDamping")
  public var swingLimitDamping: Number

  @JsName("SwingLimitRestitution")
  public var swingLimitRestitution: Number

  @JsName("SwingLimitContactDistance")
  public var swingLimitContactDistance: Number
}

@JsName("T$162")
public external interface Object162 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bSoftTwistLimit")
  public var softTwistLimit: Boolean

  @JsName("TwistLimitStiffness")
  public var twistLimitStiffness: Number

  @JsName("TwistLimitDamping")
  public var twistLimitDamping: Number

  @JsName("TwistLimitRestitution")
  public var twistLimitRestitution: Number

  @JsName("TwistLimitContactDistance")
  public var twistLimitContactDistance: Number
}

@JsName("T$163")
public external interface Object163 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bOutEnableSLERP")
  public var outEnableSlerp: Boolean
}

@JsName("T$164")
public external interface Object164 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bOutEnableTwistDrive")
  public var outEnableTwistDrive: Boolean

  @JsName("bOutEnableSwingDrive")
  public var outEnableSwingDrive: Boolean
}

@JsName("T$165")
public external interface Object165 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("OutVelTarget")
  public var outVelTarget: Vector
}

@JsName("T$166")
public external interface Object166 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("ParentBody")
  public var parentBody: String

  @JsName("ChildBody")
  public var childBody: String
}

@JsName("T$167")
public external interface Object167 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("ContactTransferScale")
  public var contactTransferScale: Number
}

@JsName("T$168")
public external interface Object168 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("$")
  public var value: Boolean
}

@JsName("T$169")
public external interface Object169 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bLinearBreakable")
  public var linearBreakable: Boolean

  @JsName("LinearBreakThreshold")
  public var linearBreakThreshold: Number
}

@JsName("T$170")
public external interface Object170 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("XMotion")
  public var xMotion: String

  @JsName("YMotion")
  public var yMotion: String

  @JsName("ZMotion")
  public var zMotion: String

  @JsName("Limit")
  public var limit: Number
}

@JsName("T$171")
public external interface Object171 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bLinearPlasticity")
  public var linearPlasticity: Boolean

  @JsName("LinearPlasticityThreshold")
  public var linearPlasticityThreshold: Number

  @JsName("PlasticityType")
  public var plasticityType: String
}

@JsName("T$172")
public external interface Object172 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bOutEnableDriveX")
  public var outEnableDriveX: Boolean

  @JsName("bOutEnableDriveY")
  public var outEnableDriveY: Boolean

  @JsName("bOutEnableDriveZ")
  public var outEnableDriveZ: Boolean
}

@JsName("T$173")
public external interface Object173 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("OutPosTarget")
  public var outPosTarget: Vector
}

@JsName("T$174")
public external interface Object174 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bSoftLinearLimit")
  public var softLinearLimit: Boolean

  @JsName("LinearLimitStiffness")
  public var linearLimitStiffness: Number

  @JsName("LinearLimitDamping")
  public var linearLimitDamping: Number

  @JsName("LinearLimitRestitution")
  public var linearLimitRestitution: Number

  @JsName("LinearLimitContactDistance")
  public var linearLimitContactDistance: Number
}

@JsName("T$175")
public external interface Object175 {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor

  @JsName("bEnableProjection")
  public var enableProjection: Boolean

  @JsName("ProjectionLinearAlpha")
  public var projectionLinearAlpha: Number

  @JsName("ProjectionAngularAlpha")
  public var projectionAngularAlpha: Number
}

@JsName("T$176")
public external interface AccessorProvider {
  @JsName("Accessor")
  public var accessor: ConstraintInstanceAccessor
}

public open external class ConstraintInstanceAccessor {
  @JsName("Owner")
  public open var owner: Any

  public open var index: Any

  public open fun clone(): ConstraintInstanceAccessor

  @JsName("CopyParams")
  public open fun copyParams(
    sourceAccessor: ConstraintInstanceAccessor,
    keepPosition: Boolean,
    keepRotation: Boolean,
  ): Object154

  @JsName("GetAngularBreakable")
  public open fun getAngularBreakable(angularBreakable: Boolean, angularBreakThreshold: Number):
      Object155

  @JsName("GetAngularDriveMode")
  public open fun getAngularDriveMode(outDriveMode: String): Object156

  @JsName("GetAngularDriveParams")
  public open fun getAngularDriveParams(
    outPositionStrength: Number,
    outVelocityStrength: Number,
    outForceLimit: Number,
  ): Object157

  @JsName("GetAngularLimits")
  public open fun getAngularLimits(
    swing1MotionType: String,
    swing1LimitAngle: Number,
    swing2MotionType: String,
    swing2LimitAngle: Number,
    twistMotionType: String,
    twistLimitAngle: Number,
  ): Object158

  @JsName("GetAngularOrientationTarget")
  public open fun getAngularOrientationTarget(outPosTarget: Rotator): Object159

  @JsName("GetAngularPlasticity")
  public open fun getAngularPlasticity(angularPlasticity: Boolean,
      angularPlasticityThreshold: Number): Object160

  @JsName("GetAngularSoftSwingLimitParams")
  public open fun getAngularSoftSwingLimitParams(
    softSwingLimit: Boolean,
    swingLimitStiffness: Number,
    swingLimitDamping: Number,
    swingLimitRestitution: Number,
    swingLimitContactDistance: Number,
  ): Object161

  @JsName("GetAngularSoftTwistLimitParams")
  public open fun getAngularSoftTwistLimitParams(
    softTwistLimit: Boolean,
    twistLimitStiffness: Number,
    twistLimitDamping: Number,
    twistLimitRestitution: Number,
    twistLimitContactDistance: Number,
  ): Object162

  @JsName("GetAngularVelocityDriveSLERP")
  public open fun getAngularVelocityDriveSlerp(outEnableSlerp: Boolean): Object163

  @JsName("GetAngularVelocityDriveTwistAndSwing")
  public open fun getAngularVelocityDriveTwistAndSwing(outEnableTwistDrive: Boolean,
      outEnableSwingDrive: Boolean): Object164

  @JsName("GetAngularVelocityTarget")
  public open fun getAngularVelocityTarget(outVelTarget: Vector): Object165

  @JsName("GetAttachedBodyNames")
  public open fun getAttachedBodyNames(parentBody: String, childBody: String): Object166

  @JsName("GetContactTransferScale")
  public open fun getContactTransferScale(contactTransferScale: Number): Object167

  @JsName("GetDisableCollsion")
  public open fun getDisableCollsion(): Object168

  @JsName("GetLinearBreakable")
  public open fun getLinearBreakable(linearBreakable: Boolean, linearBreakThreshold: Number):
      Object169

  @JsName("GetLinearDriveParams")
  public open fun getLinearDriveParams(
    outPositionStrength: Number,
    outVelocityStrength: Number,
    outForceLimit: Number,
  ): Object157

  @JsName("GetLinearLimits")
  public open fun getLinearLimits(
    xMotion: String,
    yMotion: String,
    zMotion: String,
    limit: Number,
  ): Object170

  @JsName("GetLinearPlasticity")
  public open fun getLinearPlasticity(
    linearPlasticity: Boolean,
    linearPlasticityThreshold: Number,
    plasticityType: String,
  ): Object171

  @JsName("GetLinearPositionDrive")
  public open fun getLinearPositionDrive(
    outEnableDriveX: Boolean,
    outEnableDriveY: Boolean,
    outEnableDriveZ: Boolean,
  ): Object172

  @JsName("GetLinearPositionTarget")
  public open fun getLinearPositionTarget(outPosTarget: Vector): Object173

  @JsName("GetLinearSoftLimitParams")
  public open fun getLinearSoftLimitParams(
    softLinearLimit: Boolean,
    linearLimitStiffness: Number,
    linearLimitDamping: Number,
    linearLimitRestitution: Number,
    linearLimitContactDistance: Number,
  ): Object174

  @JsName("GetLinearVelocityDrive")
  public open fun getLinearVelocityDrive(
    outEnableDriveX: Boolean,
    outEnableDriveY: Boolean,
    outEnableDriveZ: Boolean,
  ): Object172

  @JsName("GetLinearVelocityTarget")
  public open fun getLinearVelocityTarget(outVelTarget: Vector): Object165

  @JsName("GetOrientationDriveSLERP")
  public open fun getOrientationDriveSlerp(outEnableSlerp: Boolean): Object163

  @JsName("GetOrientationDriveTwistAndSwing")
  public open fun getOrientationDriveTwistAndSwing(outEnableTwistDrive: Boolean,
      outEnableSwingDrive: Boolean): Object164

  @JsName("GetParentDominates")
  public open fun getParentDominates(): Object168

  @JsName("GetProjectionParams")
  public open fun getProjectionParams(
    enableProjection: Boolean,
    projectionLinearAlpha: Number,
    projectionAngularAlpha: Number,
  ): Object175

  @JsName("SetAngularBreakable")
  public open fun setAngularBreakable(angularBreakable: Boolean, angularBreakThreshold: Number):
      AccessorProvider

  @JsName("SetAngularDriveMode")
  public open fun setAngularDriveMode(driveMode: String): AccessorProvider

  @JsName("SetAngularDriveParams")
  public open fun setAngularDriveParams(
    positionStrength: Number,
    velocityStrength: Number,
    inForceLimit: Number,
  ): AccessorProvider

  @JsName("SetAngularLimits")
  public open fun setAngularLimits(
    swing1MotionType: String,
    swing1LimitAngle: Number,
    swing2MotionType: String,
    swing2LimitAngle: Number,
    twistMotionType: String,
    twistLimitAngle: Number,
  ): AccessorProvider

  @JsName("SetAngularOrientationTarget")
  public open fun setAngularOrientationTarget(inPosTarget: Rotator): AccessorProvider

  @JsName("SetAngularPlasticity")
  public open fun setAngularPlasticity(angularPlasticity: Boolean,
      angularPlasticityThreshold: Number): AccessorProvider

  @JsName("SetAngularSoftSwingLimitParams")
  public open fun setAngularSoftSwingLimitParams(
    softSwingLimit: Boolean,
    swingLimitStiffness: Number,
    swingLimitDamping: Number,
    swingLimitRestitution: Number,
    swingLimitContactDistance: Number,
  ): AccessorProvider

  @JsName("SetAngularSoftTwistLimitParams")
  public open fun setAngularSoftTwistLimitParams(
    softTwistLimit: Boolean,
    twistLimitStiffness: Number,
    twistLimitDamping: Number,
    twistLimitRestitution: Number,
    twistLimitContactDistance: Number,
  ): AccessorProvider

  @JsName("SetAngularVelocityDriveSLERP")
  public open fun setAngularVelocityDriveSlerp(enableSlerp: Boolean): AccessorProvider

  @JsName("SetAngularVelocityDriveTwistAndSwing")
  public open fun setAngularVelocityDriveTwistAndSwing(enableTwistDrive: Boolean,
      enableSwingDrive: Boolean): AccessorProvider

  @JsName("SetAngularVelocityTarget")
  public open fun setAngularVelocityTarget(inVelTarget: Vector): AccessorProvider

  @JsName("SetContactTransferScale")
  public open fun setContactTransferScale(contactTransferScale: Number): AccessorProvider

  @JsName("SetDisableCollision")
  public open fun setDisableCollision(disableCollision: Boolean): AccessorProvider

  @JsName("SetLinearBreakable")
  public open fun setLinearBreakable(linearBreakable: Boolean, linearBreakThreshold: Number):
      AccessorProvider

  @JsName("SetLinearDriveParams")
  public open fun setLinearDriveParams(
    positionStrength: Number,
    velocityStrength: Number,
    inForceLimit: Number,
  ): AccessorProvider

  @JsName("SetLinearLimits")
  public open fun setLinearLimits(
    xMotion: String,
    yMotion: String,
    zMotion: String,
    limit: Number,
  ): AccessorProvider

  @JsName("SetLinearPlasticity")
  public open fun setLinearPlasticity(
    linearPlasticity: Boolean,
    linearPlasticityThreshold: Number,
    plasticityType: String,
  ): AccessorProvider

  @JsName("SetLinearPositionDrive")
  public open fun setLinearPositionDrive(
    enableDriveX: Boolean,
    enableDriveY: Boolean,
    enableDriveZ: Boolean,
  ): AccessorProvider

  @JsName("SetLinearPositionTarget")
  public open fun setLinearPositionTarget(inPosTarget: Vector): AccessorProvider

  @JsName("SetLinearSoftLimitParams")
  public open fun setLinearSoftLimitParams(
    softLinearLimit: Boolean,
    linearLimitStiffness: Number,
    linearLimitDamping: Number,
    linearLimitRestitution: Number,
    linearLimitContactDistance: Number,
  ): AccessorProvider

  @JsName("SetLinearVelocityDrive")
  public open fun setLinearVelocityDrive(
    enableDriveX: Boolean,
    enableDriveY: Boolean,
    enableDriveZ: Boolean,
  ): AccessorProvider

  @JsName("SetLinearVelocityTarget")
  public open fun setLinearVelocityTarget(inVelTarget: Vector): AccessorProvider

  @JsName("SetOrientationDriveSLERP")
  public open fun setOrientationDriveSlerp(enableSlerp: Boolean): AccessorProvider

  @JsName("SetOrientationDriveTwistAndSwing")
  public open fun setOrientationDriveTwistAndSwing(enableTwistDrive: Boolean,
      enableSwingDrive: Boolean): AccessorProvider

  @JsName("SetParentDominates")
  public open fun setParentDominates(parentDominates: Boolean): AccessorProvider

  @JsName("SetProjectionParams")
  public open fun setProjectionParams(
    enableProjection: Boolean,
    projectionLinearAlpha: Number,
    projectionAngularAlpha: Number,
  ): AccessorProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ConstraintInstanceAccessor

    @JsName("C")
    public fun copy(other: Any): ConstraintInstanceAccessor

    @JsName("CopyParams")
    public fun copyParams(
      accessor: ConstraintInstanceAccessor,
      sourceAccessor: ConstraintInstanceAccessor,
      keepPosition: Boolean,
      keepRotation: Boolean,
    ): Object154

    @JsName("GetAngularBreakable")
    public fun getAngularBreakable(
      accessor: ConstraintInstanceAccessor,
      angularBreakable: Boolean,
      angularBreakThreshold: Number,
    ): Object155

    @JsName("GetAngularDriveMode")
    public fun getAngularDriveMode(accessor: ConstraintInstanceAccessor, outDriveMode: String):
        Object156

    @JsName("GetAngularDriveParams")
    public fun getAngularDriveParams(
      accessor: ConstraintInstanceAccessor,
      outPositionStrength: Number,
      outVelocityStrength: Number,
      outForceLimit: Number,
    ): Object157

    @JsName("GetAngularLimits")
    public fun getAngularLimits(
      accessor: ConstraintInstanceAccessor,
      swing1MotionType: String,
      swing1LimitAngle: Number,
      swing2MotionType: String,
      swing2LimitAngle: Number,
      twistMotionType: String,
      twistLimitAngle: Number,
    ): Object158

    @JsName("GetAngularOrientationTarget")
    public fun getAngularOrientationTarget(accessor: ConstraintInstanceAccessor,
        outPosTarget: Rotator): Object159

    @JsName("GetAngularPlasticity")
    public fun getAngularPlasticity(
      accessor: ConstraintInstanceAccessor,
      angularPlasticity: Boolean,
      angularPlasticityThreshold: Number,
    ): Object160

    @JsName("GetAngularSoftSwingLimitParams")
    public fun getAngularSoftSwingLimitParams(
      accessor: ConstraintInstanceAccessor,
      softSwingLimit: Boolean,
      swingLimitStiffness: Number,
      swingLimitDamping: Number,
      swingLimitRestitution: Number,
      swingLimitContactDistance: Number,
    ): Object161

    @JsName("GetAngularSoftTwistLimitParams")
    public fun getAngularSoftTwistLimitParams(
      accessor: ConstraintInstanceAccessor,
      softTwistLimit: Boolean,
      twistLimitStiffness: Number,
      twistLimitDamping: Number,
      twistLimitRestitution: Number,
      twistLimitContactDistance: Number,
    ): Object162

    @JsName("GetAngularVelocityDriveSLERP")
    public fun getAngularVelocityDriveSlerp(accessor: ConstraintInstanceAccessor,
        outEnableSlerp: Boolean): Object163

    @JsName("GetAngularVelocityDriveTwistAndSwing")
    public fun getAngularVelocityDriveTwistAndSwing(
      accessor: ConstraintInstanceAccessor,
      outEnableTwistDrive: Boolean,
      outEnableSwingDrive: Boolean,
    ): Object164

    @JsName("GetAngularVelocityTarget")
    public fun getAngularVelocityTarget(accessor: ConstraintInstanceAccessor, outVelTarget: Vector):
        Object165

    @JsName("GetAttachedBodyNames")
    public fun getAttachedBodyNames(
      accessor: ConstraintInstanceAccessor,
      parentBody: String,
      childBody: String,
    ): Object166

    @JsName("GetContactTransferScale")
    public fun getContactTransferScale(accessor: ConstraintInstanceAccessor,
        contactTransferScale: Number): Object167

    @JsName("GetDisableCollsion")
    public fun getDisableCollsion(accessor: ConstraintInstanceAccessor): Object168

    @JsName("GetLinearBreakable")
    public fun getLinearBreakable(
      accessor: ConstraintInstanceAccessor,
      linearBreakable: Boolean,
      linearBreakThreshold: Number,
    ): Object169

    @JsName("GetLinearDriveParams")
    public fun getLinearDriveParams(
      accessor: ConstraintInstanceAccessor,
      outPositionStrength: Number,
      outVelocityStrength: Number,
      outForceLimit: Number,
    ): Object157

    @JsName("GetLinearLimits")
    public fun getLinearLimits(
      accessor: ConstraintInstanceAccessor,
      xMotion: String,
      yMotion: String,
      zMotion: String,
      limit: Number,
    ): Object170

    @JsName("GetLinearPlasticity")
    public fun getLinearPlasticity(
      accessor: ConstraintInstanceAccessor,
      linearPlasticity: Boolean,
      linearPlasticityThreshold: Number,
      plasticityType: String,
    ): Object171

    @JsName("GetLinearPositionDrive")
    public fun getLinearPositionDrive(
      accessor: ConstraintInstanceAccessor,
      outEnableDriveX: Boolean,
      outEnableDriveY: Boolean,
      outEnableDriveZ: Boolean,
    ): Object172

    @JsName("GetLinearPositionTarget")
    public fun getLinearPositionTarget(accessor: ConstraintInstanceAccessor, outPosTarget: Vector):
        Object173

    @JsName("GetLinearSoftLimitParams")
    public fun getLinearSoftLimitParams(
      accessor: ConstraintInstanceAccessor,
      softLinearLimit: Boolean,
      linearLimitStiffness: Number,
      linearLimitDamping: Number,
      linearLimitRestitution: Number,
      linearLimitContactDistance: Number,
    ): Object174

    @JsName("GetLinearVelocityDrive")
    public fun getLinearVelocityDrive(
      accessor: ConstraintInstanceAccessor,
      outEnableDriveX: Boolean,
      outEnableDriveY: Boolean,
      outEnableDriveZ: Boolean,
    ): Object172

    @JsName("GetLinearVelocityTarget")
    public fun getLinearVelocityTarget(accessor: ConstraintInstanceAccessor, outVelTarget: Vector):
        Object165

    @JsName("GetOrientationDriveSLERP")
    public fun getOrientationDriveSlerp(accessor: ConstraintInstanceAccessor,
        outEnableSlerp: Boolean): Object163

    @JsName("GetOrientationDriveTwistAndSwing")
    public fun getOrientationDriveTwistAndSwing(
      accessor: ConstraintInstanceAccessor,
      outEnableTwistDrive: Boolean,
      outEnableSwingDrive: Boolean,
    ): Object164

    @JsName("GetParentDominates")
    public fun getParentDominates(accessor: ConstraintInstanceAccessor): Object168

    @JsName("GetProjectionParams")
    public fun getProjectionParams(
      accessor: ConstraintInstanceAccessor,
      enableProjection: Boolean,
      projectionLinearAlpha: Number,
      projectionAngularAlpha: Number,
    ): Object175

    @JsName("SetAngularBreakable")
    public fun setAngularBreakable(
      accessor: ConstraintInstanceAccessor,
      angularBreakable: Boolean,
      angularBreakThreshold: Number,
    ): AccessorProvider

    @JsName("SetAngularDriveMode")
    public fun setAngularDriveMode(accessor: ConstraintInstanceAccessor, driveMode: String):
        AccessorProvider

    @JsName("SetAngularDriveParams")
    public fun setAngularDriveParams(
      accessor: ConstraintInstanceAccessor,
      positionStrength: Number,
      velocityStrength: Number,
      inForceLimit: Number,
    ): AccessorProvider

    @JsName("SetAngularLimits")
    public fun setAngularLimits(
      accessor: ConstraintInstanceAccessor,
      swing1MotionType: String,
      swing1LimitAngle: Number,
      swing2MotionType: String,
      swing2LimitAngle: Number,
      twistMotionType: String,
      twistLimitAngle: Number,
    ): AccessorProvider

    @JsName("SetAngularOrientationTarget")
    public fun setAngularOrientationTarget(accessor: ConstraintInstanceAccessor,
        inPosTarget: Rotator): AccessorProvider

    @JsName("SetAngularPlasticity")
    public fun setAngularPlasticity(
      accessor: ConstraintInstanceAccessor,
      angularPlasticity: Boolean,
      angularPlasticityThreshold: Number,
    ): AccessorProvider

    @JsName("SetAngularSoftSwingLimitParams")
    public fun setAngularSoftSwingLimitParams(
      accessor: ConstraintInstanceAccessor,
      softSwingLimit: Boolean,
      swingLimitStiffness: Number,
      swingLimitDamping: Number,
      swingLimitRestitution: Number,
      swingLimitContactDistance: Number,
    ): AccessorProvider

    @JsName("SetAngularSoftTwistLimitParams")
    public fun setAngularSoftTwistLimitParams(
      accessor: ConstraintInstanceAccessor,
      softTwistLimit: Boolean,
      twistLimitStiffness: Number,
      twistLimitDamping: Number,
      twistLimitRestitution: Number,
      twistLimitContactDistance: Number,
    ): AccessorProvider

    @JsName("SetAngularVelocityDriveSLERP")
    public fun setAngularVelocityDriveSlerp(accessor: ConstraintInstanceAccessor,
        enableSlerp: Boolean): AccessorProvider

    @JsName("SetAngularVelocityDriveTwistAndSwing")
    public fun setAngularVelocityDriveTwistAndSwing(
      accessor: ConstraintInstanceAccessor,
      enableTwistDrive: Boolean,
      enableSwingDrive: Boolean,
    ): AccessorProvider

    @JsName("SetAngularVelocityTarget")
    public fun setAngularVelocityTarget(accessor: ConstraintInstanceAccessor, inVelTarget: Vector):
        AccessorProvider

    @JsName("SetContactTransferScale")
    public fun setContactTransferScale(accessor: ConstraintInstanceAccessor,
        contactTransferScale: Number): AccessorProvider

    @JsName("SetDisableCollision")
    public fun setDisableCollision(accessor: ConstraintInstanceAccessor, disableCollision: Boolean):
        AccessorProvider

    @JsName("SetLinearBreakable")
    public fun setLinearBreakable(
      accessor: ConstraintInstanceAccessor,
      linearBreakable: Boolean,
      linearBreakThreshold: Number,
    ): AccessorProvider

    @JsName("SetLinearDriveParams")
    public fun setLinearDriveParams(
      accessor: ConstraintInstanceAccessor,
      positionStrength: Number,
      velocityStrength: Number,
      inForceLimit: Number,
    ): AccessorProvider

    @JsName("SetLinearLimits")
    public fun setLinearLimits(
      accessor: ConstraintInstanceAccessor,
      xMotion: String,
      yMotion: String,
      zMotion: String,
      limit: Number,
    ): AccessorProvider

    @JsName("SetLinearPlasticity")
    public fun setLinearPlasticity(
      accessor: ConstraintInstanceAccessor,
      linearPlasticity: Boolean,
      linearPlasticityThreshold: Number,
      plasticityType: String,
    ): AccessorProvider

    @JsName("SetLinearPositionDrive")
    public fun setLinearPositionDrive(
      accessor: ConstraintInstanceAccessor,
      enableDriveX: Boolean,
      enableDriveY: Boolean,
      enableDriveZ: Boolean,
    ): AccessorProvider

    @JsName("SetLinearPositionTarget")
    public fun setLinearPositionTarget(accessor: ConstraintInstanceAccessor, inPosTarget: Vector):
        AccessorProvider

    @JsName("SetLinearSoftLimitParams")
    public fun setLinearSoftLimitParams(
      accessor: ConstraintInstanceAccessor,
      softLinearLimit: Boolean,
      linearLimitStiffness: Number,
      linearLimitDamping: Number,
      linearLimitRestitution: Number,
      linearLimitContactDistance: Number,
    ): AccessorProvider

    @JsName("SetLinearVelocityDrive")
    public fun setLinearVelocityDrive(
      accessor: ConstraintInstanceAccessor,
      enableDriveX: Boolean,
      enableDriveY: Boolean,
      enableDriveZ: Boolean,
    ): AccessorProvider

    @JsName("SetLinearVelocityTarget")
    public fun setLinearVelocityTarget(accessor: ConstraintInstanceAccessor, inVelTarget: Vector):
        AccessorProvider

    @JsName("SetOrientationDriveSLERP")
    public fun setOrientationDriveSlerp(accessor: ConstraintInstanceAccessor, enableSlerp: Boolean):
        AccessorProvider

    @JsName("SetOrientationDriveTwistAndSwing")
    public fun setOrientationDriveTwistAndSwing(
      accessor: ConstraintInstanceAccessor,
      enableTwistDrive: Boolean,
      enableSwingDrive: Boolean,
    ): AccessorProvider

    @JsName("SetParentDominates")
    public fun setParentDominates(accessor: ConstraintInstanceAccessor, parentDominates: Boolean):
        AccessorProvider

    @JsName("SetProjectionParams")
    public fun setProjectionParams(
      accessor: ConstraintInstanceAccessor,
      enableProjection: Boolean,
      projectionLinearAlpha: Number,
      projectionAngularAlpha: Number,
    ): AccessorProvider
  }
}

@JsName("T$177")
public external interface OutConstraintsProvider {
  @JsName("OutConstraints")
  public var outConstraints: Array<ConstraintInstanceAccessor>
}

public open external class PhysicsAsset(
  outer: UObject,
) : UObject {
  @JsName("DefaultSkelMesh")
  public open var defaultSkelMesh: SkeletalMesh

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  @JsName("PhysicalAnimationProfiles")
  public open var physicalAnimationProfiles: Array<String>

  @JsName("ConstraintProfiles")
  public open var constraintProfiles: Array<String>

  @JsName("CurrentPhysicalAnimationProfileName")
  public open var currentPhysicalAnimationProfileName: String

  @JsName("CurrentConstraintProfileName")
  public open var currentConstraintProfileName: String

  @JsName("BoundsBodies")
  public open var boundsBodies: Array<Number>

  @JsName("SkeletalBodySetups")
  public open var skeletalBodySetups: Array<SkeletalBodySetup>

  @JsName("ConstraintSetup")
  public open var constraintSetup: Array<PhysicsConstraintTemplate>

  @JsName("SolverSettings")
  public open var solverSettings: PhysicsAssetSolverSettings

  @JsName("SolverIterations")
  public open var solverIterations: SolverIterations

  @JsName("SolverType")
  public open var solverType: String

  @JsName("bNotForDedicatedServer")
  public open var notForDedicatedServer: Boolean

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("BodySetup")
  public open var bodySetup: Array<BodySetup>

  @JsName("GetConstraints")
  public open fun getConstraints(includesTerminated: Boolean,
      outConstraints: Array<ConstraintInstanceAccessor>): OutConstraintsProvider

  @JsName("GetConstraintByName")
  public open fun getConstraintByName(constraintName: String): ConstraintInstanceAccessor

  @JsName("GetConstraintByBoneNames")
  public open fun getConstraintByBoneNames(bone1Name: String, bone2Name: String):
      ConstraintInstanceAccessor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsAsset

    @JsName("C")
    public fun copy(other: UObject): PhysicsAsset

    @JsName("C")
    public fun copy(other: Any): PhysicsAsset
  }
}

public open external class NodeMappingContainer(
  outer: UObject,
) : UObject {
  @JsName("SourceItems")
  public open var sourceItems: Any

  @JsName("TargetItems")
  public open var targetItems: Any

  @JsName("SourceToTarget")
  public open var sourceToTarget: Any

  @JsName("SourceAsset")
  public open var sourceAsset: UObject

  @JsName("TargetAsset")
  public open var targetAsset: UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NodeMappingContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NodeMappingContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NodeMappingContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NodeMappingContainer

    @JsName("C")
    public fun copy(other: UObject): NodeMappingContainer

    @JsName("C")
    public fun copy(other: Any): NodeMappingContainer
  }
}

@JsName("EClothLODBiasMode")
public external object ClothLODBiasMode {
  @JsName("MappingsToSameLOD")
  public var SameLod: String

  @JsName("MappingsToMinLOD")
  public var MinLod: String

  @JsName("MappingsToAnyLOD")
  public var AnyLod: String

  @JsName("EClothLODBiasMode_MAX")
  public var Max: String
}

public open external class MorphTarget(
  outer: UObject,
) : UObject {
  @JsName("BaseSkelMesh")
  public open var baseSkelMesh: SkeletalMesh

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MorphTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MorphTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MorphTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MorphTarget

    @JsName("C")
    public fun copy(other: UObject): MorphTarget

    @JsName("C")
    public fun copy(other: Any): MorphTarget
  }
}

@JsName("ClothPhysicsProperties_Legacy")
public open external class ClothPhysicsPropertiesLegacy {
  @JsName("VerticalResistance")
  public open var verticalResistance: Number

  @JsName("HorizontalResistance")
  public open var horizontalResistance: Number

  @JsName("BendResistance")
  public open var bendResistance: Number

  @JsName("ShearResistance")
  public open var shearResistance: Number

  @JsName("Friction")
  public open var friction: Number

  @JsName("Damping")
  public open var damping: Number

  @JsName("TetherStiffness")
  public open var tetherStiffness: Number

  @JsName("TetherLimit")
  public open var tetherLimit: Number

  @JsName("Drag")
  public open var drag: Number

  @JsName("StiffnessFrequency")
  public open var stiffnessFrequency: Number

  @JsName("GravityScale")
  public open var gravityScale: Number

  @JsName("MassScale")
  public open var massScale: Number

  @JsName("InertiaBlend")
  public open var inertiaBlend: Number

  @JsName("SelfCollisionThickness")
  public open var selfCollisionThickness: Number

  @JsName("SelfCollisionSquashScale")
  public open var selfCollisionSquashScale: Number

  @JsName("SelfCollisionStiffness")
  public open var selfCollisionStiffness: Number

  @JsName("SolverFrequency")
  public open var solverFrequency: Number

  @JsName("FiberCompression")
  public open var fiberCompression: Number

  @JsName("FiberExpansion")
  public open var fiberExpansion: Number

  @JsName("FiberResistance")
  public open var fiberResistance: Number

  public open fun clone(): ClothPhysicsPropertiesLegacy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothPhysicsPropertiesLegacy

    @JsName("C")
    public fun copy(other: Any): ClothPhysicsPropertiesLegacy
  }
}

@JsName("ClothingAssetData_Legacy")
public open external class ClothingAssetDataLegacy {
  @JsName("AssetName")
  public open var assetName: String

  @JsName("ApexFileName")
  public open var apexFileName: String

  @JsName("bClothPropertiesChanged")
  public open var clothPropertiesChanged: Boolean

  @JsName("PhysicsProperties")
  public open var physicsProperties: ClothPhysicsPropertiesLegacy

  public open fun clone(): ClothingAssetDataLegacy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothingAssetDataLegacy

    @JsName("C")
    public fun copy(other: Any): ClothingAssetDataLegacy
  }
}

public open external class ClothingAssetBase(
  outer: UObject,
) : UObject {
  @JsName("ImportedFilePath")
  public open var importedFilePath: String

  @JsName("AssetGuid")
  public open var assetGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothingAssetBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothingAssetBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothingAssetBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothingAssetBase

    @JsName("C")
    public fun copy(other: UObject): ClothingAssetBase

    @JsName("C")
    public fun copy(other: Any): ClothingAssetBase
  }
}

public open external class SkeletalMeshSamplingRegionMaterialFilter {
  @JsName("MaterialName")
  public open var materialName: String

  public open fun clone(): SkeletalMeshSamplingRegionMaterialFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshSamplingRegionMaterialFilter

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshSamplingRegionMaterialFilter
  }
}

public open external class SkeletalMeshSamplingRegionBoneFilter {
  @JsName("BoneName")
  public open var boneName: String

  @JsName("bIncludeOrExclude")
  public open var includeOrExclude: Boolean

  @JsName("bApplyToChildren")
  public open var applyToChildren: Boolean

  public open fun clone(): SkeletalMeshSamplingRegionBoneFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshSamplingRegionBoneFilter

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshSamplingRegionBoneFilter
  }
}

public open external class SkeletalMeshSamplingRegion {
  @JsName("Name")
  public open var name: String

  @JsName("LODIndex")
  public open var lodIndex: Number

  @JsName("bSupportUniformlyDistributedSampling")
  public open var supportUniformlyDistributedSampling: Boolean

  @JsName("MaterialFilters")
  public open var materialFilters: Array<SkeletalMeshSamplingRegionMaterialFilter>

  @JsName("BoneFilters")
  public open var boneFilters: Array<SkeletalMeshSamplingRegionBoneFilter>

  public open fun clone(): SkeletalMeshSamplingRegion

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshSamplingRegion

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshSamplingRegion
  }
}

@JsName("SkeletalMeshSamplingLODBuiltData")
public open external class SkeletalMeshSamplingLodBuiltData {
  public open fun clone(): SkeletalMeshSamplingLodBuiltData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshSamplingLodBuiltData

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshSamplingLodBuiltData
  }
}

public open external class SkeletalMeshSamplingRegionBuiltData {
  public open fun clone(): SkeletalMeshSamplingRegionBuiltData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshSamplingRegionBuiltData

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshSamplingRegionBuiltData
  }
}

public open external class SkeletalMeshSamplingBuiltData {
  @JsName("WholeMeshBuiltData")
  public open var wholeMeshBuiltData: Array<SkeletalMeshSamplingLodBuiltData>

  @JsName("RegionBuiltData")
  public open var regionBuiltData: Array<SkeletalMeshSamplingRegionBuiltData>

  public open fun clone(): SkeletalMeshSamplingBuiltData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshSamplingBuiltData

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshSamplingBuiltData
  }
}

public open external class SkeletalMeshSamplingInfo {
  @JsName("Regions")
  public open var regions: Array<SkeletalMeshSamplingRegion>

  @JsName("BuiltData")
  public open var builtData: SkeletalMeshSamplingBuiltData

  public open fun clone(): SkeletalMeshSamplingInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshSamplingInfo

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshSamplingInfo
  }
}

public open external class SkinWeightProfileInfo {
  @JsName("Name")
  public open var name: String

  @JsName("DefaultProfile")
  public open var defaultProfile: PerPlatformBool

  @JsName("DefaultProfileFromLODIndex")
  public open var defaultProfileFromLodIndex: PerPlatformInt

  @JsName("PerLODSourceFiles")
  public open var perLodSourceFiles: Any

  public open fun clone(): SkinWeightProfileInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkinWeightProfileInfo

    @JsName("C")
    public fun copy(other: Any): SkinWeightProfileInfo
  }
}

@JsName("T$178")
public external interface Object178 {
  @JsName("OutTransform")
  public var outTransform: Transform

  @JsName("OutBoneIndex")
  public var outBoneIndex: Number

  @JsName("OutIndex")
  public var outIndex: Number

  @JsName("$")
  public var value: SkeletalMeshSocket
}

@JsName("T$179")
public external interface Object179 {
  @JsName("OutIndex")
  public var outIndex: Number

  @JsName("$")
  public var value: SkeletalMeshSocket
}

@JsName("T$180")
public external interface SkeletalMeshOutBuildOptionsProvider {
  @JsName("OutBuildOptions")
  public var outBuildOptions: SkeletalMeshBuildSettings
}

public open external class SkeletalMesh(
  outer: UObject,
) : StreamableRenderAsset {
  @JsName("MeshEditorDataObject")
  public open var meshEditorDataObject: SkeletalMeshEditorData

  @JsName("Skeleton")
  public open var skeleton: Skeleton

  @JsName("ImportedBounds")
  public open var importedBounds: BoxSphereBounds

  @JsName("ExtendedBounds")
  public open var extendedBounds: BoxSphereBounds

  @JsName("PositiveBoundsExtension")
  public open var positiveBoundsExtension: Vector

  @JsName("NegativeBoundsExtension")
  public open var negativeBoundsExtension: Vector

  @JsName("Materials")
  public open var materials: Array<SkeletalMaterial>

  @JsName("SkelMirrorTable")
  public open var skelMirrorTable: Array<BoneMirrorInfo>

  @JsName("LODInfo")
  public open var lodInfo: Array<SkeletalMeshLodInfo>

  @JsName("MinLOD")
  public open var minLod: PerPlatformInt

  @JsName("DisableBelowMinLodStripping")
  public open var disableBelowMinLodStripping: PerPlatformBool

  @JsName("bOverrideLODStreamingSettings")
  public open var overrideLodStreamingSettings: Boolean

  @JsName("bSupportLODStreaming")
  public open var supportLodStreaming: PerPlatformBool

  @JsName("MaxNumStreamedLODs")
  public open var maxNumStreamedLoDs: PerPlatformInt

  @JsName("MaxNumOptionalLODs")
  public open var maxNumOptionalLoDs: PerPlatformInt

  @JsName("LODSettings")
  public open var lodSettings: SkeletalMeshLodSettings

  @JsName("DefaultAnimatingRig")
  public open var defaultAnimatingRig: UObject

  @JsName("SkelMirrorAxis")
  public open var skelMirrorAxis: String

  @JsName("SkelMirrorFlipAxis")
  public open var skelMirrorFlipAxis: String

  @JsName("bUseFullPrecisionUVs")
  public open var useFullPrecisionUVs: Boolean

  @JsName("bUseHighPrecisionTangentBasis")
  public open var useHighPrecisionTangentBasis: Boolean

  @JsName("bHasBeenSimplified")
  public open var hasBeenSimplified: Boolean

  @JsName("bHasVertexColors")
  public open var hasVertexColors: Boolean

  @JsName("bEnablePerPolyCollision")
  public open var enablePerPolyCollision: Boolean

  @JsName("VertexColorGuid")
  public open var vertexColorGuid: Guid

  @JsName("BodySetup")
  public open var bodySetup: BodySetup

  @JsName("PhysicsAsset")
  public open var physicsAsset: PhysicsAsset

  @JsName("ShadowPhysicsAsset")
  public open var shadowPhysicsAsset: PhysicsAsset

  @JsName("NodeMappingData")
  public open var nodeMappingData: Array<NodeMappingContainer>

  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("SourceFilePath")
  public open var sourceFilePath: String

  @JsName("SourceFileTimestamp")
  public open var sourceFileTimestamp: String

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("bHasCustomDefaultEditorCamera")
  public open var hasCustomDefaultEditorCamera: Boolean

  @JsName("DefaultEditorCameraLocation")
  public open var defaultEditorCameraLocation: Vector

  @JsName("DefaultEditorCameraRotation")
  public open var defaultEditorCameraRotation: Rotator

  @JsName("DefaultEditorCameraLookAt")
  public open var defaultEditorCameraLookAt: Vector

  @JsName("DefaultEditorCameraOrthoZoom")
  public open var defaultEditorCameraOrthoZoom: Number

  @JsName("PreviewAttachedAssetContainer")
  public open var previewAttachedAssetContainer: PreviewAssetAttachContainer

  @JsName("bSupportRayTracing")
  public open var supportRayTracing: Boolean

  @JsName("RayTracingMinLOD")
  public open var rayTracingMinLod: Number

  @JsName("ClothLODBiasMode")
  public open var clothLodBiasMode: String

  @JsName("MorphTargets")
  public open var morphTargets: Array<MorphTarget>

  @JsName("FloorOffset")
  public open var floorOffset: Number

  @JsName("RetargetBasePose")
  public open var retargetBasePose: Array<Transform>

  @JsName("ClothingAssets")
  public open var clothingAssets: Array<ClothingAssetDataLegacy>

  @JsName("PostProcessAnimBlueprint")
  public open var postProcessAnimBlueprint: UnrealEngineClass

  @JsName("MeshClothingAssets")
  public open var meshClothingAssets: Array<ClothingAssetBase>

  @JsName("SamplingInfo")
  public open var samplingInfo: SkeletalMeshSamplingInfo

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("Sockets")
  public open var sockets: Array<SkeletalMeshSocket>

  @JsName("SkinWeightProfiles")
  public open var skinWeightProfiles: Array<SkinWeightProfileInfo>

  @JsName("SetSkeleton")
  public open fun setSkeleton(inSkeleton: Skeleton): Unit

  @JsName("SetMorphTargets")
  public open fun setMorphTargets(inMorphTargets: Array<MorphTarget>): Unit

  @JsName("SetMeshClothingAssets")
  public open fun setMeshClothingAssets(inMeshClothingAssets: Array<ClothingAssetBase>): Unit

  @JsName("SetMaterials")
  public open fun setMaterials(inMaterials: Array<SkeletalMaterial>): Unit

  @JsName("SetLODSettings")
  public open fun setLodSettings(inLodSettings: SkeletalMeshLodSettings): Unit

  @JsName("SetDefaultAnimatingRig")
  public open fun setDefaultAnimatingRig(inAnimatingRig: UObject): Unit

  @JsName("NumSockets")
  public open fun numSockets(): Number

  @JsName("K2_GetAllMorphTargetNames")
  public open fun k2GetAllMorphTargetNames(): Array<String>

  @JsName("IsSectionUsingCloth")
  public open fun isSectionUsingCloth(inSectionIndex: Number, checkCorrespondingSections: Boolean):
      Boolean

  @JsName("GetSocketByIndex")
  public open fun getSocketByIndex(index: Number): SkeletalMeshSocket

  @JsName("GetSkeleton")
  public open fun getSkeleton(): Skeleton

  @JsName("GetShadowPhysicsAsset")
  public open fun getShadowPhysicsAsset(): PhysicsAsset

  @JsName("GetPhysicsAsset")
  public open fun getPhysicsAsset(): PhysicsAsset

  @JsName("GetNodeMappingData")
  public open fun getNodeMappingData(): Array<NodeMappingContainer>

  @JsName("GetNodeMappingContainer")
  public open fun getNodeMappingContainer(sourceAsset: Blueprint): NodeMappingContainer

  @JsName("GetMorphTargets")
  public open fun getMorphTargets(): Array<MorphTarget>

  @JsName("GetMeshClothingAssets")
  public open fun getMeshClothingAssets(): Array<ClothingAssetBase>

  @JsName("GetMaterials")
  public open fun getMaterials(): Array<SkeletalMaterial>

  @JsName("GetLODSettings")
  public open fun getLodSettings(): SkeletalMeshLodSettings

  @JsName("GetImportedBounds")
  public open fun getImportedBounds(): BoxSphereBounds

  @JsName("GetDefaultAnimatingRig")
  public open fun getDefaultAnimatingRig(): UObject

  @JsName("GetBounds")
  public open fun getBounds(): BoxSphereBounds

  @JsName("FindSocketInfo")
  public open fun findSocketInfo(
    inSocketName: String,
    outTransform: Transform,
    outBoneIndex: Number,
    outIndex: Number,
  ): Object178

  @JsName("FindSocketAndIndex")
  public open fun findSocketAndIndex(inSocketName: String, outIndex: Number): Object179

  @JsName("FindSocket")
  public open fun findSocket(inSocketName: String): SkeletalMeshSocket

  @JsName("GetPhysicsBodySetupFromMesh")
  public open fun getPhysicsBodySetupFromMesh(inName: String): BodySetup

  @JsName("CreatePhysicsAsset")
  public open fun createPhysicsAsset(): PhysicsAsset

  @JsName("GetLodBuildSettings")
  public open fun getLodBuildSettings(lodIndex: Number, outBuildOptions: SkeletalMeshBuildSettings):
      SkeletalMeshOutBuildOptionsProvider

  @JsName("GetLODCount")
  public open fun getLodCount(): Number

  @JsName("GetNumVerts")
  public open fun getNumVerts(lodIndex: Number): Number

  @JsName("ImportLOD")
  public open fun importLod(lodIndex: Number, sourceFilename: String): Number

  @JsName("RegenerateLOD")
  public open fun regenerateLod(
    newLodCount: Number,
    regenerateEvenIfImported: Boolean,
    generateBaseLod: Boolean,
  ): Boolean

  @JsName("ReimportAllCustomLODs")
  public open fun reimportAllCustomLoDs(): Boolean

  @JsName("RemoveLODs")
  public open fun removeLoDs(toRemoveLoDs: Array<Number>): Boolean

  @JsName("RenameSocket")
  public open fun renameSocket(oldName: String, newName: String): Boolean

  @JsName("SetLodBuildSettings")
  public open fun setLodBuildSettings(lodIndex: Number, buildOptions: SkeletalMeshBuildSettings):
      Unit

  @JsName("StripLODGeometry")
  public open fun stripLodGeometry(
    lodIndex: Number,
    textureMask: Texture2d,
    threshold: Number,
  ): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMesh

    @JsName("C")
    public fun copy(other: UObject): SkeletalMesh

    @JsName("C")
    public fun copy(other: Any): SkeletalMesh

    @JsName("GetPhysicsBodySetupFromMesh")
    public fun getPhysicsBodySetupFromMesh(inSkeletalMesh: SkeletalMesh, inName: String): BodySetup

    @JsName("CreatePhysicsAsset")
    public fun createPhysicsAsset(skeletalMesh: SkeletalMesh): PhysicsAsset

    @JsName("GetLodBuildSettings")
    public fun getLodBuildSettings(
      skeletalMesh: SkeletalMesh,
      lodIndex: Number,
      outBuildOptions: SkeletalMeshBuildSettings,
    ): SkeletalMeshOutBuildOptionsProvider

    @JsName("GetLODCount")
    public fun getLodCount(skeletalMesh: SkeletalMesh): Number

    @JsName("GetNumVerts")
    public fun getNumVerts(skeletalMesh: SkeletalMesh, lodIndex: Number): Number

    @JsName("ImportLOD")
    public fun importLod(
      baseMesh: SkeletalMesh,
      lodIndex: Number,
      sourceFilename: String,
    ): Number

    @JsName("RegenerateLOD")
    public fun regenerateLod(
      skeletalMesh: SkeletalMesh,
      newLodCount: Number,
      regenerateEvenIfImported: Boolean,
      generateBaseLod: Boolean,
    ): Boolean

    @JsName("ReimportAllCustomLODs")
    public fun reimportAllCustomLoDs(skeletalMesh: SkeletalMesh): Boolean

    @JsName("RemoveLODs")
    public fun removeLoDs(skeletalMesh: SkeletalMesh, toRemoveLoDs: Array<Number>): Boolean

    @JsName("RenameSocket")
    public fun renameSocket(
      skeletalMesh: SkeletalMesh,
      oldName: String,
      newName: String,
    ): Boolean

    @JsName("SetLodBuildSettings")
    public fun setLodBuildSettings(
      skeletalMesh: SkeletalMesh,
      lodIndex: Number,
      buildOptions: SkeletalMeshBuildSettings,
    ): Unit

    @JsName("StripLODGeometry")
    public fun stripLodGeometry(
      skeletalMesh: SkeletalMesh,
      lodIndex: Number,
      textureMask: Texture2d,
      threshold: Number,
    ): Boolean
  }
}

public open external class MeshDeformer(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshDeformer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshDeformer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshDeformer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshDeformer

    @JsName("C")
    public fun copy(other: UObject): MeshDeformer

    @JsName("C")
    public fun copy(other: Any): MeshDeformer
  }
}

public open external class MeshDeformerInstance(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshDeformerInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshDeformerInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshDeformerInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshDeformerInstance

    @JsName("C")
    public fun copy(other: UObject): MeshDeformerInstance

    @JsName("C")
    public fun copy(other: Any): MeshDeformerInstance
  }
}

@JsName("SkelMeshComponentLODInfo")
public open external class SkelMeshComponentLodInfo {
  @JsName("HiddenMaterials")
  public open var hiddenMaterials: Array<Boolean>

  public open fun clone(): SkelMeshComponentLodInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkelMeshComponentLodInfo

    @JsName("C")
    public fun copy(other: Any): SkelMeshComponentLodInfo
  }
}

@JsName("EVisibilityBasedAnimTickOption")
public external object VisibilityBasedAnimTickOption {
  public var AlwaysTickPoseAndRefreshBones: String

  public var AlwaysTickPose: String

  public var OnlyTickMontagesWhenNotRendered: String

  public var OnlyTickPoseWhenRendered: String

  @JsName("EVisibilityBasedAnimTickOption_MAX")
  public var Max: String
}

@JsName("T$181")
public external interface Object181 {
  @JsName("Bone0")
  public var bone0: Number

  @JsName("Weight0")
  public var weight0: Number

  @JsName("Bone1")
  public var bone1: Number

  @JsName("Weight1")
  public var weight1: Number

  @JsName("Bone2")
  public var bone2: Number

  @JsName("Weight2")
  public var weight2: Number

  @JsName("Bone3")
  public var bone3: Number

  @JsName("Weight3")
  public var weight3: Number
}

public open external class SkelMeshSkinWeightInfo {
  @JsName("Bones")
  public open var bones: Number

  @JsName("Weights")
  public open var weights: Number

  public open fun clone(): SkelMeshSkinWeightInfo

  @JsName("BreakSkinWeightInfo")
  public open fun breakSkinWeightInfo(
    bone0: Number,
    weight0: Number,
    bone1: Number,
    weight1: Number,
    bone2: Number,
    weight2: Number,
    bone3: Number,
    weight3: Number,
  ): Object181

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SkelMeshSkinWeightInfo

    @JsName("C")
    public fun copy(other: Any): SkelMeshSkinWeightInfo

    @JsName("BreakSkinWeightInfo")
    public fun breakSkinWeightInfo(
      inWeight: SkelMeshSkinWeightInfo,
      bone0: Number,
      weight0: Number,
      bone1: Number,
      weight1: Number,
      bone2: Number,
      weight2: Number,
      bone3: Number,
      weight3: Number,
    ): Object181

    @JsName("MakeSkinWeightInfo")
    public fun makeSkinWeightInfo(
      bone0: Number,
      weight0: Number,
      bone1: Number,
      weight1: Number,
      bone2: Number,
      weight2: Number,
      bone3: Number,
      weight3: Number,
    ): SkelMeshSkinWeightInfo
  }
}

@JsName("EPhysBodyOp")
public external object PhysBodyOp {
  @JsName("PBO_None")
  public var None: String

  @JsName("PBO_Term")
  public var Term: String

  @JsName("PBO_MAX")
  public var Max: String
}

@JsName("T$182")
public external interface Object182 {
  @JsName("OutPosition")
  public var outPosition: Vector

  @JsName("OutRotation")
  public var outRotation: Rotator
}

@JsName("T$183")
public external interface Object183 {
  @JsName("OutTwistAngle")
  public var outTwistAngle: Number

  @JsName("OutSwingAngle")
  public var outSwingAngle: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$184")
public external interface Object184 {
  @JsName("BoneLocation")
  public var boneLocation: Vector

  @JsName("$")
  public var value: String
}

public open external class SkinnedMeshComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("SkeletalMesh")
  public open var skeletalMesh: SkeletalMesh

  @JsName("MasterPoseComponent")
  public open var masterPoseComponent: Any

  @JsName("SkinCacheUsage")
  public open var skinCacheUsage: Array<String>

  @JsName("MeshDeformer")
  public open var meshDeformer: MeshDeformer

  @JsName("MeshDeformerInstance")
  public open var meshDeformerInstance: MeshDeformerInstance

  @JsName("WireframeColor")
  public open var wireframeColor: Color

  @JsName("PhysicsAssetOverride")
  public open var physicsAssetOverride: PhysicsAsset

  @JsName("ForcedLodModel")
  public open var forcedLodModel: Number

  @JsName("MinLodModel")
  public open var minLodModel: Number

  @JsName("StreamingDistanceMultiplier")
  public open var streamingDistanceMultiplier: Number

  @JsName("LODInfo")
  public open var lodInfo: Array<SkelMeshComponentLodInfo>

  @JsName("VisibilityBasedAnimTickOption")
  public open var visibilityBasedAnimTickOption: String

  @JsName("bOverrideMinLOD")
  public open var overrideMinLod: Boolean

  @JsName("bUseBoundsFromMasterPoseComponent")
  public open var useBoundsFromMasterPoseComponent: Boolean

  @JsName("bForceWireframe")
  public open var forceWireframe: Boolean

  @JsName("bDisplayBones")
  public open var displayBones: Boolean

  @JsName("bDisableMorphTarget")
  public open var disableMorphTarget: Boolean

  @JsName("bHideSkin")
  public open var hideSkin: Boolean

  @JsName("bPerBoneMotionBlur")
  public open var perBoneMotionBlur: Boolean

  @JsName("bComponentUseFixedSkelBounds")
  public open var componentUseFixedSkelBounds: Boolean

  @JsName("bConsiderAllBodiesForBounds")
  public open var considerAllBodiesForBounds: Boolean

  @JsName("bSyncAttachParentLOD")
  public open var syncAttachParentLod: Boolean

  @JsName("bCanHighlightSelectedSections")
  public open var canHighlightSelectedSections: Boolean

  @JsName("bRecentlyRendered")
  public open var recentlyRendered: Boolean

  @JsName("bCastCapsuleDirectShadow")
  public open var castCapsuleDirectShadow: Boolean

  @JsName("bCastCapsuleIndirectShadow")
  public open var castCapsuleIndirectShadow: Boolean

  @JsName("bCPUSkinning")
  public open var cpuSkinning: Boolean

  @JsName("bEnableUpdateRateOptimizations")
  public open var enableUpdateRateOptimizations: Boolean

  @JsName("bDisplayDebugUpdateRateOptimizations")
  public open var displayDebugUpdateRateOptimizations: Boolean

  @JsName("bRenderStatic")
  public open var renderStatic: Boolean

  @JsName("bIgnoreMasterPoseComponentLOD")
  public open var ignoreMasterPoseComponentLod: Boolean

  @JsName("bCachedLocalBoundsUpToDate")
  public open var cachedLocalBoundsUpToDate: Boolean

  @JsName("bCachedWorldSpaceBoundsUpToDate")
  public open var cachedWorldSpaceBoundsUpToDate: Boolean

  @JsName("bForceMeshObjectUpdate")
  public open var forceMeshObjectUpdate: Boolean

  @JsName("CapsuleIndirectShadowMinVisibility")
  public open var capsuleIndirectShadowMinVisibility: Number

  @JsName("CachedWorldOrLocalSpaceBounds")
  public open var cachedWorldOrLocalSpaceBounds: BoxSphereBounds

  @JsName("CachedWorldToLocalTransform")
  public open var cachedWorldToLocalTransform: Matrix

  @JsName("UnloadSkinWeightProfile")
  public open fun unloadSkinWeightProfile(inProfileName: String): Unit

  @JsName("UnHideBoneByName")
  public open fun unHideBoneByName(boneName: String): Unit

  @JsName("TransformToBoneSpace")
  public open fun transformToBoneSpace(
    boneName: String,
    inPosition: Vector,
    inRotation: Rotator,
    outPosition: Vector,
    outRotation: Rotator,
  ): Object182

  @JsName("TransformFromBoneSpace")
  public open fun transformFromBoneSpace(
    boneName: String,
    inPosition: Vector,
    inRotation: Rotator,
    outPosition: Vector,
    outRotation: Rotator,
  ): Object182

  @JsName("ShowMaterialSection")
  public open fun showMaterialSection(
    materialId: Number,
    sectionIndex: Number,
    show: Boolean,
    lodIndex: Number,
  ): Unit

  @JsName("ShowAllMaterialSections")
  public open fun showAllMaterialSections(lodIndex: Number): Unit

  @JsName("SetVertexOffsetUsage")
  public open fun setVertexOffsetUsage(lodIndex: Number, usage: Number): Unit

  @JsName("SetVertexColorOverride_LinearColor")
  public open fun setVertexColorOverrideLinearColor(lodIndex: Number,
      vertexColors: Array<LinearColor>): Unit

  @JsName("SetSkinWeightProfile")
  public open fun setSkinWeightProfile(inProfileName: String): Boolean

  @JsName("SetSkinWeightOverride")
  public open fun setSkinWeightOverride(lodIndex: Number,
      skinWeights: Array<SkelMeshSkinWeightInfo>): Unit

  @JsName("SetSkeletalMesh")
  public open fun setSkeletalMesh(newMesh: SkeletalMesh, reinitPose: Boolean): Unit

  @JsName("SetRenderStatic")
  public open fun setRenderStatic(newValue: Boolean): Unit

  @JsName("SetPreSkinningOffsets")
  public open fun setPreSkinningOffsets(lodIndex: Number, offsets: Array<Vector>): Unit

  @JsName("SetPostSkinningOffsets")
  public open fun setPostSkinningOffsets(lodIndex: Number, offsets: Array<Vector>): Unit

  @JsName("SetPhysicsAsset")
  public open fun setPhysicsAsset(newPhysicsAsset: PhysicsAsset, forceReInit: Boolean): Unit

  @JsName("SetMinLOD")
  public open fun setMinLod(inNewMinLod: Number): Unit

  @JsName("SetMeshDeformer")
  public open fun setMeshDeformer(inMeshDeformer: MeshDeformer): Unit

  @JsName("SetMasterPoseComponent")
  public open fun setMasterPoseComponent(newMasterBoneComponent: SkinnedMeshComponent,
      forceUpdate: Boolean): Unit

  @JsName("SetForcedLOD")
  public open fun setForcedLod(inNewForcedLod: Number): Unit

  @JsName("SetCastCapsuleIndirectShadow")
  public open fun setCastCapsuleIndirectShadow(newValue: Boolean): Unit

  @JsName("SetCastCapsuleDirectShadow")
  public open fun setCastCapsuleDirectShadow(newValue: Boolean): Unit

  @JsName("SetCapsuleIndirectShadowMinVisibility")
  public open fun setCapsuleIndirectShadowMinVisibility(newValue: Number): Unit

  @JsName("IsUsingSkinWeightProfile")
  public open fun isUsingSkinWeightProfile(): Boolean

  @JsName("IsMaterialSectionShown")
  public open fun isMaterialSectionShown(materialId: Number, lodIndex: Number): Boolean

  @JsName("IsBoneHiddenByName")
  public open fun isBoneHiddenByName(boneName: String): Boolean

  @JsName("HideBoneByName")
  public open fun hideBoneByName(boneName: String, physBodyOption: String): Unit

  @JsName("GetVertexOffsetUsage")
  public open fun getVertexOffsetUsage(lodIndex: Number): Number

  @JsName("GetTwistAndSwingAngleOfDeltaRotationFromRefPose")
  public open fun getTwistAndSwingAngleOfDeltaRotationFromRefPose(
    boneName: String,
    outTwistAngle: Number,
    outSwingAngle: Number,
  ): Object183

  @JsName("GetSocketBoneName")
  public open fun getSocketBoneName(inSocketName: String): String

  @JsName("GetRefPoseTransform")
  public open fun getRefPoseTransform(boneIndex: Number): Transform

  @JsName("GetRefPosePosition")
  public open fun getRefPosePosition(boneIndex: Number): Vector

  @JsName("GetParentBone")
  public open fun getParentBone(boneName: String): String

  @JsName("GetNumLODs")
  public open fun getNumLoDs(): Number

  @JsName("GetNumBones")
  public open fun getNumBones(): Number

  @JsName("GetForcedLOD")
  public open fun getForcedLod(): Number

  @JsName("GetDeltaTransformFromRefPose")
  public open fun getDeltaTransformFromRefPose(boneName: String, baseName: String): Transform

  @JsName("GetCurrentSkinWeightProfileName")
  public open fun getCurrentSkinWeightProfileName(): String

  @JsName("GetBoneName")
  public open fun getBoneName(boneIndex: Number): String

  @JsName("GetBoneIndex")
  public open fun getBoneIndex(boneName: String): Number

  @JsName("FindClosestBone_K2")
  public open fun findClosestBoneK2(
    testLocation: Vector,
    boneLocation: Vector,
    ignoreScale: Number,
    requirePhysicsAsset: Boolean,
  ): Object184

  @JsName("ClearVertexColorOverride")
  public open fun clearVertexColorOverride(lodIndex: Number): Unit

  @JsName("ClearSkinWeightProfile")
  public open fun clearSkinWeightProfile(): Unit

  @JsName("ClearSkinWeightOverride")
  public open fun clearSkinWeightOverride(lodIndex: Number): Unit

  @JsName("BoneIsChildOf")
  public open fun boneIsChildOf(boneName: String, parentBoneName: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkinnedMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkinnedMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkinnedMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkinnedMeshComponent

    @JsName("C")
    public fun copy(other: UObject): SkinnedMeshComponent

    @JsName("C")
    public fun copy(other: Any): SkinnedMeshComponent
  }
}

public open external class SingleAnimationPlayData {
  @JsName("AnimToPlay")
  public open var animToPlay: AnimationAsset

  @JsName("bSavedLooping")
  public open var savedLooping: Boolean

  @JsName("bSavedPlaying")
  public open var savedPlaying: Boolean

  @JsName("SavedPosition")
  public open var savedPosition: Number

  @JsName("SavedPlayRate")
  public open var savedPlayRate: Number

  public open fun clone(): SingleAnimationPlayData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SingleAnimationPlayData

    @JsName("C")
    public fun copy(other: Any): SingleAnimationPlayData
  }
}

@JsName("EKinematicBonesUpdateToPhysics")
public external object KinematicBonesUpdateToPhysics {
  @JsName("SkipSimulatingBones")
  public var SimulatingBones: String

  @JsName("SkipAllBones")
  public var AllBones: String

  @JsName("EKinematicBonesUpdateToPhysics_MAX")
  public var Max: String
}

@JsName("EPhysicsTransformUpdateMode")
public external object PhysicsTransformUpdateMode {
  public var SimulationUpatesComponentTransform: String

  public var ComponentTransformIsKinematic: String

  @JsName("EPhysicsTransformUpdateMode_MAX")
  public var Max: String
}

@JsName("EAnimationMode")
public external object AnimationMode {
  @JsName("AnimationBlueprint")
  public var Blueprint: String

  @JsName("AnimationSingleNode")
  public var SingleNode: String

  @JsName("AnimationCustomMode")
  public var CustomMode: String

  @JsName("EAnimationMode_MAX")
  public var Max: String
}

public open external class ClothingSimulationFactory(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothingSimulationFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothingSimulationFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothingSimulationFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothingSimulationFactory

    @JsName("C")
    public fun copy(other: UObject): ClothingSimulationFactory

    @JsName("C")
    public fun copy(other: Any): ClothingSimulationFactory
  }
}

public open external class ClothingInteractor(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothingInteractor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothingInteractor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothingInteractor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothingInteractor

    @JsName("C")
    public fun copy(other: UObject): ClothingInteractor

    @JsName("C")
    public fun copy(other: Any): ClothingInteractor
  }
}

public open external class ClothingSimulationInteractor(
  outer: UObject,
) : UObject {
  @JsName("ClothingInteractors")
  public open var clothingInteractors: Any

  @JsName("SetNumSubsteps")
  public open fun setNumSubsteps(numSubsteps: Number): Unit

  @JsName("SetNumIterations")
  public open fun setNumIterations(numIterations: Number): Unit

  @JsName("SetMaxNumIterations")
  public open fun setMaxNumIterations(maxNumIterations: Number): Unit

  @JsName("SetAnimDriveSpringStiffness")
  public open fun setAnimDriveSpringStiffness(inStiffness: Number): Unit

  @JsName("PhysicsAssetUpdated")
  public open fun physicsAssetUpdated(): Unit

  @JsName("GetSimulationTime")
  public open fun getSimulationTime(): Number

  @JsName("GetNumSubsteps")
  public open fun getNumSubsteps(): Number

  @JsName("GetNumKinematicParticles")
  public open fun getNumKinematicParticles(): Number

  @JsName("GetNumIterations")
  public open fun getNumIterations(): Number

  @JsName("GetNumDynamicParticles")
  public open fun getNumDynamicParticles(): Number

  @JsName("GetNumCloths")
  public open fun getNumCloths(): Number

  @JsName("GetClothingInteractor")
  public open fun getClothingInteractor(clothingAssetName: String): ClothingInteractor

  @JsName("EnableGravityOverride")
  public open fun enableGravityOverride(inVector: Vector): Unit

  @JsName("DisableGravityOverride")
  public open fun disableGravityOverride(): Unit

  @JsName("ClothConfigUpdated")
  public open fun clothConfigUpdated(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothingSimulationInteractor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothingSimulationInteractor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothingSimulationInteractor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothingSimulationInteractor

    @JsName("C")
    public fun copy(other: UObject): ClothingSimulationInteractor

    @JsName("C")
    public fun copy(other: Any): ClothingSimulationInteractor
  }
}

@JsName("ECustomBoneAttributeLookup")
public external object CustomBoneAttributeLookup {
  public var BoneOnly: String

  public var ImmediateParent: String

  public var ParentHierarchy: String

  @JsName("ECustomBoneAttributeLookup_MAX")
  public var Max: String
}

@JsName("ERelativeTransformSpace")
public external object RelativeTransformSpace {
  @JsName("RTS_World")
  public var World: String

  @JsName("RTS_Actor")
  public var Actor: String

  @JsName("RTS_Component")
  public var Component: String

  @JsName("RTS_ParentBoneSpace")
  public var ParentBoneSpace: String

  @JsName("RTS_MAX")
  public var Max: String
}

@JsName("T$185")
public external interface Object185 {
  @JsName("ClosestWorldPosition")
  public var closestWorldPosition: Vector

  @JsName("Normal")
  public var normal: Vector

  @JsName("BoneName")
  public var boneName: String

  @JsName("Distance")
  public var distance: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$186")
public external interface Object186 {
  @JsName("OutValue")
  public var outValue: Transform

  @JsName("$")
  public var value: Boolean
}

@JsName("T$187")
public external interface Object187 {
  @JsName("OutValue")
  public var outValue: String

  @JsName("$")
  public var value: Boolean
}

@JsName("T$189")
public external interface Object189 {
  @JsName("OutValue")
  public var outValue: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$190")
public external interface Object190 {
  @JsName("Swing1Angle")
  public var swing1Angle: Number

  @JsName("TwistAngle")
  public var twistAngle: Number

  @JsName("Swing2Angle")
  public var swing2Angle: Number
}

public open external class SkeletalMeshComponent(
  outer: UObject,
) : SkinnedMeshComponent {
  @JsName("AnimationBlueprint")
  public open var animationBlueprint: AnimBlueprint

  @JsName("AnimBlueprintGeneratedClass")
  public open var animBlueprintGeneratedClass: UnrealEngineClass

  @JsName("AnimClass")
  public open var animClass: UnrealEngineClass

  @JsName("AnimScriptInstance")
  public open var animScriptInstance: AnimInstance

  @JsName("SubInstances")
  public open var subInstances: Array<AnimInstance>

  @JsName("PostProcessAnimInstance")
  public open var postProcessAnimInstance: AnimInstance

  @JsName("AnimationData")
  public open var animationData: SingleAnimationPlayData

  @JsName("RootBoneTranslation")
  public open var rootBoneTranslation: Vector

  @JsName("LineCheckBoundsScale")
  public open var lineCheckBoundsScale: Vector

  @JsName("LinkedInstances")
  public open var linkedInstances: Array<AnimInstance>

  @JsName("CachedBoneSpaceTransforms")
  public open var cachedBoneSpaceTransforms: Array<Transform>

  @JsName("CachedComponentSpaceTransforms")
  public open var cachedComponentSpaceTransforms: Array<Transform>

  @JsName("GlobalAnimRateScale")
  public open var globalAnimRateScale: Number

  @JsName("KinematicBonesUpdateType")
  public open var kinematicBonesUpdateType: String

  @JsName("PhysicsTransformUpdateMode")
  public open var physicsTransformUpdateMode: String

  @JsName("AnimationMode")
  public open var animationMode: String

  @JsName("bDisablePostProcessBlueprint")
  public open var disablePostProcessBlueprint: Boolean

  @JsName("bUpdateOverlapsOnAnimationFinalize")
  public open var updateOverlapsOnAnimationFinalize: Boolean

  @JsName("bHasValidBodies")
  public open var hasValidBodies: Boolean

  @JsName("bBlendPhysics")
  public open var blendPhysics: Boolean

  @JsName("bEnablePhysicsOnDedicatedServer")
  public open var enablePhysicsOnDedicatedServer: Boolean

  @JsName("bUpdateJointsFromAnimation")
  public open var updateJointsFromAnimation: Boolean

  @JsName("bAllowClothActors")
  public open var allowClothActors: Boolean

  @JsName("bDisableClothSimulation")
  public open var disableClothSimulation: Boolean

  @JsName("bDisableRigidBodyAnimNode")
  public open var disableRigidBodyAnimNode: Boolean

  @JsName("bAllowAnimCurveEvaluation")
  public open var allowAnimCurveEvaluation: Boolean

  @JsName("bDisableAnimCurves")
  public open var disableAnimCurves: Boolean

  @JsName("bCollideWithEnvironment")
  public open var collideWithEnvironment: Boolean

  @JsName("bCollideWithAttachedChildren")
  public open var collideWithAttachedChildren: Boolean

  @JsName("bForceCollisionUpdate")
  public open var forceCollisionUpdate: Boolean

  @JsName("bLocalSpaceSimulation")
  public open var localSpaceSimulation: Boolean

  @JsName("bResetAfterTeleport")
  public open var resetAfterTeleport: Boolean

  @JsName("bDeferKinematicBoneUpdate")
  public open var deferKinematicBoneUpdate: Boolean

  @JsName("bNoSkeletonUpdate")
  public open var noSkeletonUpdate: Boolean

  @JsName("bPauseAnims")
  public open var pauseAnims: Boolean

  @JsName("bUseRefPoseOnInitAnim")
  public open var useRefPoseOnInitAnim: Boolean

  @JsName("bEnablePerPolyCollision")
  public open var enablePerPolyCollision: Boolean

  @JsName("bForceRefpose")
  public open var forceRefpose: Boolean

  @JsName("bOnlyAllowAutonomousTickPose")
  public open var onlyAllowAutonomousTickPose: Boolean

  @JsName("bIsAutonomousTickPose")
  public open var isAutonomousTickPose: Boolean

  @JsName("bOldForceRefPose")
  public open var oldForceRefPose: Boolean

  @JsName("bShowPrePhysBones")
  public open var showPrePhysBones: Boolean

  @JsName("bRequiredBonesUpToDate")
  public open var requiredBonesUpToDate: Boolean

  @JsName("bAnimTreeInitialised")
  public open var animTreeInitialised: Boolean

  @JsName("bIncludeComponentLocationIntoBounds")
  public open var includeComponentLocationIntoBounds: Boolean

  @JsName("bEnableLineCheckWithBounds")
  public open var enableLineCheckWithBounds: Boolean

  @JsName("bPropagateCurvesToSlaves")
  public open var propagateCurvesToSlaves: Boolean

  @JsName("bSkipKinematicUpdateWhenInterpolating")
  public open var skipKinematicUpdateWhenInterpolating: Boolean

  @JsName("bSkipBoundsUpdateWhenInterpolating")
  public open var skipBoundsUpdateWhenInterpolating: Boolean

  @JsName("bUpdateAnimationInEditor")
  public open var updateAnimationInEditor: Boolean

  @JsName("bUpdateClothInEditor")
  public open var updateClothInEditor: Boolean

  @JsName("bOverrideDefaultAnimatingRig")
  public open var overrideDefaultAnimatingRig: Boolean

  @JsName("bNeedsQueuedAnimEventsDispatched")
  public open var needsQueuedAnimEventsDispatched: Boolean

  @JsName("CachedAnimCurveUidVersion")
  public open var cachedAnimCurveUidVersion: Any

  @JsName("ClothBlendWeight")
  public open var clothBlendWeight: Number

  @JsName("bWaitForParallelClothTask")
  public open var waitForParallelClothTask: Boolean

  @JsName("DisallowedAnimCurves")
  public open var disallowedAnimCurves: Array<String>

  @JsName("BodySetup")
  public open var bodySetup: BodySetup

  @JsName("ClothMaxDistanceScale")
  public open var clothMaxDistanceScale: Number

  @JsName("OnConstraintBroken")
  public open var onConstraintBroken:
      UnrealEngineMulticastDelegate<(ConstraintIndex: Number) -> Unit>

  @JsName("OnPlasticDeformation")
  public open var onPlasticDeformation:
      UnrealEngineMulticastDelegate<(ConstraintIndex: Number) -> Unit>

  @JsName("ClothingSimulationFactory")
  public open var clothingSimulationFactory: UnrealEngineClass

  @JsName("TeleportDistanceThreshold")
  public open var teleportDistanceThreshold: Number

  @JsName("TeleportRotationThreshold")
  public open var teleportRotationThreshold: Number

  @JsName("LastPoseTickFrame")
  public open var lastPoseTickFrame: Any

  @JsName("ClothingInteractor")
  public open var clothingInteractor: ClothingSimulationInteractor

  @JsName("OnAnimInitialized")
  public open var onAnimInitialized: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SequenceToPlay")
  public open var sequenceToPlay: AnimSequence

  @JsName("AnimToPlay")
  public open var animToPlay: AnimationAsset

  @JsName("bDefaultLooping")
  public open var defaultLooping: Boolean

  @JsName("bDefaultPlaying")
  public open var defaultPlaying: Boolean

  @JsName("DefaultPosition")
  public open var defaultPosition: Number

  @JsName("DefaultPlayRate")
  public open var defaultPlayRate: Number

  @JsName("DefaultAnimatingRigOverride")
  public open var defaultAnimatingRigOverride: UObject

  @JsName("UnlinkAnimClassLayers")
  public open fun unlinkAnimClassLayers(inClass: UnrealEngineClass): Unit

  @JsName("UnbindClothFromMasterPoseComponent")
  public open fun unbindClothFromMasterPoseComponent(restoreSimulationSpace: Boolean): Unit

  @JsName("ToggleDisablePostProcessBlueprint")
  public open fun toggleDisablePostProcessBlueprint(): Unit

  @JsName("TermBodiesBelow")
  public open fun termBodiesBelow(parentBoneName: String): Unit

  @JsName("SuspendClothingSimulation")
  public open fun suspendClothingSimulation(): Unit

  @JsName("Stop")
  public open fun stop(): Unit

  @JsName("SnapshotPose")
  public open fun snapshotPose(snapshot: PoseSnapshot): SnapshotProvider

  @JsName("SetUpdateClothInEditor")
  public open fun setUpdateClothInEditor(newUpdateState: Boolean): Unit

  @JsName("SetUpdateAnimationInEditor")
  public open fun setUpdateAnimationInEditor(newUpdateState: Boolean): Unit

  @JsName("SetTeleportRotationThreshold")
  public open fun setTeleportRotationThreshold(threshold: Number): Unit

  @JsName("SetTeleportDistanceThreshold")
  public open fun setTeleportDistanceThreshold(threshold: Number): Unit

  @JsName("SetPosition")
  public open fun setPosition(inPos: Number, fireNotifies: Boolean): Unit

  @JsName("SetPlayRate")
  public open fun setPlayRate(rate: Number): Unit

  @JsName("SetPhysicsBlendWeight")
  public open fun setPhysicsBlendWeight(physicsBlendWeight: Number): Unit

  @JsName("SetNotifyRigidBodyCollisionBelow")
  public open fun setNotifyRigidBodyCollisionBelow(
    newNotifyRigidBodyCollision: Boolean,
    boneName: String,
    includeSelf: Boolean,
  ): Unit

  @JsName("SetMorphTarget")
  public open fun setMorphTarget(
    morphTargetName: String,
    value: Number,
    removeZeroWeight: Boolean,
  ): Unit

  @JsName("SetEnablePhysicsBlending")
  public open fun setEnablePhysicsBlending(newBlendPhysics: Boolean): Unit

  @JsName("SetEnableGravityOnAllBodiesBelow")
  public open fun setEnableGravityOnAllBodiesBelow(
    enableGravity: Boolean,
    boneName: String,
    includeSelf: Boolean,
  ): Unit

  @JsName("SetEnableBodyGravity")
  public open fun setEnableBodyGravity(enableGravity: Boolean, boneName: String): Unit

  @JsName("SetDisablePostProcessBlueprint")
  public open fun setDisablePostProcessBlueprint(inDisablePostProcess: Boolean): Unit

  @JsName("SetDisableAnimCurves")
  public open fun setDisableAnimCurves(inDisableAnimCurves: Boolean): Unit

  @JsName("SetDefaultAnimatingRigOverride")
  public open fun setDefaultAnimatingRigOverride(inAnimatingRig: UObject): Unit

  @JsName("SetConstraintProfileForAll")
  public open fun setConstraintProfileForAll(profileName: String, defaultIfNotFound: Boolean): Unit

  @JsName("SetConstraintProfile")
  public open fun setConstraintProfile(
    jointName: String,
    profileName: String,
    defaultIfNotFound: Boolean,
  ): Unit

  @JsName("SetClothMaxDistanceScale")
  public open fun setClothMaxDistanceScale(scale: Number): Unit

  @JsName("SetBodyNotifyRigidBodyCollision")
  public open fun setBodyNotifyRigidBodyCollision(newNotifyRigidBodyCollision: Boolean,
      boneName: String): Unit

  @JsName("SetAnimClass")
  public open fun setAnimClass(newClass: UnrealEngineClass): Unit

  @JsName("SetAnimationMode")
  public open fun setAnimationMode(inAnimationMode: String): Unit

  @JsName("SetAnimation")
  public open fun setAnimation(newAnimToPlay: AnimationAsset): Unit

  @JsName("SetAngularLimits")
  public open fun setAngularLimits(
    inBoneName: String,
    swing1LimitAngle: Number,
    twistLimitAngle: Number,
    swing2LimitAngle: Number,
  ): Unit

  @JsName("SetAllowRigidBodyAnimNode")
  public open fun setAllowRigidBodyAnimNode(inAllow: Boolean, reinitAnim: Boolean): Unit

  @JsName("SetAllowedAnimCurvesEvaluation")
  public open fun setAllowedAnimCurvesEvaluation(list: Array<String>, allow: Boolean): Unit

  @JsName("SetAllowClothActors")
  public open fun setAllowClothActors(inAllow: Boolean): Unit

  @JsName("SetAllowAnimCurveEvaluation")
  public open fun setAllowAnimCurveEvaluation(inAllow: Boolean): Unit

  @JsName("SetAllMotorsAngularVelocityDrive")
  public open fun setAllMotorsAngularVelocityDrive(
    enableSwingDrive: Boolean,
    enableTwistDrive: Boolean,
    skipCustomPhysicsType: Boolean,
  ): Unit

  @JsName("SetAllMotorsAngularPositionDrive")
  public open fun setAllMotorsAngularPositionDrive(
    enableSwingDrive: Boolean,
    enableTwistDrive: Boolean,
    skipCustomPhysicsType: Boolean,
  ): Unit

  @JsName("SetAllMotorsAngularDriveParams")
  public open fun setAllMotorsAngularDriveParams(
    inSpring: Number,
    inDamping: Number,
    inForceLimit: Number,
    skipCustomPhysicsType: Boolean,
  ): Unit

  @JsName("SetAllBodiesSimulatePhysics")
  public open fun setAllBodiesSimulatePhysics(newSimulate: Boolean): Unit

  @JsName("SetAllBodiesPhysicsBlendWeight")
  public open fun setAllBodiesPhysicsBlendWeight(physicsBlendWeight: Number,
      skipCustomPhysicsType: Boolean): Unit

  @JsName("SetAllBodiesBelowSimulatePhysics")
  public open fun setAllBodiesBelowSimulatePhysics(
    inBoneName: String,
    newSimulate: Boolean,
    includeSelf: Boolean,
  ): Unit

  @JsName("SetAllBodiesBelowPhysicsDisabled")
  public open fun setAllBodiesBelowPhysicsDisabled(
    inBoneName: String,
    disabled: Boolean,
    includeSelf: Boolean,
  ): Unit

  @JsName("SetAllBodiesBelowPhysicsBlendWeight")
  public open fun setAllBodiesBelowPhysicsBlendWeight(
    inBoneName: String,
    physicsBlendWeight: Number,
    skipCustomPhysicsType: Boolean,
    includeSelf: Boolean,
  ): Unit

  @JsName("SetAllBodiesBelowLinearVelocity")
  public open fun setAllBodiesBelowLinearVelocity(
    inBoneName: String,
    linearVelocity: Vector,
    includeSelf: Boolean,
  ): Unit

  @JsName("ResumeClothingSimulation")
  public open fun resumeClothingSimulation(): Unit

  @JsName("ResetClothTeleportMode")
  public open fun resetClothTeleportMode(): Unit

  @JsName("ResetAnimInstanceDynamics")
  public open fun resetAnimInstanceDynamics(inTeleportType: String): Unit

  @JsName("ResetAllowedAnimCurveEvaluation")
  public open fun resetAllowedAnimCurveEvaluation(): Unit

  @JsName("ResetAllBodiesSimulatePhysics")
  public open fun resetAllBodiesSimulatePhysics(): Unit

  @JsName("PlayAnimation")
  public open fun playAnimation(newAnimToPlay: AnimationAsset, looping: Boolean): Unit

  @JsName("Play")
  public open fun play(looping: Boolean): Unit

  @JsName("OverrideAnimationData")
  public open fun overrideAnimationData(
    inAnimToPlay: AnimationAsset,
    isLooping: Boolean,
    isPlaying: Boolean,
    position: Number,
    playRate: Number,
  ): Unit

  @JsName("LinkAnimGraphByTag")
  public open fun linkAnimGraphByTag(inTag: String, inClass: UnrealEngineClass): Unit

  @JsName("LinkAnimClassLayers")
  public open fun linkAnimClassLayers(inClass: UnrealEngineClass): Unit

  @JsName("K2_GetClosestPointOnPhysicsAsset")
  public open fun k2GetClosestPointOnPhysicsAsset(
    worldPosition: Vector,
    closestWorldPosition: Vector,
    normal: Vector,
    boneName: String,
    distance: Number,
  ): Object185

  @JsName("IsPlaying")
  public open fun isPlaying(): Boolean

  @JsName("IsClothingSimulationSuspended")
  public open fun isClothingSimulationSuspended(): Boolean

  @JsName("IsBodyGravityEnabled")
  public open fun isBodyGravityEnabled(boneName: String): Boolean

  @JsName("HasValidAnimationInstance")
  public open fun hasValidAnimationInstance(): Boolean

  @JsName("GetTransformAttribute_Ref")
  public open fun getTransformAttributeRef(
    boneName: String,
    attributeName: String,
    outValue: Transform,
    lookupType: String,
  ): Object186

  @JsName("GetTransformAttribute")
  public open fun getTransformAttribute(
    boneName: String,
    attributeName: String,
    defaultValue: Transform,
    outValue: Transform,
    lookupType: String,
  ): Object186

  @JsName("GetTeleportRotationThreshold")
  public open fun getTeleportRotationThreshold(): Number

  @JsName("GetTeleportDistanceThreshold")
  public open fun getTeleportDistanceThreshold(): Number

  @JsName("GetStringAttribute_Ref")
  public open fun getStringAttributeRef(
    boneName: String,
    attributeName: String,
    outValue: String,
    lookupType: String,
  ): Object187

  @JsName("GetStringAttribute")
  public open fun getStringAttribute(
    boneName: String,
    attributeName: String,
    defaultValue: String,
    outValue: String,
    lookupType: String,
  ): Object187

  @JsName("GetSkeletalCenterOfMass")
  public open fun getSkeletalCenterOfMass(): Vector

  @JsName("GetPostProcessInstance")
  public open fun getPostProcessInstance(): AnimInstance

  @JsName("GetPosition")
  public open fun getPosition(): Number

  @JsName("GetPlayRate")
  public open fun getPlayRate(): Number

  @JsName("GetMorphTarget")
  public open fun getMorphTarget(morphTargetName: String): Number

  @JsName("GetLinkedAnimLayerInstanceByGroup")
  public open fun getLinkedAnimLayerInstanceByGroup(inGroup: String): AnimInstance

  @JsName("GetLinkedAnimLayerInstanceByClass")
  public open fun getLinkedAnimLayerInstanceByClass(inClass: UnrealEngineClass): AnimInstance

  @JsName("GetLinkedAnimGraphInstancesByTag")
  public open fun getLinkedAnimGraphInstancesByTag(inTag: String,
      outLinkedInstances: Array<AnimInstance>): OutLinkedInstancesProvider

  @JsName("GetLinkedAnimGraphInstanceByTag")
  public open fun getLinkedAnimGraphInstanceByTag(inTag: String): AnimInstance

  @JsName("GetIntegerAttribute_Ref")
  public open fun getIntegerAttributeRef(
    boneName: String,
    attributeName: String,
    outValue: Number,
    lookupType: String,
  ): Object189

  @JsName("GetIntegerAttribute")
  public open fun getIntegerAttribute(
    boneName: String,
    attributeName: String,
    defaultValue: Number,
    outValue: Number,
    lookupType: String,
  ): Object189

  @JsName("GetFloatAttribute_Ref")
  public open fun getFloatAttributeRef(
    boneName: String,
    attributeName: String,
    outValue: Number,
    lookupType: String,
  ): Object189

  @JsName("GetFloatAttribute")
  public open fun getFloatAttribute(
    boneName: String,
    attributeName: String,
    defaultValue: Number,
    outValue: Number,
    lookupType: String,
  ): Object189

  @JsName("GetDisablePostProcessBlueprint")
  public open fun getDisablePostProcessBlueprint(): Boolean

  @JsName("GetDisableAnimCurves")
  public open fun getDisableAnimCurves(): Boolean

  @JsName("GetDefaultAnimatingRigOverride")
  public open fun getDefaultAnimatingRigOverride(): UObject

  @JsName("GetDefaultAnimatingRig")
  public open fun getDefaultAnimatingRig(): UObject

  @JsName("GetCurrentJointAngles")
  public open fun getCurrentJointAngles(
    inBoneName: String,
    swing1Angle: Number,
    twistAngle: Number,
    swing2Angle: Number,
  ): Object190

  @JsName("GetConstraintsFromBody")
  public open fun getConstraintsFromBody(
    bodyName: String,
    parentConstraints: Boolean,
    childConstraints: Boolean,
    includesTerminated: Boolean,
    outConstraints: Array<ConstraintInstanceAccessor>,
  ): OutConstraintsProvider

  @JsName("GetConstraints")
  public open fun getConstraints(includesTerminated: Boolean,
      outConstraints: Array<ConstraintInstanceAccessor>): OutConstraintsProvider

  @JsName("GetConstraintByName")
  public open fun getConstraintByName(constraintName: String, includesTerminated: Boolean):
      ConstraintInstanceAccessor

  @JsName("GetClothMaxDistanceScale")
  public open fun getClothMaxDistanceScale(): Number

  @JsName("GetClothingSimulationInteractor")
  public open fun getClothingSimulationInteractor(): ClothingSimulationInteractor

  @JsName("GetBoneMass")
  public open fun getBoneMass(boneName: String, scaleMass: Boolean): Number

  @JsName("GetBoneLinearVelocity")
  public open fun getBoneLinearVelocity(inBoneName: String): Vector

  @JsName("GetAnimInstance")
  public open fun getAnimInstance(): AnimInstance

  @JsName("GetAnimClass")
  public open fun getAnimClass(): UnrealEngineClass

  @JsName("GetAnimationMode")
  public open fun getAnimationMode(): String

  @JsName("GetAllowRigidBodyAnimNode")
  public open fun getAllowRigidBodyAnimNode(): Boolean

  @JsName("GetAllowedAnimCurveEvaluate")
  public open fun getAllowedAnimCurveEvaluate(): Boolean

  @JsName("GetAllowClothActors")
  public open fun getAllowClothActors(): Boolean

  @JsName("ForceClothNextUpdateTeleportAndReset")
  public open fun forceClothNextUpdateTeleportAndReset(): Unit

  @JsName("ForceClothNextUpdateTeleport")
  public open fun forceClothNextUpdateTeleport(): Unit

  @JsName("FindConstraintBoneName")
  public open fun findConstraintBoneName(constraintIndex: Number): String

  @JsName("ClearMorphTargets")
  public open fun clearMorphTargets(): Unit

  @JsName("BreakConstraint")
  public open fun breakConstraint(
    impulse: Vector,
    hitLocation: Vector,
    inBoneName: String,
  ): Unit

  @JsName("BindClothToMasterPoseComponent")
  public open fun bindClothToMasterPoseComponent(): Unit

  @JsName("AllowAnimCurveEvaluation")
  public open fun allowAnimCurveEvaluation(nameOfCurve: String, allow: Boolean): Unit

  @JsName("AddImpulseToAllBodiesBelow")
  public open fun addImpulseToAllBodiesBelow(
    impulse: Vector,
    boneName: String,
    velChange: Boolean,
    includeSelf: Boolean,
  ): Unit

  @JsName("AddForceToAllBodiesBelow")
  public open fun addForceToAllBodiesBelow(
    force: Vector,
    boneName: String,
    accelChange: Boolean,
    includeSelf: Boolean,
  ): Unit

  @JsName("AccumulateAllBodiesBelowPhysicsBlendWeight")
  public open fun accumulateAllBodiesBelowPhysicsBlendWeight(
    inBoneName: String,
    addPhysicsBlendWeight: Number,
    skipCustomPhysicsType: Boolean,
  ): Unit

  @JsName("GetPhysicsBodySetup")
  public open fun getPhysicsBodySetup(inName: String): BodySetup

  @JsName("K2_DirectionBetweenSockets")
  public open fun k2DirectionBetweenSockets(socketOrBoneNameFrom: String,
      socketOrBoneNameTo: String): Vector

  @JsName("K2_DistanceBetweenTwoSocketsAndMapRange")
  public open fun k2DistanceBetweenTwoSocketsAndMapRange(
    socketOrBoneNameA: String,
    socketSpaceA: String,
    socketOrBoneNameB: String,
    socketSpaceB: String,
    remapRange: Boolean,
    inRangeMin: Number,
    inRangeMax: Number,
    outRangeMin: Number,
    outRangeMax: Number,
  ): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshComponent

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshComponent

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshComponent

    @JsName("GetPhysicsBodySetup")
    public fun getPhysicsBodySetup(inSkeletalMeshComp: SkeletalMeshComponent, inName: String):
        BodySetup

    @JsName("K2_DirectionBetweenSockets")
    public fun k2DirectionBetweenSockets(
      component: SkeletalMeshComponent,
      socketOrBoneNameFrom: String,
      socketOrBoneNameTo: String,
    ): Vector

    @JsName("K2_DistanceBetweenTwoSocketsAndMapRange")
    public fun k2DistanceBetweenTwoSocketsAndMapRange(
      component: SkeletalMeshComponent,
      socketOrBoneNameA: String,
      socketSpaceA: String,
      socketOrBoneNameB: String,
      socketSpaceB: String,
      remapRange: Boolean,
      inRangeMin: Number,
      inRangeMax: Number,
      outRangeMin: Number,
      outRangeMax: Number,
    ): Number
  }
}

@JsName("EMovementMode")
public external object MovementMode {
  @JsName("MOVE_None")
  public var None: String

  @JsName("MOVE_Walking")
  public var Walking: String

  @JsName("MOVE_NavWalking")
  public var NavWalking: String

  @JsName("MOVE_Falling")
  public var Falling: String

  @JsName("MOVE_Swimming")
  public var Swimming: String

  @JsName("MOVE_Flying")
  public var Flying: String

  @JsName("MOVE_Custom")
  public var Custom: String

  @JsName("MOVE_MAX")
  public var Max: String
}

@JsName("ENetworkSmoothingMode")
public external object NetworkSmoothingMode {
  public var Disabled: String

  public var Linear: String

  public var Exponential: String

  public var Replay: String

  @JsName("ENetworkSmoothingMode_MAX")
  public var Max: String
}

public open external class FindFloorResult {
  @JsName("bBlockingHit")
  public open var blockingHit: Boolean

  @JsName("bWalkableFloor")
  public open var walkableFloor: Boolean

  @JsName("bLineTrace")
  public open var lineTrace: Boolean

  @JsName("FloorDist")
  public open var floorDist: Number

  @JsName("LineDist")
  public open var lineDist: Number

  @JsName("HitResult")
  public open var hitResult: HitResult

  public open fun clone(): FindFloorResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FindFloorResult

    @JsName("C")
    public fun copy(other: Any): FindFloorResult
  }
}

public open external class NavAvoidanceMask {
  @JsName("bGroup0")
  public open var group0: Boolean

  @JsName("bGroup1")
  public open var group1: Boolean

  @JsName("bGroup2")
  public open var group2: Boolean

  @JsName("bGroup3")
  public open var group3: Boolean

  @JsName("bGroup4")
  public open var group4: Boolean

  @JsName("bGroup5")
  public open var group5: Boolean

  @JsName("bGroup6")
  public open var group6: Boolean

  @JsName("bGroup7")
  public open var group7: Boolean

  @JsName("bGroup8")
  public open var group8: Boolean

  @JsName("bGroup9")
  public open var group9: Boolean

  @JsName("bGroup10")
  public open var group10: Boolean

  @JsName("bGroup11")
  public open var group11: Boolean

  @JsName("bGroup12")
  public open var group12: Boolean

  @JsName("bGroup13")
  public open var group13: Boolean

  @JsName("bGroup14")
  public open var group14: Boolean

  @JsName("bGroup15")
  public open var group15: Boolean

  @JsName("bGroup16")
  public open var group16: Boolean

  @JsName("bGroup17")
  public open var group17: Boolean

  @JsName("bGroup18")
  public open var group18: Boolean

  @JsName("bGroup19")
  public open var group19: Boolean

  @JsName("bGroup20")
  public open var group20: Boolean

  @JsName("bGroup21")
  public open var group21: Boolean

  @JsName("bGroup22")
  public open var group22: Boolean

  @JsName("bGroup23")
  public open var group23: Boolean

  @JsName("bGroup24")
  public open var group24: Boolean

  @JsName("bGroup25")
  public open var group25: Boolean

  @JsName("bGroup26")
  public open var group26: Boolean

  @JsName("bGroup27")
  public open var group27: Boolean

  @JsName("bGroup28")
  public open var group28: Boolean

  @JsName("bGroup29")
  public open var group29: Boolean

  @JsName("bGroup30")
  public open var group30: Boolean

  @JsName("bGroup31")
  public open var group31: Boolean

  public open fun clone(): NavAvoidanceMask

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavAvoidanceMask

    @JsName("C")
    public fun copy(other: Any): NavAvoidanceMask
  }
}

public open external class CharacterMovementComponentPostPhysicsTickFunction : TickFunction {
  public override fun clone(): CharacterMovementComponentPostPhysicsTickFunction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CharacterMovementComponentPostPhysicsTickFunction

    @JsName("C")
    public fun copy(other: Any): CharacterMovementComponentPostPhysicsTickFunction
  }
}

public open external class RootMotionSourceSettings {
  @JsName("Flags")
  public open var flags: Number

  public open fun clone(): RootMotionSourceSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RootMotionSourceSettings

    @JsName("C")
    public fun copy(other: Any): RootMotionSourceSettings
  }
}

@JsName("Vector_NetQuantize10")
public open external class VectorNetQuantize10 : Vector {
  public override fun clone(): VectorNetQuantize10

  @JsName("BreakVector_NetQuantize10")
  public open fun breakVectorNetQuantize10(
    x: Any,
    y: Any,
    z: Any,
  ): Object50

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorNetQuantize10

    @JsName("C")
    public fun copy(other: Any): VectorNetQuantize10

    @JsName("BreakVector_NetQuantize10")
    public fun breakVectorNetQuantize10(
      inVec: VectorNetQuantize10,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("MakeVector_NetQuantize10")
    public fun makeVectorNetQuantize10(
      x: Any,
      y: Any,
      z: Any,
    ): VectorNetQuantize10
  }
}

public open external class RootMotionSourceGroup {
  @JsName("bHasAdditiveSources")
  public open var hasAdditiveSources: Boolean

  @JsName("bHasOverrideSources")
  public open var hasOverrideSources: Boolean

  @JsName("bHasOverrideSourcesWithIgnoreZAccumulate")
  public open var hasOverrideSourcesWithIgnoreZAccumulate: Boolean

  @JsName("bIsAdditiveVelocityApplied")
  public open var isAdditiveVelocityApplied: Boolean

  @JsName("LastAccumulatedSettings")
  public open var lastAccumulatedSettings: RootMotionSourceSettings

  @JsName("LastPreAdditiveVelocity")
  public open var lastPreAdditiveVelocity: VectorNetQuantize10

  public open fun clone(): RootMotionSourceGroup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RootMotionSourceGroup

    @JsName("C")
    public fun copy(other: Any): RootMotionSourceGroup
  }
}

public open external class RootMotionMovementParams {
  @JsName("bHasRootMotion")
  public open var hasRootMotion: Boolean

  @JsName("BlendWeight")
  public open var blendWeight: Number

  @JsName("RootMotionTransform")
  public open var rootMotionTransform: Transform

  public open fun clone(): RootMotionMovementParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RootMotionMovementParams

    @JsName("C")
    public fun copy(other: Any): RootMotionMovementParams
  }
}

@JsName("T$193")
public external interface FloorResultProvider {
  @JsName("FloorResult")
  public var floorResult: FindFloorResult
}

public open external class CharacterMovementComponent(
  outer: UObject,
) : PawnMovementComponent {
  @JsName("CharacterOwner")
  public open var characterOwner: Character

  @JsName("GravityScale")
  public open var gravityScale: Number

  @JsName("MaxStepHeight")
  public open var maxStepHeight: Number

  @JsName("JumpZVelocity")
  public open var jumpZVelocity: Number

  @JsName("JumpOffJumpZFactor")
  public open var jumpOffJumpZFactor: Number

  @JsName("WalkableFloorAngle")
  public open var walkableFloorAngle: Number

  @JsName("WalkableFloorZ")
  public open var walkableFloorZ: Number

  @JsName("MovementMode")
  public open var movementMode: String

  @JsName("CustomMovementMode")
  public open var customMovementMode: Number

  @JsName("NetworkSmoothingMode")
  public open var networkSmoothingMode: String

  @JsName("GroundFriction")
  public open var groundFriction: Number

  @JsName("MaxWalkSpeed")
  public open var maxWalkSpeed: Number

  @JsName("MaxWalkSpeedCrouched")
  public open var maxWalkSpeedCrouched: Number

  @JsName("MaxSwimSpeed")
  public open var maxSwimSpeed: Number

  @JsName("MaxFlySpeed")
  public open var maxFlySpeed: Number

  @JsName("MaxCustomMovementSpeed")
  public open var maxCustomMovementSpeed: Number

  @JsName("MaxAcceleration")
  public open var maxAcceleration: Number

  @JsName("MinAnalogWalkSpeed")
  public open var minAnalogWalkSpeed: Number

  @JsName("BrakingFrictionFactor")
  public open var brakingFrictionFactor: Number

  @JsName("BrakingFriction")
  public open var brakingFriction: Number

  @JsName("BrakingSubStepTime")
  public open var brakingSubStepTime: Number

  @JsName("BrakingDecelerationWalking")
  public open var brakingDecelerationWalking: Number

  @JsName("BrakingDecelerationFalling")
  public open var brakingDecelerationFalling: Number

  @JsName("BrakingDecelerationSwimming")
  public open var brakingDecelerationSwimming: Number

  @JsName("BrakingDecelerationFlying")
  public open var brakingDecelerationFlying: Number

  @JsName("AirControl")
  public open var airControl: Number

  @JsName("AirControlBoostMultiplier")
  public open var airControlBoostMultiplier: Number

  @JsName("AirControlBoostVelocityThreshold")
  public open var airControlBoostVelocityThreshold: Number

  @JsName("FallingLateralFriction")
  public open var fallingLateralFriction: Number

  @JsName("CrouchedHalfHeight")
  public open var crouchedHalfHeight: Number

  @JsName("Buoyancy")
  public open var buoyancy: Number

  @JsName("PerchRadiusThreshold")
  public open var perchRadiusThreshold: Number

  @JsName("PerchAdditionalHeight")
  public open var perchAdditionalHeight: Number

  @JsName("RotationRate")
  public open var rotationRate: Rotator

  @JsName("bUseSeparateBrakingFriction")
  public open var useSeparateBrakingFriction: Boolean

  @JsName("bApplyGravityWhileJumping")
  public open var applyGravityWhileJumping: Boolean

  @JsName("bUseControllerDesiredRotation")
  public open var useControllerDesiredRotation: Boolean

  @JsName("bOrientRotationToMovement")
  public open var orientRotationToMovement: Boolean

  @JsName("bSweepWhileNavWalking")
  public open var sweepWhileNavWalking: Boolean

  @JsName("bMovementInProgress")
  public open var movementInProgress: Boolean

  @JsName("bEnableScopedMovementUpdates")
  public open var enableScopedMovementUpdates: Boolean

  @JsName("bEnableServerDualMoveScopedMovementUpdates")
  public open var enableServerDualMoveScopedMovementUpdates: Boolean

  @JsName("bForceMaxAccel")
  public open var forceMaxAccel: Boolean

  @JsName("bRunPhysicsWithNoController")
  public open var runPhysicsWithNoController: Boolean

  @JsName("bForceNextFloorCheck")
  public open var forceNextFloorCheck: Boolean

  @JsName("bShrinkProxyCapsule")
  public open var shrinkProxyCapsule: Boolean

  @JsName("bCanWalkOffLedges")
  public open var canWalkOffLedges: Boolean

  @JsName("bCanWalkOffLedgesWhenCrouching")
  public open var canWalkOffLedgesWhenCrouching: Boolean

  @JsName("bNetworkSkipProxyPredictionOnNetUpdate")
  public open var networkSkipProxyPredictionOnNetUpdate: Boolean

  @JsName("bNetworkAlwaysReplicateTransformUpdateTimestamp")
  public open var networkAlwaysReplicateTransformUpdateTimestamp: Boolean

  @JsName("bDeferUpdateMoveComponent")
  public open var deferUpdateMoveComponent: Boolean

  @JsName("bEnablePhysicsInteraction")
  public open var enablePhysicsInteraction: Boolean

  @JsName("bTouchForceScaledToMass")
  public open var touchForceScaledToMass: Boolean

  @JsName("bPushForceScaledToMass")
  public open var pushForceScaledToMass: Boolean

  @JsName("bPushForceUsingZOffset")
  public open var pushForceUsingZOffset: Boolean

  @JsName("bScalePushForceToVelocity")
  public open var scalePushForceToVelocity: Boolean

  @JsName("DeferredUpdatedMoveComponent")
  public open var deferredUpdatedMoveComponent: SceneComponent

  @JsName("MaxOutOfWaterStepHeight")
  public open var maxOutOfWaterStepHeight: Number

  @JsName("OutofWaterZ")
  public open var outofWaterZ: Number

  @JsName("Mass")
  public open var mass: Number

  @JsName("StandingDownwardForceScale")
  public open var standingDownwardForceScale: Number

  @JsName("InitialPushForceFactor")
  public open var initialPushForceFactor: Number

  @JsName("PushForceFactor")
  public open var pushForceFactor: Number

  @JsName("PushForcePointZOffsetFactor")
  public open var pushForcePointZOffsetFactor: Number

  @JsName("TouchForceFactor")
  public open var touchForceFactor: Number

  @JsName("MinTouchForce")
  public open var minTouchForce: Number

  @JsName("MaxTouchForce")
  public open var maxTouchForce: Number

  @JsName("RepulsionForce")
  public open var repulsionForce: Number

  @JsName("bForceBraking")
  public open var forceBraking: Boolean

  @JsName("CrouchedSpeedMultiplier")
  public open var crouchedSpeedMultiplier: Number

  @JsName("UpperImpactNormalScale")
  public open var upperImpactNormalScale: Number

  @JsName("Acceleration")
  public open var acceleration: Vector

  @JsName("LastUpdateRotation")
  public open var lastUpdateRotation: Quat

  @JsName("LastUpdateLocation")
  public open var lastUpdateLocation: Vector

  @JsName("LastUpdateVelocity")
  public open var lastUpdateVelocity: Vector

  @JsName("ServerLastTransformUpdateTimeStamp")
  public open var serverLastTransformUpdateTimeStamp: Number

  @JsName("ServerLastClientGoodMoveAckTime")
  public open var serverLastClientGoodMoveAckTime: Number

  @JsName("ServerLastClientAdjustmentTime")
  public open var serverLastClientAdjustmentTime: Number

  @JsName("PendingImpulseToApply")
  public open var pendingImpulseToApply: Vector

  @JsName("PendingForceToApply")
  public open var pendingForceToApply: Vector

  @JsName("AnalogInputModifier")
  public open var analogInputModifier: Number

  @JsName("MaxSimulationTimeStep")
  public open var maxSimulationTimeStep: Number

  @JsName("MaxSimulationIterations")
  public open var maxSimulationIterations: Number

  @JsName("MaxJumpApexAttemptsPerSimulation")
  public open var maxJumpApexAttemptsPerSimulation: Number

  @JsName("MaxDepenetrationWithGeometry")
  public open var maxDepenetrationWithGeometry: Number

  @JsName("MaxDepenetrationWithGeometryAsProxy")
  public open var maxDepenetrationWithGeometryAsProxy: Number

  @JsName("MaxDepenetrationWithPawn")
  public open var maxDepenetrationWithPawn: Number

  @JsName("MaxDepenetrationWithPawnAsProxy")
  public open var maxDepenetrationWithPawnAsProxy: Number

  @JsName("NetworkSimulatedSmoothLocationTime")
  public open var networkSimulatedSmoothLocationTime: Number

  @JsName("NetworkSimulatedSmoothRotationTime")
  public open var networkSimulatedSmoothRotationTime: Number

  @JsName("ListenServerNetworkSimulatedSmoothLocationTime")
  public open var listenServerNetworkSimulatedSmoothLocationTime: Number

  @JsName("ListenServerNetworkSimulatedSmoothRotationTime")
  public open var listenServerNetworkSimulatedSmoothRotationTime: Number

  @JsName("NetProxyShrinkRadius")
  public open var netProxyShrinkRadius: Number

  @JsName("NetProxyShrinkHalfHeight")
  public open var netProxyShrinkHalfHeight: Number

  @JsName("NetworkMaxSmoothUpdateDistance")
  public open var networkMaxSmoothUpdateDistance: Number

  @JsName("NetworkNoSmoothUpdateDistance")
  public open var networkNoSmoothUpdateDistance: Number

  @JsName("NetworkMinTimeBetweenClientAckGoodMoves")
  public open var networkMinTimeBetweenClientAckGoodMoves: Number

  @JsName("NetworkMinTimeBetweenClientAdjustments")
  public open var networkMinTimeBetweenClientAdjustments: Number

  @JsName("NetworkMinTimeBetweenClientAdjustmentsLargeCorrection")
  public open var networkMinTimeBetweenClientAdjustmentsLargeCorrection: Number

  @JsName("NetworkLargeClientCorrectionDistance")
  public open var networkLargeClientCorrectionDistance: Number

  @JsName("LedgeCheckThreshold")
  public open var ledgeCheckThreshold: Number

  @JsName("JumpOutOfWaterPitch")
  public open var jumpOutOfWaterPitch: Number

  @JsName("CurrentFloor")
  public open var currentFloor: FindFloorResult

  @JsName("DefaultLandMovementMode")
  public open var defaultLandMovementMode: String

  @JsName("DefaultWaterMovementMode")
  public open var defaultWaterMovementMode: String

  @JsName("GroundMovementMode")
  public open var groundMovementMode: String

  @JsName("bMaintainHorizontalGroundVelocity")
  public open var maintainHorizontalGroundVelocity: Boolean

  @JsName("bImpartBaseVelocityX")
  public open var impartBaseVelocityX: Boolean

  @JsName("bImpartBaseVelocityY")
  public open var impartBaseVelocityY: Boolean

  @JsName("bImpartBaseVelocityZ")
  public open var impartBaseVelocityZ: Boolean

  @JsName("bImpartBaseAngularVelocity")
  public open var impartBaseAngularVelocity: Boolean

  @JsName("bJustTeleported")
  public open var justTeleported: Boolean

  @JsName("bNetworkUpdateReceived")
  public open var networkUpdateReceived: Boolean

  @JsName("bNetworkMovementModeChanged")
  public open var networkMovementModeChanged: Boolean

  @JsName("bIgnoreClientMovementErrorChecksAndCorrection")
  public open var ignoreClientMovementErrorChecksAndCorrection: Boolean

  @JsName("bServerAcceptClientAuthoritativePosition")
  public open var serverAcceptClientAuthoritativePosition: Boolean

  @JsName("bNotifyApex")
  public open var notifyApex: Boolean

  @JsName("bCheatFlying")
  public open var cheatFlying: Boolean

  @JsName("bWantsToCrouch")
  public open var wantsToCrouch: Boolean

  @JsName("bCrouchMaintainsBaseLocation")
  public open var crouchMaintainsBaseLocation: Boolean

  @JsName("bIgnoreBaseRotation")
  public open var ignoreBaseRotation: Boolean

  @JsName("bFastAttachedMove")
  public open var fastAttachedMove: Boolean

  @JsName("bAlwaysCheckFloor")
  public open var alwaysCheckFloor: Boolean

  @JsName("bUseFlatBaseForFloorChecks")
  public open var useFlatBaseForFloorChecks: Boolean

  @JsName("bPerformingJumpOff")
  public open var performingJumpOff: Boolean

  @JsName("bWantsToLeaveNavWalking")
  public open var wantsToLeaveNavWalking: Boolean

  @JsName("bUseRVOAvoidance")
  public open var useRvoAvoidance: Boolean

  @JsName("bRequestedMoveUseAcceleration")
  public open var requestedMoveUseAcceleration: Boolean

  @JsName("bWasSimulatingRootMotion")
  public open var wasSimulatingRootMotion: Boolean

  @JsName("bAllowPhysicsRotationDuringAnimRootMotion")
  public open var allowPhysicsRotationDuringAnimRootMotion: Boolean

  @JsName("FormerBaseVelocityDecayHalfLife")
  public open var formerBaseVelocityDecayHalfLife: Number

  @JsName("bHasRequestedVelocity")
  public open var hasRequestedVelocity: Boolean

  @JsName("bRequestedMoveWithMaxSpeed")
  public open var requestedMoveWithMaxSpeed: Boolean

  @JsName("bWasAvoidanceUpdated")
  public open var wasAvoidanceUpdated: Boolean

  @JsName("bProjectNavMeshWalking")
  public open var projectNavMeshWalking: Boolean

  @JsName("bProjectNavMeshOnBothWorldChannels")
  public open var projectNavMeshOnBothWorldChannels: Boolean

  @JsName("AvoidanceConsiderationRadius")
  public open var avoidanceConsiderationRadius: Number

  @JsName("RequestedVelocity")
  public open var requestedVelocity: Vector

  @JsName("AvoidanceUID")
  public open var avoidanceUid: Number

  @JsName("AvoidanceGroup")
  public open var avoidanceGroup: NavAvoidanceMask

  @JsName("GroupsToAvoid")
  public open var groupsToAvoid: NavAvoidanceMask

  @JsName("GroupsToIgnore")
  public open var groupsToIgnore: NavAvoidanceMask

  @JsName("AvoidanceWeight")
  public open var avoidanceWeight: Number

  @JsName("PendingLaunchVelocity")
  public open var pendingLaunchVelocity: Vector

  @JsName("NavMeshProjectionInterval")
  public open var navMeshProjectionInterval: Number

  @JsName("NavMeshProjectionTimer")
  public open var navMeshProjectionTimer: Number

  @JsName("NavMeshProjectionInterpSpeed")
  public open var navMeshProjectionInterpSpeed: Number

  @JsName("NavMeshProjectionHeightScaleUp")
  public open var navMeshProjectionHeightScaleUp: Number

  @JsName("NavMeshProjectionHeightScaleDown")
  public open var navMeshProjectionHeightScaleDown: Number

  @JsName("NavWalkingFloorDistTolerance")
  public open var navWalkingFloorDistTolerance: Number

  @JsName("PostPhysicsTickFunction")
  public open var postPhysicsTickFunction: CharacterMovementComponentPostPhysicsTickFunction

  @JsName("MinTimeBetweenTimeStampResets")
  public open var minTimeBetweenTimeStampResets: Number

  @JsName("CurrentRootMotion")
  public open var currentRootMotion: RootMotionSourceGroup

  @JsName("ServerCorrectionRootMotion")
  public open var serverCorrectionRootMotion: RootMotionSourceGroup

  @JsName("RootMotionParams")
  public open var rootMotionParams: RootMotionMovementParams

  @JsName("AnimRootMotionVelocity")
  public open var animRootMotionVelocity: Vector

  @JsName("SetWalkableFloorZ")
  public open fun setWalkableFloorZ(inWalkableFloorZ: Number): Unit

  @JsName("SetWalkableFloorAngle")
  public open fun setWalkableFloorAngle(inWalkableFloorAngle: Number): Unit

  @JsName("SetMovementMode")
  public open fun setMovementMode(newMovementMode: String, newCustomMode: Number): Unit

  @JsName("SetGroupsToIgnoreMask")
  public open fun setGroupsToIgnoreMask(groupMask: NavAvoidanceMask): Unit

  @JsName("SetGroupsToIgnore")
  public open fun setGroupsToIgnore(groupFlags: Number): Unit

  @JsName("SetGroupsToAvoidMask")
  public open fun setGroupsToAvoidMask(groupMask: NavAvoidanceMask): Unit

  @JsName("SetGroupsToAvoid")
  public open fun setGroupsToAvoid(groupFlags: Number): Unit

  @JsName("SetCrouchedHalfHeight")
  public open fun setCrouchedHalfHeight(newValue: Number): Unit

  @JsName("SetAvoidanceGroupMask")
  public open fun setAvoidanceGroupMask(groupMask: NavAvoidanceMask): Unit

  @JsName("SetAvoidanceGroup")
  public open fun setAvoidanceGroup(groupFlags: Number): Unit

  @JsName("SetAvoidanceEnabled")
  public open fun setAvoidanceEnabled(enable: Boolean): Unit

  @JsName("K2_GetWalkableFloorZ")
  public open fun k2GetWalkableFloorZ(): Number

  @JsName("K2_GetWalkableFloorAngle")
  public open fun k2GetWalkableFloorAngle(): Number

  @JsName("K2_FindFloor")
  public open fun k2FindFloor(capsuleLocation: Vector, floorResult: FindFloorResult):
      FloorResultProvider

  @JsName("K2_ComputeFloorDist")
  public open fun k2ComputeFloorDist(
    capsuleLocation: Vector,
    lineDistance: Number,
    sweepDistance: Number,
    sweepRadius: Number,
    floorResult: FindFloorResult,
  ): FloorResultProvider

  @JsName("IsWalking")
  public open fun isWalking(): Boolean

  @JsName("IsWalkable")
  public open fun isWalkable(hit: HitResult): Boolean

  @JsName("GetValidPerchRadius")
  public open fun getValidPerchRadius(): Number

  @JsName("GetPerchRadiusThreshold")
  public open fun getPerchRadiusThreshold(): Number

  @JsName("GetMovementBase")
  public open fun getMovementBase(): PrimitiveComponent

  @JsName("GetMinAnalogSpeed")
  public open fun getMinAnalogSpeed(): Number

  @JsName("GetMaxJumpHeightWithJumpTime")
  public open fun getMaxJumpHeightWithJumpTime(): Number

  @JsName("GetMaxJumpHeight")
  public open fun getMaxJumpHeight(): Number

  @JsName("GetMaxBrakingDeceleration")
  public open fun getMaxBrakingDeceleration(): Number

  @JsName("GetMaxAcceleration")
  public open fun getMaxAcceleration(): Number

  @JsName("GetLastUpdateVelocity")
  public open fun getLastUpdateVelocity(): Vector

  @JsName("GetLastUpdateRotation")
  public open fun getLastUpdateRotation(): Rotator

  @JsName("GetLastUpdateLocation")
  public open fun getLastUpdateLocation(): Vector

  @JsName("GetImpartedMovementBaseVelocity")
  public open fun getImpartedMovementBaseVelocity(): Vector

  @JsName("GetCurrentAcceleration")
  public open fun getCurrentAcceleration(): Vector

  @JsName("GetCrouchedHalfHeight")
  public open fun getCrouchedHalfHeight(): Number

  @JsName("GetCharacterOwner")
  public open fun getCharacterOwner(): Character

  @JsName("GetAnalogInputModifier")
  public open fun getAnalogInputModifier(): Number

  @JsName("DisableMovement")
  public open fun disableMovement(): Unit

  @JsName("ClearAccumulatedForces")
  public open fun clearAccumulatedForces(): Unit

  @JsName("CapsuleTouched")
  public open fun capsuleTouched(
    overlappedComp: PrimitiveComponent,
    other: Actor,
    otherComp: PrimitiveComponent,
    otherBodyIndex: Number,
    fromSweep: Boolean,
    sweepResult: HitResult,
  ): Unit

  @JsName("CalcVelocity")
  public open fun calcVelocity(
    deltaTime: Number,
    friction: Number,
    fluid: Boolean,
    brakingDeceleration: Number,
  ): Unit

  @JsName("AddImpulse")
  public open fun addImpulse(impulse: Vector, velocityChange: Boolean): Unit

  @JsName("AddForce")
  public open fun addForce(force: Vector): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CharacterMovementComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CharacterMovementComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CharacterMovementComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CharacterMovementComponent

    @JsName("C")
    public fun copy(other: UObject): CharacterMovementComponent

    @JsName("C")
    public fun copy(other: Any): CharacterMovementComponent
  }
}

public open external class ArrowComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("ArrowColor")
  public open var arrowColor: Color

  @JsName("ArrowSize")
  public open var arrowSize: Number

  @JsName("ArrowLength")
  public open var arrowLength: Number

  @JsName("ScreenSize")
  public open var screenSize: Number

  @JsName("bIsScreenSizeScaled")
  public open var isScreenSizeScaled: Boolean

  @JsName("bTreatAsASprite")
  public open var treatAsASprite: Boolean

  @JsName("SpriteCategoryName")
  public open var spriteCategoryName: String

  @JsName("SpriteInfo")
  public open var spriteInfo: SpriteCategoryInfo

  @JsName("bLightAttachment")
  public open var lightAttachment: Boolean

  @JsName("bUseInEditorScaling")
  public open var useInEditorScaling: Boolean

  @JsName("SetArrowColor")
  public open fun setArrowColor(newColor: LinearColor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArrowComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArrowComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArrowComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArrowComponent

    @JsName("C")
    public fun copy(other: UObject): ArrowComponent

    @JsName("C")
    public fun copy(other: Any): ArrowComponent
  }
}

@JsName("Vector_NetQuantize100")
public open external class VectorNetQuantize100 : Vector {
  public override fun clone(): VectorNetQuantize100

  @JsName("BreakVector_NetQuantize100")
  public open fun breakVectorNetQuantize100(
    x: Any,
    y: Any,
    z: Any,
  ): Object50

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorNetQuantize100

    @JsName("C")
    public fun copy(other: Any): VectorNetQuantize100

    @JsName("BreakVector_NetQuantize100")
    public fun breakVectorNetQuantize100(
      inVec: VectorNetQuantize100,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("MakeVector_NetQuantize100")
    public fun makeVectorNetQuantize100(
      x: Any,
      y: Any,
      z: Any,
    ): VectorNetQuantize100
  }
}

public open external class BasedMovementInfo {
  @JsName("MovementBase")
  public open var movementBase: PrimitiveComponent

  @JsName("BoneName")
  public open var boneName: String

  @JsName("Location")
  public open var location: VectorNetQuantize100

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("bServerHasBaseComponent")
  public open var serverHasBaseComponent: Boolean

  @JsName("bRelativeRotation")
  public open var relativeRotation: Boolean

  @JsName("bServerHasVelocity")
  public open var serverHasVelocity: Boolean

  public open fun clone(): BasedMovementInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BasedMovementInfo

    @JsName("C")
    public fun copy(other: Any): BasedMovementInfo
  }
}

public open external class RepRootMotionMontage {
  @JsName("bIsActive")
  public open var isActive: Boolean

  @JsName("AnimMontage")
  public open var animMontage: AnimMontage

  public open var position: Number

  @JsName("Location")
  public open var location: VectorNetQuantize100

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("MovementBase")
  public open var movementBase: PrimitiveComponent

  @JsName("MovementBaseBoneName")
  public open var movementBaseBoneName: String

  @JsName("bRelativePosition")
  public open var relativePosition: Boolean

  @JsName("bRelativeRotation")
  public open var relativeRotation: Boolean

  @JsName("AuthoritativeRootMotion")
  public open var authoritativeRootMotion: RootMotionSourceGroup

  @JsName("Acceleration")
  public open var acceleration: VectorNetQuantize10

  @JsName("LinearVelocity")
  public open var linearVelocity: VectorNetQuantize10

  public open fun clone(): RepRootMotionMontage

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RepRootMotionMontage

    @JsName("C")
    public fun copy(other: Any): RepRootMotionMontage
  }
}

public open external class SimulatedRootMotionReplicatedMove {
  @JsName("Time")
  public open var time: Number

  @JsName("RootMotion")
  public open var rootMotion: RepRootMotionMontage

  public open fun clone(): SimulatedRootMotionReplicatedMove

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SimulatedRootMotionReplicatedMove

    @JsName("C")
    public fun copy(other: Any): SimulatedRootMotionReplicatedMove
  }
}

public open external class CharacterNetworkSerializationPackedBits {
  public open fun clone(): CharacterNetworkSerializationPackedBits

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CharacterNetworkSerializationPackedBits

    @JsName("C")
    public fun copy(other: Any): CharacterNetworkSerializationPackedBits
  }
}

public open external class CharacterServerMovePackedBits : CharacterNetworkSerializationPackedBits {
  public override fun clone(): CharacterServerMovePackedBits

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CharacterServerMovePackedBits

    @JsName("C")
    public fun copy(other: Any): CharacterServerMovePackedBits
  }
}

public open external class CharacterMoveResponsePackedBits : CharacterNetworkSerializationPackedBits
    {
  public override fun clone(): CharacterMoveResponsePackedBits

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CharacterMoveResponsePackedBits

    @JsName("C")
    public fun copy(other: Any): CharacterMoveResponsePackedBits
  }
}

public open external class Character(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Pawn {
  @JsName("Mesh")
  public open var mesh: SkeletalMeshComponent

  @JsName("CharacterMovement")
  public open var characterMovement: CharacterMovementComponent

  @JsName("CapsuleComponent")
  public open var capsuleComponent: CapsuleComponent

  @JsName("ArrowComponent")
  public open var arrowComponent: ArrowComponent

  @JsName("BasedMovement")
  public open var basedMovement: BasedMovementInfo

  @JsName("ReplicatedBasedMovement")
  public open var replicatedBasedMovement: BasedMovementInfo

  @JsName("AnimRootMotionTranslationScale")
  public open var animRootMotionTranslationScale: Number

  @JsName("BaseTranslationOffset")
  public open var baseTranslationOffset: Vector

  @JsName("BaseRotationOffset")
  public open var baseRotationOffset: Quat

  @JsName("ReplicatedServerLastTransformUpdateTimeStamp")
  public open var replicatedServerLastTransformUpdateTimeStamp: Number

  @JsName("ReplayLastTransformUpdateTimeStamp")
  public open var replayLastTransformUpdateTimeStamp: Number

  @JsName("ReplicatedMovementMode")
  public open var replicatedMovementMode: Number

  @JsName("bInBaseReplication")
  public open var inBaseReplication: Boolean

  @JsName("CrouchedEyeHeight")
  public open var crouchedEyeHeight: Number

  @JsName("bIsCrouched")
  public open var isCrouched: Boolean

  @JsName("bProxyIsJumpForceApplied")
  public open var proxyIsJumpForceApplied: Boolean

  @JsName("bPressedJump")
  public open var pressedJump: Boolean

  @JsName("bClientUpdating")
  public open var clientUpdating: Boolean

  @JsName("bClientWasFalling")
  public open var clientWasFalling: Boolean

  @JsName("bClientResimulateRootMotion")
  public open var clientResimulateRootMotion: Boolean

  @JsName("bClientResimulateRootMotionSources")
  public open var clientResimulateRootMotionSources: Boolean

  @JsName("bSimGravityDisabled")
  public open var simGravityDisabled: Boolean

  @JsName("bClientCheckEncroachmentOnNetUpdate")
  public open var clientCheckEncroachmentOnNetUpdate: Boolean

  @JsName("bServerMoveIgnoreRootMotion")
  public open var serverMoveIgnoreRootMotion: Boolean

  @JsName("bWasJumping")
  public open var wasJumping: Boolean

  @JsName("JumpKeyHoldTime")
  public open var jumpKeyHoldTime: Number

  @JsName("JumpForceTimeRemaining")
  public open var jumpForceTimeRemaining: Number

  @JsName("ProxyJumpForceStartedTime")
  public open var proxyJumpForceStartedTime: Number

  @JsName("JumpMaxHoldTime")
  public open var jumpMaxHoldTime: Number

  @JsName("JumpMaxCount")
  public open var jumpMaxCount: Number

  @JsName("JumpCurrentCount")
  public open var jumpCurrentCount: Number

  @JsName("JumpCurrentCountPreJump")
  public open var jumpCurrentCountPreJump: Number

  @JsName("OnReachedJumpApex")
  public open var onReachedJumpApex: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("MovementModeChangedDelegate")
  public open var movementModeChangedDelegate: UnrealEngineMulticastDelegate<(
    Character: Character,
    PrevMovementMode: String,
    PreviousCustomMode: Number,
  ) -> Unit>

  @JsName("OnCharacterMovementUpdated")
  public open var onCharacterMovementUpdated: UnrealEngineMulticastDelegate<(
    DeltaSeconds: Number,
    OldLocation: Vector,
    OldVelocity: Vector,
  ) -> Unit>

  @JsName("SavedRootMotion")
  public open var savedRootMotion: RootMotionSourceGroup

  @JsName("ClientRootMotionParams")
  public open var clientRootMotionParams: RootMotionMovementParams

  @JsName("RootMotionRepMoves")
  public open var rootMotionRepMoves: Array<SimulatedRootMotionReplicatedMove>

  @JsName("RepRootMotion")
  public open var repRootMotion: RepRootMotionMontage

  @JsName("UnCrouch")
  public open fun unCrouch(clientSimulation: Boolean): Unit

  @JsName("StopJumping")
  public open fun stopJumping(): Unit

  @JsName("StopAnimMontage")
  public open fun stopAnimMontage(animMontage: AnimMontage): Unit

  @JsName("ServerMovePacked")
  public open fun serverMovePacked(packedBits: CharacterServerMovePackedBits): Unit

  @JsName("ServerMoveOld")
  public open fun serverMoveOld(
    oldTimeStamp: Number,
    oldAccel: VectorNetQuantize10,
    oldMoveFlags: Number,
  ): Unit

  @JsName("ServerMoveNoBase")
  public open fun serverMoveNoBase(
    timestamp: Number,
    inAccel: VectorNetQuantize10,
    clientLoc: VectorNetQuantize100,
    compressedMoveFlags: Number,
    clientRoll: Number,
    view: Any,
    clientMovementMode: Number,
  ): Unit

  @JsName("ServerMoveDualNoBase")
  public open fun serverMoveDualNoBase(
    timeStamp0: Number,
    inAccel0: VectorNetQuantize10,
    pendingFlags: Number,
    view0: Any,
    timestamp: Number,
    inAccel: VectorNetQuantize10,
    clientLoc: VectorNetQuantize100,
    newFlags: Number,
    clientRoll: Number,
    view: Any,
    clientMovementMode: Number,
  ): Unit

  @JsName("ServerMoveDualHybridRootMotion")
  public open fun serverMoveDualHybridRootMotion(
    timeStamp0: Number,
    inAccel0: VectorNetQuantize10,
    pendingFlags: Number,
    view0: Any,
    timestamp: Number,
    inAccel: VectorNetQuantize10,
    clientLoc: VectorNetQuantize100,
    newFlags: Number,
    clientRoll: Number,
    view: Any,
    clientMovementBase: PrimitiveComponent,
    clientBaseBoneName: String,
    clientMovementMode: Number,
  ): Unit

  @JsName("ServerMoveDual")
  public open fun serverMoveDual(
    timeStamp0: Number,
    inAccel0: VectorNetQuantize10,
    pendingFlags: Number,
    view0: Any,
    timestamp: Number,
    inAccel: VectorNetQuantize10,
    clientLoc: VectorNetQuantize100,
    newFlags: Number,
    clientRoll: Number,
    view: Any,
    clientMovementBase: PrimitiveComponent,
    clientBaseBoneName: String,
    clientMovementMode: Number,
  ): Unit

  @JsName("ServerMove")
  public open fun serverMove(
    timestamp: Number,
    inAccel: VectorNetQuantize10,
    clientLoc: VectorNetQuantize100,
    compressedMoveFlags: Number,
    clientRoll: Number,
    view: Any,
    clientMovementBase: PrimitiveComponent,
    clientBaseBoneName: String,
    clientMovementMode: Number,
  ): Unit

  @JsName("RootMotionDebugClientPrintOnScreen")
  public open fun rootMotionDebugClientPrintOnScreen(inString: String): Unit

  @JsName("PlayAnimMontage")
  public open fun playAnimMontage(
    animMontage: AnimMontage,
    inPlayRate: Number,
    startSectionName: String,
  ): Number

  @JsName("OnWalkingOffLedge")
  public open fun onWalkingOffLedge(
    previousFloorImpactNormal: Vector,
    previousFloorContactNormal: Vector,
    previousLocation: Vector,
    timeDelta: Number,
  ): Unit

  @JsName("OnRep_RootMotion")
  public open fun onRepRootMotion(): Unit

  @JsName("OnRep_ReplicatedBasedMovement")
  public open fun onRepReplicatedBasedMovement(): Unit

  @JsName("OnRep_ReplayLastTransformUpdateTimeStamp")
  public open fun onRepReplayLastTransformUpdateTimeStamp(): Unit

  @JsName("OnRep_IsCrouched")
  public open fun onRepIsCrouched(): Unit

  @JsName("OnLaunched")
  public open fun onLaunched(
    launchVelocity: Vector,
    xyOverride: Boolean,
    zOverride: Boolean,
  ): Unit

  @JsName("OnLanded")
  public open fun onLanded(hit: HitResult): Unit

  @JsName("OnJumped")
  public open fun onJumped(): Unit

  @JsName("LaunchCharacter")
  public open fun launchCharacter(
    launchVelocity: Vector,
    xyOverride: Boolean,
    zOverride: Boolean,
  ): Unit

  @JsName("K2_UpdateCustomMovement")
  public open fun k2UpdateCustomMovement(deltaTime: Number): Unit

  @JsName("K2_OnStartCrouch")
  public open fun k2OnStartCrouch(halfHeightAdjust: Number, scaledHalfHeightAdjust: Number): Unit

  @JsName("K2_OnMovementModeChanged")
  public open fun k2OnMovementModeChanged(
    prevMovementMode: String,
    newMovementMode: String,
    prevCustomMode: Number,
    newCustomMode: Number,
  ): Unit

  @JsName("K2_OnEndCrouch")
  public open fun k2OnEndCrouch(halfHeightAdjust: Number, scaledHalfHeightAdjust: Number): Unit

  @JsName("Jump")
  public open fun jump(): Unit

  @JsName("IsPlayingRootMotion")
  public open fun isPlayingRootMotion(): Boolean

  @JsName("IsPlayingNetworkedRootMotionMontage")
  public open fun isPlayingNetworkedRootMotionMontage(): Boolean

  @JsName("IsJumpProvidingForce")
  public open fun isJumpProvidingForce(): Boolean

  @JsName("HasAnyRootMotion")
  public open fun hasAnyRootMotion(): Boolean

  @JsName("GetCurrentMontage")
  public open fun getCurrentMontage(): AnimMontage

  @JsName("GetBaseTranslationOffset")
  public open fun getBaseTranslationOffset(): Vector

  @JsName("GetBaseRotationOffsetRotator")
  public open fun getBaseRotationOffsetRotator(): Rotator

  @JsName("GetAnimRootMotionTranslationScale")
  public open fun getAnimRootMotionTranslationScale(): Number

  @JsName("Crouch")
  public open fun crouch(clientSimulation: Boolean): Unit

  @JsName("ClientVeryShortAdjustPosition")
  public open fun clientVeryShortAdjustPosition(
    timestamp: Number,
    newLoc: Vector,
    newBase: PrimitiveComponent,
    newBaseBoneName: String,
    hasBase: Boolean,
    baseRelativePosition: Boolean,
    serverMovementMode: Number,
  ): Unit

  @JsName("ClientMoveResponsePacked")
  public open fun clientMoveResponsePacked(packedBits: CharacterMoveResponsePackedBits): Unit

  @JsName("ClientCheatWalk")
  public open fun clientCheatWalk(): Unit

  @JsName("ClientCheatGhost")
  public open fun clientCheatGhost(): Unit

  @JsName("ClientCheatFly")
  public open fun clientCheatFly(): Unit

  @JsName("ClientAdjustRootMotionSourcePosition")
  public open fun clientAdjustRootMotionSourcePosition(
    timestamp: Number,
    serverRootMotion: RootMotionSourceGroup,
    hasAnimRootMotion: Boolean,
    serverMontageTrackPosition: Number,
    serverLoc: Vector,
    serverRotation: VectorNetQuantizeNormal,
    serverVelZ: Number,
    serverBase: PrimitiveComponent,
    serverBoneName: String,
    hasBase: Boolean,
    baseRelativePosition: Boolean,
    serverMovementMode: Number,
  ): Unit

  @JsName("ClientAdjustRootMotionPosition")
  public open fun clientAdjustRootMotionPosition(
    timestamp: Number,
    serverMontageTrackPosition: Number,
    serverLoc: Vector,
    serverRotation: VectorNetQuantizeNormal,
    serverVelZ: Number,
    serverBase: PrimitiveComponent,
    serverBoneName: String,
    hasBase: Boolean,
    baseRelativePosition: Boolean,
    serverMovementMode: Number,
  ): Unit

  @JsName("ClientAdjustPosition")
  public open fun clientAdjustPosition(
    timestamp: Number,
    newLoc: Vector,
    newVel: Vector,
    newBase: PrimitiveComponent,
    newBaseBoneName: String,
    hasBase: Boolean,
    baseRelativePosition: Boolean,
    serverMovementMode: Number,
  ): Unit

  @JsName("ClientAckGoodMove")
  public open fun clientAckGoodMove(timestamp: Number): Unit

  @JsName("CanJumpInternal")
  public open fun canJumpInternal(): Boolean

  @JsName("CanJump")
  public open fun canJump(): Boolean

  @JsName("CanCrouch")
  public open fun canCrouch(): Boolean

  @JsName("CacheInitialMeshOffset")
  public open fun cacheInitialMeshOffset(meshRelativeLocation: Vector,
      meshRelativeRotation: Rotator): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Character

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Character

    @JsName("C")
    public fun copy(other: UObject): Character

    @JsName("C")
    public fun copy(other: Any): Character
  }
}

@JsName("ENavPathEvent")
public external object NavPathEvent {
  public var Cleared: String

  public var NewPath: String

  public var UpdatedDueToGoalMoved: String

  public var UpdatedDueToNavigationChanged: String

  public var Invalidated: String

  public var RePathFailed: String

  public var MetaPathUpdate: String

  public var Custom: String

  @JsName("ENavPathEvent_MAX")
  public var Max: String
}

@JsName("ENavigationOptionFlag")
public external object NavigationOptionFlag {
  public var Default: String

  public var Enable: String

  public var Disable: String

  public var MAX: String
}

public open external class NavigationPath(
  outer: UObject,
) : UObject {
  @JsName("PathUpdatedNotifier")
  public open var pathUpdatedNotifier: UnrealEngineMulticastDelegate<(AffectedPath: NavigationPath,
      PathEvent: String) -> Unit>

  @JsName("PathPoints")
  public open var pathPoints: Array<Vector>

  @JsName("RecalculateOnInvalidation")
  public open var recalculateOnInvalidation: String

  public override fun isValid(): Boolean

  @JsName("IsStringPulled")
  public open fun isStringPulled(): Boolean

  @JsName("IsPartial")
  public open fun isPartial(): Boolean

  @JsName("GetPathLength")
  public open fun getPathLength(): Number

  @JsName("GetPathCost")
  public open fun getPathCost(): Number

  @JsName("GetDebugString")
  public open fun getDebugString(): String

  @JsName("EnableRecalculationOnInvalidation")
  public open fun enableRecalculationOnInvalidation(doRecalculation: String): Unit

  @JsName("EnableDebugDrawing")
  public open fun enableDebugDrawing(shouldDrawDebugData: Boolean, pathColor: LinearColor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationPath

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationPath

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationPath

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationPath

    @JsName("C")
    public fun copy(other: UObject): NavigationPath

    @JsName("C")
    public fun copy(other: Any): NavigationPath
  }
}

@JsName("T$194")
public external interface Object194 {
  @JsName("Location")
  public var location: Vector

  @JsName("Rotation")
  public var rotation: Rotator
}

public open external class Controller(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("PlayerState")
  public open var playerState: PlayerState

  @JsName("OnInstigatedAnyDamage")
  public open var onInstigatedAnyDamage: UnrealEngineMulticastDelegate<(
    Damage: Number,
    DamageType: DamageType,
    DamagedActor: Actor,
    DamageCauser: Actor,
  ) -> Unit>

  @JsName("OnPossessedPawnChanged")
  public open var onPossessedPawnChanged: UnrealEngineMulticastDelegate<(OldPawn: Pawn,
      NewPawn: Pawn) -> Unit>

  @JsName("StateName")
  public open var stateName: String

  @JsName("Pawn")
  public open var pawn: Pawn

  @JsName("Character")
  public open var character: Character

  @JsName("TransformComponent")
  public open var transformComponent: SceneComponent

  @JsName("ControlRotation")
  public open var controlRotation: Rotator

  @JsName("bAttachToPawn")
  public open var attachToPawn: Boolean

  @JsName("UnPossess")
  public open fun unPossess(): Unit

  @JsName("StopMovement")
  public open fun stopMovement(): Unit

  @JsName("SetInitialLocationAndRotation")
  public open fun setInitialLocationAndRotation(newLocation: Vector, newRotation: Rotator): Unit

  @JsName("SetIgnoreMoveInput")
  public open fun setIgnoreMoveInput(newMoveInput: Boolean): Unit

  @JsName("SetIgnoreLookInput")
  public open fun setIgnoreLookInput(newLookInput: Boolean): Unit

  @JsName("SetControlRotation")
  public open fun setControlRotation(newRotation: Rotator): Unit

  @JsName("ResetIgnoreMoveInput")
  public open fun resetIgnoreMoveInput(): Unit

  @JsName("ResetIgnoreLookInput")
  public open fun resetIgnoreLookInput(): Unit

  @JsName("ResetIgnoreInputFlags")
  public open fun resetIgnoreInputFlags(): Unit

  @JsName("ReceiveUnPossess")
  public open fun receiveUnPossess(unpossessedPawn: Pawn): Unit

  @JsName("ReceivePossess")
  public open fun receivePossess(possessedPawn: Pawn): Unit

  @JsName("ReceiveInstigatedAnyDamage")
  public open fun receiveInstigatedAnyDamage(
    damage: Number,
    damageType: DamageType,
    damagedActor: Actor,
    damageCauser: Actor,
  ): Unit

  @JsName("Possess")
  public open fun possess(inPawn: Pawn): Unit

  @JsName("OnRep_PlayerState")
  public open fun onRepPlayerState(): Unit

  @JsName("OnRep_Pawn")
  public open fun onRepPawn(): Unit

  @JsName("LineOfSightTo")
  public open fun lineOfSightTo(
    other: Actor,
    viewPoint: Vector,
    alternateChecks: Boolean,
  ): Boolean

  @JsName("K2_GetPawn")
  public open fun k2GetPawn(): Pawn

  @JsName("IsPlayerController")
  public open fun isPlayerController(): Boolean

  @JsName("IsMoveInputIgnored")
  public open fun isMoveInputIgnored(): Boolean

  @JsName("IsLookInputIgnored")
  public open fun isLookInputIgnored(): Boolean

  @JsName("IsLocalPlayerController")
  public open fun isLocalPlayerController(): Boolean

  @JsName("IsLocalController")
  public open fun isLocalController(): Boolean

  @JsName("GetViewTarget")
  public open fun getViewTarget(): Actor

  @JsName("GetPlayerViewPoint")
  public open fun getPlayerViewPoint(location: Vector, rotation: Rotator): Object194

  @JsName("GetDesiredRotation")
  public open fun getDesiredRotation(): Rotator

  @JsName("GetControlRotation")
  public open fun getControlRotation(): Rotator

  @JsName("ClientSetRotation")
  public open fun clientSetRotation(newRotation: Rotator, resetCamera: Boolean): Unit

  @JsName("ClientSetLocation")
  public open fun clientSetLocation(newLocation: Vector, newRotation: Rotator): Unit

  @JsName("GetCurrentPath")
  public open fun getCurrentPath(): NavigationPath

  @JsName("GetCurrentPathIndex")
  public open fun getCurrentPathIndex(): Number

  @JsName("GetCurrentPathPoints")
  public open fun getCurrentPathPoints(): Array<Vector>

  @JsName("GetNextNavLinkIndex")
  public open fun getNextNavLinkIndex(): Number

  @JsName("SimpleMoveToActor")
  public open fun simpleMoveToActor(goal: Actor): Unit

  @JsName("SimpleMoveToLocation")
  public open fun simpleMoveToLocation(goal: Vector): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Controller

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Controller

    @JsName("C")
    public fun copy(other: UObject): Controller

    @JsName("C")
    public fun copy(other: Any): Controller

    @JsName("GetCurrentPath")
    public fun getCurrentPath(controller: Controller): NavigationPath

    @JsName("GetCurrentPathIndex")
    public fun getCurrentPathIndex(controller: Controller): Number

    @JsName("GetCurrentPathPoints")
    public fun getCurrentPathPoints(controller: Controller): Array<Vector>

    @JsName("GetNextNavLinkIndex")
    public fun getNextNavLinkIndex(controller: Controller): Number

    @JsName("SimpleMoveToActor")
    public fun simpleMoveToActor(controller: Controller, goal: Actor): Unit

    @JsName("SimpleMoveToLocation")
    public fun simpleMoveToLocation(controller: Controller, goal: Vector): Unit
  }
}

public open external class Player(
  outer: UObject,
) : UObject {
  @JsName("PlayerController")
  public open var playerController: PlayerController

  @JsName("CurrentNetSpeed")
  public open var currentNetSpeed: Number

  @JsName("ConfiguredInternetSpeed")
  public open var configuredInternetSpeed: Number

  @JsName("ConfiguredLanSpeed")
  public open var configuredLanSpeed: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Player

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Player

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Player

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Player

    @JsName("C")
    public fun copy(other: UObject): Player

    @JsName("C")
    public fun copy(other: Any): Player
  }
}

public open external class InterpTrackInst(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInst

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInst

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInst

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInst

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInst

    @JsName("C")
    public fun copy(other: Any): InterpTrackInst
  }
}

public open external class InterpTrackInstDirector(
  outer: UObject,
) : InterpTrackInst {
  @JsName("OldViewTarget")
  public open var oldViewTarget: Actor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstDirector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstDirector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstDirector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstDirector

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstDirector

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstDirector
  }
}

public open external class ReporterBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReporterBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReporterBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReporterBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReporterBase

    @JsName("C")
    public fun copy(other: UObject): ReporterBase

    @JsName("C")
    public fun copy(other: Any): ReporterBase
  }
}

public open external class ReporterGraph(
  outer: UObject,
) : ReporterBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReporterGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReporterGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReporterGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReporterGraph

    @JsName("C")
    public fun copy(other: UObject): ReporterGraph

    @JsName("C")
    public fun copy(other: Any): ReporterGraph
  }
}

@JsName("CanvasUVTri")
public open external class CanvasUvTri {
  @JsName("V0_Pos")
  public open var v0Pos: Vector2d

  @JsName("V0_UV")
  public open var v0uv: Vector2d

  @JsName("V0_Color")
  public open var v0Color: LinearColor

  @JsName("V1_Pos")
  public open var v1Pos: Vector2d

  @JsName("V1_UV")
  public open var v1uv: Vector2d

  @JsName("V1_Color")
  public open var v1Color: LinearColor

  @JsName("V2_Pos")
  public open var v2Pos: Vector2d

  @JsName("V2_UV")
  public open var v2uv: Vector2d

  @JsName("V2_Color")
  public open var v2Color: LinearColor

  public open fun clone(): CanvasUvTri

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CanvasUvTri

    @JsName("C")
    public fun copy(other: Any): CanvasUvTri
  }
}

@JsName("T$195")
public external interface Object195 {
  @JsName("WorldOrigin")
  public var worldOrigin: Vector

  @JsName("WorldDirection")
  public var worldDirection: Vector
}

public open external class Canvas(
  outer: UObject,
) : UObject {
  @JsName("OrgX")
  public open var orgX: Number

  @JsName("OrgY")
  public open var orgY: Number

  @JsName("ClipX")
  public open var clipX: Number

  @JsName("ClipY")
  public open var clipY: Number

  @JsName("DrawColor")
  public open var drawColor: Color

  @JsName("bCenterX")
  public open var centerX: Boolean

  @JsName("bCenterY")
  public open var centerY: Boolean

  @JsName("bNoSmooth")
  public open var noSmooth: Boolean

  @JsName("SizeX")
  public open var sizeX: Number

  @JsName("SizeY")
  public open var sizeY: Number

  @JsName("ColorModulate")
  public open var colorModulate: Plane

  @JsName("DefaultTexture")
  public open var defaultTexture: Texture2d

  @JsName("GradientTexture0")
  public open var gradientTexture0: Texture2d

  @JsName("ReporterGraph")
  public open var reporterGraph: ReporterGraph

  @JsName("K2_TextSize")
  public open fun k2TextSize(
    renderFont: Font,
    renderText: String,
    scale: Vector2d,
  ): Vector2d

  @JsName("K2_StrLen")
  public open fun k2StrLen(renderFont: Font, renderText: String): Vector2d

  @JsName("K2_Project")
  public open fun k2Project(worldLocation: Vector): Vector

  @JsName("K2_DrawTriangle")
  public open fun k2DrawTriangle(renderTexture: Texture, triangles: Array<CanvasUvTri>): Unit

  @JsName("K2_DrawTexture")
  public open fun k2DrawTexture(
    renderTexture: Texture,
    screenPosition: Vector2d,
    screenSize: Vector2d,
    coordinatePosition: Vector2d,
    coordinateSize: Vector2d,
    renderColor: LinearColor,
    blendMode: String,
    rotation: Number,
    pivotPoint: Vector2d,
  ): Unit

  @JsName("K2_DrawText")
  public open fun k2DrawText(
    renderFont: Font,
    renderText: String,
    screenPosition: Vector2d,
    scale: Vector2d,
    renderColor: LinearColor,
    kerning: Number,
    shadowColor: LinearColor,
    shadowOffset: Vector2d,
    centreX: Boolean,
    centreY: Boolean,
    outlined: Boolean,
    outlineColor: LinearColor,
  ): Unit

  @JsName("K2_DrawPolygon")
  public open fun k2DrawPolygon(
    renderTexture: Texture,
    screenPosition: Vector2d,
    radius: Vector2d,
    numberOfSides: Number,
    renderColor: LinearColor,
  ): Unit

  @JsName("K2_DrawMaterialTriangle")
  public open fun k2DrawMaterialTriangle(renderMaterial: MaterialInterface,
      triangles: Array<CanvasUvTri>): Unit

  @JsName("K2_DrawMaterial")
  public open fun k2DrawMaterial(
    renderMaterial: MaterialInterface,
    screenPosition: Vector2d,
    screenSize: Vector2d,
    coordinatePosition: Vector2d,
    coordinateSize: Vector2d,
    rotation: Number,
    pivotPoint: Vector2d,
  ): Unit

  @JsName("K2_DrawLine")
  public open fun k2DrawLine(
    screenPositionA: Vector2d,
    screenPositionB: Vector2d,
    thickness: Number,
    renderColor: LinearColor,
  ): Unit

  @JsName("K2_DrawBox")
  public open fun k2DrawBox(
    screenPosition: Vector2d,
    screenSize: Vector2d,
    thickness: Number,
    renderColor: LinearColor,
  ): Unit

  @JsName("K2_DrawBorder")
  public open fun k2DrawBorder(
    borderTexture: Texture,
    backgroundTexture: Texture,
    leftBorderTexture: Texture,
    rightBorderTexture: Texture,
    topBorderTexture: Texture,
    bottomBorderTexture: Texture,
    screenPosition: Vector2d,
    screenSize: Vector2d,
    coordinatePosition: Vector2d,
    coordinateSize: Vector2d,
    renderColor: LinearColor,
    borderScale: Vector2d,
    backgroundScale: Vector2d,
    rotation: Number,
    pivotPoint: Vector2d,
    cornerSize: Vector2d,
  ): Unit

  @JsName("K2_Deproject")
  public open fun k2Deproject(
    screenPosition: Vector2d,
    worldOrigin: Vector,
    worldDirection: Vector,
  ): Object195

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Canvas

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Canvas

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Canvas

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Canvas

    @JsName("C")
    public fun copy(other: UObject): Canvas

    @JsName("C")
    public fun copy(other: Any): Canvas
  }
}

public open external class DebugTextInfo {
  @JsName("SrcActor")
  public open var srcActor: Actor

  @JsName("SrcActorOffset")
  public open var srcActorOffset: Vector

  @JsName("SrcActorDesiredOffset")
  public open var srcActorDesiredOffset: Vector

  @JsName("DebugText")
  public open var debugText: String

  @JsName("TimeRemaining")
  public open var timeRemaining: Number

  @JsName("Duration")
  public open var duration: Number

  @JsName("TextColor")
  public open var textColor: Color

  @JsName("bAbsoluteLocation")
  public open var absoluteLocation: Boolean

  @JsName("bKeepAttachedToActor")
  public open var keepAttachedToActor: Boolean

  @JsName("bDrawShadow")
  public open var drawShadow: Boolean

  @JsName("OrigActorLocation")
  public open var origActorLocation: Vector

  @JsName("Font")
  public open var font: Font

  @JsName("FontScale")
  public open var fontScale: Number

  public open fun clone(): DebugTextInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DebugTextInfo

    @JsName("C")
    public fun copy(other: Any): DebugTextInfo
  }
}

@JsName("T$196")
public external interface Object196 {
  @JsName("OutWidth")
  public var outWidth: Number

  @JsName("OutHeight")
  public var outHeight: Number
}

@JsName("T$197")
public external interface OutActorsProvider {
  @JsName("OutActors")
  public var outActors: Array<Actor>
}

@JsName("T$198")
public external interface Object198 {
  @JsName("WorldPosition")
  public var worldPosition: Vector

  @JsName("WorldDirection")
  public var worldDirection: Vector
}

public open external class HUD(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("PlayerOwner")
  public open var playerOwner: PlayerController

  @JsName("bLostFocusPaused")
  public open var lostFocusPaused: Boolean

  @JsName("bShowHUD")
  public open var showHud: Boolean

  @JsName("bShowDebugInfo")
  public open var showDebugInfo: Boolean

  @JsName("CurrentTargetIndex")
  public open var currentTargetIndex: Number

  @JsName("bShowHitBoxDebugInfo")
  public open var showHitBoxDebugInfo: Boolean

  @JsName("bShowOverlays")
  public open var showOverlays: Boolean

  @JsName("bEnableDebugTextShadow")
  public open var enableDebugTextShadow: Boolean

  @JsName("PostRenderedActors")
  public open var postRenderedActors: Array<Actor>

  @JsName("DebugDisplay")
  public open var debugDisplay: Array<String>

  @JsName("ToggledDebugCategories")
  public open var toggledDebugCategories: Array<String>

  @JsName("Canvas")
  public open var canvas: Canvas

  @JsName("DebugCanvas")
  public open var debugCanvas: Canvas

  @JsName("DebugTextList")
  public open var debugTextList: Array<DebugTextInfo>

  @JsName("ShowDebugTargetDesiredClass")
  public open var showDebugTargetDesiredClass: UnrealEngineClass

  @JsName("ShowDebugTargetActor")
  public open var showDebugTargetActor: Actor

  @JsName("ShowHUD")
  public open fun showHud(): Unit

  @JsName("ShowDebugToggleSubCategory")
  public open fun showDebugToggleSubCategory(category: String): Unit

  @JsName("ShowDebugForReticleTargetToggle")
  public open fun showDebugForReticleTargetToggle(desiredClass: UnrealEngineClass): Unit

  @JsName("ShowDebug")
  public open fun showDebug(debugType: String): Unit

  @JsName("RemoveDebugText")
  public open fun removeDebugText(srcActor: Actor, leaveDurationText: Boolean): Unit

  @JsName("RemoveAllDebugStrings")
  public open fun removeAllDebugStrings(): Unit

  @JsName("ReceiveHitBoxRelease")
  public open fun receiveHitBoxRelease(boxName: String): Unit

  @JsName("ReceiveHitBoxEndCursorOver")
  public open fun receiveHitBoxEndCursorOver(boxName: String): Unit

  @JsName("ReceiveHitBoxClick")
  public open fun receiveHitBoxClick(boxName: String): Unit

  @JsName("ReceiveHitBoxBeginCursorOver")
  public open fun receiveHitBoxBeginCursorOver(boxName: String): Unit

  @JsName("ReceiveDrawHUD")
  public open fun receiveDrawHud(sizeX: Number, sizeY: Number): Unit

  @JsName("Project")
  public open fun project(location: Vector, clampToZeroPlane: Boolean): Vector

  @JsName("PreviousDebugTarget")
  public open fun previousDebugTarget(): Unit

  @JsName("NextDebugTarget")
  public open fun nextDebugTarget(): Unit

  @JsName("GetTextSize")
  public open fun getTextSize(
    text: String,
    outWidth: Number,
    outHeight: Number,
    font: Font,
    scale: Number,
  ): Object196

  @JsName("GetOwningPlayerController")
  public open fun getOwningPlayerController(): PlayerController

  @JsName("GetOwningPawn")
  public open fun getOwningPawn(): Pawn

  @JsName("GetActorsInSelectionRectangle")
  public open fun getActorsInSelectionRectangle(
    classFilter: UnrealEngineClass,
    firstPoint: Vector2d,
    secondPoint: Vector2d,
    outActors: Array<Actor>,
    includeNonCollidingComponents: Boolean,
    actorMustBeFullyEnclosed: Boolean,
  ): OutActorsProvider

  @JsName("DrawTextureSimple")
  public open fun drawTextureSimple(
    texture: Texture,
    screenX: Number,
    screenY: Number,
    scale: Number,
    scalePosition: Boolean,
  ): Unit

  @JsName("DrawTexture")
  public open fun drawTexture(
    texture: Texture,
    screenX: Number,
    screenY: Number,
    screenW: Number,
    screenH: Number,
    textureU: Number,
    textureV: Number,
    textureUWidth: Number,
    textureVHeight: Number,
    tintColor: LinearColor,
    blendMode: String,
    scale: Number,
    scalePosition: Boolean,
    rotation: Number,
    rotPivot: Vector2d,
  ): Unit

  @JsName("DrawText")
  public open fun drawText(
    text: String,
    textColor: LinearColor,
    screenX: Number,
    screenY: Number,
    font: Font,
    scale: Number,
    scalePosition: Boolean,
  ): Unit

  @JsName("DrawRect")
  public open fun drawRect(
    rectColor: LinearColor,
    screenX: Number,
    screenY: Number,
    screenW: Number,
    screenH: Number,
  ): Unit

  @JsName("DrawMaterialTriangle")
  public open fun drawMaterialTriangle(
    material: MaterialInterface,
    v0Pos: Vector2d,
    v1Pos: Vector2d,
    v2Pos: Vector2d,
    v0uv: Vector2d,
    v1uv: Vector2d,
    v2uv: Vector2d,
    v0Color: LinearColor,
    v1Color: LinearColor,
    v2Color: LinearColor,
  ): Unit

  @JsName("DrawMaterialSimple")
  public open fun drawMaterialSimple(
    material: MaterialInterface,
    screenX: Number,
    screenY: Number,
    screenW: Number,
    screenH: Number,
    scale: Number,
    scalePosition: Boolean,
  ): Unit

  @JsName("DrawMaterial")
  public open fun drawMaterial(
    material: MaterialInterface,
    screenX: Number,
    screenY: Number,
    screenW: Number,
    screenH: Number,
    materialU: Number,
    materialV: Number,
    materialUWidth: Number,
    materialVHeight: Number,
    scale: Number,
    scalePosition: Boolean,
    rotation: Number,
    rotPivot: Vector2d,
  ): Unit

  @JsName("DrawLine")
  public open fun drawLine(
    startScreenX: Number,
    startScreenY: Number,
    endScreenX: Number,
    endScreenY: Number,
    lineColor: LinearColor,
    lineThickness: Number,
  ): Unit

  @JsName("Deproject")
  public open fun deproject(
    screenX: Number,
    screenY: Number,
    worldPosition: Vector,
    worldDirection: Vector,
  ): Object198

  @JsName("AddHitBox")
  public open fun addHitBox(
    position: Vector2d,
    size: Vector2d,
    inName: String,
    consumesInput: Boolean,
    priority: Number,
  ): Unit

  @JsName("AddDebugText")
  public open fun addDebugText(
    debugText: String,
    srcActor: Actor,
    duration: Number,
    offset: Vector,
    desiredOffset: Vector,
    textColor: Color,
    skipOverwriteCheck: Boolean,
    absoluteLocation: Boolean,
    keepAttachedToActor: Boolean,
    inFont: Font,
    fontScale: Number,
    drawShadow: Boolean,
  ): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HUD

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HUD

    @JsName("C")
    public fun copy(other: UObject): HUD

    @JsName("C")
    public fun copy(other: Any): HUD
  }
}

@JsName("ECameraProjectionMode")
public external object CameraProjectionMode {
  public var Perspective: String

  public var Orthographic: String

  @JsName("ECameraProjectionMode_MAX")
  public var Max: String
}

@JsName("EBloomMethod")
public external object BloomMethod {
  @JsName("BM_SOG")
  public var SOG: String

  @JsName("BM_FFT")
  public var FFT: String

  @JsName("BM_MAX")
  public var Max: String
}

@JsName("EAutoExposureMethod")
public external object AutoExposureMethod {
  @JsName("AEM_Histogram")
  public var Histogram: String

  @JsName("AEM_Basic")
  public var Basic: String

  @JsName("AEM_Manual")
  public var Manual: String

  @JsName("AEM_MAX")
  public var Max: String
}

@JsName("EDepthOfFieldMethod")
public external object DepthOfFieldMethod {
  @JsName("DOFM_BokehDOF")
  public var BokehDof: String

  @JsName("DOFM_Gaussian")
  public var Gaussian: String

  @JsName("DOFM_CircleDOF")
  public var CircleDof: String

  @JsName("DOFM_MAX")
  public var Max: String
}

@JsName("ETemperatureMethod")
public external object TemperatureMethod {
  @JsName("TEMP_WhiteBalance")
  public var WhiteBalance: String

  @JsName("TEMP_ColorTemperature")
  public var ColorTemperature: String

  @JsName("TEMP_MAX")
  public var Max: String
}

@JsName("EDynamicGlobalIlluminationMethod")
public external object DynamicGlobalIlluminationMethod {
  public var None: String

  public var Lumen: String

  public var ScreenSpace: String

  public var RayTraced: String

  public var Plugin: String

  @JsName("EDynamicGlobalIlluminationMethod_MAX")
  public var Max: String
}

@JsName("ERayTracingGlobalIlluminationType")
public external object RayTracingGlobalIlluminationType {
  public var Disabled: String

  public var BruteForce: String

  public var FinalGather: String

  @JsName("ERayTracingGlobalIlluminationType_MAX")
  public var Max: String
}

@JsName("EReflectionMethod")
public external object ReflectionMethod {
  public var None: String

  public var Lumen: String

  public var ScreenSpace: String

  public var RayTraced: String

  @JsName("EReflectionMethod_MAX")
  public var Max: String
}

@JsName("EReflectionsType")
public external object ReflectionsType {
  public var ScreenSpace: String

  public var RayTracing: String

  @JsName("EReflectionsType_MAX")
  public var Max: String
}

@JsName("ELumenRayLightingModeOverride")
public external object LumenRayLightingModeOverride {
  public var Default: String

  public var SurfaceCache: String

  public var HitLighting: String

  @JsName("ELumenRayLightingModeOverride_MAX")
  public var Max: String
}

@JsName("EReflectedAndRefractedRayTracedShadows")
public external object ReflectedAndRefractedRayTracedShadows {
  public var Disabled: String

  @JsName("Hard_shadows")
  public var Hardshadows: String

  @JsName("Area_shadows")
  public var Areashadows: String

  @JsName("EReflectedAndRefractedRayTracedShadows_MAX")
  public var Max: String
}

public open external class TextureCube(
  outer: UObject,
) : Texture {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureCube

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureCube

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureCube

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureCube

    @JsName("C")
    public fun copy(other: UObject): TextureCube

    @JsName("C")
    public fun copy(other: Any): TextureCube
  }
}

@JsName("ETranslucencyType")
public external object TranslucencyType {
  @JsName("Raster")
  public var Ster: String

  @JsName("RayTracing")
  public var YTracing: String

  @JsName("ETranslucencyType_MAX")
  public var Max: String
}

public open external class WeightedBlendable {
  @JsName("Weight")
  public open var weight: Number

  @JsName("UObject")
  public open var uObject: UObject

  public open fun clone(): WeightedBlendable

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WeightedBlendable

    @JsName("C")
    public fun copy(other: Any): WeightedBlendable
  }
}

public open external class WeightedBlendables {
  @JsName("Array")
  public open var array: Array<WeightedBlendable>

  public open fun clone(): WeightedBlendables

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WeightedBlendables

    @JsName("C")
    public fun copy(other: Any): WeightedBlendables
  }
}

public open external class PostProcessSettings {
  @JsName("bOverride_TemperatureType")
  public open var overrideTemperatureType: Boolean

  @JsName("bOverride_WhiteTemp")
  public open var overrideWhiteTemp: Boolean

  @JsName("bOverride_WhiteTint")
  public open var overrideWhiteTint: Boolean

  @JsName("bOverride_ColorSaturation")
  public open var overrideColorSaturation: Boolean

  @JsName("bOverride_ColorContrast")
  public open var overrideColorContrast: Boolean

  @JsName("bOverride_ColorGamma")
  public open var overrideColorGamma: Boolean

  @JsName("bOverride_ColorGain")
  public open var overrideColorGain: Boolean

  @JsName("bOverride_ColorOffset")
  public open var overrideColorOffset: Boolean

  @JsName("bOverride_ColorSaturationShadows")
  public open var overrideColorSaturationShadows: Boolean

  @JsName("bOverride_ColorContrastShadows")
  public open var overrideColorContrastShadows: Boolean

  @JsName("bOverride_ColorGammaShadows")
  public open var overrideColorGammaShadows: Boolean

  @JsName("bOverride_ColorGainShadows")
  public open var overrideColorGainShadows: Boolean

  @JsName("bOverride_ColorOffsetShadows")
  public open var overrideColorOffsetShadows: Boolean

  @JsName("bOverride_ColorSaturationMidtones")
  public open var overrideColorSaturationMidtones: Boolean

  @JsName("bOverride_ColorContrastMidtones")
  public open var overrideColorContrastMidtones: Boolean

  @JsName("bOverride_ColorGammaMidtones")
  public open var overrideColorGammaMidtones: Boolean

  @JsName("bOverride_ColorGainMidtones")
  public open var overrideColorGainMidtones: Boolean

  @JsName("bOverride_ColorOffsetMidtones")
  public open var overrideColorOffsetMidtones: Boolean

  @JsName("bOverride_ColorSaturationHighlights")
  public open var overrideColorSaturationHighlights: Boolean

  @JsName("bOverride_ColorContrastHighlights")
  public open var overrideColorContrastHighlights: Boolean

  @JsName("bOverride_ColorGammaHighlights")
  public open var overrideColorGammaHighlights: Boolean

  @JsName("bOverride_ColorGainHighlights")
  public open var overrideColorGainHighlights: Boolean

  @JsName("bOverride_ColorOffsetHighlights")
  public open var overrideColorOffsetHighlights: Boolean

  @JsName("bOverride_ColorCorrectionShadowsMax")
  public open var overrideColorCorrectionShadowsMax: Boolean

  @JsName("bOverride_ColorCorrectionHighlightsMin")
  public open var overrideColorCorrectionHighlightsMin: Boolean

  @JsName("bOverride_ColorCorrectionHighlightsMax")
  public open var overrideColorCorrectionHighlightsMax: Boolean

  @JsName("bOverride_BlueCorrection")
  public open var overrideBlueCorrection: Boolean

  @JsName("bOverride_ExpandGamut")
  public open var overrideExpandGamut: Boolean

  @JsName("bOverride_ToneCurveAmount")
  public open var overrideToneCurveAmount: Boolean

  @JsName("bOverride_FilmSlope")
  public open var overrideFilmSlope: Boolean

  @JsName("bOverride_FilmToe")
  public open var overrideFilmToe: Boolean

  @JsName("bOverride_FilmShoulder")
  public open var overrideFilmShoulder: Boolean

  @JsName("bOverride_FilmBlackClip")
  public open var overrideFilmBlackClip: Boolean

  @JsName("bOverride_FilmWhiteClip")
  public open var overrideFilmWhiteClip: Boolean

  @JsName("bOverride_SceneColorTint")
  public open var overrideSceneColorTint: Boolean

  @JsName("bOverride_SceneFringeIntensity")
  public open var overrideSceneFringeIntensity: Boolean

  @JsName("bOverride_ChromaticAberrationStartOffset")
  public open var overrideChromaticAberrationStartOffset: Boolean

  @JsName("bOverride_AmbientCubemapTint")
  public open var overrideAmbientCubemapTint: Boolean

  @JsName("bOverride_AmbientCubemapIntensity")
  public open var overrideAmbientCubemapIntensity: Boolean

  @JsName("bOverride_BloomMethod")
  public open var overrideBloomMethod: Boolean

  @JsName("bOverride_BloomIntensity")
  public open var overrideBloomIntensity: Boolean

  @JsName("bOverride_BloomThreshold")
  public open var overrideBloomThreshold: Boolean

  @JsName("bOverride_Bloom1Tint")
  public open var overrideBloom1Tint: Boolean

  @JsName("bOverride_Bloom1Size")
  public open var overrideBloom1Size: Boolean

  @JsName("bOverride_Bloom2Size")
  public open var overrideBloom2Size: Boolean

  @JsName("bOverride_Bloom2Tint")
  public open var overrideBloom2Tint: Boolean

  @JsName("bOverride_Bloom3Tint")
  public open var overrideBloom3Tint: Boolean

  @JsName("bOverride_Bloom3Size")
  public open var overrideBloom3Size: Boolean

  @JsName("bOverride_Bloom4Tint")
  public open var overrideBloom4Tint: Boolean

  @JsName("bOverride_Bloom4Size")
  public open var overrideBloom4Size: Boolean

  @JsName("bOverride_Bloom5Tint")
  public open var overrideBloom5Tint: Boolean

  @JsName("bOverride_Bloom5Size")
  public open var overrideBloom5Size: Boolean

  @JsName("bOverride_Bloom6Tint")
  public open var overrideBloom6Tint: Boolean

  @JsName("bOverride_Bloom6Size")
  public open var overrideBloom6Size: Boolean

  @JsName("bOverride_BloomSizeScale")
  public open var overrideBloomSizeScale: Boolean

  @JsName("bOverride_BloomConvolutionTexture")
  public open var overrideBloomConvolutionTexture: Boolean

  @JsName("bOverride_BloomConvolutionScatterDispersion")
  public open var overrideBloomConvolutionScatterDispersion: Boolean

  @JsName("bOverride_BloomConvolutionSize")
  public open var overrideBloomConvolutionSize: Boolean

  @JsName("bOverride_BloomConvolutionCenterUV")
  public open var overrideBloomConvolutionCenterUv: Boolean

  @JsName("bOverride_BloomConvolutionPreFilter")
  public open var overrideBloomConvolutionPreFilter: Boolean

  @JsName("bOverride_BloomConvolutionPreFilterMin")
  public open var overrideBloomConvolutionPreFilterMin: Boolean

  @JsName("bOverride_BloomConvolutionPreFilterMax")
  public open var overrideBloomConvolutionPreFilterMax: Boolean

  @JsName("bOverride_BloomConvolutionPreFilterMult")
  public open var overrideBloomConvolutionPreFilterMult: Boolean

  @JsName("bOverride_BloomConvolutionBufferScale")
  public open var overrideBloomConvolutionBufferScale: Boolean

  @JsName("bOverride_BloomDirtMaskIntensity")
  public open var overrideBloomDirtMaskIntensity: Boolean

  @JsName("bOverride_BloomDirtMaskTint")
  public open var overrideBloomDirtMaskTint: Boolean

  @JsName("bOverride_BloomDirtMask")
  public open var overrideBloomDirtMask: Boolean

  @JsName("bOverride_CameraShutterSpeed")
  public open var overrideCameraShutterSpeed: Boolean

  @JsName("bOverride_CameraISO")
  public open var overrideCameraIso: Boolean

  @JsName("bOverride_AutoExposureMethod")
  public open var overrideAutoExposureMethod: Boolean

  @JsName("bOverride_AutoExposureLowPercent")
  public open var overrideAutoExposureLowPercent: Boolean

  @JsName("bOverride_AutoExposureHighPercent")
  public open var overrideAutoExposureHighPercent: Boolean

  @JsName("bOverride_AutoExposureMinBrightness")
  public open var overrideAutoExposureMinBrightness: Boolean

  @JsName("bOverride_AutoExposureMaxBrightness")
  public open var overrideAutoExposureMaxBrightness: Boolean

  @JsName("bOverride_AutoExposureCalibrationConstant")
  public open var overrideAutoExposureCalibrationConstant: Boolean

  @JsName("bOverride_AutoExposureSpeedUp")
  public open var overrideAutoExposureSpeedUp: Boolean

  @JsName("bOverride_AutoExposureSpeedDown")
  public open var overrideAutoExposureSpeedDown: Boolean

  @JsName("bOverride_AutoExposureBias")
  public open var overrideAutoExposureBias: Boolean

  @JsName("bOverride_AutoExposureBiasCurve")
  public open var overrideAutoExposureBiasCurve: Boolean

  @JsName("bOverride_AutoExposureMeterMask")
  public open var overrideAutoExposureMeterMask: Boolean

  @JsName("bOverride_AutoExposureApplyPhysicalCameraExposure")
  public open var overrideAutoExposureApplyPhysicalCameraExposure: Boolean

  @JsName("bOverride_HistogramLogMin")
  public open var overrideHistogramLogMin: Boolean

  @JsName("bOverride_HistogramLogMax")
  public open var overrideHistogramLogMax: Boolean

  @JsName("bOverride_LocalExposureContrastScale")
  public open var overrideLocalExposureContrastScale: Boolean

  @JsName("bOverride_LocalExposureDetailStrength")
  public open var overrideLocalExposureDetailStrength: Boolean

  @JsName("bOverride_LocalExposureBlurredLuminanceBlend")
  public open var overrideLocalExposureBlurredLuminanceBlend: Boolean

  @JsName("bOverride_LocalExposureBlurredLuminanceKernelSizePercent")
  public open var overrideLocalExposureBlurredLuminanceKernelSizePercent: Boolean

  @JsName("bOverride_LocalExposureMiddleGreyBias")
  public open var overrideLocalExposureMiddleGreyBias: Boolean

  @JsName("bOverride_LensFlareIntensity")
  public open var overrideLensFlareIntensity: Boolean

  @JsName("bOverride_LensFlareTint")
  public open var overrideLensFlareTint: Boolean

  @JsName("bOverride_LensFlareTints")
  public open var overrideLensFlareTints: Boolean

  @JsName("bOverride_LensFlareBokehSize")
  public open var overrideLensFlareBokehSize: Boolean

  @JsName("bOverride_LensFlareBokehShape")
  public open var overrideLensFlareBokehShape: Boolean

  @JsName("bOverride_LensFlareThreshold")
  public open var overrideLensFlareThreshold: Boolean

  @JsName("bOverride_VignetteIntensity")
  public open var overrideVignetteIntensity: Boolean

  @JsName("bOverride_GrainIntensity")
  public open var overrideGrainIntensity: Boolean

  @JsName("bOverride_GrainJitter")
  public open var overrideGrainJitter: Boolean

  @JsName("bOverride_FilmGrainIntensity")
  public open var overrideFilmGrainIntensity: Boolean

  @JsName("bOverride_FilmGrainIntensityShadows")
  public open var overrideFilmGrainIntensityShadows: Boolean

  @JsName("bOverride_FilmGrainIntensityMidtones")
  public open var overrideFilmGrainIntensityMidtones: Boolean

  @JsName("bOverride_FilmGrainIntensityHighlights")
  public open var overrideFilmGrainIntensityHighlights: Boolean

  @JsName("bOverride_FilmGrainShadowsMax")
  public open var overrideFilmGrainShadowsMax: Boolean

  @JsName("bOverride_FilmGrainHighlightsMin")
  public open var overrideFilmGrainHighlightsMin: Boolean

  @JsName("bOverride_FilmGrainHighlightsMax")
  public open var overrideFilmGrainHighlightsMax: Boolean

  @JsName("bOverride_FilmGrainTexelSize")
  public open var overrideFilmGrainTexelSize: Boolean

  @JsName("bOverride_FilmGrainTexture")
  public open var overrideFilmGrainTexture: Boolean

  @JsName("bOverride_AmbientOcclusionIntensity")
  public open var overrideAmbientOcclusionIntensity: Boolean

  @JsName("bOverride_AmbientOcclusionStaticFraction")
  public open var overrideAmbientOcclusionStaticFraction: Boolean

  @JsName("bOverride_AmbientOcclusionRadius")
  public open var overrideAmbientOcclusionRadius: Boolean

  @JsName("bOverride_AmbientOcclusionFadeDistance")
  public open var overrideAmbientOcclusionFadeDistance: Boolean

  @JsName("bOverride_AmbientOcclusionFadeRadius")
  public open var overrideAmbientOcclusionFadeRadius: Boolean

  @JsName("bOverride_AmbientOcclusionDistance")
  public open var overrideAmbientOcclusionDistance: Boolean

  @JsName("bOverride_AmbientOcclusionRadiusInWS")
  public open var overrideAmbientOcclusionRadiusInWs: Boolean

  @JsName("bOverride_AmbientOcclusionPower")
  public open var overrideAmbientOcclusionPower: Boolean

  @JsName("bOverride_AmbientOcclusionBias")
  public open var overrideAmbientOcclusionBias: Boolean

  @JsName("bOverride_AmbientOcclusionQuality")
  public open var overrideAmbientOcclusionQuality: Boolean

  @JsName("bOverride_AmbientOcclusionMipBlend")
  public open var overrideAmbientOcclusionMipBlend: Boolean

  @JsName("bOverride_AmbientOcclusionMipScale")
  public open var overrideAmbientOcclusionMipScale: Boolean

  @JsName("bOverride_AmbientOcclusionMipThreshold")
  public open var overrideAmbientOcclusionMipThreshold: Boolean

  @JsName("bOverride_AmbientOcclusionTemporalBlendWeight")
  public open var overrideAmbientOcclusionTemporalBlendWeight: Boolean

  @JsName("bOverride_RayTracingAO")
  public open var overrideRayTracingAo: Boolean

  @JsName("bOverride_RayTracingAOSamplesPerPixel")
  public open var overrideRayTracingAoSamplesPerPixel: Boolean

  @JsName("bOverride_RayTracingAOIntensity")
  public open var overrideRayTracingAoIntensity: Boolean

  @JsName("bOverride_RayTracingAORadius")
  public open var overrideRayTracingAoRadius: Boolean

  @JsName("bOverride_LPVIntensity")
  public open var overrideLpvIntensity: Boolean

  @JsName("bOverride_LPVDirectionalOcclusionIntensity")
  public open var overrideLpvDirectionalOcclusionIntensity: Boolean

  @JsName("bOverride_LPVDirectionalOcclusionRadius")
  public open var overrideLpvDirectionalOcclusionRadius: Boolean

  @JsName("bOverride_LPVDiffuseOcclusionExponent")
  public open var overrideLpvDiffuseOcclusionExponent: Boolean

  @JsName("bOverride_LPVSpecularOcclusionExponent")
  public open var overrideLpvSpecularOcclusionExponent: Boolean

  @JsName("bOverride_LPVDiffuseOcclusionIntensity")
  public open var overrideLpvDiffuseOcclusionIntensity: Boolean

  @JsName("bOverride_LPVSpecularOcclusionIntensity")
  public open var overrideLpvSpecularOcclusionIntensity: Boolean

  @JsName("bOverride_LPVSize")
  public open var overrideLpvSize: Boolean

  @JsName("bOverride_LPVSecondaryOcclusionIntensity")
  public open var overrideLpvSecondaryOcclusionIntensity: Boolean

  @JsName("bOverride_LPVSecondaryBounceIntensity")
  public open var overrideLpvSecondaryBounceIntensity: Boolean

  @JsName("bOverride_LPVGeometryVolumeBias")
  public open var overrideLpvGeometryVolumeBias: Boolean

  @JsName("bOverride_LPVVplInjectionBias")
  public open var overrideLpvVplInjectionBias: Boolean

  @JsName("bOverride_LPVEmissiveInjectionIntensity")
  public open var overrideLpvEmissiveInjectionIntensity: Boolean

  @JsName("bOverride_LPVFadeRange")
  public open var overrideLpvFadeRange: Boolean

  @JsName("bOverride_LPVDirectionalOcclusionFadeRange")
  public open var overrideLpvDirectionalOcclusionFadeRange: Boolean

  @JsName("bOverride_IndirectLightingColor")
  public open var overrideIndirectLightingColor: Boolean

  @JsName("bOverride_IndirectLightingIntensity")
  public open var overrideIndirectLightingIntensity: Boolean

  @JsName("bOverride_ColorGradingIntensity")
  public open var overrideColorGradingIntensity: Boolean

  @JsName("bOverride_ColorGradingLUT")
  public open var overrideColorGradingLut: Boolean

  @JsName("bOverride_DepthOfFieldFocalDistance")
  public open var overrideDepthOfFieldFocalDistance: Boolean

  @JsName("bOverride_DepthOfFieldFstop")
  public open var overrideDepthOfFieldFstop: Boolean

  @JsName("bOverride_DepthOfFieldMinFstop")
  public open var overrideDepthOfFieldMinFstop: Boolean

  @JsName("bOverride_DepthOfFieldBladeCount")
  public open var overrideDepthOfFieldBladeCount: Boolean

  @JsName("bOverride_DepthOfFieldSensorWidth")
  public open var overrideDepthOfFieldSensorWidth: Boolean

  @JsName("bOverride_DepthOfFieldDepthBlurRadius")
  public open var overrideDepthOfFieldDepthBlurRadius: Boolean

  @JsName("bOverride_DepthOfFieldDepthBlurAmount")
  public open var overrideDepthOfFieldDepthBlurAmount: Boolean

  @JsName("bOverride_DepthOfFieldFocalRegion")
  public open var overrideDepthOfFieldFocalRegion: Boolean

  @JsName("bOverride_DepthOfFieldNearTransitionRegion")
  public open var overrideDepthOfFieldNearTransitionRegion: Boolean

  @JsName("bOverride_DepthOfFieldFarTransitionRegion")
  public open var overrideDepthOfFieldFarTransitionRegion: Boolean

  @JsName("bOverride_DepthOfFieldScale")
  public open var overrideDepthOfFieldScale: Boolean

  @JsName("bOverride_DepthOfFieldNearBlurSize")
  public open var overrideDepthOfFieldNearBlurSize: Boolean

  @JsName("bOverride_DepthOfFieldFarBlurSize")
  public open var overrideDepthOfFieldFarBlurSize: Boolean

  @JsName("bOverride_MobileHQGaussian")
  public open var overrideMobileHqGaussian: Boolean

  @JsName("bOverride_DepthOfFieldOcclusion")
  public open var overrideDepthOfFieldOcclusion: Boolean

  @JsName("bOverride_DepthOfFieldSkyFocusDistance")
  public open var overrideDepthOfFieldSkyFocusDistance: Boolean

  @JsName("bOverride_DepthOfFieldVignetteSize")
  public open var overrideDepthOfFieldVignetteSize: Boolean

  @JsName("bOverride_MotionBlurAmount")
  public open var overrideMotionBlurAmount: Boolean

  @JsName("bOverride_MotionBlurMax")
  public open var overrideMotionBlurMax: Boolean

  @JsName("bOverride_MotionBlurTargetFPS")
  public open var overrideMotionBlurTargetFps: Boolean

  @JsName("bOverride_MotionBlurPerObjectSize")
  public open var overrideMotionBlurPerObjectSize: Boolean

  @JsName("bOverride_ScreenPercentage")
  public open var overrideScreenPercentage: Boolean

  @JsName("bOverride_ReflectionMethod")
  public open var overrideReflectionMethod: Boolean

  @JsName("bOverride_LumenReflectionQuality")
  public open var overrideLumenReflectionQuality: Boolean

  @JsName("bOverride_ScreenSpaceReflectionIntensity")
  public open var overrideScreenSpaceReflectionIntensity: Boolean

  @JsName("bOverride_ScreenSpaceReflectionQuality")
  public open var overrideScreenSpaceReflectionQuality: Boolean

  @JsName("bOverride_ScreenSpaceReflectionMaxRoughness")
  public open var overrideScreenSpaceReflectionMaxRoughness: Boolean

  @JsName("bOverride_ScreenSpaceReflectionRoughnessScale")
  public open var overrideScreenSpaceReflectionRoughnessScale: Boolean

  @JsName("bOverride_ReflectionsType")
  public open var overrideReflectionsType: Boolean

  @JsName("bOverride_RayTracingReflectionsMaxRoughness")
  public open var overrideRayTracingReflectionsMaxRoughness: Boolean

  @JsName("bOverride_RayTracingReflectionsMaxBounces")
  public open var overrideRayTracingReflectionsMaxBounces: Boolean

  @JsName("bOverride_RayTracingReflectionsSamplesPerPixel")
  public open var overrideRayTracingReflectionsSamplesPerPixel: Boolean

  @JsName("bOverride_RayTracingReflectionsShadows")
  public open var overrideRayTracingReflectionsShadows: Boolean

  @JsName("bOverride_RayTracingReflectionsTranslucency")
  public open var overrideRayTracingReflectionsTranslucency: Boolean

  @JsName("bOverride_TranslucencyType")
  public open var overrideTranslucencyType: Boolean

  @JsName("bOverride_RayTracingTranslucencyMaxRoughness")
  public open var overrideRayTracingTranslucencyMaxRoughness: Boolean

  @JsName("bOverride_RayTracingTranslucencyRefractionRays")
  public open var overrideRayTracingTranslucencyRefractionRays: Boolean

  @JsName("bOverride_RayTracingTranslucencySamplesPerPixel")
  public open var overrideRayTracingTranslucencySamplesPerPixel: Boolean

  @JsName("bOverride_RayTracingTranslucencyShadows")
  public open var overrideRayTracingTranslucencyShadows: Boolean

  @JsName("bOverride_RayTracingTranslucencyRefraction")
  public open var overrideRayTracingTranslucencyRefraction: Boolean

  @JsName("bOverride_DynamicGlobalIlluminationMethod")
  public open var overrideDynamicGlobalIlluminationMethod: Boolean

  @JsName("bOverride_LumenSceneLightingQuality")
  public open var overrideLumenSceneLightingQuality: Boolean

  @JsName("bOverride_LumenSceneDetail")
  public open var overrideLumenSceneDetail: Boolean

  @JsName("bOverride_LumenSceneViewDistance")
  public open var overrideLumenSceneViewDistance: Boolean

  @JsName("bOverride_LumenSceneLightingUpdateSpeed")
  public open var overrideLumenSceneLightingUpdateSpeed: Boolean

  @JsName("bOverride_LumenFinalGatherQuality")
  public open var overrideLumenFinalGatherQuality: Boolean

  @JsName("bOverride_LumenFinalGatherLightingUpdateSpeed")
  public open var overrideLumenFinalGatherLightingUpdateSpeed: Boolean

  @JsName("bOverride_LumenMaxTraceDistance")
  public open var overrideLumenMaxTraceDistance: Boolean

  @JsName("bOverride_LumenRayLightingMode")
  public open var overrideLumenRayLightingMode: Boolean

  @JsName("bOverride_RayTracingGI")
  public open var overrideRayTracingGi: Boolean

  @JsName("bOverride_RayTracingGIMaxBounces")
  public open var overrideRayTracingGiMaxBounces: Boolean

  @JsName("bOverride_RayTracingGISamplesPerPixel")
  public open var overrideRayTracingGiSamplesPerPixel: Boolean

  @JsName("bOverride_PathTracingMaxBounces")
  public open var overridePathTracingMaxBounces: Boolean

  @JsName("bOverride_PathTracingSamplesPerPixel")
  public open var overridePathTracingSamplesPerPixel: Boolean

  @JsName("bOverride_PathTracingFilterWidth")
  public open var overridePathTracingFilterWidth: Boolean

  @JsName("bOverride_PathTracingEnableEmissive")
  public open var overridePathTracingEnableEmissive: Boolean

  @JsName("bOverride_PathTracingMaxPathExposure")
  public open var overridePathTracingMaxPathExposure: Boolean

  @JsName("bOverride_PathTracingEnableReferenceDOF")
  public open var overridePathTracingEnableReferenceDof: Boolean

  @JsName("bOverride_PathTracingEnableDenoiser")
  public open var overridePathTracingEnableDenoiser: Boolean

  @JsName("bMobileHQGaussian")
  public open var mobileHqGaussian: Boolean

  @JsName("BloomMethod")
  public open var bloomMethod: String

  @JsName("AutoExposureMethod")
  public open var autoExposureMethod: String

  @JsName("DepthOfFieldMethod")
  public open var depthOfFieldMethod: String

  @JsName("TemperatureType")
  public open var temperatureType: String

  @JsName("WhiteTemp")
  public open var whiteTemp: Number

  @JsName("WhiteTint")
  public open var whiteTint: Number

  @JsName("ColorSaturation")
  public open var colorSaturation: Vector4

  @JsName("ColorContrast")
  public open var colorContrast: Vector4

  @JsName("ColorGamma")
  public open var colorGamma: Vector4

  @JsName("ColorGain")
  public open var colorGain: Vector4

  @JsName("ColorOffset")
  public open var colorOffset: Vector4

  @JsName("ColorSaturationShadows")
  public open var colorSaturationShadows: Vector4

  @JsName("ColorContrastShadows")
  public open var colorContrastShadows: Vector4

  @JsName("ColorGammaShadows")
  public open var colorGammaShadows: Vector4

  @JsName("ColorGainShadows")
  public open var colorGainShadows: Vector4

  @JsName("ColorOffsetShadows")
  public open var colorOffsetShadows: Vector4

  @JsName("ColorSaturationMidtones")
  public open var colorSaturationMidtones: Vector4

  @JsName("ColorContrastMidtones")
  public open var colorContrastMidtones: Vector4

  @JsName("ColorGammaMidtones")
  public open var colorGammaMidtones: Vector4

  @JsName("ColorGainMidtones")
  public open var colorGainMidtones: Vector4

  @JsName("ColorOffsetMidtones")
  public open var colorOffsetMidtones: Vector4

  @JsName("ColorSaturationHighlights")
  public open var colorSaturationHighlights: Vector4

  @JsName("ColorContrastHighlights")
  public open var colorContrastHighlights: Vector4

  @JsName("ColorGammaHighlights")
  public open var colorGammaHighlights: Vector4

  @JsName("ColorGainHighlights")
  public open var colorGainHighlights: Vector4

  @JsName("ColorOffsetHighlights")
  public open var colorOffsetHighlights: Vector4

  @JsName("ColorCorrectionHighlightsMin")
  public open var colorCorrectionHighlightsMin: Number

  @JsName("ColorCorrectionHighlightsMax")
  public open var colorCorrectionHighlightsMax: Number

  @JsName("ColorCorrectionShadowsMax")
  public open var colorCorrectionShadowsMax: Number

  @JsName("BlueCorrection")
  public open var blueCorrection: Number

  @JsName("ExpandGamut")
  public open var expandGamut: Number

  @JsName("ToneCurveAmount")
  public open var toneCurveAmount: Number

  @JsName("FilmSlope")
  public open var filmSlope: Number

  @JsName("FilmToe")
  public open var filmToe: Number

  @JsName("FilmShoulder")
  public open var filmShoulder: Number

  @JsName("FilmBlackClip")
  public open var filmBlackClip: Number

  @JsName("FilmWhiteClip")
  public open var filmWhiteClip: Number

  @JsName("SceneColorTint")
  public open var sceneColorTint: LinearColor

  @JsName("SceneFringeIntensity")
  public open var sceneFringeIntensity: Number

  @JsName("ChromaticAberrationStartOffset")
  public open var chromaticAberrationStartOffset: Number

  @JsName("BloomIntensity")
  public open var bloomIntensity: Number

  @JsName("BloomThreshold")
  public open var bloomThreshold: Number

  @JsName("BloomSizeScale")
  public open var bloomSizeScale: Number

  @JsName("Bloom1Size")
  public open var bloom1Size: Number

  @JsName("Bloom2Size")
  public open var bloom2Size: Number

  @JsName("Bloom3Size")
  public open var bloom3Size: Number

  @JsName("Bloom4Size")
  public open var bloom4Size: Number

  @JsName("Bloom5Size")
  public open var bloom5Size: Number

  @JsName("Bloom6Size")
  public open var bloom6Size: Number

  @JsName("Bloom1Tint")
  public open var bloom1Tint: LinearColor

  @JsName("Bloom2Tint")
  public open var bloom2Tint: LinearColor

  @JsName("Bloom3Tint")
  public open var bloom3Tint: LinearColor

  @JsName("Bloom4Tint")
  public open var bloom4Tint: LinearColor

  @JsName("Bloom5Tint")
  public open var bloom5Tint: LinearColor

  @JsName("Bloom6Tint")
  public open var bloom6Tint: LinearColor

  @JsName("BloomConvolutionScatterDispersion")
  public open var bloomConvolutionScatterDispersion: Number

  @JsName("BloomConvolutionSize")
  public open var bloomConvolutionSize: Number

  @JsName("BloomConvolutionTexture")
  public open var bloomConvolutionTexture: Texture2d

  @JsName("BloomConvolutionCenterUV")
  public open var bloomConvolutionCenterUv: Vector2d

  @JsName("BloomConvolutionPreFilter")
  public open var bloomConvolutionPreFilter: Vector3f

  @JsName("BloomConvolutionPreFilterMin")
  public open var bloomConvolutionPreFilterMin: Number

  @JsName("BloomConvolutionPreFilterMax")
  public open var bloomConvolutionPreFilterMax: Number

  @JsName("BloomConvolutionPreFilterMult")
  public open var bloomConvolutionPreFilterMult: Number

  @JsName("BloomConvolutionBufferScale")
  public open var bloomConvolutionBufferScale: Number

  @JsName("BloomDirtMask")
  public open var bloomDirtMask: Texture

  @JsName("BloomDirtMaskIntensity")
  public open var bloomDirtMaskIntensity: Number

  @JsName("BloomDirtMaskTint")
  public open var bloomDirtMaskTint: LinearColor

  @JsName("DynamicGlobalIlluminationMethod")
  public open var dynamicGlobalIlluminationMethod: String

  @JsName("IndirectLightingColor")
  public open var indirectLightingColor: LinearColor

  @JsName("IndirectLightingIntensity")
  public open var indirectLightingIntensity: Number

  @JsName("RayTracingGI")
  public open var rayTracingGi: Boolean

  @JsName("LumenSceneLightingQuality")
  public open var lumenSceneLightingQuality: Number

  @JsName("LumenSceneDetail")
  public open var lumenSceneDetail: Number

  @JsName("LumenSceneViewDistance")
  public open var lumenSceneViewDistance: Number

  @JsName("LumenSceneLightingUpdateSpeed")
  public open var lumenSceneLightingUpdateSpeed: Number

  @JsName("LumenFinalGatherQuality")
  public open var lumenFinalGatherQuality: Number

  @JsName("LumenFinalGatherLightingUpdateSpeed")
  public open var lumenFinalGatherLightingUpdateSpeed: Number

  @JsName("LumenMaxTraceDistance")
  public open var lumenMaxTraceDistance: Number

  @JsName("RayTracingGIType")
  public open var rayTracingGiType: String

  @JsName("RayTracingGIMaxBounces")
  public open var rayTracingGiMaxBounces: Number

  @JsName("RayTracingGISamplesPerPixel")
  public open var rayTracingGiSamplesPerPixel: Number

  @JsName("ReflectionMethod")
  public open var reflectionMethod: String

  @JsName("ReflectionsType")
  public open var reflectionsType: String

  @JsName("LumenReflectionQuality")
  public open var lumenReflectionQuality: Number

  @JsName("LumenRayLightingMode")
  public open var lumenRayLightingMode: String

  @JsName("ScreenSpaceReflectionIntensity")
  public open var screenSpaceReflectionIntensity: Number

  @JsName("ScreenSpaceReflectionQuality")
  public open var screenSpaceReflectionQuality: Number

  @JsName("ScreenSpaceReflectionMaxRoughness")
  public open var screenSpaceReflectionMaxRoughness: Number

  @JsName("RayTracingReflectionsMaxRoughness")
  public open var rayTracingReflectionsMaxRoughness: Number

  @JsName("RayTracingReflectionsMaxBounces")
  public open var rayTracingReflectionsMaxBounces: Number

  @JsName("RayTracingReflectionsSamplesPerPixel")
  public open var rayTracingReflectionsSamplesPerPixel: Number

  @JsName("RayTracingReflectionsShadows")
  public open var rayTracingReflectionsShadows: String

  @JsName("RayTracingReflectionsTranslucency")
  public open var rayTracingReflectionsTranslucency: Boolean

  @JsName("AmbientCubemapTint")
  public open var ambientCubemapTint: LinearColor

  @JsName("AmbientCubemapIntensity")
  public open var ambientCubemapIntensity: Number

  @JsName("AmbientCubemap")
  public open var ambientCubemap: TextureCube

  @JsName("CameraShutterSpeed")
  public open var cameraShutterSpeed: Number

  @JsName("CameraISO")
  public open var cameraIso: Number

  @JsName("DepthOfFieldFstop")
  public open var depthOfFieldFstop: Number

  @JsName("DepthOfFieldMinFstop")
  public open var depthOfFieldMinFstop: Number

  @JsName("DepthOfFieldBladeCount")
  public open var depthOfFieldBladeCount: Number

  @JsName("AutoExposureBias")
  public open var autoExposureBias: Number

  @JsName("AutoExposureBiasBackup")
  public open var autoExposureBiasBackup: Number

  @JsName("bOverride_AutoExposureBiasBackup")
  public open var overrideAutoExposureBiasBackup: Boolean

  @JsName("AutoExposureApplyPhysicalCameraExposure")
  public open var autoExposureApplyPhysicalCameraExposure: Boolean

  @JsName("AutoExposureBiasCurve")
  public open var autoExposureBiasCurve: CurveFloat

  @JsName("AutoExposureMeterMask")
  public open var autoExposureMeterMask: Texture

  @JsName("AutoExposureLowPercent")
  public open var autoExposureLowPercent: Number

  @JsName("AutoExposureHighPercent")
  public open var autoExposureHighPercent: Number

  @JsName("AutoExposureMinBrightness")
  public open var autoExposureMinBrightness: Number

  @JsName("AutoExposureMaxBrightness")
  public open var autoExposureMaxBrightness: Number

  @JsName("AutoExposureSpeedUp")
  public open var autoExposureSpeedUp: Number

  @JsName("AutoExposureSpeedDown")
  public open var autoExposureSpeedDown: Number

  @JsName("HistogramLogMin")
  public open var histogramLogMin: Number

  @JsName("HistogramLogMax")
  public open var histogramLogMax: Number

  @JsName("AutoExposureCalibrationConstant")
  public open var autoExposureCalibrationConstant: Number

  @JsName("LocalExposureContrastScale")
  public open var localExposureContrastScale: Number

  @JsName("LocalExposureDetailStrength")
  public open var localExposureDetailStrength: Number

  @JsName("LocalExposureBlurredLuminanceBlend")
  public open var localExposureBlurredLuminanceBlend: Number

  @JsName("LocalExposureBlurredLuminanceKernelSizePercent")
  public open var localExposureBlurredLuminanceKernelSizePercent: Number

  @JsName("LocalExposureMiddleGreyBias")
  public open var localExposureMiddleGreyBias: Number

  @JsName("LensFlareIntensity")
  public open var lensFlareIntensity: Number

  @JsName("LensFlareTint")
  public open var lensFlareTint: LinearColor

  @JsName("LensFlareBokehSize")
  public open var lensFlareBokehSize: Number

  @JsName("LensFlareThreshold")
  public open var lensFlareThreshold: Number

  @JsName("LensFlareBokehShape")
  public open var lensFlareBokehShape: Texture

  @JsName("LensFlareTints")
  public open var lensFlareTints: LinearColor

  @JsName("VignetteIntensity")
  public open var vignetteIntensity: Number

  @JsName("GrainJitter")
  public open var grainJitter: Number

  @JsName("GrainIntensity")
  public open var grainIntensity: Number

  @JsName("FilmGrainIntensity")
  public open var filmGrainIntensity: Number

  @JsName("FilmGrainIntensityShadows")
  public open var filmGrainIntensityShadows: Number

  @JsName("FilmGrainIntensityMidtones")
  public open var filmGrainIntensityMidtones: Number

  @JsName("FilmGrainIntensityHighlights")
  public open var filmGrainIntensityHighlights: Number

  @JsName("FilmGrainShadowsMax")
  public open var filmGrainShadowsMax: Number

  @JsName("FilmGrainHighlightsMin")
  public open var filmGrainHighlightsMin: Number

  @JsName("FilmGrainHighlightsMax")
  public open var filmGrainHighlightsMax: Number

  @JsName("FilmGrainTexelSize")
  public open var filmGrainTexelSize: Number

  @JsName("FilmGrainTexture")
  public open var filmGrainTexture: Texture2d

  @JsName("AmbientOcclusionIntensity")
  public open var ambientOcclusionIntensity: Number

  @JsName("AmbientOcclusionStaticFraction")
  public open var ambientOcclusionStaticFraction: Number

  @JsName("AmbientOcclusionRadius")
  public open var ambientOcclusionRadius: Number

  @JsName("AmbientOcclusionRadiusInWS")
  public open var ambientOcclusionRadiusInWs: Boolean

  @JsName("AmbientOcclusionFadeDistance")
  public open var ambientOcclusionFadeDistance: Number

  @JsName("AmbientOcclusionFadeRadius")
  public open var ambientOcclusionFadeRadius: Number

  @JsName("AmbientOcclusionDistance")
  public open var ambientOcclusionDistance: Number

  @JsName("AmbientOcclusionPower")
  public open var ambientOcclusionPower: Number

  @JsName("AmbientOcclusionBias")
  public open var ambientOcclusionBias: Number

  @JsName("AmbientOcclusionQuality")
  public open var ambientOcclusionQuality: Number

  @JsName("AmbientOcclusionMipBlend")
  public open var ambientOcclusionMipBlend: Number

  @JsName("AmbientOcclusionMipScale")
  public open var ambientOcclusionMipScale: Number

  @JsName("AmbientOcclusionMipThreshold")
  public open var ambientOcclusionMipThreshold: Number

  @JsName("AmbientOcclusionTemporalBlendWeight")
  public open var ambientOcclusionTemporalBlendWeight: Number

  @JsName("RayTracingAO")
  public open var rayTracingAo: Boolean

  @JsName("RayTracingAOSamplesPerPixel")
  public open var rayTracingAoSamplesPerPixel: Number

  @JsName("RayTracingAOIntensity")
  public open var rayTracingAoIntensity: Number

  @JsName("RayTracingAORadius")
  public open var rayTracingAoRadius: Number

  @JsName("ColorGradingIntensity")
  public open var colorGradingIntensity: Number

  @JsName("ColorGradingLUT")
  public open var colorGradingLut: Texture

  @JsName("DepthOfFieldSensorWidth")
  public open var depthOfFieldSensorWidth: Number

  @JsName("DepthOfFieldFocalDistance")
  public open var depthOfFieldFocalDistance: Number

  @JsName("DepthOfFieldDepthBlurAmount")
  public open var depthOfFieldDepthBlurAmount: Number

  @JsName("DepthOfFieldDepthBlurRadius")
  public open var depthOfFieldDepthBlurRadius: Number

  @JsName("DepthOfFieldFocalRegion")
  public open var depthOfFieldFocalRegion: Number

  @JsName("DepthOfFieldNearTransitionRegion")
  public open var depthOfFieldNearTransitionRegion: Number

  @JsName("DepthOfFieldFarTransitionRegion")
  public open var depthOfFieldFarTransitionRegion: Number

  @JsName("DepthOfFieldScale")
  public open var depthOfFieldScale: Number

  @JsName("DepthOfFieldNearBlurSize")
  public open var depthOfFieldNearBlurSize: Number

  @JsName("DepthOfFieldFarBlurSize")
  public open var depthOfFieldFarBlurSize: Number

  @JsName("DepthOfFieldOcclusion")
  public open var depthOfFieldOcclusion: Number

  @JsName("DepthOfFieldSkyFocusDistance")
  public open var depthOfFieldSkyFocusDistance: Number

  @JsName("DepthOfFieldVignetteSize")
  public open var depthOfFieldVignetteSize: Number

  @JsName("MotionBlurAmount")
  public open var motionBlurAmount: Number

  @JsName("MotionBlurMax")
  public open var motionBlurMax: Number

  @JsName("MotionBlurTargetFPS")
  public open var motionBlurTargetFps: Number

  @JsName("MotionBlurPerObjectSize")
  public open var motionBlurPerObjectSize: Number

  @JsName("LPVIntensity")
  public open var lpvIntensity: Number

  @JsName("LPVVplInjectionBias")
  public open var lpvVplInjectionBias: Number

  @JsName("LPVSize")
  public open var lpvSize: Number

  @JsName("LPVSecondaryOcclusionIntensity")
  public open var lpvSecondaryOcclusionIntensity: Number

  @JsName("LPVSecondaryBounceIntensity")
  public open var lpvSecondaryBounceIntensity: Number

  @JsName("LPVGeometryVolumeBias")
  public open var lpvGeometryVolumeBias: Number

  @JsName("LPVEmissiveInjectionIntensity")
  public open var lpvEmissiveInjectionIntensity: Number

  @JsName("LPVDirectionalOcclusionIntensity")
  public open var lpvDirectionalOcclusionIntensity: Number

  @JsName("LPVDirectionalOcclusionRadius")
  public open var lpvDirectionalOcclusionRadius: Number

  @JsName("LPVDiffuseOcclusionExponent")
  public open var lpvDiffuseOcclusionExponent: Number

  @JsName("LPVSpecularOcclusionExponent")
  public open var lpvSpecularOcclusionExponent: Number

  @JsName("LPVDiffuseOcclusionIntensity")
  public open var lpvDiffuseOcclusionIntensity: Number

  @JsName("LPVSpecularOcclusionIntensity")
  public open var lpvSpecularOcclusionIntensity: Number

  @JsName("TranslucencyType")
  public open var translucencyType: String

  @JsName("RayTracingTranslucencyMaxRoughness")
  public open var rayTracingTranslucencyMaxRoughness: Number

  @JsName("RayTracingTranslucencyRefractionRays")
  public open var rayTracingTranslucencyRefractionRays: Number

  @JsName("RayTracingTranslucencySamplesPerPixel")
  public open var rayTracingTranslucencySamplesPerPixel: Number

  @JsName("RayTracingTranslucencyShadows")
  public open var rayTracingTranslucencyShadows: String

  @JsName("RayTracingTranslucencyRefraction")
  public open var rayTracingTranslucencyRefraction: Boolean

  @JsName("PathTracingMaxBounces")
  public open var pathTracingMaxBounces: Number

  @JsName("PathTracingSamplesPerPixel")
  public open var pathTracingSamplesPerPixel: Number

  @JsName("PathTracingFilterWidth")
  public open var pathTracingFilterWidth: Number

  @JsName("PathTracingEnableEmissive")
  public open var pathTracingEnableEmissive: Boolean

  @JsName("PathTracingMaxPathExposure")
  public open var pathTracingMaxPathExposure: Number

  @JsName("PathTracingEnableReferenceDOF")
  public open var pathTracingEnableReferenceDof: Boolean

  @JsName("PathTracingEnableDenoiser")
  public open var pathTracingEnableDenoiser: Boolean

  @JsName("LPVFadeRange")
  public open var lpvFadeRange: Number

  @JsName("LPVDirectionalOcclusionFadeRange")
  public open var lpvDirectionalOcclusionFadeRange: Number

  @JsName("ScreenPercentage")
  public open var screenPercentage: Number

  @JsName("WeightedBlendables")
  public open var weightedBlendables: WeightedBlendables

  @JsName("Blendables")
  public open var blendables: Array<UObject>

  public open fun clone(): PostProcessSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PostProcessSettings

    @JsName("C")
    public fun copy(other: Any): PostProcessSettings
  }
}

@JsName("T$199")
public external interface Object199 {
  @JsName("ViewMatrix")
  public var viewMatrix: Matrix

  @JsName("ProjectionMatrix")
  public var projectionMatrix: Matrix

  @JsName("ViewProjectionMatrix")
  public var viewProjectionMatrix: Matrix
}

public open external class MinimalViewInfo {
  @JsName("Location")
  public open var location: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  public open var FOV: Number

  @JsName("DesiredFOV")
  public open var desiredFov: Number

  @JsName("OrthoWidth")
  public open var orthoWidth: Number

  @JsName("OrthoNearClipPlane")
  public open var orthoNearClipPlane: Number

  @JsName("OrthoFarClipPlane")
  public open var orthoFarClipPlane: Number

  @JsName("AspectRatio")
  public open var aspectRatio: Number

  @JsName("bConstrainAspectRatio")
  public open var constrainAspectRatio: Boolean

  @JsName("bUseFieldOfViewForLOD")
  public open var useFieldOfViewForLod: Boolean

  @JsName("ProjectionMode")
  public open var projectionMode: String

  @JsName("PostProcessBlendWeight")
  public open var postProcessBlendWeight: Number

  @JsName("PostProcessSettings")
  public open var postProcessSettings: PostProcessSettings

  @JsName("OffCenterProjectionOffset")
  public open var offCenterProjectionOffset: Vector2d

  public open fun clone(): MinimalViewInfo

  @JsName("CalculateProjectionMatrix")
  public open fun calculateProjectionMatrix(): Matrix

  @JsName("GetViewProjectionMatrix")
  public open fun getViewProjectionMatrix(
    viewMatrix: Matrix,
    projectionMatrix: Matrix,
    viewProjectionMatrix: Matrix,
  ): Object199

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MinimalViewInfo

    @JsName("C")
    public fun copy(other: Any): MinimalViewInfo

    @JsName("CalculateProjectionMatrix")
    public fun calculateProjectionMatrix(minimalViewInfo: MinimalViewInfo): Matrix

    @JsName("GetViewProjectionMatrix")
    public fun getViewProjectionMatrix(
      desiredView: MinimalViewInfo,
      viewMatrix: Matrix,
      projectionMatrix: Matrix,
      viewProjectionMatrix: Matrix,
    ): Object199
  }
}

public open external class CameraCacheEntry {
  @JsName("Timestamp")
  public open var timestamp: Number

  public open var POV: MinimalViewInfo

  public open fun clone(): CameraCacheEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraCacheEntry

    @JsName("C")
    public fun copy(other: Any): CameraCacheEntry
  }
}

public open external class TViewTarget {
  @JsName("Target")
  public open var target: Actor

  public open var POV: MinimalViewInfo

  @JsName("PlayerState")
  public open var playerState: PlayerState

  public open fun clone(): TViewTarget

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TViewTarget

    @JsName("C")
    public fun copy(other: Any): TViewTarget
  }
}

@JsName("T$200")
public external interface Object200 {
  @JsName("PostProcessBlendWeight")
  public var postProcessBlendWeight: Number

  @JsName("PostProcessSettings")
  public var postProcessSettings: PostProcessSettings
}

@JsName("T$201")
public external interface Object201 {
  @JsName("NewViewLocation")
  public var newViewLocation: Vector

  @JsName("NewViewRotation")
  public var newViewRotation: Rotator

  @JsName("NewFOV")
  public var newFov: Number
}

public open external class CameraModifier(
  outer: UObject,
) : UObject {
  @JsName("bDebug")
  public open var debug: Boolean

  @JsName("bExclusive")
  public open var exclusive: Boolean

  @JsName("Priority")
  public open var priority: Number

  @JsName("CameraOwner")
  public open var cameraOwner: PlayerCameraManager

  @JsName("AlphaInTime")
  public open var alphaInTime: Number

  @JsName("AlphaOutTime")
  public open var alphaOutTime: Number

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("OnCameraOwnerDestroyed")
  public open fun onCameraOwnerDestroyed(inOwner: Actor): Unit

  @JsName("IsDisabled")
  public open fun isDisabled(): Boolean

  @JsName("GetViewTarget")
  public open fun getViewTarget(): Actor

  @JsName("EnableModifier")
  public open fun enableModifier(): Unit

  @JsName("DisableModifier")
  public open fun disableModifier(immediate: Boolean): Unit

  @JsName("BlueprintModifyPostProcess")
  public open fun blueprintModifyPostProcess(
    deltaTime: Number,
    postProcessBlendWeight: Number,
    postProcessSettings: PostProcessSettings,
  ): Object200

  @JsName("BlueprintModifyCamera")
  public open fun blueprintModifyCamera(
    deltaTime: Number,
    viewLocation: Vector,
    viewRotation: Rotator,
    FOV: Number,
    newViewLocation: Vector,
    newViewRotation: Rotator,
    newFov: Number,
  ): Object201

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraModifier

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraModifier

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraModifier

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraModifier

    @JsName("C")
    public fun copy(other: UObject): CameraModifier

    @JsName("C")
    public fun copy(other: Any): CameraModifier
  }
}

public open external class CameraShakePattern(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraShakePattern

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraShakePattern

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraShakePattern

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraShakePattern

    @JsName("C")
    public fun copy(other: UObject): CameraShakePattern

    @JsName("C")
    public fun copy(other: Any): CameraShakePattern
  }
}

@JsName("EInitialOscillatorOffset")
public external object InitialOscillatorOffset {
  @JsName("EOO_OffsetRandom")
  public var OffsetRandom: String

  @JsName("EOO_OffsetZero")
  public var OffsetZero: String

  @JsName("EOO_MAX")
  public var Max: String
}

@JsName("EOscillatorWaveform")
public external object OscillatorWaveform {
  public var SineWave: String

  public var PerlinNoise: String

  @JsName("EOscillatorWaveform_MAX")
  public var Max: String
}

public open external class FOscillator {
  @JsName("Amplitude")
  public open var amplitude: Number

  @JsName("Frequency")
  public open var frequency: Number

  @JsName("InitialOffset")
  public open var initialOffset: String

  @JsName("Waveform")
  public open var waveform: String

  public open fun clone(): FOscillator

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FOscillator

    @JsName("C")
    public fun copy(other: Any): FOscillator
  }
}

public open external class ROscillator {
  @JsName("Pitch")
  public open var pitch: FOscillator

  @JsName("Yaw")
  public open var yaw: FOscillator

  @JsName("Roll")
  public open var roll: FOscillator

  public open fun clone(): ROscillator

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ROscillator

    @JsName("C")
    public fun copy(other: Any): ROscillator
  }
}

public open external class VOscillator {
  @JsName("X")
  public open var x: FOscillator

  @JsName("Y")
  public open var y: FOscillator

  @JsName("Z")
  public open var z: FOscillator

  public open fun clone(): VOscillator

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VOscillator

    @JsName("C")
    public fun copy(other: Any): VOscillator
  }
}

public open external class SubTrackGroup {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("TrackIndices")
  public open var trackIndices: Array<Number>

  @JsName("bIsCollapsed")
  public open var isCollapsed: Boolean

  @JsName("bIsSelected")
  public open var isSelected: Boolean

  public open fun clone(): SubTrackGroup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubTrackGroup

    @JsName("C")
    public fun copy(other: Any): SubTrackGroup
  }
}

public open external class SupportedSubTrackInfo {
  @JsName("SupportedClass")
  public open var supportedClass: UnrealEngineClass

  @JsName("SubTrackName")
  public open var subTrackName: String

  @JsName("GroupIndex")
  public open var groupIndex: Number

  public open fun clone(): SupportedSubTrackInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SupportedSubTrackInfo

    @JsName("C")
    public fun copy(other: Any): SupportedSubTrackInfo
  }
}

@JsName("ETrackActiveCondition")
public external object TrackActiveCondition {
  @JsName("ETAC_Always")
  public var Always: String

  @JsName("ETAC_GoreEnabled")
  public var GoreEnabled: String

  @JsName("ETAC_GoreDisabled")
  public var GoreDisabled: String

  @JsName("ETAC_MAX")
  public var Max: String
}

public open external class InterpTrack(
  outer: UObject,
) : UObject {
  @JsName("SubTracks")
  public open var subTracks: Array<InterpTrack>

  @JsName("SubTrackGroups")
  public open var subTrackGroups: Array<SubTrackGroup>

  @JsName("SupportedSubTracks")
  public open var supportedSubTracks: Array<SupportedSubTrackInfo>

  @JsName("TrackInstClass")
  public open var trackInstClass: UnrealEngineClass

  @JsName("ActiveCondition")
  public open var activeCondition: String

  @JsName("TrackTitle")
  public open var trackTitle: String

  @JsName("bOnePerGroup")
  public open var onePerGroup: Boolean

  @JsName("bDirGroupOnly")
  public open var dirGroupOnly: Boolean

  @JsName("bDisableTrack")
  public open var disableTrack: Boolean

  @JsName("bIsSelected")
  public open var isSelected: Boolean

  @JsName("TrackIcon")
  public open var trackIcon: Texture2d

  @JsName("bIsAnimControlTrack")
  public open var isAnimControlTrack: Boolean

  @JsName("bSubTrackOnly")
  public open var subTrackOnly: Boolean

  @JsName("bVisible")
  public open var visible: Boolean

  @JsName("bIsRecording")
  public open var isRecording: Boolean

  @JsName("bIsCollapsed")
  public open var isCollapsed: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrack

    @JsName("C")
    public fun copy(other: UObject): InterpTrack

    @JsName("C")
    public fun copy(other: Any): InterpTrack
  }
}

public open external class InterpGroup(
  outer: UObject,
) : UObject {
  @JsName("InterpTracks")
  public open var interpTracks: Array<InterpTrack>

  @JsName("GroupName")
  public open var groupName: String

  @JsName("GroupColor")
  public open var groupColor: Color

  @JsName("bCollapsed")
  public open var collapsed: Boolean

  @JsName("bVisible")
  public open var visible: Boolean

  @JsName("bIsFolder")
  public open var isFolder: Boolean

  @JsName("bIsParented")
  public open var isParented: Boolean

  @JsName("bIsSelected")
  public open var isSelected: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpGroup

    @JsName("C")
    public fun copy(other: UObject): InterpGroup

    @JsName("C")
    public fun copy(other: Any): InterpGroup
  }
}

public open external class CameraAnim(
  outer: UObject,
) : UObject {
  @JsName("CameraInterpGroup")
  public open var cameraInterpGroup: InterpGroup

  @JsName("PreviewInterpGroup")
  public open var previewInterpGroup: InterpGroup

  @JsName("AnimLength")
  public open var animLength: Number

  @JsName("BoundingBox")
  public open var boundingBox: Box

  @JsName("bRelativeToInitialTransform")
  public open var relativeToInitialTransform: Boolean

  @JsName("bRelativeToInitialFOV")
  public open var relativeToInitialFov: Boolean

  @JsName("BaseFOV")
  public open var baseFov: Number

  @JsName("BasePostProcessSettings")
  public open var basePostProcessSettings: PostProcessSettings

  @JsName("BasePostProcessBlendWeight")
  public open var basePostProcessBlendWeight: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraAnim

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraAnim

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraAnim

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraAnim

    @JsName("C")
    public fun copy(other: UObject): CameraAnim

    @JsName("C")
    public fun copy(other: Any): CameraAnim
  }
}

public open external class MovieSceneSignedObject(
  outer: UObject,
) : UObject {
  @JsName("Signature")
  public open var signature: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSignedObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSignedObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSignedObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSignedObject

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSignedObject

    @JsName("C")
    public fun copy(other: Any): MovieSceneSignedObject
  }
}

public open external class MovieSceneEvaluationTemplateSerialNumber {
  @JsName("Value")
  public open var value: Any

  public open fun clone(): MovieSceneEvaluationTemplateSerialNumber

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationTemplateSerialNumber

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationTemplateSerialNumber
  }
}

public open external class MovieSceneTrackIdentifier {
  @JsName("Value")
  public open var value: Any

  public open fun clone(): MovieSceneTrackIdentifier

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackIdentifier

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackIdentifier
  }
}

public open external class MovieSceneTemplateGenerationLedger {
  @JsName("LastTrackIdentifier")
  public open var lastTrackIdentifier: MovieSceneTrackIdentifier

  @JsName("TrackSignatureToTrackIdentifier")
  public open var trackSignatureToTrackIdentifier: Any

  @JsName("SubSectionRanges")
  public open var subSectionRanges: Any

  public open fun clone(): MovieSceneTemplateGenerationLedger

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTemplateGenerationLedger

    @JsName("C")
    public fun copy(other: Any): MovieSceneTemplateGenerationLedger
  }
}

public open external class MovieSceneEvaluationTemplate {
  @JsName("Tracks")
  public open var tracks: Any

  @JsName("SequenceSignature")
  public open var sequenceSignature: Guid

  @JsName("TemplateSerialNumber")
  public open var templateSerialNumber: MovieSceneEvaluationTemplateSerialNumber

  @JsName("TemplateLedger")
  public open var templateLedger: MovieSceneTemplateGenerationLedger

  public open fun clone(): MovieSceneEvaluationTemplate

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationTemplate

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationTemplate
  }
}

@JsName("MovieSceneSequenceID")
public open external class MovieSceneSequenceId {
  @JsName("Value")
  public open var value: Any

  public open fun clone(): MovieSceneSequenceId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceId

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceId
  }
}

public open external class MovieSceneSequenceHierarchyNode {
  @JsName("ParentID")
  public open var parentId: MovieSceneSequenceId

  @JsName("Children")
  public open var children: Array<MovieSceneSequenceId>

  public open fun clone(): MovieSceneSequenceHierarchyNode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceHierarchyNode

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceHierarchyNode
  }
}

public open external class MovieSceneSubSequenceTree {
  public open fun clone(): MovieSceneSubSequenceTree

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSubSequenceTree

    @JsName("C")
    public fun copy(other: Any): MovieSceneSubSequenceTree
  }
}

public open external class MovieSceneSequenceHierarchy {
  @JsName("RootNode")
  public open var rootNode: MovieSceneSequenceHierarchyNode

  @JsName("Tree")
  public open var tree: MovieSceneSubSequenceTree

  @JsName("SubSequences")
  public open var subSequences: Any

  @JsName("Hierarchy")
  public open var hierarchy: Any

  public open fun clone(): MovieSceneSequenceHierarchy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceHierarchy

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceHierarchy
  }
}

public open external class MovieSceneEvaluationFieldEntityTree {
  public open fun clone(): MovieSceneEvaluationFieldEntityTree

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationFieldEntityTree

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationFieldEntityTree
  }
}

public open external class MovieSceneEvaluationFieldEntityKey {
  @JsName("EntityOwner")
  public open var entityOwner: Any

  @JsName("EntityID")
  public open var entityId: Any

  public open fun clone(): MovieSceneEvaluationFieldEntityKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationFieldEntityKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationFieldEntityKey
  }
}

public open external class MovieSceneEvaluationFieldEntity {
  @JsName("Key")
  public open var key: MovieSceneEvaluationFieldEntityKey

  @JsName("SharedMetaDataIndex")
  public open var sharedMetaDataIndex: Number

  public open fun clone(): MovieSceneEvaluationFieldEntity

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationFieldEntity

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationFieldEntity
  }
}

@JsName("ESectionEvaluationFlags")
public external object SectionEvaluationFlags {
  public var None: String

  public var PreRoll: String

  public var PostRoll: String

  @JsName("ESectionEvaluationFlags_MAX")
  public var Max: String
}

public open external class MovieSceneEvaluationFieldEntityMetaData {
  @JsName("OverrideBoundPropertyPath")
  public open var overrideBoundPropertyPath: String

  @JsName("ForcedTime")
  public open var forcedTime: FrameNumber

  @JsName("Flags")
  public open var flags: String

  @JsName("bEvaluateInSequencePreRoll")
  public open var evaluateInSequencePreRoll: Boolean

  @JsName("bEvaluateInSequencePostRoll")
  public open var evaluateInSequencePostRoll: Boolean

  public open fun clone(): MovieSceneEvaluationFieldEntityMetaData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationFieldEntityMetaData

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationFieldEntityMetaData
  }
}

public open external class MovieSceneEvaluationFieldSharedEntityMetaData {
  @JsName("ObjectBindingID")
  public open var objectBindingId: Guid

  public open fun clone(): MovieSceneEvaluationFieldSharedEntityMetaData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationFieldSharedEntityMetaData

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationFieldSharedEntityMetaData
  }
}

public open external class MovieSceneEntityComponentField {
  @JsName("PersistentEntityTree")
  public open var persistentEntityTree: MovieSceneEvaluationFieldEntityTree

  @JsName("OneShotEntityTree")
  public open var oneShotEntityTree: MovieSceneEvaluationFieldEntityTree

  @JsName("Entities")
  public open var entities: Array<MovieSceneEvaluationFieldEntity>

  @JsName("EntityMetaData")
  public open var entityMetaData: Array<MovieSceneEvaluationFieldEntityMetaData>

  @JsName("SharedMetaData")
  public open var sharedMetaData: Array<MovieSceneEvaluationFieldSharedEntityMetaData>

  public open fun clone(): MovieSceneEntityComponentField

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEntityComponentField

    @JsName("C")
    public fun copy(other: Any): MovieSceneEntityComponentField
  }
}

public open external class MovieSceneFrameRange {
  public open fun clone(): MovieSceneFrameRange

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneFrameRange

    @JsName("C")
    public fun copy(other: Any): MovieSceneFrameRange
  }
}

@JsName("MovieSceneEvaluationGroupLUTIndex")
public open external class MovieSceneEvaluationGroupLutIndex {
  @JsName("NumInitPtrs")
  public open var numInitPtrs: Number

  @JsName("NumEvalPtrs")
  public open var numEvalPtrs: Number

  public open fun clone(): MovieSceneEvaluationGroupLutIndex

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationGroupLutIndex

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationGroupLutIndex
  }
}

public open external class MovieSceneEvaluationFieldTrackPtr {
  @JsName("SequenceID")
  public open var sequenceId: MovieSceneSequenceId

  @JsName("TrackIdentifier")
  public open var trackIdentifier: MovieSceneTrackIdentifier

  public open fun clone(): MovieSceneEvaluationFieldTrackPtr

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationFieldTrackPtr

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationFieldTrackPtr
  }
}

@JsName("MovieSceneFieldEntry_EvaluationTrack")
public open external class MovieSceneFieldEntryEvaluationTrack {
  @JsName("TrackPtr")
  public open var trackPtr: MovieSceneEvaluationFieldTrackPtr

  @JsName("NumChildren")
  public open var numChildren: Any

  public open fun clone(): MovieSceneFieldEntryEvaluationTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneFieldEntryEvaluationTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneFieldEntryEvaluationTrack
  }
}

@JsName("MovieSceneFieldEntry_ChildTemplate")
public open external class MovieSceneFieldEntryChildTemplate {
  @JsName("ChildIndex")
  public open var childIndex: Any

  @JsName("Flags")
  public open var flags: String

  @JsName("ForcedTime")
  public open var forcedTime: FrameNumber

  public open fun clone(): MovieSceneFieldEntryChildTemplate

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneFieldEntryChildTemplate

    @JsName("C")
    public fun copy(other: Any): MovieSceneFieldEntryChildTemplate
  }
}

public open external class MovieSceneEvaluationGroup {
  @JsName("LUTIndices")
  public open var lutIndices: Array<MovieSceneEvaluationGroupLutIndex>

  @JsName("TrackLUT")
  public open var trackLut: Array<MovieSceneFieldEntryEvaluationTrack>

  @JsName("SectionLUT")
  public open var sectionLut: Array<MovieSceneFieldEntryChildTemplate>

  public open fun clone(): MovieSceneEvaluationGroup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationGroup

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationGroup
  }
}

public open external class MovieSceneEvaluationKey {
  @JsName("SequenceID")
  public open var sequenceId: MovieSceneSequenceId

  @JsName("TrackIdentifier")
  public open var trackIdentifier: MovieSceneTrackIdentifier

  @JsName("SectionIndex")
  public open var sectionIndex: Any

  public open fun clone(): MovieSceneEvaluationKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationKey
  }
}

public open external class MovieSceneOrderedEvaluationKey {
  @JsName("Key")
  public open var key: MovieSceneEvaluationKey

  @JsName("SetupIndex")
  public open var setupIndex: Any

  @JsName("TearDownIndex")
  public open var tearDownIndex: Any

  public open fun clone(): MovieSceneOrderedEvaluationKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneOrderedEvaluationKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneOrderedEvaluationKey
  }
}

public open external class MovieSceneEvaluationMetaData {
  @JsName("ActiveSequences")
  public open var activeSequences: Array<MovieSceneSequenceId>

  @JsName("ActiveEntities")
  public open var activeEntities: Array<MovieSceneOrderedEvaluationKey>

  public open fun clone(): MovieSceneEvaluationMetaData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationMetaData

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationMetaData
  }
}

public open external class MovieSceneEvaluationField {
  @JsName("Signature")
  public open var signature: Guid

  @JsName("Ranges")
  public open var ranges: Array<MovieSceneFrameRange>

  @JsName("Groups")
  public open var groups: Array<MovieSceneEvaluationGroup>

  @JsName("MetaData")
  public open var metaData: Array<MovieSceneEvaluationMetaData>

  public open fun clone(): MovieSceneEvaluationField

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvaluationField

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvaluationField
  }
}

public open external class MovieSceneSequenceCompilerMaskStruct {
  @JsName("bHierarchy")
  public open var hierarchy: Boolean

  @JsName("bEvaluationTemplate")
  public open var evaluationTemplate: Boolean

  @JsName("bEvaluationTemplateField")
  public open var evaluationTemplateField: Boolean

  @JsName("bEntityComponentField")
  public open var entityComponentField: Boolean

  public open fun clone(): MovieSceneSequenceCompilerMaskStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequenceCompilerMaskStruct

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequenceCompilerMaskStruct
  }
}

@JsName("EMovieSceneSequenceFlags")
public external object MovieSceneSequenceFlags {
  public var None: String

  public var Volatile: String

  public var BlockingEvaluation: String

  public var InheritedFlags: String

  @JsName("EMovieSceneSequenceFlags_MAX")
  public var Max: String
}

public open external class MovieSceneCompiledData(
  outer: UObject,
) : UObject {
  @JsName("EvaluationTemplate")
  public open var evaluationTemplate: MovieSceneEvaluationTemplate

  @JsName("Hierarchy")
  public open var hierarchy: MovieSceneSequenceHierarchy

  @JsName("EntityComponentField")
  public open var entityComponentField: MovieSceneEntityComponentField

  @JsName("TrackTemplateField")
  public open var trackTemplateField: MovieSceneEvaluationField

  @JsName("DeterminismFences")
  public open var determinismFences: Array<FrameTime>

  @JsName("CompiledSignature")
  public open var compiledSignature: Guid

  @JsName("CompilerVersion")
  public open var compilerVersion: Guid

  @JsName("AccumulatedMask")
  public open var accumulatedMask: MovieSceneSequenceCompilerMaskStruct

  @JsName("AllocatedMask")
  public open var allocatedMask: MovieSceneSequenceCompilerMaskStruct

  @JsName("AccumulatedFlags")
  public open var accumulatedFlags: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCompiledData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCompiledData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCompiledData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCompiledData

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCompiledData

    @JsName("C")
    public fun copy(other: Any): MovieSceneCompiledData
  }
}

@JsName("EMovieSceneCompletionMode")
public external object MovieSceneCompletionMode {
  public var KeepState: String

  public var RestoreState: String

  public var ProjectDefault: String

  @JsName("EMovieSceneCompletionMode_MAX")
  public var Max: String
}

public open external class Timecode {
  @JsName("Hours")
  public open var hours: Number

  @JsName("Minutes")
  public open var minutes: Number

  @JsName("Seconds")
  public open var seconds: Number

  @JsName("Frames")
  public open var frames: Number

  @JsName("bDropFrameFormat")
  public open var dropFrameFormat: Boolean

  public open fun clone(): Timecode

  @JsName("Conv_TimecodeToString")
  public open fun convertTimecodeToString(forceSignDisplay: Boolean): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Timecode

    @JsName("C")
    public fun copy(other: Any): Timecode

    @JsName("Conv_TimecodeToString")
    public fun convertTimecodeToString(inTimecode: Timecode, forceSignDisplay: Boolean): String

    @JsName("GetTimecode")
    public fun getTimecode(): Timecode
  }
}

public open external class MovieSceneTimecodeSource {
  @JsName("Timecode")
  public open var timecode: Timecode

  public open fun clone(): MovieSceneTimecodeSource

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTimecodeSource

    @JsName("C")
    public fun copy(other: Any): MovieSceneTimecodeSource
  }
}

@JsName("EMovieSceneObjectBindingSpace")
public external object MovieSceneObjectBindingSpace {
  public var Local: String

  public var Root: String

  public var Unused: String

  @JsName("EMovieSceneObjectBindingSpace_MAX")
  public var Max: String
}

@JsName("MovieSceneObjectBindingID")
public open external class MovieSceneObjectBindingId {
  @JsName("Guid")
  public open var guid: Guid

  @JsName("SequenceID")
  public open var sequenceId: Number

  @JsName("ResolveParentIndex")
  public open var resolveParentIndex: Number

  @JsName("Space")
  public open var space: String

  public open fun clone(): MovieSceneObjectBindingId

  @JsName("GetBoundObjects")
  public open fun getBoundObjects(): Array<UObject>

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneObjectBindingId

    @JsName("C")
    public fun copy(other: Any): MovieSceneObjectBindingId

    @JsName("GetBoundObjects")
    public fun getBoundObjects(objectBinding: MovieSceneObjectBindingId): Array<UObject>
  }
}

public open external class MovieSceneSectionEvalOptions {
  @JsName("bCanEditCompletionMode")
  public open var canEditCompletionMode: Boolean

  @JsName("CompletionMode")
  public open var completionMode: String

  public open fun clone(): MovieSceneSectionEvalOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSectionEvalOptions

    @JsName("C")
    public fun copy(other: Any): MovieSceneSectionEvalOptions
  }
}

public open external class MovieSceneEasingSettings {
  @JsName("AutoEaseInDuration")
  public open var autoEaseInDuration: Number

  @JsName("AutoEaseOutDuration")
  public open var autoEaseOutDuration: Number

  @JsName("EaseIn")
  public open var easeIn: Any

  @JsName("bManualEaseIn")
  public open var manualEaseIn: Boolean

  @JsName("ManualEaseInDuration")
  public open var manualEaseInDuration: Number

  @JsName("EaseOut")
  public open var easeOut: Any

  @JsName("bManualEaseOut")
  public open var manualEaseOut: Boolean

  @JsName("ManualEaseOutDuration")
  public open var manualEaseOutDuration: Number

  @JsName("AutoEaseInTime")
  public open var autoEaseInTime: Number

  @JsName("AutoEaseOutTime")
  public open var autoEaseOutTime: Number

  @JsName("ManualEaseInTime")
  public open var manualEaseInTime: Number

  @JsName("ManualEaseOutTime")
  public open var manualEaseOutTime: Number

  public open fun clone(): MovieSceneEasingSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEasingSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneEasingSettings
  }
}

@JsName("EMovieSceneBlendType")
public external object MovieSceneBlendType {
  public var Invalid: String

  public var Absolute: String

  public var Additive: String

  public var Relative: String

  public var AdditiveFromBase: String

  @JsName("EMovieSceneBlendType_MAX")
  public var Max: String
}

public open external class OptionalMovieSceneBlendType {
  @JsName("BlendType")
  public open var blendType: String

  @JsName("bIsValid")
  public open var isValid: Boolean

  public open fun clone(): OptionalMovieSceneBlendType

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): OptionalMovieSceneBlendType

    @JsName("C")
    public fun copy(other: Any): OptionalMovieSceneBlendType
  }
}

@JsName("ESequenceTimeUnit")
public external object SequenceTimeUnit {
  public var DisplayRate: String

  public var TickResolution: String

  @JsName("ESequenceTimeUnit_MAX")
  public var Max: String
}

public open external class MovieSceneScriptingChannel(
  outer: UObject,
) : UObject {
  @JsName("ChannelName")
  public open var channelName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneScriptingChannel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneScriptingChannel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneScriptingChannel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneScriptingChannel

    @JsName("C")
    public fun copy(other: UObject): MovieSceneScriptingChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneScriptingChannel
  }
}

public open external class MovieSceneSection(
  outer: UObject,
) : MovieSceneSignedObject {
  @JsName("EvalOptions")
  public open var evalOptions: MovieSceneSectionEvalOptions

  @JsName("Easing")
  public open var easing: MovieSceneEasingSettings

  @JsName("SectionRange")
  public open var sectionRange: MovieSceneFrameRange

  @JsName("TimecodeSource")
  public open var timecodeSource: MovieSceneTimecodeSource

  @JsName("PreRollFrames")
  public open var preRollFrames: FrameNumber

  @JsName("PostRollFrames")
  public open var postRollFrames: FrameNumber

  @JsName("RowIndex")
  public open var rowIndex: Number

  @JsName("OverlapPriority")
  public open var overlapPriority: Number

  @JsName("bIsActive")
  public open var isActive: Boolean

  @JsName("bIsLocked")
  public open var isLocked: Boolean

  @JsName("StartTime")
  public open var startTime: Number

  @JsName("EndTime")
  public open var endTime: Number

  @JsName("PrerollTime")
  public open var prerollTime: Number

  @JsName("PostrollTime")
  public open var postrollTime: Number

  @JsName("bIsInfinite")
  public open var isInfinite: Boolean

  @JsName("bSupportsInfiniteRange")
  public open var supportsInfiniteRange: Boolean

  @JsName("BlendType")
  public open var blendType: OptionalMovieSceneBlendType

  @JsName("SetRowIndex")
  public open fun setRowIndex(newRowIndex: Number): Unit

  @JsName("SetPreRollFrames")
  public open fun setPreRollFrames(inPreRollFrames: Number): Unit

  @JsName("SetPostRollFrames")
  public open fun setPostRollFrames(inPostRollFrames: Number): Unit

  @JsName("SetOverlapPriority")
  public open fun setOverlapPriority(newPriority: Number): Unit

  @JsName("SetIsLocked")
  public open fun setIsLocked(inIsLocked: Boolean): Unit

  @JsName("SetIsActive")
  public open fun setIsActive(inIsActive: Boolean): Unit

  @JsName("SetCompletionMode")
  public open fun setCompletionMode(inCompletionMode: String): Unit

  @JsName("SetBlendType")
  public open fun setBlendType(inBlendType: String): Unit

  @JsName("IsLocked")
  public open fun isLocked(): Boolean

  @JsName("IsActive")
  public open fun isActive(): Boolean

  @JsName("GetRowIndex")
  public open fun getRowIndex(): Number

  @JsName("GetPreRollFrames")
  public open fun getPreRollFrames(): Number

  @JsName("GetPostRollFrames")
  public open fun getPostRollFrames(): Number

  @JsName("GetOverlapPriority")
  public open fun getOverlapPriority(): Number

  @JsName("GetCompletionMode")
  public open fun getCompletionMode(): String

  @JsName("GetBlendType")
  public open fun getBlendType(): OptionalMovieSceneBlendType

  @JsName("LoadAnimSequenceIntoControlRigSection")
  public open fun loadAnimSequenceIntoControlRigSection(
    animSequence: AnimSequence,
    skelMeshComp: SkeletalMeshComponent,
    inStartFrame: FrameNumber,
    timeUnit: String,
    keyReduce: Boolean,
    tolerance: Number,
  ): Boolean

  @JsName("FindChannelsByType")
  public open fun findChannelsByType(channelType: UnrealEngineClass):
      Array<MovieSceneScriptingChannel>

  @JsName("GetAllChannels")
  public open fun getAllChannels(): Array<MovieSceneScriptingChannel>

  @JsName("GetChannels")
  public open fun getChannels(): Array<MovieSceneScriptingChannel>

  @JsName("GetChannelsByType")
  public open fun getChannelsByType(channelType: UnrealEngineClass):
      Array<MovieSceneScriptingChannel>

  @JsName("GetEndFrame")
  public open fun getEndFrame(): Number

  @JsName("GetEndFrameSeconds")
  public open fun getEndFrameSeconds(): Number

  @JsName("GetStartFrame")
  public open fun getStartFrame(): Number

  @JsName("GetStartFrameSeconds")
  public open fun getStartFrameSeconds(): Number

  @JsName("HasEndFrame")
  public open fun hasEndFrame(): Boolean

  @JsName("HasStartFrame")
  public open fun hasStartFrame(): Boolean

  @JsName("SetEndFrame")
  public open fun setEndFrame(endFrame: Number): Unit

  @JsName("SetEndFrameBounded")
  public open fun setEndFrameBounded(isBounded: Boolean): Unit

  @JsName("SetEndFrameSeconds")
  public open fun setEndFrameSeconds(endTime: Number): Unit

  @JsName("SetRange")
  public open fun setRange(startFrame: Number, endFrame: Number): Unit

  @JsName("SetRangeSeconds")
  public open fun setRangeSeconds(startTime: Number, endTime: Number): Unit

  @JsName("SetStartFrame")
  public open fun setStartFrame(startFrame: Number): Unit

  @JsName("SetStartFrameBounded")
  public open fun setStartFrameBounded(isBounded: Boolean): Unit

  @JsName("SetStartFrameSeconds")
  public open fun setStartFrameSeconds(startTime: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneSection

    @JsName("LoadAnimSequenceIntoControlRigSection")
    public fun loadAnimSequenceIntoControlRigSection(
      movieSceneSection: MovieSceneSection,
      animSequence: AnimSequence,
      skelMeshComp: SkeletalMeshComponent,
      inStartFrame: FrameNumber,
      timeUnit: String,
      keyReduce: Boolean,
      tolerance: Number,
    ): Boolean

    @JsName("FindChannelsByType")
    public fun findChannelsByType(section: MovieSceneSection, channelType: UnrealEngineClass):
        Array<MovieSceneScriptingChannel>

    @JsName("GetAllChannels")
    public fun getAllChannels(section: MovieSceneSection): Array<MovieSceneScriptingChannel>

    @JsName("GetChannels")
    public fun getChannels(section: MovieSceneSection): Array<MovieSceneScriptingChannel>

    @JsName("GetChannelsByType")
    public fun getChannelsByType(section: MovieSceneSection, channelType: UnrealEngineClass):
        Array<MovieSceneScriptingChannel>

    @JsName("GetEndFrame")
    public fun getEndFrame(section: MovieSceneSection): Number

    @JsName("GetEndFrameSeconds")
    public fun getEndFrameSeconds(section: MovieSceneSection): Number

    @JsName("GetStartFrame")
    public fun getStartFrame(section: MovieSceneSection): Number

    @JsName("GetStartFrameSeconds")
    public fun getStartFrameSeconds(section: MovieSceneSection): Number

    @JsName("HasEndFrame")
    public fun hasEndFrame(section: MovieSceneSection): Boolean

    @JsName("HasStartFrame")
    public fun hasStartFrame(section: MovieSceneSection): Boolean

    @JsName("SetEndFrame")
    public fun setEndFrame(section: MovieSceneSection, endFrame: Number): Unit

    @JsName("SetEndFrameBounded")
    public fun setEndFrameBounded(section: MovieSceneSection, isBounded: Boolean): Unit

    @JsName("SetEndFrameSeconds")
    public fun setEndFrameSeconds(section: MovieSceneSection, endTime: Number): Unit

    @JsName("SetRange")
    public fun setRange(
      section: MovieSceneSection,
      startFrame: Number,
      endFrame: Number,
    ): Unit

    @JsName("SetRangeSeconds")
    public fun setRangeSeconds(
      section: MovieSceneSection,
      startTime: Number,
      endTime: Number,
    ): Unit

    @JsName("SetStartFrame")
    public fun setStartFrame(section: MovieSceneSection, startFrame: Number): Unit

    @JsName("SetStartFrameBounded")
    public fun setStartFrameBounded(section: MovieSceneSection, isBounded: Boolean): Unit

    @JsName("SetStartFrameSeconds")
    public fun setStartFrameSeconds(section: MovieSceneSection, startTime: Number): Unit
  }
}

public open external class MovieSceneEventSectionBase(
  outer: UObject,
) : MovieSceneSection {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEventSectionBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEventSectionBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEventSectionBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEventSectionBase

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventSectionBase

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventSectionBase
  }
}

@JsName("K2Node_EditablePinBase")
public open external class K2NodeEditablePinBase(
  outer: UObject,
) : K2Node {
  @JsName("bIsEditable")
  public open var isEditable: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeEditablePinBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeEditablePinBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeEditablePinBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeEditablePinBase

    @JsName("C")
    public fun copy(other: UObject): K2NodeEditablePinBase

    @JsName("C")
    public fun copy(other: Any): K2NodeEditablePinBase
  }
}

@JsName("K2Node_Event")
public open external class K2NodeEvent(
  outer: UObject,
) : K2NodeEditablePinBase {
  @JsName("EventSignatureName")
  public open var eventSignatureName: String

  @JsName("EventSignatureClass")
  public open var eventSignatureClass: UnrealEngineClass

  @JsName("EventReference")
  public open var eventReference: MemberReference

  @JsName("bOverrideFunction")
  public open var overrideFunction: Boolean

  @JsName("bInternalEvent")
  public open var internalEvent: Boolean

  @JsName("CustomFunctionName")
  public open var customFunctionName: String

  @JsName("FunctionFlags")
  public open var functionFlags: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeEvent
  }
}

public open external class KismetUserDeclaredFunctionMetadata {
  @JsName("Tooltip")
  public open var tooltip: String

  @JsName("Category")
  public open var category: String

  @JsName("Keywords")
  public open var keywords: String

  @JsName("CompactNodeTitle")
  public open var compactNodeTitle: String

  @JsName("InstanceTitleColor")
  public open var instanceTitleColor: LinearColor

  @JsName("DeprecationMessage")
  public open var deprecationMessage: String

  @JsName("bIsDeprecated")
  public open var isDeprecated: Boolean

  @JsName("bCallInEditor")
  public open var callInEditor: Boolean

  @JsName("bThreadSafe")
  public open var threadSafe: Boolean

  @JsName("HasLatentFunctions")
  public open var hasLatentFunctions: Any

  public open fun clone(): KismetUserDeclaredFunctionMetadata

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KismetUserDeclaredFunctionMetadata

    @JsName("C")
    public fun copy(other: Any): KismetUserDeclaredFunctionMetadata
  }
}

@JsName("K2Node_CustomEvent")
public open external class K2NodeCustomEvent(
  outer: UObject,
) : K2NodeEvent {
  @JsName("DeprecationMessage")
  public open var deprecationMessage: String

  @JsName("bIsDeprecated")
  public open var isDeprecated: Boolean

  @JsName("bCallInEditor")
  public open var callInEditor: Boolean

  @JsName("MetaData")
  public open var metaData: KismetUserDeclaredFunctionMetadata

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCustomEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCustomEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCustomEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCustomEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeCustomEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeCustomEvent
  }
}

public open external class SequencerQuickBindingResult {
  @JsName("EventEndpoint")
  public open var eventEndpoint: K2NodeCustomEvent

  @JsName("PayloadNames")
  public open var payloadNames: Array<String>

  public open fun clone(): SequencerQuickBindingResult

  @JsName("IsEventEndpointValid")
  public open fun isEventEndpointValid(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SequencerQuickBindingResult

    @JsName("C")
    public fun copy(other: Any): SequencerQuickBindingResult

    @JsName("IsEventEndpointValid")
    public fun isEventEndpointValid(inEndpoint: SequencerQuickBindingResult): Boolean
  }
}

public open external class MovieSceneEventPtrs {
  @JsName("UFunction")
  public open var uFunction: UFunction

  @JsName("BoundObjectProperty")
  public open var boundObjectProperty: Any

  public open fun clone(): MovieSceneEventPtrs

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventPtrs

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventPtrs
  }
}

public open external class MovieSceneEvent {
  @JsName("Ptrs")
  public open var ptrs: MovieSceneEventPtrs

  @JsName("PayloadVariables")
  public open var payloadVariables: Any

  @JsName("CompiledFunctionName")
  public open var compiledFunctionName: String

  @JsName("BoundObjectPinName")
  public open var boundObjectPinName: String

  @JsName("WeakEndpoint")
  public open var weakEndpoint: Any

  @JsName("GraphGuid")
  public open var graphGuid: Guid

  @JsName("NodeGuid")
  public open var nodeGuid: Guid

  @JsName("FunctionEntry")
  public open var functionEntry: Any

  public open fun clone(): MovieSceneEvent

  @JsName("GetBoundObjectPropertyClass")
  public open fun getBoundObjectPropertyClass(): UnrealEngineClass

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEvent

    @JsName("C")
    public fun copy(other: Any): MovieSceneEvent

    @JsName("GetBoundObjectPropertyClass")
    public fun getBoundObjectPropertyClass(eventKey: MovieSceneEvent): UnrealEngineClass
  }
}

public open external class MovieSceneMarkedFrame {
  @JsName("FrameNumber")
  public open var frameNumber: FrameNumber

  @JsName("Label")
  public open var label: String

  @JsName("Color")
  public open var color: LinearColor

  @JsName("bIsDeterminismFence")
  public open var isDeterminismFence: Boolean

  public open fun clone(): MovieSceneMarkedFrame

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneMarkedFrame

    @JsName("C")
    public fun copy(other: Any): MovieSceneMarkedFrame
  }
}

public open external class MovieSceneTrackEvalOptions {
  @JsName("bCanEvaluateNearestSection")
  public open var canEvaluateNearestSection: Boolean

  @JsName("bEvalNearestSection")
  public open var evalNearestSection: Boolean

  @JsName("bEvaluateInPreroll")
  public open var evaluateInPreroll: Boolean

  @JsName("bEvaluateInPostroll")
  public open var evaluateInPostroll: Boolean

  @JsName("bEvaluateNearestSection")
  public open var evaluateNearestSection: Boolean

  public open fun clone(): MovieSceneTrackEvalOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackEvalOptions

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackEvalOptions
  }
}

public open external class MovieSceneTrackDisplayOptions {
  @JsName("bShowVerticalFrames")
  public open var showVerticalFrames: Boolean

  public open fun clone(): MovieSceneTrackDisplayOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackDisplayOptions

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackDisplayOptions
  }
}

public open external class FrameNumberRangeBound {
  @JsName("Type")
  public open var type: String

  @JsName("Value")
  public open var value: FrameNumber

  public open fun clone(): FrameNumberRangeBound

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FrameNumberRangeBound

    @JsName("C")
    public fun copy(other: Any): FrameNumberRangeBound
  }
}

public open external class FrameNumberRange {
  @JsName("LowerBound")
  public open var lowerBound: FrameNumberRangeBound

  @JsName("UpperBound")
  public open var upperBound: FrameNumberRangeBound

  public open fun clone(): FrameNumberRange

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FrameNumberRange

    @JsName("C")
    public fun copy(other: Any): FrameNumberRange
  }
}

public open external class MovieSceneTrackEvaluationFieldEntry {
  @JsName("Section")
  public open var section: MovieSceneSection

  @JsName("Range")
  public open var range: FrameNumberRange

  @JsName("ForcedTime")
  public open var forcedTime: FrameNumber

  @JsName("Flags")
  public open var flags: String

  @JsName("LegacySortOrder")
  public open var legacySortOrder: Any

  public open fun clone(): MovieSceneTrackEvaluationFieldEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackEvaluationFieldEntry

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackEvaluationFieldEntry
  }
}

public open external class MovieSceneTrackEvaluationField {
  @JsName("Entries")
  public open var entries: Array<MovieSceneTrackEvaluationFieldEntry>

  public open fun clone(): MovieSceneTrackEvaluationField

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrackEvaluationField

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrackEvaluationField
  }
}

public open external class MovieSceneTrack(
  outer: UObject,
) : MovieSceneSignedObject {
  @JsName("EvalOptions")
  public open var evalOptions: MovieSceneTrackEvalOptions

  @JsName("DisplayOptions")
  public open var displayOptions: MovieSceneTrackDisplayOptions

  @JsName("bIsEvalDisabled")
  public open var isEvalDisabled: Boolean

  @JsName("RowsDisabled")
  public open var rowsDisabled: Array<Number>

  @JsName("EvaluationFieldGuid")
  public open var evaluationFieldGuid: Guid

  @JsName("EvaluationFieldVersion")
  public open var evaluationFieldVersion: Any

  @JsName("EvaluationField")
  public open var evaluationField: MovieSceneTrackEvaluationField

  @JsName("ObjectBindingID")
  public open var objectBindingId: Guid

  @JsName("TrackTint")
  public open var trackTint: Color

  @JsName("SortingOrder")
  public open var sortingOrder: Number

  @JsName("bSupportsDefaultSections")
  public open var supportsDefaultSections: Boolean

  @JsName("AddSection")
  public open fun addSection(): MovieSceneSection

  @JsName("GetColorTint")
  public open fun getColorTint(): Color

  public override fun getDisplayName(): String

  @JsName("GetSections")
  public open fun getSections(): Array<MovieSceneSection>

  @JsName("GetSectionToKey")
  public open fun getSectionToKey(): MovieSceneSection

  @JsName("GetSortingOrder")
  public open fun getSortingOrder(): Number

  @JsName("GetTrackRowDisplayName")
  public open fun getTrackRowDisplayName(rowIndex: Number): String

  @JsName("RemoveSection")
  public open fun removeSection(section: MovieSceneSection): Unit

  @JsName("SetColorTint")
  public open fun setColorTint(colorTint: Color): Unit

  @JsName("SetDisplayName")
  public open fun setDisplayName(inName: String): Unit

  @JsName("SetSectionToKey")
  public open fun setSectionToKey(section: MovieSceneSection): Unit

  @JsName("SetSortingOrder")
  public open fun setSortingOrder(sortingOrder: Number): Unit

  @JsName("SetTrackRowDisplayName")
  public open fun setTrackRowDisplayName(inName: String, rowIndex: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneTrack

    @JsName("AddSection")
    public fun addSection(track: MovieSceneTrack): MovieSceneSection

    @JsName("GetColorTint")
    public fun getColorTint(track: MovieSceneTrack): Color

    @JsName("GetDisplayName")
    public fun getDisplayName(track: MovieSceneTrack): String

    @JsName("GetSections")
    public fun getSections(track: MovieSceneTrack): Array<MovieSceneSection>

    @JsName("GetSectionToKey")
    public fun getSectionToKey(track: MovieSceneTrack): MovieSceneSection

    @JsName("GetSortingOrder")
    public fun getSortingOrder(track: MovieSceneTrack): Number

    @JsName("GetTrackRowDisplayName")
    public fun getTrackRowDisplayName(track: MovieSceneTrack, rowIndex: Number): String

    @JsName("RemoveSection")
    public fun removeSection(track: MovieSceneTrack, section: MovieSceneSection): Unit

    @JsName("SetColorTint")
    public fun setColorTint(track: MovieSceneTrack, colorTint: Color): Unit

    @JsName("SetDisplayName")
    public fun setDisplayName(track: MovieSceneTrack, inName: String): Unit

    @JsName("SetSectionToKey")
    public fun setSectionToKey(track: MovieSceneTrack, section: MovieSceneSection): Unit

    @JsName("SetSortingOrder")
    public fun setSortingOrder(track: MovieSceneTrack, sortingOrder: Number): Unit

    @JsName("SetTrackRowDisplayName")
    public fun setTrackRowDisplayName(
      track: MovieSceneTrack,
      inName: String,
      rowIndex: Number,
    ): Unit
  }
}

public open external class SequencerBindingProxy {
  @JsName("BindingID")
  public open var bindingId: Guid

  @JsName("Sequence")
  public open var sequence: MovieSceneSequence

  public open fun clone(): SequencerBindingProxy

  @JsName("GetBindingID")
  public open fun getBindingId(): MovieSceneObjectBindingId

  @JsName("AddTrack")
  public open fun addTrack(trackType: UnrealEngineClass): MovieSceneTrack

  @JsName("FindTracksByExactType")
  public open fun findTracksByExactType(trackType: UnrealEngineClass): Array<MovieSceneTrack>

  @JsName("FindTracksByType")
  public open fun findTracksByType(trackType: UnrealEngineClass): Array<MovieSceneTrack>

  @JsName("GetChildPossessables")
  public open fun getChildPossessables(): Array<SequencerBindingProxy>

  @JsName("GetDisplayName")
  public open fun getDisplayName(): String

  @JsName("GetId")
  public open fun getId(): Guid

  @JsName("GetName")
  public open fun getName(): String

  @JsName("GetObjectTemplate")
  public open fun getObjectTemplate(): UObject

  @JsName("GetParent")
  public open fun getParent(): SequencerBindingProxy

  @JsName("GetPossessedObjectClass")
  public open fun getPossessedObjectClass(): UnrealEngineClass

  @JsName("GetTracks")
  public open fun getTracks(): Array<MovieSceneTrack>

  @JsName("IsValid")
  public open fun isValid(): Boolean

  @JsName("MoveBindingContents")
  public open fun moveBindingContents(destinationBindingId: SequencerBindingProxy): Unit

  @JsName("Remove")
  public open fun remove(): Unit

  @JsName("RemoveTrack")
  public open fun removeTrack(trackToRemove: MovieSceneTrack): Unit

  @JsName("SetDisplayName")
  public open fun setDisplayName(inDisplayName: String): Unit

  @JsName("SetName")
  public open fun setName(inName: String): Unit

  @JsName("SetParent")
  public open fun setParent(inParentBinding: SequencerBindingProxy): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SequencerBindingProxy

    @JsName("C")
    public fun copy(other: Any): SequencerBindingProxy

    @JsName("GetBindingID")
    public fun getBindingId(inBinding: SequencerBindingProxy): MovieSceneObjectBindingId

    @JsName("AddTrack")
    public fun addTrack(inBinding: SequencerBindingProxy, trackType: UnrealEngineClass):
        MovieSceneTrack

    @JsName("FindTracksByExactType")
    public fun findTracksByExactType(inBinding: SequencerBindingProxy,
        trackType: UnrealEngineClass): Array<MovieSceneTrack>

    @JsName("FindTracksByType")
    public fun findTracksByType(inBinding: SequencerBindingProxy, trackType: UnrealEngineClass):
        Array<MovieSceneTrack>

    @JsName("GetChildPossessables")
    public fun getChildPossessables(inBinding: SequencerBindingProxy): Array<SequencerBindingProxy>

    @JsName("GetDisplayName")
    public fun getDisplayName(inBinding: SequencerBindingProxy): String

    @JsName("GetId")
    public fun getId(inBinding: SequencerBindingProxy): Guid

    @JsName("GetName")
    public fun getName(inBinding: SequencerBindingProxy): String

    @JsName("GetObjectTemplate")
    public fun getObjectTemplate(inBinding: SequencerBindingProxy): UObject

    @JsName("GetParent")
    public fun getParent(inBinding: SequencerBindingProxy): SequencerBindingProxy

    @JsName("GetPossessedObjectClass")
    public fun getPossessedObjectClass(inBinding: SequencerBindingProxy): UnrealEngineClass

    @JsName("GetTracks")
    public fun getTracks(inBinding: SequencerBindingProxy): Array<MovieSceneTrack>

    @JsName("IsValid")
    public fun isValid(inBinding: SequencerBindingProxy): Boolean

    @JsName("MoveBindingContents")
    public fun moveBindingContents(sourceBindingId: SequencerBindingProxy,
        destinationBindingId: SequencerBindingProxy): Unit

    @JsName("Remove")
    public fun remove(inBinding: SequencerBindingProxy): Unit

    @JsName("RemoveTrack")
    public fun removeTrack(inBinding: SequencerBindingProxy, trackToRemove: MovieSceneTrack): Unit

    @JsName("SetDisplayName")
    public fun setDisplayName(inBinding: SequencerBindingProxy, inDisplayName: String): Unit

    @JsName("SetName")
    public fun setName(inBinding: SequencerBindingProxy, inName: String): Unit

    @JsName("SetParent")
    public fun setParent(inBinding: SequencerBindingProxy, inParentBinding: SequencerBindingProxy):
        Unit
  }
}

public open external class MovieSceneFolder(
  outer: UObject,
) : UObject {
  @JsName("FolderName")
  public open var folderName: String

  @JsName("ChildFolders")
  public open var childFolders: Array<MovieSceneFolder>

  @JsName("ChildMasterTracks")
  public open var childMasterTracks: Array<MovieSceneTrack>

  @JsName("ChildObjectBindingStrings")
  public open var childObjectBindingStrings: Array<String>

  @JsName("FolderColor")
  public open var folderColor: Color

  @JsName("SortingOrder")
  public open var sortingOrder: Number

  @JsName("AddChildFolder")
  public open fun addChildFolder(folderToAdd: MovieSceneFolder): Boolean

  @JsName("AddChildMasterTrack")
  public open fun addChildMasterTrack(inMasterTrack: MovieSceneTrack): Boolean

  @JsName("AddChildObjectBinding")
  public open fun addChildObjectBinding(inObjectBinding: SequencerBindingProxy): Boolean

  @JsName("GetChildFolders")
  public open fun getChildFolders(): Array<MovieSceneFolder>

  @JsName("GetChildMasterTracks")
  public open fun getChildMasterTracks(): Array<MovieSceneTrack>

  @JsName("GetChildObjectBindings")
  public open fun getChildObjectBindings(): Array<SequencerBindingProxy>

  @JsName("GetFolderColor")
  public open fun getFolderColor(): Color

  @JsName("GetFolderName")
  public open fun getFolderName(): String

  @JsName("RemoveChildFolder")
  public open fun removeChildFolder(folderToRemove: MovieSceneFolder): Boolean

  @JsName("RemoveChildMasterTrack")
  public open fun removeChildMasterTrack(inMasterTrack: MovieSceneTrack): Boolean

  @JsName("RemoveChildObjectBinding")
  public open fun removeChildObjectBinding(inObjectBinding: SequencerBindingProxy): Boolean

  @JsName("SetFolderColor")
  public open fun setFolderColor(inFolderColor: Color): Boolean

  @JsName("SetFolderName")
  public open fun setFolderName(inFolderName: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneFolder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneFolder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneFolder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneFolder

    @JsName("C")
    public fun copy(other: UObject): MovieSceneFolder

    @JsName("C")
    public fun copy(other: Any): MovieSceneFolder

    @JsName("AddChildFolder")
    public fun addChildFolder(targetFolder: MovieSceneFolder, folderToAdd: MovieSceneFolder):
        Boolean

    @JsName("AddChildMasterTrack")
    public fun addChildMasterTrack(folder: MovieSceneFolder, inMasterTrack: MovieSceneTrack):
        Boolean

    @JsName("AddChildObjectBinding")
    public fun addChildObjectBinding(folder: MovieSceneFolder,
        inObjectBinding: SequencerBindingProxy): Boolean

    @JsName("GetChildFolders")
    public fun getChildFolders(folder: MovieSceneFolder): Array<MovieSceneFolder>

    @JsName("GetChildMasterTracks")
    public fun getChildMasterTracks(folder: MovieSceneFolder): Array<MovieSceneTrack>

    @JsName("GetChildObjectBindings")
    public fun getChildObjectBindings(folder: MovieSceneFolder): Array<SequencerBindingProxy>

    @JsName("GetFolderColor")
    public fun getFolderColor(folder: MovieSceneFolder): Color

    @JsName("GetFolderName")
    public fun getFolderName(folder: MovieSceneFolder): String

    @JsName("RemoveChildFolder")
    public fun removeChildFolder(targetFolder: MovieSceneFolder, folderToRemove: MovieSceneFolder):
        Boolean

    @JsName("RemoveChildMasterTrack")
    public fun removeChildMasterTrack(folder: MovieSceneFolder, inMasterTrack: MovieSceneTrack):
        Boolean

    @JsName("RemoveChildObjectBinding")
    public fun removeChildObjectBinding(folder: MovieSceneFolder,
        inObjectBinding: SequencerBindingProxy): Boolean

    @JsName("SetFolderColor")
    public fun setFolderColor(folder: MovieSceneFolder, inFolderColor: Color): Boolean

    @JsName("SetFolderName")
    public fun setFolderName(folder: MovieSceneFolder, inFolderName: String): Boolean
  }
}

@JsName("EUpdateClockSource")
public external object UpdateClockSource {
  public var Tick: String

  public var Platform: String

  public var Audio: String

  public var RelativeTimecode: String

  public var Timecode: String

  public var PlayEveryFrame: String

  public var Custom: String

  @JsName("EUpdateClockSource_MAX")
  public var Max: String
}

@JsName("EMovieSceneEvaluationType")
public external object MovieSceneEvaluationType {
  public var FrameLocked: String

  public var WithSubFrames: String

  @JsName("EMovieSceneEvaluationType_MAX")
  public var Max: String
}

@JsName("ESpawnOwnership")
public external object SpawnOwnership {
  public var InnerSequence: String

  public var MasterSequence: String

  public var External: String

  @JsName("ESpawnOwnership_MAX")
  public var Max: String
}

public open external class MovieSceneSpawnable {
  @JsName("SpawnTransform")
  public open var spawnTransform: Transform

  @JsName("Tags")
  public open var tags: Array<String>

  @JsName("bContinuouslyRespawn")
  public open var continuouslyRespawn: Boolean

  @JsName("bNetAddressableName")
  public open var netAddressableName: Boolean

  @JsName("bEvaluateTracksWhenNotSpawned")
  public open var evaluateTracksWhenNotSpawned: Boolean

  @JsName("Guid")
  public open var guid: Guid

  @JsName("Name")
  public open var name: String

  @JsName("ObjectTemplate")
  public open var objectTemplate: UObject

  @JsName("ChildPossessables")
  public open var childPossessables: Array<Guid>

  @JsName("Ownership")
  public open var ownership: String

  @JsName("GeneratedClass")
  public open var generatedClass: UnrealEngineClass

  @JsName("LevelName")
  public open var levelName: String

  public open fun clone(): MovieSceneSpawnable

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSpawnable

    @JsName("C")
    public fun copy(other: Any): MovieSceneSpawnable
  }
}

public open external class MovieScenePossessable {
  @JsName("Tags")
  public open var tags: Array<String>

  @JsName("Guid")
  public open var guid: Guid

  @JsName("Name")
  public open var name: String

  @JsName("PossessedObjectClass")
  public open var possessedObjectClass: Class

  @JsName("ParentGuid")
  public open var parentGuid: Guid

  @JsName("SpawnableObjectBindingID")
  public open var spawnableObjectBindingId: MovieSceneObjectBindingId

  public open fun clone(): MovieScenePossessable

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieScenePossessable

    @JsName("C")
    public fun copy(other: Any): MovieScenePossessable
  }
}

public open external class MovieSceneBinding {
  @JsName("ObjectGuid")
  public open var objectGuid: Guid

  @JsName("BindingName")
  public open var bindingName: String

  @JsName("Tracks")
  public open var tracks: Array<MovieSceneTrack>

  @JsName("SortingOrder")
  public open var sortingOrder: Number

  public open fun clone(): MovieSceneBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneBinding

    @JsName("C")
    public fun copy(other: Any): MovieSceneBinding
  }
}

public open external class FloatRangeBound {
  @JsName("Type")
  public open var type: String

  @JsName("Value")
  public open var value: Number

  public open fun clone(): FloatRangeBound

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FloatRangeBound

    @JsName("C")
    public fun copy(other: Any): FloatRangeBound
  }
}

public open external class FloatRange {
  @JsName("LowerBound")
  public open var lowerBound: FloatRangeBound

  @JsName("UpperBound")
  public open var upperBound: FloatRangeBound

  public open fun clone(): FloatRange

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FloatRange

    @JsName("C")
    public fun copy(other: Any): FloatRange
  }
}

public open external class MovieSceneEditorData {
  @JsName("ExpansionStates")
  public open var expansionStates: Any

  @JsName("PinnedNodes")
  public open var pinnedNodes: Array<String>

  @JsName("ViewStart")
  public open var viewStart: Any

  @JsName("ViewEnd")
  public open var viewEnd: Any

  @JsName("WorkStart")
  public open var workStart: Any

  @JsName("WorkEnd")
  public open var workEnd: Any

  @JsName("MarkedFrames")
  public open var markedFrames: Any

  @JsName("WorkingRange")
  public open var workingRange: FloatRange

  @JsName("ViewRange")
  public open var viewRange: FloatRange

  public open fun clone(): MovieSceneEditorData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEditorData

    @JsName("C")
    public fun copy(other: Any): MovieSceneEditorData
  }
}

public open external class MovieSceneSectionGroup {
  @JsName("Sections")
  public open var sections: Array<Any>

  public open fun clone(): MovieSceneSectionGroup

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneSectionGroup

    @JsName("C")
    public fun copy(other: Any): MovieSceneSectionGroup
  }
}

public open external class MovieSceneNodeGroup(
  outer: UObject,
) : UObject {
  @JsName("Name")
  public open var name: String

  @JsName("Nodes")
  public open var nodes: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneNodeGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneNodeGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneNodeGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneNodeGroup

    @JsName("C")
    public fun copy(other: UObject): MovieSceneNodeGroup

    @JsName("C")
    public fun copy(other: Any): MovieSceneNodeGroup
  }
}

public open external class MovieSceneNodeGroupCollection(
  outer: UObject,
) : UObject {
  @JsName("NodeGroups")
  public open var nodeGroups: Array<MovieSceneNodeGroup>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneNodeGroupCollection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneNodeGroupCollection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneNodeGroupCollection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneNodeGroupCollection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneNodeGroupCollection

    @JsName("C")
    public fun copy(other: Any): MovieSceneNodeGroupCollection
  }
}

public open external class MovieScene(
  outer: UObject,
) : MovieSceneSignedObject {
  @JsName("Spawnables")
  public open var spawnables: Array<MovieSceneSpawnable>

  @JsName("Possessables")
  public open var possessables: Array<MovieScenePossessable>

  @JsName("ObjectBindings")
  public open var objectBindings: Array<MovieSceneBinding>

  @JsName("BindingGroups")
  public open var bindingGroups: Any

  @JsName("MasterTracks")
  public open var masterTracks: Array<MovieSceneTrack>

  @JsName("CameraCutTrack")
  public open var cameraCutTrack: MovieSceneTrack

  @JsName("SelectionRange")
  public open var selectionRange: MovieSceneFrameRange

  @JsName("PlaybackRange")
  public open var playbackRange: MovieSceneFrameRange

  @JsName("TickResolution")
  public open var tickResolution: FrameRate

  @JsName("DisplayRate")
  public open var displayRate: FrameRate

  @JsName("EvaluationType")
  public open var evaluationType: String

  @JsName("ClockSource")
  public open var clockSource: String

  @JsName("CustomClockSourcePath")
  public open var customClockSourcePath: SoftObjectPath

  @JsName("MarkedFrames")
  public open var markedFrames: Array<MovieSceneMarkedFrame>

  @JsName("bReadOnly")
  public open var readOnly: Boolean

  @JsName("bPlaybackRangeLocked")
  public open var playbackRangeLocked: Boolean

  @JsName("ObjectsToDisplayNames")
  public open var objectsToDisplayNames: Any

  @JsName("ObjectsToLabels")
  public open var objectsToLabels: Any

  @JsName("EditorData")
  public open var editorData: MovieSceneEditorData

  @JsName("RootFolders")
  public open var rootFolders: Array<MovieSceneFolder>

  @JsName("SoloNodes")
  public open var soloNodes: Array<String>

  @JsName("MuteNodes")
  public open var muteNodes: Array<String>

  @JsName("SectionGroups")
  public open var sectionGroups: Array<MovieSceneSectionGroup>

  @JsName("NodeGroupCollection")
  public open var nodeGroupCollection: MovieSceneNodeGroupCollection

  @JsName("InTime")
  public open var inTime: Number

  @JsName("OutTime")
  public open var outTime: Number

  @JsName("StartTime")
  public open var startTime: Number

  @JsName("EndTime")
  public open var endTime: Number

  @JsName("bForceFixedFrameIntervalPlayback")
  public open var forceFixedFrameIntervalPlayback: Boolean

  @JsName("FixedFrameInterval")
  public open var fixedFrameInterval: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene

    @JsName("C")
    public fun copy(other: UObject): MovieScene

    @JsName("C")
    public fun copy(other: Any): MovieScene
  }
}

@JsName("T$202")
public external interface RangeProvider {
  @JsName("Range")
  public var range: SequencerScriptingRange
}

public open external class SequencerScriptingRange {
  @JsName("bHasStart")
  public open var hasStart: Boolean

  @JsName("bHasEnd")
  public open var hasEnd: Boolean

  @JsName("InclusiveStart")
  public open var inclusiveStart: Number

  @JsName("ExclusiveEnd")
  public open var exclusiveEnd: Number

  @JsName("InternalRate")
  public open var internalRate: FrameRate

  public open fun clone(): SequencerScriptingRange

  @JsName("GetEndFrame")
  public open fun getEndFrame(): Number

  @JsName("GetEndSeconds")
  public open fun getEndSeconds(): Number

  @JsName("GetStartFrame")
  public open fun getStartFrame(): Number

  @JsName("GetStartSeconds")
  public open fun getStartSeconds(): Number

  @JsName("HasEnd")
  public open fun hasEnd(): Boolean

  @JsName("HasStart")
  public open fun hasStart(): Boolean

  @JsName("RemoveEnd")
  public open fun removeEnd(): RangeProvider

  @JsName("RemoveStart")
  public open fun removeStart(): RangeProvider

  @JsName("SetEndFrame")
  public open fun setEndFrame(end: Number): RangeProvider

  @JsName("SetEndSeconds")
  public open fun setEndSeconds(end: Number): RangeProvider

  @JsName("SetStartFrame")
  public open fun setStartFrame(start: Number): RangeProvider

  @JsName("SetStartSeconds")
  public open fun setStartSeconds(start: Number): RangeProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SequencerScriptingRange

    @JsName("C")
    public fun copy(other: Any): SequencerScriptingRange

    @JsName("GetEndFrame")
    public fun getEndFrame(range: SequencerScriptingRange): Number

    @JsName("GetEndSeconds")
    public fun getEndSeconds(range: SequencerScriptingRange): Number

    @JsName("GetStartFrame")
    public fun getStartFrame(range: SequencerScriptingRange): Number

    @JsName("GetStartSeconds")
    public fun getStartSeconds(range: SequencerScriptingRange): Number

    @JsName("HasEnd")
    public fun hasEnd(range: SequencerScriptingRange): Boolean

    @JsName("HasStart")
    public fun hasStart(range: SequencerScriptingRange): Boolean

    @JsName("RemoveEnd")
    public fun removeEnd(range: SequencerScriptingRange): RangeProvider

    @JsName("RemoveStart")
    public fun removeStart(range: SequencerScriptingRange): RangeProvider

    @JsName("SetEndFrame")
    public fun setEndFrame(range: SequencerScriptingRange, end: Number): RangeProvider

    @JsName("SetEndSeconds")
    public fun setEndSeconds(range: SequencerScriptingRange, end: Number): RangeProvider

    @JsName("SetStartFrame")
    public fun setStartFrame(range: SequencerScriptingRange, start: Number): RangeProvider

    @JsName("SetStartSeconds")
    public fun setStartSeconds(range: SequencerScriptingRange, start: Number): RangeProvider
  }
}

public open external class MovieSceneSequence(
  outer: UObject,
) : MovieSceneSignedObject {
  @JsName("CompiledData")
  public open var compiledData: MovieSceneCompiledData

  @JsName("DefaultCompletionMode")
  public open var defaultCompletionMode: String

  @JsName("bParentContextsAreSignificant")
  public open var parentContextsAreSignificant: Boolean

  @JsName("bPlayableDirectly")
  public open var playableDirectly: Boolean

  @JsName("SequenceFlags")
  public open var sequenceFlags: String

  @JsName("GetEarliestTimecodeSource")
  public open fun getEarliestTimecodeSource(): MovieSceneTimecodeSource

  @JsName("FindBindingsByTag")
  public open fun findBindingsByTag(inBindingName: String): Array<MovieSceneObjectBindingId>

  @JsName("FindBindingByTag")
  public open fun findBindingByTag(inBindingName: String): MovieSceneObjectBindingId

  @JsName("CreateEvent")
  public open fun createEvent(
    inSection: MovieSceneEventSectionBase,
    inEndpoint: SequencerQuickBindingResult,
    inPayload: Array<String>,
  ): MovieSceneEvent

  @JsName("CreateQuickBinding")
  public open fun createQuickBinding(
    inObject: UObject,
    inFunctionName: String,
    callInEditor: Boolean,
  ): SequencerQuickBindingResult

  @JsName("AddMarkedFrame")
  public open fun addMarkedFrame(inMarkedFrame: MovieSceneMarkedFrame): Number

  @JsName("AddMasterTrack")
  public open fun addMasterTrack(trackType: UnrealEngineClass): MovieSceneTrack

  @JsName("AddPossessable")
  public open fun addPossessable(objectToPossess: UObject): SequencerBindingProxy

  @JsName("AddRootFolderToSequence")
  public open fun addRootFolderToSequence(newFolderName: String): MovieSceneFolder

  @JsName("AddSpawnableFromClass")
  public open fun addSpawnableFromClass(classToSpawn: UnrealEngineClass): SequencerBindingProxy

  @JsName("AddSpawnableFromInstance")
  public open fun addSpawnableFromInstance(objectToSpawn: UObject): SequencerBindingProxy

  @JsName("DeleteMarkedFrame")
  public open fun deleteMarkedFrame(deleteIndex: Number): Unit

  @JsName("DeleteMarkedFrames")
  public open fun deleteMarkedFrames(): Unit

  @JsName("FindBindingById")
  public open fun findBindingById(bindingId: Guid): SequencerBindingProxy

  @JsName("FindBindingByName")
  public open fun findBindingByName(name: String): SequencerBindingProxy

  @JsName("FindMarkedFrameByFrameNumber")
  public open fun findMarkedFrameByFrameNumber(inFrameNumber: FrameNumber): Number

  @JsName("FindMarkedFrameByLabel")
  public open fun findMarkedFrameByLabel(inLabel: String): Number

  @JsName("FindMasterTracksByExactType")
  public open fun findMasterTracksByExactType(trackType: UnrealEngineClass): Array<MovieSceneTrack>

  @JsName("FindMasterTracksByType")
  public open fun findMasterTracksByType(trackType: UnrealEngineClass): Array<MovieSceneTrack>

  @JsName("FindNextMarkedFrame")
  public open fun findNextMarkedFrame(inFrameNumber: FrameNumber, forward: Boolean): Number

  @JsName("GetBindings")
  public open fun getBindings(): Array<SequencerBindingProxy>

  @JsName("GetClockSource")
  public open fun getClockSource(): String

  @JsName("GetDisplayRate")
  public open fun getDisplayRate(): FrameRate

  @JsName("GetEvaluationType")
  public open fun getEvaluationType(): String

  @JsName("GetMarkedFrames")
  public open fun getMarkedFrames(): Array<MovieSceneMarkedFrame>

  @JsName("GetMasterTracks")
  public open fun getMasterTracks(): Array<MovieSceneTrack>

  @JsName("GetMovieScene")
  public open fun getMovieScene(): MovieScene

  @JsName("GetPlaybackEnd")
  public open fun getPlaybackEnd(): Number

  @JsName("GetPlaybackEndSeconds")
  public open fun getPlaybackEndSeconds(): Number

  @JsName("GetPlaybackRange")
  public open fun getPlaybackRange(): SequencerScriptingRange

  @JsName("GetPlaybackStart")
  public open fun getPlaybackStart(): Number

  @JsName("GetPlaybackStartSeconds")
  public open fun getPlaybackStartSeconds(): Number

  @JsName("GetPortableBindingID")
  public open fun getPortableBindingId(destinationSequence: MovieSceneSequence,
      inBinding: SequencerBindingProxy): MovieSceneObjectBindingId

  @JsName("GetPossessables")
  public open fun getPossessables(): Array<SequencerBindingProxy>

  @JsName("GetRootFoldersInSequence")
  public open fun getRootFoldersInSequence(): Array<MovieSceneFolder>

  @JsName("GetSpawnables")
  public open fun getSpawnables(): Array<SequencerBindingProxy>

  @JsName("GetTickResolution")
  public open fun getTickResolution(): FrameRate

  @JsName("GetTimecodeSource")
  public open fun getTimecodeSource(): Timecode

  @JsName("GetViewRangeEnd")
  public open fun getViewRangeEnd(): Number

  @JsName("GetViewRangeStart")
  public open fun getViewRangeStart(): Number

  @JsName("GetWorkRangeEnd")
  public open fun getWorkRangeEnd(): Number

  @JsName("GetWorkRangeStart")
  public open fun getWorkRangeStart(): Number

  @JsName("IsReadOnly")
  public open fun isReadOnly(): Boolean

  @JsName("LocateBoundObjects")
  public open fun locateBoundObjects(inBinding: SequencerBindingProxy, context: UObject):
      Array<UObject>

  @JsName("MakeBindingID")
  public open fun makeBindingId(inBinding: SequencerBindingProxy, space: String):
      MovieSceneObjectBindingId

  @JsName("MakeRange")
  public open fun makeRange(startFrame: Number, duration: Number): SequencerScriptingRange

  @JsName("MakeRangeSeconds")
  public open fun makeRangeSeconds(startTime: Number, duration: Number): SequencerScriptingRange

  @JsName("RemoveMasterTrack")
  public open fun removeMasterTrack(masterTrack: MovieSceneTrack): Boolean

  @JsName("ResolveBindingID")
  public open fun resolveBindingId(inObjectBindingId: MovieSceneObjectBindingId):
      SequencerBindingProxy

  @JsName("SetClockSource")
  public open fun setClockSource(inClockSource: String): Unit

  @JsName("SetDisplayRate")
  public open fun setDisplayRate(displayRate: FrameRate): Unit

  @JsName("SetEvaluationType")
  public open fun setEvaluationType(inEvaluationType: String): Unit

  @JsName("SetMarkedFrame")
  public open fun setMarkedFrame(inMarkIndex: Number, inFrameNumber: FrameNumber): Unit

  @JsName("SetPlaybackEnd")
  public open fun setPlaybackEnd(endFrame: Number): Unit

  @JsName("SetPlaybackEndSeconds")
  public open fun setPlaybackEndSeconds(endTime: Number): Unit

  @JsName("SetPlaybackStart")
  public open fun setPlaybackStart(startFrame: Number): Unit

  @JsName("SetPlaybackStartSeconds")
  public open fun setPlaybackStartSeconds(startTime: Number): Unit

  @JsName("SetReadOnly")
  public open fun setReadOnly(inReadOnly: Boolean): Unit

  @JsName("SetTickResolution")
  public open fun setTickResolution(tickResolution: FrameRate): Unit

  @JsName("SetTickResolutionDirectly")
  public open fun setTickResolutionDirectly(tickResolution: FrameRate): Unit

  @JsName("SetViewRangeEnd")
  public open fun setViewRangeEnd(endTimeInSeconds: Number): Unit

  @JsName("SetViewRangeStart")
  public open fun setViewRangeStart(startTimeInSeconds: Number): Unit

  @JsName("SetWorkRangeEnd")
  public open fun setWorkRangeEnd(endTimeInSeconds: Number): Unit

  @JsName("SetWorkRangeStart")
  public open fun setWorkRangeStart(startTimeInSeconds: Number): Unit

  @JsName("SortMarkedFrames")
  public open fun sortMarkedFrames(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneSequence

    @JsName("C")
    public fun copy(other: UObject): MovieSceneSequence

    @JsName("C")
    public fun copy(other: Any): MovieSceneSequence

    @JsName("CreateEvent")
    public fun createEvent(
      inSequence: MovieSceneSequence,
      inSection: MovieSceneEventSectionBase,
      inEndpoint: SequencerQuickBindingResult,
      inPayload: Array<String>,
    ): MovieSceneEvent

    @JsName("CreateQuickBinding")
    public fun createQuickBinding(
      inSequence: MovieSceneSequence,
      inObject: UObject,
      inFunctionName: String,
      callInEditor: Boolean,
    ): SequencerQuickBindingResult

    @JsName("AddMarkedFrame")
    public fun addMarkedFrame(sequence: MovieSceneSequence, inMarkedFrame: MovieSceneMarkedFrame):
        Number

    @JsName("AddMasterTrack")
    public fun addMasterTrack(sequence: MovieSceneSequence, trackType: UnrealEngineClass):
        MovieSceneTrack

    @JsName("AddPossessable")
    public fun addPossessable(sequence: MovieSceneSequence, objectToPossess: UObject):
        SequencerBindingProxy

    @JsName("AddRootFolderToSequence")
    public fun addRootFolderToSequence(sequence: MovieSceneSequence, newFolderName: String):
        MovieSceneFolder

    @JsName("AddSpawnableFromClass")
    public fun addSpawnableFromClass(sequence: MovieSceneSequence, classToSpawn: UnrealEngineClass):
        SequencerBindingProxy

    @JsName("AddSpawnableFromInstance")
    public fun addSpawnableFromInstance(sequence: MovieSceneSequence, objectToSpawn: UObject):
        SequencerBindingProxy

    @JsName("DeleteMarkedFrame")
    public fun deleteMarkedFrame(sequence: MovieSceneSequence, deleteIndex: Number): Unit

    @JsName("DeleteMarkedFrames")
    public fun deleteMarkedFrames(sequence: MovieSceneSequence): Unit

    @JsName("FindBindingById")
    public fun findBindingById(sequence: MovieSceneSequence, bindingId: Guid): SequencerBindingProxy

    @JsName("FindBindingByName")
    public fun findBindingByName(sequence: MovieSceneSequence, name: String): SequencerBindingProxy

    @JsName("FindMarkedFrameByFrameNumber")
    public fun findMarkedFrameByFrameNumber(sequence: MovieSceneSequence,
        inFrameNumber: FrameNumber): Number

    @JsName("FindMarkedFrameByLabel")
    public fun findMarkedFrameByLabel(sequence: MovieSceneSequence, inLabel: String): Number

    @JsName("FindMasterTracksByExactType")
    public fun findMasterTracksByExactType(sequence: MovieSceneSequence,
        trackType: UnrealEngineClass): Array<MovieSceneTrack>

    @JsName("FindMasterTracksByType")
    public fun findMasterTracksByType(sequence: MovieSceneSequence, trackType: UnrealEngineClass):
        Array<MovieSceneTrack>

    @JsName("FindNextMarkedFrame")
    public fun findNextMarkedFrame(
      sequence: MovieSceneSequence,
      inFrameNumber: FrameNumber,
      forward: Boolean,
    ): Number

    @JsName("GetBindings")
    public fun getBindings(sequence: MovieSceneSequence): Array<SequencerBindingProxy>

    @JsName("GetClockSource")
    public fun getClockSource(inSequence: MovieSceneSequence): String

    @JsName("GetDisplayRate")
    public fun getDisplayRate(sequence: MovieSceneSequence): FrameRate

    @JsName("GetEvaluationType")
    public fun getEvaluationType(inSequence: MovieSceneSequence): String

    @JsName("GetMarkedFrames")
    public fun getMarkedFrames(sequence: MovieSceneSequence): Array<MovieSceneMarkedFrame>

    @JsName("GetMasterTracks")
    public fun getMasterTracks(sequence: MovieSceneSequence): Array<MovieSceneTrack>

    @JsName("GetMovieScene")
    public fun getMovieScene(sequence: MovieSceneSequence): MovieScene

    @JsName("GetPlaybackEnd")
    public fun getPlaybackEnd(sequence: MovieSceneSequence): Number

    @JsName("GetPlaybackEndSeconds")
    public fun getPlaybackEndSeconds(sequence: MovieSceneSequence): Number

    @JsName("GetPlaybackRange")
    public fun getPlaybackRange(sequence: MovieSceneSequence): SequencerScriptingRange

    @JsName("GetPlaybackStart")
    public fun getPlaybackStart(sequence: MovieSceneSequence): Number

    @JsName("GetPlaybackStartSeconds")
    public fun getPlaybackStartSeconds(sequence: MovieSceneSequence): Number

    @JsName("GetPortableBindingID")
    public fun getPortableBindingId(
      masterSequence: MovieSceneSequence,
      destinationSequence: MovieSceneSequence,
      inBinding: SequencerBindingProxy,
    ): MovieSceneObjectBindingId

    @JsName("GetPossessables")
    public fun getPossessables(sequence: MovieSceneSequence): Array<SequencerBindingProxy>

    @JsName("GetRootFoldersInSequence")
    public fun getRootFoldersInSequence(sequence: MovieSceneSequence): Array<MovieSceneFolder>

    @JsName("GetSpawnables")
    public fun getSpawnables(sequence: MovieSceneSequence): Array<SequencerBindingProxy>

    @JsName("GetTickResolution")
    public fun getTickResolution(sequence: MovieSceneSequence): FrameRate

    @JsName("GetTimecodeSource")
    public fun getTimecodeSource(sequence: MovieSceneSequence): Timecode

    @JsName("GetViewRangeEnd")
    public fun getViewRangeEnd(inSequence: MovieSceneSequence): Number

    @JsName("GetViewRangeStart")
    public fun getViewRangeStart(inSequence: MovieSceneSequence): Number

    @JsName("GetWorkRangeEnd")
    public fun getWorkRangeEnd(inSequence: MovieSceneSequence): Number

    @JsName("GetWorkRangeStart")
    public fun getWorkRangeStart(inSequence: MovieSceneSequence): Number

    @JsName("IsReadOnly")
    public fun isReadOnly(sequence: MovieSceneSequence): Boolean

    @JsName("LocateBoundObjects")
    public fun locateBoundObjects(
      sequence: MovieSceneSequence,
      inBinding: SequencerBindingProxy,
      context: UObject,
    ): Array<UObject>

    @JsName("MakeBindingID")
    public fun makeBindingId(
      masterSequence: MovieSceneSequence,
      inBinding: SequencerBindingProxy,
      space: String,
    ): MovieSceneObjectBindingId

    @JsName("MakeRange")
    public fun makeRange(
      sequence: MovieSceneSequence,
      startFrame: Number,
      duration: Number,
    ): SequencerScriptingRange

    @JsName("MakeRangeSeconds")
    public fun makeRangeSeconds(
      sequence: MovieSceneSequence,
      startTime: Number,
      duration: Number,
    ): SequencerScriptingRange

    @JsName("RemoveMasterTrack")
    public fun removeMasterTrack(sequence: MovieSceneSequence, masterTrack: MovieSceneTrack):
        Boolean

    @JsName("ResolveBindingID")
    public fun resolveBindingId(masterSequence: MovieSceneSequence,
        inObjectBindingId: MovieSceneObjectBindingId): SequencerBindingProxy

    @JsName("SetClockSource")
    public fun setClockSource(inSequence: MovieSceneSequence, inClockSource: String): Unit

    @JsName("SetDisplayRate")
    public fun setDisplayRate(sequence: MovieSceneSequence, displayRate: FrameRate): Unit

    @JsName("SetEvaluationType")
    public fun setEvaluationType(inSequence: MovieSceneSequence, inEvaluationType: String): Unit

    @JsName("SetMarkedFrame")
    public fun setMarkedFrame(
      sequence: MovieSceneSequence,
      inMarkIndex: Number,
      inFrameNumber: FrameNumber,
    ): Unit

    @JsName("SetPlaybackEnd")
    public fun setPlaybackEnd(sequence: MovieSceneSequence, endFrame: Number): Unit

    @JsName("SetPlaybackEndSeconds")
    public fun setPlaybackEndSeconds(sequence: MovieSceneSequence, endTime: Number): Unit

    @JsName("SetPlaybackStart")
    public fun setPlaybackStart(sequence: MovieSceneSequence, startFrame: Number): Unit

    @JsName("SetPlaybackStartSeconds")
    public fun setPlaybackStartSeconds(sequence: MovieSceneSequence, startTime: Number): Unit

    @JsName("SetReadOnly")
    public fun setReadOnly(sequence: MovieSceneSequence, inReadOnly: Boolean): Unit

    @JsName("SetTickResolution")
    public fun setTickResolution(sequence: MovieSceneSequence, tickResolution: FrameRate): Unit

    @JsName("SetTickResolutionDirectly")
    public fun setTickResolutionDirectly(sequence: MovieSceneSequence, tickResolution: FrameRate):
        Unit

    @JsName("SetViewRangeEnd")
    public fun setViewRangeEnd(inSequence: MovieSceneSequence, endTimeInSeconds: Number): Unit

    @JsName("SetViewRangeStart")
    public fun setViewRangeStart(inSequence: MovieSceneSequence, startTimeInSeconds: Number): Unit

    @JsName("SetWorkRangeEnd")
    public fun setWorkRangeEnd(inSequence: MovieSceneSequence, endTimeInSeconds: Number): Unit

    @JsName("SetWorkRangeStart")
    public fun setWorkRangeStart(inSequence: MovieSceneSequence, startTimeInSeconds: Number): Unit

    @JsName("SortMarkedFrames")
    public fun sortMarkedFrames(sequence: MovieSceneSequence): Unit
  }
}

public open external class TemplateSequence(
  outer: UObject,
) : MovieSceneSequence {
  @JsName("MovieScene")
  public open var movieScene: MovieScene

  @JsName("BoundActorClass")
  public open var boundActorClass: Class

  @JsName("BoundPreviewActor")
  public open var boundPreviewActor: Actor

  @JsName("BoundActorComponents")
  public open var boundActorComponents: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TemplateSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TemplateSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TemplateSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TemplateSequence

    @JsName("C")
    public fun copy(other: UObject): TemplateSequence

    @JsName("C")
    public fun copy(other: Any): TemplateSequence
  }
}

public open external class CameraAnimationSequence(
  outer: UObject,
) : TemplateSequence {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraAnimationSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraAnimationSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraAnimationSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraAnimationSequence

    @JsName("C")
    public fun copy(other: UObject): CameraAnimationSequence

    @JsName("C")
    public fun copy(other: Any): CameraAnimationSequence
  }
}

public open external class InterpGroupInst(
  outer: UObject,
) : UObject {
  @JsName("Group")
  public open var group: InterpGroup

  @JsName("GroupActor")
  public open var groupActor: Actor

  @JsName("TrackInst")
  public open var trackInst: Array<InterpTrackInst>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpGroupInst

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpGroupInst

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpGroupInst

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpGroupInst

    @JsName("C")
    public fun copy(other: UObject): InterpGroupInst

    @JsName("C")
    public fun copy(other: Any): InterpGroupInst
  }
}

@JsName("EInterpCurveMode")
public external object InterpCurveMode {
  @JsName("CIM_Linear")
  public var Linear: String

  @JsName("CIM_CurveAuto")
  public var CurveAuto: String

  @JsName("CIM_Constant")
  public var Constant: String

  @JsName("CIM_CurveUser")
  public var CurveUser: String

  @JsName("CIM_CurveBreak")
  public var CurveBreak: String

  @JsName("CIM_CurveAutoClamped")
  public var CurveAutoClamped: String

  @JsName("CIM_MAX")
  public var Max: String
}

public open external class InterpCurvePointVector {
  @JsName("InVal")
  public open var inVal: Number

  @JsName("OutVal")
  public open var outVal: Vector

  @JsName("ArriveTangent")
  public open var arriveTangent: Vector

  @JsName("LeaveTangent")
  public open var leaveTangent: Vector

  @JsName("InterpMode")
  public open var interpMode: String

  public open fun clone(): InterpCurvePointVector

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurvePointVector

    @JsName("C")
    public fun copy(other: Any): InterpCurvePointVector
  }
}

public open external class InterpCurveVector {
  @JsName("Points")
  public open var points: Array<InterpCurvePointVector>

  @JsName("bIsLooped")
  public open var isLooped: Boolean

  @JsName("LoopKeyOffset")
  public open var loopKeyOffset: Number

  public open fun clone(): InterpCurveVector

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurveVector

    @JsName("C")
    public fun copy(other: Any): InterpCurveVector
  }
}

public open external class InterpLookupPoint {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("Time")
  public open var time: Number

  public open fun clone(): InterpLookupPoint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpLookupPoint

    @JsName("C")
    public fun copy(other: Any): InterpLookupPoint
  }
}

public open external class InterpLookupTrack {
  @JsName("Points")
  public open var points: Array<InterpLookupPoint>

  public open fun clone(): InterpLookupTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpLookupTrack

    @JsName("C")
    public fun copy(other: Any): InterpLookupTrack
  }
}

@JsName("EInterpTrackMoveRotMode")
public external object InterpTrackMoveRotMode {
  @JsName("IMR_Keyframed")
  public var Keyframed: String

  @JsName("IMR_LookAtGroup")
  public var LookAtGroup: String

  @JsName("IMR_Ignore")
  public var Ignore: String

  @JsName("IMR_MAX")
  public var Max: String
}

public open external class InterpTrackMove(
  outer: UObject,
) : InterpTrack {
  @JsName("PosTrack")
  public open var posTrack: InterpCurveVector

  @JsName("EulerTrack")
  public open var eulerTrack: InterpCurveVector

  @JsName("LookupTrack")
  public open var lookupTrack: InterpLookupTrack

  @JsName("LookAtGroupName")
  public open var lookAtGroupName: String

  @JsName("LinCurveTension")
  public open var linCurveTension: Number

  @JsName("AngCurveTension")
  public open var angCurveTension: Number

  @JsName("bUseQuatInterpolation")
  public open var useQuatInterpolation: Boolean

  @JsName("bShowArrowAtKeys")
  public open var showArrowAtKeys: Boolean

  @JsName("bDisableMovement")
  public open var disableMovement: Boolean

  @JsName("bShowTranslationOnCurveEd")
  public open var showTranslationOnCurveEd: Boolean

  @JsName("bShowRotationOnCurveEd")
  public open var showRotationOnCurveEd: Boolean

  @JsName("bHide3DTrack")
  public open var hide3dTrack: Boolean

  @JsName("RotMode")
  public open var rotMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackMove

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackMove

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackMove

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackMove

    @JsName("C")
    public fun copy(other: UObject): InterpTrackMove

    @JsName("C")
    public fun copy(other: Any): InterpTrackMove
  }
}

public open external class InterpTrackInstMove(
  outer: UObject,
) : InterpTrackInst {
  @JsName("ResetLocation")
  public open var resetLocation: Vector

  @JsName("ResetRotation")
  public open var resetRotation: Rotator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpTrackInstMove

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpTrackInstMove

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpTrackInstMove

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpTrackInstMove

    @JsName("C")
    public fun copy(other: UObject): InterpTrackInstMove

    @JsName("C")
    public fun copy(other: Any): InterpTrackInstMove
  }
}

@JsName("ECameraShakePlaySpace")
public external object CameraShakePlaySpace {
  public var CameraLocal: String

  public var World: String

  public var UserDefined: String

  @JsName("ECameraShakePlaySpace_MAX")
  public var Max: String
}

public open external class CameraAnimInst(
  outer: UObject,
) : UObject {
  @JsName("CamAnim")
  public open var camAnim: CameraAnim

  @JsName("InterpGroupInst")
  public open var interpGroupInst: InterpGroupInst

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("MoveTrack")
  public open var moveTrack: InterpTrackMove

  @JsName("MoveInst")
  public open var moveInst: InterpTrackInstMove

  @JsName("PlaySpace")
  public open var playSpace: String

  @JsName("Stop")
  public open fun stop(immediate: Boolean): Unit

  @JsName("SetScale")
  public open fun setScale(newDuration: Number): Unit

  @JsName("SetDuration")
  public open fun setDuration(newDuration: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraAnimInst

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraAnimInst

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraAnimInst

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraAnimInst

    @JsName("C")
    public fun copy(other: UObject): CameraAnimInst

    @JsName("C")
    public fun copy(other: Any): CameraAnimInst
  }
}

public open external class MovieSceneCompiledDataManager(
  outer: UObject,
) : UObject {
  @JsName("Hierarchies")
  public open var hierarchies: Any

  @JsName("TrackTemplates")
  public open var trackTemplates: Any

  @JsName("TrackTemplateFields")
  public open var trackTemplateFields: Any

  @JsName("EntityComponentFields")
  public open var entityComponentFields: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCompiledDataManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCompiledDataManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCompiledDataManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCompiledDataManager

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCompiledDataManager

    @JsName("C")
    public fun copy(other: Any): MovieSceneCompiledDataManager
  }
}

public open external class MovieSceneEntitySystemGraphNodes {
  public open fun clone(): MovieSceneEntitySystemGraphNodes

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEntitySystemGraphNodes

    @JsName("C")
    public fun copy(other: Any): MovieSceneEntitySystemGraphNodes
  }
}

public open external class MovieSceneEntitySystemGraph {
  @JsName("Nodes")
  public open var nodes: MovieSceneEntitySystemGraphNodes

  public open fun clone(): MovieSceneEntitySystemGraph

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneEntitySystemGraph

    @JsName("C")
    public fun copy(other: Any): MovieSceneEntitySystemGraph
  }
}

public open external class MovieSceneEntitySystemLinker(
  outer: UObject,
) : UObject {
  @JsName("SystemGraph")
  public open var systemGraph: MovieSceneEntitySystemGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEntitySystemLinker

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEntitySystemLinker

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEntitySystemLinker

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEntitySystemLinker

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEntitySystemLinker

    @JsName("C")
    public fun copy(other: Any): MovieSceneEntitySystemLinker
  }
}

public open external class MovieSceneRootEvaluationTemplateInstance {
  @JsName("WeakRootSequence")
  public open var weakRootSequence: Any

  @JsName("CompiledDataManager")
  public open var compiledDataManager: MovieSceneCompiledDataManager

  @JsName("EntitySystemLinker")
  public open var entitySystemLinker: MovieSceneEntitySystemLinker

  @JsName("DirectorInstances")
  public open var directorInstances: Any

  public open fun clone(): MovieSceneRootEvaluationTemplateInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneRootEvaluationTemplateInstance

    @JsName("C")
    public fun copy(other: Any): MovieSceneRootEvaluationTemplateInstance
  }
}

public open external class CameraAnimationSequencePlayer(
  outer: UObject,
) : UObject {
  @JsName("BoundObjectOverride")
  public open var boundObjectOverride: UObject

  @JsName("Sequence")
  public open var sequence: MovieSceneSequence

  @JsName("RootTemplateInstance")
  public open var rootTemplateInstance: MovieSceneRootEvaluationTemplateInstance

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraAnimationSequencePlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraAnimationSequencePlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraAnimationSequencePlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraAnimationSequencePlayer

    @JsName("C")
    public fun copy(other: UObject): CameraAnimationSequencePlayer

    @JsName("C")
    public fun copy(other: Any): CameraAnimationSequencePlayer
  }
}

public open external class CameraFilmbackSettings {
  @JsName("SensorWidth")
  public open var sensorWidth: Number

  @JsName("SensorHeight")
  public open var sensorHeight: Number

  @JsName("SensorAspectRatio")
  public open var sensorAspectRatio: Number

  public open fun clone(): CameraFilmbackSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraFilmbackSettings

    @JsName("C")
    public fun copy(other: Any): CameraFilmbackSettings
  }
}

public open external class CameraLensSettings {
  @JsName("MinFocalLength")
  public open var minFocalLength: Number

  @JsName("MaxFocalLength")
  public open var maxFocalLength: Number

  @JsName("MinFStop")
  public open var minFStop: Number

  @JsName("MaxFStop")
  public open var maxFStop: Number

  @JsName("MinimumFocusDistance")
  public open var minimumFocusDistance: Number

  @JsName("DiaphragmBladeCount")
  public open var diaphragmBladeCount: Number

  public open fun clone(): CameraLensSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraLensSettings

    @JsName("C")
    public fun copy(other: Any): CameraLensSettings
  }
}

@JsName("ECameraFocusMethod")
public external object CameraFocusMethod {
  public var DoNotOverride: String

  public var Manual: String

  public var Tracking: String

  public var Disable: String

  public var MAX: String
}

public open external class CameraTrackingFocusSettings {
  @JsName("ActorToTrack")
  public open var actorToTrack: Actor

  @JsName("RelativeOffset")
  public open var relativeOffset: Vector

  @JsName("bDrawDebugTrackingFocusPoint")
  public open var drawDebugTrackingFocusPoint: Boolean

  public open fun clone(): CameraTrackingFocusSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraTrackingFocusSettings

    @JsName("C")
    public fun copy(other: Any): CameraTrackingFocusSettings
  }
}

public open external class CameraFocusSettings {
  @JsName("FocusMethod")
  public open var focusMethod: String

  @JsName("ManualFocusDistance")
  public open var manualFocusDistance: Number

  @JsName("TrackingFocusSettings")
  public open var trackingFocusSettings: CameraTrackingFocusSettings

  @JsName("bDrawDebugFocusPlane")
  public open var drawDebugFocusPlane: Boolean

  @JsName("DebugFocusPlaneColor")
  public open var debugFocusPlaneColor: Color

  @JsName("bSmoothFocusChanges")
  public open var smoothFocusChanges: Boolean

  @JsName("FocusSmoothingInterpSpeed")
  public open var focusSmoothingInterpSpeed: Number

  @JsName("FocusOffset")
  public open var focusOffset: Number

  public open fun clone(): CameraFocusSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraFocusSettings

    @JsName("C")
    public fun copy(other: Any): CameraFocusSettings
  }
}

public open external class CameraAnimationSequenceCameraStandIn(
  outer: UObject,
) : UObject {
  @JsName("FieldOfView")
  public open var fieldOfView: Number

  @JsName("bConstrainAspectRatio")
  public open var constrainAspectRatio: Boolean

  @JsName("AspectRatio")
  public open var aspectRatio: Number

  @JsName("PostProcessSettings")
  public open var postProcessSettings: PostProcessSettings

  @JsName("PostProcessBlendWeight")
  public open var postProcessBlendWeight: Number

  @JsName("Filmback")
  public open var filmback: CameraFilmbackSettings

  @JsName("LensSettings")
  public open var lensSettings: CameraLensSettings

  @JsName("FocusSettings")
  public open var focusSettings: CameraFocusSettings

  @JsName("CurrentFocalLength")
  public open var currentFocalLength: Number

  @JsName("CurrentAperture")
  public open var currentAperture: Number

  @JsName("CurrentFocusDistance")
  public open var currentFocusDistance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraAnimationSequenceCameraStandIn

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraAnimationSequenceCameraStandIn

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraAnimationSequenceCameraStandIn

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraAnimationSequenceCameraStandIn

    @JsName("C")
    public fun copy(other: UObject): CameraAnimationSequenceCameraStandIn

    @JsName("C")
    public fun copy(other: Any): CameraAnimationSequenceCameraStandIn
  }
}

public open external class SequenceCameraShakePattern(
  outer: UObject,
) : CameraShakePattern {
  @JsName("Sequence")
  public open var sequence: CameraAnimationSequence

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("Scale")
  public open var scale: Number

  @JsName("BlendInTime")
  public open var blendInTime: Number

  @JsName("BlendOutTime")
  public open var blendOutTime: Number

  @JsName("RandomSegmentDuration")
  public open var randomSegmentDuration: Number

  @JsName("bRandomSegment")
  public open var randomSegment: Boolean

  @JsName("Player")
  public open var player: CameraAnimationSequencePlayer

  @JsName("CameraStandIn")
  public open var cameraStandIn: CameraAnimationSequenceCameraStandIn

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequenceCameraShakePattern

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequenceCameraShakePattern

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequenceCameraShakePattern

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequenceCameraShakePattern

    @JsName("C")
    public fun copy(other: UObject): SequenceCameraShakePattern

    @JsName("C")
    public fun copy(other: Any): SequenceCameraShakePattern
  }
}

@JsName("ECameraShakeAttenuation")
public external object CameraShakeAttenuation {
  public var Linear: String

  public var Quadratic: String

  @JsName("ECameraShakeAttenuation_MAX")
  public var Max: String
}

public open external class CameraShakeSourceComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("Attenuation")
  public open var attenuation: String

  @JsName("InnerAttenuationRadius")
  public open var innerAttenuationRadius: Number

  @JsName("OuterAttenuationRadius")
  public open var outerAttenuationRadius: Number

  @JsName("CameraShake")
  public open var cameraShake: UnrealEngineClass

  @JsName("bAutoStart")
  public open var autoStart: Boolean

  @JsName("EditorSpriteTexture")
  public open var editorSpriteTexture: Texture2d

  @JsName("EditorSpriteTextureScale")
  public open var editorSpriteTextureScale: Number

  @JsName("StopAllCameraShakesOfType")
  public open fun stopAllCameraShakesOfType(inCameraShake: UnrealEngineClass, immediately: Boolean):
      Unit

  @JsName("StopAllCameraShakes")
  public open fun stopAllCameraShakes(immediately: Boolean): Unit

  @JsName("StartCameraShake")
  public open fun startCameraShake(
    inCameraShake: UnrealEngineClass,
    scale: Number,
    playSpace: String,
    userPlaySpaceRot: Rotator,
  ): Unit

  @JsName("Start")
  public open fun start(): Unit

  @JsName("GetAttenuationFactor")
  public open fun getAttenuationFactor(location: Vector): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraShakeSourceComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraShakeSourceComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraShakeSourceComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraShakeSourceComponent

    @JsName("C")
    public fun copy(other: UObject): CameraShakeSourceComponent

    @JsName("C")
    public fun copy(other: Any): CameraShakeSourceComponent
  }
}

@JsName("T$203")
public external interface ModifiedPovProvider {
  @JsName("ModifiedPOV")
  public var modifiedPov: MinimalViewInfo
}

public open external class MatineeCameraShake(
  outer: UObject,
) : CameraShakeBase {
  @JsName("OscillationDuration")
  public open var oscillationDuration: Number

  @JsName("OscillationBlendInTime")
  public open var oscillationBlendInTime: Number

  @JsName("OscillationBlendOutTime")
  public open var oscillationBlendOutTime: Number

  @JsName("RotOscillation")
  public open var rotOscillation: ROscillator

  @JsName("LocOscillation")
  public open var locOscillation: VOscillator

  @JsName("FOVOscillation")
  public open var fovOscillation: FOscillator

  @JsName("AnimPlayRate")
  public open var animPlayRate: Number

  @JsName("AnimScale")
  public open var animScale: Number

  @JsName("AnimBlendInTime")
  public open var animBlendInTime: Number

  @JsName("AnimBlendOutTime")
  public open var animBlendOutTime: Number

  @JsName("RandomAnimSegmentDuration")
  public open var randomAnimSegmentDuration: Number

  @JsName("Anim")
  public open var anim: CameraAnim

  @JsName("AnimSequence")
  public open var animSequence: CameraAnimationSequence

  @JsName("bRandomAnimSegment")
  public open var randomAnimSegment: Boolean

  @JsName("OscillatorTimeRemaining")
  public open var oscillatorTimeRemaining: Number

  @JsName("AnimInst")
  public open var animInst: CameraAnimInst

  @JsName("SequenceShakePattern")
  public open var sequenceShakePattern: SequenceCameraShakePattern

  @JsName("ReceiveStopShake")
  public open fun receiveStopShake(immediately: Boolean): Unit

  @JsName("ReceivePlayShake")
  public open fun receivePlayShake(scale: Number): Unit

  @JsName("ReceiveIsFinished")
  public open fun receiveIsFinished(): Boolean

  @JsName("BlueprintUpdateCameraShake")
  public open fun blueprintUpdateCameraShake(
    deltaTime: Number,
    alpha: Number,
    POV: MinimalViewInfo,
    modifiedPov: MinimalViewInfo,
  ): ModifiedPovProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MatineeCameraShake

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MatineeCameraShake

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MatineeCameraShake

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MatineeCameraShake

    @JsName("StartMatineeCameraShakeFromSource")
    public fun startMatineeCameraShakeFromSource(
      playerCameraManager: PlayerCameraManager,
      shakeClass: UnrealEngineClass,
      sourceComponent: CameraShakeSourceComponent,
      scale: Number,
      playSpace: String,
      userPlaySpaceRot: Rotator,
    ): MatineeCameraShake

    @JsName("StartMatineeCameraShake")
    public fun startMatineeCameraShake(
      playerCameraManager: PlayerCameraManager,
      shakeClass: UnrealEngineClass,
      scale: Number,
      playSpace: String,
      userPlaySpaceRot: Rotator,
    ): MatineeCameraShake

    @JsName("C")
    public fun copy(other: UObject): MatineeCameraShake

    @JsName("C")
    public fun copy(other: Any): MatineeCameraShake
  }
}

public open external class CameraShakeBase(
  outer: UObject,
) : UObject {
  @JsName("bSingleInstance")
  public open var singleInstance: Boolean

  @JsName("ShakeScale")
  public open var shakeScale: Number

  @JsName("RootShakePattern")
  public open var rootShakePattern: CameraShakePattern

  @JsName("CameraManager")
  public open var cameraManager: PlayerCameraManager

  @JsName("SetRootShakePattern")
  public open fun setRootShakePattern(inPattern: CameraShakePattern): Unit

  @JsName("GetRootShakePattern")
  public open fun getRootShakePattern(): CameraShakePattern

  @JsName("Conv_MatineeCameraShake")
  public open fun convertMatineeCameraShake(): MatineeCameraShake

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraShakeBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraShakeBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraShakeBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraShakeBase

    @JsName("C")
    public fun copy(other: UObject): CameraShakeBase

    @JsName("C")
    public fun copy(other: Any): CameraShakeBase

    @JsName("Conv_MatineeCameraShake")
    public fun convertMatineeCameraShake(cameraShake: CameraShakeBase): MatineeCameraShake
  }
}

public open external class ActiveCameraShakeInfo {
  @JsName("ShakeInstance")
  public open var shakeInstance: CameraShakeBase

  @JsName("ShakeSource")
  public open var shakeSource: Any

  @JsName("bIsCustomInitialized")
  public open var isCustomInitialized: Boolean

  public open fun clone(): ActiveCameraShakeInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActiveCameraShakeInfo

    @JsName("C")
    public fun copy(other: Any): ActiveCameraShakeInfo
  }
}

@JsName("CameraModifier_CameraShake")
public open external class CameraModifierCameraShake(
  outer: UObject,
) : CameraModifier {
  @JsName("ActiveShakes")
  public open var activeShakes: Array<ActiveCameraShakeInfo>

  @JsName("ExpiredPooledShakesMap")
  public open var expiredPooledShakesMap: Any

  @JsName("SplitScreenShakeScale")
  public open var splitScreenShakeScale: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraModifierCameraShake

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraModifierCameraShake

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraModifierCameraShake

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraModifierCameraShake

    @JsName("C")
    public fun copy(other: UObject): CameraModifierCameraShake

    @JsName("C")
    public fun copy(other: Any): CameraModifierCameraShake
  }
}

@JsName("ElementID")
public open external class ElementId {
  @JsName("IDValue")
  public open var idValue: Number

  public open fun clone(): ElementId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ElementId

    @JsName("C")
    public fun copy(other: Any): ElementId
  }
}

@JsName("VertexID")
public open external class VertexId : ElementId {
  public override fun clone(): VertexId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VertexId

    @JsName("C")
    public fun copy(other: Any): VertexId
  }
}

@JsName("PolygonID")
public open external class PolygonId : ElementId {
  public override fun clone(): PolygonId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PolygonId

    @JsName("C")
    public fun copy(other: Any): PolygonId
  }
}

@JsName("VertexInstanceID")
public open external class VertexInstanceId : ElementId {
  public override fun clone(): VertexInstanceId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VertexInstanceId

    @JsName("C")
    public fun copy(other: Any): VertexInstanceId
  }
}

@JsName("PolygonGroupID")
public open external class PolygonGroupId : ElementId {
  public override fun clone(): PolygonGroupId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PolygonGroupId

    @JsName("C")
    public fun copy(other: Any): PolygonGroupId
  }
}

@JsName("TriangleID")
public open external class TriangleId : ElementId {
  public override fun clone(): TriangleId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TriangleId

    @JsName("C")
    public fun copy(other: Any): TriangleId
  }
}

@JsName("EdgeID")
public open external class EdgeId : ElementId {
  public override fun clone(): EdgeId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EdgeId

    @JsName("C")
    public fun copy(other: Any): EdgeId
  }
}

@JsName("T$204")
public external interface OutVertexInstanceIDsProvider {
  @JsName("OutVertexInstanceIDs")
  public var outVertexInstanceIDs: Array<VertexInstanceId>
}

@JsName("T$205")
public external interface OutConnectedTriangleIDsProvider {
  @JsName("OutConnectedTriangleIDs")
  public var outConnectedTriangleIDs: Array<TriangleId>
}

@JsName("T$206")
public external interface OutConnectedPolygonIDsProvider {
  @JsName("OutConnectedPolygonIDs")
  public var outConnectedPolygonIDs: Array<PolygonId>
}

@JsName("T$209")
public external interface OutEdgeIDsProvider {
  @JsName("OutEdgeIDs")
  public var outEdgeIDs: Array<EdgeId>
}

@JsName("T$210")
public external interface OutAdjacentVertexIDsProvider {
  @JsName("OutAdjacentVertexIDs")
  public var outAdjacentVertexIDs: Array<VertexId>
}

@JsName("T$211")
public external interface OutVertexIDsProvider {
  @JsName("OutVertexIDs")
  public var outVertexIDs: Array<VertexId>
}

@JsName("T$214")
public external interface OutTriangleIDsProvider {
  @JsName("OutTriangleIDs")
  public var outTriangleIDs: Array<TriangleId>
}

@JsName("T$220")
public external interface OutPolygonIDsProvider {
  @JsName("OutPolygonIDs")
  public var outPolygonIDs: Array<PolygonId>
}

@JsName("T$225")
public external interface OrphanedVerticesProvider {
  @JsName("OrphanedVertices")
  public var orphanedVertices: Array<VertexId>
}

@JsName("T$226")
public external interface Object226 {
  @JsName("OrphanedEdges")
  public var orphanedEdges: Array<EdgeId>

  @JsName("OrphanedVertexInstances")
  public var orphanedVertexInstances: Array<VertexInstanceId>

  @JsName("OrphanedPolygonGroupsPtr")
  public var orphanedPolygonGroupsPtr: Array<PolygonGroupId>
}

@JsName("T$227")
public external interface Object227 {
  @JsName("OrphanedEdges")
  public var orphanedEdges: Array<EdgeId>

  @JsName("OrphanedVertexInstances")
  public var orphanedVertexInstances: Array<VertexInstanceId>

  @JsName("OrphanedPolygonGroups")
  public var orphanedPolygonGroups: Array<PolygonGroupId>
}

@JsName("T$229")
public external interface NewEdgeIDsProvider {
  @JsName("NewEdgeIDs")
  public var newEdgeIDs: Array<EdgeId>
}

@JsName("T$230")
public external interface Object230 {
  @JsName("NewEdgeIDs")
  public var newEdgeIDs: Array<EdgeId>

  @JsName("$")
  public var value: TriangleId
}

@JsName("T$231")
public external interface Object231 {
  @JsName("VertexInstanceIDs")
  public var vertexInstanceIDs: Array<VertexInstanceId>

  @JsName("NewEdgeIDs")
  public var newEdgeIDs: Array<EdgeId>
}

@JsName("T$232")
public external interface Object232 {
  @JsName("VertexInstanceIDs")
  public var vertexInstanceIDs: Array<VertexInstanceId>

  @JsName("NewEdgeIDs")
  public var newEdgeIDs: Array<EdgeId>

  @JsName("$")
  public var value: PolygonId
}

public open external class MeshDescriptionBase(
  outer: UObject,
) : UObject {
  @JsName("SetVertexPosition")
  public open fun setVertexPosition(vertexId: VertexId, position: Vector): Unit

  @JsName("SetPolygonVertexInstances")
  public open fun setPolygonVertexInstances(polygonId: PolygonId,
      vertexInstanceIDs: Array<VertexInstanceId>): Unit

  @JsName("SetPolygonPolygonGroup")
  public open fun setPolygonPolygonGroup(polygonId: PolygonId, polygonGroupId: PolygonGroupId): Unit

  @JsName("ReversePolygonFacing")
  public open fun reversePolygonFacing(polygonId: PolygonId): Unit

  @JsName("ReserveNewVertices")
  public open fun reserveNewVertices(numberOfNewVertices: Number): Unit

  @JsName("ReserveNewVertexInstances")
  public open fun reserveNewVertexInstances(numberOfNewVertexInstances: Number): Unit

  @JsName("ReserveNewTriangles")
  public open fun reserveNewTriangles(numberOfNewTriangles: Number): Unit

  @JsName("ReserveNewPolygons")
  public open fun reserveNewPolygons(numberOfNewPolygons: Number): Unit

  @JsName("ReserveNewPolygonGroups")
  public open fun reserveNewPolygonGroups(numberOfNewPolygonGroups: Number): Unit

  @JsName("ReserveNewEdges")
  public open fun reserveNewEdges(numberOfNewEdges: Number): Unit

  @JsName("IsVertexValid")
  public open fun isVertexValid(vertexId: VertexId): Boolean

  @JsName("IsVertexOrphaned")
  public open fun isVertexOrphaned(vertexId: VertexId): Boolean

  @JsName("IsVertexInstanceValid")
  public open fun isVertexInstanceValid(vertexInstanceId: VertexInstanceId): Boolean

  @JsName("IsTriangleValid")
  public open fun isTriangleValid(triangleId: TriangleId): Boolean

  @JsName("IsTrianglePartOfNgon")
  public open fun isTrianglePartOfNgon(triangleId: TriangleId): Boolean

  @JsName("IsPolygonValid")
  public open fun isPolygonValid(polygonId: PolygonId): Boolean

  @JsName("IsPolygonGroupValid")
  public open fun isPolygonGroupValid(polygonGroupId: PolygonGroupId): Boolean

  @JsName("IsEmpty")
  public open fun isEmpty(): Boolean

  @JsName("IsEdgeValid")
  public open fun isEdgeValid(edgeId: EdgeId): Boolean

  @JsName("IsEdgeInternalToPolygon")
  public open fun isEdgeInternalToPolygon(edgeId: EdgeId, polygonId: PolygonId): Boolean

  @JsName("IsEdgeInternal")
  public open fun isEdgeInternal(edgeId: EdgeId): Boolean

  @JsName("GetVertexVertexInstances")
  public open fun getVertexVertexInstances(vertexId: VertexId,
      outVertexInstanceIDs: Array<VertexInstanceId>): OutVertexInstanceIDsProvider

  @JsName("GetVertexPosition")
  public open fun getVertexPosition(vertexId: VertexId): Vector

  @JsName("GetVertexPairEdge")
  public open fun getVertexPairEdge(vertexId0: VertexId, vertexId1: VertexId): EdgeId

  @JsName("GetVertexInstanceVertex")
  public open fun getVertexInstanceVertex(vertexInstanceId: VertexInstanceId): VertexId

  @JsName("GetVertexInstancePairEdge")
  public open fun getVertexInstancePairEdge(vertexInstanceId0: VertexInstanceId,
      vertexInstanceId1: VertexInstanceId): EdgeId

  @JsName("GetVertexInstanceForTriangleVertex")
  public open fun getVertexInstanceForTriangleVertex(triangleId: TriangleId, vertexId: VertexId):
      VertexInstanceId

  @JsName("GetVertexInstanceForPolygonVertex")
  public open fun getVertexInstanceForPolygonVertex(polygonId: PolygonId, vertexId: VertexId):
      VertexInstanceId

  @JsName("GetVertexInstanceCount")
  public open fun getVertexInstanceCount(): Number

  @JsName("GetVertexInstanceConnectedTriangles")
  public open fun getVertexInstanceConnectedTriangles(vertexInstanceId: VertexInstanceId,
      outConnectedTriangleIDs: Array<TriangleId>): OutConnectedTriangleIDsProvider

  @JsName("GetVertexInstanceConnectedPolygons")
  public open fun getVertexInstanceConnectedPolygons(vertexInstanceId: VertexInstanceId,
      outConnectedPolygonIDs: Array<PolygonId>): OutConnectedPolygonIDsProvider

  @JsName("GetVertexCount")
  public open fun getVertexCount(): Number

  @JsName("GetVertexConnectedTriangles")
  public open fun getVertexConnectedTriangles(vertexId: VertexId,
      outConnectedTriangleIDs: Array<TriangleId>): OutConnectedTriangleIDsProvider

  @JsName("GetVertexConnectedPolygons")
  public open fun getVertexConnectedPolygons(vertexId: VertexId,
      outConnectedPolygonIDs: Array<PolygonId>): OutConnectedPolygonIDsProvider

  @JsName("GetVertexConnectedEdges")
  public open fun getVertexConnectedEdges(vertexId: VertexId, outEdgeIDs: Array<EdgeId>):
      OutEdgeIDsProvider

  @JsName("GetVertexAdjacentVertices")
  public open fun getVertexAdjacentVertices(vertexId: VertexId,
      outAdjacentVertexIDs: Array<VertexId>): OutAdjacentVertexIDsProvider

  @JsName("GetTriangleVertices")
  public open fun getTriangleVertices(triangleId: TriangleId, outVertexIDs: Array<VertexId>):
      OutVertexIDsProvider

  @JsName("GetTriangleVertexInstances")
  public open fun getTriangleVertexInstances(triangleId: TriangleId,
      outVertexInstanceIDs: Array<VertexInstanceId>): OutVertexInstanceIDsProvider

  @JsName("GetTriangleVertexInstance")
  public open fun getTriangleVertexInstance(triangleId: TriangleId, index: Number): VertexInstanceId

  @JsName("GetTrianglePolygonGroup")
  public open fun getTrianglePolygonGroup(triangleId: TriangleId): PolygonGroupId

  @JsName("GetTrianglePolygon")
  public open fun getTrianglePolygon(triangleId: TriangleId): PolygonId

  @JsName("GetTriangleEdges")
  public open fun getTriangleEdges(triangleId: TriangleId, outEdgeIDs: Array<EdgeId>):
      OutEdgeIDsProvider

  @JsName("GetTriangleCount")
  public open fun getTriangleCount(): Number

  @JsName("GetTriangleAdjacentTriangles")
  public open fun getTriangleAdjacentTriangles(triangleId: TriangleId,
      outTriangleIDs: Array<TriangleId>): OutTriangleIDsProvider

  @JsName("GetPolygonVertices")
  public open fun getPolygonVertices(polygonId: PolygonId, outVertexIDs: Array<VertexId>):
      OutVertexIDsProvider

  @JsName("GetPolygonVertexInstances")
  public open fun getPolygonVertexInstances(polygonId: PolygonId,
      outVertexInstanceIDs: Array<VertexInstanceId>): OutVertexInstanceIDsProvider

  @JsName("GetPolygonTriangles")
  public open fun getPolygonTriangles(polygonId: PolygonId, outTriangleIDs: Array<TriangleId>):
      OutTriangleIDsProvider

  @JsName("GetPolygonPolygonGroup")
  public open fun getPolygonPolygonGroup(polygonId: PolygonId): PolygonGroupId

  @JsName("GetPolygonPerimeterEdges")
  public open fun getPolygonPerimeterEdges(polygonId: PolygonId, outEdgeIDs: Array<EdgeId>):
      OutEdgeIDsProvider

  @JsName("GetPolygonInternalEdges")
  public open fun getPolygonInternalEdges(polygonId: PolygonId, outEdgeIDs: Array<EdgeId>):
      OutEdgeIDsProvider

  @JsName("GetPolygonGroupPolygons")
  public open fun getPolygonGroupPolygons(polygonGroupId: PolygonGroupId,
      outPolygonIDs: Array<PolygonId>): OutPolygonIDsProvider

  @JsName("GetPolygonGroupCount")
  public open fun getPolygonGroupCount(): Number

  @JsName("GetPolygonCount")
  public open fun getPolygonCount(): Number

  @JsName("GetPolygonAdjacentPolygons")
  public open fun getPolygonAdjacentPolygons(polygonId: PolygonId, outPolygonIDs: Array<PolygonId>):
      OutPolygonIDsProvider

  @JsName("GetNumVertexVertexInstances")
  public open fun getNumVertexVertexInstances(vertexId: VertexId): Number

  @JsName("GetNumVertexInstanceConnectedTriangles")
  public open fun getNumVertexInstanceConnectedTriangles(vertexInstanceId: VertexInstanceId): Number

  @JsName("GetNumVertexInstanceConnectedPolygons")
  public open fun getNumVertexInstanceConnectedPolygons(vertexInstanceId: VertexInstanceId): Number

  @JsName("GetNumVertexConnectedTriangles")
  public open fun getNumVertexConnectedTriangles(vertexId: VertexId): Number

  @JsName("GetNumVertexConnectedPolygons")
  public open fun getNumVertexConnectedPolygons(vertexId: VertexId): Number

  @JsName("GetNumVertexConnectedEdges")
  public open fun getNumVertexConnectedEdges(vertexId: VertexId): Number

  @JsName("GetNumPolygonVertices")
  public open fun getNumPolygonVertices(polygonId: PolygonId): Number

  @JsName("GetNumPolygonTriangles")
  public open fun getNumPolygonTriangles(polygonId: PolygonId): Number

  @JsName("GetNumPolygonInternalEdges")
  public open fun getNumPolygonInternalEdges(polygonId: PolygonId): Number

  @JsName("GetNumPolygonGroupPolygons")
  public open fun getNumPolygonGroupPolygons(polygonGroupId: PolygonGroupId): Number

  @JsName("GetNumEdgeConnectedTriangles")
  public open fun getNumEdgeConnectedTriangles(edgeId: EdgeId): Number

  @JsName("GetNumEdgeConnectedPolygons")
  public open fun getNumEdgeConnectedPolygons(edgeId: EdgeId): Number

  @JsName("GetEdgeVertices")
  public open fun getEdgeVertices(edgeId: EdgeId, outVertexIDs: Array<VertexId>):
      OutVertexIDsProvider

  @JsName("GetEdgeVertex")
  public open fun getEdgeVertex(edgeId: EdgeId, vertexNumber: Number): VertexId

  @JsName("GetEdgeCount")
  public open fun getEdgeCount(): Number

  @JsName("GetEdgeConnectedTriangles")
  public open fun getEdgeConnectedTriangles(edgeId: EdgeId,
      outConnectedTriangleIDs: Array<TriangleId>): OutConnectedTriangleIDsProvider

  @JsName("GetEdgeConnectedPolygons")
  public open fun getEdgeConnectedPolygons(edgeId: EdgeId,
      outConnectedPolygonIDs: Array<PolygonId>): OutConnectedPolygonIDsProvider

  @JsName("Empty")
  public open fun empty(): Unit

  @JsName("DeleteVertexInstance")
  public open fun deleteVertexInstance(vertexInstanceId: VertexInstanceId,
      orphanedVertices: Array<VertexId>): OrphanedVerticesProvider

  @JsName("DeleteVertex")
  public open fun deleteVertex(vertexId: VertexId): Unit

  @JsName("DeleteTriangle")
  public open fun deleteTriangle(
    triangleId: TriangleId,
    orphanedEdges: Array<EdgeId>,
    orphanedVertexInstances: Array<VertexInstanceId>,
    orphanedPolygonGroupsPtr: Array<PolygonGroupId>,
  ): Object226

  @JsName("DeletePolygonGroup")
  public open fun deletePolygonGroup(polygonGroupId: PolygonGroupId): Unit

  @JsName("DeletePolygon")
  public open fun deletePolygon(
    polygonId: PolygonId,
    orphanedEdges: Array<EdgeId>,
    orphanedVertexInstances: Array<VertexInstanceId>,
    orphanedPolygonGroups: Array<PolygonGroupId>,
  ): Object227

  @JsName("DeleteEdge")
  public open fun deleteEdge(edgeId: EdgeId, orphanedVertices: Array<VertexId>):
      OrphanedVerticesProvider

  @JsName("CreateVertexWithID")
  public open fun createVertexWithId(vertexId: VertexId): Unit

  @JsName("CreateVertexInstanceWithID")
  public open fun createVertexInstanceWithId(vertexInstanceId: VertexInstanceId,
      vertexId: VertexId): Unit

  @JsName("CreateVertexInstance")
  public open fun createVertexInstance(vertexId: VertexId): VertexInstanceId

  @JsName("CreateVertex")
  public open fun createVertex(): VertexId

  @JsName("CreateTriangleWithID")
  public open fun createTriangleWithId(
    triangleId: TriangleId,
    polygonGroupId: PolygonGroupId,
    vertexInstanceIDs: Array<VertexInstanceId>,
    newEdgeIDs: Array<EdgeId>,
  ): NewEdgeIDsProvider

  @JsName("CreateTriangle")
  public open fun createTriangle(
    polygonGroupId: PolygonGroupId,
    vertexInstanceIDs: Array<VertexInstanceId>,
    newEdgeIDs: Array<EdgeId>,
  ): Object230

  @JsName("CreatePolygonWithID")
  public open fun createPolygonWithId(
    polygonId: PolygonId,
    polygonGroupId: PolygonGroupId,
    vertexInstanceIDs: Array<VertexInstanceId>,
    newEdgeIDs: Array<EdgeId>,
  ): Object231

  @JsName("CreatePolygonGroupWithID")
  public open fun createPolygonGroupWithId(polygonGroupId: PolygonGroupId): Unit

  @JsName("CreatePolygonGroup")
  public open fun createPolygonGroup(): PolygonGroupId

  @JsName("CreatePolygon")
  public open fun createPolygon(
    polygonGroupId: PolygonGroupId,
    vertexInstanceIDs: Array<VertexInstanceId>,
    newEdgeIDs: Array<EdgeId>,
  ): Object232

  @JsName("CreateEdgeWithID")
  public open fun createEdgeWithId(
    edgeId: EdgeId,
    vertexId0: VertexId,
    vertexId1: VertexId,
  ): Unit

  @JsName("CreateEdge")
  public open fun createEdge(vertexId0: VertexId, vertexId1: VertexId): EdgeId

  @JsName("ComputePolygonTriangulation")
  public open fun computePolygonTriangulation(polygonId: PolygonId): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshDescriptionBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshDescriptionBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshDescriptionBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshDescriptionBase

    @JsName("C")
    public fun copy(other: UObject): MeshDescriptionBase

    @JsName("C")
    public fun copy(other: Any): MeshDescriptionBase
  }
}

public open external class MeshDescriptionBaseBulkData(
  outer: UObject,
) : UObject {
  @JsName("PreallocatedMeshDescription")
  public open var preallocatedMeshDescription: MeshDescriptionBase

  @JsName("MeshDescription")
  public open var meshDescription: MeshDescriptionBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshDescriptionBaseBulkData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshDescriptionBaseBulkData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshDescriptionBaseBulkData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshDescriptionBaseBulkData

    @JsName("C")
    public fun copy(other: UObject): MeshDescriptionBaseBulkData

    @JsName("C")
    public fun copy(other: Any): MeshDescriptionBaseBulkData
  }
}

public open external class StaticMeshDescriptionBulkData(
  outer: UObject,
) : MeshDescriptionBaseBulkData {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshDescriptionBulkData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshDescriptionBulkData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshDescriptionBulkData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshDescriptionBulkData

    @JsName("C")
    public fun copy(other: UObject): StaticMeshDescriptionBulkData

    @JsName("C")
    public fun copy(other: Any): StaticMeshDescriptionBulkData
  }
}

public open external class MeshBuildSettings {
  @JsName("bUseMikkTSpace")
  public open var useMikkTSpace: Boolean

  @JsName("bRecomputeNormals")
  public open var recomputeNormals: Boolean

  @JsName("bRecomputeTangents")
  public open var recomputeTangents: Boolean

  @JsName("bComputeWeightedNormals")
  public open var computeWeightedNormals: Boolean

  @JsName("bRemoveDegenerates")
  public open var removeDegenerates: Boolean

  @JsName("bBuildReversedIndexBuffer")
  public open var buildReversedIndexBuffer: Boolean

  @JsName("bUseHighPrecisionTangentBasis")
  public open var useHighPrecisionTangentBasis: Boolean

  @JsName("bUseFullPrecisionUVs")
  public open var useFullPrecisionUVs: Boolean

  @JsName("bUseBackwardsCompatibleF16TruncUVs")
  public open var useBackwardsCompatibleF16TruncUVs: Boolean

  @JsName("bGenerateLightmapUVs")
  public open var generateLightmapUVs: Boolean

  @JsName("bGenerateDistanceFieldAsIfTwoSided")
  public open var generateDistanceFieldAsIfTwoSided: Boolean

  @JsName("bSupportFaceRemap")
  public open var supportFaceRemap: Boolean

  @JsName("MinLightmapResolution")
  public open var minLightmapResolution: Number

  @JsName("SrcLightmapIndex")
  public open var srcLightmapIndex: Number

  @JsName("DstLightmapIndex")
  public open var dstLightmapIndex: Number

  @JsName("BuildScale")
  public open var buildScale: Number

  @JsName("BuildScale3D")
  public open var buildScale3d: Vector

  @JsName("DistanceFieldResolutionScale")
  public open var distanceFieldResolutionScale: Number

  @JsName("DistanceFieldBias")
  public open var distanceFieldBias: Number

  @JsName("DistanceFieldReplacementMesh")
  public open var distanceFieldReplacementMesh: StaticMesh

  @JsName("MaxLumenMeshCards")
  public open var maxLumenMeshCards: Number

  public open fun clone(): MeshBuildSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshBuildSettings

    @JsName("C")
    public fun copy(other: Any): MeshBuildSettings
  }
}

@JsName("EMeshFeatureImportance")
public external object MeshFeatureImportance {
  public var Off: String

  public var Lowest: String

  public var Low: String

  public var Normal: String

  public var High: String

  public var Highest: String

  @JsName("EMeshFeatureImportance_MAX")
  public var Max: String
}

@JsName("EStaticMeshReductionTerimationCriterion")
public external object StaticMeshReductionTerimationCriterion {
  public var Triangles: String

  public var Vertices: String

  public var Any: String

  @JsName("EStaticMeshReductionTerimationCriterion_MAX")
  public var Max: String
}

public open external class MeshReductionSettings {
  @JsName("PercentTriangles")
  public open var percentTriangles: Number

  @JsName("PercentVertices")
  public open var percentVertices: Number

  @JsName("MaxDeviation")
  public open var maxDeviation: Number

  @JsName("PixelError")
  public open var pixelError: Number

  @JsName("WeldingThreshold")
  public open var weldingThreshold: Number

  @JsName("HardAngleThreshold")
  public open var hardAngleThreshold: Number

  @JsName("BaseLODModel")
  public open var baseLodModel: Number

  @JsName("SilhouetteImportance")
  public open var silhouetteImportance: String

  @JsName("TextureImportance")
  public open var textureImportance: String

  @JsName("ShadingImportance")
  public open var shadingImportance: String

  @JsName("bRecalculateNormals")
  public open var recalculateNormals: Boolean

  @JsName("bGenerateUniqueLightmapUVs")
  public open var generateUniqueLightmapUVs: Boolean

  @JsName("bKeepSymmetry")
  public open var keepSymmetry: Boolean

  @JsName("bVisibilityAided")
  public open var visibilityAided: Boolean

  @JsName("bCullOccluded")
  public open var cullOccluded: Boolean

  @JsName("TerminationCriterion")
  public open var terminationCriterion: String

  @JsName("VisibilityAggressiveness")
  public open var visibilityAggressiveness: String

  @JsName("VertexColorImportance")
  public open var vertexColorImportance: String

  public open fun clone(): MeshReductionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshReductionSettings

    @JsName("C")
    public fun copy(other: Any): MeshReductionSettings
  }
}

public open external class StaticMeshSourceModel {
  @JsName("StaticMeshDescriptionBulkData")
  public open var staticMeshDescriptionBulkData: StaticMeshDescriptionBulkData

  @JsName("BuildSettings")
  public open var buildSettings: MeshBuildSettings

  @JsName("ReductionSettings")
  public open var reductionSettings: MeshReductionSettings

  @JsName("LODDistance")
  public open var lodDistance: Number

  @JsName("ScreenSize")
  public open var screenSize: PerPlatformFloat

  @JsName("SourceImportFilename")
  public open var sourceImportFilename: String

  @JsName("bImportWithBaseMesh")
  public open var importWithBaseMesh: Boolean

  public open fun clone(): StaticMeshSourceModel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticMeshSourceModel

    @JsName("C")
    public fun copy(other: Any): StaticMeshSourceModel
  }
}

public open external class MeshSectionInfoMap {
  @JsName("Map")
  public open var map: Any

  public open fun clone(): MeshSectionInfoMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshSectionInfoMap

    @JsName("C")
    public fun copy(other: Any): MeshSectionInfoMap
  }
}

public open external class MaterialRemapIndex {
  @JsName("ImportVersionKey")
  public open var importVersionKey: Any

  @JsName("MaterialRemap")
  public open var materialRemap: Array<Number>

  public open fun clone(): MaterialRemapIndex

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialRemapIndex

    @JsName("C")
    public fun copy(other: Any): MaterialRemapIndex
  }
}

public open external class MeshNaniteSettings {
  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("PositionPrecision")
  public open var positionPrecision: Number

  @JsName("TargetMinimumResidencyInKB")
  public open var targetMinimumResidencyInKb: Any

  @JsName("KeepPercentTriangles")
  public open var keepPercentTriangles: Number

  @JsName("TrimRelativeError")
  public open var trimRelativeError: Number

  @JsName("FallbackPercentTriangles")
  public open var fallbackPercentTriangles: Number

  @JsName("FallbackRelativeError")
  public open var fallbackRelativeError: Number

  public open fun clone(): MeshNaniteSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshNaniteSettings

    @JsName("C")
    public fun copy(other: Any): MeshNaniteSettings
  }
}

public open external class StaticMaterial {
  @JsName("MaterialInterface")
  public open var materialInterface: MaterialInterface

  @JsName("MaterialSlotName")
  public open var materialSlotName: String

  @JsName("ImportedMaterialSlotName")
  public open var importedMaterialSlotName: String

  @JsName("UVChannelData")
  public open var uvChannelData: MeshUvChannelInfo

  public open fun clone(): StaticMaterial

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticMaterial

    @JsName("C")
    public fun copy(other: Any): StaticMaterial
  }
}

public open external class AssetEditorOrbitCameraPosition {
  @JsName("bIsSet")
  public open var isSet: Boolean

  @JsName("CamOrbitPoint")
  public open var camOrbitPoint: Vector

  @JsName("CamOrbitZoom")
  public open var camOrbitZoom: Vector

  @JsName("CamOrbitRotation")
  public open var camOrbitRotation: Rotator

  public open fun clone(): AssetEditorOrbitCameraPosition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetEditorOrbitCameraPosition

    @JsName("C")
    public fun copy(other: Any): AssetEditorOrbitCameraPosition
  }
}

public open external class StaticMeshSocket(
  outer: UObject,
) : UObject {
  @JsName("SocketName")
  public open var socketName: String

  @JsName("RelativeLocation")
  public open var relativeLocation: Vector

  @JsName("RelativeRotation")
  public open var relativeRotation: Rotator

  @JsName("RelativeScale")
  public open var relativeScale: Vector

  @JsName("Tag")
  public open var tag: String

  @JsName("PreviewStaticMesh")
  public open var previewStaticMesh: StaticMesh

  @JsName("bSocketCreatedAtImport")
  public open var socketCreatedAtImport: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshSocket

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshSocket

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshSocket

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshSocket

    @JsName("C")
    public fun copy(other: UObject): StaticMeshSocket

    @JsName("C")
    public fun copy(other: Any): StaticMeshSocket
  }
}

public open external class NavCollisionBase(
  outer: UObject,
) : UObject {
  @JsName("bIsDynamicObstacle")
  public open var isDynamicObstacle: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavCollisionBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavCollisionBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavCollisionBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavCollisionBase

    @JsName("C")
    public fun copy(other: UObject): NavCollisionBase

    @JsName("C")
    public fun copy(other: Any): NavCollisionBase
  }
}

@JsName("T$233")
public external interface Object233 {
  @JsName("PolygonID_PlusX")
  public var polygonIdPlusX: PolygonId

  @JsName("PolygonID_MinusX")
  public var polygonIdMinusX: PolygonId

  @JsName("PolygonID_PlusY")
  public var polygonIdPlusY: PolygonId

  @JsName("PolygonID_MinusY")
  public var polygonIdMinusY: PolygonId

  @JsName("PolygonID_PlusZ")
  public var polygonIdPlusZ: PolygonId

  @JsName("PolygonID_MinusZ")
  public var polygonIdMinusZ: PolygonId
}

public open external class StaticMeshDescription(
  outer: UObject,
) : MeshDescriptionBase {
  @JsName("SetVertexInstanceUV")
  public open fun setVertexInstanceUv(
    vertexInstanceId: VertexInstanceId,
    UV: Vector2d,
    uvIndex: Number,
  ): Unit

  @JsName("SetPolygonGroupMaterialSlotName")
  public open fun setPolygonGroupMaterialSlotName(polygonGroupId: PolygonGroupId, slotName: String):
      Unit

  @JsName("GetVertexInstanceUV")
  public open fun getVertexInstanceUv(vertexInstanceId: VertexInstanceId, uvIndex: Number): Vector2d

  @JsName("CreateCube")
  public open fun createCube(
    center: Vector,
    halfExtents: Vector,
    polygonGroup: PolygonGroupId,
    polygonIdPlusX: PolygonId,
    polygonIdMinusX: PolygonId,
    polygonIdPlusY: PolygonId,
    polygonIdMinusY: PolygonId,
    polygonIdPlusZ: PolygonId,
    polygonIdMinusZ: PolygonId,
  ): Object233

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshDescription

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshDescription

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshDescription

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshDescription

    @JsName("C")
    public fun copy(other: UObject): StaticMeshDescription

    @JsName("C")
    public fun copy(other: Any): StaticMeshDescription
  }
}

public open external class MeshSectionInfo {
  @JsName("MaterialIndex")
  public open var materialIndex: Number

  @JsName("bEnableCollision")
  public open var enableCollision: Boolean

  @JsName("bCastShadow")
  public open var castShadow: Boolean

  @JsName("bVisibleInRayTracing")
  public open var visibleInRayTracing: Boolean

  @JsName("bForceOpaque")
  public open var forceOpaque: Boolean

  public open fun clone(): MeshSectionInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshSectionInfo

    @JsName("C")
    public fun copy(other: Any): MeshSectionInfo
  }
}

@JsName("T$234")
public external interface RawMeshProvider {
  @JsName("RawMesh")
  public var rawMesh: JavascriptRawMesh
}

public open external class JavascriptRawMesh {
  @JsName("FaceMaterialIndices")
  public open var faceMaterialIndices: Array<Number>

  @JsName("FaceSmoothingMasks")
  public open var faceSmoothingMasks: Array<Any>

  @JsName("VertexPositions")
  public open var vertexPositions: Array<Vector>

  @JsName("WedgeIndices")
  public open var wedgeIndices: Array<Any>

  @JsName("WedgeTangentX")
  public open var wedgeTangentX: Array<Vector>

  @JsName("WedgeTangentY")
  public open var wedgeTangentY: Array<Vector>

  @JsName("WedgeTangentZ")
  public open var wedgeTangentZ: Array<Vector>

  @JsName("WedgeTexCoords_0")
  public open var wedgeTexCoords0: Array<Vector2d>

  @JsName("WedgeTexCoords_1")
  public open var wedgeTexCoords1: Array<Vector2d>

  @JsName("WedgeTexCoords_2")
  public open var wedgeTexCoords2: Array<Vector2d>

  @JsName("WedgeTexCoords_3")
  public open var wedgeTexCoords3: Array<Vector2d>

  @JsName("WedgeTexCoords_4")
  public open var wedgeTexCoords4: Array<Vector2d>

  @JsName("WedgeTexCoords_5")
  public open var wedgeTexCoords5: Array<Vector2d>

  @JsName("WedgeTexCoords_6")
  public open var wedgeTexCoords6: Array<Vector2d>

  @JsName("WedgeTexCoords_7")
  public open var wedgeTexCoords7: Array<Vector2d>

  @JsName("WedgeColors")
  public open var wedgeColors: Array<Color>

  @JsName("MaterialIndexToImportIndex")
  public open var materialIndexToImportIndex: Array<Number>

  public open fun clone(): JavascriptRawMesh

  @JsName("CompactMaterialIndices")
  public open fun compactMaterialIndices(): RawMeshProvider

  @JsName("Empty")
  public open fun empty(): RawMeshProvider

  @JsName("GetWedgePosition")
  public open fun getWedgePosition(wedgeIndex: Number): Vector

  @JsName("IsValid")
  public open fun isValid(): Boolean

  @JsName("IsValidOrFixable")
  public open fun isValidOrFixable(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptRawMesh

    @JsName("C")
    public fun copy(other: Any): JavascriptRawMesh

    @JsName("CompactMaterialIndices")
    public fun compactMaterialIndices(rawMesh: JavascriptRawMesh): RawMeshProvider

    @JsName("Empty")
    public fun empty(rawMesh: JavascriptRawMesh): RawMeshProvider

    @JsName("GetWedgePosition")
    public fun getWedgePosition(rawMesh: JavascriptRawMesh, wedgeIndex: Number): Vector

    @JsName("IsValid")
    public fun isValid(rawMesh: JavascriptRawMesh): Boolean

    @JsName("IsValidOrFixable")
    public fun isValidOrFixable(rawMesh: JavascriptRawMesh): Boolean
  }
}

public open external class ProcMeshTangent {
  @JsName("TangentX")
  public open var tangentX: Vector

  @JsName("bFlipTangentY")
  public open var flipTangentY: Boolean

  public open fun clone(): ProcMeshTangent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ProcMeshTangent

    @JsName("C")
    public fun copy(other: Any): ProcMeshTangent
  }
}

@JsName("EScriptCollisionShapeType")
public external object ScriptCollisionShapeType {
  public var Box: String

  public var Sphere: String

  public var Capsule: String

  @JsName("NDOP10_X")
  public var Ndop10x: String

  @JsName("NDOP10_Y")
  public var Ndop10y: String

  @JsName("NDOP10_Z")
  public var Ndop10z: String

  @JsName("NDOP18")
  public var Ndop18: String

  @JsName("NDOP26")
  public var Ndop26: String

  @JsName("EScriptCollisionShapeType_MAX")
  public var Max: String
}

public open external class StaticMeshReductionSettings {
  @JsName("PercentTriangles")
  public open var percentTriangles: Number

  @JsName("ScreenSize")
  public open var screenSize: Number

  public open fun clone(): StaticMeshReductionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticMeshReductionSettings

    @JsName("C")
    public fun copy(other: Any): StaticMeshReductionSettings
  }
}

public open external class StaticMeshReductionOptions {
  @JsName("bAutoComputeLODScreenSize")
  public open var autoComputeLodScreenSize: Boolean

  @JsName("ReductionSettings")
  public open var reductionSettings: Array<StaticMeshReductionSettings>

  public open fun clone(): StaticMeshReductionOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticMeshReductionOptions

    @JsName("C")
    public fun copy(other: Any): StaticMeshReductionOptions
  }
}

@JsName("T$235")
public external interface QualityLevelMinimumLoDsProvider {
  @JsName("QualityLevelMinimumLODs")
  public var qualityLevelMinimumLoDs: Any
}

@JsName("T$236")
public external interface PlatformMinimumLoDsProvider {
  @JsName("PlatformMinimumLODs")
  public var platformMinimumLoDs: Any
}

@JsName("T$237")
public external interface OutMeshProvider {
  @JsName("OutMesh")
  public var outMesh: JavascriptRawMesh
}

@JsName("T$238")
public external interface InMeshProvider {
  @JsName("InMesh")
  public var inMesh: JavascriptRawMesh
}

@JsName("T$239")
public external interface Object239 {
  @JsName("Vertices")
  public var vertices: Array<Vector>

  @JsName("Triangles")
  public var triangles: Array<Number>

  @JsName("Normals")
  public var normals: Array<Vector>

  @JsName("UVs")
  public var uVs: Array<Vector2d>

  @JsName("Tangents")
  public var tangents: Array<ProcMeshTangent>
}

@JsName("T$240")
public external interface MeshOutBuildOptionsProvider {
  @JsName("OutBuildOptions")
  public var outBuildOptions: MeshBuildSettings
}

@JsName("T$241")
public external interface OutReductionOptionsProvider {
  @JsName("OutReductionOptions")
  public var outReductionOptions: MeshReductionSettings
}

public open external class StaticMesh(
  outer: UObject,
) : StreamableRenderAsset {
  @JsName("SourceModels")
  public open var sourceModels: Array<StaticMeshSourceModel>

  @JsName("HiResSourceModel")
  public open var hiResSourceModel: StaticMeshSourceModel

  @JsName("SectionInfoMap")
  public open var sectionInfoMap: MeshSectionInfoMap

  @JsName("OriginalSectionInfoMap")
  public open var originalSectionInfoMap: MeshSectionInfoMap

  @JsName("LODGroup")
  public open var lodGroup: String

  @JsName("NumStreamedLODs")
  public open var numStreamedLoDs: PerPlatformInt

  @JsName("ImportVersion")
  public open var importVersion: Number

  @JsName("MaterialRemapIndexPerImportVersion")
  public open var materialRemapIndexPerImportVersion: Array<MaterialRemapIndex>

  @JsName("LightmapUVVersion")
  public open var lightmapUvVersion: Number

  @JsName("bAutoComputeLODScreenSize")
  public open var autoComputeLodScreenSize: Boolean

  @JsName("Materials")
  public open var materials: Array<MaterialInterface>

  @JsName("NaniteSettings")
  public open var naniteSettings: MeshNaniteSettings

  @JsName("MinQualityLevelLOD")
  public open var minQualityLevelLod: PerQualityLevelInt

  @JsName("MinLOD")
  public open var minLod: PerPlatformInt

  @JsName("StaticMaterials")
  public open var staticMaterials: Array<StaticMaterial>

  @JsName("LightmapUVDensity")
  public open var lightmapUvDensity: Number

  @JsName("LightMapResolution")
  public open var lightMapResolution: Number

  @JsName("LightMapCoordinateIndex")
  public open var lightMapCoordinateIndex: Number

  @JsName("DistanceFieldSelfShadowBias")
  public open var distanceFieldSelfShadowBias: Number

  @JsName("BodySetup")
  public open var bodySetup: BodySetup

  @JsName("LODForCollision")
  public open var lodForCollision: Number

  @JsName("bGenerateMeshDistanceField")
  public open var generateMeshDistanceField: Boolean

  @JsName("bStripComplexCollisionForConsole")
  public open var stripComplexCollisionForConsole: Boolean

  @JsName("bHasNavigationData")
  public open var hasNavigationData: Boolean

  @JsName("bSupportUniformlyDistributedSampling")
  public open var supportUniformlyDistributedSampling: Boolean

  @JsName("bSupportPhysicalMaterialMasks")
  public open var supportPhysicalMaterialMasks: Boolean

  @JsName("bSupportRayTracing")
  public open var supportRayTracing: Boolean

  @JsName("bDoFastBuild")
  public open var doFastBuild: Boolean

  @JsName("bIsBuiltAtRuntime")
  public open var isBuiltAtRuntime: Boolean

  @JsName("bAllowCPUAccess")
  public open var allowCpuAccess: Boolean

  @JsName("bSupportGpuUniformlyDistributedSampling")
  public open var supportGpuUniformlyDistributedSampling: Boolean

  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("SourceFilePath")
  public open var sourceFilePath: String

  @JsName("SourceFileTimestamp")
  public open var sourceFileTimestamp: String

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("EditorCameraPosition")
  public open var editorCameraPosition: AssetEditorOrbitCameraPosition

  @JsName("bCustomizedCollision")
  public open var customizedCollision: Boolean

  @JsName("Sockets")
  public open var sockets: Array<StaticMeshSocket>

  @JsName("PositiveBoundsExtension")
  public open var positiveBoundsExtension: Vector

  @JsName("NegativeBoundsExtension")
  public open var negativeBoundsExtension: Vector

  @JsName("ExtendedBounds")
  public open var extendedBounds: BoxSphereBounds

  @JsName("ElementToIgnoreForTexFactor")
  public open var elementToIgnoreForTexFactor: Number

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("EditableMesh")
  public open var editableMesh: UObject

  @JsName("ComplexCollisionMesh")
  public open var complexCollisionMesh: StaticMesh

  @JsName("NavCollision")
  public open var navCollision: NavCollisionBase

  @JsName("SetStaticMaterials")
  public open fun setStaticMaterials(inStaticMaterials: Array<StaticMaterial>): Unit

  @JsName("SetNumSourceModels")
  public open fun setNumSourceModels(num: Number): Unit

  @JsName("SetMinimumLODForPlatforms")
  public open fun setMinimumLodForPlatforms(platformMinimumLoDs: Any): Unit

  @JsName("SetMinimumLODForPlatform")
  public open fun setMinimumLodForPlatform(platformName: String, inMinLod: Number): Unit

  @JsName("SetMaterial")
  public open fun setMaterial(materialIndex: Number, newMaterial: MaterialInterface): Unit

  @JsName("RemoveSocket")
  public open fun removeSocket(socket: StaticMeshSocket): Unit

  @JsName("GetStaticMeshDescription")
  public open fun getStaticMeshDescription(lodIndex: Number): StaticMeshDescription

  @JsName("GetStaticMaterials")
  public open fun getStaticMaterials(): Array<StaticMaterial>

  @JsName("GetNumSections")
  public open fun getNumSections(inLod: Number): Number

  @JsName("GetNumLODs")
  public open fun getNumLoDs(): Number

  @JsName("GetMinimumLODForQualityLevels")
  public open fun getMinimumLodForQualityLevels(qualityLevelMinimumLoDs: Any):
      QualityLevelMinimumLoDsProvider

  @JsName("GetMinimumLODForQualityLevel")
  public open fun getMinimumLodForQualityLevel(qualityLevel: String): Number

  @JsName("GetMinimumLODForPlatforms")
  public open fun getMinimumLodForPlatforms(platformMinimumLoDs: Any): PlatformMinimumLoDsProvider

  @JsName("GetMinimumLODForPlatform")
  public open fun getMinimumLodForPlatform(platformName: String): Number

  @JsName("GetMaterialIndex")
  public open fun getMaterialIndex(materialSlotName: String): Number

  @JsName("GetMaterial")
  public open fun getMaterial(materialIndex: Number): MaterialInterface

  @JsName("GetBounds")
  public open fun getBounds(): BoxSphereBounds

  @JsName("GetBoundingBox")
  public open fun getBoundingBox(): Box

  @JsName("FindSocket")
  public open fun findSocket(inSocketName: String): StaticMeshSocket

  @JsName("BuildFromStaticMeshDescriptions")
  public open fun buildFromStaticMeshDescriptions(
    staticMeshDescriptions: Array<StaticMeshDescription>,
    buildSimpleCollision: Boolean,
    fastBuild: Boolean,
  ): Unit

  @JsName("AddSocket")
  public open fun addSocket(socket: StaticMeshSocket): Unit

  @JsName("AddMaterial")
  public open fun addMaterial(material: MaterialInterface): String

  @JsName("Build")
  public open fun build(): Unit

  @JsName("GetPhysicsBodySetupFromStaticMesh")
  public open fun getPhysicsBodySetupFromStaticMesh(): BodySetup

  @JsName("GetSectionInfo")
  public open fun getSectionInfo(lodIndex: Number, sectionIndex: Number): MeshSectionInfo

  @JsName("LoadRawMesh")
  public open fun loadRawMesh(sourceModelIndex: Number, outMesh: JavascriptRawMesh): OutMeshProvider

  @JsName("SaveRawMesh")
  public open fun saveRawMesh(sourceModelIndex: Number, inMesh: JavascriptRawMesh): InMeshProvider

  @JsName("SetSectionInfo")
  public open fun setSectionInfo(
    lodIndex: Number,
    sectionIndex: Number,
    info: MeshSectionInfo,
  ): Unit

  @JsName("GetSectionFromStaticMesh")
  public open fun getSectionFromStaticMesh(
    lodIndex: Number,
    sectionIndex: Number,
    vertices: Array<Vector>,
    triangles: Array<Number>,
    normals: Array<Vector>,
    uVs: Array<Vector2d>,
    tangents: Array<ProcMeshTangent>,
  ): Object239

  @JsName("AddSimpleCollisions")
  public open fun addSimpleCollisions(shapeType: String): Number

  @JsName("AddSimpleCollisionsWithNotification")
  public open fun addSimpleCollisionsWithNotification(shapeType: String, applyChanges: Boolean):
      Number

  @JsName("AddUVChannel")
  public open fun addUvChannel(lodIndex: Number): Boolean

  @JsName("EnableSectionCastShadow")
  public open fun enableSectionCastShadow(
    castShadow: Boolean,
    lodIndex: Number,
    sectionIndex: Number,
  ): Unit

  @JsName("EnableSectionCollision")
  public open fun enableSectionCollision(
    collisionEnabled: Boolean,
    lodIndex: Number,
    sectionIndex: Number,
  ): Unit

  @JsName("GenerateBoxUVChannel")
  public open fun generateBoxUvChannel(
    lodIndex: Number,
    uvChannelIndex: Number,
    position: Vector,
    orientation: Rotator,
    size: Vector,
  ): Boolean

  @JsName("GenerateCylindricalUVChannel")
  public open fun generateCylindricalUvChannel(
    lodIndex: Number,
    uvChannelIndex: Number,
    position: Vector,
    orientation: Rotator,
    tiling: Vector2d,
  ): Boolean

  @JsName("GeneratePlanarUVChannel")
  public open fun generatePlanarUvChannel(
    lodIndex: Number,
    uvChannelIndex: Number,
    position: Vector,
    orientation: Rotator,
    tiling: Vector2d,
  ): Boolean

  @JsName("GetCollisionComplexity")
  public open fun getCollisionComplexity(): String

  @JsName("GetConvexCollisionCount")
  public open fun getConvexCollisionCount(): Number

  @JsName("GetLodBuildSettings")
  public open fun getLodBuildSettings(lodIndex: Number, outBuildOptions: MeshBuildSettings):
      MeshOutBuildOptionsProvider

  @JsName("GetLodCount")
  public open fun getLodCount(): Number

  @JsName("GetLodReductionSettings")
  public open fun getLodReductionSettings(lodIndex: Number,
      outReductionOptions: MeshReductionSettings): OutReductionOptionsProvider

  @JsName("GetLodScreenSizes")
  public open fun getLodScreenSizes(): Array<Number>

  @JsName("GetNumberMaterials")
  public open fun getNumberMaterials(): Number

  @JsName("GetNumberVerts")
  public open fun getNumberVerts(lodIndex: Number): Number

  @JsName("GetNumUVChannels")
  public open fun getNumUvChannels(lodIndex: Number): Number

  @JsName("GetSimpleCollisionCount")
  public open fun getSimpleCollisionCount(): Number

  @JsName("HasVertexColors")
  public open fun hasVertexColors(): Boolean

  @JsName("ImportLOD")
  public open fun importLod(lodIndex: Number, sourceFilename: String): Number

  @JsName("InsertUVChannel")
  public open fun insertUvChannel(lodIndex: Number, uvChannelIndex: Number): Boolean

  @JsName("IsSectionCollisionEnabled")
  public open fun isSectionCollisionEnabled(lodIndex: Number, sectionIndex: Number): Boolean

  @JsName("ReimportAllCustomLODs")
  public open fun reimportAllCustomLoDs(): Boolean

  @JsName("RemoveCollisions")
  public open fun removeCollisions(): Boolean

  @JsName("RemoveCollisionsWithNotification")
  public open fun removeCollisionsWithNotification(applyChanges: Boolean): Boolean

  @JsName("RemoveLods")
  public open fun removeLods(): Boolean

  @JsName("RemoveUVChannel")
  public open fun removeUvChannel(lodIndex: Number, uvChannelIndex: Number): Boolean

  @JsName("SetAllowCPUAccess")
  public open fun setAllowCpuAccess(allowCpuAccess: Boolean): Unit

  @JsName("SetConvexDecompositionCollisions")
  public open fun setConvexDecompositionCollisions(
    hullCount: Number,
    maxHullVerts: Number,
    hullPrecision: Number,
  ): Boolean

  @JsName("SetConvexDecompositionCollisionsWithNotification")
  public open fun setConvexDecompositionCollisionsWithNotification(
    hullCount: Number,
    maxHullVerts: Number,
    hullPrecision: Number,
    applyChanges: Boolean,
  ): Boolean

  @JsName("SetGenerateLightmapUVs")
  public open fun setGenerateLightmapUVs(generateLightmapUVs: Boolean): Boolean

  @JsName("SetLodBuildSettings")
  public open fun setLodBuildSettings(lodIndex: Number, buildOptions: MeshBuildSettings): Unit

  @JsName("SetLodFromStaticMesh")
  public open fun setLodFromStaticMesh(
    destinationLodIndex: Number,
    sourceStaticMesh: StaticMesh,
    sourceLodIndex: Number,
    reuseExistingMaterialSlots: Boolean,
  ): Number

  @JsName("SetLodReductionSettings")
  public open fun setLodReductionSettings(lodIndex: Number,
      reductionOptions: MeshReductionSettings): Unit

  @JsName("SetLods")
  public open fun setLods(reductionOptions: StaticMeshReductionOptions): Number

  @JsName("SetLodsWithNotification")
  public open fun setLodsWithNotification(reductionOptions: StaticMeshReductionOptions,
      applyChanges: Boolean): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMesh

    @JsName("CreateStaticMeshDescription")
    public fun createStaticMeshDescription(outer: UObject): StaticMeshDescription

    @JsName("C")
    public fun copy(other: UObject): StaticMesh

    @JsName("C")
    public fun copy(other: Any): StaticMesh

    @JsName("Build")
    public fun build(staticMesh: StaticMesh): Unit

    @JsName("GetPhysicsBodySetupFromStaticMesh")
    public fun getPhysicsBodySetupFromStaticMesh(inStaticMesh: StaticMesh): BodySetup

    @JsName("GetSectionInfo")
    public fun getSectionInfo(
      staticMesh: StaticMesh,
      lodIndex: Number,
      sectionIndex: Number,
    ): MeshSectionInfo

    @JsName("LoadRawMesh")
    public fun loadRawMesh(
      staticMesh: StaticMesh,
      sourceModelIndex: Number,
      outMesh: JavascriptRawMesh,
    ): OutMeshProvider

    @JsName("SaveRawMesh")
    public fun saveRawMesh(
      staticMesh: StaticMesh,
      sourceModelIndex: Number,
      inMesh: JavascriptRawMesh,
    ): InMeshProvider

    @JsName("SetSectionInfo")
    public fun setSectionInfo(
      staticMesh: StaticMesh,
      lodIndex: Number,
      sectionIndex: Number,
      info: MeshSectionInfo,
    ): Unit

    @JsName("GetSectionFromStaticMesh")
    public fun getSectionFromStaticMesh(
      inMesh: StaticMesh,
      lodIndex: Number,
      sectionIndex: Number,
      vertices: Array<Vector>,
      triangles: Array<Number>,
      normals: Array<Vector>,
      uVs: Array<Vector2d>,
      tangents: Array<ProcMeshTangent>,
    ): Object239

    @JsName("AddSimpleCollisions")
    public fun addSimpleCollisions(staticMesh: StaticMesh, shapeType: String): Number

    @JsName("AddSimpleCollisionsWithNotification")
    public fun addSimpleCollisionsWithNotification(
      staticMesh: StaticMesh,
      shapeType: String,
      applyChanges: Boolean,
    ): Number

    @JsName("AddUVChannel")
    public fun addUvChannel(staticMesh: StaticMesh, lodIndex: Number): Boolean

    @JsName("EnableSectionCastShadow")
    public fun enableSectionCastShadow(
      staticMesh: StaticMesh,
      castShadow: Boolean,
      lodIndex: Number,
      sectionIndex: Number,
    ): Unit

    @JsName("EnableSectionCollision")
    public fun enableSectionCollision(
      staticMesh: StaticMesh,
      collisionEnabled: Boolean,
      lodIndex: Number,
      sectionIndex: Number,
    ): Unit

    @JsName("GenerateBoxUVChannel")
    public fun generateBoxUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
      position: Vector,
      orientation: Rotator,
      size: Vector,
    ): Boolean

    @JsName("GenerateCylindricalUVChannel")
    public fun generateCylindricalUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
      position: Vector,
      orientation: Rotator,
      tiling: Vector2d,
    ): Boolean

    @JsName("GeneratePlanarUVChannel")
    public fun generatePlanarUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
      position: Vector,
      orientation: Rotator,
      tiling: Vector2d,
    ): Boolean

    @JsName("GetCollisionComplexity")
    public fun getCollisionComplexity(staticMesh: StaticMesh): String

    @JsName("GetConvexCollisionCount")
    public fun getConvexCollisionCount(staticMesh: StaticMesh): Number

    @JsName("GetLodBuildSettings")
    public fun getLodBuildSettings(
      staticMesh: StaticMesh,
      lodIndex: Number,
      outBuildOptions: MeshBuildSettings,
    ): MeshOutBuildOptionsProvider

    @JsName("GetLodCount")
    public fun getLodCount(staticMesh: StaticMesh): Number

    @JsName("GetLodReductionSettings")
    public fun getLodReductionSettings(
      staticMesh: StaticMesh,
      lodIndex: Number,
      outReductionOptions: MeshReductionSettings,
    ): OutReductionOptionsProvider

    @JsName("GetLodScreenSizes")
    public fun getLodScreenSizes(staticMesh: StaticMesh): Array<Number>

    @JsName("GetNumberMaterials")
    public fun getNumberMaterials(staticMesh: StaticMesh): Number

    @JsName("GetNumberVerts")
    public fun getNumberVerts(staticMesh: StaticMesh, lodIndex: Number): Number

    @JsName("GetNumUVChannels")
    public fun getNumUvChannels(staticMesh: StaticMesh, lodIndex: Number): Number

    @JsName("GetSimpleCollisionCount")
    public fun getSimpleCollisionCount(staticMesh: StaticMesh): Number

    @JsName("HasVertexColors")
    public fun hasVertexColors(staticMesh: StaticMesh): Boolean

    @JsName("ImportLOD")
    public fun importLod(
      baseStaticMesh: StaticMesh,
      lodIndex: Number,
      sourceFilename: String,
    ): Number

    @JsName("InsertUVChannel")
    public fun insertUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
    ): Boolean

    @JsName("IsSectionCollisionEnabled")
    public fun isSectionCollisionEnabled(
      staticMesh: StaticMesh,
      lodIndex: Number,
      sectionIndex: Number,
    ): Boolean

    @JsName("ReimportAllCustomLODs")
    public fun reimportAllCustomLoDs(staticMesh: StaticMesh): Boolean

    @JsName("RemoveCollisions")
    public fun removeCollisions(staticMesh: StaticMesh): Boolean

    @JsName("RemoveCollisionsWithNotification")
    public fun removeCollisionsWithNotification(staticMesh: StaticMesh, applyChanges: Boolean):
        Boolean

    @JsName("RemoveLods")
    public fun removeLods(staticMesh: StaticMesh): Boolean

    @JsName("RemoveUVChannel")
    public fun removeUvChannel(
      staticMesh: StaticMesh,
      lodIndex: Number,
      uvChannelIndex: Number,
    ): Boolean

    @JsName("SetAllowCPUAccess")
    public fun setAllowCpuAccess(staticMesh: StaticMesh, allowCpuAccess: Boolean): Unit

    @JsName("SetConvexDecompositionCollisions")
    public fun setConvexDecompositionCollisions(
      staticMesh: StaticMesh,
      hullCount: Number,
      maxHullVerts: Number,
      hullPrecision: Number,
    ): Boolean

    @JsName("SetConvexDecompositionCollisionsWithNotification")
    public fun setConvexDecompositionCollisionsWithNotification(
      staticMesh: StaticMesh,
      hullCount: Number,
      maxHullVerts: Number,
      hullPrecision: Number,
      applyChanges: Boolean,
    ): Boolean

    @JsName("SetGenerateLightmapUVs")
    public fun setGenerateLightmapUVs(staticMesh: StaticMesh, generateLightmapUVs: Boolean): Boolean

    @JsName("SetLodBuildSettings")
    public fun setLodBuildSettings(
      staticMesh: StaticMesh,
      lodIndex: Number,
      buildOptions: MeshBuildSettings,
    ): Unit

    @JsName("SetLodFromStaticMesh")
    public fun setLodFromStaticMesh(
      destinationStaticMesh: StaticMesh,
      destinationLodIndex: Number,
      sourceStaticMesh: StaticMesh,
      sourceLodIndex: Number,
      reuseExistingMaterialSlots: Boolean,
    ): Number

    @JsName("SetLodReductionSettings")
    public fun setLodReductionSettings(
      staticMesh: StaticMesh,
      lodIndex: Number,
      reductionOptions: MeshReductionSettings,
    ): Unit

    @JsName("SetLods")
    public fun setLods(staticMesh: StaticMesh, reductionOptions: StaticMeshReductionOptions): Number

    @JsName("SetLodsWithNotification")
    public fun setLodsWithNotification(
      staticMesh: StaticMesh,
      reductionOptions: StaticMeshReductionOptions,
      applyChanges: Boolean,
    ): Number
  }
}

@JsName("T$243")
public external interface DesiredViewProvider {
  @JsName("DesiredView")
  public var desiredView: MinimalViewInfo
}

public open external class CameraComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("FieldOfView")
  public open var fieldOfView: Number

  @JsName("OrthoWidth")
  public open var orthoWidth: Number

  @JsName("OrthoNearClipPlane")
  public open var orthoNearClipPlane: Number

  @JsName("OrthoFarClipPlane")
  public open var orthoFarClipPlane: Number

  @JsName("AspectRatio")
  public open var aspectRatio: Number

  @JsName("bConstrainAspectRatio")
  public open var constrainAspectRatio: Boolean

  @JsName("bUseFieldOfViewForLOD")
  public open var useFieldOfViewForLod: Boolean

  @JsName("bDrawFrustumAllowed")
  public open var drawFrustumAllowed: Boolean

  @JsName("bCameraMeshHiddenInGame")
  public open var cameraMeshHiddenInGame: Boolean

  @JsName("bLockToHmd")
  public open var lockToHmd: Boolean

  @JsName("bUsePawnControlRotation")
  public open var usePawnControlRotation: Boolean

  @JsName("ProjectionMode")
  public open var projectionMode: String

  @JsName("CameraMesh")
  public open var cameraMesh: StaticMesh

  @JsName("PostProcessBlendWeight")
  public open var postProcessBlendWeight: Number

  @JsName("PostProcessSettings")
  public open var postProcessSettings: PostProcessSettings

  @JsName("bUseControllerViewRotation")
  public open var useControllerViewRotation: Boolean

  @JsName("SetUseFieldOfViewForLOD")
  public open fun setUseFieldOfViewForLod(inUseFieldOfViewForLod: Boolean): Unit

  @JsName("SetProjectionMode")
  public open fun setProjectionMode(inProjectionMode: String): Unit

  @JsName("SetPostProcessBlendWeight")
  public open fun setPostProcessBlendWeight(inPostProcessBlendWeight: Number): Unit

  @JsName("SetOrthoWidth")
  public open fun setOrthoWidth(inOrthoWidth: Number): Unit

  @JsName("SetOrthoNearClipPlane")
  public open fun setOrthoNearClipPlane(inOrthoNearClipPlane: Number): Unit

  @JsName("SetOrthoFarClipPlane")
  public open fun setOrthoFarClipPlane(inOrthoFarClipPlane: Number): Unit

  @JsName("SetFieldOfView")
  public open fun setFieldOfView(inFieldOfView: Number): Unit

  @JsName("SetConstraintAspectRatio")
  public open fun setConstraintAspectRatio(inConstrainAspectRatio: Boolean): Unit

  @JsName("SetAspectRatio")
  public open fun setAspectRatio(inAspectRatio: Number): Unit

  @JsName("OnCameraMeshHiddenChanged")
  public open fun onCameraMeshHiddenChanged(): Unit

  @JsName("GetFilmbackText")
  public open fun getFilmbackText(): String

  @JsName("GetCameraView")
  public open fun getCameraView(deltaTime: Number, desiredView: MinimalViewInfo):
      DesiredViewProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CameraComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CameraComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraComponent

    @JsName("C")
    public fun copy(other: UObject): CameraComponent

    @JsName("C")
    public fun copy(other: Any): CameraComponent
  }
}

public open external class CameraActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("AutoActivateForPlayer")
  public open var autoActivateForPlayer: String

  @JsName("CameraComponent")
  public open var cameraComponent: CameraComponent

  @JsName("SceneComponent")
  public open var sceneComponent: SceneComponent

  @JsName("bConstrainAspectRatio")
  public open var constrainAspectRatio: Boolean

  @JsName("AspectRatio")
  public open var aspectRatio: Number

  @JsName("FOVAngle")
  public open var fovAngle: Number

  @JsName("PostProcessBlendWeight")
  public open var postProcessBlendWeight: Number

  @JsName("PostProcessSettings")
  public open var postProcessSettings: PostProcessSettings

  @JsName("GetAutoActivatePlayerIndex")
  public open fun getAutoActivatePlayerIndex(): Number

  @JsName("DrawDebugCamera")
  public open fun drawDebugCamera(cameraColor: LinearColor, duration: Number): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraActor

    @JsName("C")
    public fun copy(other: UObject): CameraActor

    @JsName("C")
    public fun copy(other: Any): CameraActor

    @JsName("DrawDebugCamera")
    public fun drawDebugCamera(
      cameraActor: CameraActor,
      cameraColor: LinearColor,
      duration: Number,
    ): Unit
  }
}

@JsName("EAttachmentRule")
public external object AttachmentRule {
  public var KeepRelative: String

  public var KeepWorld: String

  public var SnapToTarget: String

  @JsName("EAttachmentRule_MAX")
  public var Max: String
}

@JsName("FXSystemAsset")
public open external class FxSystemAsset(
  outer: UObject,
) : UObject {
  @JsName("MaxPoolSize")
  public open var maxPoolSize: Any

  @JsName("PoolPrimeSize")
  public open var poolPrimeSize: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FxSystemAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FxSystemAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FxSystemAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FxSystemAsset

    @JsName("C")
    public fun copy(other: UObject): FxSystemAsset

    @JsName("C")
    public fun copy(other: Any): FxSystemAsset
  }
}

@JsName("FXSystemComponent")
public open external class FxSystemComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("SetVectorParameter")
  public open fun setVectorParameter(parameterName: String, param: Vector): Unit

  @JsName("SetUseAutoManageAttachment")
  public open fun setUseAutoManageAttachment(autoManage: Boolean): Unit

  @JsName("SetIntParameter")
  public open fun setIntParameter(parameterName: String, param: Number): Unit

  @JsName("SetFloatParameter")
  public open fun setFloatParameter(parameterName: String, param: Number): Unit

  @JsName("SetEmitterEnable")
  public open fun setEmitterEnable(emitterName: String, newEnableState: Boolean): Unit

  @JsName("SetColorParameter")
  public open fun setColorParameter(parameterName: String, param: LinearColor): Unit

  @JsName("SetBoolParameter")
  public open fun setBoolParameter(parameterName: String, param: Boolean): Unit

  @JsName("SetAutoAttachmentParameters")
  public open fun setAutoAttachmentParameters(
    parent: SceneComponent,
    socketName: String,
    locationRule: String,
    rotationRule: String,
    scaleRule: String,
  ): Unit

  @JsName("SetActorParameter")
  public open fun setActorParameter(parameterName: String, param: Actor): Unit

  @JsName("ReleaseToPool")
  public open fun releaseToPool(): Unit

  @JsName("GetFXSystemAsset")
  public open fun getFxSystemAsset(): FxSystemAsset

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FxSystemComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FxSystemComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FxSystemComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FxSystemComponent

    @JsName("C")
    public fun copy(other: UObject): FxSystemComponent

    @JsName("C")
    public fun copy(other: Any): FxSystemComponent
  }
}

@JsName("EEmitterRenderMode")
public external object EmitterRenderMode {
  @JsName("ERM_Normal")
  public var Normal: String

  @JsName("ERM_Point")
  public var Point: String

  @JsName("ERM_Cross")
  public var Cross: String

  @JsName("ERM_LightsOnly")
  public var LightsOnly: String

  @JsName("ERM_None")
  public var None: String

  @JsName("ERM_MAX")
  public var Max: String
}

@JsName("EParticleSignificanceLevel")
public external object ParticleSignificanceLevel {
  public var Low: String

  public var Medium: String

  public var High: String

  public var Critical: String

  public var Num: String

  @JsName("EParticleSignificanceLevel_MAX")
  public var Max: String
}

public open external class ParticleModule(
  outer: UObject,
) : UObject {
  @JsName("bSpawnModule")
  public open var spawnModule: Boolean

  @JsName("bUpdateModule")
  public open var updateModule: Boolean

  @JsName("bFinalUpdateModule")
  public open var finalUpdateModule: Boolean

  @JsName("bUpdateForGPUEmitter")
  public open var updateForGpuEmitter: Boolean

  @JsName("bCurvesAsColor")
  public open var curvesAsColor: Boolean

  @JsName("b3DDrawMode")
  public open var b3dDrawMode: Boolean

  @JsName("bSupported3DDrawMode")
  public open var supported3dDrawMode: Boolean

  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("bEditable")
  public open var editable: Boolean

  @JsName("LODDuplicate")
  public open var lodDuplicate: Boolean

  @JsName("bSupportsRandomSeed")
  public open var supportsRandomSeed: Boolean

  @JsName("bRequiresLoopingNotification")
  public open var requiresLoopingNotification: Boolean

  @JsName("LODValidity")
  public open var lodValidity: Number

  @JsName("ModuleEditorColor")
  public open var moduleEditorColor: Color

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModule

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModule

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModule

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModule

    @JsName("C")
    public fun copy(other: UObject): ParticleModule

    @JsName("C")
    public fun copy(other: Any): ParticleModule
  }
}

@JsName("EParticleScreenAlignment")
public external object ParticleScreenAlignment {
  @JsName("PSA_FacingCameraPosition")
  public var FacingCameraPosition: String

  @JsName("PSA_Square")
  public var Square: String

  @JsName("PSA_Rectangle")
  public var Rectangle: String

  @JsName("PSA_Velocity")
  public var Velocity: String

  @JsName("PSA_AwayFromCenter")
  public var AwayFromCenter: String

  @JsName("PSA_TypeSpecific")
  public var TypeSpecific: String

  @JsName("PSA_FacingCameraDistanceBlend")
  public var FacingCameraDistanceBlend: String

  @JsName("PSA_MAX")
  public var Max: String
}

@JsName("EParticleSortMode")
public external object ParticleSortMode {
  @JsName("PSORTMODE_None")
  public var None: String

  @JsName("PSORTMODE_ViewProjDepth")
  public var ViewProjDepth: String

  @JsName("PSORTMODE_DistanceToView")
  public var DistanceToView: String

  @JsName("PSORTMODE_Age_OldestFirst")
  public var AgeOldestFirst: String

  @JsName("PSORTMODE_Age_NewestFirst")
  public var AgeNewestFirst: String

  @JsName("PSORTMODE_MAX")
  public var Max: String
}

public open external class DistributionLookupTable {
  @JsName("TimeScale")
  public open var timeScale: Number

  @JsName("TimeBias")
  public open var timeBias: Number

  @JsName("Values")
  public open var values: Array<Number>

  @JsName("Op")
  public open var op: Number

  @JsName("EntryCount")
  public open var entryCount: Number

  @JsName("EntryStride")
  public open var entryStride: Number

  @JsName("SubEntryStride")
  public open var subEntryStride: Number

  @JsName("LockFlag")
  public open var lockFlag: Number

  public open fun clone(): DistributionLookupTable

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DistributionLookupTable

    @JsName("C")
    public fun copy(other: Any): DistributionLookupTable
  }
}

public open external class RawDistribution {
  @JsName("Table")
  public open var table: DistributionLookupTable

  public open fun clone(): RawDistribution

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RawDistribution

    @JsName("C")
    public fun copy(other: Any): RawDistribution
  }
}

public open external class Distribution(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Distribution

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Distribution

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Distribution

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Distribution

    @JsName("C")
    public fun copy(other: UObject): Distribution

    @JsName("C")
    public fun copy(other: Any): Distribution
  }
}

public open external class DistributionFloat(
  outer: UObject,
) : Distribution {
  @JsName("bCanBeBaked")
  public open var canBeBaked: Boolean

  @JsName("bBakedDataSuccesfully")
  public open var bakedDataSuccesfully: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionFloat

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionFloat

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionFloat

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionFloat

    @JsName("C")
    public fun copy(other: UObject): DistributionFloat

    @JsName("C")
    public fun copy(other: Any): DistributionFloat
  }
}

public open external class RawDistributionFloat : RawDistribution {
  @JsName("MinValue")
  public open var minValue: Number

  @JsName("MaxValue")
  public open var maxValue: Number

  @JsName("Distribution")
  public open var distribution: DistributionFloat

  public override fun clone(): RawDistributionFloat

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RawDistributionFloat

    @JsName("C")
    public fun copy(other: Any): RawDistributionFloat
  }
}

public open external class ParticleBurst {
  @JsName("Count")
  public open var count: Number

  @JsName("CountLow")
  public open var countLow: Number

  @JsName("Time")
  public open var time: Number

  public open fun clone(): ParticleBurst

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParticleBurst

    @JsName("C")
    public fun copy(other: Any): ParticleBurst
  }
}

@JsName("EParticleSubUVInterpMethod")
public external object ParticleSubUVInterpMethod {
  @JsName("PSUVIM_None")
  public var None: String

  @JsName("PSUVIM_Linear")
  public var Linear: String

  @JsName("PSUVIM_Linear_Blend")
  public var LinearBlend: String

  @JsName("PSUVIM_Random")
  public var Random: String

  @JsName("PSUVIM_Random_Blend")
  public var RandomBlend: String

  @JsName("PSUVIM_MAX")
  public var Max: String
}

@JsName("EParticleBurstMethod")
public external object ParticleBurstMethod {
  @JsName("EPBM_Instant")
  public var Instant: String

  @JsName("EPBM_Interpolated")
  public var Interpolated: String

  @JsName("EPBM_MAX")
  public var Max: String
}

@JsName("EOpacitySourceMode")
public external object OpacitySourceMode {
  @JsName("OSM_Alpha")
  public var Alpha: String

  @JsName("OSM_ColorBrightness")
  public var ColorBrightness: String

  @JsName("OSM_RedChannel")
  public var RedChannel: String

  @JsName("OSM_GreenChannel")
  public var GreenChannel: String

  @JsName("OSM_BlueChannel")
  public var BlueChannel: String

  @JsName("OSM_MAX")
  public var Max: String
}

@JsName("EEmitterNormalsMode")
public external object EmitterNormalsMode {
  @JsName("ENM_CameraFacing")
  public var CameraFacing: String

  @JsName("ENM_Spherical")
  public var Spherical: String

  @JsName("ENM_Cylindrical")
  public var Cylindrical: String

  @JsName("ENM_MAX")
  public var Max: String
}

@JsName("EParticleUVFlipMode")
public external object ParticleUVFlipMode {
  public var None: String

  @JsName("FlipUV")
  public var FlipUv: String

  public var FlipUOnly: String

  public var FlipVOnly: String

  @JsName("RandomFlipUV")
  public var RandomFlipUv: String

  public var RandomFlipUOnly: String

  public var RandomFlipVOnly: String

  @JsName("RandomFlipUVIndependent")
  public var RandomFlipUvIndependent: String

  @JsName("EParticleUVFlipMode_MAX")
  public var Max: String
}

@JsName("ESubUVBoundingVertexCount")
public external object SubUVBoundingVertexCount {
  @JsName("BVC_FourVertices")
  public var FourVertices: String

  @JsName("BVC_EightVertices")
  public var EightVertices: String

  @JsName("BVC_MAX")
  public var Max: String
}

public open external class ParticleModuleRequired(
  outer: UObject,
) : ParticleModule {
  @JsName("Material")
  public open var material: MaterialInterface

  @JsName("MinFacingCameraBlendDistance")
  public open var minFacingCameraBlendDistance: Number

  @JsName("MaxFacingCameraBlendDistance")
  public open var maxFacingCameraBlendDistance: Number

  @JsName("EmitterOrigin")
  public open var emitterOrigin: Vector

  @JsName("EmitterRotation")
  public open var emitterRotation: Rotator

  @JsName("ScreenAlignment")
  public open var screenAlignment: String

  @JsName("bUseLocalSpace")
  public open var useLocalSpace: Boolean

  @JsName("bKillOnDeactivate")
  public open var killOnDeactivate: Boolean

  @JsName("bKillOnCompleted")
  public open var killOnCompleted: Boolean

  @JsName("SortMode")
  public open var sortMode: String

  @JsName("bUseLegacyEmitterTime")
  public open var useLegacyEmitterTime: Boolean

  @JsName("bRemoveHMDRoll")
  public open var removeHmdRoll: Boolean

  @JsName("bSupportLargeWorldCoordinates")
  public open var supportLargeWorldCoordinates: Boolean

  @JsName("bEmitterDurationUseRange")
  public open var emitterDurationUseRange: Boolean

  @JsName("EmitterDuration")
  public open var emitterDuration: Number

  @JsName("SpawnRate")
  public open var spawnRate: RawDistributionFloat

  @JsName("BurstList")
  public open var burstList: Array<ParticleBurst>

  @JsName("EmitterDelay")
  public open var emitterDelay: Number

  @JsName("EmitterDelayLow")
  public open var emitterDelayLow: Number

  @JsName("bDelayFirstLoopOnly")
  public open var delayFirstLoopOnly: Boolean

  @JsName("InterpolationMethod")
  public open var interpolationMethod: String

  @JsName("bScaleUV")
  public open var scaleUv: Boolean

  @JsName("bEmitterDelayUseRange")
  public open var emitterDelayUseRange: Boolean

  @JsName("ParticleBurstMethod")
  public open var particleBurstMethod: String

  @JsName("bOverrideSystemMacroUV")
  public open var overrideSystemMacroUv: Boolean

  @JsName("bUseMaxDrawCount")
  public open var useMaxDrawCount: Boolean

  @JsName("OpacitySourceMode")
  public open var opacitySourceMode: String

  @JsName("EmitterNormalsMode")
  public open var emitterNormalsMode: String

  @JsName("bOrbitModuleAffectsVelocityAlignment")
  public open var orbitModuleAffectsVelocityAlignment: Boolean

  @JsName("SubImages_Horizontal")
  public open var subImagesHorizontal: Number

  @JsName("SubImages_Vertical")
  public open var subImagesVertical: Number

  @JsName("RandomImageTime")
  public open var randomImageTime: Number

  @JsName("RandomImageChanges")
  public open var randomImageChanges: Number

  @JsName("MacroUVPosition")
  public open var macroUvPosition: Vector

  @JsName("MacroUVRadius")
  public open var macroUvRadius: Number

  @JsName("UVFlippingMode")
  public open var uvFlippingMode: String

  @JsName("BoundingMode")
  public open var boundingMode: String

  @JsName("bDurationRecalcEachLoop")
  public open var durationRecalcEachLoop: Boolean

  @JsName("NormalsSphereCenter")
  public open var normalsSphereCenter: Vector

  @JsName("AlphaThreshold")
  public open var alphaThreshold: Number

  @JsName("EmitterLoops")
  public open var emitterLoops: Number

  @JsName("CutoutTexture")
  public open var cutoutTexture: Texture2d

  @JsName("MaxDrawCount")
  public open var maxDrawCount: Number

  @JsName("EmitterDurationLow")
  public open var emitterDurationLow: Number

  @JsName("NormalsCylinderDirection")
  public open var normalsCylinderDirection: Vector

  @JsName("NamedMaterialOverrides")
  public open var namedMaterialOverrides: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleRequired

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleRequired

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleRequired

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleRequired

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleRequired

    @JsName("C")
    public fun copy(other: Any): ParticleModuleRequired
  }
}

public open external class ParticleModuleTypeDataBase(
  outer: UObject,
) : ParticleModule {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleTypeDataBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleTypeDataBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleTypeDataBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleTypeDataBase

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleTypeDataBase

    @JsName("C")
    public fun copy(other: Any): ParticleModuleTypeDataBase
  }
}

public open external class ParticleModuleSpawnBase(
  outer: UObject,
) : ParticleModule {
  @JsName("bProcessSpawnRate")
  public open var processSpawnRate: Boolean

  @JsName("bProcessBurstList")
  public open var processBurstList: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleSpawnBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleSpawnBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleSpawnBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleSpawnBase

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleSpawnBase

    @JsName("C")
    public fun copy(other: Any): ParticleModuleSpawnBase
  }
}

public open external class ParticleModuleSpawn(
  outer: UObject,
) : ParticleModuleSpawnBase {
  @JsName("Rate")
  public open var rate: RawDistributionFloat

  @JsName("RateScale")
  public open var rateScale: RawDistributionFloat

  @JsName("ParticleBurstMethod")
  public open var particleBurstMethod: String

  @JsName("BurstList")
  public open var burstList: Array<ParticleBurst>

  @JsName("BurstScale")
  public open var burstScale: RawDistributionFloat

  @JsName("bApplyGlobalSpawnRateScale")
  public open var applyGlobalSpawnRateScale: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleSpawn

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleSpawn

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleSpawn

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleSpawn

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleSpawn

    @JsName("C")
    public fun copy(other: Any): ParticleModuleSpawn
  }
}

public open external class ParticleModuleEventBase(
  outer: UObject,
) : ParticleModule {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleEventBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleEventBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleEventBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleEventBase

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleEventBase

    @JsName("C")
    public fun copy(other: Any): ParticleModuleEventBase
  }
}

@JsName("EParticleEventType")
public external object ParticleEventType {
  @JsName("EPET_Any")
  public var Any: String

  @JsName("EPET_Spawn")
  public var Spawn: String

  @JsName("EPET_Death")
  public var Death: String

  @JsName("EPET_Collision")
  public var Collision: String

  @JsName("EPET_Burst")
  public var Burst: String

  @JsName("EPET_Blueprint")
  public var Blueprint: String

  @JsName("EPET_MAX")
  public var Max: String
}

public open external class ParticleModuleEventSendToGame(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleEventSendToGame

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleEventSendToGame

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleEventSendToGame

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleEventSendToGame

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleEventSendToGame

    @JsName("C")
    public fun copy(other: Any): ParticleModuleEventSendToGame
  }
}

@JsName("ParticleEvent_GenerateInfo")
public open external class ParticleEventGenerateInfo {
  @JsName("Type")
  public open var type: String

  @JsName("Frequency")
  public open var frequency: Number

  @JsName("ParticleFrequency")
  public open var particleFrequency: Number

  @JsName("FirstTimeOnly")
  public open var firstTimeOnly: Boolean

  @JsName("LastTimeOnly")
  public open var lastTimeOnly: Boolean

  @JsName("UseReflectedImpactVector")
  public open var useReflectedImpactVector: Boolean

  @JsName("bUseOrbitOffset")
  public open var useOrbitOffset: Boolean

  @JsName("CustomName")
  public open var customName: String

  @JsName("ParticleModuleEventsToSendToGame")
  public open var particleModuleEventsToSendToGame: Array<ParticleModuleEventSendToGame>

  public open fun clone(): ParticleEventGenerateInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParticleEventGenerateInfo

    @JsName("C")
    public fun copy(other: Any): ParticleEventGenerateInfo
  }
}

public open external class ParticleModuleEventGenerator(
  outer: UObject,
) : ParticleModuleEventBase {
  @JsName("Events")
  public open var events: Array<ParticleEventGenerateInfo>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleEventGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleEventGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleEventGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleEventGenerator

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleEventGenerator

    @JsName("C")
    public fun copy(other: Any): ParticleModuleEventGenerator
  }
}

public open external class ParticleModuleOrbitBase(
  outer: UObject,
) : ParticleModule {
  @JsName("bUseEmitterTime")
  public open var useEmitterTime: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleOrbitBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleOrbitBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleOrbitBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleOrbitBase

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleOrbitBase

    @JsName("C")
    public fun copy(other: Any): ParticleModuleOrbitBase
  }
}

@JsName("EOrbitChainMode")
public external object OrbitChainMode {
  @JsName("EOChainMode_Add")
  public var Add: String

  @JsName("EOChainMode_Scale")
  public var Scale: String

  @JsName("EOChainMode_Link")
  public var Link: String

  @JsName("EOChainMode_MAX")
  public var Max: String
}

public open external class DistributionVector(
  outer: UObject,
) : Distribution {
  @JsName("bCanBeBaked")
  public open var canBeBaked: Boolean

  @JsName("bIsDirty")
  public open var isDirty: Boolean

  @JsName("bBakedDataSuccesfully")
  public open var bakedDataSuccesfully: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DistributionVector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DistributionVector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DistributionVector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DistributionVector

    @JsName("C")
    public fun copy(other: UObject): DistributionVector

    @JsName("C")
    public fun copy(other: Any): DistributionVector
  }
}

public open external class RawDistributionVector : RawDistribution {
  @JsName("MinValue")
  public open var minValue: Number

  @JsName("MaxValue")
  public open var maxValue: Number

  @JsName("MinValueVec")
  public open var minValueVec: Vector

  @JsName("MaxValueVec")
  public open var maxValueVec: Vector

  @JsName("Distribution")
  public open var distribution: DistributionVector

  public override fun clone(): RawDistributionVector

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RawDistributionVector

    @JsName("C")
    public fun copy(other: Any): RawDistributionVector
  }
}

public open external class OrbitOptions {
  @JsName("bProcessDuringSpawn")
  public open var processDuringSpawn: Boolean

  @JsName("bProcessDuringUpdate")
  public open var processDuringUpdate: Boolean

  @JsName("bUseEmitterTime")
  public open var useEmitterTime: Boolean

  public open fun clone(): OrbitOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): OrbitOptions

    @JsName("C")
    public fun copy(other: Any): OrbitOptions
  }
}

public open external class ParticleModuleOrbit(
  outer: UObject,
) : ParticleModuleOrbitBase {
  @JsName("ChainMode")
  public open var chainMode: String

  @JsName("OffsetAmount")
  public open var offsetAmount: RawDistributionVector

  @JsName("OffsetOptions")
  public open var offsetOptions: OrbitOptions

  @JsName("RotationAmount")
  public open var rotationAmount: RawDistributionVector

  @JsName("RotationOptions")
  public open var rotationOptions: OrbitOptions

  @JsName("RotationRateAmount")
  public open var rotationRateAmount: RawDistributionVector

  @JsName("RotationRateOptions")
  public open var rotationRateOptions: OrbitOptions

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleOrbit

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleOrbit

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleOrbit

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleOrbit

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleOrbit

    @JsName("C")
    public fun copy(other: Any): ParticleModuleOrbit
  }
}

public open external class ParticleModuleEventReceiverBase(
  outer: UObject,
) : ParticleModuleEventBase {
  @JsName("EventGeneratorType")
  public open var eventGeneratorType: String

  @JsName("EventName")
  public open var eventName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleModuleEventReceiverBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleModuleEventReceiverBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleModuleEventReceiverBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleModuleEventReceiverBase

    @JsName("C")
    public fun copy(other: UObject): ParticleModuleEventReceiverBase

    @JsName("C")
    public fun copy(other: Any): ParticleModuleEventReceiverBase
  }
}

@JsName("ParticleLODLevel")
public open external class ParticleLodLevel(
  outer: UObject,
) : UObject {
  @JsName("Level")
  public open var level: Number

  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("RequiredModule")
  public open var requiredModule: ParticleModuleRequired

  @JsName("Modules")
  public open var modules: Array<ParticleModule>

  @JsName("TypeDataModule")
  public open var typeDataModule: ParticleModuleTypeDataBase

  @JsName("SpawnModule")
  public open var spawnModule: ParticleModuleSpawn

  @JsName("EventGenerator")
  public open var eventGenerator: ParticleModuleEventGenerator

  @JsName("SpawningModules")
  public open var spawningModules: Array<ParticleModuleSpawnBase>

  @JsName("SpawnModules")
  public open var spawnModules: Array<ParticleModule>

  @JsName("UpdateModules")
  public open var updateModules: Array<ParticleModule>

  @JsName("OrbitModules")
  public open var orbitModules: Array<ParticleModuleOrbit>

  @JsName("EventReceiverModules")
  public open var eventReceiverModules: Array<ParticleModuleEventReceiverBase>

  @JsName("ConvertedModules")
  public open var convertedModules: Boolean

  @JsName("PeakActiveParticles")
  public open var peakActiveParticles: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleLodLevel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleLodLevel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleLodLevel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleLodLevel

    @JsName("C")
    public fun copy(other: UObject): ParticleLodLevel

    @JsName("C")
    public fun copy(other: Any): ParticleLodLevel
  }
}

public open external class ParticleEmitter(
  outer: UObject,
) : UObject {
  @JsName("EmitterName")
  public open var emitterName: String

  @JsName("SubUVDataOffset")
  public open var subUvDataOffset: Number

  @JsName("EmitterRenderMode")
  public open var emitterRenderMode: String

  @JsName("SignificanceLevel")
  public open var significanceLevel: String

  @JsName("bUseLegacySpawningBehavior")
  public open var useLegacySpawningBehavior: Boolean

  @JsName("ConvertedModules")
  public open var convertedModules: Boolean

  @JsName("bIsSoloing")
  public open var isSoloing: Boolean

  @JsName("bCookedOut")
  public open var cookedOut: Boolean

  @JsName("bDisabledLODsKeepEmitterAlive")
  public open var disabledLoDsKeepEmitterAlive: Boolean

  @JsName("bDisableWhenInsignficant")
  public open var disableWhenInsignficant: Boolean

  @JsName("bCollapsed")
  public open var collapsed: Boolean

  @JsName("DetailMode")
  public open var detailMode: String

  @JsName("EmitterEditorColor")
  public open var emitterEditorColor: Color

  @JsName("LODLevels")
  public open var lodLevels: Array<ParticleLodLevel>

  @JsName("PeakActiveParticles")
  public open var peakActiveParticles: Number

  @JsName("InitialAllocationCount")
  public open var initialAllocationCount: Number

  @JsName("QualityLevelSpawnRateScale")
  public open var qualityLevelSpawnRateScale: Number

  @JsName("DetailModeBitmask")
  public open var detailModeBitmask: Any

  @JsName("DetailModeDisplay")
  public open var detailModeDisplay: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleEmitter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleEmitter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleEmitter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleEmitter

    @JsName("C")
    public fun copy(other: UObject): ParticleEmitter

    @JsName("C")
    public fun copy(other: Any): ParticleEmitter
  }
}

public open external class CurveEdEntry {
  @JsName("CurveObject")
  public open var curveObject: UObject

  @JsName("CurveColor")
  public open var curveColor: Color

  @JsName("CurveName")
  public open var curveName: String

  @JsName("bHideCurve")
  public open var hideCurve: Number

  @JsName("bColorCurve")
  public open var colorCurve: Number

  @JsName("bFloatingPointColorCurve")
  public open var floatingPointColorCurve: Number

  @JsName("bClamp")
  public open var clamp: Number

  @JsName("ClampLow")
  public open var clampLow: Number

  @JsName("ClampHigh")
  public open var clampHigh: Number

  public open fun clone(): CurveEdEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CurveEdEntry

    @JsName("C")
    public fun copy(other: Any): CurveEdEntry
  }
}

public open external class CurveEdTab {
  @JsName("TabName")
  public open var tabName: String

  @JsName("Curves")
  public open var curves: Array<CurveEdEntry>

  @JsName("ViewStartInput")
  public open var viewStartInput: Number

  @JsName("ViewEndInput")
  public open var viewEndInput: Number

  @JsName("ViewStartOutput")
  public open var viewStartOutput: Number

  @JsName("ViewEndOutput")
  public open var viewEndOutput: Number

  public open fun clone(): CurveEdTab

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CurveEdTab

    @JsName("C")
    public fun copy(other: Any): CurveEdTab
  }
}

public open external class InterpCurveEdSetup(
  outer: UObject,
) : UObject {
  @JsName("Tabs")
  public open var tabs: Array<CurveEdTab>

  @JsName("ActiveTab")
  public open var activeTab: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpCurveEdSetup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpCurveEdSetup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpCurveEdSetup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpCurveEdSetup

    @JsName("C")
    public fun copy(other: UObject): InterpCurveEdSetup

    @JsName("C")
    public fun copy(other: Any): InterpCurveEdSetup
  }
}

@JsName("ParticleSystemLOD")
public open external class ParticleSystemLod {
  public open fun clone(): ParticleSystemLod

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParticleSystemLod

    @JsName("C")
    public fun copy(other: Any): ParticleSystemLod
  }
}

@JsName("EParticleSystemUpdateMode")
public external object ParticleSystemUpdateMode {
  @JsName("EPSUM_RealTime")
  public var RealTime: String

  @JsName("EPSUM_FixedTime")
  public var FixedTime: String

  @JsName("EPSUM_MAX")
  public var Max: String
}

@JsName("ParticleSystemLODMethod")
public external object ParticleSystemLodMethod {
  @JsName("PARTICLESYSTEMLODMETHOD_Automatic")
  public var particlesystemlodmethodAutomatic: String

  @JsName("PARTICLESYSTEMLODMETHOD_DirectSet")
  public var particlesystemlodmethodDirectSet: String

  @JsName("PARTICLESYSTEMLODMETHOD_ActivateAutomatic")
  public var particlesystemlodmethodActivateAutomatic: String

  @JsName("PARTICLESYSTEMLODMETHOD_MAX")
  public var particlesystemlodmethodmax: String
}

@JsName("EParticleSystemInsignificanceReaction")
public external object ParticleSystemInsignificanceReaction {
  public var Auto: String

  public var Complete: String

  public var DisableTick: String

  public var DisableTickAndKill: String

  public var Num: String

  @JsName("EParticleSystemInsignificanceReaction_MAX")
  public var Max: String
}

@JsName("EParticleSystemOcclusionBoundsMethod")
public external object ParticleSystemOcclusionBoundsMethod {
  @JsName("EPSOBM_None")
  public var None: String

  @JsName("EPSOBM_ParticleBounds")
  public var ParticleBounds: String

  @JsName("EPSOBM_CustomBounds")
  public var CustomBounds: String

  @JsName("EPSOBM_MAX")
  public var Max: String
}

@JsName("LODSoloTrack")
public open external class LodSoloTrack {
  @JsName("SoloEnableSetting")
  public open var soloEnableSetting: Array<Number>

  public open fun clone(): LodSoloTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LodSoloTrack

    @JsName("C")
    public fun copy(other: Any): LodSoloTrack
  }
}

public open external class NamedEmitterMaterial {
  @JsName("Name")
  public open var name: String

  @JsName("Material")
  public open var material: MaterialInterface

  public open fun clone(): NamedEmitterMaterial

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NamedEmitterMaterial

    @JsName("C")
    public fun copy(other: Any): NamedEmitterMaterial
  }
}

@JsName("EPSCPoolMethod")
public external object PSCPoolMethod {
  public var None: String

  public var AutoRelease: String

  public var ManualRelease: String

  @JsName("ManualRelease_OnComplete")
  public var ManualReleaseOnComplete: String

  public var FreeInPool: String

  @JsName("EPSCPoolMethod_MAX")
  public var Max: String
}

public open external class ParticleSystem(
  outer: UObject,
) : FxSystemAsset {
  @JsName("UpdateTime_FPS")
  public open var updateTimeFps: Number

  @JsName("UpdateTime_Delta")
  public open var updateTimeDelta: Number

  @JsName("WarmupTime")
  public open var warmupTime: Number

  @JsName("WarmupTickRate")
  public open var warmupTickRate: Number

  @JsName("Emitters")
  public open var emitters: Array<ParticleEmitter>

  @JsName("PreviewComponent")
  public open var previewComponent: ParticleSystemComponent

  @JsName("ThumbnailAngle")
  public open var thumbnailAngle: Rotator

  @JsName("ThumbnailDistance")
  public open var thumbnailDistance: Number

  @JsName("ThumbnailWarmup")
  public open var thumbnailWarmup: Number

  @JsName("CurveEdSetup")
  public open var curveEdSetup: InterpCurveEdSetup

  @JsName("LODDistanceCheckTime")
  public open var lodDistanceCheckTime: Number

  @JsName("MacroUVRadius")
  public open var macroUvRadius: Number

  @JsName("LODDistances")
  public open var lodDistances: Array<Number>

  @JsName("EditorLODSetting")
  public open var editorLodSetting: Number

  @JsName("LODSettings")
  public open var lodSettings: Array<ParticleSystemLod>

  @JsName("FixedRelativeBoundingBox")
  public open var fixedRelativeBoundingBox: Box

  @JsName("SecondsBeforeInactive")
  public open var secondsBeforeInactive: Number

  @JsName("FloorMesh")
  public open var floorMesh: String

  @JsName("FloorPosition")
  public open var floorPosition: Vector

  @JsName("FloorRotation")
  public open var floorRotation: Rotator

  @JsName("FloorScale")
  public open var floorScale: Number

  @JsName("FloorScale3D")
  public open var floorScale3d: Vector

  @JsName("BackgroundColor")
  public open var backgroundColor: Color

  @JsName("Delay")
  public open var delay: Number

  @JsName("DelayLow")
  public open var delayLow: Number

  @JsName("bOrientZAxisTowardCamera")
  public open var orientZAxisTowardCamera: Boolean

  @JsName("bUseFixedRelativeBoundingBox")
  public open var useFixedRelativeBoundingBox: Boolean

  @JsName("bShouldResetPeakCounts")
  public open var shouldResetPeakCounts: Boolean

  @JsName("bHasPhysics")
  public open var hasPhysics: Boolean

  @JsName("bUseRealtimeThumbnail")
  public open var useRealtimeThumbnail: Boolean

  @JsName("ThumbnailImageOutOfDate")
  public open var thumbnailImageOutOfDate: Boolean

  @JsName("ThumbnailImage")
  public open var thumbnailImage: Texture2d

  @JsName("bUseDelayRange")
  public open var useDelayRange: Boolean

  @JsName("bAllowManagedTicking")
  public open var allowManagedTicking: Boolean

  @JsName("bAutoDeactivate")
  public open var autoDeactivate: Boolean

  @JsName("bRegenerateLODDuplicate")
  public open var regenerateLodDuplicate: Boolean

  @JsName("SystemUpdateMode")
  public open var systemUpdateMode: String

  @JsName("LODMethod")
  public open var lodMethod: String

  @JsName("InsignificantReaction")
  public open var insignificantReaction: String

  @JsName("OcclusionBoundsMethod")
  public open var occlusionBoundsMethod: String

  @JsName("MaxSignificanceLevel")
  public open var maxSignificanceLevel: String

  @JsName("MinTimeBetweenTicks")
  public open var minTimeBetweenTicks: Any

  @JsName("InsignificanceDelay")
  public open var insignificanceDelay: Number

  @JsName("MacroUVPosition")
  public open var macroUvPosition: Vector

  @JsName("CustomOcclusionBounds")
  public open var customOcclusionBounds: Box

  @JsName("SoloTracking")
  public open var soloTracking: Array<LodSoloTrack>

  @JsName("NamedMaterialSlots")
  public open var namedMaterialSlots: Array<NamedEmitterMaterial>

  @JsName("ContainsEmitterType")
  public open fun containsEmitterType(typeData: UnrealEngineClass): Boolean

  @JsName("SpawnEmitterAttached")
  public open fun spawnEmitterAttached(
    attachToComponent: SceneComponent,
    attachPointName: String,
    location: Vector,
    rotation: Rotator,
    scale: Vector,
    locationType: String,
    autoDestroy: Boolean,
    poolingMethod: String,
    autoActivate: Boolean,
  ): ParticleSystemComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleSystem

    @JsName("C")
    public fun copy(other: UObject): ParticleSystem

    @JsName("C")
    public fun copy(other: Any): ParticleSystem

    @JsName("SpawnEmitterAttached")
    public fun spawnEmitterAttached(
      emitterTemplate: ParticleSystem,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      scale: Vector,
      locationType: String,
      autoDestroy: Boolean,
      poolingMethod: String,
      autoActivate: Boolean,
    ): ParticleSystemComponent
  }
}

@JsName("EParticleSysParamType")
public external object ParticleSysParamType {
  @JsName("PSPT_None")
  public var None: String

  @JsName("PSPT_Scalar")
  public var Scalar: String

  @JsName("PSPT_ScalarRand")
  public var ScalarRand: String

  @JsName("PSPT_Vector")
  public var Vector: String

  @JsName("PSPT_VectorRand")
  public var VectorRand: String

  @JsName("PSPT_Color")
  public var Color: String

  @JsName("PSPT_Actor")
  public var Actor: String

  @JsName("PSPT_Material")
  public var Material: String

  @JsName("PSPT_VectorUnitRand")
  public var VectorUnitRand: String

  @JsName("PSPT_MAX")
  public var Max: String
}

public open external class ParticleSysParam {
  @JsName("Name")
  public open var name: String

  @JsName("ParamType")
  public open var paramType: String

  @JsName("Scalar")
  public open var scalar: Number

  @JsName("Scalar_Low")
  public open var scalarLow: Number

  @JsName("Vector")
  public open var vector: Vector

  @JsName("Vector_Low")
  public open var vectorLow: Vector

  @JsName("Color")
  public open var color: Color

  @JsName("Actor")
  public open var actor: Actor

  @JsName("Material")
  public open var material: MaterialInterface

  public open fun clone(): ParticleSysParam

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParticleSysParam

    @JsName("C")
    public fun copy(other: Any): ParticleSysParam
  }
}

public open external class ParticleSystemReplay(
  outer: UObject,
) : UObject {
  @JsName("ClipIDNumber")
  public open var clipIdNumber: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleSystemReplay

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleSystemReplay

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleSystemReplay

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleSystemReplay

    @JsName("C")
    public fun copy(other: UObject): ParticleSystemReplay

    @JsName("C")
    public fun copy(other: Any): ParticleSystemReplay
  }
}

@JsName("ETrailWidthMode")
public external object TrailWidthMode {
  @JsName("ETrailWidthMode_FromCentre")
  public var FromCentre: String

  @JsName("ETrailWidthMode_FromFirst")
  public var FromFirst: String

  @JsName("ETrailWidthMode_FromSecond")
  public var FromSecond: String

  @JsName("ETrailWidthMode_MAX")
  public var Max: String
}

@JsName("T$244")
public external interface Object244 {
  @JsName("OutTangentPoint")
  public var outTangentPoint: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$245")
public external interface Object245 {
  @JsName("OutTargetStrength")
  public var outTargetStrength: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$246")
public external interface Object246 {
  @JsName("OutTargetPoint")
  public var outTargetPoint: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$247")
public external interface Object247 {
  @JsName("OutSourceStrength")
  public var outSourceStrength: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$248")
public external interface Object248 {
  @JsName("OutSourcePoint")
  public var outSourcePoint: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$249")
public external interface Object249 {
  @JsName("OutEndPoint")
  public var outEndPoint: Vector

  @JsName("$")
  public var value: Boolean
}

public open external class ParticleSystemComponent(
  outer: UObject,
) : FxSystemComponent {
  @JsName("Template")
  public open var template: ParticleSystem

  @JsName("EmitterMaterials")
  public open var emitterMaterials: Array<MaterialInterface>

  @JsName("SkelMeshComponents")
  public open var skelMeshComponents: Array<SkeletalMeshComponent>

  @JsName("bResetOnDetach")
  public open var resetOnDetach: Boolean

  @JsName("bUpdateOnDedicatedServer")
  public open var updateOnDedicatedServer: Boolean

  @JsName("bAllowRecycling")
  public open var allowRecycling: Boolean

  @JsName("bAutoManageAttachment")
  public open var autoManageAttachment: Boolean

  @JsName("bAutoAttachWeldSimulatedBodies")
  public open var autoAttachWeldSimulatedBodies: Boolean

  @JsName("bWarmingUp")
  public open var warmingUp: Boolean

  @JsName("bOverrideLODMethod")
  public open var overrideLodMethod: Boolean

  @JsName("bSkipUpdateDynamicDataDuringTick")
  public open var skipUpdateDynamicDataDuringTick: Boolean

  @JsName("LODMethod")
  public open var lodMethod: String

  @JsName("RequiredSignificance")
  public open var requiredSignificance: String

  @JsName("InstanceParameters")
  public open var instanceParameters: Array<ParticleSysParam>

  @JsName("OnParticleSpawn")
  public open var onParticleSpawn: UnrealEngineMulticastDelegate<(
    EventName: String,
    EmitterTime: Number,
    Location: Vector,
    Velocity: Vector,
  ) -> Unit>

  @JsName("OnParticleBurst")
  public open var onParticleBurst: UnrealEngineMulticastDelegate<(
    EventName: String,
    EmitterTime: Number,
    ParticleCount: Number,
  ) -> Unit>

  @JsName("OnParticleDeath")
  public open var onParticleDeath: UnrealEngineMulticastDelegate<(
    EventName: String,
    EmitterTime: Number,
    ParticleTime: Number,
    Location: Vector,
    Velocity: Vector,
    Direction: Vector,
  ) -> Unit>

  @JsName("OnParticleCollide")
  public open var onParticleCollide: UnrealEngineMulticastDelegate<(
    EventName: String,
    EmitterTime: Number,
    ParticleTime: Number,
    Location: Vector,
    Velocity: Vector,
    Direction: Vector,
    Normal: Vector,
    BoneName: String,
    PhysMat: PhysicalMaterial,
  ) -> Unit>

  @JsName("bOldPositionValid")
  public open var oldPositionValid: Boolean

  @JsName("OldPosition")
  public open var oldPosition: Vector

  @JsName("PartSysVelocity")
  public open var partSysVelocity: Vector

  @JsName("WarmupTime")
  public open var warmupTime: Number

  @JsName("WarmupTickRate")
  public open var warmupTickRate: Number

  @JsName("SecondsBeforeInactive")
  public open var secondsBeforeInactive: Number

  @JsName("MaxTimeBeforeForceUpdateTransform")
  public open var maxTimeBeforeForceUpdateTransform: Number

  @JsName("EditorLODLevel")
  public open var editorLodLevel: Number

  @JsName("EditorDetailMode")
  public open var editorDetailMode: Number

  @JsName("ReplayClips")
  public open var replayClips: Array<ParticleSystemReplay>

  @JsName("CustomTimeDilation")
  public open var customTimeDilation: Number

  @JsName("AutoAttachParent")
  public open var autoAttachParent: Any

  @JsName("AutoAttachSocketName")
  public open var autoAttachSocketName: String

  @JsName("AutoAttachLocationType")
  public open var autoAttachLocationType: String

  @JsName("AutoAttachLocationRule")
  public open var autoAttachLocationRule: String

  @JsName("AutoAttachRotationRule")
  public open var autoAttachRotationRule: String

  @JsName("AutoAttachScaleRule")
  public open var autoAttachScaleRule: String

  @JsName("OnSystemFinished")
  public open var onSystemFinished:
      UnrealEngineMulticastDelegate<(PSystem: ParticleSystemComponent) -> Unit>

  @JsName("SetTrailSourceData")
  public open fun setTrailSourceData(
    inFirstSocketName: String,
    inSecondSocketName: String,
    inWidthMode: String,
    inWidth: Number,
  ): Unit

  @JsName("SetTemplate")
  public open fun setTemplate(newTemplate: ParticleSystem): Unit

  @JsName("SetMaterialParameter")
  public open fun setMaterialParameter(parameterName: String, param: MaterialInterface): Unit

  @JsName("SetBeamTargetTangent")
  public open fun setBeamTargetTangent(
    emitterIndex: Number,
    newTangentPoint: Vector,
    targetIndex: Number,
  ): Unit

  @JsName("SetBeamTargetStrength")
  public open fun setBeamTargetStrength(
    emitterIndex: Number,
    newTargetStrength: Number,
    targetIndex: Number,
  ): Unit

  @JsName("SetBeamTargetPoint")
  public open fun setBeamTargetPoint(
    emitterIndex: Number,
    newTargetPoint: Vector,
    targetIndex: Number,
  ): Unit

  @JsName("SetBeamSourceTangent")
  public open fun setBeamSourceTangent(
    emitterIndex: Number,
    newTangentPoint: Vector,
    sourceIndex: Number,
  ): Unit

  @JsName("SetBeamSourceStrength")
  public open fun setBeamSourceStrength(
    emitterIndex: Number,
    newSourceStrength: Number,
    sourceIndex: Number,
  ): Unit

  @JsName("SetBeamSourcePoint")
  public open fun setBeamSourcePoint(
    emitterIndex: Number,
    newSourcePoint: Vector,
    sourceIndex: Number,
  ): Unit

  @JsName("SetBeamEndPoint")
  public open fun setBeamEndPoint(emitterIndex: Number, newEndPoint: Vector): Unit

  @JsName("SetAutoAttachParams")
  public open fun setAutoAttachParams(
    parent: SceneComponent,
    socketName: String,
    locationType: String,
  ): Unit

  @JsName("GetNumActiveParticles")
  public open fun getNumActiveParticles(): Number

  @JsName("GetNamedMaterial")
  public open fun getNamedMaterial(inName: String): MaterialInterface

  @JsName("GetBeamTargetTangent")
  public open fun getBeamTargetTangent(
    emitterIndex: Number,
    targetIndex: Number,
    outTangentPoint: Vector,
  ): Object244

  @JsName("GetBeamTargetStrength")
  public open fun getBeamTargetStrength(
    emitterIndex: Number,
    targetIndex: Number,
    outTargetStrength: Number,
  ): Object245

  @JsName("GetBeamTargetPoint")
  public open fun getBeamTargetPoint(
    emitterIndex: Number,
    targetIndex: Number,
    outTargetPoint: Vector,
  ): Object246

  @JsName("GetBeamSourceTangent")
  public open fun getBeamSourceTangent(
    emitterIndex: Number,
    sourceIndex: Number,
    outTangentPoint: Vector,
  ): Object244

  @JsName("GetBeamSourceStrength")
  public open fun getBeamSourceStrength(
    emitterIndex: Number,
    sourceIndex: Number,
    outSourceStrength: Number,
  ): Object247

  @JsName("GetBeamSourcePoint")
  public open fun getBeamSourcePoint(
    emitterIndex: Number,
    sourceIndex: Number,
    outSourcePoint: Vector,
  ): Object248

  @JsName("GetBeamEndPoint")
  public open fun getBeamEndPoint(emitterIndex: Number, outEndPoint: Vector): Object249

  @JsName("GenerateParticleEvent")
  public open fun generateParticleEvent(
    inEventName: String,
    inEmitterTime: Number,
    inLocation: Vector,
    inDirection: Vector,
    inVelocity: Vector,
  ): Unit

  @JsName("EndTrails")
  public open fun endTrails(): Unit

  @JsName("CreateNamedDynamicMaterialInstance")
  public open fun createNamedDynamicMaterialInstance(inName: String,
      sourceMaterial: MaterialInterface): MaterialInstanceDynamic

  @JsName("BeginTrails")
  public open fun beginTrails(
    inFirstSocketName: String,
    inSecondSocketName: String,
    inWidthMode: String,
    inWidth: Number,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ParticleSystemComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ParticleSystemComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleSystemComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleSystemComponent

    @JsName("C")
    public fun copy(other: UObject): ParticleSystemComponent

    @JsName("C")
    public fun copy(other: Any): ParticleSystemComponent
  }
}

public open external class Emitter(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("ParticleSystemComponent")
  public open var particleSystemComponent: ParticleSystemComponent

  @JsName("bDestroyOnSystemFinish")
  public open var destroyOnSystemFinish: Boolean

  @JsName("bPostUpdateTickGroup")
  public open var postUpdateTickGroup: Boolean

  @JsName("bCurrentlyActive")
  public open var currentlyActive: Boolean

  @JsName("OnParticleSpawn")
  public open var onParticleSpawn: UnrealEngineMulticastDelegate<(
    EventName: String,
    EmitterTime: Number,
    Location: Vector,
    Velocity: Vector,
  ) -> Unit>

  @JsName("OnParticleBurst")
  public open var onParticleBurst: UnrealEngineMulticastDelegate<(
    EventName: String,
    EmitterTime: Number,
    ParticleCount: Number,
  ) -> Unit>

  @JsName("OnParticleDeath")
  public open var onParticleDeath: UnrealEngineMulticastDelegate<(
    EventName: String,
    EmitterTime: Number,
    ParticleTime: Number,
    Location: Vector,
    Velocity: Vector,
    Direction: Vector,
  ) -> Unit>

  @JsName("OnParticleCollide")
  public open var onParticleCollide: UnrealEngineMulticastDelegate<(
    EventName: String,
    EmitterTime: Number,
    ParticleTime: Number,
    Location: Vector,
    Velocity: Vector,
    Direction: Vector,
    Normal: Vector,
    BoneName: String,
    PhysMat: PhysicalMaterial,
  ) -> Unit>

  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  @JsName("ArrowComponent")
  public open var arrowComponent: ArrowComponent

  @JsName("ToggleActive")
  public open fun toggleActive(): Unit

  @JsName("SetVectorParameter")
  public open fun setVectorParameter(parameterName: String, param: Vector): Unit

  @JsName("SetTemplate")
  public open fun setTemplate(newTemplate: ParticleSystem): Unit

  @JsName("SetMaterialParameter")
  public open fun setMaterialParameter(parameterName: String, param: MaterialInterface): Unit

  @JsName("SetFloatParameter")
  public open fun setFloatParameter(parameterName: String, param: Number): Unit

  @JsName("SetColorParameter")
  public open fun setColorParameter(parameterName: String, param: LinearColor): Unit

  @JsName("SetActorParameter")
  public open fun setActorParameter(parameterName: String, param: Actor): Unit

  @JsName("OnRep_bCurrentlyActive")
  public open fun onRepbCurrentlyActive(): Unit

  @JsName("OnParticleSystemFinished")
  public open fun onParticleSystemFinished(finishedComponent: ParticleSystemComponent): Unit

  @JsName("IsActive")
  public open fun isActive(): Boolean

  @JsName("Deactivate")
  public open fun deactivate(): Unit

  @JsName("Activate")
  public open fun activate(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Emitter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Emitter

    @JsName("C")
    public fun copy(other: UObject): Emitter

    @JsName("C")
    public fun copy(other: Any): Emitter
  }
}

public open external class EmitterCameraLensEffectBase(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Emitter {
  @JsName("PS_CameraEffect")
  public open var psCameraEffect: ParticleSystem

  @JsName("BaseCamera")
  public open var baseCamera: PlayerCameraManager

  @JsName("RelativeTransform")
  public open var relativeTransform: Transform

  @JsName("BaseFOV")
  public open var baseFov: Number

  @JsName("bAllowMultipleInstances")
  public open var allowMultipleInstances: Boolean

  @JsName("bResetWhenRetriggered")
  public open var resetWhenRetriggered: Boolean

  @JsName("EmittersToTreatAsSame")
  public open var emittersToTreatAsSame: Array<UnrealEngineClass>

  @JsName("DistFromCamera")
  public open var distFromCamera: Number

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EmitterCameraLensEffectBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EmitterCameraLensEffectBase

    @JsName("C")
    public fun copy(other: UObject): EmitterCameraLensEffectBase

    @JsName("C")
    public fun copy(other: Any): EmitterCameraLensEffectBase
  }
}

@JsName("T$250")
public external interface ResultCameraLocationProvider {
  @JsName("ResultCameraLocation")
  public var resultCameraLocation: Vector
}

@JsName("T$251")
public external interface Object251 {
  @JsName("NewCameraLocation")
  public var newCameraLocation: Vector

  @JsName("NewCameraRotation")
  public var newCameraRotation: Rotator

  @JsName("NewCameraFOV")
  public var newCameraFov: Number

  @JsName("$")
  public var value: Boolean
}

public open external class PlayerCameraManager(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("PCOwner")
  public open var pcOwner: PlayerController

  @JsName("TransformComponent")
  public open var transformComponent: SceneComponent

  @JsName("DefaultFOV")
  public open var defaultFov: Number

  @JsName("DefaultOrthoWidth")
  public open var defaultOrthoWidth: Number

  @JsName("DefaultAspectRatio")
  public open var defaultAspectRatio: Number

  @JsName("CameraCache")
  public open var cameraCache: CameraCacheEntry

  @JsName("LastFrameCameraCache")
  public open var lastFrameCameraCache: CameraCacheEntry

  @JsName("ViewTarget")
  public open var viewTarget: TViewTarget

  @JsName("PendingViewTarget")
  public open var pendingViewTarget: TViewTarget

  @JsName("CameraCachePrivate")
  public open var cameraCachePrivate: CameraCacheEntry

  @JsName("LastFrameCameraCachePrivate")
  public open var lastFrameCameraCachePrivate: CameraCacheEntry

  @JsName("ModifierList")
  public open var modifierList: Array<CameraModifier>

  @JsName("DefaultModifiers")
  public open var defaultModifiers: Array<UnrealEngineClass>

  @JsName("FreeCamDistance")
  public open var freeCamDistance: Number

  @JsName("FreeCamOffset")
  public open var freeCamOffset: Vector

  @JsName("ViewTargetOffset")
  public open var viewTargetOffset: Vector

  @JsName("OnAudioFadeChangeEvent")
  public open var onAudioFadeChangeEvent: UnrealEngineMulticastDelegate<(bFadeOut: Boolean,
      FadeTime: Number) -> Unit>

  @JsName("CameraLensEffects")
  public open var cameraLensEffects: Array<Any>

  @JsName("CachedCameraShakeMod")
  public open var cachedCameraShakeMod: CameraModifierCameraShake

  @JsName("AnimInstPool")
  public open var animInstPool: CameraAnimInst

  @JsName("PostProcessBlendCache")
  public open var postProcessBlendCache: Array<PostProcessSettings>

  @JsName("ActiveAnims")
  public open var activeAnims: Array<CameraAnimInst>

  @JsName("FreeAnims")
  public open var freeAnims: Array<CameraAnimInst>

  @JsName("AnimCameraActor")
  public open var animCameraActor: CameraActor

  @JsName("bIsOrthographic")
  public open var isOrthographic: Boolean

  @JsName("bDefaultConstrainAspectRatio")
  public open var defaultConstrainAspectRatio: Boolean

  @JsName("bClientSimulatingViewTarget")
  public open var clientSimulatingViewTarget: Boolean

  @JsName("bUseClientSideCameraUpdates")
  public open var useClientSideCameraUpdates: Boolean

  @JsName("bGameCameraCutThisFrame")
  public open var gameCameraCutThisFrame: Boolean

  @JsName("ViewPitchMin")
  public open var viewPitchMin: Number

  @JsName("ViewPitchMax")
  public open var viewPitchMax: Number

  @JsName("ViewYawMin")
  public open var viewYawMin: Number

  @JsName("ViewYawMax")
  public open var viewYawMax: Number

  @JsName("ViewRollMin")
  public open var viewRollMin: Number

  @JsName("ViewRollMax")
  public open var viewRollMax: Number

  @JsName("ServerUpdateCameraTimeout")
  public open var serverUpdateCameraTimeout: Number

  @JsName("SwapPendingViewTargetWhenUsingClientSideCameraUpdates")
  public open fun swapPendingViewTargetWhenUsingClientSideCameraUpdates(): Unit

  @JsName("StopCameraShake")
  public open fun stopCameraShake(shakeInstance: CameraShakeBase, immediately: Boolean): Unit

  @JsName("StopCameraFade")
  public open fun stopCameraFade(): Unit

  @JsName("StopCameraAnimInst")
  public open fun stopCameraAnimInst(animInst: CameraAnimInst, immediate: Boolean): Unit

  @JsName("StopAllInstancesOfCameraShakeFromSource")
  public open fun stopAllInstancesOfCameraShakeFromSource(
    shake: UnrealEngineClass,
    sourceComponent: CameraShakeSourceComponent,
    immediately: Boolean,
  ): Unit

  @JsName("StopAllInstancesOfCameraShake")
  public open fun stopAllInstancesOfCameraShake(shake: UnrealEngineClass, immediately: Boolean):
      Unit

  @JsName("StopAllInstancesOfCameraAnim")
  public open fun stopAllInstancesOfCameraAnim(anim: CameraAnim, immediate: Boolean): Unit

  @JsName("StopAllCameraShakesFromSource")
  public open fun stopAllCameraShakesFromSource(sourceComponent: CameraShakeSourceComponent,
      immediately: Boolean): Unit

  @JsName("StopAllCameraShakes")
  public open fun stopAllCameraShakes(immediately: Boolean): Unit

  @JsName("StopAllCameraAnims")
  public open fun stopAllCameraAnims(immediate: Boolean): Unit

  @JsName("StartCameraShakeFromSource")
  public open fun startCameraShakeFromSource(
    shakeClass: UnrealEngineClass,
    sourceComponent: CameraShakeSourceComponent,
    scale: Number,
    playSpace: String,
    userPlaySpaceRot: Rotator,
  ): CameraShakeBase

  @JsName("StartCameraShake")
  public open fun startCameraShake(
    shakeClass: UnrealEngineClass,
    scale: Number,
    playSpace: String,
    userPlaySpaceRot: Rotator,
  ): CameraShakeBase

  @JsName("StartCameraFade")
  public open fun startCameraFade(
    fromAlpha: Number,
    toAlpha: Number,
    duration: Number,
    color: LinearColor,
    shouldFadeAudio: Boolean,
    holdWhenFinished: Boolean,
  ): Unit

  @JsName("SetManualCameraFade")
  public open fun setManualCameraFade(
    inFadeAmount: Number,
    color: LinearColor,
    inFadeAudio: Boolean,
  ): Unit

  @JsName("SetGameCameraCutThisFrame")
  public open fun setGameCameraCutThisFrame(): Unit

  @JsName("RemoveCameraModifier")
  public open fun removeCameraModifier(modifierToRemove: CameraModifier): Boolean

  @JsName("RemoveCameraLensEffect")
  public open fun removeCameraLensEffect(emitter: EmitterCameraLensEffectBase): Unit

  @JsName("PlayCameraAnim")
  public open fun playCameraAnim(
    anim: CameraAnim,
    rate: Number,
    scale: Number,
    blendInTime: Number,
    blendOutTime: Number,
    loop: Boolean,
    randomStartTime: Boolean,
    duration: Number,
    playSpace: String,
    userPlaySpaceRot: Rotator,
  ): CameraAnimInst

  @JsName("PhotographyCameraModify")
  public open fun photographyCameraModify(
    newCameraLocation: Vector,
    previousCameraLocation: Vector,
    originalCameraLocation: Vector,
    resultCameraLocation: Vector,
  ): ResultCameraLocationProvider

  @JsName("OnPhotographySessionStart")
  public open fun onPhotographySessionStart(): Unit

  @JsName("OnPhotographySessionEnd")
  public open fun onPhotographySessionEnd(): Unit

  @JsName("OnPhotographyMultiPartCaptureStart")
  public open fun onPhotographyMultiPartCaptureStart(): Unit

  @JsName("OnPhotographyMultiPartCaptureEnd")
  public open fun onPhotographyMultiPartCaptureEnd(): Unit

  @JsName("GetOwningPlayerController")
  public open fun getOwningPlayerController(): PlayerController

  @JsName("GetFOVAngle")
  public open fun getFovAngle(): Number

  @JsName("GetCameraRotation")
  public open fun getCameraRotation(): Rotator

  @JsName("GetCameraLocation")
  public open fun getCameraLocation(): Vector

  @JsName("FindCameraModifierByClass")
  public open fun findCameraModifierByClass(modifierClass: UnrealEngineClass): CameraModifier

  @JsName("ClearCameraLensEffects")
  public open fun clearCameraLensEffects(): Unit

  @JsName("BlueprintUpdateCamera")
  public open fun blueprintUpdateCamera(
    cameraTarget: Actor,
    newCameraLocation: Vector,
    newCameraRotation: Rotator,
    newCameraFov: Number,
  ): Object251

  @JsName("AddNewCameraModifier")
  public open fun addNewCameraModifier(modifierClass: UnrealEngineClass): CameraModifier

  @JsName("AddCameraLensEffect")
  public open fun addCameraLensEffect(lensEffectEmitterClass: UnrealEngineClass):
      EmitterCameraLensEffectBase

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlayerCameraManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlayerCameraManager

    @JsName("C")
    public fun copy(other: UObject): PlayerCameraManager

    @JsName("C")
    public fun copy(other: Any): PlayerCameraManager
  }
}

public open external class DrawFrustumComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("bFrustumEnabled")
  public open var frustumEnabled: Boolean

  @JsName("FrustumColor")
  public open var frustumColor: Color

  @JsName("FrustumAngle")
  public open var frustumAngle: Number

  @JsName("FrustumAspectRatio")
  public open var frustumAspectRatio: Number

  @JsName("FrustumStartDist")
  public open var frustumStartDist: Number

  @JsName("FrustumEndDist")
  public open var frustumEndDist: Number

  @JsName("Texture")
  public open var texture: Texture

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DrawFrustumComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DrawFrustumComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DrawFrustumComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DrawFrustumComponent

    @JsName("C")
    public fun copy(other: UObject): DrawFrustumComponent

    @JsName("C")
    public fun copy(other: Any): DrawFrustumComponent
  }
}

public open external class DebugCameraController(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : PlayerController {
  @JsName("bShowSelectedInfo")
  public open var showSelectedInfo: Boolean

  @JsName("bIsFrozenRendering")
  public open var isFrozenRendering: Boolean

  @JsName("bIsOrbitingSelectedActor")
  public open var isOrbitingSelectedActor: Boolean

  @JsName("bOrbitPivotUseCenter")
  public open var orbitPivotUseCenter: Boolean

  @JsName("bEnableBufferVisualization")
  public open var enableBufferVisualization: Boolean

  @JsName("bEnableBufferVisualizationFullMode")
  public open var enableBufferVisualizationFullMode: Boolean

  @JsName("bIsBufferVisualizationInputSetup")
  public open var isBufferVisualizationInputSetup: Boolean

  @JsName("bLastDisplayEnabled")
  public open var lastDisplayEnabled: Boolean

  @JsName("DrawFrustum")
  public open var drawFrustum: DrawFrustumComponent

  @JsName("SelectedActor")
  public open var selectedActor: Actor

  @JsName("SelectedComponent")
  public open var selectedComponent: PrimitiveComponent

  @JsName("SelectedHitPoint")
  public open var selectedHitPoint: HitResult

  @JsName("OriginalControllerRef")
  public open var originalControllerRef: PlayerController

  @JsName("OriginalPlayer")
  public open var originalPlayer: Player

  @JsName("SpeedScale")
  public open var speedScale: Number

  @JsName("InitialMaxSpeed")
  public open var initialMaxSpeed: Number

  @JsName("InitialAccel")
  public open var initialAccel: Number

  @JsName("InitialDecel")
  public open var initialDecel: Number

  @JsName("ToggleDisplay")
  public open fun toggleDisplay(): Unit

  @JsName("ShowDebugSelectedInfo")
  public open fun showDebugSelectedInfo(): Unit

  @JsName("SetPawnMovementSpeedScale")
  public open fun setPawnMovementSpeedScale(newSpeedScale: Number): Unit

  @JsName("ReceiveOnDeactivate")
  public open fun receiveOnDeactivate(restoredPc: PlayerController): Unit

  @JsName("ReceiveOnActorSelected")
  public open fun receiveOnActorSelected(
    newSelectedActor: Actor,
    selectHitLocation: Vector,
    selectHitNormal: Vector,
    hit: HitResult,
  ): Unit

  @JsName("ReceiveOnActivate")
  public open fun receiveOnActivate(originalPc: PlayerController): Unit

  @JsName("GetSelectedActor")
  public open fun getSelectedActor(): Actor

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DebugCameraController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DebugCameraController

    @JsName("C")
    public fun copy(other: UObject): DebugCameraController

    @JsName("C")
    public fun copy(other: Any): DebugCameraController
  }
}

public open external class CheatManagerExtension(
  outer: UObject,
) : UObject {
  @JsName("GetPlayerController")
  public open fun getPlayerController(): PlayerController

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CheatManagerExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CheatManagerExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CheatManagerExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CheatManagerExtension

    @JsName("C")
    public fun copy(other: UObject): CheatManagerExtension

    @JsName("C")
    public fun copy(other: Any): CheatManagerExtension
  }
}

@JsName("EEndPlayReason")
public external object EndPlayReason {
  public var Destroyed: String

  public var LevelTransition: String

  public var EndPlayInEditor: String

  public var RemovedFromWorld: String

  public var Quit: String

  @JsName("EEndPlayReason_MAX")
  public var Max: String
}

@JsName("T$252")
public external interface Object252 {
  @JsName("GoString")
  public var goString: String

  @JsName("LocString")
  public var locString: String
}

public open external class CheatManager(
  outer: UObject,
) : UObject {
  @JsName("DebugCameraControllerRef")
  public open var debugCameraControllerRef: DebugCameraController

  @JsName("DebugCameraControllerClass")
  public open var debugCameraControllerClass: UnrealEngineClass

  @JsName("CheatManagerExtensions")
  public open var cheatManagerExtensions: Array<CheatManagerExtension>

  @JsName("Walk")
  public open fun walk(): Unit

  @JsName("ViewSelf")
  public open fun viewSelf(): Unit

  @JsName("ViewPlayer")
  public open fun viewPlayer(s: String): Unit

  @JsName("ViewClass")
  public open fun viewClass(desiredClass: UnrealEngineClass): Unit

  @JsName("ViewActor")
  public open fun viewActor(actorName: String): Unit

  @JsName("UpdateSafeArea")
  public open fun updateSafeArea(): Unit

  @JsName("ToggleServerStatReplicatorUpdateStatNet")
  public open fun toggleServerStatReplicatorUpdateStatNet(): Unit

  @JsName("ToggleServerStatReplicatorClientOverwrite")
  public open fun toggleServerStatReplicatorClientOverwrite(): Unit

  @JsName("ToggleDebugCamera")
  public open fun toggleDebugCamera(): Unit

  @JsName("ToggleAILogging")
  public open fun toggleAiLogging(): Unit

  @JsName("TestCollisionDistance")
  public open fun testCollisionDistance(): Unit

  @JsName("Teleport")
  public open fun teleport(): Unit

  @JsName("Summon")
  public open fun summon(className: String): Unit

  @JsName("StreamLevelOut")
  public open fun streamLevelOut(packageName: String): Unit

  @JsName("StreamLevelIn")
  public open fun streamLevelIn(packageName: String): Unit

  @JsName("SpawnServerStatReplicator")
  public open fun spawnServerStatReplicator(): Unit

  @JsName("Slomo")
  public open fun slomo(newTimeDilation: Number): Unit

  @JsName("SetWorldOrigin")
  public open fun setWorldOrigin(): Unit

  @JsName("SetMouseSensitivityToDefault")
  public open fun setMouseSensitivityToDefault(): Unit

  @JsName("ServerToggleAILogging")
  public open fun serverToggleAiLogging(): Unit

  @JsName("ReceiveInitCheatManager")
  public open fun receiveInitCheatManager(): Unit

  @JsName("ReceiveEndPlay")
  public open fun receiveEndPlay(): Unit

  @JsName("PlayersOnly")
  public open fun playersOnly(): Unit

  @JsName("OnPlayerEndPlayed")
  public open fun onPlayerEndPlayed(player: Actor, endPlayReason: String): Unit

  @JsName("OnlyLoadLevel")
  public open fun onlyLoadLevel(packageName: String): Unit

  @JsName("LogLoc")
  public open fun logLoc(): Unit

  @JsName("InvertMouse")
  public open fun invertMouse(): Unit

  @JsName("God")
  public open fun god(): Unit

  @JsName("Ghost")
  public open fun ghost(): Unit

  @JsName("GetPlayerController")
  public open fun getPlayerController(): PlayerController

  @JsName("FreezeFrame")
  public open fun freezeFrame(delay: Number): Unit

  @JsName("Fly")
  public open fun fly(): Unit

  @JsName("FlushLog")
  public open fun flushLog(): Unit

  @JsName("EnableDebugCamera")
  public open fun enableDebugCamera(): Unit

  @JsName("DumpVoiceMutingState")
  public open fun dumpVoiceMutingState(): Unit

  @JsName("DumpPartyState")
  public open fun dumpPartyState(): Unit

  @JsName("DumpOnlineSessionState")
  public open fun dumpOnlineSessionState(): Unit

  @JsName("DumpChatState")
  public open fun dumpChatState(): Unit

  @JsName("DisableDebugCamera")
  public open fun disableDebugCamera(): Unit

  @JsName("DestroyTarget")
  public open fun destroyTarget(): Unit

  @JsName("DestroyServerStatReplicator")
  public open fun destroyServerStatReplicator(): Unit

  @JsName("DestroyPawns")
  public open fun destroyPawns(aClass: UnrealEngineClass): Unit

  @JsName("DestroyAllPawnsExceptTarget")
  public open fun destroyAllPawnsExceptTarget(): Unit

  @JsName("DestroyAll")
  public open fun destroyAll(aClass: UnrealEngineClass): Unit

  @JsName("DebugCapsuleSweepSize")
  public open fun debugCapsuleSweepSize(halfHeight: Number, radius: Number): Unit

  @JsName("DebugCapsuleSweepPawn")
  public open fun debugCapsuleSweepPawn(): Unit

  @JsName("DebugCapsuleSweepComplex")
  public open fun debugCapsuleSweepComplex(traceComplex: Boolean): Unit

  @JsName("DebugCapsuleSweepClear")
  public open fun debugCapsuleSweepClear(): Unit

  @JsName("DebugCapsuleSweepChannel")
  public open fun debugCapsuleSweepChannel(channel: String): Unit

  @JsName("DebugCapsuleSweepCapture")
  public open fun debugCapsuleSweepCapture(): Unit

  @JsName("DebugCapsuleSweep")
  public open fun debugCapsuleSweep(): Unit

  @JsName("DamageTarget")
  public open fun damageTarget(damageAmount: Number): Unit

  @JsName("CheatScript")
  public open fun cheatScript(scriptName: String): Unit

  @JsName("ChangeSize")
  public open fun changeSize(f: Number): Unit

  @JsName("BugItStringCreator")
  public open fun bugItStringCreator(
    viewLocation: Vector,
    viewRotation: Rotator,
    goString: String,
    locString: String,
  ): Object252

  @JsName("BugItGo")
  public open fun bugItGo(
    x: Number,
    y: Number,
    z: Number,
    pitch: Number,
    yaw: Number,
    roll: Number,
  ): Unit

  @JsName("BugIt")
  public open fun bugIt(screenShotDescription: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CheatManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CheatManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CheatManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CheatManager

    @JsName("C")
    public fun copy(other: UObject): CheatManager

    @JsName("C")
    public fun copy(other: Any): CheatManager
  }
}

@JsName("EUINavigationAction")
public external object UINavigationAction {
  public var Accept: String

  public var Back: String

  public var Num: String

  public var Invalid: String

  @JsName("EUINavigationAction_MAX")
  public var Max: String
}

@JsName("EControllerHand")
public external object ControllerHand {
  public var Left: String

  public var Right: String

  public var AnyHand: String

  public var Pad: String

  public var ExternalCamera: String

  public var Gun: String

  public var HMD: String

  @JsName("Special_1")
  public var Special1: String

  @JsName("Special_2")
  public var Special2: String

  @JsName("Special_3")
  public var Special3: String

  @JsName("Special_4")
  public var Special4: String

  @JsName("Special_5")
  public var Special5: String

  @JsName("Special_6")
  public var Special6: String

  @JsName("Special_7")
  public var Special7: String

  @JsName("Special_8")
  public var Special8: String

  @JsName("Special_9")
  public var Special9: String

  @JsName("Special_10")
  public var Special10: String

  @JsName("Special_11")
  public var Special11: String

  @JsName("ControllerHand_Count")
  public var ControllerHandCount: String

  @JsName("EControllerHand_MAX")
  public var Max: String
}

@JsName("T$253")
public external interface Object253 {
  @JsName("InteractionProfile")
  public var interactionProfile: String

  @JsName("Hand")
  public var hand: String

  @JsName("MotionSource")
  public var motionSource: String

  @JsName("Indentifier")
  public var indentifier: String

  @JsName("Component")
  public var component: String
}

public open external class Key {
  @JsName("KeyName")
  public open var keyName: String

  public open fun clone(): Key

  @JsName("EqualEqual_KeyKey")
  public open fun equalEqualKeyKey(b: Key): Boolean

  @JsName("Key_GetDisplayName")
  public open fun keyGetDisplayName(): String

  @JsName("Key_GetNavigationAction")
  public open fun keyGetNavigationAction(): String

  @JsName("Key_IsAnalog")
  public open fun keyIsAnalog(): Boolean

  @JsName("Key_IsAxis1D")
  public open fun keyIsAxis1d(): Boolean

  @JsName("Key_IsAxis2D")
  public open fun keyIsAxis2d(): Boolean

  @JsName("Key_IsAxis3D")
  public open fun keyIsAxis3d(): Boolean

  @JsName("Key_IsButtonAxis")
  public open fun keyIsButtonAxis(): Boolean

  @JsName("Key_IsDigital")
  public open fun keyIsDigital(): Boolean

  @JsName("Key_IsGamepadKey")
  public open fun keyIsGamepadKey(): Boolean

  @JsName("Key_IsKeyboardKey")
  public open fun keyIsKeyboardKey(): Boolean

  @JsName("Key_IsModifierKey")
  public open fun keyIsModifierKey(): Boolean

  @JsName("Key_IsMouseButton")
  public open fun keyIsMouseButton(): Boolean

  @JsName("Key_IsValid")
  public open fun keyIsValid(): Boolean

  @JsName("Key_IsVectorAxis")
  public open fun keyIsVectorAxis(): Boolean

  @JsName("BreakKey")
  public open fun breakKey(
    interactionProfile: String,
    hand: String,
    motionSource: String,
    indentifier: String,
    component: String,
  ): Object253

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Key

    @JsName("C")
    public fun copy(other: Any): Key

    @JsName("EqualEqual_KeyKey")
    public fun equalEqualKeyKey(a: Key, b: Key): Boolean

    @JsName("Key_GetDisplayName")
    public fun keyGetDisplayName(key: Key): String

    @JsName("Key_GetNavigationAction")
    public fun keyGetNavigationAction(inKey: Key): String

    @JsName("Key_IsAnalog")
    public fun keyIsAnalog(key: Key): Boolean

    @JsName("Key_IsAxis1D")
    public fun keyIsAxis1d(key: Key): Boolean

    @JsName("Key_IsAxis2D")
    public fun keyIsAxis2d(key: Key): Boolean

    @JsName("Key_IsAxis3D")
    public fun keyIsAxis3d(key: Key): Boolean

    @JsName("Key_IsButtonAxis")
    public fun keyIsButtonAxis(key: Key): Boolean

    @JsName("Key_IsDigital")
    public fun keyIsDigital(key: Key): Boolean

    @JsName("Key_IsGamepadKey")
    public fun keyIsGamepadKey(key: Key): Boolean

    @JsName("Key_IsKeyboardKey")
    public fun keyIsKeyboardKey(key: Key): Boolean

    @JsName("Key_IsModifierKey")
    public fun keyIsModifierKey(key: Key): Boolean

    @JsName("Key_IsMouseButton")
    public fun keyIsMouseButton(key: Key): Boolean

    @JsName("Key_IsValid")
    public fun keyIsValid(key: Key): Boolean

    @JsName("Key_IsVectorAxis")
    public fun keyIsVectorAxis(key: Key): Boolean

    @JsName("BreakKey")
    public fun breakKey(
      inKey: Key,
      interactionProfile: String,
      hand: String,
      motionSource: String,
      indentifier: String,
      component: String,
    ): Object253
  }
}

public open external class KeyBind {
  @JsName("Key")
  public open var key: Key

  @JsName("Command")
  public open var command: String

  @JsName("Control")
  public open var control: Boolean

  @JsName("Shift")
  public open var shift: Boolean

  @JsName("Alt")
  public open var alt: Boolean

  @JsName("Cmd")
  public open var cmd: Boolean

  @JsName("bIgnoreCtrl")
  public open var ignoreCtrl: Boolean

  @JsName("bIgnoreShift")
  public open var ignoreShift: Boolean

  @JsName("bIgnoreAlt")
  public open var ignoreAlt: Boolean

  @JsName("bIgnoreCmd")
  public open var ignoreCmd: Boolean

  @JsName("bDisabled")
  public open var disabled: Boolean

  public open fun clone(): KeyBind

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KeyBind

    @JsName("C")
    public fun copy(other: Any): KeyBind
  }
}

public open external class PlayerInput(
  outer: UObject,
) : UObject {
  @JsName("DebugExecBindings")
  public open var debugExecBindings: Array<KeyBind>

  @JsName("InvertedAxis")
  public open var invertedAxis: Array<String>

  @JsName("SetMouseSensitivity")
  public open fun setMouseSensitivity(sensitivity: Number): Unit

  @JsName("SetBind")
  public open fun setBind(bindName: String, command: String): Unit

  @JsName("InvertAxisKey")
  public open fun invertAxisKey(axisKey: Key): Unit

  @JsName("InvertAxis")
  public open fun invertAxis(axisName: String): Unit

  @JsName("ClearSmoothing")
  public open fun clearSmoothing(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlayerInput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlayerInput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlayerInput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlayerInput

    @JsName("C")
    public fun copy(other: UObject): PlayerInput

    @JsName("C")
    public fun copy(other: Any): PlayerInput
  }
}

public open external class RuntimeFloatCurve {
  @JsName("EditorCurveData")
  public open var editorCurveData: RichCurve

  @JsName("ExternalCurve")
  public open var externalCurve: CurveFloat

  public open fun clone(): RuntimeFloatCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RuntimeFloatCurve

    @JsName("C")
    public fun copy(other: Any): RuntimeFloatCurve
  }
}

public open external class ForceFeedbackChannelDetails {
  @JsName("bAffectsLeftLarge")
  public open var affectsLeftLarge: Boolean

  @JsName("bAffectsLeftSmall")
  public open var affectsLeftSmall: Boolean

  @JsName("bAffectsRightLarge")
  public open var affectsRightLarge: Boolean

  @JsName("bAffectsRightSmall")
  public open var affectsRightSmall: Boolean

  @JsName("Curve")
  public open var curve: RuntimeFloatCurve

  public open fun clone(): ForceFeedbackChannelDetails

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ForceFeedbackChannelDetails

    @JsName("C")
    public fun copy(other: Any): ForceFeedbackChannelDetails
  }
}

@JsName("EAttenuationDistanceModel")
public external object AttenuationDistanceModel {
  public var Linear: String

  public var Logarithmic: String

  public var Inverse: String

  public var LogReverse: String

  public var NaturalSound: String

  public var Custom: String

  @JsName("EAttenuationDistanceModel_MAX")
  public var Max: String
}

@JsName("EAttenuationShape")
public external object AttenuationShape {
  public var Sphere: String

  public var Capsule: String

  public var Box: String

  public var Cone: String

  @JsName("EAttenuationShape_MAX")
  public var Max: String
}

@JsName("ENaturalSoundFalloffMode")
public external object NaturalSoundFalloffMode {
  public var Continues: String

  public var Silent: String

  public var Hold: String

  @JsName("ENaturalSoundFalloffMode_MAX")
  public var Max: String
}

public open external class BaseAttenuationSettings {
  @JsName("DistanceAlgorithm")
  public open var distanceAlgorithm: String

  @JsName("AttenuationShape")
  public open var attenuationShape: String

  public open var dBAttenuationAtMax: Number

  @JsName("FalloffMode")
  public open var falloffMode: String

  @JsName("AttenuationShapeExtents")
  public open var attenuationShapeExtents: Vector

  @JsName("ConeOffset")
  public open var coneOffset: Number

  @JsName("FalloffDistance")
  public open var falloffDistance: Number

  @JsName("ConeSphereRadius")
  public open var coneSphereRadius: Number

  @JsName("ConeSphereFalloffDistance")
  public open var coneSphereFalloffDistance: Number

  @JsName("CustomAttenuationCurve")
  public open var customAttenuationCurve: RuntimeFloatCurve

  public open fun clone(): BaseAttenuationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BaseAttenuationSettings

    @JsName("C")
    public fun copy(other: Any): BaseAttenuationSettings
  }
}

public open external class ForceFeedbackAttenuationSettings : BaseAttenuationSettings {
  public override fun clone(): ForceFeedbackAttenuationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ForceFeedbackAttenuationSettings

    @JsName("C")
    public fun copy(other: Any): ForceFeedbackAttenuationSettings
  }
}

public open external class ForceFeedbackAttenuation(
  outer: UObject,
) : UObject {
  @JsName("Attenuation")
  public open var attenuation: ForceFeedbackAttenuationSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ForceFeedbackAttenuation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ForceFeedbackAttenuation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ForceFeedbackAttenuation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ForceFeedbackAttenuation

    @JsName("C")
    public fun copy(other: UObject): ForceFeedbackAttenuation

    @JsName("C")
    public fun copy(other: Any): ForceFeedbackAttenuation
  }
}

@JsName("T$254")
public external interface Object254 {
  @JsName("OutAttenuationSettings")
  public var outAttenuationSettings: ForceFeedbackAttenuationSettings

  @JsName("$")
  public var value: Boolean
}

public open external class ForceFeedbackComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("ForceFeedbackEffect")
  public open var forceFeedbackEffect: ForceFeedbackEffect

  @JsName("bAutoDestroy")
  public open var autoDestroy: Boolean

  @JsName("bStopWhenOwnerDestroyed")
  public open var stopWhenOwnerDestroyed: Boolean

  @JsName("bLooping")
  public open var looping: Boolean

  @JsName("bIgnoreTimeDilation")
  public open var ignoreTimeDilation: Boolean

  @JsName("bOverrideAttenuation")
  public open var overrideAttenuation: Boolean

  @JsName("IntensityMultiplier")
  public open var intensityMultiplier: Number

  @JsName("AttenuationSettings")
  public open var attenuationSettings: ForceFeedbackAttenuation

  @JsName("AttenuationOverrides")
  public open var attenuationOverrides: ForceFeedbackAttenuationSettings

  @JsName("OnForceFeedbackFinished")
  public open var onForceFeedbackFinished:
      UnrealEngineMulticastDelegate<(ForceFeedbackComponent: ForceFeedbackComponent) -> Unit>

  @JsName("Stop")
  public open fun stop(): Unit

  @JsName("SetIntensityMultiplier")
  public open fun setIntensityMultiplier(newIntensityMultiplier: Number): Unit

  @JsName("SetForceFeedbackEffect")
  public open fun setForceFeedbackEffect(newForceFeedbackEffect: ForceFeedbackEffect): Unit

  @JsName("Play")
  public open fun play(startTime: Number): Unit

  @JsName("BP_GetAttenuationSettingsToApply")
  public open
      fun bpGetAttenuationSettingsToApply(outAttenuationSettings: ForceFeedbackAttenuationSettings):
      Object254

  @JsName("AdjustAttenuation")
  public open fun adjustAttenuation(inAttenuationSettings: ForceFeedbackAttenuationSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ForceFeedbackComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ForceFeedbackComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ForceFeedbackComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ForceFeedbackComponent

    @JsName("C")
    public fun copy(other: UObject): ForceFeedbackComponent

    @JsName("C")
    public fun copy(other: Any): ForceFeedbackComponent
  }
}

public open external class ForceFeedbackEffect(
  outer: UObject,
) : UObject {
  @JsName("ChannelDetails")
  public open var channelDetails: Array<ForceFeedbackChannelDetails>

  @JsName("Duration")
  public open var duration: Number

  @JsName("SpawnForceFeedbackAttached")
  public open fun spawnForceFeedbackAttached(
    attachToComponent: SceneComponent,
    attachPointName: String,
    location: Vector,
    rotation: Rotator,
    locationType: String,
    stopWhenAttachedToDestroyed: Boolean,
    looping: Boolean,
    intensityMultiplier: Number,
    startTime: Number,
    attenuationSettings: ForceFeedbackAttenuation,
    autoDestroy: Boolean,
  ): ForceFeedbackComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ForceFeedbackEffect

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ForceFeedbackEffect

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ForceFeedbackEffect

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ForceFeedbackEffect

    @JsName("C")
    public fun copy(other: UObject): ForceFeedbackEffect

    @JsName("C")
    public fun copy(other: Any): ForceFeedbackEffect

    @JsName("SpawnForceFeedbackAttached")
    public fun spawnForceFeedbackAttached(
      forceFeedbackEffect: ForceFeedbackEffect,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      stopWhenAttachedToDestroyed: Boolean,
      looping: Boolean,
      intensityMultiplier: Number,
      startTime: Number,
      attenuationSettings: ForceFeedbackAttenuation,
      autoDestroy: Boolean,
    ): ForceFeedbackComponent
  }
}

public open external class ActiveForceFeedbackEffect {
  @JsName("ForceFeedbackEffect")
  public open var forceFeedbackEffect: ForceFeedbackEffect

  public open fun clone(): ActiveForceFeedbackEffect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActiveForceFeedbackEffect

    @JsName("C")
    public fun copy(other: Any): ActiveForceFeedbackEffect
  }
}

public open external class ChildConnection(
  outer: UObject,
) : NetConnection {
  @JsName("Parent")
  public open var parent: NetConnection

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ChildConnection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ChildConnection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ChildConnection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ChildConnection

    @JsName("C")
    public fun copy(other: UObject): ChildConnection

    @JsName("C")
    public fun copy(other: Any): ChildConnection
  }
}

public open external class Package(
  outer: UObject,
) : UObject {
  @JsName("DeletePackage")
  public open fun deletePackage(): Boolean

  @JsName("FindWorldInPackage")
  public open fun findWorldInPackage(): World

  @JsName("SavePackage")
  public open fun savePackage(filename: String): Boolean

  @JsName("GetLongPackagePath")
  public open fun getLongPackagePath(): String

  @JsName("HasAnyPackageFlags")
  public open fun hasAnyPackageFlags(flags: Number): Boolean

  @JsName("LoadPackage")
  public open fun loadPackage(packageName: String): Package

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Package

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Package

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Package

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Package

    @JsName("C")
    public fun copy(other: UObject): Package

    @JsName("C")
    public fun copy(other: Any): Package

    @JsName("DeletePackage")
    public fun deletePackage(`package`: Package): Boolean

    @JsName("FindWorldInPackage")
    public fun findWorldInPackage(`package`: Package): World

    @JsName("SavePackage")
    public fun savePackage(`package`: Package, filename: String): Boolean

    @JsName("GetLongPackagePath")
    public fun getLongPackagePath(inPackage: Package): String

    @JsName("HasAnyPackageFlags")
    public fun hasAnyPackageFlags(`package`: Package, flags: Number): Boolean

    @JsName("LoadPackage")
    public fun loadPackage(inOuter: Package, packageName: String): Package
  }
}

public open external class ChannelDefinition {
  @JsName("ChannelName")
  public open var channelName: String

  @JsName("ClassName")
  public open var className: String

  @JsName("ChannelClass")
  public open var channelClass: UnrealEngineClass

  @JsName("StaticChannelIndex")
  public open var staticChannelIndex: Number

  @JsName("bTickOnCreate")
  public open var tickOnCreate: Boolean

  @JsName("bServerOpen")
  public open var serverOpen: Boolean

  @JsName("bClientOpen")
  public open var clientOpen: Boolean

  @JsName("bInitialServer")
  public open var initialServer: Boolean

  @JsName("bInitialClient")
  public open var initialClient: Boolean

  public open fun clone(): ChannelDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChannelDefinition

    @JsName("C")
    public fun copy(other: Any): ChannelDefinition
  }
}

public open external class Channel(
  outer: UObject,
) : UObject {
  @JsName("Connection")
  public open var connection: NetConnection

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Channel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Channel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Channel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Channel

    @JsName("C")
    public fun copy(other: UObject): Channel

    @JsName("C")
    public fun copy(other: Any): Channel
  }
}

public open external class ReplicationDriver(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReplicationDriver

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReplicationDriver

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReplicationDriver

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReplicationDriver

    @JsName("C")
    public fun copy(other: UObject): ReplicationDriver

    @JsName("C")
    public fun copy(other: Any): ReplicationDriver
  }
}

public open external class NetDriver(
  outer: UObject,
) : UObject {
  @JsName("NetConnectionClassName")
  public open var netConnectionClassName: String

  @JsName("ReplicationDriverClassName")
  public open var replicationDriverClassName: String

  @JsName("MaxDownloadSize")
  public open var maxDownloadSize: Number

  @JsName("bClampListenServerTickRate")
  public open var clampListenServerTickRate: Boolean

  @JsName("NetServerMaxTickRate")
  public open var netServerMaxTickRate: Number

  @JsName("MaxNetTickRate")
  public open var maxNetTickRate: Number

  @JsName("MaxInternetClientRate")
  public open var maxInternetClientRate: Number

  @JsName("MaxClientRate")
  public open var maxClientRate: Number

  @JsName("ServerTravelPause")
  public open var serverTravelPause: Number

  @JsName("SpawnPrioritySeconds")
  public open var spawnPrioritySeconds: Number

  @JsName("RelevantTimeout")
  public open var relevantTimeout: Number

  @JsName("KeepAliveTime")
  public open var keepAliveTime: Number

  @JsName("InitialConnectTimeout")
  public open var initialConnectTimeout: Number

  @JsName("ConnectionTimeout")
  public open var connectionTimeout: Number

  @JsName("TimeoutMultiplierForUnoptimizedBuilds")
  public open var timeoutMultiplierForUnoptimizedBuilds: Number

  @JsName("bNoTimeouts")
  public open var noTimeouts: Boolean

  @JsName("bNeverApplyNetworkEmulationSettings")
  public open var neverApplyNetworkEmulationSettings: Boolean

  @JsName("ServerConnection")
  public open var serverConnection: NetConnection

  @JsName("ClientConnections")
  public open var clientConnections: Array<NetConnection>

  @JsName("RecentlyDisconnectedTrackingTime")
  public open var recentlyDisconnectedTrackingTime: Number

  @JsName("World")
  public open var world: World

  @JsName("WorldPackage")
  public open var worldPackage: Package

  @JsName("NetConnectionClass")
  public open var netConnectionClass: UnrealEngineClass

  @JsName("ReplicationDriverClass")
  public open var replicationDriverClass: UnrealEngineClass

  @JsName("NetDriverName")
  public open var netDriverName: String

  @JsName("ChannelDefinitions")
  public open var channelDefinitions: Array<ChannelDefinition>

  @JsName("ChannelDefinitionMap")
  public open var channelDefinitionMap: Any

  @JsName("ActorChannelPool")
  public open var actorChannelPool: Array<Channel>

  @JsName("ReplicationDriver")
  public open var replicationDriver: ReplicationDriver

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NetDriver

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NetDriver

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NetDriver

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NetDriver

    @JsName("C")
    public fun copy(other: UObject): NetDriver

    @JsName("C")
    public fun copy(other: Any): NetDriver
  }
}

public open external class PackageMap(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PackageMap

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PackageMap

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PackageMap

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PackageMap

    @JsName("C")
    public fun copy(other: UObject): PackageMap

    @JsName("C")
    public fun copy(other: Any): PackageMap
  }
}

public open external class NetConnection(
  outer: UObject,
) : Player {
  @JsName("Children")
  public open var children: Array<ChildConnection>

  @JsName("Driver")
  public open var driver: NetDriver

  @JsName("PackageMapClass")
  public open var packageMapClass: UnrealEngineClass

  @JsName("PackageMap")
  public open var packageMap: PackageMap

  @JsName("OpenChannels")
  public open var openChannels: Array<Channel>

  @JsName("SentTemporaries")
  public open var sentTemporaries: Array<Actor>

  @JsName("ViewTarget")
  public open var viewTarget: Actor

  @JsName("OwningActor")
  public open var owningActor: Actor

  @JsName("MaxPacket")
  public open var maxPacket: Number

  @JsName("InternalAck")
  public open var internalAck: Boolean

  @JsName("PlayerId")
  public open var playerId: UniqueNetIdRepl

  @JsName("LastReceiveTime")
  public open var lastReceiveTime: Any

  @JsName("ChannelsToTick")
  public open var channelsToTick: Array<Channel>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NetConnection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NetConnection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NetConnection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NetConnection

    @JsName("C")
    public fun copy(other: UObject): NetConnection

    @JsName("C")
    public fun copy(other: Any): NetConnection
  }
}

public open external class CachedKeyToActionInfo {
  @JsName("PlayerInput")
  public open var playerInput: PlayerInput

  public open fun clone(): CachedKeyToActionInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CachedKeyToActionInfo

    @JsName("C")
    public fun copy(other: Any): CachedKeyToActionInfo
  }
}

@JsName("EControllerAnalogStick")
public external object ControllerAnalogStick {
  @JsName("CAS_LeftStick")
  public var LeftStick: String

  @JsName("CAS_RightStick")
  public var RightStick: String

  @JsName("CAS_MAX")
  public var Max: String
}

@JsName("T$255")
public external interface Object255 {
  @JsName("LocationX")
  public var locationX: Number

  @JsName("LocationY")
  public var locationY: Number

  @JsName("bIsCurrentlyPressed")
  public var isCurrentlyPressed: Boolean
}

@JsName("T$256")
public external interface Object256 {
  @JsName("DeltaX")
  public var deltaX: Number

  @JsName("DeltaY")
  public var deltaY: Number
}

@JsName("T$257")
public external interface Object257 {
  @JsName("StickX")
  public var stickX: Number

  @JsName("StickY")
  public var stickY: Number
}

public open external class InputComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("CachedKeyToActionInfo")
  public open var cachedKeyToActionInfo: Array<CachedKeyToActionInfo>

  @JsName("WasControllerKeyJustReleased")
  public open fun wasControllerKeyJustReleased(key: Key): Boolean

  @JsName("WasControllerKeyJustPressed")
  public open fun wasControllerKeyJustPressed(key: Key): Boolean

  @JsName("OnInputOwnerEndPlayed")
  public open fun onInputOwnerEndPlayed(inOwner: Actor, endPlayReason: String): Unit

  @JsName("IsControllerKeyDown")
  public open fun isControllerKeyDown(key: Key): Boolean

  @JsName("GetTouchState")
  public open fun getTouchState(
    fingerIndex: Number,
    locationX: Number,
    locationY: Number,
    isCurrentlyPressed: Boolean,
  ): Object255

  @JsName("GetControllerVectorKeyState")
  public open fun getControllerVectorKeyState(key: Key): Vector

  @JsName("GetControllerMouseDelta")
  public open fun getControllerMouseDelta(deltaX: Number, deltaY: Number): Object256

  @JsName("GetControllerKeyTimeDown")
  public open fun getControllerKeyTimeDown(key: Key): Number

  @JsName("GetControllerAnalogStickState")
  public open fun getControllerAnalogStickState(
    whichStick: String,
    stickX: Number,
    stickY: Number,
  ): Object257

  @JsName("GetControllerAnalogKeyState")
  public open fun getControllerAnalogKeyState(key: Key): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputComponent

    @JsName("C")
    public fun copy(other: UObject): InputComponent

    @JsName("C")
    public fun copy(other: Any): InputComponent
  }
}

public open external class TouchInputControl {
  @JsName("Image1")
  public open var image1: Texture2d

  @JsName("Image2")
  public open var image2: Texture2d

  @JsName("Center")
  public open var center: Vector2d

  @JsName("VisualSize")
  public open var visualSize: Vector2d

  @JsName("ThumbSize")
  public open var thumbSize: Vector2d

  @JsName("InteractionSize")
  public open var interactionSize: Vector2d

  @JsName("InputScale")
  public open var inputScale: Vector2d

  @JsName("MainInputKey")
  public open var mainInputKey: Key

  @JsName("AltInputKey")
  public open var altInputKey: Key

  public open fun clone(): TouchInputControl

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TouchInputControl

    @JsName("C")
    public fun copy(other: Any): TouchInputControl
  }
}

public open external class TouchInterface(
  outer: UObject,
) : UObject {
  @JsName("Controls")
  public open var controls: Array<TouchInputControl>

  @JsName("ActiveOpacity")
  public open var activeOpacity: Number

  @JsName("InactiveOpacity")
  public open var inactiveOpacity: Number

  @JsName("TimeUntilDeactive")
  public open var timeUntilDeactive: Number

  @JsName("TimeUntilReset")
  public open var timeUntilReset: Number

  @JsName("ActivationDelay")
  public open var activationDelay: Number

  @JsName("bPreventRecenter")
  public open var preventRecenter: Boolean

  @JsName("StartupDelay")
  public open var startupDelay: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TouchInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TouchInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TouchInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TouchInterface

    @JsName("C")
    public fun copy(other: UObject): TouchInterface

    @JsName("C")
    public fun copy(other: Any): TouchInterface
  }
}

public open external class SphereComponent(
  outer: UObject,
) : ShapeComponent {
  @JsName("SphereRadius")
  public open var sphereRadius: Number

  @JsName("SetSphereRadius")
  public open fun setSphereRadius(inSphereRadius: Number, updateOverlaps: Boolean): Unit

  @JsName("GetUnscaledSphereRadius")
  public open fun getUnscaledSphereRadius(): Number

  @JsName("GetShapeScale")
  public open fun getShapeScale(): Number

  @JsName("GetScaledSphereRadius")
  public open fun getScaledSphereRadius(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SphereComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SphereComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SphereComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SphereComponent

    @JsName("C")
    public fun copy(other: UObject): SphereComponent

    @JsName("C")
    public fun copy(other: Any): SphereComponent
  }
}

@JsName("StaticMeshComponentLODInfo")
public open external class StaticMeshComponentLodInfo {
  public open fun clone(): StaticMeshComponentLodInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StaticMeshComponentLodInfo

    @JsName("C")
    public fun copy(other: Any): StaticMeshComponentLodInfo
  }
}

public open external class StreamingTextureBuildInfo {
  @JsName("PackedRelativeBox")
  public open var packedRelativeBox: Any

  @JsName("TextureLevelIndex")
  public open var textureLevelIndex: Number

  @JsName("TexelFactor")
  public open var texelFactor: Number

  public open fun clone(): StreamingTextureBuildInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StreamingTextureBuildInfo

    @JsName("C")
    public fun copy(other: Any): StreamingTextureBuildInfo
  }
}

public open external class LightmassPrimitiveSettings {
  @JsName("bUseTwoSidedLighting")
  public open var useTwoSidedLighting: Boolean

  @JsName("bShadowIndirectOnly")
  public open var shadowIndirectOnly: Boolean

  @JsName("bUseEmissiveForStaticLighting")
  public open var useEmissiveForStaticLighting: Boolean

  @JsName("bUseVertexNormalForHemisphereGather")
  public open var useVertexNormalForHemisphereGather: Boolean

  @JsName("EmissiveLightFalloffExponent")
  public open var emissiveLightFalloffExponent: Number

  @JsName("EmissiveLightExplicitInfluenceRadius")
  public open var emissiveLightExplicitInfluenceRadius: Number

  @JsName("EmissiveBoost")
  public open var emissiveBoost: Number

  @JsName("DiffuseBoost")
  public open var diffuseBoost: Number

  @JsName("FullyOccludedSamplesFraction")
  public open var fullyOccludedSamplesFraction: Number

  public open fun clone(): LightmassPrimitiveSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassPrimitiveSettings

    @JsName("C")
    public fun copy(other: Any): LightmassPrimitiveSettings
  }
}

public open external class ProcMeshVertex {
  public open var position: Vector

  @JsName("Normal")
  public open var normal: Vector

  @JsName("Tangent")
  public open var tangent: ProcMeshTangent

  @JsName("Color")
  public open var color: Color

  @JsName("UV0")
  public open var uv0: Vector2d

  @JsName("UV1")
  public open var uv1: Vector2d

  @JsName("UV2")
  public open var uv2: Vector2d

  @JsName("UV3")
  public open var uv3: Vector2d

  public open fun clone(): ProcMeshVertex

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ProcMeshVertex

    @JsName("C")
    public fun copy(other: Any): ProcMeshVertex
  }
}

public open external class ProcMeshSection {
  @JsName("ProcVertexBuffer")
  public open var procVertexBuffer: Array<ProcMeshVertex>

  @JsName("ProcIndexBuffer")
  public open var procIndexBuffer: Array<Any>

  @JsName("SectionLocalBox")
  public open var sectionLocalBox: Box

  @JsName("bEnableCollision")
  public open var enableCollision: Boolean

  @JsName("bSectionVisible")
  public open var sectionVisible: Boolean

  public open fun clone(): ProcMeshSection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ProcMeshSection

    @JsName("C")
    public fun copy(other: Any): ProcMeshSection
  }
}

@JsName("EProcMeshSliceCapOption")
public external object ProcMeshSliceCapOption {
  public var NoCap: String

  public var CreateNewSectionForCap: String

  public var UseLastSectionForCap: String

  @JsName("EProcMeshSliceCapOption_MAX")
  public var Max: String
}

@JsName("T$259")
public external interface OutOtherHalfProcMeshProvider {
  @JsName("OutOtherHalfProcMesh")
  public var outOtherHalfProcMesh: ProceduralMeshComponent
}

public open external class ProceduralMeshComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("bUseComplexAsSimpleCollision")
  public open var useComplexAsSimpleCollision: Boolean

  @JsName("bUseAsyncCooking")
  public open var useAsyncCooking: Boolean

  @JsName("ProcMeshBodySetup")
  public open var procMeshBodySetup: BodySetup

  @JsName("ProcMeshSections")
  public open var procMeshSections: Array<ProcMeshSection>

  @JsName("CollisionConvexElems")
  public open var collisionConvexElems: Array<KConvexElem>

  @JsName("LocalBounds")
  public open var localBounds: BoxSphereBounds

  @JsName("AsyncBodySetupQueue")
  public open var asyncBodySetupQueue: Array<BodySetup>

  @JsName("UpdateMeshSection_LinearColor")
  public open fun updateMeshSectionLinearColor(
    sectionIndex: Number,
    vertices: Array<Vector>,
    normals: Array<Vector>,
    uv0: Array<Vector2d>,
    uv1: Array<Vector2d>,
    uv2: Array<Vector2d>,
    uv3: Array<Vector2d>,
    vertexColors: Array<LinearColor>,
    tangents: Array<ProcMeshTangent>,
  ): Unit

  @JsName("UpdateMeshSection")
  public open fun updateMeshSection(
    sectionIndex: Number,
    vertices: Array<Vector>,
    normals: Array<Vector>,
    uv0: Array<Vector2d>,
    vertexColors: Array<Color>,
    tangents: Array<ProcMeshTangent>,
  ): Unit

  @JsName("SetMeshSectionVisible")
  public open fun setMeshSectionVisible(sectionIndex: Number, newVisibility: Boolean): Unit

  @JsName("IsMeshSectionVisible")
  public open fun isMeshSectionVisible(sectionIndex: Number): Boolean

  @JsName("GetNumSections")
  public open fun getNumSections(): Number

  @JsName("CreateMeshSection_LinearColor")
  public open fun createMeshSectionLinearColor(
    sectionIndex: Number,
    vertices: Array<Vector>,
    triangles: Array<Number>,
    normals: Array<Vector>,
    uv0: Array<Vector2d>,
    uv1: Array<Vector2d>,
    uv2: Array<Vector2d>,
    uv3: Array<Vector2d>,
    vertexColors: Array<LinearColor>,
    tangents: Array<ProcMeshTangent>,
    createCollision: Boolean,
  ): Unit

  @JsName("CreateMeshSection")
  public open fun createMeshSection(
    sectionIndex: Number,
    vertices: Array<Vector>,
    triangles: Array<Number>,
    normals: Array<Vector>,
    uv0: Array<Vector2d>,
    vertexColors: Array<Color>,
    tangents: Array<ProcMeshTangent>,
    createCollision: Boolean,
  ): Unit

  @JsName("ClearMeshSection")
  public open fun clearMeshSection(sectionIndex: Number): Unit

  @JsName("ClearCollisionConvexMeshes")
  public open fun clearCollisionConvexMeshes(): Unit

  @JsName("ClearAllMeshSections")
  public open fun clearAllMeshSections(): Unit

  @JsName("AddCollisionConvexMesh")
  public open fun addCollisionConvexMesh(convexVerts: Array<Vector>): Unit

  @JsName("GetSectionFromProceduralMesh")
  public open fun getSectionFromProceduralMesh(
    sectionIndex: Number,
    vertices: Array<Vector>,
    triangles: Array<Number>,
    normals: Array<Vector>,
    uVs: Array<Vector2d>,
    tangents: Array<ProcMeshTangent>,
  ): Object239

  @JsName("SliceProceduralMesh")
  public open fun sliceProceduralMesh(
    planePosition: Vector,
    planeNormal: Vector,
    createOtherHalf: Boolean,
    outOtherHalfProcMesh: ProceduralMeshComponent,
    capOption: String,
    capMaterial: MaterialInterface,
  ): OutOtherHalfProcMeshProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralMeshComponent

    @JsName("C")
    public fun copy(other: UObject): ProceduralMeshComponent

    @JsName("C")
    public fun copy(other: Any): ProceduralMeshComponent

    @JsName("GetSectionFromProceduralMesh")
    public fun getSectionFromProceduralMesh(
      inProcMesh: ProceduralMeshComponent,
      sectionIndex: Number,
      vertices: Array<Vector>,
      triangles: Array<Number>,
      normals: Array<Vector>,
      uVs: Array<Vector2d>,
      tangents: Array<ProcMeshTangent>,
    ): Object239

    @JsName("SliceProceduralMesh")
    public fun sliceProceduralMesh(
      inProcMesh: ProceduralMeshComponent,
      planePosition: Vector,
      planeNormal: Vector,
      createOtherHalf: Boolean,
      outOtherHalfProcMesh: ProceduralMeshComponent,
      capOption: String,
      capMaterial: MaterialInterface,
    ): OutOtherHalfProcMeshProvider
  }
}

@JsName("EVertexPaintAxis")
public external object VertexPaintAxis {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  @JsName("EVertexPaintAxis_MAX")
  public var Max: String
}

@JsName("T$261")
public external interface Object261 {
  @JsName("Min")
  public var min: Vector

  @JsName("Max")
  public var max: Vector
}

public open external class StaticMeshComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("ForcedLodModel")
  public open var forcedLodModel: Number

  @JsName("PreviousLODLevel")
  public open var previousLodLevel: Number

  @JsName("MinLOD")
  public open var minLod: Number

  @JsName("SubDivisionStepSize")
  public open var subDivisionStepSize: Number

  @JsName("StaticMesh")
  public open var staticMesh: StaticMesh

  @JsName("WireframeColorOverride")
  public open var wireframeColorOverride: Color

  @JsName("bEvaluateWorldPositionOffset")
  public open var evaluateWorldPositionOffset: Boolean

  @JsName("SelectedEditorSection")
  public open var selectedEditorSection: Number

  @JsName("SelectedEditorMaterial")
  public open var selectedEditorMaterial: Number

  @JsName("SectionIndexPreview")
  public open var sectionIndexPreview: Number

  @JsName("MaterialIndexPreview")
  public open var materialIndexPreview: Number

  @JsName("StaticMeshImportVersion")
  public open var staticMeshImportVersion: Number

  @JsName("bOverrideWireframeColor")
  public open var overrideWireframeColor: Boolean

  @JsName("bOverrideMinLOD")
  public open var overrideMinLod: Boolean

  @JsName("bOverrideNavigationExport")
  public open var overrideNavigationExport: Boolean

  @JsName("bForceNavigationObstacle")
  public open var forceNavigationObstacle: Boolean

  @JsName("bDisallowMeshPaintPerInstance")
  public open var disallowMeshPaintPerInstance: Boolean

  @JsName("bIgnoreInstanceForTextureStreaming")
  public open var ignoreInstanceForTextureStreaming: Boolean

  @JsName("bOverrideLightMapRes")
  public open var overrideLightMapRes: Boolean

  @JsName("bCastDistanceFieldIndirectShadow")
  public open var castDistanceFieldIndirectShadow: Boolean

  @JsName("bOverrideDistanceFieldSelfShadowBias")
  public open var overrideDistanceFieldSelfShadowBias: Boolean

  @JsName("bUseSubDivisions")
  public open var useSubDivisions: Boolean

  @JsName("bUseDefaultCollision")
  public open var useDefaultCollision: Boolean

  @JsName("bCustomOverrideVertexColorPerLOD")
  public open var customOverrideVertexColorPerLod: Boolean

  @JsName("bDisplayVertexColors")
  public open var displayVertexColors: Boolean

  @JsName("bDisplayPhysicalMaterialMasks")
  public open var displayPhysicalMaterialMasks: Boolean

  @JsName("bDisplayNaniteFallbackMesh")
  public open var displayNaniteFallbackMesh: Boolean

  @JsName("bSortTriangles")
  public open var sortTriangles: Boolean

  @JsName("bReverseCulling")
  public open var reverseCulling: Boolean

  @JsName("OverriddenLightMapRes")
  public open var overriddenLightMapRes: Number

  @JsName("DistanceFieldIndirectShadowMinVisibility")
  public open var distanceFieldIndirectShadowMinVisibility: Number

  @JsName("DistanceFieldSelfShadowBias")
  public open var distanceFieldSelfShadowBias: Number

  @JsName("StreamingDistanceMultiplier")
  public open var streamingDistanceMultiplier: Number

  @JsName("IrrelevantLights")
  public open var irrelevantLights: Array<Guid>

  @JsName("LODData")
  public open var lodData: Array<StaticMeshComponentLodInfo>

  @JsName("StreamingTextureData")
  public open var streamingTextureData: Array<StreamingTextureBuildInfo>

  @JsName("StaticMeshDerivedDataKey")
  public open var staticMeshDerivedDataKey: String

  @JsName("MaterialStreamingRelativeBoxes")
  public open var materialStreamingRelativeBoxes: Array<Any>

  @JsName("LightmassSettings")
  public open var lightmassSettings: LightmassPrimitiveSettings

  @JsName("SetStaticMesh")
  public open fun setStaticMesh(newMesh: StaticMesh): Boolean

  @JsName("SetReverseCulling")
  public open fun setReverseCulling(reverseCulling: Boolean): Unit

  @JsName("SetForcedLodModel")
  public open fun setForcedLodModel(newForcedLodModel: Number): Unit

  @JsName("SetEvaluateWorldPositionOffsetInRayTracing")
  public open fun setEvaluateWorldPositionOffsetInRayTracing(newValue: Boolean): Unit

  @JsName("SetDistanceFieldSelfShadowBias")
  public open fun setDistanceFieldSelfShadowBias(newValue: Number): Unit

  @JsName("OnRep_StaticMesh")
  public open fun onRepStaticMesh(oldStaticMesh: StaticMesh): Unit

  @JsName("GetLocalBounds")
  public open fun getLocalBounds(min: Vector, max: Vector): Object261

  @JsName("GetPhysicsBodySetupFromStaticMeshComponent")
  public open fun getPhysicsBodySetupFromStaticMeshComponent(): BodySetup

  @JsName("CopyProceduralMeshFromStaticMeshComponent")
  public open fun copyProceduralMeshFromStaticMeshComponent(
    lodIndex: Number,
    procMeshComponent: ProceduralMeshComponent,
    createCollision: Boolean,
  ): Unit

  @JsName("HasInstanceVertexColors")
  public open fun hasInstanceVertexColors(): Boolean

  @JsName("PaintVerticesLerpAlongAxis")
  public open fun paintVerticesLerpAlongAxis(
    startColor: LinearColor,
    endColor: LinearColor,
    axis: String,
    convertToSrgb: Boolean,
  ): Unit

  @JsName("PaintVerticesSingleColor")
  public open fun paintVerticesSingleColor(fillColor: LinearColor, convertToSrgb: Boolean): Unit

  @JsName("RemovePaintedVertices")
  public open fun removePaintedVertices(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshComponent

    @JsName("C")
    public fun copy(other: UObject): StaticMeshComponent

    @JsName("C")
    public fun copy(other: Any): StaticMeshComponent

    @JsName("GetPhysicsBodySetupFromStaticMeshComponent")
    public fun getPhysicsBodySetupFromStaticMeshComponent(inStaticMeshComp: StaticMeshComponent):
        BodySetup

    @JsName("CopyProceduralMeshFromStaticMeshComponent")
    public fun copyProceduralMeshFromStaticMeshComponent(
      staticMeshComponent: StaticMeshComponent,
      lodIndex: Number,
      procMeshComponent: ProceduralMeshComponent,
      createCollision: Boolean,
    ): Unit

    @JsName("HasInstanceVertexColors")
    public fun hasInstanceVertexColors(staticMeshComponent: StaticMeshComponent): Boolean

    @JsName("PaintVerticesLerpAlongAxis")
    public fun paintVerticesLerpAlongAxis(
      staticMeshComponent: StaticMeshComponent,
      startColor: LinearColor,
      endColor: LinearColor,
      axis: String,
      convertToSrgb: Boolean,
    ): Unit

    @JsName("PaintVerticesSingleColor")
    public fun paintVerticesSingleColor(
      staticMeshComponent: StaticMeshComponent,
      fillColor: LinearColor,
      convertToSrgb: Boolean,
    ): Unit

    @JsName("RemovePaintedVertices")
    public fun removePaintedVertices(staticMeshComponent: StaticMeshComponent): Unit
  }
}

public open external class DefaultPawn(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Pawn {
  @JsName("BaseTurnRate")
  public open var baseTurnRate: Number

  @JsName("BaseLookUpRate")
  public open var baseLookUpRate: Number

  @JsName("MovementComponent")
  public open var movementComponent: PawnMovementComponent

  @JsName("CollisionComponent")
  public open var collisionComponent: SphereComponent

  @JsName("MeshComponent")
  public open var meshComponent: StaticMeshComponent

  @JsName("bAddDefaultMovementBindings")
  public open var addDefaultMovementBindings: Boolean

  @JsName("TurnAtRate")
  public open fun turnAtRate(rate: Number): Unit

  @JsName("MoveUp_World")
  public open fun moveUpWorld(`val`: Number): Unit

  @JsName("MoveRight")
  public open fun moveRight(`val`: Number): Unit

  @JsName("MoveForward")
  public open fun moveForward(`val`: Number): Unit

  @JsName("LookUpAtRate")
  public open fun lookUpAtRate(rate: Number): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DefaultPawn

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DefaultPawn

    @JsName("C")
    public fun copy(other: UObject): DefaultPawn

    @JsName("C")
    public fun copy(other: Any): DefaultPawn
  }
}

public open external class SpectatorPawn(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : DefaultPawn {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpectatorPawn

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpectatorPawn

    @JsName("C")
    public fun copy(other: UObject): SpectatorPawn

    @JsName("C")
    public fun copy(other: Any): SpectatorPawn
  }
}

@JsName("EViewTargetBlendFunction")
public external object ViewTargetBlendFunction {
  @JsName("VTBlend_Linear")
  public var Linear: String

  @JsName("VTBlend_Cubic")
  public var Cubic: String

  @JsName("VTBlend_EaseIn")
  public var EaseIn: String

  @JsName("VTBlend_EaseOut")
  public var EaseOut: String

  @JsName("VTBlend_EaseInOut")
  public var EaseInOut: String

  @JsName("VTBlend_PreBlended")
  public var PreBlended: String

  @JsName("VTBlend_MAX")
  public var Max: String
}

public open external class WidgetAnimationBinding {
  @JsName("WidgetName")
  public open var widgetName: String

  @JsName("SlotWidgetName")
  public open var slotWidgetName: String

  @JsName("AnimationGuid")
  public open var animationGuid: Guid

  @JsName("bIsRootWidget")
  public open var isRootWidget: Boolean

  public open fun clone(): WidgetAnimationBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WidgetAnimationBinding

    @JsName("C")
    public fun copy(other: Any): WidgetAnimationBinding
  }
}

public open external class WidgetAnimation(
  outer: UObject,
) : MovieSceneSequence {
  @JsName("OnAnimationStarted")
  public open var onAnimationStarted: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnAnimationFinished")
  public open var onAnimationFinished: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("MovieScene")
  public open var movieScene: MovieScene

  @JsName("AnimationBindings")
  public open var animationBindings: Array<WidgetAnimationBinding>

  @JsName("bLegacyFinishOnStop")
  public open var legacyFinishOnStop: Boolean

  @JsName("DisplayLabel")
  public open var displayLabel: String

  @JsName("UnbindAllFromAnimationStarted")
  public open fun unbindAllFromAnimationStarted(widget: UserWidget): Unit

  @JsName("UnbindAllFromAnimationFinished")
  public open fun unbindAllFromAnimationFinished(widget: UserWidget): Unit

  @JsName("GetStartTime")
  public open fun getStartTime(): Number

  @JsName("GetEndTime")
  public open fun getEndTime(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetAnimation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetAnimation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetAnimation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetAnimation

    @JsName("C")
    public fun copy(other: UObject): WidgetAnimation

    @JsName("C")
    public fun copy(other: Any): WidgetAnimation
  }
}

@JsName("UMGSequencePlayer")
public open external class UmgSequencePlayer(
  outer: UObject,
) : UObject {
  @JsName("Animation")
  public open var animation: WidgetAnimation

  @JsName("RootTemplateInstance")
  public open var rootTemplateInstance: MovieSceneRootEvaluationTemplateInstance

  @JsName("SetUserTag")
  public open fun setUserTag(inUserTag: String): Unit

  @JsName("GetUserTag")
  public open fun getUserTag(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UmgSequencePlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UmgSequencePlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UmgSequencePlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UmgSequencePlayer

    @JsName("C")
    public fun copy(other: UObject): UmgSequencePlayer

    @JsName("C")
    public fun copy(other: Any): UmgSequencePlayer
  }
}

@JsName("UMGSequenceTickManager")
public open external class UmgSequenceTickManager(
  outer: UObject,
) : UObject {
  @JsName("WeakUserWidgetData")
  public open var weakUserWidgetData: Any

  @JsName("Linker")
  public open var linker: MovieSceneEntitySystemLinker

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UmgSequenceTickManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UmgSequenceTickManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UmgSequenceTickManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UmgSequenceTickManager

    @JsName("C")
    public fun copy(other: UObject): UmgSequenceTickManager

    @JsName("C")
    public fun copy(other: Any): UmgSequenceTickManager
  }
}

public open external class NamedSlotBinding {
  @JsName("Name")
  public open var name: String

  @JsName("Content")
  public open var content: Widget

  public open fun clone(): NamedSlotBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NamedSlotBinding

    @JsName("C")
    public fun copy(other: Any): NamedSlotBinding
  }
}

public open external class WidgetTree(
  outer: UObject,
) : UObject {
  @JsName("RootWidget")
  public open var rootWidget: Widget

  @JsName("AllWidgets")
  public open var allWidgets: Array<Widget>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetTree

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetTree

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetTree

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetTree

    @JsName("C")
    public fun copy(other: UObject): WidgetTree

    @JsName("C")
    public fun copy(other: Any): WidgetTree
  }
}

@JsName("EDesignPreviewSizeMode")
public external object DesignPreviewSizeMode {
  public var FillScreen: String

  public var Custom: String

  public var CustomOnScreen: String

  public var Desired: String

  public var DesiredOnScreen: String

  @JsName("EDesignPreviewSizeMode_MAX")
  public var Max: String
}

@JsName("EWidgetTickFrequency")
public external object WidgetTickFrequency {
  public var Never: String

  public var Auto: String

  @JsName("EWidgetTickFrequency_MAX")
  public var Max: String
}

@JsName("EWidgetAnimationEvent")
public external object WidgetAnimationEvent {
  public var Started: String

  public var Finished: String

  @JsName("EWidgetAnimationEvent_MAX")
  public var Max: String
}

public open external class AnimationEventBinding {
  @JsName("Animation")
  public open var animation: WidgetAnimation

  public open var delegate: UnrealEngineDelegate<() -> Unit>

  @JsName("AnimationEvent")
  public open var animationEvent: String

  @JsName("UserTag")
  public open var userTag: String

  public open fun clone(): AnimationEventBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationEventBinding

    @JsName("C")
    public fun copy(other: Any): AnimationEventBinding
  }
}

public open external class Geometry {
  public open fun clone(): Geometry

  @JsName("CenterOf")
  public open fun centerOf(): Vector2d

  @JsName("FindClosestPointOnGeom")
  public open fun findClosestPointOnGeom(testPoint: Vector2d): Vector2d

  @JsName("AbsoluteToLocal")
  public open fun absoluteToLocal(absoluteCoordinate: Vector2d): Vector2d

  @JsName("GetAbsoluteSize")
  public open fun getAbsoluteSize(): Vector2d

  @JsName("GetLocalSize")
  public open fun getLocalSize(): Vector2d

  @JsName("GetLocalTopLeft")
  public open fun getLocalTopLeft(): Vector2d

  @JsName("IsUnderLocation")
  public open fun isUnderLocation(absoluteCoordinate: Vector2d): Boolean

  @JsName("LocalToAbsolute")
  public open fun localToAbsolute(localCoordinate: Vector2d): Vector2d

  @JsName("TransformScalarAbsoluteToLocal")
  public open fun transformScalarAbsoluteToLocal(absoluteScalar: Number): Number

  @JsName("TransformScalarLocalToAbsolute")
  public open fun transformScalarLocalToAbsolute(localScalar: Number): Number

  @JsName("TransformVectorAbsoluteToLocal")
  public open fun transformVectorAbsoluteToLocal(absoluteVector: Vector2d): Vector2d

  @JsName("TransformVectorLocalToAbsolute")
  public open fun transformVectorLocalToAbsolute(localVector: Vector2d): Vector2d

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Geometry

    @JsName("C")
    public fun copy(other: Any): Geometry

    @JsName("CenterOf")
    public fun centerOf(geom: Geometry): Vector2d

    @JsName("FindClosestPointOnGeom")
    public fun findClosestPointOnGeom(geom: Geometry, testPoint: Vector2d): Vector2d

    @JsName("AbsoluteToLocal")
    public fun absoluteToLocal(geometry: Geometry, absoluteCoordinate: Vector2d): Vector2d

    @JsName("GetAbsoluteSize")
    public fun getAbsoluteSize(geometry: Geometry): Vector2d

    @JsName("GetLocalSize")
    public fun getLocalSize(geometry: Geometry): Vector2d

    @JsName("GetLocalTopLeft")
    public fun getLocalTopLeft(geometry: Geometry): Vector2d

    @JsName("IsUnderLocation")
    public fun isUnderLocation(geometry: Geometry, absoluteCoordinate: Vector2d): Boolean

    @JsName("LocalToAbsolute")
    public fun localToAbsolute(geometry: Geometry, localCoordinate: Vector2d): Vector2d

    @JsName("TransformScalarAbsoluteToLocal")
    public fun transformScalarAbsoluteToLocal(geometry: Geometry, absoluteScalar: Number): Number

    @JsName("TransformScalarLocalToAbsolute")
    public fun transformScalarLocalToAbsolute(geometry: Geometry, localScalar: Number): Number

    @JsName("TransformVectorAbsoluteToLocal")
    public fun transformVectorAbsoluteToLocal(geometry: Geometry, absoluteVector: Vector2d):
        Vector2d

    @JsName("TransformVectorLocalToAbsolute")
    public fun transformVectorLocalToAbsolute(geometry: Geometry, localVector: Vector2d): Vector2d
  }
}

@JsName("EInputEvent")
public external object InputEventEnum {
  @JsName("IE_Pressed")
  public var Pressed: String

  @JsName("IE_Released")
  public var Released: String

  @JsName("IE_Repeat")
  public var Repeat: String

  @JsName("IE_DoubleClick")
  public var DoubleClick: String

  @JsName("IE_Axis")
  public var Axis: String

  @JsName("IE_MAX")
  public var Max: String
}

public open external class Anchors {
  @JsName("Minimum")
  public open var minimum: Vector2d

  @JsName("Maximum")
  public open var maximum: Vector2d

  public open fun clone(): Anchors

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Anchors

    @JsName("C")
    public fun copy(other: Any): Anchors
  }
}

public open external class SoundModulatorBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundModulatorBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundModulatorBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundModulatorBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundModulatorBase

    @JsName("C")
    public fun copy(other: UObject): SoundModulatorBase

    @JsName("C")
    public fun copy(other: Any): SoundModulatorBase
  }
}

public open external class SoundModulationDestinationSettings {
  @JsName("Value")
  public open var value: Number

  @JsName("bEnableModulation")
  public open var enableModulation: Boolean

  @JsName("Modulator")
  public open var modulator: SoundModulatorBase

  public open fun clone(): SoundModulationDestinationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundModulationDestinationSettings

    @JsName("C")
    public fun copy(other: Any): SoundModulationDestinationSettings
  }
}

public open external class SoundModulationDefaultSettings {
  @JsName("VolumeModulationDestination")
  public open var volumeModulationDestination: SoundModulationDestinationSettings

  @JsName("PitchModulationDestination")
  public open var pitchModulationDestination: SoundModulationDestinationSettings

  @JsName("HighpassModulationDestination")
  public open var highpassModulationDestination: SoundModulationDestinationSettings

  @JsName("LowpassModulationDestination")
  public open var lowpassModulationDestination: SoundModulationDestinationSettings

  public open fun clone(): SoundModulationDefaultSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundModulationDefaultSettings

    @JsName("C")
    public fun copy(other: Any): SoundModulationDefaultSettings
  }
}

@JsName("EAudioOutputTarget")
public external object AudioOutputTarget {
  public var Speaker: String

  public var Controller: String

  public var ControllerFallbackToSpeaker: String

  @JsName("EAudioOutputTarget_MAX")
  public var Max: String
}

@JsName("ESoundWaveLoadingBehavior")
public external object SoundWaveLoadingBehavior {
  public var Inherited: String

  public var RetainOnLoad: String

  public var PrimeOnLoad: String

  public var LoadOnDemand: String

  public var ForceInline: String

  public var Uninitialized: String

  @JsName("ESoundWaveLoadingBehavior_MAX")
  public var Max: String
}

public open external class SoundSubmixBase(
  outer: UObject,
) : UObject {
  @JsName("bAutoDisable")
  public open var autoDisable: Boolean

  @JsName("AutoDisableTime")
  public open var autoDisableTime: Number

  @JsName("ChildSubmixes")
  public open var childSubmixes: Array<SoundSubmixBase>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundSubmixBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundSubmixBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundSubmixBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundSubmixBase

    @JsName("C")
    public fun copy(other: UObject): SoundSubmixBase

    @JsName("C")
    public fun copy(other: Any): SoundSubmixBase
  }
}

public open external class SoundSubmixWithParentBase(
  outer: UObject,
) : SoundSubmixBase {
  @JsName("ParentSubmix")
  public open var parentSubmix: SoundSubmixBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundSubmixWithParentBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundSubmixWithParentBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundSubmixWithParentBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundSubmixWithParentBase

    @JsName("C")
    public fun copy(other: UObject): SoundSubmixWithParentBase

    @JsName("C")
    public fun copy(other: Any): SoundSubmixWithParentBase
  }
}

public open external class SoundEffectPreset(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundEffectPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundEffectPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundEffectPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundEffectPreset

    @JsName("C")
    public fun copy(other: UObject): SoundEffectPreset

    @JsName("C")
    public fun copy(other: Any): SoundEffectPreset
  }
}

public open external class SoundEffectSubmixPreset(
  outer: UObject,
) : SoundEffectPreset {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundEffectSubmixPreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundEffectSubmixPreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundEffectSubmixPreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundEffectSubmixPreset

    @JsName("C")
    public fun copy(other: UObject): SoundEffectSubmixPreset

    @JsName("C")
    public fun copy(other: Any): SoundEffectSubmixPreset
  }
}

public open external class SoundfieldEncodingSettingsBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundfieldEncodingSettingsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundfieldEncodingSettingsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundfieldEncodingSettingsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundfieldEncodingSettingsBase

    @JsName("C")
    public fun copy(other: UObject): SoundfieldEncodingSettingsBase

    @JsName("C")
    public fun copy(other: Any): SoundfieldEncodingSettingsBase
  }
}

public open external class AudioLinkSettingsAbstract(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioLinkSettingsAbstract

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioLinkSettingsAbstract

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioLinkSettingsAbstract

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioLinkSettingsAbstract

    @JsName("C")
    public fun copy(other: UObject): AudioLinkSettingsAbstract

    @JsName("C")
    public fun copy(other: Any): AudioLinkSettingsAbstract
  }
}

@JsName("ESoundwaveSampleRateSettings")
public external object SoundwaveSampleRateSettings {
  public var Max: String

  public var High: String

  public var Medium: String

  public var Low: String

  public var Min: String

  public var MatchDevice: String

  @JsName("ESoundwaveSampleRateSettings_MAX")
  public var _Max: String
}

@JsName("ESoundGroup")
public external object SoundGroupEnum {
  @JsName("SOUNDGROUP_Default")
  public var Default: String

  @JsName("SOUNDGROUP_Effects")
  public var Effects: String

  @JsName("SOUNDGROUP_UI")
  public var UI: String

  @JsName("SOUNDGROUP_Music")
  public var Music: String

  @JsName("SOUNDGROUP_Voice")
  public var Voice: String

  @JsName("SOUNDGROUP_GameSoundGroup1")
  public var GameSoundGroup1: String

  @JsName("SOUNDGROUP_GameSoundGroup2")
  public var GameSoundGroup2: String

  @JsName("SOUNDGROUP_GameSoundGroup3")
  public var GameSoundGroup3: String

  @JsName("SOUNDGROUP_GameSoundGroup4")
  public var GameSoundGroup4: String

  @JsName("SOUNDGROUP_GameSoundGroup5")
  public var GameSoundGroup5: String

  @JsName("SOUNDGROUP_GameSoundGroup6")
  public var GameSoundGroup6: String

  @JsName("SOUNDGROUP_GameSoundGroup7")
  public var GameSoundGroup7: String

  @JsName("SOUNDGROUP_GameSoundGroup8")
  public var GameSoundGroup8: String

  @JsName("SOUNDGROUP_GameSoundGroup9")
  public var GameSoundGroup9: String

  @JsName("SOUNDGROUP_GameSoundGroup10")
  public var GameSoundGroup10: String

  @JsName("SOUNDGROUP_GameSoundGroup11")
  public var GameSoundGroup11: String

  @JsName("SOUNDGROUP_GameSoundGroup12")
  public var GameSoundGroup12: String

  @JsName("SOUNDGROUP_GameSoundGroup13")
  public var GameSoundGroup13: String

  @JsName("SOUNDGROUP_GameSoundGroup14")
  public var GameSoundGroup14: String

  @JsName("SOUNDGROUP_GameSoundGroup15")
  public var GameSoundGroup15: String

  @JsName("SOUNDGROUP_GameSoundGroup16")
  public var GameSoundGroup16: String

  @JsName("SOUNDGROUP_GameSoundGroup17")
  public var GameSoundGroup17: String

  @JsName("SOUNDGROUP_GameSoundGroup18")
  public var GameSoundGroup18: String

  @JsName("SOUNDGROUP_GameSoundGroup19")
  public var GameSoundGroup19: String

  @JsName("SOUNDGROUP_GameSoundGroup20")
  public var GameSoundGroup20: String

  @JsName("SOUNDGROUP_MAX")
  public var Max: String
}

@JsName("ESoundAssetCompressionType")
public external object SoundAssetCompressionType {
  public var BinkAudio: String

  public var ADPCM: String

  public var PCM: String

  public var PlatformSpecific: String

  @JsName("ESoundAssetCompressionType_MAX")
  public var Max: String
}

@JsName("ESoundWaveFFTSize")
public external object SoundWaveFFTSize {
  @JsName("VerySmall_64")
  public var VerySmall64: String

  @JsName("Small_256")
  public var Small256: String

  @JsName("Medium_512")
  public var Medium512: String

  @JsName("Large_1024")
  public var Large1024: String

  @JsName("VeryLarge_2048")
  public var VeryLarge2048: String

  @JsName("ESoundWaveFFTSize_MAX")
  public var Max: String
}

@JsName("EModulationRouting")
public external object ModulationRouting {
  public var Disable: String

  public var Inherit: String

  public var Override: String

  @JsName("EModulationRouting_MAX")
  public var Max: String
}

public open external class SoundModulationDefaultRoutingSettings : SoundModulationDefaultSettings {
  @JsName("VolumeRouting")
  public open var volumeRouting: String

  @JsName("PitchRouting")
  public open var pitchRouting: String

  @JsName("HighpassRouting")
  public open var highpassRouting: String

  @JsName("LowpassRouting")
  public open var lowpassRouting: String

  public override fun clone(): SoundModulationDefaultRoutingSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundModulationDefaultRoutingSettings

    @JsName("C")
    public fun copy(other: Any): SoundModulationDefaultRoutingSettings
  }
}

public open external class SoundWaveSpectralDataEntry {
  @JsName("Magnitude")
  public open var magnitude: Number

  @JsName("NormalizedMagnitude")
  public open var normalizedMagnitude: Number

  public open fun clone(): SoundWaveSpectralDataEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundWaveSpectralDataEntry

    @JsName("C")
    public fun copy(other: Any): SoundWaveSpectralDataEntry
  }
}

public open external class SoundWaveSpectralTimeData {
  @JsName("Data")
  public open var data: Array<SoundWaveSpectralDataEntry>

  @JsName("TimeSec")
  public open var timeSec: Number

  public open fun clone(): SoundWaveSpectralTimeData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundWaveSpectralTimeData

    @JsName("C")
    public fun copy(other: Any): SoundWaveSpectralTimeData
  }
}

public open external class SoundWaveEnvelopeTimeData {
  @JsName("Amplitude")
  public open var amplitude: Number

  @JsName("TimeSec")
  public open var timeSec: Number

  public open fun clone(): SoundWaveEnvelopeTimeData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundWaveEnvelopeTimeData

    @JsName("C")
    public fun copy(other: Any): SoundWaveEnvelopeTimeData
  }
}

public open external class SoundWaveCuePoint {
  @JsName("CuePointID")
  public open var cuePointId: Number

  @JsName("Label")
  public open var label: String

  @JsName("FramePosition")
  public open var framePosition: Number

  @JsName("FrameLength")
  public open var frameLength: Number

  public open fun clone(): SoundWaveCuePoint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundWaveCuePoint

    @JsName("C")
    public fun copy(other: Any): SoundWaveCuePoint
  }
}

public open external class SubtitleCue {
  public open var text: String

  @JsName("Time")
  public open var time: Number

  public open fun clone(): SubtitleCue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubtitleCue

    @JsName("C")
    public fun copy(other: Any): SubtitleCue
  }
}

@JsName("EEvaluateCurveTableResult")
public external object EvaluateCurveTableResult {
  @JsName("RowFound")
  public var Found: String

  @JsName("RowNotFound")
  public var NotFound: String

  @JsName("EEvaluateCurveTableResult_MAX")
  public var Max: String
}

@JsName("T$262")
public external interface Object262 {
  @JsName("OutResult")
  public var outResult: String

  @JsName("OutXY")
  public var outXy: Number
}

public open external class CurveTable(
  outer: UObject,
) : UObject {
  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("ImportPath")
  public open var importPath: String

  @JsName("AddRichCurve")
  public open fun addRichCurve(key: String, inCurve: RichCurve): Unit

  @JsName("NotifyUpdateCurveTable")
  public open fun notifyUpdateCurveTable(): Unit

  @JsName("EvaluateCurveTableRow")
  public open fun evaluateCurveTableRow(
    rowName: String,
    inXy: Number,
    outResult: String,
    outXy: Number,
    contextString: String,
  ): Object262

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveTable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveTable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveTable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveTable

    @JsName("C")
    public fun copy(other: UObject): CurveTable

    @JsName("C")
    public fun copy(other: Any): CurveTable

    @JsName("AddRichCurve")
    public fun addRichCurve(
      inCurveTable: CurveTable,
      key: String,
      inCurve: RichCurve,
    ): Unit

    @JsName("NotifyUpdateCurveTable")
    public fun notifyUpdateCurveTable(inCurveTable: CurveTable): Unit

    @JsName("EvaluateCurveTableRow")
    public fun evaluateCurveTableRow(
      curveTable: CurveTable,
      rowName: String,
      inXy: Number,
      outResult: String,
      outXy: Number,
      contextString: String,
    ): Object262
  }
}

public open external class SoundWave(
  outer: UObject,
) : SoundBase {
  @JsName("CompressionQuality")
  public open var compressionQuality: Number

  @JsName("StreamingPriority")
  public open var streamingPriority: Number

  @JsName("SampleRateQuality")
  public open var sampleRateQuality: String

  @JsName("SoundGroup")
  public open var soundGroup: String

  @JsName("bLooping")
  public open var looping: Boolean

  @JsName("bStreaming")
  public open var streaming: Boolean

  @JsName("SoundAssetCompressionType")
  public open var soundAssetCompressionType: String

  @JsName("bSeekableStreaming")
  public open var seekableStreaming: Boolean

  @JsName("bUseBinkAudio")
  public open var useBinkAudio: Boolean

  @JsName("OverrideSoundToUseForAnalysis")
  public open var overrideSoundToUseForAnalysis: SoundWave

  @JsName("TreatFileAsLoopingForAnalysis")
  public open var treatFileAsLoopingForAnalysis: Boolean

  @JsName("bEnableBakedFFTAnalysis")
  public open var enableBakedFftAnalysis: Boolean

  @JsName("bEnableAmplitudeEnvelopeAnalysis")
  public open var enableAmplitudeEnvelopeAnalysis: Boolean

  @JsName("FFTSize")
  public open var fftSize: String

  @JsName("FFTAnalysisFrameSize")
  public open var fftAnalysisFrameSize: Number

  @JsName("FFTAnalysisAttackTime")
  public open var fftAnalysisAttackTime: Number

  @JsName("FFTAnalysisReleaseTime")
  public open var fftAnalysisReleaseTime: Number

  @JsName("EnvelopeFollowerFrameSize")
  public open var envelopeFollowerFrameSize: Number

  @JsName("EnvelopeFollowerAttackTime")
  public open var envelopeFollowerAttackTime: Number

  @JsName("EnvelopeFollowerReleaseTime")
  public open var envelopeFollowerReleaseTime: Number

  @JsName("ModulationSettings")
  public open var modulationSettings: SoundModulationDefaultRoutingSettings

  @JsName("FrequenciesToAnalyze")
  public open var frequenciesToAnalyze: Array<Number>

  @JsName("CookedSpectralTimeData")
  public open var cookedSpectralTimeData: Array<SoundWaveSpectralTimeData>

  @JsName("CookedEnvelopeTimeData")
  public open var cookedEnvelopeTimeData: Array<SoundWaveEnvelopeTimeData>

  @JsName("InitialChunkSize")
  public open var initialChunkSize: Number

  @JsName("bMature")
  public open var mature: Boolean

  @JsName("bManualWordWrap")
  public open var manualWordWrap: Boolean

  @JsName("bSingleLine")
  public open var singleLine: Boolean

  @JsName("bVirtualizeWhenSilent")
  public open var virtualizeWhenSilent: Boolean

  @JsName("bIsAmbisonics")
  public open var isAmbisonics: Boolean

  @JsName("LoadingBehavior")
  public open var loadingBehavior: String

  @JsName("SpokenText")
  public open var spokenText: String

  @JsName("SubtitlePriority")
  public open var subtitlePriority: Number

  @JsName("Volume")
  public open var volume: Number

  @JsName("Pitch")
  public open var pitch: Number

  @JsName("NumChannels")
  public open var numChannels: Number

  @JsName("CuePoints")
  public open var cuePoints: Array<SoundWaveCuePoint>

  @JsName("ChannelOffsets")
  public open var channelOffsets: Array<Number>

  @JsName("ChannelSizes")
  public open var channelSizes: Array<Number>

  @JsName("SampleRate")
  public open var sampleRate: Number

  @JsName("ImportedSampleRate")
  public open var importedSampleRate: Number

  @JsName("Subtitles")
  public open var subtitles: Array<SubtitleCue>

  @JsName("Comment")
  public open var comment: String

  @JsName("SourceFilePath")
  public open var sourceFilePath: String

  @JsName("SourceFileTimestamp")
  public open var sourceFileTimestamp: String

  @JsName("AssetImportData")
  public open var assetImportData: AssetImportData

  @JsName("Curves")
  public open var curves: CurveTable

  @JsName("InternalCurves")
  public open var internalCurves: CurveTable

  @JsName("SetSoundAssetCompressionType")
  public open fun setSoundAssetCompressionType(inSoundAssetCompressionType: String): Unit

  @JsName("GetSoundAssetCompressionType")
  public open fun getSoundAssetCompressionType(): String

  @JsName("PrimeSoundForPlayback")
  public open
      fun primeSoundForPlayback(onLoadCompletion: UnrealEngineDelegate<(LoadedSoundWave: SoundWave,
      WasCancelled: Boolean) -> Unit>): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundWave

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundWave

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundWave

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundWave

    @JsName("C")
    public fun copy(other: UObject): SoundWave

    @JsName("C")
    public fun copy(other: Any): SoundWave

    @JsName("PrimeSoundForPlayback")
    public fun primeSoundForPlayback(soundWave: SoundWave,
        onLoadCompletion: UnrealEngineDelegate<(LoadedSoundWave: SoundWave,
        WasCancelled: Boolean) -> Unit>): Unit
  }
}

@JsName("EAudioRecordingExportType")
public external object AudioRecordingExportType {
  public var SoundWave: String

  public var WavFile: String

  @JsName("EAudioRecordingExportType_MAX")
  public var Max: String
}

@JsName("EFFTSize")
public external object FFTSize {
  public var DefaultSize: String

  public var Min: String

  public var Small: String

  public var Medium: String

  public var Large: String

  public var VeryLarge: String

  public var Max: String

  @JsName("EFFTSize_MAX")
  public var _Max: String
}

@JsName("EFFTPeakInterpolationMethod")
public external object FFTPeakInterpolationMethod {
  public var NearestNeighbor: String

  public var Linear: String

  public var Quadratic: String

  public var ConstantQ: String

  @JsName("EFFTPeakInterpolationMethod_MAX")
  public var Max: String
}

@JsName("EFFTWindowType")
public external object FFTWindowType {
  public var None: String

  public var Hamming: String

  public var Hann: String

  public var Blackman: String

  @JsName("EFFTWindowType_MAX")
  public var Max: String
}

@JsName("EAudioSpectrumType")
public external object AudioSpectrumType {
  public var MagnitudeSpectrum: String

  public var PowerSpectrum: String

  public var Decibel: String

  @JsName("EAudioSpectrumType_MAX")
  public var Max: String
}

public open external class SoundSubmix(
  outer: UObject,
) : SoundSubmixWithParentBase {
  @JsName("bMuteWhenBackgrounded")
  public open var muteWhenBackgrounded: Boolean

  @JsName("SubmixEffectChain")
  public open var submixEffectChain: Array<SoundEffectSubmixPreset>

  @JsName("AmbisonicsPluginSettings")
  public open var ambisonicsPluginSettings: SoundfieldEncodingSettingsBase

  @JsName("EnvelopeFollowerAttackTime")
  public open var envelopeFollowerAttackTime: Number

  @JsName("EnvelopeFollowerReleaseTime")
  public open var envelopeFollowerReleaseTime: Number

  @JsName("OutputVolume")
  public open var outputVolume: Number

  @JsName("WetLevel")
  public open var wetLevel: Number

  @JsName("DryLevel")
  public open var dryLevel: Number

  @JsName("OutputVolumeModulation")
  public open var outputVolumeModulation: SoundModulationDestinationSettings

  @JsName("WetLevelModulation")
  public open var wetLevelModulation: SoundModulationDestinationSettings

  @JsName("DryLevelModulation")
  public open var dryLevelModulation: SoundModulationDestinationSettings

  @JsName("AudioLinkSettings")
  public open var audioLinkSettings: AudioLinkSettingsAbstract

  @JsName("OnSubmixRecordedFileDone")
  public open var onSubmixRecordedFileDone:
      UnrealEngineMulticastDelegate<(ResultingSoundWave: SoundWave) -> Unit>

  @JsName("StopSpectralAnalysis")
  public open fun stopSpectralAnalysis(worldContextObject: UObject): Unit

  @JsName("StopRecordingOutput")
  public open fun stopRecordingOutput(
    worldContextObject: UObject,
    exportType: String,
    name: String,
    path: String,
    existingSoundWaveToOverwrite: SoundWave,
  ): Unit

  @JsName("StopEnvelopeFollowing")
  public open fun stopEnvelopeFollowing(worldContextObject: UObject): Unit

  @JsName("StartSpectralAnalysis")
  public open fun startSpectralAnalysis(
    worldContextObject: UObject,
    fftSize: String,
    interpolationMethod: String,
    windowType: String,
    hopSize: Number,
    spectrumType: String,
  ): Unit

  @JsName("StartRecordingOutput")
  public open fun startRecordingOutput(worldContextObject: UObject, expectedDuration: Number): Unit

  @JsName("StartEnvelopeFollowing")
  public open fun startEnvelopeFollowing(worldContextObject: UObject): Unit

  @JsName("SetSubmixWetLevel")
  public open fun setSubmixWetLevel(worldContextObject: UObject, inWetLevel: Number): Unit

  @JsName("SetSubmixOutputVolume")
  public open fun setSubmixOutputVolume(worldContextObject: UObject, inOutputVolume: Number): Unit

  @JsName("SetSubmixDryLevel")
  public open fun setSubmixDryLevel(worldContextObject: UObject, inDryLevel: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundSubmix

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundSubmix

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundSubmix

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundSubmix

    @JsName("C")
    public fun copy(other: UObject): SoundSubmix

    @JsName("C")
    public fun copy(other: Any): SoundSubmix
  }
}

public open external class SoundClassProperties {
  @JsName("Volume")
  public open var volume: Number

  @JsName("Pitch")
  public open var pitch: Number

  @JsName("LowPassFilterFrequency")
  public open var lowPassFilterFrequency: Number

  @JsName("AttenuationDistanceScale")
  public open var attenuationDistanceScale: Number

  @JsName("LFEBleed")
  public open var lfeBleed: Number

  @JsName("VoiceCenterChannelVolume")
  public open var voiceCenterChannelVolume: Number

  @JsName("RadioFilterVolume")
  public open var radioFilterVolume: Number

  @JsName("RadioFilterVolumeThreshold")
  public open var radioFilterVolumeThreshold: Number

  @JsName("bApplyEffects")
  public open var applyEffects: Boolean

  @JsName("bAlwaysPlay")
  public open var alwaysPlay: Boolean

  @JsName("bIsUISound")
  public open var isUiSound: Boolean

  @JsName("bIsMusic")
  public open var isMusic: Boolean

  @JsName("bCenterChannelOnly")
  public open var centerChannelOnly: Boolean

  @JsName("bApplyAmbientVolumes")
  public open var applyAmbientVolumes: Boolean

  @JsName("bReverb")
  public open var reverb: Boolean

  @JsName("Default2DReverbSendAmount")
  public open var default2dReverbSendAmount: Number

  @JsName("ModulationSettings")
  public open var modulationSettings: SoundModulationDefaultSettings

  @JsName("OutputTarget")
  public open var outputTarget: String

  @JsName("LoadingBehavior")
  public open var loadingBehavior: String

  @JsName("DefaultSubmix")
  public open var defaultSubmix: SoundSubmix

  public open fun clone(): SoundClassProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundClassProperties

    @JsName("C")
    public fun copy(other: Any): SoundClassProperties
  }
}

public open external class AudioEffectParameters {
  public open fun clone(): AudioEffectParameters

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioEffectParameters

    @JsName("C")
    public fun copy(other: Any): AudioEffectParameters
  }
}

@JsName("AudioEQEffect")
public open external class AudioEqEffect : AudioEffectParameters {
  @JsName("FrequencyCenter0")
  public open var frequencyCenter0: Number

  @JsName("Gain0")
  public open var gain0: Number

  @JsName("Bandwidth0")
  public open var bandwidth0: Number

  @JsName("FrequencyCenter1")
  public open var frequencyCenter1: Number

  @JsName("Gain1")
  public open var gain1: Number

  @JsName("Bandwidth1")
  public open var bandwidth1: Number

  @JsName("FrequencyCenter2")
  public open var frequencyCenter2: Number

  @JsName("Gain2")
  public open var gain2: Number

  @JsName("Bandwidth2")
  public open var bandwidth2: Number

  @JsName("FrequencyCenter3")
  public open var frequencyCenter3: Number

  @JsName("Gain3")
  public open var gain3: Number

  @JsName("Bandwidth3")
  public open var bandwidth3: Number

  public override fun clone(): AudioEqEffect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioEqEffect

    @JsName("C")
    public fun copy(other: Any): AudioEqEffect
  }
}

public open external class SoundClassAdjuster {
  @JsName("SoundClassObject")
  public open var soundClassObject: SoundClass

  @JsName("VolumeAdjuster")
  public open var volumeAdjuster: Number

  @JsName("PitchAdjuster")
  public open var pitchAdjuster: Number

  @JsName("LowPassFilterFrequency")
  public open var lowPassFilterFrequency: Number

  @JsName("bApplyToChildren")
  public open var applyToChildren: Boolean

  @JsName("VoiceCenterChannelVolumeAdjuster")
  public open var voiceCenterChannelVolumeAdjuster: Number

  public open fun clone(): SoundClassAdjuster

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundClassAdjuster

    @JsName("C")
    public fun copy(other: Any): SoundClassAdjuster
  }
}

public open external class SoundMix(
  outer: UObject,
) : UObject {
  @JsName("bApplyEQ")
  public open var applyEq: Boolean

  @JsName("EQPriority")
  public open var eqPriority: Number

  @JsName("EQSettings")
  public open var eqSettings: AudioEqEffect

  @JsName("SoundClassEffects")
  public open var soundClassEffects: Array<SoundClassAdjuster>

  @JsName("InitialDelay")
  public open var initialDelay: Number

  @JsName("FadeInTime")
  public open var fadeInTime: Number

  @JsName("Duration")
  public open var duration: Number

  @JsName("FadeOutTime")
  public open var fadeOutTime: Number

  @JsName("bChanged")
  public open var changed: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundMix

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundMix

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundMix

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundMix

    @JsName("C")
    public fun copy(other: UObject): SoundMix

    @JsName("C")
    public fun copy(other: Any): SoundMix
  }
}

public open external class PassiveSoundMixModifier {
  @JsName("SoundMix")
  public open var soundMix: SoundMix

  @JsName("MinVolumeThreshold")
  public open var minVolumeThreshold: Number

  @JsName("MaxVolumeThreshold")
  public open var maxVolumeThreshold: Number

  public open fun clone(): PassiveSoundMixModifier

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PassiveSoundMixModifier

    @JsName("C")
    public fun copy(other: Any): PassiveSoundMixModifier
  }
}

public open external class SoundClass(
  outer: UObject,
) : UObject {
  @JsName("Properties")
  public open var properties: SoundClassProperties

  @JsName("ChildClasses")
  public open var childClasses: Array<SoundClass>

  @JsName("PassiveSoundMixModifiers")
  public open var passiveSoundMixModifiers: Array<PassiveSoundMixModifier>

  @JsName("ParentClass")
  public open var parentClass: SoundClass

  @JsName("PrimeAllSoundsInSoundClass")
  public open fun primeAllSoundsInSoundClass(): Unit

  @JsName("UnRetainAllSoundsInSoundClass")
  public open fun unRetainAllSoundsInSoundClass(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundClass

    @JsName("C")
    public fun copy(other: UObject): SoundClass

    @JsName("C")
    public fun copy(other: Any): SoundClass

    @JsName("PrimeAllSoundsInSoundClass")
    public fun primeAllSoundsInSoundClass(inSoundClass: SoundClass): Unit

    @JsName("UnRetainAllSoundsInSoundClass")
    public fun unRetainAllSoundsInSoundClass(inSoundClass: SoundClass): Unit
  }
}

@JsName("EVirtualizationMode")
public external object VirtualizationMode {
  public var Disabled: String

  public var PlayWhenSilent: String

  public var Restart: String

  @JsName("EVirtualizationMode_MAX")
  public var Max: String
}

@JsName("EMaxConcurrentResolutionRule")
public external object MaxConcurrentResolutionRule {
  public var PreventNew: String

  public var StopOldest: String

  public var StopFarthestThenPreventNew: String

  public var StopFarthestThenOldest: String

  public var StopLowestPriority: String

  public var StopQuietest: String

  public var StopLowestPriorityThenPreventNew: String

  public var Count: String

  @JsName("EMaxConcurrentResolutionRule_MAX")
  public var Max: String
}

@JsName("EConcurrencyVolumeScaleMode")
public external object ConcurrencyVolumeScaleMode {
  public var Default: String

  public var Distance: String

  public var Priority: String

  @JsName("EConcurrencyVolumeScaleMode_MAX")
  public var Max: String
}

public open external class SoundConcurrencySettings {
  @JsName("MaxCount")
  public open var maxCount: Number

  @JsName("bLimitToOwner")
  public open var limitToOwner: Boolean

  @JsName("ResolutionRule")
  public open var resolutionRule: String

  @JsName("RetriggerTime")
  public open var retriggerTime: Number

  @JsName("VolumeScale")
  public open var volumeScale: Number

  @JsName("VolumeScaleMode")
  public open var volumeScaleMode: String

  @JsName("VolumeScaleAttackTime")
  public open var volumeScaleAttackTime: Number

  @JsName("bVolumeScaleCanRelease")
  public open var volumeScaleCanRelease: Boolean

  @JsName("VolumeScaleReleaseTime")
  public open var volumeScaleReleaseTime: Number

  @JsName("VoiceStealReleaseTime")
  public open var voiceStealReleaseTime: Number

  public open fun clone(): SoundConcurrencySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundConcurrencySettings

    @JsName("C")
    public fun copy(other: Any): SoundConcurrencySettings
  }
}

public open external class SoundConcurrency(
  outer: UObject,
) : UObject {
  @JsName("Concurrency")
  public open var concurrency: SoundConcurrencySettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundConcurrency

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundConcurrency

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundConcurrency

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundConcurrency

    @JsName("C")
    public fun copy(other: UObject): SoundConcurrency

    @JsName("C")
    public fun copy(other: Any): SoundConcurrency
  }
}

@JsName("ESoundSpatializationAlgorithm")
public external object SoundSpatializationAlgorithm {
  @JsName("SPATIALIZATION_Default")
  public var Default: String

  @JsName("SPATIALIZATION_HRTF")
  public var HRTF: String

  @JsName("SPATIALIZATION_MAX")
  public var Max: String
}

@JsName("EAirAbsorptionMethod")
public external object AirAbsorptionMethod {
  public var Linear: String

  public var CustomCurve: String

  @JsName("EAirAbsorptionMethod_MAX")
  public var Max: String
}

@JsName("EReverbSendMethod")
public external object ReverbSendMethod {
  public var Linear: String

  public var CustomCurve: String

  public var Manual: String

  @JsName("EReverbSendMethod_MAX")
  public var Max: String
}

@JsName("EPriorityAttenuationMethod")
public external object PriorityAttenuationMethod {
  public var Linear: String

  public var CustomCurve: String

  public var Manual: String

  @JsName("EPriorityAttenuationMethod_MAX")
  public var Max: String
}

@JsName("ESoundDistanceCalc")
public external object SoundDistanceCalc {
  @JsName("SOUNDDISTANCE_Normal")
  public var Normal: String

  @JsName("SOUNDDISTANCE_InfiniteXYPlane")
  public var InfiniteXyPlane: String

  @JsName("SOUNDDISTANCE_InfiniteXZPlane")
  public var InfiniteXzPlane: String

  @JsName("SOUNDDISTANCE_InfiniteYZPlane")
  public var InfiniteYzPlane: String

  @JsName("SOUNDDISTANCE_MAX")
  public var Max: String
}

public open external class SpatializationPluginSourceSettingsBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpatializationPluginSourceSettingsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpatializationPluginSourceSettingsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpatializationPluginSourceSettingsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpatializationPluginSourceSettingsBase

    @JsName("C")
    public fun copy(other: UObject): SpatializationPluginSourceSettingsBase

    @JsName("C")
    public fun copy(other: Any): SpatializationPluginSourceSettingsBase
  }
}

public open external class OcclusionPluginSourceSettingsBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OcclusionPluginSourceSettingsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OcclusionPluginSourceSettingsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OcclusionPluginSourceSettingsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OcclusionPluginSourceSettingsBase

    @JsName("C")
    public fun copy(other: UObject): OcclusionPluginSourceSettingsBase

    @JsName("C")
    public fun copy(other: Any): OcclusionPluginSourceSettingsBase
  }
}

public open external class ReverbPluginSourceSettingsBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReverbPluginSourceSettingsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReverbPluginSourceSettingsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReverbPluginSourceSettingsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReverbPluginSourceSettingsBase

    @JsName("C")
    public fun copy(other: UObject): ReverbPluginSourceSettingsBase

    @JsName("C")
    public fun copy(other: Any): ReverbPluginSourceSettingsBase
  }
}

@JsName("ESubmixSendMethod")
public external object SubmixSendMethod {
  public var Linear: String

  public var CustomCurve: String

  public var Manual: String

  @JsName("ESubmixSendMethod_MAX")
  public var Max: String
}

public open external class AttenuationSubmixSendSettings {
  @JsName("Submix")
  public open var submix: SoundSubmixBase

  @JsName("SubmixSendMethod")
  public open var submixSendMethod: String

  @JsName("SubmixSendLevelMin")
  public open var submixSendLevelMin: Number

  @JsName("SubmixSendLevelMax")
  public open var submixSendLevelMax: Number

  @JsName("SubmixSendDistanceMin")
  public open var submixSendDistanceMin: Number

  @JsName("SubmixSendDistanceMax")
  public open var submixSendDistanceMax: Number

  @JsName("ManualSubmixSendLevel")
  public open var manualSubmixSendLevel: Number

  @JsName("CustomSubmixSendCurve")
  public open var customSubmixSendCurve: RuntimeFloatCurve

  public open fun clone(): AttenuationSubmixSendSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AttenuationSubmixSendSettings

    @JsName("C")
    public fun copy(other: Any): AttenuationSubmixSendSettings
  }
}

public open external class SourceDataOverridePluginSourceSettingsBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceDataOverridePluginSourceSettingsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        SourceDataOverridePluginSourceSettingsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceDataOverridePluginSourceSettingsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceDataOverridePluginSourceSettingsBase

    @JsName("C")
    public fun copy(other: UObject): SourceDataOverridePluginSourceSettingsBase

    @JsName("C")
    public fun copy(other: Any): SourceDataOverridePluginSourceSettingsBase
  }
}

public open external class SoundAttenuationPluginSettings {
  @JsName("SpatializationPluginSettingsArray")
  public open var spatializationPluginSettingsArray: Array<SpatializationPluginSourceSettingsBase>

  @JsName("OcclusionPluginSettingsArray")
  public open var occlusionPluginSettingsArray: Array<OcclusionPluginSourceSettingsBase>

  @JsName("ReverbPluginSettingsArray")
  public open var reverbPluginSettingsArray: Array<ReverbPluginSourceSettingsBase>

  @JsName("SourceDataOverridePluginSettingsArray")
  public open var sourceDataOverridePluginSettingsArray:
      Array<SourceDataOverridePluginSourceSettingsBase>

  public open fun clone(): SoundAttenuationPluginSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundAttenuationPluginSettings

    @JsName("C")
    public fun copy(other: Any): SoundAttenuationPluginSettings
  }
}

public open external class SoundAttenuationSettings : BaseAttenuationSettings {
  @JsName("bAttenuate")
  public open var attenuate: Boolean

  @JsName("bSpatialize")
  public open var spatialize: Boolean

  @JsName("bAttenuateWithLPF")
  public open var attenuateWithLpf: Boolean

  @JsName("bEnableListenerFocus")
  public open var enableListenerFocus: Boolean

  @JsName("bEnableFocusInterpolation")
  public open var enableFocusInterpolation: Boolean

  @JsName("bEnableOcclusion")
  public open var enableOcclusion: Boolean

  @JsName("bUseComplexCollisionForOcclusion")
  public open var useComplexCollisionForOcclusion: Boolean

  @JsName("bEnableReverbSend")
  public open var enableReverbSend: Boolean

  @JsName("bEnablePriorityAttenuation")
  public open var enablePriorityAttenuation: Boolean

  @JsName("bApplyNormalizationToStereoSounds")
  public open var applyNormalizationToStereoSounds: Boolean

  @JsName("bEnableLogFrequencyScaling")
  public open var enableLogFrequencyScaling: Boolean

  @JsName("bEnableSubmixSends")
  public open var enableSubmixSends: Boolean

  @JsName("bEnableSourceDataOverride")
  public open var enableSourceDataOverride: Boolean

  @JsName("SpatializationAlgorithm")
  public open var spatializationAlgorithm: String

  @JsName("BinauralRadius")
  public open var binauralRadius: Number

  @JsName("AbsorptionMethod")
  public open var absorptionMethod: String

  @JsName("OcclusionTraceChannel")
  public open var occlusionTraceChannel: String

  @JsName("ReverbSendMethod")
  public open var reverbSendMethod: String

  @JsName("PriorityAttenuationMethod")
  public open var priorityAttenuationMethod: String

  @JsName("DistanceType")
  public open var distanceType: String

  @JsName("OmniRadius")
  public open var omniRadius: Number

  @JsName("StereoSpread")
  public open var stereoSpread: Number

  @JsName("SpatializationPluginSettings")
  public open var spatializationPluginSettings: SpatializationPluginSourceSettingsBase

  @JsName("RadiusMin")
  public open var radiusMin: Number

  @JsName("RadiusMax")
  public open var radiusMax: Number

  @JsName("LPFRadiusMin")
  public open var lpfRadiusMin: Number

  @JsName("LPFRadiusMax")
  public open var lpfRadiusMax: Number

  @JsName("CustomLowpassAirAbsorptionCurve")
  public open var customLowpassAirAbsorptionCurve: RuntimeFloatCurve

  @JsName("CustomHighpassAirAbsorptionCurve")
  public open var customHighpassAirAbsorptionCurve: RuntimeFloatCurve

  @JsName("LPFFrequencyAtMin")
  public open var lpfFrequencyAtMin: Number

  @JsName("LPFFrequencyAtMax")
  public open var lpfFrequencyAtMax: Number

  @JsName("HPFFrequencyAtMin")
  public open var hpfFrequencyAtMin: Number

  @JsName("HPFFrequencyAtMax")
  public open var hpfFrequencyAtMax: Number

  @JsName("FocusAzimuth")
  public open var focusAzimuth: Number

  @JsName("NonFocusAzimuth")
  public open var nonFocusAzimuth: Number

  @JsName("FocusDistanceScale")
  public open var focusDistanceScale: Number

  @JsName("NonFocusDistanceScale")
  public open var nonFocusDistanceScale: Number

  @JsName("FocusPriorityScale")
  public open var focusPriorityScale: Number

  @JsName("NonFocusPriorityScale")
  public open var nonFocusPriorityScale: Number

  @JsName("FocusVolumeAttenuation")
  public open var focusVolumeAttenuation: Number

  @JsName("NonFocusVolumeAttenuation")
  public open var nonFocusVolumeAttenuation: Number

  @JsName("FocusAttackInterpSpeed")
  public open var focusAttackInterpSpeed: Number

  @JsName("FocusReleaseInterpSpeed")
  public open var focusReleaseInterpSpeed: Number

  @JsName("OcclusionLowPassFilterFrequency")
  public open var occlusionLowPassFilterFrequency: Number

  @JsName("OcclusionVolumeAttenuation")
  public open var occlusionVolumeAttenuation: Number

  @JsName("OcclusionInterpolationTime")
  public open var occlusionInterpolationTime: Number

  @JsName("OcclusionPluginSettings")
  public open var occlusionPluginSettings: OcclusionPluginSourceSettingsBase

  @JsName("ReverbPluginSettings")
  public open var reverbPluginSettings: ReverbPluginSourceSettingsBase

  @JsName("ReverbWetLevelMin")
  public open var reverbWetLevelMin: Number

  @JsName("ReverbWetLevelMax")
  public open var reverbWetLevelMax: Number

  @JsName("ReverbDistanceMin")
  public open var reverbDistanceMin: Number

  @JsName("ReverbDistanceMax")
  public open var reverbDistanceMax: Number

  @JsName("ManualReverbSendLevel")
  public open var manualReverbSendLevel: Number

  @JsName("CustomReverbSendCurve")
  public open var customReverbSendCurve: RuntimeFloatCurve

  @JsName("SubmixSendSettings")
  public open var submixSendSettings: Array<AttenuationSubmixSendSettings>

  @JsName("PriorityAttenuationMin")
  public open var priorityAttenuationMin: Number

  @JsName("PriorityAttenuationMax")
  public open var priorityAttenuationMax: Number

  @JsName("PriorityAttenuationDistanceMin")
  public open var priorityAttenuationDistanceMin: Number

  @JsName("PriorityAttenuationDistanceMax")
  public open var priorityAttenuationDistanceMax: Number

  @JsName("ManualPriorityAttenuation")
  public open var manualPriorityAttenuation: Number

  @JsName("CustomPriorityAttenuationCurve")
  public open var customPriorityAttenuationCurve: RuntimeFloatCurve

  @JsName("PluginSettings")
  public open var pluginSettings: SoundAttenuationPluginSettings

  public override fun clone(): SoundAttenuationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundAttenuationSettings

    @JsName("C")
    public fun copy(other: Any): SoundAttenuationSettings
  }
}

public open external class SoundAttenuation(
  outer: UObject,
) : UObject {
  @JsName("Attenuation")
  public open var attenuation: SoundAttenuationSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundAttenuation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundAttenuation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundAttenuation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundAttenuation

    @JsName("C")
    public fun copy(other: UObject): SoundAttenuation

    @JsName("C")
    public fun copy(other: Any): SoundAttenuation
  }
}

@JsName("ESendLevelControlMethod")
public external object SendLevelControlMethod {
  public var Linear: String

  public var CustomCurve: String

  public var Manual: String

  @JsName("ESendLevelControlMethod_MAX")
  public var Max: String
}

@JsName("ESubmixSendStage")
public external object SubmixSendStage {
  public var PostDistanceAttenuation: String

  public var PreDistanceAttenuation: String

  @JsName("ESubmixSendStage_MAX")
  public var Max: String
}

public open external class SoundSubmixSendInfo {
  @JsName("SendLevelControlMethod")
  public open var sendLevelControlMethod: String

  @JsName("SendStage")
  public open var sendStage: String

  @JsName("SoundSubmix")
  public open var soundSubmix: SoundSubmixBase

  @JsName("SendLevel")
  public open var sendLevel: Number

  @JsName("DisableManualSendClamp")
  public open var disableManualSendClamp: Boolean

  @JsName("MinSendLevel")
  public open var minSendLevel: Number

  @JsName("MaxSendLevel")
  public open var maxSendLevel: Number

  @JsName("MinSendDistance")
  public open var minSendDistance: Number

  @JsName("MaxSendDistance")
  public open var maxSendDistance: Number

  @JsName("CustomSendLevelCurve")
  public open var customSendLevelCurve: RuntimeFloatCurve

  public open fun clone(): SoundSubmixSendInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundSubmixSendInfo

    @JsName("C")
    public fun copy(other: Any): SoundSubmixSendInfo
  }
}

public open external class SoundEffectSourcePreset(
  outer: UObject,
) : SoundEffectPreset {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundEffectSourcePreset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundEffectSourcePreset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundEffectSourcePreset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundEffectSourcePreset

    @JsName("C")
    public fun copy(other: UObject): SoundEffectSourcePreset

    @JsName("C")
    public fun copy(other: Any): SoundEffectSourcePreset
  }
}

public open external class SourceEffectChainEntry {
  @JsName("Preset")
  public open var preset: SoundEffectSourcePreset

  @JsName("bBypass")
  public open var bypass: Boolean

  public open fun clone(): SourceEffectChainEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceEffectChainEntry

    @JsName("C")
    public fun copy(other: Any): SourceEffectChainEntry
  }
}

public open external class SoundEffectSourcePresetChain(
  outer: UObject,
) : UObject {
  @JsName("Chain")
  public open var chain: Array<SourceEffectChainEntry>

  @JsName("bPlayEffectChainTails")
  public open var playEffectChainTails: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundEffectSourcePresetChain

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundEffectSourcePresetChain

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundEffectSourcePresetChain

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundEffectSourcePresetChain

    @JsName("C")
    public fun copy(other: UObject): SoundEffectSourcePresetChain

    @JsName("C")
    public fun copy(other: Any): SoundEffectSourcePresetChain
  }
}

@JsName("ESourceBusSendLevelControlMethod")
public external object SourceBusSendLevelControlMethod {
  public var Linear: String

  public var CustomCurve: String

  public var Manual: String

  @JsName("ESourceBusSendLevelControlMethod_MAX")
  public var Max: String
}

@JsName("ESourceBusChannels")
public external object SourceBusChannels {
  public var Mono: String

  public var Stereo: String

  @JsName("ESourceBusChannels_MAX")
  public var Max: String
}

@JsName("EAudioBusChannels")
public external object AudioBusChannels {
  public var Mono: String

  public var Stereo: String

  public var Quad: String

  public var FivePointOne: String

  public var SevenPointOne: String

  @JsName("EAudioBusChannels_MAX")
  public var Max: String
}

public open external class AudioBus(
  outer: UObject,
) : UObject {
  @JsName("AudioBusChannels")
  public open var audioBusChannels: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioBus

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioBus

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioBus

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioBus

    @JsName("C")
    public fun copy(other: UObject): AudioBus

    @JsName("C")
    public fun copy(other: Any): AudioBus
  }
}

public open external class SoundSourceBus(
  outer: UObject,
) : SoundWave {
  @JsName("SourceBusChannels")
  public open var sourceBusChannels: String

  @JsName("SourceBusDuration")
  public open var sourceBusDuration: Number

  @JsName("AudioBus")
  public open var audioBus: AudioBus

  @JsName("bAutoDeactivateWhenSilent")
  public open var autoDeactivateWhenSilent: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundSourceBus

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundSourceBus

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundSourceBus

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundSourceBus

    @JsName("C")
    public fun copy(other: UObject): SoundSourceBus

    @JsName("C")
    public fun copy(other: Any): SoundSourceBus
  }
}

public open external class SoundSourceBusSendInfo {
  @JsName("SourceBusSendLevelControlMethod")
  public open var sourceBusSendLevelControlMethod: String

  @JsName("SoundSourceBus")
  public open var soundSourceBus: SoundSourceBus

  @JsName("AudioBus")
  public open var audioBus: AudioBus

  @JsName("SendLevel")
  public open var sendLevel: Number

  @JsName("MinSendLevel")
  public open var minSendLevel: Number

  @JsName("MaxSendLevel")
  public open var maxSendLevel: Number

  @JsName("MinSendDistance")
  public open var minSendDistance: Number

  @JsName("MaxSendDistance")
  public open var maxSendDistance: Number

  @JsName("CustomSendLevelCurve")
  public open var customSendLevelCurve: RuntimeFloatCurve

  public open fun clone(): SoundSourceBusSendInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundSourceBusSendInfo

    @JsName("C")
    public fun copy(other: Any): SoundSourceBusSendInfo
  }
}

@JsName("EAudioParameterType")
public external object AudioParameterType {
  public var None: String

  public var Boolean: String

  public var Integer: String

  public var Float: String

  public var String: String

  public var Object: String

  public var NoneArray: String

  public var BooleanArray: String

  public var IntegerArray: String

  public var FloatArray: String

  public var StringArray: String

  public var ObjectArray: String

  public var COUNT: String

  @JsName("EAudioParameterType_MAX")
  public var Max: String
}

public open external class AudioParameter {
  @JsName("ParamName")
  public open var paramName: String

  @JsName("FloatParam")
  public open var floatParam: Number

  @JsName("BoolParam")
  public open var boolParam: Boolean

  @JsName("IntParam")
  public open var intParam: Number

  @JsName("ObjectParam")
  public open var objectParam: UObject

  @JsName("StringParam")
  public open var stringParam: String

  @JsName("ArrayFloatParam")
  public open var arrayFloatParam: Array<Number>

  @JsName("ArrayBoolParam")
  public open var arrayBoolParam: Array<Boolean>

  @JsName("ArrayIntParam")
  public open var arrayIntParam: Array<Number>

  @JsName("ArrayObjectParam")
  public open var arrayObjectParam: Array<UObject>

  @JsName("ArrayStringParam")
  public open var arrayStringParam: Array<String>

  @JsName("ParamType")
  public open var paramType: String

  @JsName("TypeName")
  public open var typeName: String

  public open fun clone(): AudioParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioParameter

    @JsName("C")
    public fun copy(other: Any): AudioParameter

    @JsName("BooleanArrayToAudioParameter")
    public fun booleanArrayToAudioParameter(name: String, bools: Array<Boolean>): AudioParameter

    @JsName("BooleanToAudioParameter")
    public fun booleanToAudioParameter(name: String, bool: Boolean): AudioParameter

    @JsName("FloatArrayToAudioParameter")
    public fun floatArrayToAudioParameter(name: String, floats: Array<Number>): AudioParameter

    @JsName("FloatToAudioParameter")
    public fun floatToAudioParameter(name: String, float: Number): AudioParameter

    @JsName("IntegerArrayToAudioParameter")
    public fun integerArrayToAudioParameter(name: String, integers: Array<Number>): AudioParameter

    @JsName("IntegerToAudioParameter")
    public fun integerToAudioParameter(name: String, integer: Number): AudioParameter

    @JsName("ObjectArrayToAudioParameter")
    public fun objectArrayToAudioParameter(name: String, objects: Array<UObject>): AudioParameter

    @JsName("ObjectToAudioParameter")
    public fun objectToAudioParameter(name: String, uObject: UObject): AudioParameter

    @JsName("StringArrayToAudioParameter")
    public fun stringArrayToAudioParameter(name: String, strings: Array<String>): AudioParameter

    @JsName("StringToAudioParameter")
    public fun stringToAudioParameter(name: String, string: String): AudioParameter
  }
}

@JsName("EAudioComponentPlayState")
public external object AudioComponentPlayState {
  public var Playing: String

  public var Stopped: String

  public var Paused: String

  public var FadingIn: String

  public var FadingOut: String

  public var Count: String

  @JsName("EAudioComponentPlayState_MAX")
  public var Max: String
}

public open external class SoundWaveSpectralData {
  @JsName("FrequencyHz")
  public open var frequencyHz: Number

  @JsName("Magnitude")
  public open var magnitude: Number

  @JsName("NormalizedMagnitude")
  public open var normalizedMagnitude: Number

  public open fun clone(): SoundWaveSpectralData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundWaveSpectralData

    @JsName("C")
    public fun copy(other: Any): SoundWaveSpectralData
  }
}

public open external class SoundWaveSpectralDataPerSound {
  @JsName("SpectralData")
  public open var spectralData: Array<SoundWaveSpectralData>

  @JsName("PlaybackTime")
  public open var playbackTime: Number

  @JsName("SoundWave")
  public open var soundWave: SoundWave

  public open fun clone(): SoundWaveSpectralDataPerSound

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundWaveSpectralDataPerSound

    @JsName("C")
    public fun copy(other: Any): SoundWaveSpectralDataPerSound
  }
}

public open external class SoundWaveEnvelopeDataPerSound {
  @JsName("Envelope")
  public open var envelope: Number

  @JsName("PlaybackTime")
  public open var playbackTime: Number

  @JsName("SoundWave")
  public open var soundWave: SoundWave

  public open fun clone(): SoundWaveEnvelopeDataPerSound

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SoundWaveEnvelopeDataPerSound

    @JsName("C")
    public fun copy(other: Any): SoundWaveEnvelopeDataPerSound
  }
}

@JsName("EAudioFaderCurve")
public external object AudioFaderCurve {
  public var Linear: String

  public var Logarithmic: String

  public var SCurve: String

  public var Sin: String

  public var Count: String

  @JsName("EAudioFaderCurve_MAX")
  public var Max: String
}

@JsName("T$263")
public external interface Object263 {
  @JsName("OutSoundWaveSpectralData")
  public var outSoundWaveSpectralData: Array<SoundWaveSpectralDataPerSound>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$264")
public external interface Object264 {
  @JsName("OutSoundWaveSpectralData")
  public var outSoundWaveSpectralData: Array<SoundWaveSpectralData>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$265")
public external interface Object265 {
  @JsName("OutEnvelopeData")
  public var outEnvelopeData: Array<SoundWaveEnvelopeDataPerSound>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$266")
public external interface Object266 {
  @JsName("OutEnvelopeData")
  public var outEnvelopeData: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$267")
public external interface Object267 {
  @JsName("OutAttenuationSettings")
  public var outAttenuationSettings: SoundAttenuationSettings

  @JsName("$")
  public var value: Boolean
}

public open external class AudioComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("Sound")
  public open var sound: SoundBase

  @JsName("DefaultParameters")
  public open var defaultParameters: Array<AudioParameter>

  @JsName("InstanceParameters")
  public open var instanceParameters: Array<AudioParameter>

  @JsName("SoundClassOverride")
  public open var soundClassOverride: SoundClass

  @JsName("bAutoDestroy")
  public open var autoDestroy: Boolean

  @JsName("bStopWhenOwnerDestroyed")
  public open var stopWhenOwnerDestroyed: Boolean

  @JsName("bShouldRemainActiveIfDropped")
  public open var shouldRemainActiveIfDropped: Boolean

  @JsName("bAllowSpatialization")
  public open var allowSpatialization: Boolean

  @JsName("bOverrideAttenuation")
  public open var overrideAttenuation: Boolean

  @JsName("bOverrideSubtitlePriority")
  public open var overrideSubtitlePriority: Boolean

  @JsName("bIsUISound")
  public open var isUiSound: Boolean

  @JsName("bEnableLowPassFilter")
  public open var enableLowPassFilter: Boolean

  @JsName("bOverridePriority")
  public open var overridePriority: Boolean

  @JsName("bSuppressSubtitles")
  public open var suppressSubtitles: Boolean

  @JsName("bCanPlayMultipleInstances")
  public open var canPlayMultipleInstances: Boolean

  @JsName("bDisableParameterUpdatesWhilePlaying")
  public open var disableParameterUpdatesWhilePlaying: Boolean

  @JsName("bAutoManageAttachment")
  public open var autoManageAttachment: Boolean

  @JsName("AudioComponentUserID")
  public open var audioComponentUserId: String

  @JsName("PitchModulationMin")
  public open var pitchModulationMin: Number

  @JsName("PitchModulationMax")
  public open var pitchModulationMax: Number

  @JsName("VolumeModulationMin")
  public open var volumeModulationMin: Number

  @JsName("VolumeModulationMax")
  public open var volumeModulationMax: Number

  @JsName("VolumeMultiplier")
  public open var volumeMultiplier: Number

  @JsName("EnvelopeFollowerAttackTime")
  public open var envelopeFollowerAttackTime: Number

  @JsName("EnvelopeFollowerReleaseTime")
  public open var envelopeFollowerReleaseTime: Number

  @JsName("Priority")
  public open var priority: Number

  @JsName("SubtitlePriority")
  public open var subtitlePriority: Number

  @JsName("SourceEffectChain")
  public open var sourceEffectChain: SoundEffectSourcePresetChain

  @JsName("VolumeWeightedPriorityScale")
  public open var volumeWeightedPriorityScale: Number

  @JsName("HighFrequencyGainMultiplier")
  public open var highFrequencyGainMultiplier: Number

  @JsName("PitchMultiplier")
  public open var pitchMultiplier: Number

  @JsName("LowPassFilterFrequency")
  public open var lowPassFilterFrequency: Number

  @JsName("AttenuationSettings")
  public open var attenuationSettings: SoundAttenuation

  @JsName("AttenuationOverrides")
  public open var attenuationOverrides: SoundAttenuationSettings

  @JsName("ConcurrencySettings")
  public open var concurrencySettings: SoundConcurrency

  @JsName("ConcurrencySet")
  public open var concurrencySet: Any

  @JsName("AutoAttachLocationRule")
  public open var autoAttachLocationRule: String

  @JsName("AutoAttachRotationRule")
  public open var autoAttachRotationRule: String

  @JsName("AutoAttachScaleRule")
  public open var autoAttachScaleRule: String

  @JsName("ModulationRouting")
  public open var modulationRouting: SoundModulationDefaultRoutingSettings

  @JsName("OnAudioPlayStateChanged")
  public open var onAudioPlayStateChanged:
      UnrealEngineMulticastDelegate<(PlayState: String) -> Unit>

  @JsName("OnAudioVirtualizationChanged")
  public open var onAudioVirtualizationChanged:
      UnrealEngineMulticastDelegate<(bIsVirtualized: Boolean) -> Unit>

  @JsName("OnAudioFinished")
  public open var onAudioFinished: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnAudioPlaybackPercent")
  public open var onAudioPlaybackPercent:
      UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, PlaybackPercent: Number) -> Unit>

  @JsName("OnAudioSingleEnvelopeValue")
  public open var onAudioSingleEnvelopeValue:
      UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, EnvelopeValue: Number) -> Unit>

  @JsName("OnAudioMultiEnvelopeValue")
  public open var onAudioMultiEnvelopeValue: UnrealEngineMulticastDelegate<(
    AverageEnvelopeValue: Number,
    MaxEnvelope: Number,
    NumWaveInstances: Number,
  ) -> Unit>

  @JsName("OnQueueSubtitles")
  public open var onQueueSubtitles: UnrealEngineDelegate<(Subtitles: Array<SubtitleCue>,
      CueDuration: Number) -> Unit>

  @JsName("AutoAttachParent")
  public open var autoAttachParent: Any

  @JsName("AutoAttachSocketName")
  public open var autoAttachSocketName: String

  @JsName("StopDelayed")
  public open fun stopDelayed(delayTime: Number): Unit

  @JsName("Stop")
  public open fun stop(): Unit

  @JsName("SetWaveParameter")
  public open fun setWaveParameter(inName: String, inWave: SoundWave): Unit

  @JsName("SetVolumeMultiplier")
  public open fun setVolumeMultiplier(newVolumeMultiplier: Number): Unit

  @JsName("SetUISound")
  public open fun setUiSound(inUiSound: Boolean): Unit

  @JsName("SetSubmixSend")
  public open fun setSubmixSend(submix: SoundSubmixBase, sendLevel: Number): Unit

  @JsName("SetSourceBusSendPreEffect")
  public open fun setSourceBusSendPreEffect(soundSourceBus: SoundSourceBus,
      sourceBusSendLevel: Number): Unit

  @JsName("SetSourceBusSendPostEffect")
  public open fun setSourceBusSendPostEffect(soundSourceBus: SoundSourceBus,
      sourceBusSendLevel: Number): Unit

  @JsName("SetSound")
  public open fun setSound(newSound: SoundBase): Unit

  @JsName("SetPitchMultiplier")
  public open fun setPitchMultiplier(newPitchMultiplier: Number): Unit

  @JsName("SetPaused")
  public open fun setPaused(pause: Boolean): Unit

  @JsName("SetOutputToBusOnly")
  public open fun setOutputToBusOnly(inOutputToBusOnly: Boolean): Unit

  @JsName("SetLowPassFilterFrequency")
  public open fun setLowPassFilterFrequency(inLowPassFilterFrequency: Number): Unit

  @JsName("SetLowPassFilterEnabled")
  public open fun setLowPassFilterEnabled(inLowPassFilterEnabled: Boolean): Unit

  @JsName("SetIntParameter")
  public open fun setIntParameter(inName: String, inInt: Number): Unit

  @JsName("SetFloatParameter")
  public open fun setFloatParameter(inName: String, inFloat: Number): Unit

  @JsName("SetBoolParameter")
  public open fun setBoolParameter(inName: String, inBool: Boolean): Unit

  @JsName("SetAudioBusSendPreEffect")
  public open fun setAudioBusSendPreEffect(audioBus: AudioBus, audioBusSendLevel: Number): Unit

  @JsName("SetAudioBusSendPostEffect")
  public open fun setAudioBusSendPostEffect(audioBus: AudioBus, audioBusSendLevel: Number): Unit

  @JsName("Play")
  public open fun play(startTime: Number): Unit

  @JsName("IsVirtualized")
  public open fun isVirtualized(): Boolean

  @JsName("IsPlaying")
  public open fun isPlaying(): Boolean

  @JsName("HasCookedFFTData")
  public open fun hasCookedFftData(): Boolean

  @JsName("HasCookedAmplitudeEnvelopeData")
  public open fun hasCookedAmplitudeEnvelopeData(): Boolean

  @JsName("GetPlayState")
  public open fun getPlayState(): String

  @JsName("GetCookedFFTDataForAllPlayingSounds")
  public open
      fun getCookedFftDataForAllPlayingSounds(outSoundWaveSpectralData: Array<SoundWaveSpectralDataPerSound>):
      Object263

  @JsName("GetCookedFFTData")
  public open fun getCookedFftData(frequenciesToGet: Array<Number>,
      outSoundWaveSpectralData: Array<SoundWaveSpectralData>): Object264

  @JsName("GetCookedEnvelopeDataForAllPlayingSounds")
  public open
      fun getCookedEnvelopeDataForAllPlayingSounds(outEnvelopeData: Array<SoundWaveEnvelopeDataPerSound>):
      Object265

  @JsName("GetCookedEnvelopeData")
  public open fun getCookedEnvelopeData(outEnvelopeData: Number): Object266

  @JsName("FadeOut")
  public open fun fadeOut(
    fadeOutDuration: Number,
    fadeVolumeLevel: Number,
    fadeCurve: String,
  ): Unit

  @JsName("FadeIn")
  public open fun fadeIn(
    fadeInDuration: Number,
    fadeVolumeLevel: Number,
    startTime: Number,
    fadeCurve: String,
  ): Unit

  @JsName("BP_GetAttenuationSettingsToApply")
  public open fun bpGetAttenuationSettingsToApply(outAttenuationSettings: SoundAttenuationSettings):
      Object267

  @JsName("AdjustVolume")
  public open fun adjustVolume(
    adjustVolumeDuration: Number,
    adjustVolumeLevel: Number,
    fadeCurve: String,
  ): Unit

  @JsName("AdjustAttenuation")
  public open fun adjustAttenuation(inAttenuationSettings: SoundAttenuationSettings): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioComponent

    @JsName("C")
    public fun copy(other: UObject): AudioComponent

    @JsName("C")
    public fun copy(other: Any): AudioComponent
  }
}

public open external class SoundBase(
  outer: UObject,
) : UObject {
  @JsName("SoundClassObject")
  public open var soundClassObject: SoundClass

  @JsName("bDebug")
  public open var debug: Boolean

  @JsName("bOverrideConcurrency")
  public open var overrideConcurrency: Boolean

  @JsName("bOutputToBusOnly")
  public open var outputToBusOnly: Boolean

  @JsName("bEnableBusSends")
  public open var enableBusSends: Boolean

  @JsName("bEnableBaseSubmix")
  public open var enableBaseSubmix: Boolean

  @JsName("bEnableSubmixSends")
  public open var enableSubmixSends: Boolean

  @JsName("bHasDelayNode")
  public open var hasDelayNode: Boolean

  @JsName("bHasConcatenatorNode")
  public open var hasConcatenatorNode: Boolean

  @JsName("bHasVirtualizeWhenSilent")
  public open var hasVirtualizeWhenSilent: Boolean

  @JsName("bBypassVolumeScaleForPriority")
  public open var bypassVolumeScaleForPriority: Boolean

  @JsName("VirtualizationMode")
  public open var virtualizationMode: String

  @JsName("MaxConcurrentResolutionRule")
  public open var maxConcurrentResolutionRule: String

  @JsName("SoundConcurrencySettings")
  public open var soundConcurrencySettings: SoundConcurrency

  @JsName("ConcurrencySet")
  public open var concurrencySet: Any

  @JsName("ConcurrencyOverrides")
  public open var concurrencyOverrides: SoundConcurrencySettings

  @JsName("MaxConcurrentPlayCount")
  public open var maxConcurrentPlayCount: Number

  @JsName("Duration")
  public open var duration: Number

  @JsName("MaxDistance")
  public open var maxDistance: Number

  @JsName("TotalSamples")
  public open var totalSamples: Number

  @JsName("Priority")
  public open var priority: Number

  @JsName("AttenuationSettings")
  public open var attenuationSettings: SoundAttenuation

  @JsName("SoundSubmixObject")
  public open var soundSubmixObject: SoundSubmixBase

  @JsName("SoundSubmixSends")
  public open var soundSubmixSends: Array<SoundSubmixSendInfo>

  @JsName("SourceEffectChain")
  public open var sourceEffectChain: SoundEffectSourcePresetChain

  @JsName("BusSends")
  public open var busSends: Array<SoundSourceBusSendInfo>

  @JsName("PreEffectBusSends")
  public open var preEffectBusSends: Array<SoundSourceBusSendInfo>

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("PrimeSound")
  public open fun primeSound(): Unit

  @JsName("SpawnSoundAttached")
  public open fun spawnSoundAttached(
    attachToComponent: SceneComponent,
    attachPointName: String,
    location: Vector,
    rotation: Rotator,
    locationType: String,
    stopWhenAttachedToDestroyed: Boolean,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    attenuationSettings: SoundAttenuation,
    concurrencySettings: SoundConcurrency,
    autoDestroy: Boolean,
  ): AudioComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundBase

    @JsName("C")
    public fun copy(other: UObject): SoundBase

    @JsName("C")
    public fun copy(other: Any): SoundBase

    @JsName("PrimeSound")
    public fun primeSound(inSound: SoundBase): Unit

    @JsName("SpawnSoundAttached")
    public fun spawnSoundAttached(
      sound: SoundBase,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      stopWhenAttachedToDestroyed: Boolean,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      concurrencySettings: SoundConcurrency,
      autoDestroy: Boolean,
    ): AudioComponent
  }
}

@JsName("EUMGSequencePlayMode")
public external object UMGSequencePlayMode {
  public var Forward: String

  public var Reverse: String

  public var PingPong: String

  @JsName("EUMGSequencePlayMode_MAX")
  public var Max: String
}

public open external class InputEvent {
  public open fun clone(): InputEvent

  @JsName("InputEvent_IsAltDown")
  public open fun inputEventIsAltDown(): Boolean

  @JsName("InputEvent_IsCommandDown")
  public open fun inputEventIsCommandDown(): Boolean

  @JsName("InputEvent_IsControlDown")
  public open fun inputEventIsControlDown(): Boolean

  @JsName("InputEvent_IsLeftAltDown")
  public open fun inputEventIsLeftAltDown(): Boolean

  @JsName("InputEvent_IsLeftCommandDown")
  public open fun inputEventIsLeftCommandDown(): Boolean

  @JsName("InputEvent_IsLeftControlDown")
  public open fun inputEventIsLeftControlDown(): Boolean

  @JsName("InputEvent_IsLeftShiftDown")
  public open fun inputEventIsLeftShiftDown(): Boolean

  @JsName("InputEvent_IsRepeat")
  public open fun inputEventIsRepeat(): Boolean

  @JsName("InputEvent_IsRightAltDown")
  public open fun inputEventIsRightAltDown(): Boolean

  @JsName("InputEvent_IsRightCommandDown")
  public open fun inputEventIsRightCommandDown(): Boolean

  @JsName("InputEvent_IsRightControlDown")
  public open fun inputEventIsRightControlDown(): Boolean

  @JsName("InputEvent_IsRightShiftDown")
  public open fun inputEventIsRightShiftDown(): Boolean

  @JsName("InputEvent_IsShiftDown")
  public open fun inputEventIsShiftDown(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputEvent

    @JsName("C")
    public fun copy(other: Any): InputEvent

    @JsName("InputEvent_IsAltDown")
    public fun inputEventIsAltDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsCommandDown")
    public fun inputEventIsCommandDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsControlDown")
    public fun inputEventIsControlDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsLeftAltDown")
    public fun inputEventIsLeftAltDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsLeftCommandDown")
    public fun inputEventIsLeftCommandDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsLeftControlDown")
    public fun inputEventIsLeftControlDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsLeftShiftDown")
    public fun inputEventIsLeftShiftDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRepeat")
    public fun inputEventIsRepeat(input: InputEvent): Boolean

    @JsName("InputEvent_IsRightAltDown")
    public fun inputEventIsRightAltDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRightCommandDown")
    public fun inputEventIsRightCommandDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRightControlDown")
    public fun inputEventIsRightControlDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsRightShiftDown")
    public fun inputEventIsRightShiftDown(input: InputEvent): Boolean

    @JsName("InputEvent_IsShiftDown")
    public fun inputEventIsShiftDown(input: InputEvent): Boolean
  }
}

@JsName("ESlateGesture")
public external object SlateGesture {
  public var None: String

  public var Scroll: String

  public var Magnify: String

  public var Swipe: String

  public var Rotate: String

  public var LongPress: String

  @JsName("ESlateGesture_MAX")
  public var Max: String
}

@JsName("T$268")
public external interface Object268 {
  @JsName("Reply")
  public var reply: EventReply

  @JsName("$")
  public var value: EventReply
}

public open external class EventReply {
  public open fun clone(): EventReply

  @JsName("CaptureJoystick")
  public open fun captureJoystick(capturingWidget: Widget, inAllJoysticks: Boolean): Object268

  @JsName("CaptureMouse")
  public open fun captureMouse(capturingWidget: Widget): Object268

  @JsName("ClearUserFocus")
  public open fun clearUserFocus(inAllUsers: Boolean): Object268

  @JsName("DetectDrag")
  public open fun detectDrag(widgetDetectingDrag: Widget, dragKey: Key): Object268

  @JsName("EndDragDrop")
  public open fun endDragDrop(): Object268

  @JsName("LockMouse")
  public open fun lockMouse(capturingWidget: Widget): Object268

  @JsName("ReleaseJoystickCapture")
  public open fun releaseJoystickCapture(inAllJoysticks: Boolean): Object268

  @JsName("ReleaseMouseCapture")
  public open fun releaseMouseCapture(): Object268

  @JsName("SetMousePosition")
  public open fun setMousePosition(newMousePosition: Vector2d): Object268

  @JsName("SetUserFocus")
  public open fun setUserFocus(focusWidget: Widget, inAllUsers: Boolean): Object268

  @JsName("UnlockMouse")
  public open fun unlockMouse(): Object268

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EventReply

    @JsName("C")
    public fun copy(other: Any): EventReply

    @JsName("CaptureJoystick")
    public fun captureJoystick(
      reply: EventReply,
      capturingWidget: Widget,
      inAllJoysticks: Boolean,
    ): Object268

    @JsName("CaptureMouse")
    public fun captureMouse(reply: EventReply, capturingWidget: Widget): Object268

    @JsName("ClearUserFocus")
    public fun clearUserFocus(reply: EventReply, inAllUsers: Boolean): Object268

    @JsName("DetectDrag")
    public fun detectDrag(
      reply: EventReply,
      widgetDetectingDrag: Widget,
      dragKey: Key,
    ): Object268

    @JsName("EndDragDrop")
    public fun endDragDrop(reply: EventReply): Object268

    @JsName("LockMouse")
    public fun lockMouse(reply: EventReply, capturingWidget: Widget): Object268

    @JsName("ReleaseJoystickCapture")
    public fun releaseJoystickCapture(reply: EventReply, inAllJoysticks: Boolean): Object268

    @JsName("ReleaseMouseCapture")
    public fun releaseMouseCapture(reply: EventReply): Object268

    @JsName("SetMousePosition")
    public fun setMousePosition(reply: EventReply, newMousePosition: Vector2d): Object268

    @JsName("SetUserFocus")
    public fun setUserFocus(
      reply: EventReply,
      focusWidget: Widget,
      inAllUsers: Boolean,
    ): Object268

    @JsName("UnlockMouse")
    public fun unlockMouse(reply: EventReply): Object268

    @JsName("Handled")
    public fun handled(): EventReply

    @JsName("Unhandled")
    public fun unhandled(): EventReply
  }
}

public open external class UPointerEvent : InputEvent {
  public open override fun clone(): UPointerEvent

  @JsName("PointerEvent_GetCursorDelta")
  public open fun getCursorDelta(): Vector2d

  @JsName("PointerEvent_GetEffectingButton")
  public open fun getEffectingButton(): Key

  @JsName("PointerEvent_GetGestureDelta")
  public open fun getGestureDelta(): Vector2d

  @JsName("PointerEvent_GetGestureType")
  public open fun getGestureType(): String

  @JsName("PointerEvent_GetLastScreenSpacePosition")
  public open fun getLastScreenSpacePosition(): Vector2d

  @JsName("PointerEvent_GetPointerIndex")
  public open fun getPointerIndex(): Number

  @JsName("PointerEvent_GetScreenSpacePosition")
  public open fun getScreenSpacePosition(): Vector2d

  @JsName("PointerEvent_GetTouchpadIndex")
  public open fun getTouchpadIndex(): Number

  @JsName("PointerEvent_GetUserIndex")
  public open fun getUserIndex(): Number

  @JsName("PointerEvent_GetWheelDelta")
  public open fun getWheelDelta(): Number

  @JsName("PointerEvent_IsMouseButtonDown")
  public open fun isMouseButtonDown(mouseButton: Key): Boolean

  @JsName("PointerEvent_IsTouchEvent")
  public open fun isTouchEvent(): Boolean

  @JsName("DetectDragIfPressed")
  public open fun detectDragIfPressed(widgetDetectingDrag: Widget, dragKey: Key): EventReply

  @JsName("GetInputEventFromPointerEvent")
  public open fun getInputEventFromPointerEvent(): InputEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UPointerEvent

    @JsName("C")
    public fun copy(other: Any): UPointerEvent

    @JsName("PointerEvent_GetCursorDelta")
    public fun getCursorDelta(input: UPointerEvent): Vector2d

    @JsName("PointerEvent_GetEffectingButton")
    public fun getEffectingButton(input: UPointerEvent): Key

    @JsName("PointerEvent_GetGestureDelta")
    public fun getGestureDelta(input: UPointerEvent): Vector2d

    @JsName("PointerEvent_GetGestureType")
    public fun getGestureType(input: UPointerEvent): String

    @JsName("PointerEvent_GetLastScreenSpacePosition")
    public fun getLastScreenSpacePosition(input: UPointerEvent): Vector2d

    @JsName("PointerEvent_GetPointerIndex")
    public fun getPointerIndex(input: UPointerEvent): Number

    @JsName("PointerEvent_GetScreenSpacePosition")
    public fun getScreenSpacePosition(input: UPointerEvent): Vector2d

    @JsName("PointerEvent_GetTouchpadIndex")
    public fun getTouchpadIndex(input: UPointerEvent): Number

    @JsName("PointerEvent_GetUserIndex")
    public fun getUserIndex(input: UPointerEvent): Number

    @JsName("PointerEvent_GetWheelDelta")
    public fun getWheelDelta(input: UPointerEvent): Number

    @JsName("PointerEvent_IsMouseButtonDown")
    public fun isMouseButtonDown(input: UPointerEvent, mouseButton: Key): Boolean

    @JsName("PointerEvent_IsTouchEvent")
    public fun isTouchEvent(input: UPointerEvent): Boolean

    @JsName("DetectDragIfPressed")
    public fun detectDragIfPressed(
      uPointerEvent: UPointerEvent,
      widgetDetectingDrag: Widget,
      dragKey: Key,
    ): EventReply

    @JsName("GetInputEventFromPointerEvent")
    public fun getInputEventFromPointerEvent(event: UPointerEvent): InputEvent
  }
}

public open external class UFocusEvent {
  public open fun clone(): UFocusEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UFocusEvent

    @JsName("C")
    public fun copy(other: Any): UFocusEvent
  }
}

public open external class KeyEvent : InputEvent {
  public open override fun clone(): KeyEvent

  @JsName("GetIsAltDownByKeyEvent")
  public open fun getIsAltDownByKeyEvent(): Boolean

  @JsName("GetIsControlDownByKeyEvent")
  public open fun getIsControlDownByKeyEvent(): Boolean

  @JsName("GetIsShiftDownByKeyEvent")
  public open fun getIsShiftDownByKeyEvent(): Boolean

  @JsName("GetKeyNameByKeyEvent")
  public open fun getKeyNameByKeyEvent(): String

  @JsName("GetKey")
  public open fun getKey(): Key

  @JsName("GetUserIndex")
  public open fun getUserIndex(): Number

  @JsName("Key_GetNavigationActionFromKey")
  public open fun keyGetNavigationActionFromKey(): String

  @JsName("Key_GetNavigationDirectionFromKey")
  public open fun keyGetNavigationDirectionFromKey(): String

  @JsName("GetInputEventFromKeyEvent")
  public open fun getInputEventFromKeyEvent(): InputEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KeyEvent

    @JsName("C")
    public fun copy(other: Any): KeyEvent

    @JsName("GetIsAltDownByKeyEvent")
    public fun getIsAltDownByKeyEvent(event: KeyEvent): Boolean

    @JsName("GetIsControlDownByKeyEvent")
    public fun getIsControlDownByKeyEvent(event: KeyEvent): Boolean

    @JsName("GetIsShiftDownByKeyEvent")
    public fun getIsShiftDownByKeyEvent(event: KeyEvent): Boolean

    @JsName("GetKeyNameByKeyEvent")
    public fun getKeyNameByKeyEvent(event: KeyEvent): String

    @JsName("GetKey")
    public fun getKey(input: KeyEvent): Key

    @JsName("GetUserIndex")
    public fun getUserIndex(input: KeyEvent): Number

    @JsName("Key_GetNavigationActionFromKey")
    public fun keyGetNavigationActionFromKey(inKeyEvent: KeyEvent): String

    @JsName("Key_GetNavigationDirectionFromKey")
    public fun keyGetNavigationDirectionFromKey(inKeyEvent: KeyEvent): String

    @JsName("GetInputEventFromKeyEvent")
    public fun getInputEventFromKeyEvent(event: KeyEvent): InputEvent
  }
}

public open external class SlateBrushAsset(
  outer: UObject,
) : UObject {
  @JsName("Brush")
  public open var brush: SlateBrush

  @JsName("MakeBrushFromAsset")
  public open fun makeBrushFromAsset(): SlateBrush

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateBrushAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateBrushAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateBrushAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateBrushAsset

    @JsName("C")
    public fun copy(other: UObject): SlateBrushAsset

    @JsName("C")
    public fun copy(other: Any): SlateBrushAsset

    @JsName("MakeBrushFromAsset")
    public fun makeBrushFromAsset(brushAsset: SlateBrushAsset): SlateBrush
  }
}

@JsName("T$269")
public external interface ContextProvider {
  @JsName("Context")
  public var context: PaintContext
}

public open external class PaintContext {
  public open fun clone(): PaintContext

  @JsName("DrawSpaceSpline")
  public open fun drawSpaceSpline(
    inStart: Vector2d,
    inStartDir: Vector2d,
    inEnd: Vector2d,
    inEndDir: Vector2d,
    inThickness: Number,
    inTint: LinearColor,
  ): ContextProvider

  @JsName("DrawBox")
  public open fun drawBox(
    position: Vector2d,
    size: Vector2d,
    brush: SlateBrushAsset,
    tint: LinearColor,
  ): ContextProvider

  @JsName("DrawLine")
  public open fun drawLine(
    positionA: Vector2d,
    positionB: Vector2d,
    tint: LinearColor,
    antiAlias: Boolean,
    thickness: Number,
  ): ContextProvider

  @JsName("DrawLines")
  public open fun drawLines(
    points: Array<Vector2d>,
    tint: LinearColor,
    antiAlias: Boolean,
    thickness: Number,
  ): ContextProvider

  @JsName("DrawText")
  public open fun drawText(
    inString: String,
    position: Vector2d,
    tint: LinearColor,
  ): ContextProvider

  @JsName("DrawTextFormatted")
  public open fun drawTextFormatted(
    text: String,
    position: Vector2d,
    font: Font,
    fontSize: Number,
    fontTypeFace: String,
    tint: LinearColor,
  ): ContextProvider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PaintContext

    @JsName("C")
    public fun copy(other: Any): PaintContext

    @JsName("DrawSpaceSpline")
    public fun drawSpaceSpline(
      context: PaintContext,
      inStart: Vector2d,
      inStartDir: Vector2d,
      inEnd: Vector2d,
      inEndDir: Vector2d,
      inThickness: Number,
      inTint: LinearColor,
    ): ContextProvider

    @JsName("DrawBox")
    public fun drawBox(
      context: PaintContext,
      position: Vector2d,
      size: Vector2d,
      brush: SlateBrushAsset,
      tint: LinearColor,
    ): ContextProvider

    @JsName("DrawLine")
    public fun drawLine(
      context: PaintContext,
      positionA: Vector2d,
      positionB: Vector2d,
      tint: LinearColor,
      antiAlias: Boolean,
      thickness: Number,
    ): ContextProvider

    @JsName("DrawLines")
    public fun drawLines(
      context: PaintContext,
      points: Array<Vector2d>,
      tint: LinearColor,
      antiAlias: Boolean,
      thickness: Number,
    ): ContextProvider

    @JsName("DrawText")
    public fun drawText(
      context: PaintContext,
      inString: String,
      position: Vector2d,
      tint: LinearColor,
    ): ContextProvider

    @JsName("DrawTextFormatted")
    public fun drawTextFormatted(
      context: PaintContext,
      text: String,
      position: Vector2d,
      font: Font,
      fontSize: Number,
      fontTypeFace: String,
      tint: LinearColor,
    ): ContextProvider
  }
}

public open external class MotionEvent : InputEvent {
  public open override fun clone(): MotionEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MotionEvent

    @JsName("C")
    public fun copy(other: Any): MotionEvent
  }
}

public open external class CharacterEvent : InputEvent {
  public open override fun clone(): CharacterEvent

  @JsName("GetInputEventFromCharacterEvent")
  public open fun getInputEventFromCharacterEvent(): InputEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CharacterEvent

    @JsName("C")
    public fun copy(other: Any): CharacterEvent

    @JsName("GetInputEventFromCharacterEvent")
    public fun getInputEventFromCharacterEvent(event: CharacterEvent): InputEvent
  }
}

public open external class AnalogInputEvent : KeyEvent {
  public override fun clone(): AnalogInputEvent

  @JsName("GetAnalogValue")
  public open fun getAnalogValue(): Number

  @JsName("Key_GetNavigationDirectionFromAnalog")
  public open fun keyGetNavigationDirectionFromAnalog(): String

  @JsName("GetKeyEventFromAnalogInputEvent")
  public open fun getKeyEventFromAnalogInputEvent(): KeyEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnalogInputEvent

    @JsName("C")
    public fun copy(other: Any): AnalogInputEvent

    @JsName("GetAnalogValue")
    public fun getAnalogValue(input: AnalogInputEvent): Number

    @JsName("Key_GetNavigationDirectionFromAnalog")
    public fun keyGetNavigationDirectionFromAnalog(inAnalogEvent: AnalogInputEvent): String

    @JsName("GetKeyEventFromAnalogInputEvent")
    public fun getKeyEventFromAnalogInputEvent(event: AnalogInputEvent): KeyEvent
  }
}

@JsName("T$270")
public external interface OperationProvider {
  @JsName("Operation")
  public var operation: DragDropOperation
}

public open external class UserWidget(
  outer: UObject,
) : Widget {
  @JsName("ColorAndOpacity")
  public open var colorAndOpacity: LinearColor

  @JsName("ColorAndOpacityDelegate")
  public open var colorAndOpacityDelegate: UnrealEngineDelegate<() -> LinearColor>

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("ForegroundColorDelegate")
  public open var foregroundColorDelegate: UnrealEngineDelegate<() -> SlateColor>

  @JsName("OnVisibilityChanged")
  public open var onVisibilityChanged: UnrealEngineMulticastDelegate<(InVisibility: String) -> Unit>

  @JsName("Padding")
  public open var padding: Margin

  @JsName("ActiveSequencePlayers")
  public open var activeSequencePlayers: Array<UmgSequencePlayer>

  @JsName("AnimationTickManager")
  public open var animationTickManager: UmgSequenceTickManager

  @JsName("StoppedSequencePlayers")
  public open var stoppedSequencePlayers: Array<UmgSequencePlayer>

  @JsName("NamedSlotBindings")
  public open var namedSlotBindings: Array<NamedSlotBinding>

  @JsName("WidgetTree")
  public open var widgetTree: WidgetTree

  @JsName("DesignTimeSize")
  public open var designTimeSize: Vector2d

  @JsName("DesignSizeMode")
  public open var designSizeMode: String

  @JsName("PaletteCategory")
  public open var paletteCategory: String

  @JsName("PreviewBackground")
  public open var previewBackground: Texture2d

  @JsName("Priority")
  public open var priority: Number

  @JsName("bSupportsKeyboardFocus")
  public open var supportsKeyboardFocus: Boolean

  @JsName("bIsFocusable")
  public open var isFocusable: Boolean

  @JsName("bStopAction")
  public open var stopAction: Boolean

  @JsName("bHasScriptImplementedTick")
  public open var hasScriptImplementedTick: Boolean

  @JsName("bHasScriptImplementedPaint")
  public open var hasScriptImplementedPaint: Boolean

  @JsName("TickFrequency")
  public open var tickFrequency: String

  @JsName("InputComponent")
  public open var inputComponent: InputComponent

  @JsName("AnimationCallbacks")
  public open var animationCallbacks: Array<AnimationEventBinding>

  @JsName("UnregisterInputComponent")
  public open fun unregisterInputComponent(): Unit

  @JsName("UnbindAllFromAnimationStarted")
  public open fun unbindAllFromAnimationStarted(animation: WidgetAnimation): Unit

  @JsName("UnbindAllFromAnimationFinished")
  public open fun unbindAllFromAnimationFinished(animation: WidgetAnimation): Unit

  @JsName("Tick")
  public open fun tick(myGeometry: Geometry, inDeltaTime: Number): Unit

  @JsName("StopListeningForInputAction")
  public open fun stopListeningForInputAction(actionName: String, eventType: String): Unit

  @JsName("StopListeningForAllInputActions")
  public open fun stopListeningForAllInputActions(): Unit

  @JsName("StopAnimationsAndLatentActions")
  public open fun stopAnimationsAndLatentActions(): Unit

  @JsName("StopAnimation")
  public open fun stopAnimation(inAnimation: WidgetAnimation): Unit

  @JsName("StopAllAnimations")
  public open fun stopAllAnimations(): Unit

  @JsName("SetPositionInViewport")
  public open fun setPositionInViewport(position: Vector2d, removeDpiScale: Boolean): Unit

  @JsName("SetPlaybackSpeed")
  public open fun setPlaybackSpeed(inAnimation: WidgetAnimation, playbackSpeed: Number): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetOwningPlayer")
  public open fun setOwningPlayer(localPlayerController: PlayerController): Unit

  @JsName("SetNumLoopsToPlay")
  public open fun setNumLoopsToPlay(inAnimation: WidgetAnimation, numLoopsToPlay: Number): Unit

  @JsName("SetInputActionPriority")
  public open fun setInputActionPriority(newPriority: Number): Unit

  @JsName("SetInputActionBlocking")
  public open fun setInputActionBlocking(shouldBlock: Boolean): Unit

  @JsName("SetForegroundColor")
  public open fun setForegroundColor(inForegroundColor: SlateColor): Unit

  @JsName("SetDesiredSizeInViewport")
  public open fun setDesiredSizeInViewport(size: Vector2d): Unit

  @JsName("SetColorAndOpacity")
  public open fun setColorAndOpacity(inColorAndOpacity: LinearColor): Unit

  @JsName("SetAnimationCurrentTime")
  public open fun setAnimationCurrentTime(inAnimation: WidgetAnimation, inTime: Number): Unit

  @JsName("SetAnchorsInViewport")
  public open fun setAnchorsInViewport(anchors: Anchors): Unit

  @JsName("SetAlignmentInViewport")
  public open fun setAlignmentInViewport(alignment: Vector2d): Unit

  @JsName("ReverseAnimation")
  public open fun reverseAnimation(inAnimation: WidgetAnimation): Unit

  @JsName("RemoveFromViewport")
  public open fun removeFromViewport(): Unit

  @JsName("RegisterInputComponent")
  public open fun registerInputComponent(): Unit

  @JsName("PreConstruct")
  public open fun preConstruct(isDesignTime: Boolean): Unit

  @JsName("PlaySound")
  public open fun playSound(soundToPlay: SoundBase): Unit

  @JsName("PlayAnimationTimeRange")
  public open fun playAnimationTimeRange(
    inAnimation: WidgetAnimation,
    startAtTime: Number,
    endAtTime: Number,
    numLoopsToPlay: Number,
    playMode: String,
    playbackSpeed: Number,
    restoreState: Boolean,
  ): UmgSequencePlayer

  @JsName("PlayAnimationReverse")
  public open fun playAnimationReverse(
    inAnimation: WidgetAnimation,
    playbackSpeed: Number,
    restoreState: Boolean,
  ): UmgSequencePlayer

  @JsName("PlayAnimationForward")
  public open fun playAnimationForward(
    inAnimation: WidgetAnimation,
    playbackSpeed: Number,
    restoreState: Boolean,
  ): UmgSequencePlayer

  @JsName("PlayAnimation")
  public open fun playAnimation(
    inAnimation: WidgetAnimation,
    startAtTime: Number,
    numLoopsToPlay: Number,
    playMode: String,
    playbackSpeed: Number,
    restoreState: Boolean,
  ): UmgSequencePlayer

  @JsName("PauseAnimation")
  public open fun pauseAnimation(inAnimation: WidgetAnimation): Number

  @JsName("OnTouchStarted")
  public open fun onTouchStarted(myGeometry: Geometry, inTouchEvent: UPointerEvent): EventReply

  @JsName("OnTouchMoved")
  public open fun onTouchMoved(myGeometry: Geometry, inTouchEvent: UPointerEvent): EventReply

  @JsName("OnTouchGesture")
  public open fun onTouchGesture(myGeometry: Geometry, gestureEvent: UPointerEvent): EventReply

  @JsName("OnTouchForceChanged")
  public open fun onTouchForceChanged(myGeometry: Geometry, inTouchEvent: UPointerEvent): EventReply

  @JsName("OnTouchEnded")
  public open fun onTouchEnded(myGeometry: Geometry, inTouchEvent: UPointerEvent): EventReply

  @JsName("OnRemovedFromFocusPath")
  public open fun onRemovedFromFocusPath(inFocusEvent: UFocusEvent): Unit

  @JsName("OnPreviewMouseButtonDown")
  public open fun onPreviewMouseButtonDown(myGeometry: Geometry, mouseEvent: UPointerEvent):
      EventReply

  @JsName("OnPreviewKeyDown")
  public open fun onPreviewKeyDown(myGeometry: Geometry, inKeyEvent: KeyEvent): EventReply

  @JsName("OnPaint")
  public open fun onPaint(context: PaintContext): ContextProvider

  @JsName("OnMouseWheel")
  public open fun onMouseWheel(myGeometry: Geometry, mouseEvent: UPointerEvent): EventReply

  @JsName("OnMouseMove")
  public open fun onMouseMove(myGeometry: Geometry, mouseEvent: UPointerEvent): EventReply

  @JsName("OnMouseLeave")
  public open fun onMouseLeave(mouseEvent: UPointerEvent): Unit

  @JsName("OnMouseEnter")
  public open fun onMouseEnter(myGeometry: Geometry, mouseEvent: UPointerEvent): Unit

  @JsName("OnMouseCaptureLost")
  public open fun onMouseCaptureLost(): Unit

  @JsName("OnMouseButtonUp")
  public open fun onMouseButtonUp(myGeometry: Geometry, mouseEvent: UPointerEvent): EventReply

  @JsName("OnMouseButtonDown")
  public open fun onMouseButtonDown(myGeometry: Geometry, mouseEvent: UPointerEvent): EventReply

  @JsName("OnMouseButtonDoubleClick")
  public open fun onMouseButtonDoubleClick(inMyGeometry: Geometry, inMouseEvent: UPointerEvent):
      EventReply

  @JsName("OnMotionDetected")
  public open fun onMotionDetected(myGeometry: Geometry, inMotionEvent: MotionEvent): EventReply

  @JsName("OnKeyUp")
  public open fun onKeyUp(myGeometry: Geometry, inKeyEvent: KeyEvent): EventReply

  @JsName("OnKeyDown")
  public open fun onKeyDown(myGeometry: Geometry, inKeyEvent: KeyEvent): EventReply

  @JsName("OnKeyChar")
  public open fun onKeyChar(myGeometry: Geometry, inCharacterEvent: CharacterEvent): EventReply

  @JsName("OnInitialized")
  public open fun onInitialized(): Unit

  @JsName("OnFocusReceived")
  public open fun onFocusReceived(myGeometry: Geometry, inFocusEvent: UFocusEvent): EventReply

  @JsName("OnFocusLost")
  public open fun onFocusLost(inFocusEvent: UFocusEvent): Unit

  @JsName("OnDrop")
  public open fun onDrop(
    myGeometry: Geometry,
    uPointerEvent: UPointerEvent,
    operation: DragDropOperation,
  ): Boolean

  @JsName("OnDragOver")
  public open fun onDragOver(
    myGeometry: Geometry,
    uPointerEvent: UPointerEvent,
    operation: DragDropOperation,
  ): Boolean

  @JsName("OnDragLeave")
  public open fun onDragLeave(uPointerEvent: UPointerEvent, operation: DragDropOperation): Unit

  @JsName("OnDragEnter")
  public open fun onDragEnter(
    myGeometry: Geometry,
    uPointerEvent: UPointerEvent,
    operation: DragDropOperation,
  ): Unit

  @JsName("OnDragDetected")
  public open fun onDragDetected(
    myGeometry: Geometry,
    uPointerEvent: UPointerEvent,
    operation: DragDropOperation,
  ): OperationProvider

  @JsName("OnDragCancelled")
  public open fun onDragCancelled(uPointerEvent: UPointerEvent, operation: DragDropOperation): Unit

  @JsName("OnAnimationStarted")
  public open fun onAnimationStarted(animation: WidgetAnimation): Unit

  @JsName("OnAnimationFinished")
  public open fun onAnimationFinished(animation: WidgetAnimation): Unit

  @JsName("OnAnalogValueChanged")
  public open fun onAnalogValueChanged(myGeometry: Geometry, inAnalogInputEvent: AnalogInputEvent):
      EventReply

  @JsName("OnAddedToFocusPath")
  public open fun onAddedToFocusPath(inFocusEvent: UFocusEvent): Unit

  @JsName("IsPlayingAnimation")
  public open fun isPlayingAnimation(): Boolean

  @JsName("IsListeningForInputAction")
  public open fun isListeningForInputAction(actionName: String): Boolean

  @JsName("IsInViewport")
  public open fun isInViewport(): Boolean

  @JsName("IsInteractable")
  public open fun isInteractable(): Boolean

  @JsName("IsAnyAnimationPlaying")
  public open fun isAnyAnimationPlaying(): Boolean

  @JsName("IsAnimationPlayingForward")
  public open fun isAnimationPlayingForward(inAnimation: WidgetAnimation): Boolean

  @JsName("IsAnimationPlaying")
  public open fun isAnimationPlaying(inAnimation: WidgetAnimation): Boolean

  @JsName("GetOwningPlayerPawn")
  public open fun getOwningPlayerPawn(): Pawn

  @JsName("GetOwningPlayerCameraManager")
  public open fun getOwningPlayerCameraManager(): PlayerCameraManager

  @JsName("GetIsVisible")
  public open fun getIsVisible(): Boolean

  @JsName("GetAnimationCurrentTime")
  public open fun getAnimationCurrentTime(inAnimation: WidgetAnimation): Number

  @JsName("GetAnchorsInViewport")
  public open fun getAnchorsInViewport(): Anchors

  @JsName("GetAlignmentInViewport")
  public open fun getAlignmentInViewport(): Vector2d

  @JsName("FlushAnimations")
  public open fun flushAnimations(): Unit

  @JsName("Destruct")
  public open fun destruct(): Unit

  @JsName("Construct")
  public open fun construct(): Unit

  @JsName("CancelLatentActions")
  public open fun cancelLatentActions(): Unit

  @JsName("AddToViewport")
  public open fun addToViewport(zOrder: Number): Unit

  @JsName("AddToPlayerScreen")
  public open fun addToPlayerScreen(zOrder: Number): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserWidget

    @JsName("C")
    public fun copy(other: UObject): UserWidget

    @JsName("C")
    public fun copy(other: Any): UserWidget
  }
}

public open external class ViewTargetTransitionParams {
  @JsName("BlendTime")
  public open var blendTime: Number

  @JsName("BlendFunction")
  public open var blendFunction: String

  @JsName("BlendExp")
  public open var blendExp: Number

  @JsName("bLockOutgoing")
  public open var lockOutgoing: Boolean

  public open fun clone(): ViewTargetTransitionParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ViewTargetTransitionParams

    @JsName("C")
    public fun copy(other: Any): ViewTargetTransitionParams
  }
}

public open external class UpdateLevelVisibilityLevelInfo {
  @JsName("PackageName")
  public open var packageName: String

  @JsName("Filename")
  public open var filename: String

  @JsName("bIsVisible")
  public open var isVisible: Boolean

  public open fun clone(): UpdateLevelVisibilityLevelInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UpdateLevelVisibilityLevelInfo

    @JsName("C")
    public fun copy(other: Any): UpdateLevelVisibilityLevelInfo
  }
}

@JsName("HapticFeedbackEffect_Base")
public open external class HapticFeedbackEffectBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HapticFeedbackEffectBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HapticFeedbackEffectBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HapticFeedbackEffectBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HapticFeedbackEffectBase

    @JsName("C")
    public fun copy(other: UObject): HapticFeedbackEffectBase

    @JsName("C")
    public fun copy(other: Any): HapticFeedbackEffectBase
  }
}

@JsName("EDynamicForceFeedbackAction")
public external object DynamicForceFeedbackAction {
  public var Start: String

  public var Update: String

  public var Stop: String

  @JsName("EDynamicForceFeedbackAction_MAX")
  public var Max: String
}

public open external class LatentActionInfo {
  @JsName("Linkage")
  public open var linkage: Number

  public open var UUID: Number

  @JsName("ExecutionFunction")
  public open var executionFunction: String

  @JsName("CallbackTarget")
  public open var callbackTarget: UObject

  public open fun clone(): LatentActionInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LatentActionInfo

    @JsName("C")
    public fun copy(other: Any): LatentActionInfo
  }
}

@JsName("ETouchIndex")
public external object TouchIndex {
  public var Touch1: String

  public var Touch2: String

  public var Touch3: String

  public var Touch4: String

  public var Touch5: String

  public var Touch6: String

  public var Touch7: String

  public var Touch8: String

  public var Touch9: String

  public var Touch10: String

  public var CursorPointerIndex: String

  @JsName("MAX_TOUCHES")
  public var Maxtouches: String

  @JsName("ETouchIndex_MAX")
  public var Max: String
}

@JsName("EObjectTypeQuery")
public external object ObjectTypeQuery {
  @JsName("ObjectTypeQuery1")
  public var One: String

  @JsName("ObjectTypeQuery2")
  public var Two: String

  @JsName("ObjectTypeQuery3")
  public var Three: String

  @JsName("ObjectTypeQuery4")
  public var Four: String

  @JsName("ObjectTypeQuery5")
  public var Five: String

  @JsName("ObjectTypeQuery6")
  public var Six: String

  @JsName("ObjectTypeQuery7")
  public var Seven: String

  @JsName("ObjectTypeQuery8")
  public var Eight: String

  @JsName("ObjectTypeQuery9")
  public var Nine: String

  @JsName("ObjectTypeQuery10")
  public var Ten: String

  @JsName("ObjectTypeQuery11")
  public var Eleven: String

  @JsName("ObjectTypeQuery12")
  public var Twelve: String

  @JsName("ObjectTypeQuery13")
  public var Thirteen: String

  @JsName("ObjectTypeQuery14")
  public var Fourteen: String

  @JsName("ObjectTypeQuery15")
  public var Fifteen: String

  @JsName("ObjectTypeQuery16")
  public var Sixteen: String

  @JsName("ObjectTypeQuery17")
  public var Seventeen: String

  @JsName("ObjectTypeQuery18")
  public var Eighteen: String

  @JsName("ObjectTypeQuery19")
  public var Nineteen: String

  @JsName("ObjectTypeQuery20")
  public var Twenty: String

  @JsName("ObjectTypeQuery21")
  public var TwentyOne: String

  @JsName("ObjectTypeQuery22")
  public var TwentyTwo: String

  @JsName("ObjectTypeQuery23")
  public var TwentyThree: String

  @JsName("ObjectTypeQuery24")
  public var TwentyFour: String

  @JsName("ObjectTypeQuery25")
  public var TwentyFive: String

  @JsName("ObjectTypeQuery26")
  public var TwentySix: String

  @JsName("ObjectTypeQuery27")
  public var TwentySeven: String

  @JsName("ObjectTypeQuery28")
  public var TwentyEight: String

  @JsName("ObjectTypeQuery29")
  public var TwentyNine: String

  @JsName("ObjectTypeQuery30")
  public var Thirty: String

  @JsName("ObjectTypeQuery31")
  public var ThirtyOne: String

  @JsName("ObjectTypeQuery32")
  public var ThirtyTwo: String

  @JsName("ObjectTypeQuery_MAX")
  public var Max: String

  @JsName("EObjectTypeQuery_MAX")
  public var _Max: String
}

@JsName("ETraceTypeQuery")
public external object TraceTypeQuery {
  @JsName("TraceTypeQuery1")
  public var One: String

  @JsName("TraceTypeQuery2")
  public var Two: String

  @JsName("TraceTypeQuery3")
  public var Three: String

  @JsName("TraceTypeQuery4")
  public var Four: String

  @JsName("TraceTypeQuery5")
  public var Five: String

  @JsName("TraceTypeQuery6")
  public var Six: String

  @JsName("TraceTypeQuery7")
  public var Seven: String

  @JsName("TraceTypeQuery8")
  public var Eight: String

  @JsName("TraceTypeQuery9")
  public var Nine: String

  @JsName("TraceTypeQuery10")
  public var Ten: String

  @JsName("TraceTypeQuery11")
  public var Eleven: String

  @JsName("TraceTypeQuery12")
  public var Twelve: String

  @JsName("TraceTypeQuery13")
  public var Thirteen: String

  @JsName("TraceTypeQuery14")
  public var Fourteen: String

  @JsName("TraceTypeQuery15")
  public var Fifteen: String

  @JsName("TraceTypeQuery16")
  public var Sixteen: String

  @JsName("TraceTypeQuery17")
  public var Seventeen: String

  @JsName("TraceTypeQuery18")
  public var Eighteen: String

  @JsName("TraceTypeQuery19")
  public var Nineteen: String

  @JsName("TraceTypeQuery20")
  public var Twenty: String

  @JsName("TraceTypeQuery21")
  public var TwentyOne: String

  @JsName("TraceTypeQuery22")
  public var TwentyTwo: String

  @JsName("TraceTypeQuery23")
  public var TwentyThree: String

  @JsName("TraceTypeQuery24")
  public var TwentyFour: String

  @JsName("TraceTypeQuery25")
  public var TwentyFive: String

  @JsName("TraceTypeQuery26")
  public var TwentySix: String

  @JsName("TraceTypeQuery27")
  public var TwentySeven: String

  @JsName("TraceTypeQuery28")
  public var TwentyEight: String

  @JsName("TraceTypeQuery29")
  public var TwentyNine: String

  @JsName("TraceTypeQuery30")
  public var Thirty: String

  @JsName("TraceTypeQuery31")
  public var ThirtyOne: String

  @JsName("TraceTypeQuery32")
  public var ThirtyTwo: String

  @JsName("TraceTypeQuery_MAX")
  public var Max: String

  @JsName("ETraceTypeQuery_MAX")
  public var _Max: String
}

public open external class UpdateLevelStreamingLevelStatus {
  @JsName("PackageName")
  public open var packageName: String

  @JsName("LODIndex")
  public open var lodIndex: Number

  @JsName("bNewShouldBeLoaded")
  public open var newShouldBeLoaded: Boolean

  @JsName("bNewShouldBeVisible")
  public open var newShouldBeVisible: Boolean

  @JsName("bNewShouldBlockOnLoad")
  public open var newShouldBlockOnLoad: Boolean

  public open fun clone(): UpdateLevelStreamingLevelStatus

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UpdateLevelStreamingLevelStatus

    @JsName("C")
    public fun copy(other: Any): UpdateLevelStreamingLevelStatus
  }
}

@JsName("ETravelType")
public external object TravelType {
  @JsName("TRAVEL_Absolute")
  public var Absolute: String

  @JsName("TRAVEL_Partial")
  public var Partial: String

  @JsName("TRAVEL_Relative")
  public var Relative: String

  @JsName("TRAVEL_MAX")
  public var Max: String
}

public open external class ForceFeedbackParameters {
  @JsName("Tag")
  public open var tag: String

  @JsName("bLooping")
  public open var looping: Boolean

  @JsName("bIgnoreTimeDilation")
  public open var ignoreTimeDilation: Boolean

  @JsName("bPlayWhilePaused")
  public open var playWhilePaused: Boolean

  public open fun clone(): ForceFeedbackParameters

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ForceFeedbackParameters

    @JsName("C")
    public fun copy(other: Any): ForceFeedbackParameters
  }
}

public open external class LocalPlayerSubsystem(
  outer: UObject,
) : Subsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalPlayerSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalPlayerSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalPlayerSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalPlayerSubsystem

    @JsName("C")
    public fun copy(other: UObject): LocalPlayerSubsystem

    @JsName("C")
    public fun copy(other: Any): LocalPlayerSubsystem
  }
}

@JsName("EMouseLockMode")
public external object MouseLockMode {
  public var DoNotLock: String

  public var LockOnCapture: String

  public var LockAlways: String

  public var LockInFullscreen: String

  @JsName("EMouseLockMode_MAX")
  public var Max: String
}

@JsName("T$271")
public external interface Object271 {
  @JsName("ScreenLocation")
  public var screenLocation: Vector2d

  @JsName("$")
  public var value: Boolean
}

@JsName("T$272")
public external interface Object272 {
  @JsName("SizeX")
  public var sizeX: Number

  @JsName("SizeY")
  public var sizeY: Number
}

@JsName("T$273")
public external interface Object273 {
  @JsName("LocationX")
  public var locationX: Number

  @JsName("LocationY")
  public var locationY: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$274")
public external interface Object274 {
  @JsName("Tilt")
  public var tilt: Vector

  @JsName("RotationRate")
  public var rotationRate: Vector

  @JsName("Gravity")
  public var gravity: Vector

  @JsName("Acceleration")
  public var acceleration: Vector
}

@JsName("T$275")
public external interface Object275 {
  @JsName("HitResult")
  public var hitResult: HitResult

  @JsName("$")
  public var value: Boolean
}

@JsName("T$276")
public external interface Object276 {
  @JsName("WorldLocation")
  public var worldLocation: Vector

  @JsName("WorldDirection")
  public var worldDirection: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$277")
public external interface Object277 {
  @JsName("OutPPSettings")
  public var outPpSettings: PostProcessSettings

  @JsName("OutPPBlendWeight")
  public var outPpBlendWeight: Number

  @JsName("$")
  public var value: Boolean
}

@JsName("T$278")
public external interface Object278 {
  @JsName("WorldPosition")
  public var worldPosition: Vector

  @JsName("WorldDirection")
  public var worldDirection: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$279")
public external interface Object279 {
  @JsName("ScreenPosition")
  public var screenPosition: Vector2d

  @JsName("$")
  public var value: Boolean
}

public open external class PlayerController(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Controller {
  @JsName("Player")
  public open var player: Player

  @JsName("AcknowledgedPawn")
  public open var acknowledgedPawn: Pawn

  @JsName("ControllingDirTrackInst")
  public open var controllingDirTrackInst: InterpTrackInstDirector

  @JsName("MyHUD")
  public open var myHud: HUD

  @JsName("PlayerCameraManager")
  public open var playerCameraManager: PlayerCameraManager

  @JsName("PlayerCameraManagerClass")
  public open var playerCameraManagerClass: UnrealEngineClass

  @JsName("bAutoManageActiveCameraTarget")
  public open var autoManageActiveCameraTarget: Boolean

  @JsName("TargetViewRotation")
  public open var targetViewRotation: Rotator

  @JsName("SmoothTargetViewRotationSpeed")
  public open var smoothTargetViewRotationSpeed: Number

  @JsName("HiddenActors")
  public open var hiddenActors: Array<Actor>

  @JsName("HiddenPrimitiveComponents")
  public open var hiddenPrimitiveComponents: Array<Any>

  @JsName("LastSpectatorStateSynchTime")
  public open var lastSpectatorStateSynchTime: Number

  @JsName("LastSpectatorSyncLocation")
  public open var lastSpectatorSyncLocation: Vector

  @JsName("LastSpectatorSyncRotation")
  public open var lastSpectatorSyncRotation: Rotator

  @JsName("ClientCap")
  public open var clientCap: Number

  @JsName("CheatManager")
  public open var cheatManager: CheatManager

  @JsName("CheatClass")
  public open var cheatClass: UnrealEngineClass

  @JsName("PlayerInput")
  public open var playerInput: PlayerInput

  @JsName("ActiveForceFeedbackEffects")
  public open var activeForceFeedbackEffects: Array<ActiveForceFeedbackEffect>

  @JsName("bPlayerIsWaiting")
  public open var playerIsWaiting: Boolean

  @JsName("NetPlayerIndex")
  public open var netPlayerIndex: Number

  @JsName("PendingSwapConnection")
  public open var pendingSwapConnection: NetConnection

  @JsName("NetConnection")
  public open var netConnection: NetConnection

  @JsName("InputYawScale")
  public open var inputYawScale: Number

  @JsName("InputPitchScale")
  public open var inputPitchScale: Number

  @JsName("InputRollScale")
  public open var inputRollScale: Number

  @JsName("bShowMouseCursor")
  public open var showMouseCursor: Boolean

  @JsName("bEnableClickEvents")
  public open var enableClickEvents: Boolean

  @JsName("bEnableTouchEvents")
  public open var enableTouchEvents: Boolean

  @JsName("bEnableMouseOverEvents")
  public open var enableMouseOverEvents: Boolean

  @JsName("bEnableTouchOverEvents")
  public open var enableTouchOverEvents: Boolean

  @JsName("bForceFeedbackEnabled")
  public open var forceFeedbackEnabled: Boolean

  @JsName("bEnableStreamingSource")
  public open var enableStreamingSource: Boolean

  @JsName("bStreamingSourceShouldActivate")
  public open var streamingSourceShouldActivate: Boolean

  @JsName("bStreamingSourceShouldBlockOnSlowStreaming")
  public open var streamingSourceShouldBlockOnSlowStreaming: Boolean

  @JsName("ForceFeedbackScale")
  public open var forceFeedbackScale: Number

  @JsName("ClickEventKeys")
  public open var clickEventKeys: Array<Key>

  @JsName("DefaultMouseCursor")
  public open var defaultMouseCursor: String

  @JsName("CurrentMouseCursor")
  public open var currentMouseCursor: String

  @JsName("DefaultClickTraceChannel")
  public open var defaultClickTraceChannel: String

  @JsName("CurrentClickTraceChannel")
  public open var currentClickTraceChannel: String

  @JsName("HitResultTraceDistance")
  public open var hitResultTraceDistance: Number

  @JsName("SeamlessTravelCount")
  public open var seamlessTravelCount: Any

  @JsName("LastCompletedSeamlessTravelCount")
  public open var lastCompletedSeamlessTravelCount: Any

  @JsName("InactiveStateInputComponent")
  public open var inactiveStateInputComponent: InputComponent

  @JsName("bShouldPerformFullTickWhenPaused")
  public open var shouldPerformFullTickWhenPaused: Boolean

  @JsName("CurrentTouchInterface")
  public open var currentTouchInterface: TouchInterface

  @JsName("SpectatorPawn")
  public open var spectatorPawn: SpectatorPawn

  @JsName("bIsLocalPlayerController")
  public open var isLocalPlayerController: Boolean

  @JsName("SpawnLocation")
  public open var spawnLocation: Vector

  @JsName("WasInputKeyJustReleased")
  public open fun wasInputKeyJustReleased(key: Key): Boolean

  @JsName("WasInputKeyJustPressed")
  public open fun wasInputKeyJustPressed(key: Key): Boolean

  @JsName("ToggleSpeaking")
  public open fun toggleSpeaking(inSpeaking: Boolean): Unit

  @JsName("TestServerLevelVisibilityChange")
  public open fun testServerLevelVisibilityChange(packageName: String, filename: String): Unit

  @JsName("SwitchLevel")
  public open fun switchLevel(URL: String): Unit

  @JsName("StreamingSourceShouldBlockOnSlowStreaming")
  public open fun streamingSourceShouldBlockOnSlowStreaming(): Boolean

  @JsName("StreamingSourceShouldActivate")
  public open fun streamingSourceShouldActivate(): Boolean

  @JsName("StopHapticEffect")
  public open fun stopHapticEffect(hand: String): Unit

  @JsName("StartFire")
  public open fun startFire(fireModeNum: Number): Unit

  @JsName("SetVirtualJoystickVisibility")
  public open fun setVirtualJoystickVisibility(visible: Boolean): Unit

  @JsName("SetViewTargetWithBlend")
  public open fun setViewTargetWithBlend(
    newViewTarget: Actor,
    blendTime: Number,
    blendFunc: String,
    blendExp: Number,
    lockOutgoing: Boolean,
  ): Unit

  @JsName("SetName")
  public open fun setName(s: String): Unit

  @JsName("SetMouseLocation")
  public open fun setMouseLocation(x: Number, y: Number): Unit

  @JsName("SetMouseCursorWidget")
  public open fun setMouseCursorWidget(cursor: String, cursorWidget: UserWidget): Unit

  @JsName("SetHapticsByValue")
  public open fun setHapticsByValue(
    frequency: Number,
    amplitude: Number,
    hand: String,
  ): Unit

  @JsName("SetDisableHaptics")
  public open fun setDisableHaptics(newDisabled: Boolean): Unit

  @JsName("SetDeprecatedInputYawScale")
  public open fun setDeprecatedInputYawScale(newValue: Number): Unit

  @JsName("SetDeprecatedInputRollScale")
  public open fun setDeprecatedInputRollScale(newValue: Number): Unit

  @JsName("SetDeprecatedInputPitchScale")
  public open fun setDeprecatedInputPitchScale(newValue: Number): Unit

  @JsName("SetControllerLightColor")
  public open fun setControllerLightColor(color: Color): Unit

  @JsName("SetCinematicMode")
  public open fun setCinematicMode(
    inCinematicMode: Boolean,
    hidePlayer: Boolean,
    affectsHud: Boolean,
    affectsMovement: Boolean,
    affectsTurning: Boolean,
  ): Unit

  @JsName("SetAudioListenerOverride")
  public open fun setAudioListenerOverride(
    attachToComponent: SceneComponent,
    location: Vector,
    rotation: Rotator,
  ): Unit

  @JsName("SetAudioListenerAttenuationOverride")
  public open fun setAudioListenerAttenuationOverride(attachToComponent: SceneComponent,
      attenuationLocationOVerride: Vector): Unit

  @JsName("ServerViewSelf")
  public open fun serverViewSelf(transitionParams: ViewTargetTransitionParams): Unit

  @JsName("ServerViewPrevPlayer")
  public open fun serverViewPrevPlayer(): Unit

  @JsName("ServerViewNextPlayer")
  public open fun serverViewNextPlayer(): Unit

  @JsName("ServerVerifyViewTarget")
  public open fun serverVerifyViewTarget(): Unit

  @JsName("ServerUpdateMultipleLevelsVisibility")
  public open
      fun serverUpdateMultipleLevelsVisibility(levelVisibilities: Array<UpdateLevelVisibilityLevelInfo>):
      Unit

  @JsName("ServerUpdateLevelVisibility")
  public open fun serverUpdateLevelVisibility(levelVisibility: UpdateLevelVisibilityLevelInfo): Unit

  @JsName("ServerUpdateCamera")
  public open fun serverUpdateCamera(camLoc: VectorNetQuantize, camPitchAndYaw: Number): Unit

  @JsName("ServerUnmutePlayer")
  public open fun serverUnmutePlayer(playerId: UniqueNetIdRepl): Unit

  @JsName("ServerUnblockPlayer")
  public open fun serverUnblockPlayer(playerId: UniqueNetIdRepl): Unit

  @JsName("ServerToggleAILogging")
  public open fun serverToggleAiLogging(): Unit

  @JsName("ServerShortTimeout")
  public open fun serverShortTimeout(): Unit

  @JsName("ServerSetSpectatorWaiting")
  public open fun serverSetSpectatorWaiting(waiting: Boolean): Unit

  @JsName("ServerSetSpectatorLocation")
  public open fun serverSetSpectatorLocation(newLoc: Vector, newRot: Rotator): Unit

  @JsName("ServerRestartPlayer")
  public open fun serverRestartPlayer(): Unit

  @JsName("ServerRecvClientInputFrame")
  public open fun serverRecvClientInputFrame(recvClientInputFrame: Number, data: Array<Number>):
      Unit

  @JsName("ServerPause")
  public open fun serverPause(): Unit

  @JsName("ServerNotifyLoadedWorld")
  public open fun serverNotifyLoadedWorld(worldPackageName: String): Unit

  @JsName("ServerMutePlayer")
  public open fun serverMutePlayer(playerId: UniqueNetIdRepl): Unit

  @JsName("ServerExecRPC")
  public open fun serverExecRpc(msg: String): Unit

  @JsName("ServerExec")
  public open fun serverExec(msg: String): Unit

  @JsName("ServerCheckClientPossessionReliable")
  public open fun serverCheckClientPossessionReliable(): Unit

  @JsName("ServerCheckClientPossession")
  public open fun serverCheckClientPossession(): Unit

  @JsName("ServerChangeName")
  public open fun serverChangeName(s: String): Unit

  @JsName("ServerCamera")
  public open fun serverCamera(newMode: String): Unit

  @JsName("ServerBlockPlayer")
  public open fun serverBlockPlayer(playerId: UniqueNetIdRepl): Unit

  @JsName("ServerAcknowledgePossession")
  public open fun serverAcknowledgePossession(p: Pawn): Unit

  @JsName("SendToConsole")
  public open fun sendToConsole(command: String): Unit

  @JsName("RestartLevel")
  public open fun restartLevel(): Unit

  @JsName("ResetControllerLightColor")
  public open fun resetControllerLightColor(): Unit

  @JsName("ProjectWorldLocationToScreen")
  public open fun projectWorldLocationToScreen(
    worldLocation: Vector,
    screenLocation: Vector2d,
    playerViewportRelative: Boolean,
  ): Object271

  @JsName("PlayHapticEffect")
  public open fun playHapticEffect(
    hapticEffect: HapticFeedbackEffectBase,
    hand: String,
    scale: Number,
    loop: Boolean,
  ): Unit

  @JsName("PlayDynamicForceFeedback")
  public open fun playDynamicForceFeedback(
    intensity: Number,
    duration: Number,
    affectsLeftLarge: Boolean,
    affectsLeftSmall: Boolean,
    affectsRightLarge: Boolean,
    affectsRightSmall: Boolean,
    action: String,
    latentInfo: LatentActionInfo,
  ): Unit

  @JsName("Pause")
  public open fun pause(): Unit

  @JsName("OnServerStartedVisualLogger")
  public open fun onServerStartedVisualLogger(isLogging: Boolean): Unit

  @JsName("LocalTravel")
  public open fun localTravel(URL: String): Unit

  @JsName("K2_ClientPlayForceFeedback")
  public open fun k2ClientPlayForceFeedback(
    forceFeedbackEffect: ForceFeedbackEffect,
    tag: String,
    looping: Boolean,
    ignoreTimeDilation: Boolean,
    playWhilePaused: Boolean,
  ): Unit

  @JsName("IsStreamingSourceEnabled")
  public open fun isStreamingSourceEnabled(): Boolean

  @JsName("IsInputKeyDown")
  public open fun isInputKeyDown(key: Key): Boolean

  @JsName("GetViewportSize")
  public open fun getViewportSize(sizeX: Number, sizeY: Number): Object272

  @JsName("GetSpectatorPawn")
  public open fun getSpectatorPawn(): SpectatorPawn

  @JsName("GetMousePosition")
  public open fun getMousePosition(locationX: Number, locationY: Number): Object273

  @JsName("GetInputVectorKeyState")
  public open fun getInputVectorKeyState(key: Key): Vector

  @JsName("GetInputTouchState")
  public open fun getInputTouchState(
    fingerIndex: String,
    locationX: Number,
    locationY: Number,
    isCurrentlyPressed: Boolean,
  ): Object255

  @JsName("GetInputMouseDelta")
  public open fun getInputMouseDelta(deltaX: Number, deltaY: Number): Object256

  @JsName("GetInputMotionState")
  public open fun getInputMotionState(
    tilt: Vector,
    rotationRate: Vector,
    gravity: Vector,
    acceleration: Vector,
  ): Object274

  @JsName("GetInputKeyTimeDown")
  public open fun getInputKeyTimeDown(key: Key): Number

  @JsName("GetInputAnalogStickState")
  public open fun getInputAnalogStickState(
    whichStick: String,
    stickX: Number,
    stickY: Number,
  ): Object257

  @JsName("GetInputAnalogKeyState")
  public open fun getInputAnalogKeyState(key: Key): Number

  @JsName("GetHUD")
  public open fun getHud(): HUD

  @JsName("GetHitResultUnderFingerForObjects")
  public open fun getHitResultUnderFingerForObjects(
    fingerIndex: String,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    hitResult: HitResult,
  ): Object275

  @JsName("GetHitResultUnderFingerByChannel")
  public open fun getHitResultUnderFingerByChannel(
    fingerIndex: String,
    traceChannel: String,
    traceComplex: Boolean,
    hitResult: HitResult,
  ): Object275

  @JsName("GetHitResultUnderFinger")
  public open fun getHitResultUnderFinger(
    fingerIndex: String,
    traceChannel: String,
    traceComplex: Boolean,
    hitResult: HitResult,
  ): Object275

  @JsName("GetHitResultUnderCursorForObjects")
  public open fun getHitResultUnderCursorForObjects(
    objectTypes: Array<String>,
    traceComplex: Boolean,
    hitResult: HitResult,
  ): Object275

  @JsName("GetHitResultUnderCursorByChannel")
  public open fun getHitResultUnderCursorByChannel(
    traceChannel: String,
    traceComplex: Boolean,
    hitResult: HitResult,
  ): Object275

  @JsName("GetHitResultUnderCursor")
  public open fun getHitResultUnderCursor(
    traceChannel: String,
    traceComplex: Boolean,
    hitResult: HitResult,
  ): Object275

  @JsName("GetFocalLocation")
  public open fun getFocalLocation(): Vector

  @JsName("GetDeprecatedInputYawScale")
  public open fun getDeprecatedInputYawScale(): Number

  @JsName("GetDeprecatedInputRollScale")
  public open fun getDeprecatedInputRollScale(): Number

  @JsName("GetDeprecatedInputPitchScale")
  public open fun getDeprecatedInputPitchScale(): Number

  public open fun FOV(newFov: Number): Unit

  @JsName("EnableCheats")
  public open fun enableCheats(): Unit

  @JsName("DeprojectScreenPositionToWorld")
  public open fun deprojectScreenPositionToWorld(
    screenX: Number,
    screenY: Number,
    worldLocation: Vector,
    worldDirection: Vector,
  ): Object276

  @JsName("DeprojectMousePositionToWorld")
  public open fun deprojectMousePositionToWorld(worldLocation: Vector, worldDirection: Vector):
      Object276

  @JsName("ConsoleKey")
  public open fun consoleKey(key: Key): Unit

  @JsName("ClientWasKicked")
  public open fun clientWasKicked(kickReason: String): Unit

  @JsName("ClientVoiceHandshakeComplete")
  public open fun clientVoiceHandshakeComplete(): Unit

  @JsName("ClientUpdateMultipleLevelsStreamingStatus")
  public open
      fun clientUpdateMultipleLevelsStreamingStatus(levelStatuses: Array<UpdateLevelStreamingLevelStatus>):
      Unit

  @JsName("ClientUpdateLevelStreamingStatus")
  public open fun clientUpdateLevelStreamingStatus(
    packageName: String,
    newShouldBeLoaded: Boolean,
    newShouldBeVisible: Boolean,
    newShouldBlockOnLoad: Boolean,
    lodIndex: Number,
  ): Unit

  @JsName("ClientUnmutePlayers")
  public open fun clientUnmutePlayers(playerIds: Array<UniqueNetIdRepl>): Unit

  @JsName("ClientUnmutePlayer")
  public open fun clientUnmutePlayer(playerId: UniqueNetIdRepl): Unit

  @JsName("ClientTravelInternal")
  public open fun clientTravelInternal(
    URL: String,
    travelType: String,
    seamless: Boolean,
    mapPackageGuid: Guid,
  ): Unit

  @JsName("ClientTravel")
  public open fun clientTravel(
    URL: String,
    travelType: String,
    seamless: Boolean,
    mapPackageGuid: Guid,
  ): Unit

  @JsName("ClientTeamMessage")
  public open fun clientTeamMessage(
    senderPlayerState: PlayerState,
    s: String,
    type: String,
    msgLifeTime: Number,
  ): Unit

  @JsName("ClientStopForceFeedback")
  public open fun clientStopForceFeedback(forceFeedbackEffect: ForceFeedbackEffect, tag: String):
      Unit

  @JsName("ClientStopCameraShakesFromSource")
  public open fun clientStopCameraShakesFromSource(sourceComponent: CameraShakeSourceComponent,
      immediately: Boolean): Unit

  @JsName("ClientStopCameraShake")
  public open fun clientStopCameraShake(shake: UnrealEngineClass, immediately: Boolean): Unit

  @JsName("ClientStopCameraAnim")
  public open fun clientStopCameraAnim(animToStop: CameraAnim): Unit

  @JsName("ClientStartOnlineSession")
  public open fun clientStartOnlineSession(): Unit

  @JsName("ClientStartCameraShakeFromSource")
  public open fun clientStartCameraShakeFromSource(shake: UnrealEngineClass,
      sourceComponent: CameraShakeSourceComponent): Unit

  @JsName("ClientStartCameraShake")
  public open fun clientStartCameraShake(
    shake: UnrealEngineClass,
    scale: Number,
    playSpace: String,
    userPlaySpaceRot: Rotator,
  ): Unit

  @JsName("ClientSpawnGenericCameraLensEffect")
  public open fun clientSpawnGenericCameraLensEffect(lensEffectEmitterClass: UnrealEngineClass):
      Unit

  @JsName("ClientSpawnCameraLensEffect")
  public open fun clientSpawnCameraLensEffect(lensEffectEmitterClass: UnrealEngineClass): Unit

  @JsName("ClientSetViewTarget")
  public open fun clientSetViewTarget(a: Actor, transitionParams: ViewTargetTransitionParams): Unit

  @JsName("ClientSetSpectatorWaiting")
  public open fun clientSetSpectatorWaiting(waiting: Boolean): Unit

  @JsName("ClientSetHUD")
  public open fun clientSetHud(newHudClass: UnrealEngineClass): Unit

  @JsName("ClientSetForceMipLevelsToBeResident")
  public open fun clientSetForceMipLevelsToBeResident(
    material: MaterialInterface,
    forceDuration: Number,
    cinematicTextureGroups: Number,
  ): Unit

  @JsName("ClientSetCinematicMode")
  public open fun clientSetCinematicMode(
    inCinematicMode: Boolean,
    affectsMovement: Boolean,
    affectsTurning: Boolean,
    affectsHud: Boolean,
  ): Unit

  @JsName("ClientSetCameraMode")
  public open fun clientSetCameraMode(newCamMode: String): Unit

  @JsName("ClientSetCameraFade")
  public open fun clientSetCameraFade(
    enableFading: Boolean,
    fadeColor: Color,
    fadeAlpha: Vector2d,
    fadeTime: Number,
    fadeAudio: Boolean,
    holdWhenFinished: Boolean,
  ): Unit

  @JsName("ClientSetBlockOnAsyncLoading")
  public open fun clientSetBlockOnAsyncLoading(): Unit

  @JsName("ClientReturnToMainMenuWithTextReason")
  public open fun clientReturnToMainMenuWithTextReason(returnReason: String): Unit

  @JsName("ClientReturnToMainMenu")
  public open fun clientReturnToMainMenu(returnReason: String): Unit

  @JsName("ClientRetryClientRestart")
  public open fun clientRetryClientRestart(newPawn: Pawn): Unit

  @JsName("ClientRestart")
  public open fun clientRestart(newPawn: Pawn): Unit

  @JsName("ClientReset")
  public open fun clientReset(): Unit

  @JsName("ClientRepObjRef")
  public open fun clientRepObjRef(uObject: UObject): Unit

  @JsName("ClientRecvServerAckFrameDebug")
  public open fun clientRecvServerAckFrameDebug(numBuffered: Number, targetNumBufferedCmds: Number):
      Unit

  @JsName("ClientRecvServerAckFrame")
  public open fun clientRecvServerAckFrame(
    lastProcessedInputFrame: Number,
    recvServerFrameNumber: Number,
    timeDilation: Any,
  ): Unit

  @JsName("ClientReceiveLocalizedMessage")
  public open fun clientReceiveLocalizedMessage(
    message: UnrealEngineClass,
    SWITCH: Number,
    relatedPlayerState1: PlayerState,
    relatedPlayerState2: PlayerState,
    optionalObject: UObject,
  ): Unit

  @JsName("ClientPrestreamTextures")
  public open fun clientPrestreamTextures(
    forcedActor: Actor,
    forceDuration: Number,
    enableStreaming: Boolean,
    cinematicTextureGroups: Number,
  ): Unit

  @JsName("ClientPrepareMapChange")
  public open fun clientPrepareMapChange(
    levelName: String,
    first: Boolean,
    last: Boolean,
  ): Unit

  @JsName("ClientPlaySoundAtLocation")
  public open fun clientPlaySoundAtLocation(
    sound: SoundBase,
    location: Vector,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
  ): Unit

  @JsName("ClientPlaySound")
  public open fun clientPlaySound(
    sound: SoundBase,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
  ): Unit

  @JsName("ClientPlayForceFeedback_Internal")
  public open fun clientPlayForceFeedbackInternal(forceFeedbackEffect: ForceFeedbackEffect,
      params: ForceFeedbackParameters): Unit

  @JsName("ClientPlayCameraAnim")
  public open fun clientPlayCameraAnim(
    animToPlay: CameraAnim,
    scale: Number,
    rate: Number,
    blendInTime: Number,
    blendOutTime: Number,
    loop: Boolean,
    randomStartTime: Boolean,
    space: String,
    customPlaySpace: Rotator,
  ): Unit

  @JsName("ClientMutePlayer")
  public open fun clientMutePlayer(playerId: UniqueNetIdRepl): Unit

  @JsName("ClientMessage")
  public open fun clientMessage(
    s: String,
    type: String,
    msgLifeTime: Number,
  ): Unit

  @JsName("ClientIgnoreMoveInput")
  public open fun clientIgnoreMoveInput(ignore: Boolean): Unit

  @JsName("ClientIgnoreLookInput")
  public open fun clientIgnoreLookInput(ignore: Boolean): Unit

  @JsName("ClientGotoState")
  public open fun clientGotoState(newState: String): Unit

  @JsName("ClientGameEnded")
  public open fun clientGameEnded(endGameFocus: Actor, isWinner: Boolean): Unit

  @JsName("ClientForceGarbageCollection")
  public open fun clientForceGarbageCollection(): Unit

  @JsName("ClientFlushLevelStreaming")
  public open fun clientFlushLevelStreaming(): Unit

  @JsName("ClientEndOnlineSession")
  public open fun clientEndOnlineSession(): Unit

  @JsName("ClientEnableNetworkVoice")
  public open fun clientEnableNetworkVoice(enable: Boolean): Unit

  @JsName("ClientCommitMapChange")
  public open fun clientCommitMapChange(): Unit

  @JsName("ClientClearCameraLensEffects")
  public open fun clientClearCameraLensEffects(): Unit

  @JsName("ClientCapBandwidth")
  public open fun clientCapBandwidth(cap: Number): Unit

  @JsName("ClientCancelPendingMapChange")
  public open fun clientCancelPendingMapChange(): Unit

  @JsName("ClientAddTextureStreamingLoc")
  public open fun clientAddTextureStreamingLoc(
    inLoc: Vector,
    duration: Number,
    overrideLocation: Boolean,
  ): Unit

  @JsName("ClearAudioListenerOverride")
  public open fun clearAudioListenerOverride(): Unit

  @JsName("ClearAudioListenerAttenuationOverride")
  public open fun clearAudioListenerAttenuationOverride(): Unit

  @JsName("CanRestartPlayer")
  public open fun canRestartPlayer(): Boolean

  @JsName("Camera")
  public open fun camera(newMode: String): Unit

  @JsName("AddYawInput")
  public open fun addYawInput(`val`: Number): Unit

  @JsName("AddRollInput")
  public open fun addRollInput(`val`: Number): Unit

  @JsName("AddPitchInput")
  public open fun addPitchInput(`val`: Number): Unit

  @JsName("ActivateTouchInterface")
  public open fun activateTouchInterface(newTouchInterface: TouchInterface): Unit

  @JsName("GetCameraCachePOV")
  public open fun getCameraCachePov(): MinimalViewInfo

  @JsName("GetLastFrameCameraCachePOV")
  public open fun getLastFrameCameraCachePov(): MinimalViewInfo

  @JsName("GetPostProcessBlendCache")
  public open fun getPostProcessBlendCache(
    ppIndex: Number,
    outPpSettings: PostProcessSettings,
    outPpBlendWeight: Number,
  ): Object277

  @JsName("WriteLeaderboardInteger")
  public open fun writeLeaderboardInteger(statName: String, statValue: Number): Boolean

  @JsName("GetLocalPlayerSubSystemFromPlayerController")
  public open fun getLocalPlayerSubSystemFromPlayerController(`class`: UnrealEngineClass):
      LocalPlayerSubsystem

  @JsName("IsLoggedIn")
  public open fun isLoggedIn(): Boolean

  @JsName("ShowPlatformSpecificAchievementsScreen")
  public open fun showPlatformSpecificAchievementsScreen(): Unit

  @JsName("DeprojectScreenToWorld")
  public open fun deprojectScreenToWorld(
    screenPosition: Vector2d,
    worldPosition: Vector,
    worldDirection: Vector,
  ): Object278

  @JsName("GetPlayerControllerID")
  public open fun getPlayerControllerId(): Number

  @JsName("ProjectWorldToScreen")
  public open fun projectWorldToScreen(
    worldPosition: Vector,
    screenPosition: Vector2d,
    playerViewportRelative: Boolean,
  ): Object279

  @JsName("RemovePlayer")
  public open fun removePlayer(destroyPawn: Boolean): Unit

  @JsName("SetPlayerControllerID")
  public open fun setPlayerControllerId(controllerId: Number): Unit

  @JsName("GetMousePositionScaledByDPI")
  public open fun getMousePositionScaledByDpi(locationX: Number, locationY: Number): Object273

  @JsName("GetPlayerScreenWidgetGeometry")
  public open fun getPlayerScreenWidgetGeometry(): Geometry

  @JsName("ProjectWorldLocationToWidgetPosition")
  public open fun projectWorldLocationToWidgetPosition(
    worldLocation: Vector,
    screenPosition: Vector2d,
    playerViewportRelative: Boolean,
  ): Object279

  @JsName("SetInputMode_GameAndUIEx")
  public open fun setInputModeGameAndUiEx(
    inWidgetToFocus: Widget,
    inMouseLockMode: String,
    hideCursorDuringCapture: Boolean,
  ): Unit

  @JsName("SetInputMode_GameOnly")
  public open fun setInputModeGameOnly(): Unit

  @JsName("SetInputMode_UIOnlyEx")
  public open fun setInputModeUiOnlyEx(inWidgetToFocus: Widget, inMouseLockMode: String): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlayerController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlayerController

    @JsName("C")
    public fun copy(other: UObject): PlayerController

    @JsName("C")
    public fun copy(other: Any): PlayerController

    @JsName("GetCameraCachePOV")
    public fun getCameraCachePov(playerController: PlayerController): MinimalViewInfo

    @JsName("GetLastFrameCameraCachePOV")
    public fun getLastFrameCameraCachePov(playerController: PlayerController): MinimalViewInfo

    @JsName("GetPostProcessBlendCache")
    public fun getPostProcessBlendCache(
      playerController: PlayerController,
      ppIndex: Number,
      outPpSettings: PostProcessSettings,
      outPpBlendWeight: Number,
    ): Object277

    @JsName("WriteLeaderboardInteger")
    public fun writeLeaderboardInteger(
      playerController: PlayerController,
      statName: String,
      statValue: Number,
    ): Boolean

    @JsName("GetLocalPlayerSubSystemFromPlayerController")
    public fun getLocalPlayerSubSystemFromPlayerController(playerController: PlayerController,
        `class`: UnrealEngineClass): LocalPlayerSubsystem

    @JsName("IsLoggedIn")
    public fun isLoggedIn(specificPlayer: PlayerController): Boolean

    @JsName("ShowPlatformSpecificAchievementsScreen")
    public fun showPlatformSpecificAchievementsScreen(specificPlayer: PlayerController): Unit

    @JsName("DeprojectScreenToWorld")
    public fun deprojectScreenToWorld(
      player: PlayerController,
      screenPosition: Vector2d,
      worldPosition: Vector,
      worldDirection: Vector,
    ): Object278

    @JsName("GetPlayerControllerID")
    public fun getPlayerControllerId(player: PlayerController): Number

    @JsName("ProjectWorldToScreen")
    public fun projectWorldToScreen(
      player: PlayerController,
      worldPosition: Vector,
      screenPosition: Vector2d,
      playerViewportRelative: Boolean,
    ): Object279

    @JsName("RemovePlayer")
    public fun removePlayer(player: PlayerController, destroyPawn: Boolean): Unit

    @JsName("SetPlayerControllerID")
    public fun setPlayerControllerId(player: PlayerController, controllerId: Number): Unit

    @JsName("GetMousePositionScaledByDPI")
    public fun getMousePositionScaledByDpi(
      player: PlayerController,
      locationX: Number,
      locationY: Number,
    ): Object273

    @JsName("GetPlayerScreenWidgetGeometry")
    public fun getPlayerScreenWidgetGeometry(playerController: PlayerController): Geometry

    @JsName("ProjectWorldLocationToWidgetPosition")
    public fun projectWorldLocationToWidgetPosition(
      playerController: PlayerController,
      worldLocation: Vector,
      screenPosition: Vector2d,
      playerViewportRelative: Boolean,
    ): Object279

    @JsName("SetInputMode_GameAndUIEx")
    public fun setInputModeGameAndUiEx(
      playerController: PlayerController,
      inWidgetToFocus: Widget,
      inMouseLockMode: String,
      hideCursorDuringCapture: Boolean,
    ): Unit

    @JsName("SetInputMode_GameOnly")
    public fun setInputModeGameOnly(playerController: PlayerController): Unit

    @JsName("SetInputMode_UIOnlyEx")
    public fun setInputModeUiOnlyEx(
      playerController: PlayerController,
      inWidgetToFocus: Widget,
      inMouseLockMode: String,
    ): Unit
  }
}

public open external class ScriptViewportClient(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScriptViewportClient

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScriptViewportClient

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScriptViewportClient

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScriptViewportClient

    @JsName("C")
    public fun copy(other: UObject): ScriptViewportClient

    @JsName("C")
    public fun copy(other: Any): ScriptViewportClient
  }
}

public open external class DebugDisplayProperty {
  @JsName("Obj")
  public open var obj: UObject

  @JsName("WithinClass")
  public open var withinClass: UnrealEngineClass

  public open fun clone(): DebugDisplayProperty

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DebugDisplayProperty

    @JsName("C")
    public fun copy(other: Any): DebugDisplayProperty
  }
}

public open external class OnlineSession(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OnlineSession

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OnlineSession

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OnlineSession

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OnlineSession

    @JsName("C")
    public fun copy(other: UObject): OnlineSession

    @JsName("C")
    public fun copy(other: Any): OnlineSession
  }
}

@JsName("ETravelFailure")
public external object TravelFailure {
  public var NoLevel: String

  public var LoadMapFailure: String

  @JsName("InvalidURL")
  public var InvalidUrl: String

  public var PackageMissing: String

  public var PackageVersion: String

  public var NoDownload: String

  public var TravelFailure: String

  public var CheatCommands: String

  public var PendingNetGameCreateFailure: String

  public var CloudSaveFailure: String

  public var ServerTravelFailure: String

  public var ClientTravelFailure: String

  @JsName("ETravelFailure_MAX")
  public var Max: String
}

@JsName("ENetworkFailure")
public external object NetworkFailure {
  public var NetDriverAlreadyExists: String

  public var NetDriverCreateFailure: String

  public var NetDriverListenFailure: String

  public var ConnectionLost: String

  public var ConnectionTimeout: String

  public var FailureReceived: String

  public var OutdatedClient: String

  public var OutdatedServer: String

  public var PendingConnectionFailure: String

  public var NetGuidMismatch: String

  public var NetChecksumMismatch: String

  @JsName("ENetworkFailure_MAX")
  public var Max: String
}

public open external class GameInstance(
  outer: UObject,
) : UObject {
  @JsName("LocalPlayers")
  public open var localPlayers: Array<LocalPlayer>

  @JsName("OnlineSession")
  public open var onlineSession: OnlineSession

  @JsName("ReferencedObjects")
  public open var referencedObjects: Array<UObject>

  @JsName("OnPawnControllerChangedDelegates")
  public open var onPawnControllerChangedDelegates: UnrealEngineMulticastDelegate<(Pawn: Pawn,
      Controller: Controller) -> Unit>

  @JsName("ReceiveShutdown")
  public open fun receiveShutdown(): Unit

  @JsName("ReceiveInit")
  public open fun receiveInit(): Unit

  @JsName("HandleTravelError")
  public open fun handleTravelError(failureType: String): Unit

  @JsName("HandleNetworkError")
  public open fun handleNetworkError(failureType: String, isServer: Boolean): Unit

  @JsName("DebugRemovePlayer")
  public open fun debugRemovePlayer(controllerId: Number): Unit

  @JsName("DebugCreatePlayer")
  public open fun debugCreatePlayer(controllerId: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameInstance

    @JsName("C")
    public fun copy(other: UObject): GameInstance

    @JsName("C")
    public fun copy(other: Any): GameInstance
  }
}

public open external class GameViewportClient(
  outer: UObject,
) : ScriptViewportClient {
  @JsName("ViewportConsole")
  public open var viewportConsole: Console

  @JsName("DebugProperties")
  public open var debugProperties: Array<DebugDisplayProperty>

  @JsName("MaxSplitscreenPlayers")
  public open var maxSplitscreenPlayers: Number

  @JsName("World")
  public open var world: World

  @JsName("GameInstance")
  public open var gameInstance: GameInstance

  @JsName("SSSwapControllers")
  public open fun ssSwapControllers(): Unit

  @JsName("ShowTitleSafeArea")
  public open fun showTitleSafeArea(): Unit

  @JsName("SetConsoleTarget")
  public open fun setConsoleTarget(playerIndex: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameViewportClient

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameViewportClient

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameViewportClient

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameViewportClient

    @JsName("C")
    public fun copy(other: UObject): GameViewportClient

    @JsName("C")
    public fun copy(other: Any): GameViewportClient
  }
}

@JsName("EAspectRatioAxisConstraint")
public external object AspectRatioAxisConstraint {
  @JsName("AspectRatio_MaintainYFOV")
  public var MaintainYfov: String

  @JsName("AspectRatio_MaintainXFOV")
  public var MaintainXfov: String

  @JsName("AspectRatio_MajorAxisFOV")
  public var MajorAxisFov: String

  @JsName("AspectRatio_MAX")
  public var Max: String
}

public open external class LocalPlayer(
  outer: UObject,
) : Player {
  @JsName("ViewportClient")
  public open var viewportClient: GameViewportClient

  @JsName("AspectRatioAxisConstraint")
  public open var aspectRatioAxisConstraint: String

  @JsName("PendingLevelPlayerControllerClass")
  public open var pendingLevelPlayerControllerClass: UnrealEngineClass

  @JsName("bSentSplitJoin")
  public open var sentSplitJoin: Boolean

  @JsName("ControllerId")
  public open var controllerId: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalPlayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalPlayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalPlayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalPlayer

    @JsName("C")
    public fun copy(other: UObject): LocalPlayer

    @JsName("C")
    public fun copy(other: Any): LocalPlayer
  }
}

public open external class JavascriptSlateWidget {
  public open fun clone(): JavascriptSlateWidget

  @JsName("EditorAddModalWindow")
  public open fun editorAddModalWindow(): Unit

  @JsName("AddWindow")
  public open fun addWindow(showImmediately: Boolean): Unit

  @JsName("AddWindowAsNativeChild")
  public open fun addWindowAsNativeChild(rootWindow: JavascriptSlateWidget): Unit

  @JsName("ShowWindow")
  public open fun showWindow(): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptSlateWidget

    @JsName("C")
    public fun copy(other: Any): JavascriptSlateWidget

    @JsName("EditorAddModalWindow")
    public fun editorAddModalWindow(widget: JavascriptSlateWidget): Unit

    @JsName("AddWindow")
    public fun addWindow(newWindow: JavascriptSlateWidget, showImmediately: Boolean): Unit

    @JsName("AddWindowAsNativeChild")
    public fun addWindowAsNativeChild(newWindow: JavascriptSlateWidget,
        rootWindow: JavascriptSlateWidget): Unit

    @JsName("ShowWindow")
    public fun showWindow(newWindow: JavascriptSlateWidget): Unit

    @JsName("CreateLogListingWidget")
    public fun createLogListingWidget(inLogName: String): JavascriptSlateWidget

    @JsName("GetRootWindow")
    public fun getRootWindow(): JavascriptSlateWidget
  }
}

@JsName("EHorizontalAlignment")
public external object HorizontalAlignment {
  @JsName("HAlign_Fill")
  public var Fill: String

  @JsName("HAlign_Left")
  public var Left: String

  @JsName("HAlign_Center")
  public var Center: String

  @JsName("HAlign_Right")
  public var Right: String

  @JsName("HAlign_MAX")
  public var Max: String
}

@JsName("EVerticalAlignment")
public external object VerticalAlignment {
  @JsName("VAlign_Fill")
  public var Fill: String

  @JsName("VAlign_Top")
  public var Top: String

  @JsName("VAlign_Center")
  public var Center: String

  @JsName("VAlign_Bottom")
  public var Bottom: String

  @JsName("VAlign_MAX")
  public var Max: String
}

public open external class BorderSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BorderSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BorderSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BorderSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BorderSlot

    @JsName("C")
    public fun copy(other: UObject): BorderSlot

    @JsName("C")
    public fun copy(other: Any): BorderSlot
  }
}

public open external class AnchorData {
  @JsName("Offsets")
  public open var offsets: Margin

  @JsName("Anchors")
  public open var anchors: Anchors

  @JsName("Alignment")
  public open var alignment: Vector2d

  public open fun clone(): AnchorData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnchorData

    @JsName("C")
    public fun copy(other: Any): AnchorData
  }
}

public open external class CanvasPanelSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("LayoutData")
  public open var layoutData: AnchorData

  @JsName("bAutoSize")
  public open var autoSize: Boolean

  @JsName("ZOrder")
  public open var zOrder: Number

  @JsName("SetZOrder")
  public open fun setZOrder(inZOrder: Number): Unit

  @JsName("SetSize")
  public open fun setSize(inSize: Vector2d): Unit

  @JsName("SetPosition")
  public open fun setPosition(inPosition: Vector2d): Unit

  @JsName("SetOffsets")
  public open fun setOffsets(inOffset: Margin): Unit

  @JsName("SetMinimum")
  public open fun setMinimum(inMinimumAnchors: Vector2d): Unit

  @JsName("SetMaximum")
  public open fun setMaximum(inMaximumAnchors: Vector2d): Unit

  @JsName("SetLayout")
  public open fun setLayout(inLayoutData: AnchorData): Unit

  @JsName("SetAutoSize")
  public open fun setAutoSize(inbAutoSize: Boolean): Unit

  @JsName("SetAnchors")
  public open fun setAnchors(inAnchors: Anchors): Unit

  @JsName("SetAlignment")
  public open fun setAlignment(inAlignment: Vector2d): Unit

  @JsName("GetZOrder")
  public open fun getZOrder(): Number

  @JsName("GetSize")
  public open fun getSize(): Vector2d

  @JsName("GetPosition")
  public open fun getPosition(): Vector2d

  @JsName("GetOffsets")
  public open fun getOffsets(): Margin

  @JsName("GetLayout")
  public open fun getLayout(): AnchorData

  @JsName("GetAutoSize")
  public open fun getAutoSize(): Boolean

  @JsName("GetAnchors")
  public open fun getAnchors(): Anchors

  @JsName("GetAlignment")
  public open fun getAlignment(): Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CanvasPanelSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CanvasPanelSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CanvasPanelSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CanvasPanelSlot

    @JsName("C")
    public fun copy(other: UObject): CanvasPanelSlot

    @JsName("C")
    public fun copy(other: Any): CanvasPanelSlot
  }
}

public open external class GridSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("Row")
  public open var row: Number

  @JsName("RowSpan")
  public open var rowSpan: Number

  @JsName("Column")
  public open var column: Number

  @JsName("ColumnSpan")
  public open var columnSpan: Number

  @JsName("Layer")
  public open var layer: Number

  @JsName("Nudge")
  public open var nudge: Vector2d

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetRowSpan")
  public open fun setRowSpan(inRowSpan: Number): Unit

  @JsName("SetRow")
  public open fun setRow(inRow: Number): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetNudge")
  public open fun setNudge(inNudge: Vector2d): Unit

  @JsName("SetLayer")
  public open fun setLayer(inLayer: Number): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  @JsName("SetColumnSpan")
  public open fun setColumnSpan(inColumnSpan: Number): Unit

  @JsName("SetColumn")
  public open fun setColumn(inColumn: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GridSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GridSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GridSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GridSlot

    @JsName("C")
    public fun copy(other: UObject): GridSlot

    @JsName("C")
    public fun copy(other: Any): GridSlot
  }
}

@JsName("ESlateSizeRule")
public external object SlateSizeRule {
  public var Automatic: String

  public var Fill: String

  @JsName("ESlateSizeRule_MAX")
  public var Max: String
}

public open external class SlateChildSize {
  @JsName("Value")
  public open var value: Number

  @JsName("SizeRule")
  public open var sizeRule: String

  public open fun clone(): SlateChildSize

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlateChildSize

    @JsName("C")
    public fun copy(other: Any): SlateChildSize
  }
}

public open external class HorizontalBoxSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("Size")
  public open var size: SlateChildSize

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetSize")
  public open fun setSize(inSize: SlateChildSize): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HorizontalBoxSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HorizontalBoxSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HorizontalBoxSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HorizontalBoxSlot

    @JsName("C")
    public fun copy(other: UObject): HorizontalBoxSlot

    @JsName("C")
    public fun copy(other: Any): HorizontalBoxSlot
  }
}

public open external class OverlaySlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OverlaySlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OverlaySlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OverlaySlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OverlaySlot

    @JsName("C")
    public fun copy(other: UObject): OverlaySlot

    @JsName("C")
    public fun copy(other: Any): OverlaySlot
  }
}

public open external class SafeZoneSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("bIsTitleSafe")
  public open var isTitleSafe: Boolean

  @JsName("SafeAreaScale")
  public open var safeAreaScale: Margin

  @JsName("HAlign")
  public open var hAlign: String

  @JsName("VAlign")
  public open var vAlign: String

  @JsName("Padding")
  public open var padding: Margin

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SafeZoneSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SafeZoneSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SafeZoneSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SafeZoneSlot

    @JsName("C")
    public fun copy(other: UObject): SafeZoneSlot

    @JsName("C")
    public fun copy(other: Any): SafeZoneSlot
  }
}

public open external class ScaleBoxSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScaleBoxSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScaleBoxSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScaleBoxSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScaleBoxSlot

    @JsName("C")
    public fun copy(other: UObject): ScaleBoxSlot

    @JsName("C")
    public fun copy(other: Any): ScaleBoxSlot
  }
}

public open external class ScrollBoxSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScrollBoxSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScrollBoxSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScrollBoxSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScrollBoxSlot

    @JsName("C")
    public fun copy(other: UObject): ScrollBoxSlot

    @JsName("C")
    public fun copy(other: Any): ScrollBoxSlot
  }
}

public open external class SizeBoxSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SizeBoxSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SizeBoxSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SizeBoxSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SizeBoxSlot

    @JsName("C")
    public fun copy(other: UObject): SizeBoxSlot

    @JsName("C")
    public fun copy(other: Any): SizeBoxSlot
  }
}

public open external class UniformGridSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("Row")
  public open var row: Number

  @JsName("Column")
  public open var column: Number

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetRow")
  public open fun setRow(inRow: Number): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  @JsName("SetColumn")
  public open fun setColumn(inColumn: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UniformGridSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UniformGridSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UniformGridSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UniformGridSlot

    @JsName("C")
    public fun copy(other: UObject): UniformGridSlot

    @JsName("C")
    public fun copy(other: Any): UniformGridSlot
  }
}

public open external class VerticalBoxSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Size")
  public open var size: SlateChildSize

  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetSize")
  public open fun setSize(inSize: SlateChildSize): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VerticalBoxSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VerticalBoxSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VerticalBoxSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VerticalBoxSlot

    @JsName("C")
    public fun copy(other: UObject): VerticalBoxSlot

    @JsName("C")
    public fun copy(other: Any): VerticalBoxSlot
  }
}

public open external class WidgetSwitcherSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetSwitcherSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetSwitcherSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetSwitcherSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetSwitcherSlot

    @JsName("C")
    public fun copy(other: UObject): WidgetSwitcherSlot

    @JsName("C")
    public fun copy(other: Any): WidgetSwitcherSlot
  }
}

public open external class WrapBoxSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("bFillEmptySpace")
  public open var fillEmptySpace: Boolean

  @JsName("FillSpanWhenLessThan")
  public open var fillSpanWhenLessThan: Number

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("bForceNewLine")
  public open var forceNewLine: Boolean

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetNewLine")
  public open fun setNewLine(inForceNewLine: Boolean): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  @JsName("SetFillSpanWhenLessThan")
  public open fun setFillSpanWhenLessThan(inFillSpanWhenLessThan: Number): Unit

  @JsName("SetFillEmptySpace")
  public open fun setFillEmptySpace(inbFillEmptySpace: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WrapBoxSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WrapBoxSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WrapBoxSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WrapBoxSlot

    @JsName("C")
    public fun copy(other: UObject): WrapBoxSlot

    @JsName("C")
    public fun copy(other: Any): WrapBoxSlot
  }
}

@JsName("EWindowTitleBarMode")
public external object WindowTitleBarMode {
  public var Overlay: String

  public var VerticalBox: String

  @JsName("EWindowTitleBarMode_MAX")
  public var Max: String
}

public open external class Widget(
  outer: UObject,
) : Visual {
  @JsName("Slot")
  public open var slot: PanelSlot

  @JsName("bIsEnabledDelegate")
  public open var isEnabledDelegate: UnrealEngineDelegate<() -> Boolean>

  @JsName("ToolTipText")
  public open var toolTipText: String

  @JsName("ToolTipTextDelegate")
  public open var toolTipTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("ToolTipWidget")
  public open var toolTipWidget: Widget

  @JsName("ToolTipWidgetDelegate")
  public open var toolTipWidgetDelegate: UnrealEngineDelegate<() -> Widget>

  @JsName("VisibilityDelegate")
  public open var visibilityDelegate: UnrealEngineDelegate<() -> String>

  @JsName("RenderTransform")
  public open var renderTransform: WidgetTransform

  @JsName("RenderTransformPivot")
  public open var renderTransformPivot: Vector2d

  @JsName("bIsVariable")
  public open var isVariable: Boolean

  @JsName("bCreatedByConstructionScript")
  public open var createdByConstructionScript: Boolean

  @JsName("bIsEnabled")
  public open var isEnabled: Boolean

  @JsName("bOverride_Cursor")
  public open var overrideCursor: Boolean

  @JsName("FlowDirectionPreference")
  public open var flowDirectionPreference: String

  @JsName("bOverrideAccessibleDefaults")
  public open var overrideAccessibleDefaults: Boolean

  @JsName("bCanChildrenBeAccessible")
  public open var canChildrenBeAccessible: Boolean

  @JsName("AccessibleBehavior")
  public open var accessibleBehavior: String

  @JsName("AccessibleSummaryBehavior")
  public open var accessibleSummaryBehavior: String

  @JsName("AccessibleText")
  public open var accessibleText: String

  @JsName("AccessibleTextDelegate")
  public open var accessibleTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("AccessibleSummaryText")
  public open var accessibleSummaryText: String

  @JsName("AccessibleSummaryTextDelegate")
  public open var accessibleSummaryTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("AccessibleWidgetData")
  public open var accessibleWidgetData: SlateAccessibleWidgetData

  @JsName("bIsVolatile")
  public open var isVolatile: Boolean

  @JsName("bHiddenInDesigner")
  public open var hiddenInDesigner: Boolean

  @JsName("bExpandedInDesigner")
  public open var expandedInDesigner: Boolean

  @JsName("bLockedInDesigner")
  public open var lockedInDesigner: Boolean

  @JsName("Cursor")
  public open var cursor: String

  @JsName("Clipping")
  public open var clipping: String

  @JsName("Visibility")
  public open var visibility: String

  @JsName("RenderOpacity")
  public open var renderOpacity: Number

  @JsName("Navigation")
  public open var navigation: WidgetNavigation

  @JsName("NativeBindings")
  public open var nativeBindings: Array<PropertyBinding>

  @JsName("DesignerFlags")
  public open var designerFlags: Number

  @JsName("DisplayLabel")
  public open var displayLabel: String

  @JsName("CategoryName")
  public open var categoryName: String

  @JsName("SetVisibility")
  public open fun setVisibility(inVisibility: String): Unit

  @JsName("SetUserFocus")
  public open fun setUserFocus(playerController: PlayerController): Unit

  @JsName("SetToolTipText")
  public open fun setToolTipText(inToolTipText: String): Unit

  @JsName("SetToolTip")
  public open fun setToolTip(widget: Widget): Unit

  @JsName("SetRenderTranslation")
  public open fun setRenderTranslation(translation: Vector2d): Unit

  @JsName("SetRenderTransformPivot")
  public open fun setRenderTransformPivot(pivot: Vector2d): Unit

  @JsName("SetRenderTransformAngle")
  public open fun setRenderTransformAngle(angle: Number): Unit

  @JsName("SetRenderTransform")
  public open fun setRenderTransform(inTransform: WidgetTransform): Unit

  @JsName("SetRenderShear")
  public open fun setRenderShear(shear: Vector2d): Unit

  @JsName("SetRenderScale")
  public open fun setRenderScale(scale: Vector2d): Unit

  @JsName("SetRenderOpacity")
  public open fun setRenderOpacity(inOpacity: Number): Unit

  @JsName("SetNavigationRuleExplicit")
  public open fun setNavigationRuleExplicit(direction: String, inWidget: Widget): Unit

  @JsName("SetNavigationRuleBase")
  public open fun setNavigationRuleBase(direction: String, rule: String): Unit

  @JsName("SetNavigationRule")
  public open fun setNavigationRule(
    direction: String,
    rule: String,
    widgetToFocus: String,
  ): Unit

  @JsName("SetKeyboardFocus")
  public open fun setKeyboardFocus(): Unit

  @JsName("SetIsEnabled")
  public open fun setIsEnabled(inIsEnabled: Boolean): Unit

  @JsName("SetFocus")
  public open fun setFocus(): Unit

  @JsName("SetCursor")
  public open fun setCursor(inCursor: String): Unit

  @JsName("SetClipping")
  public open fun setClipping(inClipping: String): Unit

  @JsName("SetAllNavigationRules")
  public open fun setAllNavigationRules(rule: String, widgetToFocus: String): Unit

  @JsName("ResetCursor")
  public open fun resetCursor(): Unit

  @JsName("RemoveFromParent")
  public open fun removeFromParent(): Unit

  @JsName("IsVisible")
  public open fun isVisible(): Boolean

  @JsName("IsHovered")
  public open fun isHovered(): Boolean

  @JsName("InvalidateLayoutAndVolatility")
  public open fun invalidateLayoutAndVolatility(): Unit

  @JsName("HasUserFocusedDescendants")
  public open fun hasUserFocusedDescendants(playerController: PlayerController): Boolean

  @JsName("HasUserFocus")
  public open fun hasUserFocus(playerController: PlayerController): Boolean

  @JsName("HasMouseCaptureByUser")
  public open fun hasMouseCaptureByUser(userIndex: Number, pointerIndex: Number): Boolean

  @JsName("HasMouseCapture")
  public open fun hasMouseCapture(): Boolean

  @JsName("HasKeyboardFocus")
  public open fun hasKeyboardFocus(): Boolean

  @JsName("HasFocusedDescendants")
  public open fun hasFocusedDescendants(): Boolean

  @JsName("HasAnyUserFocus")
  public open fun hasAnyUserFocus(): Boolean

  @JsName("GetVisibility")
  public open fun getVisibility(): String

  @JsName("GetTickSpaceGeometry")
  public open fun getTickSpaceGeometry(): Geometry

  @JsName("GetRenderTransformAngle")
  public open fun getRenderTransformAngle(): Number

  @JsName("GetRenderOpacity")
  public open fun getRenderOpacity(): Number

  @JsName("GetParent")
  public open fun getParent(): PanelWidget

  @JsName("GetPaintSpaceGeometry")
  public open fun getPaintSpaceGeometry(): Geometry

  @JsName("GetOwningPlayer")
  public open fun getOwningPlayer(): PlayerController

  @JsName("GetOwningLocalPlayer")
  public open fun getOwningLocalPlayer(): LocalPlayer

  @JsName("GetIsEnabled")
  public open fun getIsEnabled(): Boolean

  @JsName("GetGameInstance")
  public open fun getGameInstance(): GameInstance

  @JsName("GetDesiredSize")
  public open fun getDesiredSize(): Vector2d

  @JsName("GetClipping")
  public open fun getClipping(): String

  @JsName("GetCachedGeometry")
  public open fun getCachedGeometry(): Geometry

  @JsName("GetAccessibleText")
  public open fun getAccessibleText(): String

  @JsName("GetAccessibleSummaryText")
  public open fun getAccessibleSummaryText(): String

  @JsName("ForceVolatile")
  public open fun forceVolatile(force: Boolean): Unit

  @JsName("ForceLayoutPrepass")
  public open fun forceLayoutPrepass(): Unit

  @JsName("GetUIGeometry")
  public open fun getUiGeometry(): Geometry

  @JsName("TakeWidget")
  public open fun takeWidget(): JavascriptSlateWidget

  @JsName("SlotAsBorderSlot")
  public open fun slotAsBorderSlot(): BorderSlot

  @JsName("SlotAsCanvasSlot")
  public open fun slotAsCanvasSlot(): CanvasPanelSlot

  @JsName("SlotAsGridSlot")
  public open fun slotAsGridSlot(): GridSlot

  @JsName("SlotAsHorizontalBoxSlot")
  public open fun slotAsHorizontalBoxSlot(): HorizontalBoxSlot

  @JsName("SlotAsOverlaySlot")
  public open fun slotAsOverlaySlot(): OverlaySlot

  @JsName("SlotAsSafeBoxSlot")
  public open fun slotAsSafeBoxSlot(): SafeZoneSlot

  @JsName("SlotAsScaleBoxSlot")
  public open fun slotAsScaleBoxSlot(): ScaleBoxSlot

  @JsName("SlotAsScrollBoxSlot")
  public open fun slotAsScrollBoxSlot(): ScrollBoxSlot

  @JsName("SlotAsSizeBoxSlot")
  public open fun slotAsSizeBoxSlot(): SizeBoxSlot

  @JsName("SlotAsUniformGridSlot")
  public open fun slotAsUniformGridSlot(): UniformGridSlot

  @JsName("SlotAsVerticalBoxSlot")
  public open fun slotAsVerticalBoxSlot(): VerticalBoxSlot

  @JsName("SlotAsWidgetSwitcherSlot")
  public open fun slotAsWidgetSwitcherSlot(): WidgetSwitcherSlot

  @JsName("SlotAsWrapBoxSlot")
  public open fun slotAsWrapBoxSlot(): WrapBoxSlot

  @JsName("SetWindowTitleBarState")
  public open fun setWindowTitleBarState(
    mode: String,
    titleBarDragEnabled: Boolean,
    windowButtonsVisible: Boolean,
    titleBarVisible: Boolean,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Widget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Widget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Widget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Widget

    @JsName("C")
    public fun copy(other: UObject): Widget

    @JsName("C")
    public fun copy(other: Any): Widget

    @JsName("GetUIGeometry")
    public fun getUiGeometry(widget: Widget): Geometry

    @JsName("TakeWidget")
    public fun takeWidget(widget: Widget): JavascriptSlateWidget

    @JsName("SlotAsBorderSlot")
    public fun slotAsBorderSlot(widget: Widget): BorderSlot

    @JsName("SlotAsCanvasSlot")
    public fun slotAsCanvasSlot(widget: Widget): CanvasPanelSlot

    @JsName("SlotAsGridSlot")
    public fun slotAsGridSlot(widget: Widget): GridSlot

    @JsName("SlotAsHorizontalBoxSlot")
    public fun slotAsHorizontalBoxSlot(widget: Widget): HorizontalBoxSlot

    @JsName("SlotAsOverlaySlot")
    public fun slotAsOverlaySlot(widget: Widget): OverlaySlot

    @JsName("SlotAsSafeBoxSlot")
    public fun slotAsSafeBoxSlot(widget: Widget): SafeZoneSlot

    @JsName("SlotAsScaleBoxSlot")
    public fun slotAsScaleBoxSlot(widget: Widget): ScaleBoxSlot

    @JsName("SlotAsScrollBoxSlot")
    public fun slotAsScrollBoxSlot(widget: Widget): ScrollBoxSlot

    @JsName("SlotAsSizeBoxSlot")
    public fun slotAsSizeBoxSlot(widget: Widget): SizeBoxSlot

    @JsName("SlotAsUniformGridSlot")
    public fun slotAsUniformGridSlot(widget: Widget): UniformGridSlot

    @JsName("SlotAsVerticalBoxSlot")
    public fun slotAsVerticalBoxSlot(widget: Widget): VerticalBoxSlot

    @JsName("SlotAsWidgetSwitcherSlot")
    public fun slotAsWidgetSwitcherSlot(widget: Widget): WidgetSwitcherSlot

    @JsName("SlotAsWrapBoxSlot")
    public fun slotAsWrapBoxSlot(widget: Widget): WrapBoxSlot

    @JsName("SetWindowTitleBarState")
    public fun setWindowTitleBarState(
      titleBarContent: Widget,
      mode: String,
      titleBarDragEnabled: Boolean,
      windowButtonsVisible: Boolean,
      titleBarVisible: Boolean,
    ): Unit
  }
}

@JsName("EDragPivot")
public external object DragPivot {
  public var MouseDown: String

  public var TopLeft: String

  public var TopCenter: String

  public var TopRight: String

  public var CenterLeft: String

  public var CenterCenter: String

  public var CenterRight: String

  public var BottomLeft: String

  public var BottomCenter: String

  public var BottomRight: String

  @JsName("EDragPivot_MAX")
  public var Max: String
}

public open external class DragDropOperation(
  outer: UObject,
) : UObject {
  @JsName("Tag")
  public open var tag: String

  @JsName("Payload")
  public open var payload: UObject

  @JsName("DefaultDragVisual")
  public open var defaultDragVisual: Widget

  @JsName("Pivot")
  public open var pivot: String

  @JsName("Offset")
  public open var offset: Vector2d

  @JsName("OnDrop")
  public open var onDrop: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>

  @JsName("OnDragCancelled")
  public open var onDragCancelled:
      UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>

  @JsName("OnDragged")
  public open var onDragged: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>

  @JsName("Drop")
  public open fun drop(uPointerEvent: UPointerEvent): Unit

  @JsName("Dragged")
  public open fun dragged(uPointerEvent: UPointerEvent): Unit

  @JsName("DragCancelled")
  public open fun dragCancelled(uPointerEvent: UPointerEvent): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DragDropOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DragDropOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DragDropOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DragDropOperation

    @JsName("C")
    public fun copy(other: UObject): DragDropOperation

    @JsName("C")
    public fun copy(other: Any): DragDropOperation
  }
}

@JsName("T$280")
public external interface IdentifierProvider {
  @JsName("Identifier")
  public var identifier: String
}

@JsName("T$281")
public external interface UnrealEngineClassesResultProvider {
  @JsName("Results")
  public var results: Array<UnrealEngineClass>
}

@JsName("T$282")
public external interface ResultsProvider {
  @JsName("Results")
  public var results: Array<UObject>
}

@JsName("T$284")
public external interface Object284 {
  @JsName("Var")
  public var `var`: CameraLensInterfaceClassSupport

  @JsName("Result")
  public var result: String
}

public open external class Class(
  outer: UObject,
) : Struct {
  @JsName("DeleteColorForChannels")
  public open fun deleteColorForChannels(identifier: String): IdentifierProvider

  @JsName("GetCustomColorForChannel")
  public open fun getCustomColorForChannel(identifier: String): LinearColor

  @JsName("HasCustomColorForChannel")
  public open fun hasCustomColorForChannel(identifier: String): Boolean

  @JsName("SetCustomColorForChannel")
  public open fun setCustomColorForChannel(identifier: String, newColor: LinearColor): Unit

  @JsName("SetCustomColorForChannels")
  public open fun setCustomColorForChannels(identifiers: Array<String>,
      newColors: Array<LinearColor>): Unit

  @JsName("SetRandomColorForChannels")
  public open fun setRandomColorForChannels(identifiers: Array<String>): Unit

  @JsName("SpawnActorFromClass")
  public open fun spawnActorFromClass(
    location: Vector,
    rotation: Rotator,
    transient: Boolean,
  ): Actor

  @JsName("AddDynamicBinding")
  public open fun addDynamicBinding(bindingObject: DynamicBlueprintBinding): Unit

  @JsName("GetClassPathName")
  public open fun getClassPathName(): String

  @JsName("GetDerivedClasses")
  public open fun getDerivedClasses(results: Array<UnrealEngineClass>, recursive: Boolean):
      UnrealEngineClassesResultProvider

  @JsName("GetDynamicBinding")
  public open fun getDynamicBinding(bindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding

  @JsName("GetObjectsOfClass")
  public open fun getObjectsOfClass(
    results: Array<UObject>,
    includeDerivedClasses: Boolean,
    excludeFlags: Number,
    exclusionInternalFlags: Number,
  ): ResultsProvider

  @JsName("GetSuperClasses")
  public open fun getSuperClasses(): Array<UnrealEngineClass>

  @JsName("IsGeneratedByBlueprint")
  public open fun isGeneratedByBlueprint(): Boolean

  @JsName("GetAllDatasmithUserData")
  public open fun getAllDatasmithUserData(outUserData: Array<DatasmithAssetUserData>):
      OutUserDataProvider

  @JsName("GetEngineSubsystem")
  public open fun getEngineSubsystem(): EngineSubsystem

  @JsName("CreateNewLightWeightInstance")
  public open fun createNewLightWeightInstance(
    transform: Transform,
    layer: DataLayer,
    world: World,
  ): ActorInstanceHandle

  @JsName("Conv_ClassToSoftClassReference")
  public open fun convertClassToSoftClassReference(): Class

  @JsName("Conv_SoftClassReferenceToClass")
  public open fun convertSoftClassReferenceToClass(): UnrealEngineClass

  @JsName("Conv_SoftClassReferenceToString")
  public open fun convertSoftClassReferenceToString(): String

  @JsName("EqualEqual_SoftClassReference")
  public open fun equalEqualSoftClassReference(b: Class): Boolean

  @JsName("GetClassDisplayName")
  public open fun getClassDisplayName(): String

  @JsName("GetPrimaryAssetIdFromClass")
  public open fun getPrimaryAssetIdFromClass(): PrimaryAssetId

  @JsName("GetPrimaryAssetIdFromSoftClassReference")
  public open fun getPrimaryAssetIdFromSoftClassReference(): PrimaryAssetId

  @JsName("IsValidClass")
  public open fun isValidClass(): Boolean

  @JsName("IsValidSoftClassReference")
  public open fun isValidSoftClassReference(): Boolean

  @JsName("LoadClassAsset_Blocking")
  public open fun loadClassAssetBlocking(): UnrealEngineClass

  @JsName("NotEqual_SoftClassReference")
  public open fun notEqualSoftClassReference(b: Class): Boolean

  @JsName("ClassIsChildOf")
  public open fun classIsChildOf(parentClass: UnrealEngineClass): Boolean

  @JsName("EqualEqual_ClassClass")
  public open fun equalEqualClassClass(b: UnrealEngineClass): Boolean

  @JsName("NotEqual_ClassClass")
  public open fun notEqualClassClass(b: UnrealEngineClass): Boolean

  @JsName("SelectClass")
  public open fun selectClass(b: UnrealEngineClass, selectA: Boolean): UnrealEngineClass

  @JsName("CreateSaveGameObject")
  public open fun createSaveGameObject(): SaveGame

  @JsName("SpawnObject")
  public open fun spawnObject(outer: UObject): UObject

  @JsName("SetInterfaceClass")
  public open fun setInterfaceClass(`var`: CameraLensInterfaceClassSupport, result: String):
      Object284

  @JsName("GetEditorSubsystem")
  public open fun getEditorSubsystem(): EditorSubsystem

  @JsName("CreateDragDropOperation")
  public open fun createDragDropOperation(): DragDropOperation

  @JsName("GetAllGeometriesByClass")
  public open fun getAllGeometriesByClass(): Array<ArTrackedGeometry>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Class

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Class

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Class

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Class

    @JsName("C")
    public fun copy(other: UObject): Class

    @JsName("C")
    public fun copy(other: Any): Class

    @JsName("DeleteColorForChannels")
    public fun deleteColorForChannels(`class`: UnrealEngineClass, identifier: String):
        IdentifierProvider

    @JsName("GetCustomColorForChannel")
    public fun getCustomColorForChannel(`class`: UnrealEngineClass, identifier: String): LinearColor

    @JsName("HasCustomColorForChannel")
    public fun hasCustomColorForChannel(`class`: UnrealEngineClass, identifier: String): Boolean

    @JsName("SetCustomColorForChannel")
    public fun setCustomColorForChannel(
      `class`: UnrealEngineClass,
      identifier: String,
      newColor: LinearColor,
    ): Unit

    @JsName("SetCustomColorForChannels")
    public fun setCustomColorForChannels(
      `class`: UnrealEngineClass,
      identifiers: Array<String>,
      newColors: Array<LinearColor>,
    ): Unit

    @JsName("SetRandomColorForChannels")
    public fun setRandomColorForChannels(`class`: UnrealEngineClass, identifiers: Array<String>):
        Unit

    @JsName("SpawnActorFromClass")
    public fun spawnActorFromClass(
      actorClass: UnrealEngineClass,
      location: Vector,
      rotation: Rotator,
      transient: Boolean,
    ): Actor

    @JsName("AddDynamicBinding")
    public fun addDynamicBinding(outer: UnrealEngineClass, bindingObject: DynamicBlueprintBinding):
        Unit

    @JsName("GetClassPathName")
    public fun getClassPathName(`class`: UnrealEngineClass): String

    @JsName("GetDerivedClasses")
    public fun getDerivedClasses(
      classToLookFor: UnrealEngineClass,
      results: Array<UnrealEngineClass>,
      recursive: Boolean,
    ): UnrealEngineClassesResultProvider

    @JsName("GetDynamicBinding")
    public fun getDynamicBinding(outer: UnrealEngineClass, bindingObjectClass: UnrealEngineClass):
        DynamicBlueprintBinding

    @JsName("GetObjectsOfClass")
    public fun getObjectsOfClass(
      classToLookFor: UnrealEngineClass,
      results: Array<UObject>,
      includeDerivedClasses: Boolean,
      excludeFlags: Number,
      exclusionInternalFlags: Number,
    ): ResultsProvider

    @JsName("GetSuperClasses")
    public fun getSuperClasses(inClass: UnrealEngineClass): Array<UnrealEngineClass>

    @JsName("IsGeneratedByBlueprint")
    public fun isGeneratedByBlueprint(inClass: UnrealEngineClass): Boolean

    @JsName("GetAllDatasmithUserData")
    public fun getAllDatasmithUserData(objectClass: UnrealEngineClass,
        outUserData: Array<DatasmithAssetUserData>): OutUserDataProvider

    @JsName("GetEngineSubsystem")
    public fun getEngineSubsystem(`class`: UnrealEngineClass): EngineSubsystem

    @JsName("CreateNewLightWeightInstance")
    public fun createNewLightWeightInstance(
      actorClass: UnrealEngineClass,
      transform: Transform,
      layer: DataLayer,
      world: World,
    ): ActorInstanceHandle

    @JsName("Conv_ClassToSoftClassReference")
    public fun convertClassToSoftClassReference(`class`: UnrealEngineClass): Class

    @JsName("Conv_SoftClassReferenceToClass")
    public fun convertSoftClassReferenceToClass(softclass: Class): UnrealEngineClass

    @JsName("Conv_SoftClassReferenceToString")
    public fun convertSoftClassReferenceToString(softClassReference: Class): String

    @JsName("EqualEqual_SoftClassReference")
    public fun equalEqualSoftClassReference(a: Class, b: Class): Boolean

    @JsName("GetClassDisplayName")
    public fun getClassDisplayName(`class`: UnrealEngineClass): String

    @JsName("GetPrimaryAssetIdFromClass")
    public fun getPrimaryAssetIdFromClass(`class`: UnrealEngineClass): PrimaryAssetId

    @JsName("GetPrimaryAssetIdFromSoftClassReference")
    public fun getPrimaryAssetIdFromSoftClassReference(softClassReference: Class): PrimaryAssetId

    @JsName("IsValidClass")
    public fun isValidClass(`class`: UnrealEngineClass): Boolean

    @JsName("IsValidSoftClassReference")
    public fun isValidSoftClassReference(softClassReference: Class): Boolean

    @JsName("LoadClassAsset_Blocking")
    public fun loadClassAssetBlocking(assetClass: Class): UnrealEngineClass

    @JsName("NotEqual_SoftClassReference")
    public fun notEqualSoftClassReference(a: Class, b: Class): Boolean

    @JsName("ClassIsChildOf")
    public fun classIsChildOf(testClass: UnrealEngineClass, parentClass: UnrealEngineClass): Boolean

    @JsName("EqualEqual_ClassClass")
    public fun equalEqualClassClass(a: UnrealEngineClass, b: UnrealEngineClass): Boolean

    @JsName("NotEqual_ClassClass")
    public fun notEqualClassClass(a: UnrealEngineClass, b: UnrealEngineClass): Boolean

    @JsName("SelectClass")
    public fun selectClass(
      a: UnrealEngineClass,
      b: UnrealEngineClass,
      selectA: Boolean,
    ): UnrealEngineClass

    @JsName("CreateSaveGameObject")
    public fun createSaveGameObject(saveGameClass: UnrealEngineClass): SaveGame

    @JsName("SpawnObject")
    public fun spawnObject(objectClass: UnrealEngineClass, outer: UObject): UObject

    @JsName("SetInterfaceClass")
    public fun setInterfaceClass(
      `class`: UnrealEngineClass,
      `var`: CameraLensInterfaceClassSupport,
      result: String,
    ): Object284

    @JsName("GetEditorSubsystem")
    public fun getEditorSubsystem(`class`: UnrealEngineClass): EditorSubsystem

    @JsName("CreateDragDropOperation")
    public fun createDragDropOperation(operationClass: UnrealEngineClass): DragDropOperation

    @JsName("GetAllGeometriesByClass")
    public fun getAllGeometriesByClass(geometryClass: UnrealEngineClass): Array<ArTrackedGeometry>
  }
}

public open external class NavAgentSelector {
  @JsName("bSupportsAgent0")
  public open var supportsAgent0: Boolean

  @JsName("bSupportsAgent1")
  public open var supportsAgent1: Boolean

  @JsName("bSupportsAgent2")
  public open var supportsAgent2: Boolean

  @JsName("bSupportsAgent3")
  public open var supportsAgent3: Boolean

  @JsName("bSupportsAgent4")
  public open var supportsAgent4: Boolean

  @JsName("bSupportsAgent5")
  public open var supportsAgent5: Boolean

  @JsName("bSupportsAgent6")
  public open var supportsAgent6: Boolean

  @JsName("bSupportsAgent7")
  public open var supportsAgent7: Boolean

  @JsName("bSupportsAgent8")
  public open var supportsAgent8: Boolean

  @JsName("bSupportsAgent9")
  public open var supportsAgent9: Boolean

  @JsName("bSupportsAgent10")
  public open var supportsAgent10: Boolean

  @JsName("bSupportsAgent11")
  public open var supportsAgent11: Boolean

  @JsName("bSupportsAgent12")
  public open var supportsAgent12: Boolean

  @JsName("bSupportsAgent13")
  public open var supportsAgent13: Boolean

  @JsName("bSupportsAgent14")
  public open var supportsAgent14: Boolean

  @JsName("bSupportsAgent15")
  public open var supportsAgent15: Boolean

  public open fun clone(): NavAgentSelector

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavAgentSelector

    @JsName("C")
    public fun copy(other: Any): NavAgentSelector
  }
}

public open external class NavigationSystemConfig(
  outer: UObject,
) : UObject {
  @JsName("NavigationSystemClass")
  public open var navigationSystemClass: SoftClassPath

  @JsName("SupportedAgentsMask")
  public open var supportedAgentsMask: NavAgentSelector

  @JsName("DefaultAgentName")
  public open var defaultAgentName: String

  @JsName("bIsOverriden")
  public open var isOverriden: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationSystemConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationSystemConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationSystemConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationSystemConfig

    @JsName("C")
    public fun copy(other: UObject): NavigationSystemConfig

    @JsName("C")
    public fun copy(other: Any): NavigationSystemConfig
  }
}

public open external class ActorDescContainer(
  outer: UObject,
) : UObject {
  @JsName("World")
  public open var world: World

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorDescContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorDescContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorDescContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorDescContainer

    @JsName("C")
    public fun copy(other: UObject): ActorDescContainer

    @JsName("C")
    public fun copy(other: Any): ActorDescContainer
  }
}

public open external class WorldPartitionEditorHash(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionEditorHash

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionEditorHash

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionEditorHash

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionEditorHash

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionEditorHash

    @JsName("C")
    public fun copy(other: Any): WorldPartitionEditorHash
  }
}

public open external class WorldPartitionStreamingPolicy(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionStreamingPolicy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionStreamingPolicy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionStreamingPolicy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionStreamingPolicy

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionStreamingPolicy

    @JsName("C")
    public fun copy(other: Any): WorldPartitionStreamingPolicy
  }
}

public open external class WorldPartitionRuntimeHash(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartitionRuntimeHash

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartitionRuntimeHash

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartitionRuntimeHash

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartitionRuntimeHash

    @JsName("C")
    public fun copy(other: UObject): WorldPartitionRuntimeHash

    @JsName("C")
    public fun copy(other: Any): WorldPartitionRuntimeHash
  }
}

@JsName("EHLODLayerType")
public external object HLODLayerType {
  public var Instancing: String

  public var MeshMerge: String

  public var MeshSimplify: String

  public var MeshApproximate: String

  public var Custom: String

  @JsName("EHLODLayerType_MAX")
  public var Max: String
}

@JsName("HLODBuilderSettings")
public open external class HlodBuilderSettings(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilderSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilderSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilderSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilderSettings

    @JsName("C")
    public fun copy(other: UObject): HlodBuilderSettings

    @JsName("C")
    public fun copy(other: Any): HlodBuilderSettings
  }
}

@JsName("HLODBuilder")
public open external class HlodBuilder(
  outer: UObject,
) : UObject {
  @JsName("HLODBuilderSettings")
  public open var hlodBuilderSettings: HlodBuilderSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodBuilder

    @JsName("C")
    public fun copy(other: UObject): HlodBuilder

    @JsName("C")
    public fun copy(other: Any): HlodBuilder
  }
}

@JsName("EUVOutput")
public external object UVOutput {
  public var DoNotOutputChannel: String

  public var OutputChannel: String

  @JsName("EUVOutput_MAX")
  public var Max: String
}

@JsName("EMeshLODSelectionType")
public external object MeshLODSelectionType {
  @JsName("AllLODs")
  public var AllLoDs: String

  @JsName("SpecificLOD")
  public var SpecificLod: String

  @JsName("CalculateLOD")
  public var CalculateLod: String

  @JsName("LowestDetailLOD")
  public var LowestDetailLod: String

  @JsName("EMeshLODSelectionType_MAX")
  public var Max: String
}

public open external class MeshMergingSettings {
  @JsName("TargetLightMapResolution")
  public open var targetLightMapResolution: Number

  @JsName("OutputUVs")
  public open var outputUVs: String

  @JsName("MaterialSettings")
  public open var materialSettings: MaterialProxySettings

  @JsName("GutterSize")
  public open var gutterSize: Number

  @JsName("SpecificLOD")
  public open var specificLod: Number

  @JsName("LODSelectionType")
  public open var lodSelectionType: String

  @JsName("bGenerateLightMapUV")
  public open var generateLightMapUv: Boolean

  @JsName("bComputedLightMapResolution")
  public open var computedLightMapResolution: Boolean

  @JsName("bPivotPointAtZero")
  public open var pivotPointAtZero: Boolean

  @JsName("bMergePhysicsData")
  public open var mergePhysicsData: Boolean

  @JsName("bMergeMaterials")
  public open var mergeMaterials: Boolean

  @JsName("bCreateMergedMaterial")
  public open var createMergedMaterial: Boolean

  @JsName("bBakeVertexDataToMesh")
  public open var bakeVertexDataToMesh: Boolean

  @JsName("bUseVertexDataForBakingMaterial")
  public open var useVertexDataForBakingMaterial: Boolean

  @JsName("bUseTextureBinning")
  public open var useTextureBinning: Boolean

  @JsName("bReuseMeshLightmapUVs")
  public open var reuseMeshLightmapUVs: Boolean

  @JsName("bMergeEquivalentMaterials")
  public open var mergeEquivalentMaterials: Boolean

  @JsName("bUseLandscapeCulling")
  public open var useLandscapeCulling: Boolean

  @JsName("bIncludeImposters")
  public open var includeImposters: Boolean

  @JsName("bAllowDistanceField")
  public open var allowDistanceField: Boolean

  @JsName("bGenerateNaniteEnabledMesh")
  public open var generateNaniteEnabledMesh: Boolean

  @JsName("NaniteFallbackTrianglePercent")
  public open var naniteFallbackTrianglePercent: Number

  @JsName("bImportVertexColors")
  public open var importVertexColors: Boolean

  @JsName("bCalculateCorrectLODModel")
  public open var calculateCorrectLodModel: Boolean

  @JsName("bExportNormalMap")
  public open var exportNormalMap: Boolean

  @JsName("bExportMetallicMap")
  public open var exportMetallicMap: Boolean

  @JsName("bExportRoughnessMap")
  public open var exportRoughnessMap: Boolean

  @JsName("bExportSpecularMap")
  public open var exportSpecularMap: Boolean

  @JsName("MergedMaterialAtlasResolution")
  public open var mergedMaterialAtlasResolution: Number

  @JsName("ExportSpecificLOD")
  public open var exportSpecificLod: Number

  public open fun clone(): MeshMergingSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshMergingSettings

    @JsName("C")
    public fun copy(other: Any): MeshMergingSettings
  }
}

@JsName("EProxyNormalComputationMethod")
public external object ProxyNormalComputationMethod {
  public var AngleWeighted: String

  public var AreaWeighted: String

  public var EqualWeighted: String

  @JsName("EProxyNormalComputationMethod_MAX")
  public var Max: String
}

@JsName("ELandscapeCullingPrecision")
public external object LandscapeCullingPrecision {
  public var High: String

  public var Medium: String

  public var Low: String

  @JsName("ELandscapeCullingPrecision_MAX")
  public var Max: String
}

public open external class MeshProxySettings {
  @JsName("ScreenSize")
  public open var screenSize: Number

  @JsName("VoxelSize")
  public open var voxelSize: Number

  @JsName("MaterialSettings")
  public open var materialSettings: MaterialProxySettings

  @JsName("TextureWidth")
  public open var textureWidth: Number

  @JsName("TextureHeight")
  public open var textureHeight: Number

  @JsName("bExportNormalMap")
  public open var exportNormalMap: Boolean

  @JsName("bExportMetallicMap")
  public open var exportMetallicMap: Boolean

  @JsName("bExportRoughnessMap")
  public open var exportRoughnessMap: Boolean

  @JsName("bExportSpecularMap")
  public open var exportSpecularMap: Boolean

  @JsName("bBakeVertexData")
  public open var bakeVertexData: Boolean

  @JsName("MergeDistance")
  public open var mergeDistance: Number

  @JsName("UnresolvedGeometryColor")
  public open var unresolvedGeometryColor: Color

  @JsName("MaxRayCastDist")
  public open var maxRayCastDist: Number

  @JsName("HardAngleThreshold")
  public open var hardAngleThreshold: Number

  @JsName("LightMapResolution")
  public open var lightMapResolution: Number

  @JsName("NormalCalculationMethod")
  public open var normalCalculationMethod: String

  @JsName("LandscapeCullingPrecision")
  public open var landscapeCullingPrecision: String

  @JsName("bCalculateCorrectLODModel")
  public open var calculateCorrectLodModel: Boolean

  @JsName("bOverrideVoxelSize")
  public open var overrideVoxelSize: Boolean

  @JsName("bOverrideTransferDistance")
  public open var overrideTransferDistance: Boolean

  @JsName("bUseHardAngleThreshold")
  public open var useHardAngleThreshold: Boolean

  @JsName("bComputeLightMapResolution")
  public open var computeLightMapResolution: Boolean

  @JsName("bRecalculateNormals")
  public open var recalculateNormals: Boolean

  @JsName("bUseLandscapeCulling")
  public open var useLandscapeCulling: Boolean

  @JsName("bAllowDistanceField")
  public open var allowDistanceField: Boolean

  @JsName("bReuseMeshLightmapUVs")
  public open var reuseMeshLightmapUVs: Boolean

  @JsName("bGroupIdenticalMeshesForBaking")
  public open var groupIdenticalMeshesForBaking: Boolean

  @JsName("bCreateCollision")
  public open var createCollision: Boolean

  @JsName("bAllowVertexColors")
  public open var allowVertexColors: Boolean

  @JsName("bGenerateLightmapUVs")
  public open var generateLightmapUVs: Boolean

  @JsName("bGenerateNaniteEnabledMesh")
  public open var generateNaniteEnabledMesh: Boolean

  @JsName("NaniteProxyTrianglePercent")
  public open var naniteProxyTrianglePercent: Number

  public open fun clone(): MeshProxySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshProxySettings

    @JsName("C")
    public fun copy(other: Any): MeshProxySettings
  }
}

@JsName("EMeshApproximationType")
public external object MeshApproximationType {
  @JsName("MeshAndMaterials")
  public var AndMaterials: String

  @JsName("MeshShapeOnly")
  public var ShapeOnly: String

  @JsName("EMeshApproximationType_MAX")
  public var Max: String
}

@JsName("EMeshApproximationBaseCappingType")
public external object MeshApproximationBaseCappingType {
  public var NoBaseCapping: String

  public var ConvexPolygon: String

  public var ConvexSolid: String

  @JsName("EMeshApproximationBaseCappingType_MAX")
  public var Max: String
}

@JsName("EOccludedGeometryFilteringPolicy")
public external object OccludedGeometryFilteringPolicy {
  public var NoOcclusionFiltering: String

  public var VisibilityBasedFiltering: String

  @JsName("EOccludedGeometryFilteringPolicy_MAX")
  public var Max: String
}

@JsName("EMeshApproximationSimplificationPolicy")
public external object MeshApproximationSimplificationPolicy {
  public var FixedTriangleCount: String

  public var TrianglesPerArea: String

  public var GeometricTolerance: String

  @JsName("EMeshApproximationSimplificationPolicy_MAX")
  public var Max: String
}

@JsName("EMeshApproximationGroundPlaneClippingPolicy")
public external object MeshApproximationGroundPlaneClippingPolicy {
  public var NoGroundClipping: String

  public var DiscardWithZPlane: String

  public var CutWithZPlane: String

  public var CutAndFillWithZPlane: String

  @JsName("EMeshApproximationGroundPlaneClippingPolicy_MAX")
  public var Max: String
}

@JsName("EMeshApproximationUVGenerationPolicy")
public external object MeshApproximationUVGenerationPolicy {
  @JsName("PreferUVAtlas")
  public var UvAtlas: String

  @JsName("PreferXAtlas")
  public var XAtlas: String

  @JsName("PreferPatchBuilder")
  public var PatchBuilder: String

  @JsName("EMeshApproximationUVGenerationPolicy_MAX")
  public var Max: String
}

public open external class MeshApproximationSettings {
  @JsName("OutputType")
  public open var outputType: String

  @JsName("ApproximationAccuracy")
  public open var approximationAccuracy: Number

  @JsName("ClampVoxelDimension")
  public open var clampVoxelDimension: Number

  @JsName("bAttemptAutoThickening")
  public open var attemptAutoThickening: Boolean

  @JsName("TargetMinThicknessMultiplier")
  public open var targetMinThicknessMultiplier: Number

  @JsName("bIgnoreTinyParts")
  public open var ignoreTinyParts: Boolean

  @JsName("TinyPartSizeMultiplier")
  public open var tinyPartSizeMultiplier: Number

  @JsName("BaseCapping")
  public open var baseCapping: String

  @JsName("WindingThreshold")
  public open var windingThreshold: Number

  @JsName("bFillGaps")
  public open var fillGaps: Boolean

  @JsName("GapDistance")
  public open var gapDistance: Number

  @JsName("OcclusionMethod")
  public open var occlusionMethod: String

  @JsName("bOccludeFromBottom")
  public open var occludeFromBottom: Boolean

  @JsName("SimplifyMethod")
  public open var simplifyMethod: String

  @JsName("TargetTriCount")
  public open var targetTriCount: Number

  @JsName("TrianglesPerM")
  public open var trianglesPerM: Number

  @JsName("GeometricDeviation")
  public open var geometricDeviation: Number

  @JsName("GroundClipping")
  public open var groundClipping: String

  @JsName("GroundClippingZHeight")
  public open var groundClippingZHeight: Number

  @JsName("bEstimateHardNormals")
  public open var estimateHardNormals: Boolean

  @JsName("HardNormalAngle")
  public open var hardNormalAngle: Number

  @JsName("UVGenerationMethod")
  public open var uvGenerationMethod: String

  @JsName("InitialPatchCount")
  public open var initialPatchCount: Number

  @JsName("CurvatureAlignment")
  public open var curvatureAlignment: Number

  @JsName("MergingThreshold")
  public open var mergingThreshold: Number

  @JsName("MaxAngleDeviation")
  public open var maxAngleDeviation: Number

  @JsName("bGenerateNaniteEnabledMesh")
  public open var generateNaniteEnabledMesh: Boolean

  @JsName("NaniteProxyTrianglePercent")
  public open var naniteProxyTrianglePercent: Number

  @JsName("bSupportRayTracing")
  public open var supportRayTracing: Boolean

  @JsName("bAllowDistanceField")
  public open var allowDistanceField: Boolean

  @JsName("MultiSamplingAA")
  public open var multiSamplingAa: Number

  @JsName("RenderCaptureResolution")
  public open var renderCaptureResolution: Number

  @JsName("MaterialSettings")
  public open var materialSettings: MaterialProxySettings

  @JsName("CaptureFieldOfView")
  public open var captureFieldOfView: Number

  @JsName("NearPlaneDist")
  public open var nearPlaneDist: Number

  @JsName("bUseRenderLODMeshes")
  public open var useRenderLodMeshes: Boolean

  @JsName("bEnableSimplifyPrePass")
  public open var enableSimplifyPrePass: Boolean

  @JsName("bEnableParallelBaking")
  public open var enableParallelBaking: Boolean

  @JsName("bPrintDebugMessages")
  public open var printDebugMessages: Boolean

  @JsName("bEmitFullDebugMesh")
  public open var emitFullDebugMesh: Boolean

  public open fun clone(): MeshApproximationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MeshApproximationSettings

    @JsName("C")
    public fun copy(other: Any): MeshApproximationSettings
  }
}

@JsName("HLODLayer")
public open external class HlodLayer(
  outer: UObject,
) : UObject {
  @JsName("LayerType")
  public open var layerType: String

  @JsName("HLODBuilderClass")
  public open var hlodBuilderClass: UnrealEngineClass

  @JsName("HLODBuilderSettings")
  public open var hlodBuilderSettings: HlodBuilderSettings

  @JsName("bIsSpatiallyLoaded")
  public open var isSpatiallyLoaded: Boolean

  @JsName("bAlwaysLoaded")
  public open var alwaysLoaded: Boolean

  @JsName("CellSize")
  public open var cellSize: Number

  @JsName("LoadingRange")
  public open var loadingRange: Any

  @JsName("ParentLayer")
  public open var parentLayer: HlodLayer

  @JsName("MeshMergeSettings")
  public open var meshMergeSettings: MeshMergingSettings

  @JsName("MeshSimplifySettings")
  public open var meshSimplifySettings: MeshProxySettings

  @JsName("MeshApproximationSettings")
  public open var meshApproximationSettings: MeshApproximationSettings

  @JsName("HLODMaterial")
  public open var hlodMaterial: Material

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HlodLayer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HlodLayer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HlodLayer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HlodLayer

    @JsName("C")
    public fun copy(other: UObject): HlodLayer

    @JsName("C")
    public fun copy(other: Any): HlodLayer
  }
}

public open external class WorldPartition(
  outer: UObject,
) : ActorDescContainer {
  @JsName("EditorHash")
  public open var editorHash: WorldPartitionEditorHash

  @JsName("WorldPartitionStreamingPolicyClass")
  public open var worldPartitionStreamingPolicyClass: UnrealEngineClass

  @JsName("bEnableStreaming")
  public open var enableStreaming: Boolean

  @JsName("bStreamingWasEnabled")
  public open var streamingWasEnabled: Boolean

  @JsName("RuntimeHash")
  public open var runtimeHash: WorldPartitionRuntimeHash

  @JsName("DefaultHLODLayer")
  public open var defaultHlodLayer: HlodLayer

  @JsName("StreamingPolicy")
  public open var streamingPolicy: WorldPartitionStreamingPolicy

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldPartition

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldPartition

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldPartition

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldPartition

    @JsName("C")
    public fun copy(other: UObject): WorldPartition

    @JsName("C")
    public fun copy(other: Any): WorldPartition
  }
}

public open external class DefaultPhysicsVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : PhysicsVolume {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DefaultPhysicsVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DefaultPhysicsVolume

    @JsName("C")
    public fun copy(other: UObject): DefaultPhysicsVolume

    @JsName("C")
    public fun copy(other: Any): DefaultPhysicsVolume
  }
}

public open external class PhysicsCollisionHandler(
  outer: UObject,
) : UObject {
  @JsName("ImpactThreshold")
  public open var impactThreshold: Number

  @JsName("ImpactReFireDelay")
  public open var impactReFireDelay: Number

  @JsName("DefaultImpactSound")
  public open var defaultImpactSound: SoundBase

  @JsName("LastImpactSoundTime")
  public open var lastImpactSoundTime: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsCollisionHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsCollisionHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsCollisionHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsCollisionHandler

    @JsName("C")
    public fun copy(other: UObject): PhysicsCollisionHandler

    @JsName("C")
    public fun copy(other: Any): PhysicsCollisionHandler
  }
}

public open external class GameSession(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("MaxSpectators")
  public open var maxSpectators: Number

  @JsName("MaxPlayers")
  public open var maxPlayers: Number

  @JsName("MaxPartySize")
  public open var maxPartySize: Number

  @JsName("MaxSplitscreensPerConnection")
  public open var maxSplitscreensPerConnection: Number

  @JsName("bRequiresPushToTalk")
  public open var requiresPushToTalk: Boolean

  @JsName("SessionName")
  public open var sessionName: String

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameSession

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameSession

    @JsName("C")
    public fun copy(other: UObject): GameSession

    @JsName("C")
    public fun copy(other: Any): GameSession
  }
}

public open external class GameStateBase(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("GameModeClass")
  public open var gameModeClass: UnrealEngineClass

  @JsName("AuthorityGameMode")
  public open var authorityGameMode: GameModeBase

  @JsName("SpectatorClass")
  public open var spectatorClass: UnrealEngineClass

  @JsName("PlayerArray")
  public open var playerArray: Array<PlayerState>

  @JsName("bReplicatedHasBegunPlay")
  public open var replicatedHasBegunPlay: Boolean

  @JsName("ReplicatedWorldTimeSeconds")
  public open var replicatedWorldTimeSeconds: Number

  @JsName("ServerWorldTimeSecondsDelta")
  public open var serverWorldTimeSecondsDelta: Number

  @JsName("ServerWorldTimeSecondsUpdateFrequency")
  public open var serverWorldTimeSecondsUpdateFrequency: Number

  @JsName("OnRep_SpectatorClass")
  public open fun onRepSpectatorClass(): Unit

  @JsName("OnRep_ReplicatedWorldTimeSeconds")
  public open fun onRepReplicatedWorldTimeSeconds(): Unit

  @JsName("OnRep_ReplicatedHasBegunPlay")
  public open fun onRepReplicatedHasBegunPlay(): Unit

  @JsName("OnRep_GameModeClass")
  public open fun onRepGameModeClass(): Unit

  @JsName("HasMatchStarted")
  public open fun hasMatchStarted(): Boolean

  @JsName("HasMatchEnded")
  public open fun hasMatchEnded(): Boolean

  @JsName("HasBegunPlay")
  public open fun hasBegunPlay(): Boolean

  @JsName("GetServerWorldTimeSeconds")
  public open fun getServerWorldTimeSeconds(): Number

  @JsName("GetPlayerStartTime")
  public open fun getPlayerStartTime(controller: Controller): Number

  @JsName("GetPlayerRespawnDelay")
  public open fun getPlayerRespawnDelay(controller: Controller): Number

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameStateBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameStateBase

    @JsName("C")
    public fun copy(other: UObject): GameStateBase

    @JsName("C")
    public fun copy(other: Any): GameStateBase
  }
}

public open external class ServerStatReplicator(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("bUpdateStatNet")
  public open var updateStatNet: Boolean

  @JsName("bOverwriteClientStats")
  public open var overwriteClientStats: Boolean

  @JsName("Channels")
  public open var channels: Any

  @JsName("InRate")
  public open var inRate: Any

  @JsName("OutRate")
  public open var outRate: Any

  @JsName("MaxPacketOverhead")
  public open var maxPacketOverhead: Any

  @JsName("InRateClientMax")
  public open var inRateClientMax: Any

  @JsName("InRateClientMin")
  public open var inRateClientMin: Any

  @JsName("InRateClientAvg")
  public open var inRateClientAvg: Any

  @JsName("InPacketsClientMax")
  public open var inPacketsClientMax: Any

  @JsName("InPacketsClientMin")
  public open var inPacketsClientMin: Any

  @JsName("InPacketsClientAvg")
  public open var inPacketsClientAvg: Any

  @JsName("OutRateClientMax")
  public open var outRateClientMax: Any

  @JsName("OutRateClientMin")
  public open var outRateClientMin: Any

  @JsName("OutRateClientAvg")
  public open var outRateClientAvg: Any

  @JsName("OutPacketsClientMax")
  public open var outPacketsClientMax: Any

  @JsName("OutPacketsClientMin")
  public open var outPacketsClientMin: Any

  @JsName("OutPacketsClientAvg")
  public open var outPacketsClientAvg: Any

  @JsName("NetNumClients")
  public open var netNumClients: Any

  @JsName("InPackets")
  public open var inPackets: Any

  @JsName("OutPackets")
  public open var outPackets: Any

  @JsName("InBunches")
  public open var inBunches: Any

  @JsName("OutBunches")
  public open var outBunches: Any

  @JsName("OutLoss")
  public open var outLoss: Any

  @JsName("InLoss")
  public open var inLoss: Any

  @JsName("VoiceBytesSent")
  public open var voiceBytesSent: Any

  @JsName("VoiceBytesRecv")
  public open var voiceBytesRecv: Any

  @JsName("VoicePacketsSent")
  public open var voicePacketsSent: Any

  @JsName("VoicePacketsRecv")
  public open var voicePacketsRecv: Any

  @JsName("PercentInVoice")
  public open var percentInVoice: Any

  @JsName("PercentOutVoice")
  public open var percentOutVoice: Any

  @JsName("NumActorChannels")
  public open var numActorChannels: Any

  @JsName("NumConsideredActors")
  public open var numConsideredActors: Any

  @JsName("PrioritizedActors")
  public open var prioritizedActors: Any

  @JsName("NumRelevantActors")
  public open var numRelevantActors: Any

  @JsName("NumRelevantDeletedActors")
  public open var numRelevantDeletedActors: Any

  @JsName("NumReplicatedActorAttempts")
  public open var numReplicatedActorAttempts: Any

  @JsName("NumReplicatedActors")
  public open var numReplicatedActors: Any

  @JsName("NumActors")
  public open var numActors: Any

  @JsName("NumNetActors")
  public open var numNetActors: Any

  @JsName("NumDormantActors")
  public open var numDormantActors: Any

  @JsName("NumInitiallyDormantActors")
  public open var numInitiallyDormantActors: Any

  @JsName("NumNetGUIDsAckd")
  public open var numNetGuiDsAckd: Any

  @JsName("NumNetGUIDsPending")
  public open var numNetGuiDsPending: Any

  @JsName("NumNetGUIDsUnAckd")
  public open var numNetGuiDsUnAckd: Any

  @JsName("ObjPathBytes")
  public open var objPathBytes: Any

  @JsName("NetGUIDOutRate")
  public open var netGuidOutRate: Any

  @JsName("NetGUIDInRate")
  public open var netGuidInRate: Any

  @JsName("NetSaturated")
  public open var netSaturated: Any

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ServerStatReplicator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ServerStatReplicator

    @JsName("C")
    public fun copy(other: UObject): ServerStatReplicator

    @JsName("C")
    public fun copy(other: Any): ServerStatReplicator
  }
}

@JsName("T$288")
public external interface ControllerProvider {
  @JsName("C")
  public var controller: Controller
}

public open external class GameModeBase(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("OptionsString")
  public open var optionsString: String

  @JsName("GameSessionClass")
  public open var gameSessionClass: UnrealEngineClass

  @JsName("GameStateClass")
  public open var gameStateClass: UnrealEngineClass

  @JsName("PlayerControllerClass")
  public open var playerControllerClass: UnrealEngineClass

  @JsName("PlayerStateClass")
  public open var playerStateClass: UnrealEngineClass

  @JsName("HUDClass")
  public open var hudClass: UnrealEngineClass

  @JsName("DefaultPawnClass")
  public open var defaultPawnClass: UnrealEngineClass

  @JsName("SpectatorClass")
  public open var spectatorClass: UnrealEngineClass

  @JsName("ReplaySpectatorPlayerControllerClass")
  public open var replaySpectatorPlayerControllerClass: UnrealEngineClass

  @JsName("ServerStatReplicatorClass")
  public open var serverStatReplicatorClass: UnrealEngineClass

  @JsName("GameSession")
  public open var gameSession: GameSession

  @JsName("GameState")
  public open var gameState: GameStateBase

  @JsName("ServerStatReplicator")
  public open var serverStatReplicator: ServerStatReplicator

  @JsName("DefaultPlayerName")
  public open var defaultPlayerName: String

  @JsName("bUseSeamlessTravel")
  public open var useSeamlessTravel: Boolean

  @JsName("bStartPlayersAsSpectators")
  public open var startPlayersAsSpectators: Boolean

  @JsName("bPauseable")
  public open var pauseable: Boolean

  @JsName("StartPlay")
  public open fun startPlay(): Unit

  @JsName("SpawnDefaultPawnFor")
  public open fun spawnDefaultPawnFor(newPlayer: Controller, startSpot: Actor): Pawn

  @JsName("SpawnDefaultPawnAtTransform")
  public open fun spawnDefaultPawnAtTransform(newPlayer: Controller, spawnTransform: Transform):
      Pawn

  @JsName("ShouldReset")
  public open fun shouldReset(actorToReset: Actor): Boolean

  @JsName("ReturnToMainMenuHost")
  public open fun returnToMainMenuHost(): Unit

  @JsName("RestartPlayerAtTransform")
  public open fun restartPlayerAtTransform(newPlayer: Controller, spawnTransform: Transform): Unit

  @JsName("RestartPlayerAtPlayerStart")
  public open fun restartPlayerAtPlayerStart(newPlayer: Controller, startSpot: Actor): Unit

  @JsName("RestartPlayer")
  public open fun restartPlayer(newPlayer: Controller): Unit

  @JsName("ResetLevel")
  public open fun resetLevel(): Unit

  @JsName("PlayerCanRestart")
  public open fun playerCanRestart(player: PlayerController): Boolean

  @JsName("MustSpectate")
  public open fun mustSpectate(newPlayerController: PlayerController): Boolean

  @JsName("K2_PostLogin")
  public open fun k2PostLogin(newPlayer: PlayerController): Unit

  @JsName("K2_OnSwapPlayerControllers")
  public open fun k2OnSwapPlayerControllers(oldPc: PlayerController, newPc: PlayerController): Unit

  @JsName("K2_OnRestartPlayer")
  public open fun k2OnRestartPlayer(newPlayer: Controller): Unit

  @JsName("K2_OnLogout")
  public open fun k2OnLogout(exitingController: Controller): Unit

  @JsName("K2_OnChangeName")
  public open fun k2OnChangeName(
    other: Controller,
    newName: String,
    nameChange: Boolean,
  ): Unit

  @JsName("K2_FindPlayerStart")
  public open fun k2FindPlayerStart(player: Controller, incomingName: String): Actor

  @JsName("InitStartSpot")
  public open fun initStartSpot(startSpot: Actor, newPlayer: Controller): Unit

  @JsName("InitializeHUDForPlayer")
  public open fun initializeHudForPlayer(newPlayer: PlayerController): Unit

  @JsName("HasMatchStarted")
  public open fun hasMatchStarted(): Boolean

  @JsName("HasMatchEnded")
  public open fun hasMatchEnded(): Boolean

  @JsName("HandleStartingNewPlayer")
  public open fun handleStartingNewPlayer(newPlayer: PlayerController): Unit

  @JsName("GetNumSpectators")
  public open fun getNumSpectators(): Number

  @JsName("GetNumPlayers")
  public open fun getNumPlayers(): Number

  @JsName("GetDefaultPawnClassForController")
  public open fun getDefaultPawnClassForController(inController: Controller): UnrealEngineClass

  @JsName("FindPlayerStart")
  public open fun findPlayerStart(player: Controller, incomingName: String): Actor

  @JsName("ChoosePlayerStart")
  public open fun choosePlayerStart(player: Controller): Actor

  @JsName("ChangeName")
  public open fun changeName(
    controller: Controller,
    newName: String,
    nameChange: Boolean,
  ): Unit

  @JsName("CanSpectate")
  public open fun canSpectate(viewer: PlayerController, viewTarget: PlayerState): Boolean

  @JsName("HandleSeamlessTravelPlayer")
  public open fun handleSeamlessTravelPlayer(c: Controller): ControllerProvider

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameModeBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameModeBase

    @JsName("C")
    public fun copy(other: UObject): GameModeBase

    @JsName("C")
    public fun copy(other: Any): GameModeBase

    @JsName("HandleSeamlessTravelPlayer")
    public fun handleSeamlessTravelPlayer(gameMode: GameModeBase, c: Controller): ControllerProvider
  }
}

public open external class GameNetworkManager(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("BadPacketLossThreshold")
  public open var badPacketLossThreshold: Number

  @JsName("SeverePacketLossThreshold")
  public open var severePacketLossThreshold: Number

  @JsName("BadPingThreshold")
  public open var badPingThreshold: Number

  @JsName("SeverePingThreshold")
  public open var severePingThreshold: Number

  @JsName("AdjustedNetSpeed")
  public open var adjustedNetSpeed: Number

  @JsName("LastNetSpeedUpdateTime")
  public open var lastNetSpeedUpdateTime: Number

  @JsName("TotalNetBandwidth")
  public open var totalNetBandwidth: Number

  @JsName("MinDynamicBandwidth")
  public open var minDynamicBandwidth: Number

  @JsName("MaxDynamicBandwidth")
  public open var maxDynamicBandwidth: Number

  @JsName("bIsStandbyCheckingEnabled")
  public open var isStandbyCheckingEnabled: Boolean

  @JsName("bHasStandbyCheatTriggered")
  public open var hasStandbyCheatTriggered: Boolean

  @JsName("StandbyRxCheatTime")
  public open var standbyRxCheatTime: Number

  @JsName("StandbyTxCheatTime")
  public open var standbyTxCheatTime: Number

  @JsName("PercentMissingForRxStandby")
  public open var percentMissingForRxStandby: Number

  @JsName("PercentMissingForTxStandby")
  public open var percentMissingForTxStandby: Number

  @JsName("PercentForBadPing")
  public open var percentForBadPing: Number

  @JsName("JoinInProgressStandbyWaitTime")
  public open var joinInProgressStandbyWaitTime: Number

  @JsName("MoveRepSize")
  public open var moveRepSize: Number

  public open var MAXPOSITIONERRORSQUARED: Number

  public open var MAXNEARZEROVELOCITYSQUARED: Number

  public open var CLIENTADJUSTUPDATECOST: Number

  public open var MAXCLIENTUPDATEINTERVAL: Number

  @JsName("MaxClientForcedUpdateDuration")
  public open var maxClientForcedUpdateDuration: Number

  @JsName("ServerForcedUpdateHitchThreshold")
  public open var serverForcedUpdateHitchThreshold: Number

  @JsName("ServerForcedUpdateHitchCooldown")
  public open var serverForcedUpdateHitchCooldown: Number

  @JsName("MaxMoveDeltaTime")
  public open var maxMoveDeltaTime: Number

  @JsName("MaxClientSmoothingDeltaTime")
  public open var maxClientSmoothingDeltaTime: Number

  @JsName("ClientNetSendMoveDeltaTime")
  public open var clientNetSendMoveDeltaTime: Number

  @JsName("ClientNetSendMoveDeltaTimeThrottled")
  public open var clientNetSendMoveDeltaTimeThrottled: Number

  @JsName("ClientNetSendMoveDeltaTimeStationary")
  public open var clientNetSendMoveDeltaTimeStationary: Number

  @JsName("ClientNetSendMoveThrottleAtNetSpeed")
  public open var clientNetSendMoveThrottleAtNetSpeed: Number

  @JsName("ClientNetSendMoveThrottleOverPlayerCount")
  public open var clientNetSendMoveThrottleOverPlayerCount: Number

  @JsName("ClientAuthorativePosition")
  public open var clientAuthorativePosition: Boolean

  @JsName("ClientErrorUpdateRateLimit")
  public open var clientErrorUpdateRateLimit: Number

  @JsName("ClientNetCamUpdateDeltaTime")
  public open var clientNetCamUpdateDeltaTime: Number

  @JsName("ClientNetCamUpdatePositionLimit")
  public open var clientNetCamUpdatePositionLimit: Number

  @JsName("bMovementTimeDiscrepancyDetection")
  public open var movementTimeDiscrepancyDetection: Boolean

  @JsName("bMovementTimeDiscrepancyResolution")
  public open var movementTimeDiscrepancyResolution: Boolean

  @JsName("MovementTimeDiscrepancyMaxTimeMargin")
  public open var movementTimeDiscrepancyMaxTimeMargin: Number

  @JsName("MovementTimeDiscrepancyMinTimeMargin")
  public open var movementTimeDiscrepancyMinTimeMargin: Number

  @JsName("MovementTimeDiscrepancyResolutionRate")
  public open var movementTimeDiscrepancyResolutionRate: Number

  @JsName("MovementTimeDiscrepancyDriftAllowance")
  public open var movementTimeDiscrepancyDriftAllowance: Number

  @JsName("bMovementTimeDiscrepancyForceCorrectionsDuringResolution")
  public open var movementTimeDiscrepancyForceCorrectionsDuringResolution: Boolean

  @JsName("bUseDistanceBasedRelevancy")
  public open var useDistanceBasedRelevancy: Boolean

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameNetworkManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameNetworkManager

    @JsName("C")
    public fun copy(other: UObject): GameNetworkManager

    @JsName("C")
    public fun copy(other: Any): GameNetworkManager
  }
}

@JsName("EVolumeLightingMethod")
public external object VolumeLightingMethod {
  @JsName("VLM_VolumetricLightmap")
  public var VolumetricLightmap: String

  @JsName("VLM_SparseVolumeLightingSamples")
  public var SparseVolumeLightingSamples: String

  @JsName("VLM_MAX")
  public var Max: String
}

public open external class LightmassWorldInfoSettings {
  @JsName("StaticLightingLevelScale")
  public open var staticLightingLevelScale: Number

  @JsName("NumIndirectLightingBounces")
  public open var numIndirectLightingBounces: Number

  @JsName("NumSkyLightingBounces")
  public open var numSkyLightingBounces: Number

  @JsName("IndirectLightingQuality")
  public open var indirectLightingQuality: Number

  @JsName("IndirectLightingSmoothness")
  public open var indirectLightingSmoothness: Number

  @JsName("EnvironmentColor")
  public open var environmentColor: Color

  @JsName("EnvironmentIntensity")
  public open var environmentIntensity: Number

  @JsName("EmissiveBoost")
  public open var emissiveBoost: Number

  @JsName("DiffuseBoost")
  public open var diffuseBoost: Number

  @JsName("VolumeLightingMethod")
  public open var volumeLightingMethod: String

  @JsName("bUseAmbientOcclusion")
  public open var useAmbientOcclusion: Boolean

  @JsName("bGenerateAmbientOcclusionMaterialMask")
  public open var generateAmbientOcclusionMaterialMask: Boolean

  @JsName("bVisualizeMaterialDiffuse")
  public open var visualizeMaterialDiffuse: Boolean

  @JsName("bVisualizeAmbientOcclusion")
  public open var visualizeAmbientOcclusion: Boolean

  @JsName("bCompressLightmaps")
  public open var compressLightmaps: Boolean

  @JsName("VolumetricLightmapDetailCellSize")
  public open var volumetricLightmapDetailCellSize: Number

  @JsName("VolumetricLightmapMaximumBrickMemoryMb")
  public open var volumetricLightmapMaximumBrickMemoryMb: Number

  @JsName("VolumetricLightmapSphericalHarmonicSmoothing")
  public open var volumetricLightmapSphericalHarmonicSmoothing: Number

  @JsName("VolumeLightSamplePlacementScale")
  public open var volumeLightSamplePlacementScale: Number

  @JsName("DirectIlluminationOcclusionFraction")
  public open var directIlluminationOcclusionFraction: Number

  @JsName("IndirectIlluminationOcclusionFraction")
  public open var indirectIlluminationOcclusionFraction: Number

  @JsName("OcclusionExponent")
  public open var occlusionExponent: Number

  @JsName("FullyOccludedSamplesFraction")
  public open var fullyOccludedSamplesFraction: Number

  @JsName("MaxOcclusionDistance")
  public open var maxOcclusionDistance: Number

  public open fun clone(): LightmassWorldInfoSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassWorldInfoSettings

    @JsName("C")
    public fun copy(other: Any): LightmassWorldInfoSettings
  }
}

public external object ReverbPreset {
  @JsName("REVERB_Default")
  public var reverbDefault: String

  @JsName("REVERB_Bathroom")
  public var reverbBathroom: String

  @JsName("REVERB_StoneRoom")
  public var reverbStoneRoom: String

  @JsName("REVERB_Auditorium")
  public var reverbAuditorium: String

  @JsName("REVERB_ConcertHall")
  public var reverbConcertHall: String

  @JsName("REVERB_Cave")
  public var reverbCave: String

  @JsName("REVERB_Hallway")
  public var reverbHallway: String

  @JsName("REVERB_StoneCorridor")
  public var reverbStoneCorridor: String

  @JsName("REVERB_Alley")
  public var reverbAlley: String

  @JsName("REVERB_Forest")
  public var reverbForest: String

  @JsName("REVERB_City")
  public var reverbCity: String

  @JsName("REVERB_Mountains")
  public var reverbMountains: String

  @JsName("REVERB_Quarry")
  public var reverbQuarry: String

  @JsName("REVERB_Plain")
  public var reverbPlain: String

  @JsName("REVERB_ParkingLot")
  public var reverbParkingLot: String

  @JsName("REVERB_SewerPipe")
  public var reverbSewerPipe: String

  @JsName("REVERB_Underwater")
  public var reverbUnderwater: String

  @JsName("REVERB_SmallRoom")
  public var reverbSmallRoom: String

  @JsName("REVERB_MediumRoom")
  public var reverbMediumRoom: String

  @JsName("REVERB_LargeRoom")
  public var reverbLargeRoom: String

  @JsName("REVERB_MediumHall")
  public var reverbMediumHall: String

  @JsName("REVERB_LargeHall")
  public var reverbLargeHall: String

  @JsName("REVERB_Plate")
  public var reverbPlate: String

  @JsName("REVERB_MAX")
  public var reverbmax: String
}

public open external class ReverbEffect(
  outer: UObject,
) : UObject {
  @JsName("bBypassEarlyReflections")
  public open var bypassEarlyReflections: Boolean

  @JsName("ReflectionsDelay")
  public open var reflectionsDelay: Number

  @JsName("GainHF")
  public open var gainHf: Number

  @JsName("ReflectionsGain")
  public open var reflectionsGain: Number

  @JsName("bBypassLateReflections")
  public open var bypassLateReflections: Boolean

  @JsName("LateDelay")
  public open var lateDelay: Number

  @JsName("DecayTime")
  public open var decayTime: Number

  @JsName("Density")
  public open var density: Number

  @JsName("Diffusion")
  public open var diffusion: Number

  @JsName("AirAbsorptionGainHF")
  public open var airAbsorptionGainHf: Number

  @JsName("DecayHFRatio")
  public open var decayHfRatio: Number

  @JsName("LateGain")
  public open var lateGain: Number

  @JsName("Gain")
  public open var gain: Number

  @JsName("RoomRolloffFactor")
  public open var roomRolloffFactor: Number

  @JsName("bChanged")
  public open var changed: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ReverbEffect

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ReverbEffect

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ReverbEffect

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ReverbEffect

    @JsName("C")
    public fun copy(other: UObject): ReverbEffect

    @JsName("C")
    public fun copy(other: Any): ReverbEffect
  }
}

public open external class ReverbSettings {
  @JsName("bApplyReverb")
  public open var applyReverb: Boolean

  @JsName("ReverbType")
  public open var reverbType: String

  @JsName("ReverbEffect")
  public open var reverbEffect: ReverbEffect

  @JsName("ReverbPluginEffect")
  public open var reverbPluginEffect: SoundEffectSubmixPreset

  @JsName("Volume")
  public open var volume: Number

  @JsName("FadeTime")
  public open var fadeTime: Number

  public open fun clone(): ReverbSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ReverbSettings

    @JsName("C")
    public fun copy(other: Any): ReverbSettings
  }
}

public open external class InteriorSettings {
  @JsName("bIsWorldSettings")
  public open var isWorldSettings: Boolean

  @JsName("ExteriorVolume")
  public open var exteriorVolume: Number

  @JsName("ExteriorTime")
  public open var exteriorTime: Number

  @JsName("ExteriorLPF")
  public open var exteriorLpf: Number

  @JsName("ExteriorLPFTime")
  public open var exteriorLpfTime: Number

  @JsName("InteriorVolume")
  public open var interiorVolume: Number

  @JsName("InteriorTime")
  public open var interiorTime: Number

  @JsName("InteriorLPF")
  public open var interiorLpf: Number

  @JsName("InteriorLPFTime")
  public open var interiorLpfTime: Number

  public open fun clone(): InteriorSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InteriorSettings

    @JsName("C")
    public fun copy(other: Any): InteriorSettings
  }
}

public open external class HierarchicalSimplification {
  @JsName("TransitionScreenSize")
  public open var transitionScreenSize: Number

  @JsName("OverrideDrawDistance")
  public open var overrideDrawDistance: Number

  @JsName("bUseOverrideDrawDistance")
  public open var useOverrideDrawDistance: Boolean

  @JsName("bAllowSpecificExclusion")
  public open var allowSpecificExclusion: Boolean

  @JsName("bSimplifyMesh")
  public open var simplifyMesh: Boolean

  @JsName("bOnlyGenerateClustersForVolumes")
  public open var onlyGenerateClustersForVolumes: Boolean

  @JsName("bReusePreviousLevelClusters")
  public open var reusePreviousLevelClusters: Boolean

  @JsName("ProxySetting")
  public open var proxySetting: MeshProxySettings

  @JsName("MergeSetting")
  public open var mergeSetting: MeshMergingSettings

  @JsName("DesiredBoundRadius")
  public open var desiredBoundRadius: Number

  @JsName("DesiredFillingPercentage")
  public open var desiredFillingPercentage: Number

  @JsName("MinNumberOfActorsToBuild")
  public open var minNumberOfActorsToBuild: Number

  public open fun clone(): HierarchicalSimplification

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): HierarchicalSimplification

    @JsName("C")
    public fun copy(other: Any): HierarchicalSimplification
  }
}

public open external class BookmarkBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BookmarkBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BookmarkBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BookmarkBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BookmarkBase

    @JsName("C")
    public fun copy(other: UObject): BookmarkBase

    @JsName("C")
    public fun copy(other: Any): BookmarkBase
  }
}

public open external class BookMark(
  outer: UObject,
) : BookmarkBase {
  @JsName("Location")
  public open var location: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("HiddenLevels")
  public open var hiddenLevels: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BookMark

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BookMark

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BookMark

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BookMark

    @JsName("C")
    public fun copy(other: UObject): BookMark

    @JsName("C")
    public fun copy(other: Any): BookMark
  }
}

public open external class BroadphaseSettings {
  @JsName("bUseMBPOnClient")
  public open var useMbpOnClient: Boolean

  @JsName("bUseMBPOnServer")
  public open var useMbpOnServer: Boolean

  @JsName("bUseMBPOuterBounds")
  public open var useMbpOuterBounds: Boolean

  @JsName("MBPBounds")
  public open var mbpBounds: Box

  @JsName("MBPOuterBounds")
  public open var mbpOuterBounds: Box

  @JsName("MBPNumSubdivs")
  public open var mbpNumSubdivs: Any

  public open fun clone(): BroadphaseSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BroadphaseSettings

    @JsName("C")
    public fun copy(other: Any): BroadphaseSettings
  }
}

public open external class NetViewer {
  @JsName("Connection")
  public open var connection: NetConnection

  @JsName("InViewer")
  public open var inViewer: Actor

  @JsName("ViewTarget")
  public open var viewTarget: Actor

  @JsName("ViewLocation")
  public open var viewLocation: Vector

  @JsName("ViewDir")
  public open var viewDir: Vector

  public open fun clone(): NetViewer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NetViewer

    @JsName("C")
    public fun copy(other: Any): NetViewer
  }
}

public open external class WorldPartitionPerWorldSettings {
  @JsName("LoadedEditorGridCells")
  public open var loadedEditorGridCells: Array<String>

  @JsName("NotLoadedDataLayers")
  public open var notLoadedDataLayers: Array<String>

  @JsName("LoadedDataLayers")
  public open var loadedDataLayers: Array<String>

  @JsName("EditorGridConfigHash")
  public open var editorGridConfigHash: Any

  public open fun clone(): WorldPartitionPerWorldSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WorldPartitionPerWorldSettings

    @JsName("C")
    public fun copy(other: Any): WorldPartitionPerWorldSettings
  }
}

public open external class WorldSettings(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("VisibilityCellSize")
  public open var visibilityCellSize: Number

  @JsName("VisibilityAggressiveness")
  public open var visibilityAggressiveness: String

  @JsName("bPrecomputeVisibility")
  public open var precomputeVisibility: Boolean

  @JsName("bPlaceCellsOnlyAlongCameraTracks")
  public open var placeCellsOnlyAlongCameraTracks: Boolean

  @JsName("bEnableLargeWorlds")
  public open var enableLargeWorlds: Boolean

  @JsName("bEnableWorldBoundsChecks")
  public open var enableWorldBoundsChecks: Boolean

  @JsName("bEnableNavigationSystem")
  public open var enableNavigationSystem: Boolean

  @JsName("bEnableAISystem")
  public open var enableAiSystem: Boolean

  @JsName("bEnableWorldComposition")
  public open var enableWorldComposition: Boolean

  @JsName("bUseClientSideLevelStreamingVolumes")
  public open var useClientSideLevelStreamingVolumes: Boolean

  @JsName("bEnableWorldOriginRebasing")
  public open var enableWorldOriginRebasing: Boolean

  @JsName("bWorldGravitySet")
  public open var worldGravitySet: Boolean

  @JsName("bGlobalGravitySet")
  public open var globalGravitySet: Boolean

  @JsName("bMinimizeBSPSections")
  public open var minimizeBspSections: Boolean

  @JsName("bForceNoPrecomputedLighting")
  public open var forceNoPrecomputedLighting: Boolean

  @JsName("bHighPriorityLoading")
  public open var highPriorityLoading: Boolean

  @JsName("bHighPriorityLoadingLocal")
  public open var highPriorityLoadingLocal: Boolean

  @JsName("bOverrideDefaultBroadphaseSettings")
  public open var overrideDefaultBroadphaseSettings: Boolean

  @JsName("bGenerateSingleClusterForLevel")
  public open var generateSingleClusterForLevel: Boolean

  @JsName("bIncludeGridSizeInNameForFoliageActors")
  public open var includeGridSizeInNameForFoliageActors: Boolean

  @JsName("bIncludeGridSizeInNameForPartitionedActors")
  public open var includeGridSizeInNameForPartitionedActors: Boolean

  @JsName("AISystemClass")
  public open var aiSystemClass: Class

  @JsName("LevelInstancePivotOffset")
  public open var levelInstancePivotOffset: Vector

  @JsName("NavigationSystemConfig")
  public open var navigationSystemConfig: NavigationSystemConfig

  @JsName("NavigationSystemConfigOverride")
  public open var navigationSystemConfigOverride: NavigationSystemConfig

  @JsName("WorldPartition")
  public open var worldPartition: WorldPartition

  @JsName("InstancedFoliageGridSize")
  public open var instancedFoliageGridSize: Any

  @JsName("NavigationDataChunkGridSize")
  public open var navigationDataChunkGridSize: Any

  @JsName("NavigationDataBuilderLoadingCellSize")
  public open var navigationDataBuilderLoadingCellSize: Any

  @JsName("DefaultPlacementGridSize")
  public open var defaultPlacementGridSize: Any

  @JsName("WorldToMeters")
  public open var worldToMeters: Number

  @JsName("KillZ")
  public open var killZ: Number

  @JsName("KillZDamageType")
  public open var killZDamageType: UnrealEngineClass

  @JsName("WorldGravityZ")
  public open var worldGravityZ: Number

  @JsName("GlobalGravityZ")
  public open var globalGravityZ: Number

  @JsName("DefaultPhysicsVolumeClass")
  public open var defaultPhysicsVolumeClass: UnrealEngineClass

  @JsName("PhysicsCollisionHandlerClass")
  public open var physicsCollisionHandlerClass: UnrealEngineClass

  @JsName("DefaultGameMode")
  public open var defaultGameMode: UnrealEngineClass

  @JsName("GameNetworkManagerClass")
  public open var gameNetworkManagerClass: UnrealEngineClass

  @JsName("PackedLightAndShadowMapTextureSize")
  public open var packedLightAndShadowMapTextureSize: Number

  @JsName("DefaultColorScale")
  public open var defaultColorScale: Vector

  @JsName("DefaultMaxDistanceFieldOcclusionDistance")
  public open var defaultMaxDistanceFieldOcclusionDistance: Number

  @JsName("GlobalDistanceFieldViewDistance")
  public open var globalDistanceFieldViewDistance: Number

  @JsName("DynamicIndirectShadowsSelfShadowingIntensity")
  public open var dynamicIndirectShadowsSelfShadowingIntensity: Number

  @JsName("LightmassSettings")
  public open var lightmassSettings: LightmassWorldInfoSettings

  @JsName("DefaultReverbSettings")
  public open var defaultReverbSettings: ReverbSettings

  @JsName("DefaultAmbientZoneSettings")
  public open var defaultAmbientZoneSettings: InteriorSettings

  @JsName("DefaultBaseSoundMix")
  public open var defaultBaseSoundMix: SoundMix

  @JsName("HLODSetupAsset")
  public open var hlodSetupAsset: Class

  @JsName("OverrideBaseMaterial")
  public open var overrideBaseMaterial: MaterialInterface

  @JsName("HierarchicalLODSetup")
  public open var hierarchicalLodSetup: Array<HierarchicalSimplification>

  @JsName("NumHLODLevels")
  public open var numHlodLevels: Number

  @JsName("HLODBakingTransform")
  public open var hlodBakingTransform: Transform

  @JsName("Bookmarks")
  public open var bookmarks: BookMark

  @JsName("TimeDilation")
  public open var timeDilation: Number

  @JsName("MatineeTimeDilation")
  public open var matineeTimeDilation: Number

  @JsName("DemoPlayTimeDilation")
  public open var demoPlayTimeDilation: Number

  @JsName("MinGlobalTimeDilation")
  public open var minGlobalTimeDilation: Number

  @JsName("MaxGlobalTimeDilation")
  public open var maxGlobalTimeDilation: Number

  @JsName("MinUndilatedFrameTime")
  public open var minUndilatedFrameTime: Number

  @JsName("MaxUndilatedFrameTime")
  public open var maxUndilatedFrameTime: Number

  @JsName("BroadphaseSettings")
  public open var broadphaseSettings: BroadphaseSettings

  @JsName("ReplicationViewers")
  public open var replicationViewers: Array<NetViewer>

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("PauserPlayerState")
  public open var pauserPlayerState: PlayerState

  @JsName("DefaultWorldPartitionSettings")
  public open var defaultWorldPartitionSettings: WorldPartitionPerWorldSettings

  @JsName("MaxNumberOfBookmarks")
  public open var maxNumberOfBookmarks: Number

  @JsName("DefaultBookmarkClass")
  public open var defaultBookmarkClass: UnrealEngineClass

  @JsName("BookmarkArray")
  public open var bookmarkArray: Array<BookmarkBase>

  @JsName("LastBookmarkClass")
  public open var lastBookmarkClass: UnrealEngineClass

  @JsName("bEnableHierarchicalLODSystem")
  public open var enableHierarchicalLodSystem: Boolean

  @JsName("OnRep_WorldGravityZ")
  public open fun onRepWorldGravityZ(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldSettings

    @JsName("C")
    public fun copy(other: UObject): WorldSettings

    @JsName("C")
    public fun copy(other: Any): WorldSettings
  }
}

public open external class WorldDataLayers(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("bAllowRuntimeDataLayerEditing")
  public open var allowRuntimeDataLayerEditing: Boolean

  @JsName("WorldDataLayers")
  public open var worldDataLayers: Any

  @JsName("RepActiveDataLayerNames")
  public open var repActiveDataLayerNames: Array<String>

  @JsName("RepLoadedDataLayerNames")
  public open var repLoadedDataLayerNames: Array<String>

  @JsName("RepEffectiveActiveDataLayerNames")
  public open var repEffectiveActiveDataLayerNames: Array<String>

  @JsName("RepEffectiveLoadedDataLayerNames")
  public open var repEffectiveLoadedDataLayerNames: Array<String>

  @JsName("OnRep_LoadedDataLayerNames")
  public open fun onRepLoadedDataLayerNames(): Unit

  @JsName("OnRep_EffectiveLoadedDataLayerNames")
  public open fun onRepEffectiveLoadedDataLayerNames(): Unit

  @JsName("OnRep_EffectiveActiveDataLayerNames")
  public open fun onRepEffectiveActiveDataLayerNames(): Unit

  @JsName("OnRep_ActiveDataLayerNames")
  public open fun onRepActiveDataLayerNames(): Unit

  @JsName("OnDataLayerRuntimeStateChanged")
  public open fun onDataLayerRuntimeStateChanged(inDataLayer: DataLayer, inState: String): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldDataLayers

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldDataLayers

    @JsName("C")
    public fun copy(other: UObject): WorldDataLayers

    @JsName("C")
    public fun copy(other: Any): WorldDataLayers
  }
}

public open external class ReplicatedStaticActorDestructionInfo {
  @JsName("ObjClass")
  public open var objClass: UnrealEngineClass

  public open fun clone(): ReplicatedStaticActorDestructionInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ReplicatedStaticActorDestructionInfo

    @JsName("C")
    public fun copy(other: Any): ReplicatedStaticActorDestructionInfo
  }
}

public open external class ActorFolder(
  outer: UObject,
) : UObject {
  @JsName("ParentFolderGuid")
  public open var parentFolderGuid: Guid

  @JsName("FolderGuid")
  public open var folderGuid: Guid

  @JsName("FolderLabel")
  public open var folderLabel: String

  @JsName("bFolderInitiallyExpanded")
  public open var folderInitiallyExpanded: Boolean

  @JsName("bIsDeleted")
  public open var isDeleted: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFolder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFolder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFolder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFolder

    @JsName("C")
    public fun copy(other: UObject): ActorFolder

    @JsName("C")
    public fun copy(other: Any): ActorFolder
  }
}

public open external class Level(
  outer: UObject,
) : UObject {
  @JsName("ActorsModifiedForPIE")
  public open var actorsModifiedForPie: Any

  @JsName("bUseExternalActors")
  public open var useExternalActors: Boolean

  @JsName("OwningWorld")
  public open var owningWorld: World

  @JsName("Model")
  public open var model: Model

  @JsName("ModelComponents")
  public open var modelComponents: Array<ModelComponent>

  @JsName("ActorCluster")
  public open var actorCluster: LevelActorContainer

  @JsName("LevelScriptBlueprint")
  public open var levelScriptBlueprint: LevelScriptBlueprint

  @JsName("TextureStreamingResourceGuids")
  public open var textureStreamingResourceGuids: Array<Guid>

  @JsName("NumTextureStreamingUnbuiltComponents")
  public open var numTextureStreamingUnbuiltComponents: Number

  @JsName("NumTextureStreamingDirtyResources")
  public open var numTextureStreamingDirtyResources: Number

  @JsName("LevelScriptActor")
  public open var levelScriptActor: LevelScriptActor

  @JsName("NavListStart")
  public open var navListStart: NavigationObjectBase

  @JsName("NavListEnd")
  public open var navListEnd: NavigationObjectBase

  @JsName("NavDataChunks")
  public open var navDataChunks: Array<NavigationDataChunk>

  @JsName("LightmapTotalSize")
  public open var lightmapTotalSize: Number

  @JsName("ShadowmapTotalSize")
  public open var shadowmapTotalSize: Number

  @JsName("StaticNavigableGeometry")
  public open var staticNavigableGeometry: Array<Vector>

  @JsName("StreamingTextureGuids")
  public open var streamingTextureGuids: Array<Guid>

  @JsName("StreamingTextures")
  public open var streamingTextures: Array<String>

  @JsName("PackedTextureStreamingQualityLevelFeatureLevel")
  public open var packedTextureStreamingQualityLevelFeatureLevel: Any

  @JsName("LevelBuildDataId")
  public open var levelBuildDataId: Guid

  @JsName("MapBuildData")
  public open var mapBuildData: MapBuildDataRegistry

  @JsName("LightBuildLevelOffset")
  public open var lightBuildLevelOffset: IntVector

  @JsName("bIsLightingScenario")
  public open var isLightingScenario: Boolean

  @JsName("bTextureStreamingRotationChanged")
  public open var textureStreamingRotationChanged: Boolean

  @JsName("bStaticComponentsRegisteredInStreamingManager")
  public open var staticComponentsRegisteredInStreamingManager: Boolean

  @JsName("bIsVisible")
  public open var isVisible: Boolean

  @JsName("bLocked")
  public open var locked: Boolean

  @JsName("bIsPartitioned")
  public open var isPartitioned: Boolean

  @JsName("bIsWorldPartitionRuntimeCell")
  public open var isWorldPartitionRuntimeCell: Boolean

  @JsName("LevelSimplification")
  public open var levelSimplification: LevelSimplificationDetails

  @JsName("LevelColor")
  public open var levelColor: LinearColor

  @JsName("bPromptWhenAddingToLevelBeforeCheckout")
  public open var promptWhenAddingToLevelBeforeCheckout: Boolean

  @JsName("bPromptWhenAddingToLevelOutsideBounds")
  public open var promptWhenAddingToLevelOutsideBounds: Boolean

  @JsName("ActorPackagingScheme")
  public open var actorPackagingScheme: String

  @JsName("WorldSettings")
  public open var worldSettings: WorldSettings

  @JsName("WorldDataLayers")
  public open var worldDataLayers: WorldDataLayers

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("DestroyedReplicatedStaticActors")
  public open var destroyedReplicatedStaticActors: Array<ReplicatedStaticActorDestructionInfo>

  @JsName("LevelPartition")
  public open var levelPartition: Any

  @JsName("OwnerLevelPartition")
  public open var ownerLevelPartition: UObject

  @JsName("bUseActorFolders")
  public open var useActorFolders: Boolean

  @JsName("ActorFolders")
  public open var actorFolders: Any

  @JsName("LoadedExternalActorFolders")
  public open var loadedExternalActorFolders: Array<ActorFolder>

  @JsName("UpdateModelComponents")
  public open fun updateModelComponents(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Level

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Level

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Level

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Level

    @JsName("C")
    public fun copy(other: UObject): Level

    @JsName("C")
    public fun copy(other: Any): Level

    @JsName("UpdateModelComponents")
    public fun updateModelComponents(level: Level): Unit
  }
}

public open external class LineBatchComponent(
  outer: UObject,
) : PrimitiveComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LineBatchComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LineBatchComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LineBatchComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LineBatchComponent

    @JsName("C")
    public fun copy(other: UObject): LineBatchComponent

    @JsName("C")
    public fun copy(other: Any): LineBatchComponent
  }
}

@JsName("EStreamingVolumeUsage")
public external object StreamingVolumeUsage {
  @JsName("SVB_Loading")
  public var Loading: String

  @JsName("SVB_LoadingAndVisibility")
  public var LoadingAndVisibility: String

  @JsName("SVB_VisibilityBlockingOnLoad")
  public var VisibilityBlockingOnLoad: String

  @JsName("SVB_BlockingOnLoad")
  public var BlockingOnLoad: String

  @JsName("SVB_LoadingNotVisible")
  public var LoadingNotVisible: String

  @JsName("SVB_MAX")
  public var Max: String
}

public open external class LevelStreamingVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("StreamingLevelNames")
  public open var streamingLevelNames: Array<String>

  @JsName("bEditorPreVisOnly")
  public open var editorPreVisOnly: Boolean

  @JsName("bDisabled")
  public open var disabled: Boolean

  @JsName("StreamingUsage")
  public open var streamingUsage: String

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelStreamingVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelStreamingVolume

    @JsName("C")
    public fun copy(other: UObject): LevelStreamingVolume

    @JsName("C")
    public fun copy(other: Any): LevelStreamingVolume
  }
}

public open external class LevelStreaming(
  outer: UObject,
) : UObject {
  @JsName("PackageName")
  public open var packageName: String

  @JsName("WorldAsset")
  public open var worldAsset: World

  @JsName("StreamingPriority")
  public open var streamingPriority: Number

  @JsName("PackageNameToLoad")
  public open var packageNameToLoad: String

  @JsName("LODPackageNames")
  public open var lodPackageNames: Array<String>

  @JsName("LevelTransform")
  public open var levelTransform: Transform

  @JsName("bClientOnlyVisible")
  public open var clientOnlyVisible: Boolean

  @JsName("LevelLODIndex")
  public open var levelLodIndex: Number

  @JsName("bShouldBeVisibleInEditor")
  public open var shouldBeVisibleInEditor: Boolean

  @JsName("bShouldBeVisible")
  public open var shouldBeVisible: Boolean

  @JsName("bShouldBeLoaded")
  public open var shouldBeLoaded: Boolean

  @JsName("bLocked")
  public open var locked: Boolean

  @JsName("bIsStatic")
  public open var isStatic: Boolean

  @JsName("bShouldBlockOnLoad")
  public open var shouldBlockOnLoad: Boolean

  @JsName("bShouldBlockOnUnload")
  public open var shouldBlockOnUnload: Boolean

  @JsName("bDisableDistanceStreaming")
  public open var disableDistanceStreaming: Boolean

  @JsName("bDrawOnLevelStatusMap")
  public open var drawOnLevelStatusMap: Boolean

  @JsName("DrawColor")
  public open var drawColor: Color

  @JsName("LevelColor")
  public open var levelColor: LinearColor

  @JsName("EditorStreamingVolumes")
  public open var editorStreamingVolumes: Array<LevelStreamingVolume>

  @JsName("MinTimeBetweenVolumeUnloadRequests")
  public open var minTimeBetweenVolumeUnloadRequests: Number

  @JsName("Keywords")
  public open var keywords: Array<String>

  @JsName("OnLevelLoaded")
  public open var onLevelLoaded: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnLevelUnloaded")
  public open var onLevelUnloaded: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnLevelShown")
  public open var onLevelShown: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnLevelHidden")
  public open var onLevelHidden: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("LoadedLevel")
  public open var loadedLevel: Level

  @JsName("PendingUnloadLevel")
  public open var pendingUnloadLevel: Level

  @JsName("FolderPath")
  public open var folderPath: String

  @JsName("ShouldBeLoaded")
  public open fun shouldBeLoaded(): Boolean

  @JsName("SetShouldBeVisible")
  public open fun setShouldBeVisible(inShouldBeVisible: Boolean): Unit

  @JsName("SetShouldBeLoaded")
  public open fun setShouldBeLoaded(inShouldBeLoaded: Boolean): Unit

  @JsName("SetPriority")
  public open fun setPriority(newPriority: Number): Unit

  @JsName("SetLevelLODIndex")
  public open fun setLevelLodIndex(lodIndex: Number): Unit

  @JsName("SetIsRequestingUnloadAndRemoval")
  public open fun setIsRequestingUnloadAndRemoval(inIsRequestingUnloadAndRemoval: Boolean): Unit

  @JsName("IsStreamingStatePending")
  public open fun isStreamingStatePending(): Boolean

  @JsName("IsLevelVisible")
  public open fun isLevelVisible(): Boolean

  @JsName("IsLevelLoaded")
  public open fun isLevelLoaded(): Boolean

  @JsName("GetWorldAssetPackageFName")
  public open fun getWorldAssetPackageFName(): String

  @JsName("GetLoadedLevel")
  public open fun getLoadedLevel(): Level

  @JsName("GetLevelScriptActor")
  public open fun getLevelScriptActor(): LevelScriptActor

  @JsName("GetIsRequestingUnloadAndRemoval")
  public open fun getIsRequestingUnloadAndRemoval(): Boolean

  @JsName("CreateInstance")
  public open fun createInstance(uniqueInstanceName: String): LevelStreaming

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelStreaming

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelStreaming

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelStreaming

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelStreaming

    @JsName("C")
    public fun copy(other: UObject): LevelStreaming

    @JsName("C")
    public fun copy(other: Any): LevelStreaming
  }
}

public open external class StreamingLevelsToConsider {
  @JsName("StreamingLevels")
  public open var streamingLevels: Array<LevelStreaming>

  public open fun clone(): StreamingLevelsToConsider

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StreamingLevelsToConsider

    @JsName("C")
    public fun copy(other: Any): StreamingLevelsToConsider
  }
}

public open external class MulticastRecordOptions {
  @JsName("FuncPathName")
  public open var funcPathName: String

  @JsName("bServerSkip")
  public open var serverSkip: Boolean

  @JsName("bClientSkip")
  public open var clientSkip: Boolean

  public open fun clone(): MulticastRecordOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MulticastRecordOptions

    @JsName("C")
    public fun copy(other: Any): MulticastRecordOptions
  }
}

public open external class DemoNetDriver(
  outer: UObject,
) : NetDriver {
  @JsName("RollbackNetStartupActors")
  public open var rollbackNetStartupActors: Any

  @JsName("CheckpointSaveMaxMSPerFrame")
  public open var checkpointSaveMaxMsPerFrame: Number

  @JsName("MulticastRecordOptions")
  public open var multicastRecordOptions: Array<MulticastRecordOptions>

  @JsName("SpectatorControllers")
  public open var spectatorControllers: Array<PlayerController>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DemoNetDriver

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DemoNetDriver

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DemoNetDriver

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DemoNetDriver

    @JsName("C")
    public fun copy(other: UObject): DemoNetDriver

    @JsName("C")
    public fun copy(other: Any): DemoNetDriver
  }
}

public open external class ParticleEventManager(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ParticleEventManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ParticleEventManager

    @JsName("C")
    public fun copy(other: UObject): ParticleEventManager

    @JsName("C")
    public fun copy(other: Any): ParticleEventManager
  }
}

public open external class NavigationSystemBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationSystemBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationSystemBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationSystemBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationSystemBase

    @JsName("C")
    public fun copy(other: UObject): NavigationSystemBase

    @JsName("C")
    public fun copy(other: Any): NavigationSystemBase
  }
}

@JsName("AISystemBase")
public open external class AiSystemBase(
  outer: UObject,
) : UObject {
  @JsName("AISystemClassName")
  public open var aiSystemClassName: SoftClassPath

  @JsName("AISystemModuleName")
  public open var aiSystemModuleName: String

  @JsName("bInstantiateAISystemOnClient")
  public open var instantiateAiSystemOnClient: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSystemBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSystemBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSystemBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSystemBase

    @JsName("C")
    public fun copy(other: UObject): AiSystemBase

    @JsName("C")
    public fun copy(other: Any): AiSystemBase
  }
}

public open external class AvoidanceManager(
  outer: UObject,
) : UObject {
  @JsName("DefaultTimeToLive")
  public open var defaultTimeToLive: Number

  @JsName("LockTimeAfterAvoid")
  public open var lockTimeAfterAvoid: Number

  @JsName("LockTimeAfterClean")
  public open var lockTimeAfterClean: Number

  @JsName("DeltaTimeToPredict")
  public open var deltaTimeToPredict: Number

  @JsName("ArtificialRadiusExpansion")
  public open var artificialRadiusExpansion: Number

  @JsName("TestHeightDifference")
  public open var testHeightDifference: Number

  @JsName("HeightCheckMargin")
  public open var heightCheckMargin: Number

  @JsName("RegisterMovementComponent")
  public open fun registerMovementComponent(movementComp: MovementComponent,
      avoidanceWeight: Number): Boolean

  @JsName("GetObjectCount")
  public open fun getObjectCount(): Number

  @JsName("GetNewAvoidanceUID")
  public open fun getNewAvoidanceUid(): Number

  @JsName("GetAvoidanceVelocityForComponent")
  public open fun getAvoidanceVelocityForComponent(movementComp: MovementComponent): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AvoidanceManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AvoidanceManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AvoidanceManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AvoidanceManager

    @JsName("C")
    public fun copy(other: UObject): AvoidanceManager

    @JsName("C")
    public fun copy(other: Any): AvoidanceManager
  }
}

public open external class LevelCollection {
  @JsName("GameState")
  public open var gameState: GameStateBase

  @JsName("NetDriver")
  public open var netDriver: NetDriver

  @JsName("DemoNetDriver")
  public open var demoNetDriver: DemoNetDriver

  @JsName("PersistentLevel")
  public open var persistentLevel: Level

  @JsName("Levels")
  public open var levels: Any

  public open fun clone(): LevelCollection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelCollection

    @JsName("C")
    public fun copy(other: Any): LevelCollection
  }
}

public open external class CollectionParameterBase {
  @JsName("ParameterName")
  public open var parameterName: String

  public open var ID: Guid

  public open fun clone(): CollectionParameterBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CollectionParameterBase

    @JsName("C")
    public fun copy(other: Any): CollectionParameterBase
  }
}

public open external class CollectionScalarParameter : CollectionParameterBase {
  @JsName("DefaultValue")
  public open var defaultValue: Number

  public override fun clone(): CollectionScalarParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CollectionScalarParameter

    @JsName("C")
    public fun copy(other: Any): CollectionScalarParameter
  }
}

public open external class CollectionVectorParameter : CollectionParameterBase {
  @JsName("DefaultValue")
  public open var defaultValue: LinearColor

  public override fun clone(): CollectionVectorParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CollectionVectorParameter

    @JsName("C")
    public fun copy(other: Any): CollectionVectorParameter
  }
}

@JsName("T$289")
public external interface Object289 {
  @JsName("bParameterFound")
  public var parameterFound: Boolean

  @JsName("$")
  public var value: LinearColor
}

@JsName("T$290")
public external interface Object290 {
  @JsName("bParameterFound")
  public var parameterFound: Boolean

  @JsName("$")
  public var value: Number
}

public open external class MaterialParameterCollection(
  outer: UObject,
) : UObject {
  @JsName("StateId")
  public open var stateId: Guid

  @JsName("ScalarParameters")
  public open var scalarParameters: Array<CollectionScalarParameter>

  @JsName("VectorParameters")
  public open var vectorParameters: Array<CollectionVectorParameter>

  @JsName("GetVectorParameterNames")
  public open fun getVectorParameterNames(): Array<String>

  @JsName("GetVectorParameterDefaultValue")
  public open fun getVectorParameterDefaultValue(parameterName: String, parameterFound: Boolean):
      Object289

  @JsName("GetScalarParameterNames")
  public open fun getScalarParameterNames(): Array<String>

  @JsName("GetScalarParameterDefaultValue")
  public open fun getScalarParameterDefaultValue(parameterName: String, parameterFound: Boolean):
      Object290

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialParameterCollection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialParameterCollection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialParameterCollection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialParameterCollection

    @JsName("C")
    public fun copy(other: UObject): MaterialParameterCollection

    @JsName("C")
    public fun copy(other: Any): MaterialParameterCollection
  }
}

public open external class MaterialParameterCollectionInstance(
  outer: UObject,
) : UObject {
  @JsName("Collection")
  public open var collection: MaterialParameterCollection

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialParameterCollectionInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialParameterCollectionInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialParameterCollectionInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialParameterCollectionInstance

    @JsName("C")
    public fun copy(other: UObject): MaterialParameterCollectionInstance

    @JsName("C")
    public fun copy(other: Any): MaterialParameterCollectionInstance
  }
}

public open external class LevelViewportInfo {
  @JsName("CamPosition")
  public open var camPosition: Vector

  @JsName("CamRotation")
  public open var camRotation: Rotator

  @JsName("CamOrthoZoom")
  public open var camOrthoZoom: Number

  @JsName("CamUpdated")
  public open var camUpdated: Boolean

  public open fun clone(): LevelViewportInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelViewportInfo

    @JsName("C")
    public fun copy(other: Any): LevelViewportInfo
  }
}

public open external class PhysicsFieldComponent(
  outer: UObject,
) : SceneComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsFieldComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsFieldComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsFieldComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsFieldComponent

    @JsName("C")
    public fun copy(other: UObject): PhysicsFieldComponent

    @JsName("C")
    public fun copy(other: Any): PhysicsFieldComponent
  }
}

public open external class WorldComposition(
  outer: UObject,
) : UObject {
  @JsName("TilesStreaming")
  public open var tilesStreaming: Array<LevelStreaming>

  @JsName("TilesStreamingTimeThreshold")
  public open var tilesStreamingTimeThreshold: Any

  @JsName("bLoadAllTilesDuringCinematic")
  public open var loadAllTilesDuringCinematic: Boolean

  @JsName("bRebaseOriginIn3DSpace")
  public open var rebaseOriginIn3dSpace: Boolean

  @JsName("bLockTilesLocation")
  public open var lockTilesLocation: Boolean

  @JsName("RebaseOriginDistance")
  public open var rebaseOriginDistance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldComposition

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldComposition

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldComposition

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldComposition

    @JsName("C")
    public fun copy(other: UObject): WorldComposition

    @JsName("C")
    public fun copy(other: Any): WorldComposition
  }
}

@JsName("WorldPSCPool")
public open external class WorldPscPool {
  @JsName("WorldParticleSystemPools")
  public open var worldParticleSystemPools: Any

  public open fun clone(): WorldPscPool

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): WorldPscPool

    @JsName("C")
    public fun copy(other: Any): WorldPscPool
  }
}

public open external class AudioInputDeviceInfo {
  @JsName("DeviceName")
  public open var deviceName: String

  @JsName("DeviceID")
  public open var deviceId: String

  @JsName("InputChannels")
  public open var inputChannels: Number

  @JsName("PreferredSampleRate")
  public open var preferredSampleRate: Number

  @JsName("bSupportsHardwareAEC")
  public open var supportsHardwareAec: Boolean

  public open fun clone(): AudioInputDeviceInfo

  @JsName("Conv_AudioInputDeviceInfoToString")
  public open fun convertAudioInputDeviceInfoToString(): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioInputDeviceInfo

    @JsName("C")
    public fun copy(other: Any): AudioInputDeviceInfo

    @JsName("Conv_AudioInputDeviceInfoToString")
    public fun convertAudioInputDeviceInfoToString(info: AudioInputDeviceInfo): String
  }
}

public open external class ActorLayer {
  @JsName("Name")
  public open var name: String

  public open fun clone(): ActorLayer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorLayer

    @JsName("C")
    public fun copy(other: Any): ActorLayer
  }
}

public open external class LevelSequenceObjectReferenceMap {
  public open fun clone(): LevelSequenceObjectReferenceMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelSequenceObjectReferenceMap

    @JsName("C")
    public fun copy(other: Any): LevelSequenceObjectReferenceMap
  }
}

public open external class LevelSequenceBindingReferences {
  @JsName("BindingIdToReferences")
  public open var bindingIdToReferences: Any

  @JsName("AnimSequenceInstances")
  public open var animSequenceInstances: Any

  public open fun clone(): LevelSequenceBindingReferences

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LevelSequenceBindingReferences

    @JsName("C")
    public fun copy(other: Any): LevelSequenceBindingReferences
  }
}

@JsName("ERigExecutionType")
public external object RigExecutionType {
  public var Runtime: String

  public var Editing: String

  public var Max: String

  @JsName("ERigExecutionType_MAX")
  public var _Max: String
}

@JsName("RigVMRuntimeSettings")
public open external class RigVmRuntimeSettings {
  @JsName("MaximumArraySize")
  public open var maximumArraySize: Number

  @JsName("bEnableProfiling")
  public open var enableProfiling: Boolean

  public open fun clone(): RigVmRuntimeSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmRuntimeSettings

    @JsName("C")
    public fun copy(other: Any): RigVmRuntimeSettings
  }
}

@JsName("RigVMMemoryStorage")
public open external class RigVmMemoryStorage(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmMemoryStorage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmMemoryStorage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmMemoryStorage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmMemoryStorage

    @JsName("C")
    public fun copy(other: UObject): RigVmMemoryStorage

    @JsName("C")
    public fun copy(other: Any): RigVmMemoryStorage
  }
}

@JsName("RigVMByteCodeEntry")
public open external class RigVmByteCodeEntry {
  @JsName("Name")
  public open var name: String

  @JsName("InstructionIndex")
  public open var instructionIndex: Number

  public open fun clone(): RigVmByteCodeEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmByteCodeEntry

    @JsName("C")
    public fun copy(other: Any): RigVmByteCodeEntry
  }
}

@JsName("RigVMByteCode")
public open external class RigVmByteCode {
  @JsName("ByteCode")
  public open var byteCode: Array<Number>

  @JsName("NumInstructions")
  public open var numInstructions: Number

  @JsName("Entries")
  public open var entries: Array<RigVmByteCodeEntry>

  public open fun clone(): RigVmByteCode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmByteCode

    @JsName("C")
    public fun copy(other: Any): RigVmByteCode
  }
}

@JsName("ERigVMOpCode")
public external object RigVMOpCode {
  @JsName("Execute_0_Operands")
  public var Execute0Operands: String

  @JsName("Execute_1_Operands")
  public var Execute1Operands: String

  @JsName("Execute_2_Operands")
  public var Execute2Operands: String

  @JsName("Execute_3_Operands")
  public var Execute3Operands: String

  @JsName("Execute_4_Operands")
  public var Execute4Operands: String

  @JsName("Execute_5_Operands")
  public var Execute5Operands: String

  @JsName("Execute_6_Operands")
  public var Execute6Operands: String

  @JsName("Execute_7_Operands")
  public var Execute7Operands: String

  @JsName("Execute_8_Operands")
  public var Execute8Operands: String

  @JsName("Execute_9_Operands")
  public var Execute9Operands: String

  @JsName("Execute_10_Operands")
  public var Execute10Operands: String

  @JsName("Execute_11_Operands")
  public var Execute11Operands: String

  @JsName("Execute_12_Operands")
  public var Execute12Operands: String

  @JsName("Execute_13_Operands")
  public var Execute13Operands: String

  @JsName("Execute_14_Operands")
  public var Execute14Operands: String

  @JsName("Execute_15_Operands")
  public var Execute15Operands: String

  @JsName("Execute_16_Operands")
  public var Execute16Operands: String

  @JsName("Execute_17_Operands")
  public var Execute17Operands: String

  @JsName("Execute_18_Operands")
  public var Execute18Operands: String

  @JsName("Execute_19_Operands")
  public var Execute19Operands: String

  @JsName("Execute_20_Operands")
  public var Execute20Operands: String

  @JsName("Execute_21_Operands")
  public var Execute21Operands: String

  @JsName("Execute_22_Operands")
  public var Execute22Operands: String

  @JsName("Execute_23_Operands")
  public var Execute23Operands: String

  @JsName("Execute_24_Operands")
  public var Execute24Operands: String

  @JsName("Execute_25_Operands")
  public var Execute25Operands: String

  @JsName("Execute_26_Operands")
  public var Execute26Operands: String

  @JsName("Execute_27_Operands")
  public var Execute27Operands: String

  @JsName("Execute_28_Operands")
  public var Execute28Operands: String

  @JsName("Execute_29_Operands")
  public var Execute29Operands: String

  @JsName("Execute_30_Operands")
  public var Execute30Operands: String

  @JsName("Execute_31_Operands")
  public var Execute31Operands: String

  @JsName("Execute_32_Operands")
  public var Execute32Operands: String

  @JsName("Execute_33_Operands")
  public var Execute33Operands: String

  @JsName("Execute_34_Operands")
  public var Execute34Operands: String

  @JsName("Execute_35_Operands")
  public var Execute35Operands: String

  @JsName("Execute_36_Operands")
  public var Execute36Operands: String

  @JsName("Execute_37_Operands")
  public var Execute37Operands: String

  @JsName("Execute_38_Operands")
  public var Execute38Operands: String

  @JsName("Execute_39_Operands")
  public var Execute39Operands: String

  @JsName("Execute_40_Operands")
  public var Execute40Operands: String

  @JsName("Execute_41_Operands")
  public var Execute41Operands: String

  @JsName("Execute_42_Operands")
  public var Execute42Operands: String

  @JsName("Execute_43_Operands")
  public var Execute43Operands: String

  @JsName("Execute_44_Operands")
  public var Execute44Operands: String

  @JsName("Execute_45_Operands")
  public var Execute45Operands: String

  @JsName("Execute_46_Operands")
  public var Execute46Operands: String

  @JsName("Execute_47_Operands")
  public var Execute47Operands: String

  @JsName("Execute_48_Operands")
  public var Execute48Operands: String

  @JsName("Execute_49_Operands")
  public var Execute49Operands: String

  @JsName("Execute_50_Operands")
  public var Execute50Operands: String

  @JsName("Execute_51_Operands")
  public var Execute51Operands: String

  @JsName("Execute_52_Operands")
  public var Execute52Operands: String

  @JsName("Execute_53_Operands")
  public var Execute53Operands: String

  @JsName("Execute_54_Operands")
  public var Execute54Operands: String

  @JsName("Execute_55_Operands")
  public var Execute55Operands: String

  @JsName("Execute_56_Operands")
  public var Execute56Operands: String

  @JsName("Execute_57_Operands")
  public var Execute57Operands: String

  @JsName("Execute_58_Operands")
  public var Execute58Operands: String

  @JsName("Execute_59_Operands")
  public var Execute59Operands: String

  @JsName("Execute_60_Operands")
  public var Execute60Operands: String

  @JsName("Execute_61_Operands")
  public var Execute61Operands: String

  @JsName("Execute_62_Operands")
  public var Execute62Operands: String

  @JsName("Execute_63_Operands")
  public var Execute63Operands: String

  @JsName("Execute_64_Operands")
  public var Execute64Operands: String

  public var Zero: String

  public var BoolFalse: String

  public var BoolTrue: String

  public var Copy: String

  public var Increment: String

  public var Decrement: String

  public var Equals: String

  public var NotEquals: String

  public var JumpAbsolute: String

  public var JumpForward: String

  public var JumpBackward: String

  public var JumpAbsoluteIf: String

  public var JumpForwardIf: String

  public var JumpBackwardIf: String

  public var ChangeType: String

  public var Exit: String

  public var BeginBlock: String

  public var EndBlock: String

  public var ArrayReset: String

  public var ArrayGetNum: String

  public var ArraySetNum: String

  public var ArrayGetAtIndex: String

  public var ArraySetAtIndex: String

  public var ArrayAdd: String

  public var ArrayInsert: String

  public var ArrayRemove: String

  public var ArrayFind: String

  public var ArrayAppend: String

  public var ArrayClone: String

  public var ArrayIterator: String

  public var ArrayUnion: String

  public var ArrayDifference: String

  public var ArrayIntersection: String

  public var ArrayReverse: String

  public var Invalid: String

  public var FirstArrayOpCode: String

  public var LastArrayOpCode: String

  @JsName("ERigVMOpCode_MAX")
  public var Max: String
}

@JsName("RigVMInstruction")
public open external class RigVmInstruction {
  @JsName("ByteCodeIndex")
  public open var byteCodeIndex: Any

  @JsName("OpCode")
  public open var opCode: String

  @JsName("OperandAlignment")
  public open var operandAlignment: Number

  public open fun clone(): RigVmInstruction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmInstruction

    @JsName("C")
    public fun copy(other: Any): RigVmInstruction
  }
}

@JsName("RigVMInstructionArray")
public open external class RigVmInstructionArray {
  @JsName("Instructions")
  public open var instructions: Array<RigVmInstruction>

  public open fun clone(): RigVmInstructionArray

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmInstructionArray

    @JsName("C")
    public fun copy(other: Any): RigVmInstructionArray
  }
}

@JsName("RigVMExecuteContext")
public open external class RigVmExecuteContext {
  public open fun clone(): RigVmExecuteContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmExecuteContext

    @JsName("C")
    public fun copy(other: Any): RigVmExecuteContext
  }
}

@JsName("ERigVMParameterType")
public external object RigVMParameterType {
  public var Input: String

  public var Output: String

  public var Invalid: String

  @JsName("ERigVMParameterType_MAX")
  public var Max: String
}

@JsName("RigVMParameter")
public open external class RigVmParameter {
  @JsName("Type")
  public open var type: String

  @JsName("Name")
  public open var name: String

  @JsName("RegisterIndex")
  public open var registerIndex: Number

  @JsName("CPPType")
  public open var cppType: String

  @JsName("ScriptStruct")
  public open var scriptStruct: ScriptStruct

  @JsName("ScriptStructPath")
  public open var scriptStructPath: String

  public open fun clone(): RigVmParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmParameter

    @JsName("C")
    public fun copy(other: Any): RigVmParameter
  }
}

@JsName("RigVMMemoryStatistics")
public open external class RigVmMemoryStatistics {
  @JsName("RegisterCount")
  public open var registerCount: Number

  @JsName("DataBytes")
  public open var dataBytes: Number

  @JsName("TotalBytes")
  public open var totalBytes: Number

  public open fun clone(): RigVmMemoryStatistics

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmMemoryStatistics

    @JsName("C")
    public fun copy(other: Any): RigVmMemoryStatistics
  }
}

@JsName("RigVMByteCodeStatistics")
public open external class RigVmByteCodeStatistics {
  @JsName("InstructionCount")
  public open var instructionCount: Number

  @JsName("DataBytes")
  public open var dataBytes: Number

  public open fun clone(): RigVmByteCodeStatistics

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmByteCodeStatistics

    @JsName("C")
    public fun copy(other: Any): RigVmByteCodeStatistics
  }
}

@JsName("RigVMStatistics")
public open external class RigVmStatistics {
  @JsName("BytesForCDO")
  public open var bytesForCdo: Number

  @JsName("BytesPerInstance")
  public open var bytesPerInstance: Number

  @JsName("LiteralMemory")
  public open var literalMemory: RigVmMemoryStatistics

  @JsName("WorkMemory")
  public open var workMemory: RigVmMemoryStatistics

  @JsName("DebugMemory")
  public open var debugMemory: RigVmMemoryStatistics

  @JsName("BytesForCaching")
  public open var bytesForCaching: Number

  @JsName("ByteCode")
  public open var byteCode: RigVmByteCodeStatistics

  public open fun clone(): RigVmStatistics

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmStatistics

    @JsName("C")
    public fun copy(other: Any): RigVmStatistics
  }
}

@JsName("RigVM")
public open external class RigVm(
  outer: UObject,
) : UObject {
  @JsName("WorkMemoryStorageObject")
  public open var workMemoryStorageObject: RigVmMemoryStorage

  @JsName("LiteralMemoryStorageObject")
  public open var literalMemoryStorageObject: RigVmMemoryStorage

  @JsName("DebugMemoryStorageObject")
  public open var debugMemoryStorageObject: RigVmMemoryStorage

  @JsName("ByteCodeStorage")
  public open var byteCodeStorage: RigVmByteCode

  @JsName("Instructions")
  public open var instructions: RigVmInstructionArray

  @JsName("Context")
  public open var context: RigVmExecuteContext

  @JsName("NumExecutions")
  public open var numExecutions: Any

  @JsName("FunctionNamesStorage")
  public open var functionNamesStorage: Array<String>

  @JsName("Parameters")
  public open var parameters: Array<RigVmParameter>

  @JsName("ParametersNameMap")
  public open var parametersNameMap: Any

  @JsName("DeferredVMToCopy")
  public open var deferredVmToCopy: RigVm

  @JsName("SetParameterValueVector2D")
  public open fun setParameterValueVector2d(
    inParameterName: String,
    inValue: Vector2d,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueVector")
  public open fun setParameterValueVector(
    inParameterName: String,
    inValue: Vector,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueTransform")
  public open fun setParameterValueTransform(
    inParameterName: String,
    inValue: Transform,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueString")
  public open fun setParameterValueString(
    inParameterName: String,
    inValue: String,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueQuat")
  public open fun setParameterValueQuat(
    inParameterName: String,
    inValue: Quat,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueName")
  public open fun setParameterValueName(
    inParameterName: String,
    inValue: String,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueInt")
  public open fun setParameterValueInt(
    inParameterName: String,
    inValue: Number,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueFloat")
  public open fun setParameterValueFloat(
    inParameterName: String,
    inValue: Number,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueDouble")
  public open fun setParameterValueDouble(
    inParameterName: String,
    inValue: Any,
    inArrayIndex: Number,
  ): Unit

  @JsName("SetParameterValueBool")
  public open fun setParameterValueBool(
    inParameterName: String,
    inValue: Boolean,
    inArrayIndex: Number,
  ): Unit

  @JsName("GetStatistics")
  public open fun getStatistics(): RigVmStatistics

  @JsName("GetRigVMFunctionName")
  public open fun getRigVmFunctionName(inFunctionIndex: Number): String

  @JsName("GetParameterValueVector2D")
  public open fun getParameterValueVector2d(inParameterName: String, inArrayIndex: Number): Vector2d

  @JsName("GetParameterValueVector")
  public open fun getParameterValueVector(inParameterName: String, inArrayIndex: Number): Vector

  @JsName("GetParameterValueTransform")
  public open fun getParameterValueTransform(inParameterName: String, inArrayIndex: Number):
      Transform

  @JsName("GetParameterValueString")
  public open fun getParameterValueString(inParameterName: String, inArrayIndex: Number): String

  @JsName("GetParameterValueQuat")
  public open fun getParameterValueQuat(inParameterName: String, inArrayIndex: Number): Quat

  @JsName("GetParameterValueName")
  public open fun getParameterValueName(inParameterName: String, inArrayIndex: Number): String

  @JsName("GetParameterValueInt")
  public open fun getParameterValueInt(inParameterName: String, inArrayIndex: Number): Number

  @JsName("GetParameterValueFloat")
  public open fun getParameterValueFloat(inParameterName: String, inArrayIndex: Number): Number

  @JsName("GetParameterValueDouble")
  public open fun getParameterValueDouble(inParameterName: String, inArrayIndex: Number): Any

  @JsName("GetParameterValueBool")
  public open fun getParameterValueBool(inParameterName: String, inArrayIndex: Number): Boolean

  @JsName("Execute")
  public open fun execute(inEntryName: String): Boolean

  @JsName("AddRigVMFunction")
  public open fun addRigVmFunction(inRigVmStruct: ScriptStruct, inMethodName: String): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVm

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVm

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVm

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVm

    @JsName("C")
    public fun copy(other: UObject): RigVm

    @JsName("C")
    public fun copy(other: Any): RigVm
  }
}

@JsName("ERigElementType")
public external object RigElementType {
  public var None: String

  public var Bone: String

  public var Null: String

  public var Space: String

  public var Control: String

  public var Curve: String

  public var RigidBody: String

  public var Reference: String

  public var Last: String

  public var All: String

  public var ToResetAfterSetupEvent: String

  @JsName("ERigElementType_MAX")
  public var Max: String
}

public open external class RigElementKey {
  @JsName("Type")
  public open var type: String

  @JsName("Name")
  public open var name: String

  public open fun clone(): RigElementKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigElementKey

    @JsName("C")
    public fun copy(other: Any): RigElementKey

    @JsName("GetDefaultParentKey")
    public fun getDefaultParentKey(): RigElementKey

    @JsName("GetWorldSpaceReferenceKey")
    public fun getWorldSpaceReferenceKey(): RigElementKey
  }
}

@JsName("ERigControlType")
public external object RigControlType {
  public var Bool: String

  public var Float: String

  public var Integer: String

  @JsName("Vector2D")
  public var Vector2d: String

  public var Position: String

  public var Scale: String

  public var Rotator: String

  public var Transform: String

  public var TransformNoScale: String

  public var EulerTransform: String

  @JsName("ERigControlType_MAX")
  public var Max: String
}

@JsName("ERigControlAxis")
public external object RigControlAxis {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  @JsName("ERigControlAxis_MAX")
  public var Max: String
}

public open external class RigControlLimitEnabled {
  @JsName("bMinimum")
  public open var minimum: Boolean

  @JsName("bMaximum")
  public open var maximum: Boolean

  public open fun clone(): RigControlLimitEnabled

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigControlLimitEnabled

    @JsName("C")
    public fun copy(other: Any): RigControlLimitEnabled
  }
}

public open external class RigControlValueStorage {
  @JsName("Float00")
  public open var float00: Number

  @JsName("Float01")
  public open var float01: Number

  @JsName("Float02")
  public open var float02: Number

  @JsName("Float03")
  public open var float03: Number

  @JsName("Float10")
  public open var float10: Number

  @JsName("Float11")
  public open var float11: Number

  @JsName("Float12")
  public open var float12: Number

  @JsName("Float13")
  public open var float13: Number

  @JsName("Float20")
  public open var float20: Number

  @JsName("Float21")
  public open var float21: Number

  @JsName("Float22")
  public open var float22: Number

  @JsName("Float23")
  public open var float23: Number

  @JsName("Float30")
  public open var float30: Number

  @JsName("Float31")
  public open var float31: Number

  @JsName("Float32")
  public open var float32: Number

  @JsName("Float33")
  public open var float33: Number

  @JsName("Float00_2")
  public open var float002: Number

  @JsName("Float01_2")
  public open var float012: Number

  @JsName("Float02_2")
  public open var float022: Number

  @JsName("Float03_2")
  public open var float032: Number

  @JsName("Float10_2")
  public open var float102: Number

  @JsName("Float11_2")
  public open var float112: Number

  @JsName("Float12_2")
  public open var float122: Number

  @JsName("Float13_2")
  public open var float132: Number

  @JsName("Float20_2")
  public open var float202: Number

  @JsName("Float21_2")
  public open var float212: Number

  @JsName("Float22_2")
  public open var float222: Number

  @JsName("Float23_2")
  public open var float232: Number

  @JsName("Float30_2")
  public open var float302: Number

  @JsName("Float31_2")
  public open var float312: Number

  @JsName("Float32_2")
  public open var float322: Number

  @JsName("Float33_2")
  public open var float332: Number

  @JsName("bValid")
  public open var valid: Boolean

  public open fun clone(): RigControlValueStorage

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigControlValueStorage

    @JsName("C")
    public fun copy(other: Any): RigControlValueStorage
  }
}

public open external class RigControlValue {
  @JsName("FloatStorage")
  public open var floatStorage: RigControlValueStorage

  @JsName("Storage")
  public open var storage: Transform

  public open fun clone(): RigControlValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigControlValue

    @JsName("C")
    public fun copy(other: Any): RigControlValue
  }
}

public open external class Enum(
  outer: UObject,
) : Field {
  @JsName("GetEnumeratorName")
  public open fun getEnumeratorName(enumeratorValue: Number): String

  @JsName("GetEnumeratorUserFriendlyName")
  public open fun getEnumeratorUserFriendlyName(enumeratorValue: Number): String

  @JsName("GetEnumeratorValueFromIndex")
  public open fun getEnumeratorValueFromIndex(enumeratorIndex: Number): Number

  @JsName("GetValidValue")
  public open fun getValidValue(enumeratorValue: Number): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Enum

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Enum

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Enum

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Enum

    @JsName("C")
    public fun copy(other: UObject): Enum

    @JsName("C")
    public fun copy(other: Any): Enum

    @JsName("GetEnumeratorName")
    public fun getEnumeratorName(enum: Enum, enumeratorValue: Number): String

    @JsName("GetEnumeratorUserFriendlyName")
    public fun getEnumeratorUserFriendlyName(enum: Enum, enumeratorValue: Number): String

    @JsName("GetEnumeratorValueFromIndex")
    public fun getEnumeratorValueFromIndex(enum: Enum, enumeratorIndex: Number): Number

    @JsName("GetValidValue")
    public fun getValidValue(enum: Enum, enumeratorValue: Number): Number
  }
}

public open external class RigControlElementCustomization {
  @JsName("AvailableSpaces")
  public open var availableSpaces: Array<RigElementKey>

  @JsName("RemovedSpaces")
  public open var removedSpaces: Array<RigElementKey>

  public open fun clone(): RigControlElementCustomization

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigControlElementCustomization

    @JsName("C")
    public fun copy(other: Any): RigControlElementCustomization
  }
}

public open external class RigControlSettings {
  @JsName("ControlType")
  public open var controlType: String

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("PrimaryAxis")
  public open var primaryAxis: String

  @JsName("bIsCurve")
  public open var isCurve: Boolean

  @JsName("bAnimatable")
  public open var animatable: Boolean

  @JsName("LimitEnabled")
  public open var limitEnabled: Array<RigControlLimitEnabled>

  @JsName("bDrawLimits")
  public open var drawLimits: Boolean

  @JsName("MinimumValue")
  public open var minimumValue: RigControlValue

  @JsName("MaximumValue")
  public open var maximumValue: RigControlValue

  @JsName("bShapeEnabled")
  public open var shapeEnabled: Boolean

  @JsName("bShapeVisible")
  public open var shapeVisible: Boolean

  @JsName("ShapeName")
  public open var shapeName: String

  @JsName("ShapeColor")
  public open var shapeColor: LinearColor

  @JsName("bIsTransientControl")
  public open var isTransientControl: Boolean

  @JsName("ControlEnum")
  public open var controlEnum: Enum

  @JsName("Customization")
  public open var customization: RigControlElementCustomization

  public open fun clone(): RigControlSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigControlSettings

    @JsName("C")
    public fun copy(other: Any): RigControlSettings
  }
}

public open external class RigMirrorSettings {
  @JsName("MirrorAxis")
  public open var mirrorAxis: String

  @JsName("AxisToFlip")
  public open var axisToFlip: String

  @JsName("SearchString")
  public open var searchString: String

  @JsName("ReplaceString")
  public open var replaceString: String

  public open fun clone(): RigMirrorSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigMirrorSettings

    @JsName("C")
    public fun copy(other: Any): RigMirrorSettings
  }
}

public open external class RigRigidBodySettings {
  @JsName("Mass")
  public open var mass: Number

  public open fun clone(): RigRigidBodySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigRigidBodySettings

    @JsName("C")
    public fun copy(other: Any): RigRigidBodySettings
  }
}

@JsName("ERigBoneType")
public external object RigBoneType {
  public var Imported: String

  public var User: String

  @JsName("ERigBoneType_MAX")
  public var Max: String
}

public open external class RigHierarchyController(
  outer: UObject,
) : UObject {
  @JsName("bReportWarningsAndErrors")
  public open var reportWarningsAndErrors: Boolean

  @JsName("Hierarchy")
  public open var hierarchy: Any

  @JsName("SetSelection")
  public open fun setSelection(inKeys: Array<RigElementKey>, printPythonCommand: Boolean): Boolean

  @JsName("SetParent")
  public open fun setParent(
    inChild: RigElementKey,
    inParent: RigElementKey,
    maintainGlobalTransform: Boolean,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetHierarchy")
  public open fun setHierarchy(inHierarchy: RigHierarchy): Unit

  @JsName("SetControlSettings")
  public open fun setControlSettings(
    inKey: RigElementKey,
    inSettings: RigControlSettings,
    setupUndo: Boolean,
  ): Boolean

  @JsName("SelectElement")
  public open fun selectElement(
    inKey: RigElementKey,
    select: Boolean,
    clearSelection: Boolean,
  ): Boolean

  @JsName("RenameElement")
  public open fun renameElement(
    inElement: RigElementKey,
    inName: String,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
    clearSelection: Boolean,
  ): RigElementKey

  @JsName("RemoveParent")
  public open fun removeParent(
    inChild: RigElementKey,
    inParent: RigElementKey,
    maintainGlobalTransform: Boolean,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RemoveElement")
  public open fun removeElement(
    inElement: RigElementKey,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RemoveAllParents")
  public open fun removeAllParents(
    inChild: RigElementKey,
    maintainGlobalTransform: Boolean,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("MirrorElements")
  public open fun mirrorElements(
    inKeys: Array<RigElementKey>,
    inSettings: RigMirrorSettings,
    selectNewElements: Boolean,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Array<RigElementKey>

  @JsName("ImportFromText")
  public open fun importFromText(
    inContent: String,
    replaceExistingElements: Boolean,
    selectNewElements: Boolean,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Array<RigElementKey>

  @JsName("ImportCurvesFromAsset")
  public open fun importCurvesFromAsset(
    inAssetPath: String,
    inNameSpace: String,
    selectCurves: Boolean,
    setupUndo: Boolean,
  ): Array<RigElementKey>

  @JsName("ImportCurves")
  public open fun importCurves(
    inSkeleton: Skeleton,
    inNameSpace: String,
    selectCurves: Boolean,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): Array<RigElementKey>

  @JsName("ImportBonesFromAsset")
  public open fun importBonesFromAsset(
    inAssetPath: String,
    inNameSpace: String,
    replaceExistingBones: Boolean,
    removeObsoleteBones: Boolean,
    selectBones: Boolean,
    setupUndo: Boolean,
  ): Array<RigElementKey>

  @JsName("ImportBones")
  public open fun importBones(
    inSkeleton: Skeleton,
    inNameSpace: String,
    replaceExistingBones: Boolean,
    removeObsoleteBones: Boolean,
    selectBones: Boolean,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): Array<RigElementKey>

  @JsName("GetHierarchy")
  public open fun getHierarchy(): RigHierarchy

  @JsName("GetControlSettings")
  public open fun getControlSettings(inKey: RigElementKey): RigControlSettings

  @JsName("GeneratePythonCommands")
  public open fun generatePythonCommands(): Array<String>

  @JsName("ExportToText")
  public open fun exportToText(inKeys: Array<RigElementKey>): String

  @JsName("ExportSelectionToText")
  public open fun exportSelectionToText(): String

  @JsName("DuplicateElements")
  public open fun duplicateElements(
    inKeys: Array<RigElementKey>,
    selectNewElements: Boolean,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Array<RigElementKey>

  @JsName("DeselectElement")
  public open fun deselectElement(inKey: RigElementKey): Boolean

  @JsName("ClearSelection")
  public open fun clearSelection(): Boolean

  @JsName("AddRigidBody")
  public open fun addRigidBody(
    inName: String,
    inParent: RigElementKey,
    inSettings: RigRigidBodySettings,
    inLocalTransform: Transform,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): RigElementKey

  @JsName("AddParent")
  public open fun addParent(
    inChild: RigElementKey,
    inParent: RigElementKey,
    inWeight: Number,
    maintainGlobalTransform: Boolean,
    setupUndo: Boolean,
  ): Boolean

  @JsName("AddNull")
  public open fun addNull(
    inName: String,
    inParent: RigElementKey,
    inTransform: Transform,
    transformInGlobal: Boolean,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): RigElementKey

  @JsName("AddCurve")
  public open fun addCurve(
    inName: String,
    inValue: Number,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): RigElementKey

  @JsName("AddControl_ForBlueprint")
  public open fun addControlForBlueprint(
    inName: String,
    inParent: RigElementKey,
    inSettings: RigControlSettings,
    inValue: RigControlValue,
    setupUndo: Boolean,
  ): RigElementKey

  @JsName("AddBone")
  public open fun addBone(
    inName: String,
    inParent: RigElementKey,
    inTransform: Transform,
    transformInGlobal: Boolean,
    inBoneType: String,
    setupUndo: Boolean,
    printPythonCommand: Boolean,
  ): RigElementKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigHierarchyController

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigHierarchyController

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigHierarchyController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigHierarchyController

    @JsName("C")
    public fun copy(other: UObject): RigHierarchyController

    @JsName("C")
    public fun copy(other: Any): RigHierarchyController
  }
}

public open external class CachedRigElement {
  @JsName("Key")
  public open var key: RigElementKey

  public open var index: Any

  @JsName("ContainerVersion")
  public open var containerVersion: Number

  public open fun clone(): CachedRigElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CachedRigElement

    @JsName("C")
    public fun copy(other: Any): CachedRigElement
  }
}

public open external class RigPoseElement {
  public open var index: CachedRigElement

  @JsName("GlobalTransform")
  public open var globalTransform: Transform

  @JsName("LocalTransform")
  public open var localTransform: Transform

  @JsName("CurveValue")
  public open var curveValue: Number

  public open fun clone(): RigPoseElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigPoseElement

    @JsName("C")
    public fun copy(other: Any): RigPoseElement
  }
}

public open external class RigPose {
  @JsName("Elements")
  public open var elements: Array<RigPoseElement>

  @JsName("HierarchyTopologyVersion")
  public open var hierarchyTopologyVersion: Number

  @JsName("PoseHash")
  public open var poseHash: Number

  public open fun clone(): RigPose

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigPose

    @JsName("C")
    public fun copy(other: Any): RigPose
  }
}

public open external class RigElementWeight {
  @JsName("Location")
  public open var location: Number

  @JsName("Rotation")
  public open var rotation: Number

  @JsName("Scale")
  public open var scale: Number

  public open fun clone(): RigElementWeight

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigElementWeight

    @JsName("C")
    public fun copy(other: Any): RigElementWeight
  }
}

@JsName("ERigControlValueType")
public external object RigControlValueType {
  public var Initial: String

  public var Current: String

  public var Minimum: String

  public var Maximum: String

  @JsName("ERigControlValueType_MAX")
  public var Max: String
}

public open external class TransformNoScale {
  @JsName("Location")
  public open var location: Vector

  @JsName("Rotation")
  public open var rotation: Quat

  public open fun clone(): TransformNoScale

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TransformNoScale

    @JsName("C")
    public fun copy(other: Any): TransformNoScale
  }
}

public open external class EulerTransform {
  @JsName("Location")
  public open var location: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("Scale")
  public open var scale: Vector

  public open fun clone(): EulerTransform

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EulerTransform

    @JsName("C")
    public fun copy(other: Any): EulerTransform
  }
}

public open external class RigBaseElement {
  @JsName("Key")
  public open var key: RigElementKey

  public open var index: Number

  @JsName("SubIndex")
  public open var subIndex: Number

  @JsName("bSelected")
  public open var selected: Boolean

  public open fun clone(): RigBaseElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigBaseElement

    @JsName("C")
    public fun copy(other: Any): RigBaseElement
  }
}

public open external class RigComputedTransform {
  @JsName("Transform")
  public open var transform: Transform

  public open fun clone(): RigComputedTransform

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigComputedTransform

    @JsName("C")
    public fun copy(other: Any): RigComputedTransform
  }
}

public open external class RigLocalAndGlobalTransform {
  @JsName("Local")
  public open var local: RigComputedTransform

  @JsName("Global")
  public open var global: RigComputedTransform

  public open fun clone(): RigLocalAndGlobalTransform

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigLocalAndGlobalTransform

    @JsName("C")
    public fun copy(other: Any): RigLocalAndGlobalTransform
  }
}

public open external class RigCurrentAndInitialTransform {
  @JsName("Current")
  public open var current: RigLocalAndGlobalTransform

  @JsName("Initial")
  public open var initial: RigLocalAndGlobalTransform

  public open fun clone(): RigCurrentAndInitialTransform

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigCurrentAndInitialTransform

    @JsName("C")
    public fun copy(other: Any): RigCurrentAndInitialTransform
  }
}

public open external class RigTransformElement : RigBaseElement {
  @JsName("Pose")
  public open var pose: RigCurrentAndInitialTransform

  public override fun clone(): RigTransformElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigTransformElement

    @JsName("C")
    public fun copy(other: Any): RigTransformElement
  }
}

public open external class RigMultiParentElement : RigTransformElement {
  @JsName("Parent")
  public open var parent: RigCurrentAndInitialTransform

  public override fun clone(): RigMultiParentElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigMultiParentElement

    @JsName("C")
    public fun copy(other: Any): RigMultiParentElement
  }
}

public open external class RigNullElement : RigMultiParentElement {
  public override fun clone(): RigNullElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigNullElement

    @JsName("C")
    public fun copy(other: Any): RigNullElement
  }
}

public open external class RigControlElement : RigMultiParentElement {
  @JsName("Settings")
  public open var settings: RigControlSettings

  @JsName("Offset")
  public open var offset: RigCurrentAndInitialTransform

  @JsName("Shape")
  public open var shape: RigCurrentAndInitialTransform

  public override fun clone(): RigControlElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigControlElement

    @JsName("C")
    public fun copy(other: Any): RigControlElement
  }
}

public open external class RigSingleParentElement : RigTransformElement {
  public override fun clone(): RigSingleParentElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigSingleParentElement

    @JsName("C")
    public fun copy(other: Any): RigSingleParentElement
  }
}

public open external class RigBoneElement : RigSingleParentElement {
  @JsName("BoneType")
  public open var boneType: String

  public override fun clone(): RigBoneElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigBoneElement

    @JsName("C")
    public fun copy(other: Any): RigBoneElement
  }
}

public open external class RigHierarchy(
  outer: UObject,
) : UObject {
  @JsName("TopologyVersion")
  public open var topologyVersion: Any

  @JsName("bEnableDirtyPropagation")
  public open var enableDirtyPropagation: Boolean

  @JsName("TransformStackIndex")
  public open var transformStackIndex: Number

  @JsName("HierarchyController")
  public open var hierarchyController: RigHierarchyController

  @JsName("PreviousNameMap")
  public open var previousNameMap: Any

  @JsName("HierarchyForCacheValidation")
  public open var hierarchyForCacheValidation: RigHierarchy

  @JsName("SwitchToWorldSpace")
  public open fun switchToWorldSpace(
    inChild: RigElementKey,
    initial: Boolean,
    affectChildren: Boolean,
  ): Boolean

  @JsName("SwitchToParent")
  public open fun switchToParent(
    inChild: RigElementKey,
    inParent: RigElementKey,
    initial: Boolean,
    affectChildren: Boolean,
  ): Boolean

  @JsName("SwitchToDefaultParent")
  public open fun switchToDefaultParent(
    inChild: RigElementKey,
    initial: Boolean,
    affectChildren: Boolean,
  ): Boolean

  @JsName("SortKeys")
  public open fun sortKeys(inKeys: Array<RigElementKey>): Array<RigElementKey>

  @JsName("SetPose_ForBlueprint")
  public open fun setPoseForBlueprint(inPose: RigPose): Unit

  @JsName("SetParentWeightArray")
  public open fun setParentWeightArray(
    inChild: RigElementKey,
    inWeights: Array<RigElementWeight>,
    initial: Boolean,
    affectChildren: Boolean,
  ): Boolean

  @JsName("SetParentWeight")
  public open fun setParentWeight(
    inChild: RigElementKey,
    inParent: RigElementKey,
    inWeight: RigElementWeight,
    initial: Boolean,
    affectChildren: Boolean,
  ): Boolean

  @JsName("SetLocalTransformByIndex")
  public open fun setLocalTransformByIndex(
    inElementIndex: Number,
    inTransform: Transform,
    initial: Boolean,
    affectChildren: Boolean,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Unit

  @JsName("SetLocalTransform")
  public open fun setLocalTransform(
    inKey: RigElementKey,
    inTransform: Transform,
    initial: Boolean,
    affectChildren: Boolean,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Unit

  @JsName("SetGlobalTransformByIndex")
  public open fun setGlobalTransformByIndex(
    inElementIndex: Number,
    inTransform: Transform,
    initial: Boolean,
    affectChildren: Boolean,
    setupUndo: Boolean,
  ): Unit

  @JsName("SetGlobalTransform")
  public open fun setGlobalTransform(
    inKey: RigElementKey,
    inTransform: Transform,
    initial: Boolean,
    affectChildren: Boolean,
    setupUndo: Boolean,
  ): Unit

  @JsName("SetCurveValueByIndex")
  public open fun setCurveValueByIndex(
    inElementIndex: Number,
    inValue: Number,
    setupUndo: Boolean,
  ): Unit

  @JsName("SetCurveValue")
  public open fun setCurveValue(
    inKey: RigElementKey,
    inValue: Number,
    setupUndo: Boolean,
  ): Unit

  @JsName("SetControlVisibilityByIndex")
  public open fun setControlVisibilityByIndex(inElementIndex: Number, visibility: Boolean): Unit

  @JsName("SetControlVisibility")
  public open fun setControlVisibility(inKey: RigElementKey, visibility: Boolean): Unit

  @JsName("SetControlValueByIndex")
  public open fun setControlValueByIndex(
    inElementIndex: Number,
    inValue: RigControlValue,
    inValueType: String,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Unit

  @JsName("SetControlValue")
  public open fun setControlValue(
    inKey: RigElementKey,
    inValue: RigControlValue,
    inValueType: String,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Unit

  @JsName("SetControlShapeTransformByIndex")
  public open fun setControlShapeTransformByIndex(
    inElementIndex: Number,
    inTransform: Transform,
    initial: Boolean,
    setupUndo: Boolean,
  ): Unit

  @JsName("SetControlShapeTransform")
  public open fun setControlShapeTransform(
    inKey: RigElementKey,
    inTransform: Transform,
    initial: Boolean,
    setupUndo: Boolean,
  ): Unit

  @JsName("SetControlSettingsByIndex")
  public open fun setControlSettingsByIndex(
    inElementIndex: Number,
    inSettings: RigControlSettings,
    setupUndo: Boolean,
    force: Boolean,
    printPythonCommands: Boolean,
  ): Unit

  @JsName("SetControlSettings")
  public open fun setControlSettings(
    inKey: RigElementKey,
    inSettings: RigControlSettings,
    setupUndo: Boolean,
    force: Boolean,
    printPythonCommands: Boolean,
  ): Unit

  @JsName("SetControlOffsetTransformByIndex")
  public open fun setControlOffsetTransformByIndex(
    inElementIndex: Number,
    inTransform: Transform,
    initial: Boolean,
    affectChildren: Boolean,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Unit

  @JsName("SetControlOffsetTransform")
  public open fun setControlOffsetTransform(
    inKey: RigElementKey,
    inTransform: Transform,
    initial: Boolean,
    affectChildren: Boolean,
    setupUndo: Boolean,
    printPythonCommands: Boolean,
  ): Unit

  @JsName("SendAutoKeyEvent")
  public open fun sendAutoKeyEvent(
    inElement: RigElementKey,
    inOffsetInSeconds: Number,
    asynchronous: Boolean,
  ): Unit

  @JsName("ResetPoseToInitial")
  public open fun resetPoseToInitial(inTypeFilter: String): Unit

  @JsName("ResetCurveValues")
  public open fun resetCurveValues(): Unit

  @JsName("Reset")
  public open fun reset(): Unit

  @JsName("Num")
  public open fun num(): Number

  @JsName("IsValidIndex")
  public open fun isValidIndex(inElementIndex: Number): Boolean

  @JsName("IsSelectedByIndex")
  public open fun isSelectedByIndex(inIndex: Number): Boolean

  @JsName("IsSelected")
  public open fun isSelected(inKey: RigElementKey): Boolean

  @JsName("IsParentedTo")
  public open fun isParentedTo(inChild: RigElementKey, inParent: RigElementKey): Boolean

  @JsName("GetSelectedKeys")
  public open fun getSelectedKeys(inTypeFilter: String): Array<RigElementKey>

  @JsName("GetRigidBodyKeys")
  public open fun getRigidBodyKeys(traverse: Boolean): Array<RigElementKey>

  @JsName("GetReferenceKeys")
  public open fun getReferenceKeys(traverse: Boolean): Array<RigElementKey>

  @JsName("GetPreviousParent")
  public open fun getPreviousParent(inKey: RigElementKey): RigElementKey

  @JsName("GetPreviousName")
  public open fun getPreviousName(inKey: RigElementKey): String

  @JsName("GetPose")
  public open fun getPose(initial: Boolean): RigPose

  @JsName("GetParentWeightArray")
  public open fun getParentWeightArray(inChild: RigElementKey, initial: Boolean):
      Array<RigElementWeight>

  @JsName("GetParentWeight")
  public open fun getParentWeight(
    inChild: RigElementKey,
    inParent: RigElementKey,
    initial: Boolean,
  ): RigElementWeight

  @JsName("GetParentTransformByIndex")
  public open fun getParentTransformByIndex(inElementIndex: Number, initial: Boolean): Transform

  @JsName("GetParentTransform")
  public open fun getParentTransform(inKey: RigElementKey, initial: Boolean): Transform

  @JsName("GetParents")
  public open fun getParents(inKey: RigElementKey, recursive: Boolean): Array<RigElementKey>

  @JsName("GetNumberOfParents")
  public open fun getNumberOfParents(inKey: RigElementKey): Number

  @JsName("GetNullKeys")
  public open fun getNullKeys(traverse: Boolean): Array<RigElementKey>

  @JsName("GetLocalTransformByIndex")
  public open fun getLocalTransformByIndex(inElementIndex: Number, initial: Boolean): Transform

  @JsName("GetLocalTransform")
  public open fun getLocalTransform(inKey: RigElementKey, initial: Boolean): Transform

  @JsName("GetKey")
  public open fun getKey(inElementIndex: Number): RigElementKey

  @JsName("GetIndex_ForBlueprint")
  public open fun getIndexForBlueprint(inKey: RigElementKey): Number

  @JsName("GetGlobalTransformByIndex")
  public open fun getGlobalTransformByIndex(inElementIndex: Number, initial: Boolean): Transform

  @JsName("GetGlobalTransform")
  public open fun getGlobalTransform(inKey: RigElementKey, initial: Boolean): Transform

  @JsName("GetGlobalControlShapeTransformByIndex")
  public open fun getGlobalControlShapeTransformByIndex(inElementIndex: Number, initial: Boolean):
      Transform

  @JsName("GetGlobalControlShapeTransform")
  public open fun getGlobalControlShapeTransform(inKey: RigElementKey, initial: Boolean): Transform

  @JsName("GetGlobalControlOffsetTransformByIndex")
  public open fun getGlobalControlOffsetTransformByIndex(inElementIndex: Number, initial: Boolean):
      Transform

  @JsName("GetGlobalControlOffsetTransform")
  public open fun getGlobalControlOffsetTransform(inKey: RigElementKey, initial: Boolean): Transform

  @JsName("GetFirstParent")
  public open fun getFirstParent(inKey: RigElementKey): RigElementKey

  @JsName("GetCurveValueByIndex")
  public open fun getCurveValueByIndex(inElementIndex: Number): Number

  @JsName("GetCurveValue")
  public open fun getCurveValue(inKey: RigElementKey): Number

  @JsName("GetCurveKeys")
  public open fun getCurveKeys(): Array<RigElementKey>

  @JsName("GetControlValueByIndex")
  public open fun getControlValueByIndex(inElementIndex: Number, inValueType: String):
      RigControlValue

  @JsName("GetControlValue")
  public open fun getControlValue(inKey: RigElementKey, inValueType: String): RigControlValue

  @JsName("GetController")
  public open fun getController(createIfNeeded: Boolean): RigHierarchyController

  @JsName("GetControlKeys")
  public open fun getControlKeys(traverse: Boolean): Array<RigElementKey>

  @JsName("GetChildren")
  public open fun getChildren(inKey: RigElementKey, recursive: Boolean): Array<RigElementKey>

  @JsName("GetBoneKeys")
  public open fun getBoneKeys(traverse: Boolean): Array<RigElementKey>

  @JsName("GetAllKeys_ForBlueprint")
  public open fun getAllKeysForBlueprint(traverse: Boolean): Array<RigElementKey>

  @JsName("FindNull_ForBlueprintOnly")
  public open fun findNullForBlueprintOnly(inKey: RigElementKey): RigNullElement

  @JsName("FindControl_ForBlueprintOnly")
  public open fun findControlForBlueprintOnly(inKey: RigElementKey): RigControlElement

  @JsName("FindBone_ForBlueprintOnly")
  public open fun findBoneForBlueprintOnly(inKey: RigElementKey): RigBoneElement

  @JsName("CopyPose")
  public open fun copyPose(
    inHierarchy: RigHierarchy,
    current: Boolean,
    initial: Boolean,
  ): Unit

  @JsName("CopyHierarchy")
  public open fun copyHierarchy(inHierarchy: RigHierarchy): Unit

  @JsName("Contains_ForBlueprint")
  public open fun containsForBlueprint(inKey: RigElementKey): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigHierarchy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigHierarchy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigHierarchy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigHierarchy

    @JsName("MakeControlValueFromVector2D")
    public fun makeControlValueFromVector2d(inValue: Vector2d): RigControlValue

    @JsName("MakeControlValueFromVector")
    public fun makeControlValueFromVector(inValue: Vector): RigControlValue

    @JsName("MakeControlValueFromTransformNoScale")
    public fun makeControlValueFromTransformNoScale(inValue: TransformNoScale): RigControlValue

    @JsName("MakeControlValueFromTransform")
    public fun makeControlValueFromTransform(inValue: Transform): RigControlValue

    @JsName("MakeControlValueFromRotator")
    public fun makeControlValueFromRotator(inValue: Rotator): RigControlValue

    @JsName("MakeControlValueFromInt")
    public fun makeControlValueFromInt(inValue: Number): RigControlValue

    @JsName("MakeControlValueFromFloat")
    public fun makeControlValueFromFloat(inValue: Number): RigControlValue

    @JsName("MakeControlValueFromEulerTransform")
    public fun makeControlValueFromEulerTransform(inValue: EulerTransform): RigControlValue

    @JsName("MakeControlValueFromBool")
    public fun makeControlValueFromBool(inValue: Boolean): RigControlValue

    @JsName("GetVectorFromControlValue")
    public fun getVectorFromControlValue(inValue: RigControlValue): Vector

    @JsName("GetVector2DFromControlValue")
    public fun getVector2dFromControlValue(inValue: RigControlValue): Vector2d

    @JsName("GetTransformNoScaleFromControlValue")
    public fun getTransformNoScaleFromControlValue(inValue: RigControlValue): TransformNoScale

    @JsName("GetTransformFromControlValue")
    public fun getTransformFromControlValue(inValue: RigControlValue): Transform

    @JsName("GetRotatorFromControlValue")
    public fun getRotatorFromControlValue(inValue: RigControlValue): Rotator

    @JsName("GetIntFromControlValue")
    public fun getIntFromControlValue(inValue: RigControlValue): Number

    @JsName("GetFloatFromControlValue")
    public fun getFloatFromControlValue(inValue: RigControlValue): Number

    @JsName("GetEulerTransformFromControlValue")
    public fun getEulerTransformFromControlValue(inValue: RigControlValue): EulerTransform

    @JsName("C")
    public fun copy(other: UObject): RigHierarchy

    @JsName("C")
    public fun copy(other: Any): RigHierarchy
  }
}

public open external class ControlRigShapeDefinition {
  @JsName("ShapeName")
  public open var shapeName: String

  @JsName("StaticMesh")
  public open var staticMesh: StaticMesh

  @JsName("Transform")
  public open var transform: Transform

  public open fun clone(): ControlRigShapeDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigShapeDefinition

    @JsName("C")
    public fun copy(other: Any): ControlRigShapeDefinition
  }
}

public open external class ControlRigShapeLibrary(
  outer: UObject,
) : UObject {
  @JsName("DefaultShape")
  public open var defaultShape: ControlRigShapeDefinition

  @JsName("DefaultMaterial")
  public open var defaultMaterial: Material

  @JsName("MaterialColorParameter")
  public open var materialColorParameter: String

  @JsName("Shapes")
  public open var shapes: Array<ControlRigShapeDefinition>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigShapeLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigShapeLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigShapeLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigShapeLibrary

    @JsName("C")
    public fun copy(other: UObject): ControlRigShapeLibrary

    @JsName("C")
    public fun copy(other: Any): ControlRigShapeLibrary
  }
}

@JsName("EControlRigDrawSettings")
public external object ControlRigDrawSettings {
  public var Points: String

  public var Lines: String

  public var LineStrip: String

  public var DynamicMesh: String

  @JsName("EControlRigDrawSettings_MAX")
  public var Max: String
}

public open external class ControlRigDrawInstruction {
  @JsName("Name")
  public open var name: String

  @JsName("PrimitiveType")
  public open var primitiveType: String

  @JsName("Positions")
  public open var positions: Array<Vector>

  @JsName("Color")
  public open var color: LinearColor

  @JsName("Thickness")
  public open var thickness: Number

  @JsName("Transform")
  public open var transform: Transform

  public open fun clone(): ControlRigDrawInstruction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigDrawInstruction

    @JsName("C")
    public fun copy(other: Any): ControlRigDrawInstruction
  }
}

public open external class ControlRigDrawContainer {
  @JsName("Instructions")
  public open var instructions: Array<ControlRigDrawInstruction>

  public open fun clone(): ControlRigDrawContainer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigDrawContainer

    @JsName("C")
    public fun copy(other: Any): ControlRigDrawContainer
  }
}

public open external class AnimationDataSourceRegistry(
  outer: UObject,
) : UObject {
  @JsName("DataSources")
  public open var dataSources: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationDataSourceRegistry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationDataSourceRegistry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationDataSourceRegistry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationDataSourceRegistry

    @JsName("C")
    public fun copy(other: UObject): AnimationDataSourceRegistry

    @JsName("C")
    public fun copy(other: Any): AnimationDataSourceRegistry
  }
}

public open external class RigInfluenceEntry {
  @JsName("Source")
  public open var source: RigElementKey

  @JsName("AffectedList")
  public open var affectedList: Array<RigElementKey>

  public open fun clone(): RigInfluenceEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigInfluenceEntry

    @JsName("C")
    public fun copy(other: Any): RigInfluenceEntry
  }
}

public open external class RigInfluenceMap {
  @JsName("EventName")
  public open var eventName: String

  @JsName("Entries")
  public open var entries: Array<RigInfluenceEntry>

  @JsName("KeyToIndex")
  public open var keyToIndex: Any

  public open fun clone(): RigInfluenceMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigInfluenceMap

    @JsName("C")
    public fun copy(other: Any): RigInfluenceMap
  }
}

public open external class RigInfluenceMapPerEvent {
  @JsName("Maps")
  public open var maps: Array<RigInfluenceMap>

  @JsName("EventToIndex")
  public open var eventToIndex: Any

  public open fun clone(): RigInfluenceMapPerEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigInfluenceMapPerEvent

    @JsName("C")
    public fun copy(other: Any): RigInfluenceMapPerEvent
  }
}

@JsName("EControlRigState")
public external object ControlRigState {
  public var Init: String

  public var Update: String

  public var Invalid: String

  @JsName("EControlRigState_MAX")
  public var Max: String
}

public open external class ControlRig(
  outer: UObject,
) : UObject {
  @JsName("ExecutionType")
  public open var executionType: String

  @JsName("VMRuntimeSettings")
  public open var vmRuntimeSettings: RigVmRuntimeSettings

  @JsName("ControlCustomizations")
  public open var controlCustomizations: Any

  public open var VM: RigVm

  @JsName("DynamicHierarchy")
  public open var dynamicHierarchy: RigHierarchy

  @JsName("GizmoLibrary")
  public open var gizmoLibrary: ControlRigShapeLibrary

  @JsName("ShapeLibraries")
  public open var shapeLibraries: Array<ControlRigShapeLibrary>

  @JsName("InputProperties")
  public open var inputProperties: Any

  @JsName("OutputProperties")
  public open var outputProperties: Any

  @JsName("DrawContainer")
  public open var drawContainer: ControlRigDrawContainer

  @JsName("DataSourceRegistry")
  public open var dataSourceRegistry: AnimationDataSourceRegistry

  @JsName("EventQueue")
  public open var eventQueue: Array<String>

  @JsName("Influences")
  public open var influences: RigInfluenceMapPerEvent

  @JsName("InteractionRig")
  public open var interactionRig: ControlRig

  @JsName("InteractionRigClass")
  public open var interactionRigClass: UnrealEngineClass

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("VMSnapshotBeforeExecution")
  public open var vmSnapshotBeforeExecution: RigVm

  @JsName("bIsInDebugMode")
  public open var isInDebugMode: Boolean

  @JsName("SupportsEvent")
  public open fun supportsEvent(inEventName: String): Boolean

  @JsName("SetVariableFromString")
  public open fun setVariableFromString(inVariableName: String, inValue: String): Boolean

  @JsName("SetInteractionRigClass")
  public open fun setInteractionRigClass(inInteractionRigClass: UnrealEngineClass): Unit

  @JsName("SetInteractionRig")
  public open fun setInteractionRig(inInteractionRig: ControlRig): Unit

  @JsName("SetFramesPerSecond")
  public open fun setFramesPerSecond(inFramesPerSecond: Number): Unit

  @JsName("SetDeltaTime")
  public open fun setDeltaTime(inDeltaTime: Number): Unit

  @JsName("SetAbsoluteTime")
  public open fun setAbsoluteTime(inAbsoluteTime: Number, inSetDeltaTimeZero: Boolean): Unit

  @JsName("SetAbsoluteAndDeltaTime")
  public open fun setAbsoluteAndDeltaTime(inAbsoluteTime: Number, inDeltaTime: Number): Unit

  @JsName("SelectControl")
  public open fun selectControl(inControlName: String, select: Boolean): Unit

  @JsName("RequestSetup")
  public open fun requestSetup(): Unit

  @JsName("RequestInit")
  public open fun requestInit(): Unit

  @JsName("IsControlSelected")
  public open fun isControlSelected(inControlName: String): Boolean

  @JsName("GetVM")
  public open fun getVm(): RigVm

  @JsName("GetVariableType")
  public open fun getVariableType(inVariableName: String): String

  @JsName("GetVariableAsString")
  public open fun getVariableAsString(inVariableName: String): String

  @JsName("GetSupportedEvents")
  public open fun getSupportedEvents(): Array<String>

  @JsName("GetScriptAccessibleVariables")
  public open fun getScriptAccessibleVariables(): Array<String>

  @JsName("GetInteractionRigClass")
  public open fun getInteractionRigClass(): UnrealEngineClass

  @JsName("GetInteractionRig")
  public open fun getInteractionRig(): ControlRig

  @JsName("GetHierarchy")
  public open fun getHierarchy(): RigHierarchy

  @JsName("GetCurrentFramesPerSecond")
  public open fun getCurrentFramesPerSecond(): Number

  @JsName("GetAbsoluteTime")
  public open fun getAbsoluteTime(): Number

  @JsName("Execute")
  public open fun execute(state: String, inEventName: String): Unit

  @JsName("CurrentControlSelection")
  public open fun currentControlSelection(): Array<String>

  @JsName("ClearControlSelection")
  public open fun clearControlSelection(): Boolean

  @JsName("CanExecute")
  public open fun canExecute(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRig

    @JsName("FindControlRigs")
    public fun findControlRigs(outer: UObject, optionalClass: UnrealEngineClass): Array<ControlRig>

    @JsName("C")
    public fun copy(other: UObject): ControlRig

    @JsName("C")
    public fun copy(other: Any): ControlRig
  }
}

public open external class RigSpacePickerBakeSettings {
  @JsName("TargetSpace")
  public open var targetSpace: RigElementKey

  @JsName("StartFrame")
  public open var startFrame: FrameNumber

  @JsName("EndFrame")
  public open var endFrame: FrameNumber

  @JsName("bReduceKeys")
  public open var reduceKeys: Boolean

  @JsName("Tolerance")
  public open var tolerance: Number

  public open fun clone(): RigSpacePickerBakeSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigSpacePickerBakeSettings

    @JsName("C")
    public fun copy(other: Any): RigSpacePickerBakeSettings
  }
}

public open external class MovieSceneNameableTrack(
  outer: UObject,
) : MovieSceneTrack {
  @JsName("DisplayName")
  public open var displayName: String

  @JsName("TrackRowDisplayNames")
  public open var trackRowDisplayNames: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneNameableTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneNameableTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneNameableTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneNameableTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneNameableTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneNameableTrack
  }
}

public open external class MovieSceneControlRigParameterTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("ControlRig")
  public open var controlRig: ControlRig

  @JsName("SectionToKey")
  public open var sectionToKey: MovieSceneSection

  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  @JsName("TrackName")
  public open var trackName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneControlRigParameterTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneControlRigParameterTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneControlRigParameterTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneControlRigParameterTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneControlRigParameterTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneControlRigParameterTrack
  }
}

public open external class ControlRigSequencerBindingProxy {
  @JsName("Proxy")
  public open var proxy: SequencerBindingProxy

  @JsName("ControlRig")
  public open var controlRig: ControlRig

  @JsName("Track")
  public open var track: MovieSceneControlRigParameterTrack

  public open fun clone(): ControlRigSequencerBindingProxy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigSequencerBindingProxy

    @JsName("C")
    public fun copy(other: Any): ControlRigSequencerBindingProxy
  }
}

public open external class ActorForWorldTransforms {
  @JsName("Actor")
  public open var actor: Any

  @JsName("Component")
  public open var component: Any

  @JsName("SocketName")
  public open var socketName: String

  public open fun clone(): ActorForWorldTransforms

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorForWorldTransforms

    @JsName("C")
    public fun copy(other: Any): ActorForWorldTransforms
  }
}

public open external class ControlRigForWorldTransforms {
  @JsName("ControlRig")
  public open var controlRig: Any

  @JsName("ControlNames")
  public open var controlNames: Array<String>

  public open fun clone(): ControlRigForWorldTransforms

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigForWorldTransforms

    @JsName("C")
    public fun copy(other: Any): ControlRigForWorldTransforms
  }
}

public open external class ControlRigSnapperSelection {
  @JsName("Actors")
  public open var actors: Array<ActorForWorldTransforms>

  @JsName("ControlRigs")
  public open var controlRigs: Array<ControlRigForWorldTransforms>

  public open fun clone(): ControlRigSnapperSelection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigSnapperSelection

    @JsName("C")
    public fun copy(other: Any): ControlRigSnapperSelection
  }
}

public open external class ControlRigSnapSettings(
  outer: UObject,
) : UObject {
  @JsName("bKeepOffset")
  public open var keepOffset: Boolean

  @JsName("bSnapPosition")
  public open var snapPosition: Boolean

  @JsName("bSnapRotation")
  public open var snapRotation: Boolean

  @JsName("bSnapScale")
  public open var snapScale: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigSnapSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigSnapSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigSnapSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigSnapSettings

    @JsName("C")
    public fun copy(other: UObject): ControlRigSnapSettings

    @JsName("C")
    public fun copy(other: Any): ControlRigSnapSettings
  }
}

public open external class LevelSequence(
  outer: UObject,
) : MovieSceneSequence {
  @JsName("MovieScene")
  public open var movieScene: MovieScene

  @JsName("ObjectReferences")
  public open var objectReferences: LevelSequenceObjectReferenceMap

  @JsName("BindingReferences")
  public open var bindingReferences: LevelSequenceBindingReferences

  @JsName("PossessedObjects")
  public open var possessedObjects: Any

  @JsName("DirectorBlueprint")
  public open var directorBlueprint: Blueprint

  @JsName("DirectorClass")
  public open var directorClass: UnrealEngineClass

  @JsName("MetaDataObjects")
  public open var metaDataObjects: Array<UObject>

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("RemoveMetaDataByClass")
  public open fun removeMetaDataByClass(inClass: UnrealEngineClass): Unit

  @JsName("FindOrAddMetaDataByClass")
  public open fun findOrAddMetaDataByClass(inClass: UnrealEngineClass): UObject

  @JsName("FindMetaDataByClass")
  public open fun findMetaDataByClass(inClass: UnrealEngineClass): UObject

  @JsName("CopyMetaData")
  public open fun copyMetaData(inMetaData: UObject): UObject

  @JsName("BakeControlRigSpace")
  public open fun bakeControlRigSpace(
    inControlRig: ControlRig,
    inControlNames: Array<String>,
    inSettings: RigSpacePickerBakeSettings,
    timeUnit: String,
  ): Boolean

  @JsName("CollapseControlRigAnimLayers")
  public open fun collapseControlRigAnimLayers(
    inTrack: MovieSceneControlRigParameterTrack,
    keyReduce: Boolean,
    tolerance: Number,
  ): Boolean

  @JsName("DeleteControlRigSpace")
  public open fun deleteControlRigSpace(
    inControlRig: ControlRig,
    inControlName: String,
    inTime: FrameNumber,
    timeUnit: String,
  ): Boolean

  @JsName("GetActorWorldTransform")
  public open fun getActorWorldTransform(
    actor: Actor,
    frame: FrameNumber,
    timeUnit: String,
  ): Transform

  @JsName("GetActorWorldTransforms")
  public open fun getActorWorldTransforms(
    actor: Actor,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Transform>

  @JsName("GetControlRigs")
  public open fun getControlRigs(): Array<ControlRigSequencerBindingProxy>

  @JsName("GetControlRigWorldTransform")
  public open fun getControlRigWorldTransform(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Transform

  @JsName("GetControlRigWorldTransforms")
  public open fun getControlRigWorldTransforms(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Transform>

  @JsName("GetLocalControlRigBool")
  public open fun getLocalControlRigBool(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Boolean

  @JsName("GetLocalControlRigBools")
  public open fun getLocalControlRigBools(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Boolean>

  @JsName("GetLocalControlRigEulerTransform")
  public open fun getLocalControlRigEulerTransform(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): EulerTransform

  @JsName("GetLocalControlRigEulerTransforms")
  public open fun getLocalControlRigEulerTransforms(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<EulerTransform>

  @JsName("GetLocalControlRigFloat")
  public open fun getLocalControlRigFloat(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Number

  @JsName("GetLocalControlRigFloats")
  public open fun getLocalControlRigFloats(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Number>

  @JsName("GetLocalControlRigInt")
  public open fun getLocalControlRigInt(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Number

  @JsName("GetLocalControlRigInts")
  public open fun getLocalControlRigInts(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Number>

  @JsName("GetLocalControlRigPosition")
  public open fun getLocalControlRigPosition(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Vector

  @JsName("GetLocalControlRigPositions")
  public open fun getLocalControlRigPositions(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Vector>

  @JsName("GetLocalControlRigRotator")
  public open fun getLocalControlRigRotator(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Rotator

  @JsName("GetLocalControlRigRotators")
  public open fun getLocalControlRigRotators(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Rotator>

  @JsName("GetLocalControlRigScale")
  public open fun getLocalControlRigScale(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Vector

  @JsName("GetLocalControlRigScales")
  public open fun getLocalControlRigScales(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Vector>

  @JsName("GetLocalControlRigTransform")
  public open fun getLocalControlRigTransform(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Transform

  @JsName("GetLocalControlRigTransformNoScale")
  public open fun getLocalControlRigTransformNoScale(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): TransformNoScale

  @JsName("GetLocalControlRigTransformNoScales")
  public open fun getLocalControlRigTransformNoScales(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<TransformNoScale>

  @JsName("GetLocalControlRigTransforms")
  public open fun getLocalControlRigTransforms(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Transform>

  @JsName("GetLocalControlRigVector2D")
  public open fun getLocalControlRigVector2d(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    timeUnit: String,
  ): Vector2d

  @JsName("GetLocalControlRigVector2Ds")
  public open fun getLocalControlRigVector2Ds(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    timeUnit: String,
  ): Array<Vector2d>

  @JsName("GetSkeletalMeshComponentWorldTransform")
  public open fun getSkeletalMeshComponentWorldTransform(
    skeletalMeshComponent: SkeletalMeshComponent,
    frame: FrameNumber,
    timeUnit: String,
    referenceName: String,
  ): Transform

  @JsName("GetSkeletalMeshComponentWorldTransforms")
  public open fun getSkeletalMeshComponentWorldTransforms(
    skeletalMeshComponent: SkeletalMeshComponent,
    frames: Array<FrameNumber>,
    timeUnit: String,
    referenceName: String,
  ): Array<Transform>

  @JsName("MoveControlRigSpace")
  public open fun moveControlRigSpace(
    inControlRig: ControlRig,
    inControlName: String,
    inTime: FrameNumber,
    inNewTime: FrameNumber,
    timeUnit: String,
  ): Boolean

  @JsName("SetControlRigSpace")
  public open fun setControlRigSpace(
    inControlRig: ControlRig,
    inControlName: String,
    inSpaceKey: RigElementKey,
    inTime: FrameNumber,
    timeUnit: String,
  ): Boolean

  @JsName("SetControlRigWorldTransform")
  public open fun setControlRigWorldTransform(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    worldTransform: Transform,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetControlRigWorldTransforms")
  public open fun setControlRigWorldTransforms(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    worldTransforms: Array<Transform>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigBool")
  public open fun setLocalControlRigBool(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: Boolean,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigBools")
  public open fun setLocalControlRigBools(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<Boolean>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigEulerTransform")
  public open fun setLocalControlRigEulerTransform(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: EulerTransform,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigEulerTransforms")
  public open fun setLocalControlRigEulerTransforms(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<EulerTransform>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigFloat")
  public open fun setLocalControlRigFloat(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: Number,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigFloats")
  public open fun setLocalControlRigFloats(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<Number>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigInt")
  public open fun setLocalControlRigInt(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: Number,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigInts")
  public open fun setLocalControlRigInts(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<Number>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigPosition")
  public open fun setLocalControlRigPosition(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: Vector,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigPositions")
  public open fun setLocalControlRigPositions(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<Vector>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigRotator")
  public open fun setLocalControlRigRotator(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: Rotator,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigRotators")
  public open fun setLocalControlRigRotators(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<Rotator>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigScale")
  public open fun setLocalControlRigScale(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: Vector,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigScales")
  public open fun setLocalControlRigScales(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<Vector>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigTransform")
  public open fun setLocalControlRigTransform(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: Transform,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigTransformNoScale")
  public open fun setLocalControlRigTransformNoScale(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: TransformNoScale,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigTransformNoScales")
  public open fun setLocalControlRigTransformNoScales(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<TransformNoScale>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigTransforms")
  public open fun setLocalControlRigTransforms(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<Transform>,
    timeUnit: String,
  ): Unit

  @JsName("SetLocalControlRigVector2D")
  public open fun setLocalControlRigVector2d(
    controlRig: ControlRig,
    controlName: String,
    frame: FrameNumber,
    value: Vector2d,
    timeUnit: String,
    setKey: Boolean,
  ): Unit

  @JsName("SetLocalControlRigVector2Ds")
  public open fun setLocalControlRigVector2Ds(
    controlRig: ControlRig,
    controlName: String,
    frames: Array<FrameNumber>,
    values: Array<Vector2d>,
    timeUnit: String,
  ): Unit

  @JsName("SnapControlRig")
  public open fun snapControlRig(
    startFrame: FrameNumber,
    endFrame: FrameNumber,
    childrenToSnap: ControlRigSnapperSelection,
    parentToSnap: ControlRigSnapperSelection,
    snapSettings: ControlRigSnapSettings,
    timeUnit: String,
  ): Boolean

  @JsName("TweenControlRig")
  public open fun tweenControlRig(controlRig: ControlRig, tweenValue: Number): Boolean

  @JsName("OpenLevelSequence")
  public open fun openLevelSequence(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequence

    @JsName("C")
    public fun copy(other: UObject): LevelSequence

    @JsName("C")
    public fun copy(other: Any): LevelSequence

    @JsName("BakeControlRigSpace")
    public fun bakeControlRigSpace(
      inSequence: LevelSequence,
      inControlRig: ControlRig,
      inControlNames: Array<String>,
      inSettings: RigSpacePickerBakeSettings,
      timeUnit: String,
    ): Boolean

    @JsName("CollapseControlRigAnimLayers")
    public fun collapseControlRigAnimLayers(
      inSequence: LevelSequence,
      inTrack: MovieSceneControlRigParameterTrack,
      keyReduce: Boolean,
      tolerance: Number,
    ): Boolean

    @JsName("DeleteControlRigSpace")
    public fun deleteControlRigSpace(
      inSequence: LevelSequence,
      inControlRig: ControlRig,
      inControlName: String,
      inTime: FrameNumber,
      timeUnit: String,
    ): Boolean

    @JsName("GetActorWorldTransform")
    public fun getActorWorldTransform(
      levelSequence: LevelSequence,
      actor: Actor,
      frame: FrameNumber,
      timeUnit: String,
    ): Transform

    @JsName("GetActorWorldTransforms")
    public fun getActorWorldTransforms(
      levelSequence: LevelSequence,
      actor: Actor,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Transform>

    @JsName("GetControlRigs")
    public fun getControlRigs(levelSequence: LevelSequence): Array<ControlRigSequencerBindingProxy>

    @JsName("GetControlRigWorldTransform")
    public fun getControlRigWorldTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Transform

    @JsName("GetControlRigWorldTransforms")
    public fun getControlRigWorldTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Transform>

    @JsName("GetLocalControlRigBool")
    public fun getLocalControlRigBool(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Boolean

    @JsName("GetLocalControlRigBools")
    public fun getLocalControlRigBools(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Boolean>

    @JsName("GetLocalControlRigEulerTransform")
    public fun getLocalControlRigEulerTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): EulerTransform

    @JsName("GetLocalControlRigEulerTransforms")
    public fun getLocalControlRigEulerTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<EulerTransform>

    @JsName("GetLocalControlRigFloat")
    public fun getLocalControlRigFloat(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Number

    @JsName("GetLocalControlRigFloats")
    public fun getLocalControlRigFloats(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Number>

    @JsName("GetLocalControlRigInt")
    public fun getLocalControlRigInt(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Number

    @JsName("GetLocalControlRigInts")
    public fun getLocalControlRigInts(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Number>

    @JsName("GetLocalControlRigPosition")
    public fun getLocalControlRigPosition(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Vector

    @JsName("GetLocalControlRigPositions")
    public fun getLocalControlRigPositions(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Vector>

    @JsName("GetLocalControlRigRotator")
    public fun getLocalControlRigRotator(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Rotator

    @JsName("GetLocalControlRigRotators")
    public fun getLocalControlRigRotators(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Rotator>

    @JsName("GetLocalControlRigScale")
    public fun getLocalControlRigScale(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Vector

    @JsName("GetLocalControlRigScales")
    public fun getLocalControlRigScales(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Vector>

    @JsName("GetLocalControlRigTransform")
    public fun getLocalControlRigTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Transform

    @JsName("GetLocalControlRigTransformNoScale")
    public fun getLocalControlRigTransformNoScale(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): TransformNoScale

    @JsName("GetLocalControlRigTransformNoScales")
    public fun getLocalControlRigTransformNoScales(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<TransformNoScale>

    @JsName("GetLocalControlRigTransforms")
    public fun getLocalControlRigTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Transform>

    @JsName("GetLocalControlRigVector2D")
    public fun getLocalControlRigVector2d(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      timeUnit: String,
    ): Vector2d

    @JsName("GetLocalControlRigVector2Ds")
    public fun getLocalControlRigVector2Ds(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      timeUnit: String,
    ): Array<Vector2d>

    @JsName("GetSkeletalMeshComponentWorldTransform")
    public fun getSkeletalMeshComponentWorldTransform(
      levelSequence: LevelSequence,
      skeletalMeshComponent: SkeletalMeshComponent,
      frame: FrameNumber,
      timeUnit: String,
      referenceName: String,
    ): Transform

    @JsName("GetSkeletalMeshComponentWorldTransforms")
    public fun getSkeletalMeshComponentWorldTransforms(
      levelSequence: LevelSequence,
      skeletalMeshComponent: SkeletalMeshComponent,
      frames: Array<FrameNumber>,
      timeUnit: String,
      referenceName: String,
    ): Array<Transform>

    @JsName("MoveControlRigSpace")
    public fun moveControlRigSpace(
      inSequence: LevelSequence,
      inControlRig: ControlRig,
      inControlName: String,
      inTime: FrameNumber,
      inNewTime: FrameNumber,
      timeUnit: String,
    ): Boolean

    @JsName("SetControlRigSpace")
    public fun setControlRigSpace(
      inSequence: LevelSequence,
      inControlRig: ControlRig,
      inControlName: String,
      inSpaceKey: RigElementKey,
      inTime: FrameNumber,
      timeUnit: String,
    ): Boolean

    @JsName("SetControlRigWorldTransform")
    public fun setControlRigWorldTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      worldTransform: Transform,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetControlRigWorldTransforms")
    public fun setControlRigWorldTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      worldTransforms: Array<Transform>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigBool")
    public fun setLocalControlRigBool(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Boolean,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigBools")
    public fun setLocalControlRigBools(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Boolean>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigEulerTransform")
    public fun setLocalControlRigEulerTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: EulerTransform,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigEulerTransforms")
    public fun setLocalControlRigEulerTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<EulerTransform>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigFloat")
    public fun setLocalControlRigFloat(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Number,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigFloats")
    public fun setLocalControlRigFloats(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Number>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigInt")
    public fun setLocalControlRigInt(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Number,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigInts")
    public fun setLocalControlRigInts(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Number>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigPosition")
    public fun setLocalControlRigPosition(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Vector,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigPositions")
    public fun setLocalControlRigPositions(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Vector>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigRotator")
    public fun setLocalControlRigRotator(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Rotator,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigRotators")
    public fun setLocalControlRigRotators(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Rotator>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigScale")
    public fun setLocalControlRigScale(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Vector,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigScales")
    public fun setLocalControlRigScales(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Vector>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigTransform")
    public fun setLocalControlRigTransform(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Transform,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigTransformNoScale")
    public fun setLocalControlRigTransformNoScale(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: TransformNoScale,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigTransformNoScales")
    public fun setLocalControlRigTransformNoScales(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<TransformNoScale>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigTransforms")
    public fun setLocalControlRigTransforms(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Transform>,
      timeUnit: String,
    ): Unit

    @JsName("SetLocalControlRigVector2D")
    public fun setLocalControlRigVector2d(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frame: FrameNumber,
      value: Vector2d,
      timeUnit: String,
      setKey: Boolean,
    ): Unit

    @JsName("SetLocalControlRigVector2Ds")
    public fun setLocalControlRigVector2Ds(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      controlName: String,
      frames: Array<FrameNumber>,
      values: Array<Vector2d>,
      timeUnit: String,
    ): Unit

    @JsName("SnapControlRig")
    public fun snapControlRig(
      levelSequence: LevelSequence,
      startFrame: FrameNumber,
      endFrame: FrameNumber,
      childrenToSnap: ControlRigSnapperSelection,
      parentToSnap: ControlRigSnapperSelection,
      snapSettings: ControlRigSnapSettings,
      timeUnit: String,
    ): Boolean

    @JsName("TweenControlRig")
    public fun tweenControlRig(
      levelSequence: LevelSequence,
      controlRig: ControlRig,
      tweenValue: Number,
    ): Boolean

    @JsName("OpenLevelSequence")
    public fun openLevelSequence(levelSequence: LevelSequence): Boolean
  }
}

public open external class AnimSeqExportOption(
  outer: UObject,
) : UObject {
  @JsName("bExportTransforms")
  public open var exportTransforms: Boolean

  @JsName("bExportMorphTargets")
  public open var exportMorphTargets: Boolean

  @JsName("bExportAttributeCurves")
  public open var exportAttributeCurves: Boolean

  @JsName("bExportMaterialCurves")
  public open var exportMaterialCurves: Boolean

  @JsName("bRecordInWorldSpace")
  public open var recordInWorldSpace: Boolean

  @JsName("bEvaluateAllSkeletalMeshComponents")
  public open var evaluateAllSkeletalMeshComponents: Boolean

  @JsName("WarmUpFrames")
  public open var warmUpFrames: FrameNumber

  @JsName("DelayBeforeStart")
  public open var delayBeforeStart: FrameNumber

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimSeqExportOption

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimSeqExportOption

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimSeqExportOption

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimSeqExportOption

    @JsName("C")
    public fun copy(other: UObject): AnimSeqExportOption

    @JsName("C")
    public fun copy(other: Any): AnimSeqExportOption
  }
}

@JsName("EFbxExportCompatibility")
public external object FbxExportCompatibility {
  @JsName("FBX_2011")
  public var TwentyEleven: String

  @JsName("FBX_2012")
  public var TwentyTwelve: String

  @JsName("FBX_2013")
  public var TwentyThirteen: String

  @JsName("FBX_2014")
  public var TwentyFourteen: String

  @JsName("FBX_2016")
  public var TwentySixteen: String

  @JsName("FBX_2018")
  public var TwentyEighteen: String

  @JsName("FBX_2019")
  public var TwentyNineteen: String

  @JsName("FBX_2020")
  public var TwentyTwenty: String

  @JsName("FBX_MAX")
  public var Max: String
}

public open external class FbxExportOption(
  outer: UObject,
) : UObject {
  @JsName("FbxExportCompatibility")
  public open var fbxExportCompatibility: String

  @JsName("bASCII")
  public open var ASCII: Boolean

  @JsName("bForceFrontXAxis")
  public open var forceFrontXAxis: Boolean

  @JsName("VertexColor")
  public open var vertexColor: Boolean

  @JsName("LevelOfDetail")
  public open var levelOfDetail: Boolean

  @JsName("Collision")
  public open var collision: Boolean

  @JsName("bExportMorphTargets")
  public open var exportMorphTargets: Boolean

  @JsName("bExportPreviewMesh")
  public open var exportPreviewMesh: Boolean

  @JsName("MapSkeletalMotionToRoot")
  public open var mapSkeletalMotionToRoot: Boolean

  @JsName("bExportLocalTime")
  public open var exportLocalTime: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FbxExportOption

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FbxExportOption

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FbxExportOption

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FbxExportOption

    @JsName("C")
    public fun copy(other: UObject): FbxExportOption

    @JsName("C")
    public fun copy(other: Any): FbxExportOption
  }
}

public open external class SequencerBoundObjects {
  @JsName("BindingProxy")
  public open var bindingProxy: SequencerBindingProxy

  @JsName("BoundObjects")
  public open var boundObjects: Array<UObject>

  public open fun clone(): SequencerBoundObjects

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SequencerBoundObjects

    @JsName("C")
    public fun copy(other: Any): SequencerBoundObjects
  }
}

public open external class ControlFindReplaceString {
  @JsName("Find")
  public open var find: String

  @JsName("Replace")
  public open var replace: String

  public open fun clone(): ControlFindReplaceString

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlFindReplaceString

    @JsName("C")
    public fun copy(other: Any): ControlFindReplaceString
  }
}

public external object FControlRigChannelEnum {
  @JsName("Bool")
  public var bool: String

  @JsName("Enum")
  public var enum: String

  @JsName("Integer")
  public var integer: String

  @JsName("Float")
  public var float: String

  @JsName("Vector2DX")
  public var vector2dx: String

  @JsName("Vector2DY")
  public var vector2dy: String

  @JsName("PositionX")
  public var positionX: String

  @JsName("PositionY")
  public var positionY: String

  @JsName("PositionZ")
  public var positionZ: String

  @JsName("RotatorX")
  public var rotatorX: String

  @JsName("RotatorY")
  public var rotatorY: String

  @JsName("RotatorZ")
  public var rotatorZ: String

  @JsName("ScaleX")
  public var scaleX: String

  @JsName("ScaleY")
  public var scaleY: String

  @JsName("ScaleZ")
  public var scaleZ: String

  @JsName("FControlRigChannelEnum_MAX")
  public var fControlRigChannelEnumMax: String
}

public external object FTransformChannelEnum {
  @JsName("TranslateX")
  public var translateX: String

  @JsName("TranslateY")
  public var translateY: String

  @JsName("TranslateZ")
  public var translateZ: String

  @JsName("RotateX")
  public var rotateX: String

  @JsName("RotateY")
  public var rotateY: String

  @JsName("RotateZ")
  public var rotateZ: String

  @JsName("ScaleX")
  public var scaleX: String

  @JsName("ScaleY")
  public var scaleY: String

  @JsName("ScaleZ")
  public var scaleZ: String

  @JsName("FTransformChannelEnum_MAX")
  public var fTransformChannelEnumMax: String
}

public open external class ControlToTransformMappings {
  @JsName("ControlChannel")
  public open var controlChannel: String

  @JsName("FBXChannel")
  public open var fbxChannel: String

  @JsName("bNegate")
  public open var negate: Boolean

  public open fun clone(): ControlToTransformMappings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlToTransformMappings

    @JsName("C")
    public fun copy(other: Any): ControlToTransformMappings
  }
}

@JsName("MovieSceneUserImportFBXControlRigSettings")
public open external class MovieSceneUserImportFbxControlRigSettings(
  outer: UObject,
) : UObject {
  @JsName("ImportedFileName")
  public open var importedFileName: String

  @JsName("ImportedStartTime")
  public open var importedStartTime: FrameNumber

  @JsName("ImportedEndTime")
  public open var importedEndTime: FrameNumber

  @JsName("ImportedNodeNames")
  public open var importedNodeNames: Array<String>

  @JsName("ImportedFrameRate")
  public open var importedFrameRate: String

  @JsName("FindAndReplaceStrings")
  public open var findAndReplaceStrings: Array<ControlFindReplaceString>

  @JsName("bForceFrontXAxis")
  public open var forceFrontXAxis: Boolean

  @JsName("bConvertSceneUnit")
  public open var convertSceneUnit: Boolean

  @JsName("ImportUniformScale")
  public open var importUniformScale: Number

  @JsName("bImportOntoSelectedControls")
  public open var importOntoSelectedControls: Boolean

  @JsName("TimeToInsertOrReplaceAnimation")
  public open var timeToInsertOrReplaceAnimation: FrameNumber

  @JsName("bInsertAnimation")
  public open var insertAnimation: Boolean

  @JsName("bSpecifyTimeRange")
  public open var specifyTimeRange: Boolean

  @JsName("StartTimeRange")
  public open var startTimeRange: FrameNumber

  @JsName("EndTimeRange")
  public open var endTimeRange: FrameNumber

  @JsName("ControlChannelMappings")
  public open var controlChannelMappings: Array<ControlToTransformMappings>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneUserImportFbxControlRigSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneUserImportFbxControlRigSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneUserImportFbxControlRigSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneUserImportFbxControlRigSettings

    @JsName("C")
    public fun copy(other: UObject): MovieSceneUserImportFbxControlRigSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneUserImportFbxControlRigSettings
  }
}

@JsName("MovieSceneUserImportFBXSettings")
public open external class MovieSceneUserImportFbxSettings(
  outer: UObject,
) : UObject {
  @JsName("bMatchByNameOnly")
  public open var matchByNameOnly: Boolean

  @JsName("bForceFrontXAxis")
  public open var forceFrontXAxis: Boolean

  @JsName("bConvertSceneUnit")
  public open var convertSceneUnit: Boolean

  @JsName("ImportUniformScale")
  public open var importUniformScale: Number

  @JsName("bCreateCameras")
  public open var createCameras: Boolean

  @JsName("bReplaceTransformTrack")
  public open var replaceTransformTrack: Boolean

  @JsName("bReduceKeys")
  public open var reduceKeys: Boolean

  @JsName("ReduceKeysTolerance")
  public open var reduceKeysTolerance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneUserImportFbxSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneUserImportFbxSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneUserImportFbxSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneUserImportFbxSettings

    @JsName("C")
    public fun copy(other: UObject): MovieSceneUserImportFbxSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneUserImportFbxSettings
  }
}

public open external class MovieSceneChannel {
  public open fun clone(): MovieSceneChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneChannel
  }
}

public open external class MovieSceneBoolChannel : MovieSceneChannel {
  @JsName("Times")
  public open var times: Array<FrameNumber>

  @JsName("DefaultValue")
  public open var defaultValue: Boolean

  @JsName("bHasDefaultValue")
  public open var hasDefaultValue: Boolean

  @JsName("Values")
  public open var values: Array<Boolean>

  public override fun clone(): MovieSceneBoolChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneBoolChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneBoolChannel
  }
}

public open external class BoolParameterNameAndCurve {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterCurve")
  public open var parameterCurve: MovieSceneBoolChannel

  public open fun clone(): BoolParameterNameAndCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BoolParameterNameAndCurve

    @JsName("C")
    public fun copy(other: Any): BoolParameterNameAndCurve
  }
}

public open external class MovieSceneTangentData {
  @JsName("ArriveTangent")
  public open var arriveTangent: Number

  @JsName("LeaveTangent")
  public open var leaveTangent: Number

  @JsName("ArriveTangentWeight")
  public open var arriveTangentWeight: Number

  @JsName("LeaveTangentWeight")
  public open var leaveTangentWeight: Number

  @JsName("TangentWeightMode")
  public open var tangentWeightMode: String

  public open fun clone(): MovieSceneTangentData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTangentData

    @JsName("C")
    public fun copy(other: Any): MovieSceneTangentData
  }
}

public open external class MovieSceneFloatValue {
  @JsName("Value")
  public open var value: Number

  @JsName("Tangent")
  public open var tangent: MovieSceneTangentData

  @JsName("InterpMode")
  public open var interpMode: String

  @JsName("TangentMode")
  public open var tangentMode: String

  @JsName("PaddingByte")
  public open var paddingByte: Number

  public open fun clone(): MovieSceneFloatValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatValue

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatValue
  }
}

public open external class KeyHandleLookupTable {
  public open fun clone(): KeyHandleLookupTable

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KeyHandleLookupTable

    @JsName("C")
    public fun copy(other: Any): KeyHandleLookupTable
  }
}

public open external class MovieSceneKeyHandleMap : KeyHandleLookupTable {
  public override fun clone(): MovieSceneKeyHandleMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneKeyHandleMap

    @JsName("C")
    public fun copy(other: Any): MovieSceneKeyHandleMap
  }
}

public open external class MovieSceneFloatChannel : MovieSceneChannel {
  @JsName("PreInfinityExtrap")
  public open var preInfinityExtrap: String

  @JsName("PostInfinityExtrap")
  public open var postInfinityExtrap: String

  @JsName("Times")
  public open var times: Array<FrameNumber>

  @JsName("Values")
  public open var values: Array<MovieSceneFloatValue>

  @JsName("DefaultValue")
  public open var defaultValue: Number

  @JsName("bHasDefaultValue")
  public open var hasDefaultValue: Boolean

  @JsName("KeyHandles")
  public open var keyHandles: MovieSceneKeyHandleMap

  @JsName("TickResolution")
  public open var tickResolution: FrameRate

  @JsName("bShowCurve")
  public open var showCurve: Boolean

  public override fun clone(): MovieSceneFloatChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneFloatChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneFloatChannel
  }
}

public open external class ScalarParameterNameAndCurve {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterCurve")
  public open var parameterCurve: MovieSceneFloatChannel

  public open fun clone(): ScalarParameterNameAndCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScalarParameterNameAndCurve

    @JsName("C")
    public fun copy(other: Any): ScalarParameterNameAndCurve
  }
}

@JsName("Vector2DParameterNameAndCurves")
public open external class Vector2dParameterNameAndCurves {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("XCurve")
  public open var xCurve: MovieSceneFloatChannel

  @JsName("YCurve")
  public open var yCurve: MovieSceneFloatChannel

  public open fun clone(): Vector2dParameterNameAndCurves

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Vector2dParameterNameAndCurves

    @JsName("C")
    public fun copy(other: Any): Vector2dParameterNameAndCurves
  }
}

public open external class VectorParameterNameAndCurves {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("XCurve")
  public open var xCurve: MovieSceneFloatChannel

  @JsName("YCurve")
  public open var yCurve: MovieSceneFloatChannel

  @JsName("ZCurve")
  public open var zCurve: MovieSceneFloatChannel

  public open fun clone(): VectorParameterNameAndCurves

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorParameterNameAndCurves

    @JsName("C")
    public fun copy(other: Any): VectorParameterNameAndCurves
  }
}

public open external class ColorParameterNameAndCurves {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("RedCurve")
  public open var redCurve: MovieSceneFloatChannel

  @JsName("GreenCurve")
  public open var greenCurve: MovieSceneFloatChannel

  @JsName("BlueCurve")
  public open var blueCurve: MovieSceneFloatChannel

  @JsName("AlphaCurve")
  public open var alphaCurve: MovieSceneFloatChannel

  public open fun clone(): ColorParameterNameAndCurves

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ColorParameterNameAndCurves

    @JsName("C")
    public fun copy(other: Any): ColorParameterNameAndCurves
  }
}

public open external class TransformParameterNameAndCurves {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("Translation")
  public open var translation: MovieSceneFloatChannel

  @JsName("Rotation")
  public open var rotation: MovieSceneFloatChannel

  @JsName("Scale")
  public open var scale: MovieSceneFloatChannel

  public open fun clone(): TransformParameterNameAndCurves

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TransformParameterNameAndCurves

    @JsName("C")
    public fun copy(other: Any): TransformParameterNameAndCurves
  }
}

@JsName("T$291")
public external interface AnyParameterNamesProvider {
  @JsName("ParameterNames")
  public var parameterNames: Any
}

public open external class MovieSceneParameterSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("BoolParameterNamesAndCurves")
  public open var boolParameterNamesAndCurves: Array<BoolParameterNameAndCurve>

  @JsName("ScalarParameterNamesAndCurves")
  public open var scalarParameterNamesAndCurves: Array<ScalarParameterNameAndCurve>

  @JsName("Vector2DParameterNamesAndCurves")
  public open var vector2dParameterNamesAndCurves: Array<Vector2dParameterNameAndCurves>

  @JsName("VectorParameterNamesAndCurves")
  public open var vectorParameterNamesAndCurves: Array<VectorParameterNameAndCurves>

  @JsName("ColorParameterNamesAndCurves")
  public open var colorParameterNamesAndCurves: Array<ColorParameterNameAndCurves>

  @JsName("TransformParameterNamesAndCurves")
  public open var transformParameterNamesAndCurves: Array<TransformParameterNameAndCurves>

  @JsName("RemoveVectorParameter")
  public open fun removeVectorParameter(inParameterName: String): Boolean

  @JsName("RemoveVector2DParameter")
  public open fun removeVector2dParameter(inParameterName: String): Boolean

  @JsName("RemoveTransformParameter")
  public open fun removeTransformParameter(inParameterName: String): Boolean

  @JsName("RemoveScalarParameter")
  public open fun removeScalarParameter(inParameterName: String): Boolean

  @JsName("RemoveColorParameter")
  public open fun removeColorParameter(inParameterName: String): Boolean

  @JsName("RemoveBoolParameter")
  public open fun removeBoolParameter(inParameterName: String): Boolean

  @JsName("GetParameterNames")
  public open fun getParameterNames(parameterNames: Any): AnyParameterNamesProvider

  @JsName("AddVectorParameterKey")
  public open fun addVectorParameterKey(
    inParameterName: String,
    inTime: FrameNumber,
    inValue: Vector,
  ): Unit

  @JsName("AddVector2DParameterKey")
  public open fun addVector2dParameterKey(
    inParameterName: String,
    inTime: FrameNumber,
    inValue: Vector2d,
  ): Unit

  @JsName("AddTransformParameterKey")
  public open fun addTransformParameterKey(
    inParameterName: String,
    inTime: FrameNumber,
    inValue: Transform,
  ): Unit

  @JsName("AddScalarParameterKey")
  public open fun addScalarParameterKey(
    inParameterName: String,
    inTime: FrameNumber,
    inValue: Number,
  ): Unit

  @JsName("AddColorParameterKey")
  public open fun addColorParameterKey(
    inParameterName: String,
    inTime: FrameNumber,
    inValue: LinearColor,
  ): Unit

  @JsName("AddBoolParameterKey")
  public open fun addBoolParameterKey(
    inParameterName: String,
    inTime: FrameNumber,
    inValue: Boolean,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneParameterSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneParameterSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneParameterSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneParameterSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneParameterSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneParameterSection
  }
}

public open external class MovieSceneTransformMask {
  public open var mask: Any

  public open fun clone(): MovieSceneTransformMask

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneTransformMask

    @JsName("C")
    public fun copy(other: Any): MovieSceneTransformMask
  }
}

public open external class MovieSceneByteChannel : MovieSceneChannel {
  @JsName("Times")
  public open var times: Array<FrameNumber>

  @JsName("DefaultValue")
  public open var defaultValue: Number

  @JsName("bHasDefaultValue")
  public open var hasDefaultValue: Boolean

  @JsName("Values")
  public open var values: Array<Number>

  @JsName("Enum")
  public open var enum: Enum

  public override fun clone(): MovieSceneByteChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneByteChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneByteChannel
  }
}

public open external class EnumParameterNameAndCurve {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterCurve")
  public open var parameterCurve: MovieSceneByteChannel

  public open fun clone(): EnumParameterNameAndCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EnumParameterNameAndCurve

    @JsName("C")
    public fun copy(other: Any): EnumParameterNameAndCurve
  }
}

public open external class MovieSceneIntegerChannel : MovieSceneChannel {
  @JsName("Times")
  public open var times: Array<FrameNumber>

  @JsName("DefaultValue")
  public open var defaultValue: Number

  @JsName("bHasDefaultValue")
  public open var hasDefaultValue: Boolean

  @JsName("Values")
  public open var values: Array<Number>

  public override fun clone(): MovieSceneIntegerChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneIntegerChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneIntegerChannel
  }
}

public open external class IntegerParameterNameAndCurve {
  @JsName("ParameterName")
  public open var parameterName: String

  @JsName("ParameterCurve")
  public open var parameterCurve: MovieSceneIntegerChannel

  public open fun clone(): IntegerParameterNameAndCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IntegerParameterNameAndCurve

    @JsName("C")
    public fun copy(other: Any): IntegerParameterNameAndCurve
  }
}

@JsName("EMovieSceneControlRigSpaceType")
public external object MovieSceneControlRigSpaceType {
  public var Parent: String

  public var World: String

  public var ControlRig: String

  @JsName("EMovieSceneControlRigSpaceType_MAX")
  public var Max: String
}

public open external class MovieSceneControlRigSpaceBaseKey {
  @JsName("SpaceType")
  public open var spaceType: String

  @JsName("ControlRigElement")
  public open var controlRigElement: RigElementKey

  public open fun clone(): MovieSceneControlRigSpaceBaseKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneControlRigSpaceBaseKey

    @JsName("C")
    public fun copy(other: Any): MovieSceneControlRigSpaceBaseKey
  }
}

public open external class MovieSceneControlRigSpaceChannel : MovieSceneChannel {
  @JsName("KeyTimes")
  public open var keyTimes: Array<FrameNumber>

  @JsName("KeyValues")
  public open var keyValues: Array<MovieSceneControlRigSpaceBaseKey>

  public override fun clone(): MovieSceneControlRigSpaceChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneControlRigSpaceChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneControlRigSpaceChannel
  }
}

public open external class SpaceControlNameAndChannel {
  @JsName("ControlName")
  public open var controlName: String

  @JsName("SpaceCurve")
  public open var spaceCurve: MovieSceneControlRigSpaceChannel

  public open fun clone(): SpaceControlNameAndChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SpaceControlNameAndChannel

    @JsName("C")
    public fun copy(other: Any): SpaceControlNameAndChannel
  }
}

public open external class MovieSceneControlRigParameterSection(
  outer: UObject,
) : MovieSceneParameterSection {
  @JsName("ControlRig")
  public open var controlRig: ControlRig

  @JsName("ControlRigClass")
  public open var controlRigClass: UnrealEngineClass

  @JsName("ControlsMask")
  public open var controlsMask: Array<Boolean>

  @JsName("TransformMask")
  public open var transformMask: MovieSceneTransformMask

  @JsName("Weight")
  public open var weight: MovieSceneFloatChannel

  @JsName("ControlChannelMap")
  public open var controlChannelMap: Any

  @JsName("EnumParameterNamesAndCurves")
  public open var enumParameterNamesAndCurves: Array<EnumParameterNameAndCurve>

  @JsName("IntegerParameterNamesAndCurves")
  public open var integerParameterNamesAndCurves: Array<IntegerParameterNameAndCurve>

  @JsName("SpaceChannels")
  public open var spaceChannels: Array<SpaceControlNameAndChannel>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneControlRigParameterSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneControlRigParameterSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneControlRigParameterSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneControlRigParameterSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneControlRigParameterSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneControlRigParameterSection
  }
}

public open external class URL {
  @JsName("Protocol")
  public open var protocol: String

  @JsName("Host")
  public open var host: String

  @JsName("Port")
  public open var port: Number

  @JsName("Valid")
  public open var valid: Number

  @JsName("Map")
  public open var map: String

  @JsName("RedirectURL")
  public open var redirectUrl: String

  @JsName("Op")
  public open var op: Array<String>

  @JsName("Portal")
  public open var portal: String

  public open fun clone(): URL

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): URL

    @JsName("C")
    public fun copy(other: Any): URL
  }
}

public open external class NavDataConfig : NavAgentProperties {
  @JsName("Name")
  public open var name: String

  @JsName("Color")
  public open var color: Color

  @JsName("DefaultQueryExtent")
  public open var defaultQueryExtent: Vector

  @JsName("NavigationDataClass")
  public open var navigationDataClass: UnrealEngineClass

  @JsName("NavDataClass")
  public open var navDataClass: Class

  public override fun clone(): NavDataConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavDataConfig

    @JsName("C")
    public fun copy(other: Any): NavDataConfig
  }
}

@JsName("ERuntimeGenerationType")
public external object RuntimeGenerationType {
  public var Static: String

  public var DynamicModifiersOnly: String

  public var Dynamic: String

  public var LegacyGeneration: String

  @JsName("ERuntimeGenerationType_MAX")
  public var Max: String
}

public open external class SupportedAreaData {
  @JsName("AreaClassName")
  public open var areaClassName: String

  @JsName("AreaID")
  public open var areaId: Number

  @JsName("AreaClass")
  public open var areaClass: UnrealEngineClass

  public open fun clone(): SupportedAreaData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SupportedAreaData

    @JsName("C")
    public fun copy(other: Any): SupportedAreaData
  }
}

public open external class NavigationData(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("RenderingComp")
  public open var renderingComp: PrimitiveComponent

  @JsName("NavDataConfig")
  public open var navDataConfig: NavDataConfig

  @JsName("bEnableDrawing")
  public open var enableDrawing: Boolean

  @JsName("bForceRebuildOnLoad")
  public open var forceRebuildOnLoad: Boolean

  @JsName("bAutoDestroyWhenNoNavigation")
  public open var autoDestroyWhenNoNavigation: Boolean

  @JsName("bCanBeMainNavData")
  public open var canBeMainNavData: Boolean

  @JsName("bCanSpawnOnRebuild")
  public open var canSpawnOnRebuild: Boolean

  @JsName("bRebuildAtRuntime")
  public open var rebuildAtRuntime: Boolean

  @JsName("RuntimeGeneration")
  public open var runtimeGeneration: String

  @JsName("ObservedPathsTickInterval")
  public open var observedPathsTickInterval: Number

  @JsName("DataVersion")
  public open var dataVersion: Any

  @JsName("SupportedAreas")
  public open var supportedAreas: Array<SupportedAreaData>

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationData

    @JsName("C")
    public fun copy(other: UObject): NavigationData

    @JsName("C")
    public fun copy(other: Any): NavigationData
  }
}

public open external class RecastNavMeshTileGenerationDebug {
  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("TileCoordinate")
  public open var tileCoordinate: IntVector

  @JsName("bHeightfieldSolidFromRasterization")
  public open var heightfieldSolidFromRasterization: Boolean

  @JsName("bHeightfieldSolidPostRadiusFiltering")
  public open var heightfieldSolidPostRadiusFiltering: Boolean

  @JsName("bHeightfieldSolidPostHeightFiltering")
  public open var heightfieldSolidPostHeightFiltering: Boolean

  @JsName("bCompactHeightfield")
  public open var compactHeightfield: Boolean

  @JsName("bCompactHeightfieldEroded")
  public open var compactHeightfieldEroded: Boolean

  @JsName("bCompactHeightfieldRegions")
  public open var compactHeightfieldRegions: Boolean

  @JsName("bCompactHeightfieldDistances")
  public open var compactHeightfieldDistances: Boolean

  @JsName("bTileCacheLayerAreas")
  public open var tileCacheLayerAreas: Boolean

  @JsName("bTileCacheLayerRegions")
  public open var tileCacheLayerRegions: Boolean

  @JsName("bTileCacheContours")
  public open var tileCacheContours: Boolean

  @JsName("bTileCachePolyMesh")
  public open var tileCachePolyMesh: Boolean

  @JsName("bTileCacheDetailMesh")
  public open var tileCacheDetailMesh: Boolean

  public open fun clone(): RecastNavMeshTileGenerationDebug

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RecastNavMeshTileGenerationDebug

    @JsName("C")
    public fun copy(other: Any): RecastNavMeshTileGenerationDebug
  }
}

@JsName("ERecastPartitioning")
public external object RecastPartitioning {
  public var Monotone: String

  public var Watershed: String

  public var ChunkyMonotone: String

  @JsName("ERecastPartitioning_MAX")
  public var Max: String
}

public open external class NavArea(
  outer: UObject,
) : NavAreaBase {
  @JsName("DefaultCost")
  public open var defaultCost: Number

  @JsName("FixedAreaEnteringCost")
  public open var fixedAreaEnteringCost: Number

  @JsName("DrawColor")
  public open var drawColor: Color

  @JsName("SupportedAgents")
  public open var supportedAgents: NavAgentSelector

  @JsName("bSupportsAgent0")
  public open var supportsAgent0: Boolean

  @JsName("bSupportsAgent1")
  public open var supportsAgent1: Boolean

  @JsName("bSupportsAgent2")
  public open var supportsAgent2: Boolean

  @JsName("bSupportsAgent3")
  public open var supportsAgent3: Boolean

  @JsName("bSupportsAgent4")
  public open var supportsAgent4: Boolean

  @JsName("bSupportsAgent5")
  public open var supportsAgent5: Boolean

  @JsName("bSupportsAgent6")
  public open var supportsAgent6: Boolean

  @JsName("bSupportsAgent7")
  public open var supportsAgent7: Boolean

  @JsName("bSupportsAgent8")
  public open var supportsAgent8: Boolean

  @JsName("bSupportsAgent9")
  public open var supportsAgent9: Boolean

  @JsName("bSupportsAgent10")
  public open var supportsAgent10: Boolean

  @JsName("bSupportsAgent11")
  public open var supportsAgent11: Boolean

  @JsName("bSupportsAgent12")
  public open var supportsAgent12: Boolean

  @JsName("bSupportsAgent13")
  public open var supportsAgent13: Boolean

  @JsName("bSupportsAgent14")
  public open var supportsAgent14: Boolean

  @JsName("bSupportsAgent15")
  public open var supportsAgent15: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavArea

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavArea

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavArea

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavArea

    @JsName("C")
    public fun copy(other: UObject): NavArea

    @JsName("C")
    public fun copy(other: Any): NavArea
  }
}

public open external class RecastNavMesh(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : NavigationData {
  @JsName("bDrawTriangleEdges")
  public open var drawTriangleEdges: Boolean

  @JsName("bDrawPolyEdges")
  public open var drawPolyEdges: Boolean

  @JsName("bDrawFilledPolys")
  public open var drawFilledPolys: Boolean

  @JsName("bDrawNavMeshEdges")
  public open var drawNavMeshEdges: Boolean

  @JsName("bDrawTileBounds")
  public open var drawTileBounds: Boolean

  @JsName("bDrawPathCollidingGeometry")
  public open var drawPathCollidingGeometry: Boolean

  @JsName("bDrawTileLabels")
  public open var drawTileLabels: Boolean

  @JsName("bDrawPolygonLabels")
  public open var drawPolygonLabels: Boolean

  @JsName("bDrawDefaultPolygonCost")
  public open var drawDefaultPolygonCost: Boolean

  @JsName("bDrawPolygonFlags")
  public open var drawPolygonFlags: Boolean

  @JsName("bDrawLabelsOnPathNodes")
  public open var drawLabelsOnPathNodes: Boolean

  @JsName("bDrawNavLinks")
  public open var drawNavLinks: Boolean

  @JsName("bDrawFailedNavLinks")
  public open var drawFailedNavLinks: Boolean

  @JsName("bDrawClusters")
  public open var drawClusters: Boolean

  @JsName("bDrawOctree")
  public open var drawOctree: Boolean

  @JsName("bDrawOctreeDetails")
  public open var drawOctreeDetails: Boolean

  @JsName("bDrawMarkedForbiddenPolys")
  public open var drawMarkedForbiddenPolys: Boolean

  @JsName("bDistinctlyDrawTilesBeingBuilt")
  public open var distinctlyDrawTilesBeingBuilt: Boolean

  @JsName("DrawOffset")
  public open var drawOffset: Number

  @JsName("TileGenerationDebug")
  public open var tileGenerationDebug: RecastNavMeshTileGenerationDebug

  @JsName("bFixedTilePoolSize")
  public open var fixedTilePoolSize: Boolean

  @JsName("TilePoolSize")
  public open var tilePoolSize: Number

  @JsName("TileSizeUU")
  public open var tileSizeUu: Number

  @JsName("CellSize")
  public open var cellSize: Number

  @JsName("CellHeight")
  public open var cellHeight: Number

  @JsName("AgentRadius")
  public open var agentRadius: Number

  @JsName("AgentHeight")
  public open var agentHeight: Number

  @JsName("AgentMaxSlope")
  public open var agentMaxSlope: Number

  @JsName("AgentMaxStepHeight")
  public open var agentMaxStepHeight: Number

  @JsName("MinRegionArea")
  public open var minRegionArea: Number

  @JsName("MergeRegionSize")
  public open var mergeRegionSize: Number

  @JsName("MaxSimplificationError")
  public open var maxSimplificationError: Number

  @JsName("MaxSimultaneousTileGenerationJobsCount")
  public open var maxSimultaneousTileGenerationJobsCount: Number

  @JsName("TileNumberHardLimit")
  public open var tileNumberHardLimit: Number

  @JsName("PolyRefTileBits")
  public open var polyRefTileBits: Number

  @JsName("PolyRefNavPolyBits")
  public open var polyRefNavPolyBits: Number

  @JsName("PolyRefSaltBits")
  public open var polyRefSaltBits: Number

  @JsName("NavMeshOriginOffset")
  public open var navMeshOriginOffset: Vector

  @JsName("DefaultDrawDistance")
  public open var defaultDrawDistance: Number

  @JsName("DefaultMaxSearchNodes")
  public open var defaultMaxSearchNodes: Number

  @JsName("DefaultMaxHierarchicalSearchNodes")
  public open var defaultMaxHierarchicalSearchNodes: Number

  @JsName("RegionPartitioning")
  public open var regionPartitioning: String

  @JsName("LayerPartitioning")
  public open var layerPartitioning: String

  @JsName("RegionChunkSplits")
  public open var regionChunkSplits: Number

  @JsName("LayerChunkSplits")
  public open var layerChunkSplits: Number

  @JsName("bSortNavigationAreasByCost")
  public open var sortNavigationAreasByCost: Boolean

  @JsName("bIsWorldPartitioned")
  public open var isWorldPartitioned: Boolean

  @JsName("bPerformVoxelFiltering")
  public open var performVoxelFiltering: Boolean

  @JsName("bMarkLowHeightAreas")
  public open var markLowHeightAreas: Boolean

  @JsName("bUseExtraTopCellWhenMarkingAreas")
  public open var useExtraTopCellWhenMarkingAreas: Boolean

  @JsName("bFilterLowSpanSequences")
  public open var filterLowSpanSequences: Boolean

  @JsName("bFilterLowSpanFromTileCache")
  public open var filterLowSpanFromTileCache: Boolean

  @JsName("bDoFullyAsyncNavDataGathering")
  public open var doFullyAsyncNavDataGathering: Boolean

  @JsName("bUseBetterOffsetsFromCorners")
  public open var useBetterOffsetsFromCorners: Boolean

  @JsName("bStoreEmptyTileLayers")
  public open var storeEmptyTileLayers: Boolean

  @JsName("bUseVirtualFilters")
  public open var useVirtualFilters: Boolean

  @JsName("bUseVirtualGeometryFilteringAndDirtying")
  public open var useVirtualGeometryFilteringAndDirtying: Boolean

  @JsName("bAllowNavLinkAsPathEnd")
  public open var allowNavLinkAsPathEnd: Boolean

  @JsName("bUseVoxelCache")
  public open var useVoxelCache: Boolean

  @JsName("TileSetUpdateInterval")
  public open var tileSetUpdateInterval: Number

  @JsName("HeuristicScale")
  public open var heuristicScale: Number

  @JsName("VerticalDeviationFromGroundCompensation")
  public open var verticalDeviationFromGroundCompensation: Number

  @JsName("K2_ReplaceAreaInTileBounds")
  public open fun k2ReplaceAreaInTileBounds(
    bounds: Box,
    oldArea: UnrealEngineClass,
    newArea: UnrealEngineClass,
    replaceLinks: Boolean,
  ): Boolean

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RecastNavMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RecastNavMesh

    @JsName("C")
    public fun copy(other: UObject): RecastNavMesh

    @JsName("C")
    public fun copy(other: Any): RecastNavMesh
  }
}

public open external class TraceChannelTestBatchOptions {
  @JsName("bLineTrace")
  public open var lineTrace: Boolean

  @JsName("bSphereTrace")
  public open var sphereTrace: Boolean

  @JsName("bCapsuleTrace")
  public open var capsuleTrace: Boolean

  @JsName("bBoxTrace")
  public open var boxTrace: Boolean

  @JsName("bChannelTrace")
  public open var channelTrace: Boolean

  @JsName("bObjectsTrace")
  public open var objectsTrace: Boolean

  @JsName("bProfileTrace")
  public open var profileTrace: Boolean

  public open fun clone(): TraceChannelTestBatchOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TraceChannelTestBatchOptions

    @JsName("C")
    public fun copy(other: Any): TraceChannelTestBatchOptions
  }
}

@JsName("EDrawDebugTrace")
public external object DrawDebugTrace {
  public var None: String

  public var ForOneFrame: String

  public var ForDuration: String

  public var Persistent: String

  @JsName("EDrawDebugTrace_MAX")
  public var Max: String
}

public open external class TraceQueryTestNames {
  @JsName("ComponentName")
  public open var componentName: String

  @JsName("PhysicalMaterialName")
  public open var physicalMaterialName: String

  @JsName("ActorName")
  public open var actorName: String

  public open fun clone(): TraceQueryTestNames

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TraceQueryTestNames

    @JsName("C")
    public fun copy(other: Any): TraceQueryTestNames
  }
}

public open external class TraceQueryTestResultsInnerMost {
  @JsName("SingleHit")
  public open var singleHit: HitResult

  @JsName("SingleNames")
  public open var singleNames: TraceQueryTestNames

  @JsName("bSingleResult")
  public open var singleResult: Boolean

  @JsName("MultiHits")
  public open var multiHits: Array<HitResult>

  @JsName("MultiNames")
  public open var multiNames: Array<TraceQueryTestNames>

  @JsName("bMultiResult")
  public open var multiResult: Boolean

  public open fun clone(): TraceQueryTestResultsInnerMost

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TraceQueryTestResultsInnerMost

    @JsName("C")
    public fun copy(other: Any): TraceQueryTestResultsInnerMost
  }
}

public open external class TraceQueryTestResultsInner {
  @JsName("LineResults")
  public open var lineResults: TraceQueryTestResultsInnerMost

  @JsName("SphereResults")
  public open var sphereResults: TraceQueryTestResultsInnerMost

  @JsName("CapsuleResults")
  public open var capsuleResults: TraceQueryTestResultsInnerMost

  @JsName("BoxResults")
  public open var boxResults: TraceQueryTestResultsInnerMost

  public open fun clone(): TraceQueryTestResultsInner

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TraceQueryTestResultsInner

    @JsName("C")
    public fun copy(other: Any): TraceQueryTestResultsInner
  }
}

public open external class TraceQueryTestResults(
  outer: UObject,
) : UObject {
  @JsName("ChannelResults")
  public open var channelResults: TraceQueryTestResultsInner

  @JsName("ObjectResults")
  public open var objectResults: TraceQueryTestResultsInner

  @JsName("ProfileResults")
  public open var profileResults: TraceQueryTestResultsInner

  @JsName("BatchOptions")
  public open var batchOptions: TraceChannelTestBatchOptions

  public open fun ToString(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TraceQueryTestResults

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TraceQueryTestResults

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TraceQueryTestResults

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TraceQueryTestResults

    @JsName("C")
    public fun copy(other: UObject): TraceQueryTestResults

    @JsName("C")
    public fun copy(other: Any): TraceQueryTestResults
  }
}

public open external class AutomationWaitForLoadingOptions {
  @JsName("WaitForReplicationToSettle")
  public open var waitForReplicationToSettle: Boolean

  public open fun clone(): AutomationWaitForLoadingOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AutomationWaitForLoadingOptions

    @JsName("C")
    public fun copy(other: Any): AutomationWaitForLoadingOptions
  }
}

public open external class AutomationViewSettings(
  outer: UObject,
) : DataAsset {
  @JsName("AntiAliasing")
  public open var antiAliasing: Boolean

  @JsName("MotionBlur")
  public open var motionBlur: Boolean

  @JsName("TemporalAA")
  public open var temporalAa: Boolean

  @JsName("ScreenSpaceReflections")
  public open var screenSpaceReflections: Boolean

  @JsName("ScreenSpaceAO")
  public open var screenSpaceAo: Boolean

  @JsName("DistanceFieldAO")
  public open var distanceFieldAo: Boolean

  @JsName("ContactShadows")
  public open var contactShadows: Boolean

  @JsName("EyeAdaptation")
  public open var eyeAdaptation: Boolean

  @JsName("Bloom")
  public open var bloom: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AutomationViewSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AutomationViewSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AutomationViewSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AutomationViewSettings

    @JsName("C")
    public fun copy(other: UObject): AutomationViewSettings

    @JsName("C")
    public fun copy(other: Any): AutomationViewSettings
  }
}

@JsName("EComparisonTolerance")
public external object ComparisonTolerance {
  public var Zero: String

  public var Low: String

  public var Medium: String

  public var High: String

  public var Custom: String

  @JsName("EComparisonTolerance_MAX")
  public var Max: String
}

public open external class ComparisonToleranceAmount {
  public open var red: Number

  public open var green: Number

  public open var blue: Number

  @JsName("Alpha")
  public open var alpha: Number

  @JsName("MinBrightness")
  public open var minBrightness: Number

  @JsName("MaxBrightness")
  public open var maxBrightness: Number

  public open fun clone(): ComparisonToleranceAmount

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ComparisonToleranceAmount

    @JsName("C")
    public fun copy(other: Any): ComparisonToleranceAmount
  }
}

public open external class AutomationScreenshotOptions {
  @JsName("Resolution")
  public open var resolution: Vector2d

  @JsName("Delay")
  public open var delay: Number

  @JsName("bOverride_OverrideTimeTo")
  public open var overrideOverrideTimeTo: Boolean

  @JsName("OverrideTimeTo")
  public open var overrideTimeTo: Number

  @JsName("bDisableNoisyRenderingFeatures")
  public open var disableNoisyRenderingFeatures: Boolean

  @JsName("bDisableTonemapping")
  public open var disableTonemapping: Boolean

  @JsName("ViewSettings")
  public open var viewSettings: AutomationViewSettings

  @JsName("VisualizeBuffer")
  public open var visualizeBuffer: String

  @JsName("Tolerance")
  public open var tolerance: String

  @JsName("ToleranceAmount")
  public open var toleranceAmount: ComparisonToleranceAmount

  @JsName("MaximumLocalError")
  public open var maximumLocalError: Number

  @JsName("MaximumGlobalError")
  public open var maximumGlobalError: Number

  @JsName("bIgnoreAntiAliasing")
  public open var ignoreAntiAliasing: Boolean

  @JsName("bIgnoreColors")
  public open var ignoreColors: Boolean

  public open fun clone(): AutomationScreenshotOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AutomationScreenshotOptions

    @JsName("C")
    public fun copy(other: Any): AutomationScreenshotOptions

    @JsName("GetDefaultScreenshotOptionsForGameplay")
    public fun getDefaultScreenshotOptionsForGameplay(tolerance: String, delay: Number):
        AutomationScreenshotOptions

    @JsName("GetDefaultScreenshotOptionsForRendering")
    public fun getDefaultScreenshotOptionsForRendering(tolerance: String, delay: Number):
        AutomationScreenshotOptions
  }
}

public open external class NiagaraTypeDefinitionHandle {
  @JsName("RegisteredTypeIndex")
  public open var registeredTypeIndex: Number

  public open fun clone(): NiagaraTypeDefinitionHandle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraTypeDefinitionHandle

    @JsName("C")
    public fun copy(other: Any): NiagaraTypeDefinitionHandle
  }
}

public open external class NiagaraTypeDefinition {
  @JsName("ClassStructOrEnum")
  public open var classStructOrEnum: UObject

  @JsName("UnderlyingType")
  public open var underlyingType: Any

  @JsName("Flags")
  public open var flags: Number

  public open var struct: Struct

  @JsName("Enum")
  public open var enum: Enum

  public open fun clone(): NiagaraTypeDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraTypeDefinition

    @JsName("C")
    public fun copy(other: Any): NiagaraTypeDefinition
  }
}

public open external class NiagaraVariableBase {
  @JsName("Name")
  public open var name: String

  @JsName("TypeDefHandle")
  public open var typeDefHandle: NiagaraTypeDefinitionHandle

  @JsName("TypeDef")
  public open var typeDef: NiagaraTypeDefinition

  public open fun clone(): NiagaraVariableBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraVariableBase

    @JsName("C")
    public fun copy(other: Any): NiagaraVariableBase
  }
}

public open external class NiagaraVariable : NiagaraVariableBase {
  @JsName("VarData")
  public open var varData: Array<Number>

  public override fun clone(): NiagaraVariable

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraVariable

    @JsName("C")
    public fun copy(other: Any): NiagaraVariable
  }
}

@JsName("ENiagaraStructConversionType")
public external object NiagaraStructConversionType {
  public var CopyOnly: String

  public var DoubleToFloat: String

  public var Vector2: String

  public var Vector3: String

  public var Vector4: String

  public var Quat: String

  @JsName("ENiagaraStructConversionType_MAX")
  public var Max: String
}

public open external class NiagaraStructConversionStep {
  @JsName("SourceBytes")
  public open var sourceBytes: Number

  @JsName("SourceOffset")
  public open var sourceOffset: Number

  @JsName("SimulationBytes")
  public open var simulationBytes: Number

  @JsName("SimulationOffset")
  public open var simulationOffset: Number

  @JsName("ConversionType")
  public open var conversionType: String

  public open fun clone(): NiagaraStructConversionStep

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraStructConversionStep

    @JsName("C")
    public fun copy(other: Any): NiagaraStructConversionStep
  }
}

public open external class NiagaraLwcStructConverter {
  @JsName("ConversionSteps")
  public open var conversionSteps: Array<NiagaraStructConversionStep>

  public open fun clone(): NiagaraLwcStructConverter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraLwcStructConverter

    @JsName("C")
    public fun copy(other: Any): NiagaraLwcStructConverter
  }
}

public open external class NiagaraVariableWithOffset : NiagaraVariableBase {
  @JsName("Offset")
  public open var offset: Number

  @JsName("StructConverter")
  public open var structConverter: NiagaraLwcStructConverter

  public override fun clone(): NiagaraVariableWithOffset

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraVariableWithOffset

    @JsName("C")
    public fun copy(other: Any): NiagaraVariableWithOffset
  }
}

public open external class NiagaraMergeable(
  outer: UObject,
) : UObject {
  @JsName("MergeId")
  public open var mergeId: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraMergeable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraMergeable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraMergeable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraMergeable

    @JsName("C")
    public fun copy(other: UObject): NiagaraMergeable

    @JsName("C")
    public fun copy(other: Any): NiagaraMergeable
  }
}

public open external class NiagaraDataInterfaceBase(
  outer: UObject,
) : NiagaraMergeable {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraDataInterfaceBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraDataInterfaceBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraDataInterfaceBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraDataInterfaceBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraDataInterfaceBase

    @JsName("C")
    public fun copy(other: Any): NiagaraDataInterfaceBase
  }
}

public open external class NiagaraDataInterface(
  outer: UObject,
) : NiagaraDataInterfaceBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraDataInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraDataInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraDataInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraDataInterface

    @JsName("C")
    public fun copy(other: UObject): NiagaraDataInterface

    @JsName("C")
    public fun copy(other: Any): NiagaraDataInterface
  }
}

public open external class NiagaraPositionSource {
  @JsName("Name")
  public open var name: String

  @JsName("Value")
  public open var value: Vector

  public open fun clone(): NiagaraPositionSource

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraPositionSource

    @JsName("C")
    public fun copy(other: Any): NiagaraPositionSource
  }
}

public open external class NiagaraParameterStore {
  @JsName("Owner")
  public open var owner: UObject

  @JsName("ParameterOffsets")
  public open var parameterOffsets: Any

  @JsName("SortedParameterOffsets")
  public open var sortedParameterOffsets: Array<NiagaraVariableWithOffset>

  @JsName("ParameterData")
  public open var parameterData: Array<Number>

  @JsName("DataInterfaces")
  public open var dataInterfaces: Array<NiagaraDataInterface>

  @JsName("UObjects")
  public open var uObjects: Array<UObject>

  @JsName("OriginalPositionData")
  public open var originalPositionData: Array<NiagaraPositionSource>

  @JsName("DebugName")
  public open var debugName: String

  @JsName("ParameterGuidMapping")
  public open var parameterGuidMapping: Any

  public open fun clone(): NiagaraParameterStore

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraParameterStore

    @JsName("C")
    public fun copy(other: Any): NiagaraParameterStore
  }
}

public open external class NiagaraParameterCollectionInstance(
  outer: UObject,
) : UObject {
  @JsName("Collection")
  public open var collection: NiagaraParameterCollection

  @JsName("OverridenParameters")
  public open var overridenParameters: Array<NiagaraVariable>

  @JsName("ParameterStorage")
  public open var parameterStorage: NiagaraParameterStore

  @JsName("SetVectorParameter")
  public open fun setVectorParameter(inVariableName: String, inValue: Vector): Unit

  @JsName("SetVector4Parameter")
  public open fun setVector4Parameter(inVariableName: String, inValue: Vector4): Unit

  @JsName("SetVector2DParameter")
  public open fun setVector2dParameter(inVariableName: String, inValue: Vector2d): Unit

  @JsName("SetQuatParameter")
  public open fun setQuatParameter(inVariableName: String, inValue: Quat): Unit

  @JsName("SetIntParameter")
  public open fun setIntParameter(inVariableName: String, inValue: Number): Unit

  @JsName("SetFloatParameter")
  public open fun setFloatParameter(inVariableName: String, inValue: Number): Unit

  @JsName("SetColorParameter")
  public open fun setColorParameter(inVariableName: String, inValue: LinearColor): Unit

  @JsName("SetBoolParameter")
  public open fun setBoolParameter(inVariableName: String, inValue: Boolean): Unit

  @JsName("GetVectorParameter")
  public open fun getVectorParameter(inVariableName: String): Vector

  @JsName("GetVector4Parameter")
  public open fun getVector4Parameter(inVariableName: String): Vector4

  @JsName("GetVector2DParameter")
  public open fun getVector2dParameter(inVariableName: String): Vector2d

  @JsName("GetQuatParameter")
  public open fun getQuatParameter(inVariableName: String): Quat

  @JsName("GetIntParameter")
  public open fun getIntParameter(inVariableName: String): Number

  @JsName("GetFloatParameter")
  public open fun getFloatParameter(inVariableName: String): Number

  @JsName("GetColorParameter")
  public open fun getColorParameter(inVariableName: String): LinearColor

  @JsName("GetBoolParameter")
  public open fun getBoolParameter(inVariableName: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraParameterCollectionInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraParameterCollectionInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraParameterCollectionInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraParameterCollectionInstance

    @JsName("C")
    public fun copy(other: UObject): NiagaraParameterCollectionInstance

    @JsName("C")
    public fun copy(other: Any): NiagaraParameterCollectionInstance
  }
}

public open external class NiagaraParameterCollection(
  outer: UObject,
) : UObject {
  @JsName("Namespace")
  public open var namespace: String

  @JsName("Parameters")
  public open var parameters: Array<NiagaraVariable>

  @JsName("SourceMaterialCollection")
  public open var sourceMaterialCollection: MaterialParameterCollection

  @JsName("DefaultInstance")
  public open var defaultInstance: NiagaraParameterCollectionInstance

  @JsName("CompileId")
  public open var compileId: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraParameterCollection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraParameterCollection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraParameterCollection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraParameterCollection

    @JsName("C")
    public fun copy(other: UObject): NiagaraParameterCollection

    @JsName("C")
    public fun copy(other: Any): NiagaraParameterCollection
  }
}

@JsName("ENiagaraScriptLibraryVisibility")
public external object NiagaraScriptLibraryVisibility {
  public var Invalid: String

  public var Unexposed: String

  public var Library: String

  public var Hidden: String

  @JsName("ENiagaraScriptLibraryVisibility_MAX")
  public var Max: String
}

@JsName("ENiagaraScriptTemplateSpecification")
public external object NiagaraScriptTemplateSpecification {
  public var None: String

  public var Template: String

  public var Behavior: String

  @JsName("ENiagaraScriptTemplateSpecification_MAX")
  public var Max: String
}

public open external class NiagaraScriptBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraScriptBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraScriptBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraScriptBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraScriptBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraScriptBase

    @JsName("C")
    public fun copy(other: Any): NiagaraScriptBase
  }
}

@JsName("ENiagaraScriptUsage")
public external object NiagaraScriptUsage {
  public var Function: String

  public var Module: String

  public var DynamicInput: String

  public var ParticleSpawnScript: String

  public var ParticleSpawnScriptInterpolated: String

  public var ParticleUpdateScript: String

  public var ParticleEventScript: String

  public var ParticleSimulationStageScript: String

  @JsName("ParticleGPUComputeScript")
  public var ParticleGpuComputeScript: String

  public var EmitterSpawnScript: String

  public var EmitterUpdateScript: String

  public var SystemSpawnScript: String

  public var SystemUpdateScript: String

  @JsName("ENiagaraScriptUsage_MAX")
  public var Max: String
}

public open external class NiagaraAssetVersion {
  @JsName("MajorVersion")
  public open var majorVersion: Number

  @JsName("MinorVersion")
  public open var minorVersion: Number

  @JsName("VersionGuid")
  public open var versionGuid: Guid

  @JsName("bIsVisibleInVersionSelector")
  public open var isVisibleInVersionSelector: Boolean

  public open fun clone(): NiagaraAssetVersion

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraAssetVersion

    @JsName("C")
    public fun copy(other: Any): NiagaraAssetVersion
  }
}

@JsName("ENiagaraModuleDependencyType")
public external object NiagaraModuleDependencyType {
  public var PreDependency: String

  public var PostDependency: String

  @JsName("ENiagaraModuleDependencyType_MAX")
  public var Max: String
}

@JsName("ENiagaraModuleDependencyScriptConstraint")
public external object NiagaraModuleDependencyScriptConstraint {
  public var SameScript: String

  public var AllScripts: String

  @JsName("ENiagaraModuleDependencyScriptConstraint_MAX")
  public var Max: String
}

public open external class NiagaraModuleDependency {
  public open var ID: String

  @JsName("Type")
  public open var type: String

  @JsName("ScriptConstraint")
  public open var scriptConstraint: String

  @JsName("Description")
  public open var description: String

  public open fun clone(): NiagaraModuleDependency

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraModuleDependency

    @JsName("C")
    public fun copy(other: Any): NiagaraModuleDependency
  }
}

public open external class NiagaraConvertInPlaceUtilityBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraConvertInPlaceUtilityBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraConvertInPlaceUtilityBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraConvertInPlaceUtilityBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraConvertInPlaceUtilityBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraConvertInPlaceUtilityBase

    @JsName("C")
    public fun copy(other: Any): NiagaraConvertInPlaceUtilityBase
  }
}

@JsName("ENiagaraNumericOutputTypeSelectionMode")
public external object NiagaraNumericOutputTypeSelectionMode {
  public var None: String

  public var Largest: String

  public var Smallest: String

  public var Scalar: String

  public var Custom: String

  @JsName("ENiagaraNumericOutputTypeSelectionMode_MAX")
  public var Max: String
}

public open external class NiagaraStackSection {
  @JsName("SectionIdentifier")
  public open var sectionIdentifier: String

  @JsName("SectionDisplayName")
  public open var sectionDisplayName: String

  @JsName("Categories")
  public open var categories: Array<String>

  @JsName("bEnabled")
  public open var enabled: Boolean

  public open fun clone(): NiagaraStackSection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraStackSection

    @JsName("C")
    public fun copy(other: Any): NiagaraStackSection
  }
}

public open external class NiagaraCompileHash {
  @JsName("DataHash")
  public open var dataHash: Array<Number>

  public open fun clone(): NiagaraCompileHash

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraCompileHash

    @JsName("C")
    public fun copy(other: Any): NiagaraCompileHash
  }
}

@JsName("NiagaraVMExecutableDataId")
public open external class NiagaraVmExecutableDataId {
  @JsName("CompilerVersionID")
  public open var compilerVersionId: Guid

  @JsName("ScriptUsageType")
  public open var scriptUsageType: String

  @JsName("ScriptUsageTypeID")
  public open var scriptUsageTypeId: Guid

  @JsName("AdditionalDefines")
  public open var additionalDefines: Array<String>

  @JsName("AdditionalVariables")
  public open var additionalVariables: Array<NiagaraVariableBase>

  @JsName("bUsesRapidIterationParams")
  public open var usesRapidIterationParams: Boolean

  @JsName("bDisableDebugSwitches")
  public open var disableDebugSwitches: Boolean

  @JsName("bInterpolatedSpawn")
  public open var interpolatedSpawn: Boolean

  @JsName("bRequiresPersistentIDs")
  public open var requiresPersistentIDs: Boolean

  @JsName("BaseScriptID")
  public open var baseScriptId: Guid

  @JsName("BaseScriptCompileHash")
  public open var baseScriptCompileHash: NiagaraCompileHash

  @JsName("ReferencedCompileHashes")
  public open var referencedCompileHashes: Array<NiagaraCompileHash>

  @JsName("ScriptVersionID")
  public open var scriptVersionId: Guid

  public open fun clone(): NiagaraVmExecutableDataId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraVmExecutableDataId

    @JsName("C")
    public fun copy(other: Any): NiagaraVmExecutableDataId
  }
}

@JsName("ENiagaraPythonUpdateScriptReference")
public external object NiagaraPythonUpdateScriptReference {
  public var None: String

  public var ScriptAsset: String

  public var DirectTextEntry: String

  @JsName("ENiagaraPythonUpdateScriptReference_MAX")
  public var Max: String
}

public open external class FilePath {
  @JsName("FilePath")
  public open var filePath: String

  public open fun clone(): FilePath

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FilePath

    @JsName("C")
    public fun copy(other: Any): FilePath
  }
}

public open external class NiagaraParameterDefinitionsBase(
  outer: UObject,
) : UObject {
  @JsName("UniqueId")
  public open var uniqueId: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraParameterDefinitionsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraParameterDefinitionsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraParameterDefinitionsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraParameterDefinitionsBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraParameterDefinitionsBase

    @JsName("C")
    public fun copy(other: Any): NiagaraParameterDefinitionsBase
  }
}

public open external class ParameterDefinitionsSubscription {
  @JsName("Definitions")
  public open var definitions: NiagaraParameterDefinitionsBase

  @JsName("DefinitionsId")
  public open var definitionsId: Guid

  @JsName("CachedChangeIdHash")
  public open var cachedChangeIdHash: Number

  public open fun clone(): ParameterDefinitionsSubscription

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ParameterDefinitionsSubscription

    @JsName("C")
    public fun copy(other: Any): ParameterDefinitionsSubscription
  }
}

public open external class NiagaraScriptSourceBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraScriptSourceBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraScriptSourceBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraScriptSourceBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraScriptSourceBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraScriptSourceBase

    @JsName("C")
    public fun copy(other: Any): NiagaraScriptSourceBase
  }
}

public open external class VersionedNiagaraScriptData {
  @JsName("Version")
  public open var version: NiagaraAssetVersion

  @JsName("VersionChangeDescription")
  public open var versionChangeDescription: String

  @JsName("ModuleUsageBitmask")
  public open var moduleUsageBitmask: Number

  @JsName("Category")
  public open var category: String

  @JsName("bSuggested")
  public open var suggested: Boolean

  @JsName("ProvidedDependencies")
  public open var providedDependencies: Array<String>

  @JsName("RequiredDependencies")
  public open var requiredDependencies: Array<NiagaraModuleDependency>

  @JsName("bDeprecated")
  public open var deprecated: Boolean

  @JsName("DeprecationMessage")
  public open var deprecationMessage: String

  @JsName("DeprecationRecommendation")
  public open var deprecationRecommendation: NiagaraScript

  @JsName("ConversionUtility")
  public open var conversionUtility: UnrealEngineClass

  @JsName("bExperimental")
  public open var experimental: Boolean

  @JsName("ExperimentalMessage")
  public open var experimentalMessage: String

  @JsName("NoteMessage")
  public open var noteMessage: String

  @JsName("LibraryVisibility")
  public open var libraryVisibility: String

  @JsName("NumericOutputTypeSelectionMode")
  public open var numericOutputTypeSelectionMode: String

  @JsName("Description")
  public open var description: String

  @JsName("Keywords")
  public open var keywords: String

  @JsName("CollapsedViewFormat")
  public open var collapsedViewFormat: String

  @JsName("bCanBeUsedForTypeConversions")
  public open var canBeUsedForTypeConversions: Boolean

  @JsName("ScriptMetaData")
  public open var scriptMetaData: Any

  @JsName("InputSections")
  public open var inputSections: Array<NiagaraStackSection>

  @JsName("LastGeneratedVMId")
  public open var lastGeneratedVmId: NiagaraVmExecutableDataId

  @JsName("UpdateScriptExecution")
  public open var updateScriptExecution: String

  @JsName("PythonUpdateScript")
  public open var pythonUpdateScript: String

  @JsName("ScriptAsset")
  public open var scriptAsset: FilePath

  @JsName("ParameterDefinitionsSubscriptions")
  public open var parameterDefinitionsSubscriptions: Array<ParameterDefinitionsSubscription>

  @JsName("Source")
  public open var source: NiagaraScriptSourceBase

  public open fun clone(): VersionedNiagaraScriptData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VersionedNiagaraScriptData

    @JsName("C")
    public fun copy(other: Any): VersionedNiagaraScriptData
  }
}

public open external class NiagaraScriptExecutionPaddingInfo {
  @JsName("SrcOffset")
  public open var srcOffset: Any

  @JsName("DestOffset")
  public open var destOffset: Any

  @JsName("SrcSize")
  public open var srcSize: Any

  @JsName("DestSize")
  public open var destSize: Any

  public open fun clone(): NiagaraScriptExecutionPaddingInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraScriptExecutionPaddingInfo

    @JsName("C")
    public fun copy(other: Any): NiagaraScriptExecutionPaddingInfo
  }
}

public open external class NiagaraScriptExecutionParameterStore : NiagaraParameterStore {
  @JsName("ParameterSize")
  public open var parameterSize: Number

  @JsName("PaddedParameterSize")
  public open var paddedParameterSize: Any

  @JsName("PaddingInfo")
  public open var paddingInfo: Array<NiagaraScriptExecutionPaddingInfo>

  @JsName("bInitialized")
  public open var initialized: Boolean

  public override fun clone(): NiagaraScriptExecutionParameterStore

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraScriptExecutionParameterStore

    @JsName("C")
    public fun copy(other: Any): NiagaraScriptExecutionParameterStore
  }
}

public open external class NiagaraBoundParameter {
  @JsName("Parameter")
  public open var parameter: NiagaraVariable

  @JsName("SrcOffset")
  public open var srcOffset: Number

  @JsName("DestOffset")
  public open var destOffset: Number

  public open fun clone(): NiagaraBoundParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraBoundParameter

    @JsName("C")
    public fun copy(other: Any): NiagaraBoundParameter
  }
}

@JsName("NiagaraVMExecutableByteCode")
public open external class NiagaraVmExecutableByteCode {
  @JsName("Data")
  public open var data: Array<Number>

  @JsName("UncompressedSize")
  public open var uncompressedSize: Number

  public open fun clone(): NiagaraVmExecutableByteCode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraVmExecutableByteCode

    @JsName("C")
    public fun copy(other: Any): NiagaraVmExecutableByteCode
  }
}

public open external class NiagaraParameters {
  @JsName("Parameters")
  public open var parameters: Array<NiagaraVariable>

  public open fun clone(): NiagaraParameters

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraParameters

    @JsName("C")
    public fun copy(other: Any): NiagaraParameters
  }
}

public open external class NiagaraCompileDependency {
  @JsName("LinkerErrorMessage")
  public open var linkerErrorMessage: String

  @JsName("NodeGuid")
  public open var nodeGuid: Guid

  @JsName("PinGuid")
  public open var pinGuid: Guid

  @JsName("StackGuids")
  public open var stackGuids: Array<Guid>

  @JsName("DependentVariable")
  public open var dependentVariable: NiagaraVariableBase

  @JsName("bDependentVariableFromCustomIterationNamespace")
  public open var dependentVariableFromCustomIterationNamespace: Boolean

  public open fun clone(): NiagaraCompileDependency

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraCompileDependency

    @JsName("C")
    public fun copy(other: Any): NiagaraCompileDependency
  }
}

public open external class NiagaraCompilerTag {
  @JsName("Variable")
  public open var variable: NiagaraVariable

  @JsName("StringValue")
  public open var stringValue: String

  public open fun clone(): NiagaraCompilerTag

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraCompilerTag

    @JsName("C")
    public fun copy(other: Any): NiagaraCompilerTag
  }
}

public open external class NiagaraScriptDataUsageInfo {
  @JsName("bReadsAttributeData")
  public open var readsAttributeData: Boolean

  public open fun clone(): NiagaraScriptDataUsageInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraScriptDataUsageInfo

    @JsName("C")
    public fun copy(other: Any): NiagaraScriptDataUsageInfo
  }
}

public open external class NiagaraFunctionSignature {
  @JsName("Name")
  public open var name: String

  @JsName("Inputs")
  public open var inputs: Array<NiagaraVariable>

  @JsName("Outputs")
  public open var outputs: Array<NiagaraVariable>

  @JsName("OwnerName")
  public open var ownerName: String

  @JsName("bRequiresContext")
  public open var requiresContext: Boolean

  @JsName("bRequiresExecPin")
  public open var requiresExecPin: Boolean

  @JsName("bMemberFunction")
  public open var memberFunction: Boolean

  @JsName("bExperimental")
  public open var experimental: Boolean

  @JsName("ExperimentalMessage")
  public open var experimentalMessage: String

  @JsName("FunctionVersion")
  public open var functionVersion: Any

  @JsName("bSupportsCPU")
  public open var supportsCpu: Boolean

  @JsName("bSupportsGPU")
  public open var supportsGpu: Boolean

  @JsName("bWriteFunction")
  public open var writeFunction: Boolean

  @JsName("bSoftDeprecatedFunction")
  public open var softDeprecatedFunction: Boolean

  @JsName("bIsCompileTagGenerator")
  public open var isCompileTagGenerator: Boolean

  @JsName("bHidden")
  public open var hidden: Boolean

  @JsName("ModuleUsageBitmask")
  public open var moduleUsageBitmask: Number

  @JsName("ContextStageIndex")
  public open var contextStageIndex: Number

  @JsName("FunctionSpecifiers")
  public open var functionSpecifiers: Any

  @JsName("Description")
  public open var description: String

  @JsName("InputDescriptions")
  public open var inputDescriptions: Any

  @JsName("OutputDescriptions")
  public open var outputDescriptions: Any

  public open fun clone(): NiagaraFunctionSignature

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraFunctionSignature

    @JsName("C")
    public fun copy(other: Any): NiagaraFunctionSignature
  }
}

public open external class NiagaraScriptDataInterfaceCompileInfo {
  @JsName("Name")
  public open var name: String

  @JsName("UserPtrIdx")
  public open var userPtrIdx: Number

  @JsName("Type")
  public open var type: NiagaraTypeDefinition

  @JsName("RegisteredFunctions")
  public open var registeredFunctions: Array<NiagaraFunctionSignature>

  @JsName("RegisteredParameterMapRead")
  public open var registeredParameterMapRead: String

  @JsName("RegisteredParameterMapWrite")
  public open var registeredParameterMapWrite: String

  @JsName("bIsPlaceholder")
  public open var isPlaceholder: Boolean

  public open fun clone(): NiagaraScriptDataInterfaceCompileInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraScriptDataInterfaceCompileInfo

    @JsName("C")
    public fun copy(other: Any): NiagaraScriptDataInterfaceCompileInfo
  }
}

@JsName("VMFunctionSpecifier")
public open external class VmFunctionSpecifier {
  @JsName("Key")
  public open var key: String

  @JsName("Value")
  public open var value: String

  public open fun clone(): VmFunctionSpecifier

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VmFunctionSpecifier

    @JsName("C")
    public fun copy(other: Any): VmFunctionSpecifier
  }
}

@JsName("VMExternalFunctionBindingInfo")
public open external class VmExternalFunctionBindingInfo {
  @JsName("Name")
  public open var name: String

  @JsName("OwnerName")
  public open var ownerName: String

  @JsName("InputParamLocations")
  public open var inputParamLocations: Array<Boolean>

  @JsName("NumOutputs")
  public open var numOutputs: Number

  @JsName("FunctionSpecifiers")
  public open var functionSpecifiers: Array<VmFunctionSpecifier>

  @JsName("Specifiers")
  public open var specifiers: Any

  public open fun clone(): VmExternalFunctionBindingInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VmExternalFunctionBindingInfo

    @JsName("C")
    public fun copy(other: Any): VmExternalFunctionBindingInfo
  }
}

@JsName("ENiagaraDataSetType")
public external object NiagaraDataSetType {
  public var ParticleData: String

  public var Shared: String

  public var Event: String

  @JsName("ENiagaraDataSetType_MAX")
  public var Max: String
}

@JsName("NiagaraDataSetID")
public open external class NiagaraDataSetId {
  @JsName("Name")
  public open var name: String

  @JsName("Type")
  public open var type: String

  public open fun clone(): NiagaraDataSetId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraDataSetId

    @JsName("C")
    public fun copy(other: Any): NiagaraDataSetId
  }
}

public open external class NiagaraDataSetProperties {
  public open var ID: NiagaraDataSetId

  @JsName("Variables")
  public open var variables: Array<NiagaraVariable>

  public open fun clone(): NiagaraDataSetProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraDataSetProperties

    @JsName("C")
    public fun copy(other: Any): NiagaraDataSetProperties
  }
}

public open external class NiagaraStatScope {
  @JsName("FullName")
  public open var fullName: String

  @JsName("FriendlyName")
  public open var friendlyName: String

  public open fun clone(): NiagaraStatScope

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraStatScope

    @JsName("C")
    public fun copy(other: Any): NiagaraStatScope
  }
}

public open external class NiagaraDataInterfaceGeneratedFunction {
  public open fun clone(): NiagaraDataInterfaceGeneratedFunction

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraDataInterfaceGeneratedFunction

    @JsName("C")
    public fun copy(other: Any): NiagaraDataInterfaceGeneratedFunction
  }
}

@JsName("NiagaraDataInterfaceGPUParamInfo")
public open external class NiagaraDataInterfaceGpuParamInfo {
  @JsName("DataInterfaceHLSLSymbol")
  public open var dataInterfaceHlslSymbol: String

  @JsName("DIClassName")
  public open var diClassName: String

  @JsName("GeneratedFunctions")
  public open var generatedFunctions: Array<NiagaraDataInterfaceGeneratedFunction>

  public open fun clone(): NiagaraDataInterfaceGpuParamInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraDataInterfaceGpuParamInfo

    @JsName("C")
    public fun copy(other: Any): NiagaraDataInterfaceGpuParamInfo
  }
}

@JsName("ENiagaraScriptCompileStatus")
public external object NiagaraScriptCompileStatus {
  @JsName("NCS_Unknown")
  public var Unknown: String

  @JsName("NCS_Dirty")
  public var Dirty: String

  @JsName("NCS_Error")
  public var Error: String

  @JsName("NCS_UpToDate")
  public var UpToDate: String

  @JsName("NCS_BeingCreated")
  public var BeingCreated: String

  @JsName("NCS_UpToDateWithWarnings")
  public var UpToDateWithWarnings: String

  @JsName("NCS_ComputeUpToDateWithWarnings")
  public var ComputeUpToDateWithWarnings: String

  @JsName("NCS_MAX")
  public var Max: String
}

@JsName("ENiagaraSimStageExecuteBehavior")
public external object NiagaraSimStageExecuteBehavior {
  public var Always: String

  public var OnSimulationReset: String

  public var NotOnSimulationReset: String

  @JsName("ENiagaraSimStageExecuteBehavior_MAX")
  public var Max: String
}

@JsName("ENiagaraGpuDispatchType")
public external object NiagaraGpuDispatchType {
  public var OneD: String

  public var TwoD: String

  public var ThreeD: String

  public var Custom: String

  @JsName("ENiagaraGpuDispatchType_MAX")
  public var Max: String
}

public open external class SimulationStageMetaData {
  @JsName("SimulationStageName")
  public open var simulationStageName: String

  @JsName("EnabledBinding")
  public open var enabledBinding: String

  @JsName("IterationSource")
  public open var iterationSource: String

  @JsName("ExecuteBehavior")
  public open var executeBehavior: String

  @JsName("bWritesParticles")
  public open var writesParticles: Boolean

  @JsName("bPartialParticleUpdate")
  public open var partialParticleUpdate: Boolean

  @JsName("bParticleIterationStateEnabled")
  public open var particleIterationStateEnabled: Boolean

  @JsName("ParticleIterationStateBinding")
  public open var particleIterationStateBinding: String

  @JsName("ParticleIterationStateRange")
  public open var particleIterationStateRange: IntPoint

  @JsName("OutputDestinations")
  public open var outputDestinations: Array<String>

  @JsName("NumIterations")
  public open var numIterations: Number

  @JsName("NumIterationsBinding")
  public open var numIterationsBinding: String

  @JsName("GpuDispatchType")
  public open var gpuDispatchType: String

  @JsName("GpuDispatchNumThreads")
  public open var gpuDispatchNumThreads: IntVector

  public open fun clone(): SimulationStageMetaData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SimulationStageMetaData

    @JsName("C")
    public fun copy(other: Any): SimulationStageMetaData
  }
}

public external object FNiagaraCompileEventSeverity {
  @JsName("Log")
  public var log: String

  @JsName("Display")
  public var display: String

  @JsName("Warning")
  public var warning: String

  @JsName("Error")
  public var error: String

  @JsName("FNiagaraCompileEventSeverity_MAX")
  public var fNiagaraCompileEventSeverityMax: String
}

public external object FNiagaraCompileEventSource {
  @JsName("Unset")
  public var unset: String

  @JsName("ScriptDependency")
  public var scriptDependency: String

  @JsName("FNiagaraCompileEventSource_MAX")
  public var fNiagaraCompileEventSourceMax: String
}

public open external class NiagaraCompileEvent {
  @JsName("Severity")
  public open var severity: String

  @JsName("Message")
  public open var message: String

  @JsName("ShortDescription")
  public open var shortDescription: String

  @JsName("bDismissable")
  public open var dismissable: Boolean

  @JsName("NodeGuid")
  public open var nodeGuid: Guid

  @JsName("PinGuid")
  public open var pinGuid: Guid

  @JsName("StackGuids")
  public open var stackGuids: Array<Guid>

  @JsName("Source")
  public open var source: String

  public open fun clone(): NiagaraCompileEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraCompileEvent

    @JsName("C")
    public fun copy(other: Any): NiagaraCompileEvent
  }
}

@JsName("NiagaraVMExecutableData")
public open external class NiagaraVmExecutableData {
  @JsName("ByteCode")
  public open var byteCode: NiagaraVmExecutableByteCode

  @JsName("OptimizedByteCode")
  public open var optimizedByteCode: NiagaraVmExecutableByteCode

  @JsName("NumTempRegisters")
  public open var numTempRegisters: Number

  @JsName("NumUserPtrs")
  public open var numUserPtrs: Number

  @JsName("Parameters")
  public open var parameters: NiagaraParameters

  @JsName("InternalParameters")
  public open var internalParameters: NiagaraParameters

  @JsName("ExternalDependencies")
  public open var externalDependencies: Array<NiagaraCompileDependency>

  @JsName("CompileTags")
  public open var compileTags: Array<NiagaraCompilerTag>

  @JsName("ScriptLiterals")
  public open var scriptLiterals: Array<Number>

  @JsName("Attributes")
  public open var attributes: Array<NiagaraVariable>

  @JsName("DataUsage")
  public open var dataUsage: NiagaraScriptDataUsageInfo

  @JsName("DataSetToParameters")
  public open var dataSetToParameters: Any

  @JsName("AdditionalExternalFunctions")
  public open var additionalExternalFunctions: Array<NiagaraFunctionSignature>

  @JsName("DataInterfaceInfo")
  public open var dataInterfaceInfo: Array<NiagaraScriptDataInterfaceCompileInfo>

  @JsName("CalledVMExternalFunctions")
  public open var calledVmExternalFunctions: Array<VmExternalFunctionBindingInfo>

  @JsName("ReadDataSets")
  public open var readDataSets: Array<NiagaraDataSetId>

  @JsName("WriteDataSets")
  public open var writeDataSets: Array<NiagaraDataSetProperties>

  @JsName("StatScopes")
  public open var statScopes: Array<NiagaraStatScope>

  @JsName("LastHlslTranslation")
  public open var lastHlslTranslation: String

  @JsName("LastHlslTranslationGPU")
  public open var lastHlslTranslationGpu: String

  @JsName("LastAssemblyTranslation")
  public open var lastAssemblyTranslation: String

  @JsName("LastOpCount")
  public open var lastOpCount: Any

  @JsName("DIParamInfo")
  public open var diParamInfo: Array<NiagaraDataInterfaceGpuParamInfo>

  @JsName("ParameterCollectionPaths")
  public open var parameterCollectionPaths: Array<String>

  @JsName("LastCompileStatus")
  public open var lastCompileStatus: String

  @JsName("SimulationStageMetaData")
  public open var simulationStageMetaData: Array<SimulationStageMetaData>

  @JsName("bReadsAttributeData")
  public open var readsAttributeData: Boolean

  @JsName("AttributesWritten")
  public open var attributesWritten: Array<NiagaraVariableBase>

  @JsName("StaticVariablesWritten")
  public open var staticVariablesWritten: Array<NiagaraVariable>

  @JsName("ErrorMsg")
  public open var errorMsg: String

  @JsName("CompileTime")
  public open var compileTime: Number

  @JsName("LastCompileEvents")
  public open var lastCompileEvents: Array<NiagaraCompileEvent>

  @JsName("bReadsSignificanceIndex")
  public open var readsSignificanceIndex: Boolean

  @JsName("bNeedsGPUContextInit")
  public open var needsGpuContextInit: Boolean

  public open fun clone(): NiagaraVmExecutableData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraVmExecutableData

    @JsName("C")
    public fun copy(other: Any): NiagaraVmExecutableData
  }
}

public open external class NiagaraScriptDataInterfaceInfo {
  @JsName("DataInterface")
  public open var dataInterface: NiagaraDataInterface

  @JsName("Name")
  public open var name: String

  @JsName("UserPtrIdx")
  public open var userPtrIdx: Number

  @JsName("Type")
  public open var type: NiagaraTypeDefinition

  @JsName("RegisteredParameterMapRead")
  public open var registeredParameterMapRead: String

  @JsName("RegisteredParameterMapWrite")
  public open var registeredParameterMapWrite: String

  public open fun clone(): NiagaraScriptDataInterfaceInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraScriptDataInterfaceInfo

    @JsName("C")
    public fun copy(other: Any): NiagaraScriptDataInterfaceInfo
  }
}

public open external class NiagaraScript(
  outer: UObject,
) : NiagaraScriptBase {
  @JsName("Usage")
  public open var usage: String

  @JsName("UsageId")
  public open var usageId: Guid

  @JsName("ExposedVersion")
  public open var exposedVersion: Guid

  @JsName("bVersioningEnabled")
  public open var versioningEnabled: Boolean

  @JsName("VersionData")
  public open var versionData: Array<VersionedNiagaraScriptData>

  @JsName("RapidIterationParameters")
  public open var rapidIterationParameters: NiagaraParameterStore

  @JsName("VersionToOpenInEditor")
  public open var versionToOpenInEditor: Guid

  @JsName("UsageIndex")
  public open var usageIndex: Number

  @JsName("ModuleUsageBitmask")
  public open var moduleUsageBitmask: Number

  @JsName("Category")
  public open var category: String

  @JsName("ProvidedDependencies")
  public open var providedDependencies: Array<String>

  @JsName("RequiredDependencies")
  public open var requiredDependencies: Array<NiagaraModuleDependency>

  @JsName("bDeprecated")
  public open var deprecated: Boolean

  @JsName("DeprecationMessage")
  public open var deprecationMessage: String

  @JsName("DeprecationRecommendation")
  public open var deprecationRecommendation: NiagaraScript

  @JsName("ConversionUtility")
  public open var conversionUtility: UnrealEngineClass

  @JsName("bExperimental")
  public open var experimental: Boolean

  @JsName("ExperimentalMessage")
  public open var experimentalMessage: String

  @JsName("NoteMessage")
  public open var noteMessage: String

  @JsName("bExposeToLibrary")
  public open var exposeToLibrary: Boolean

  @JsName("LibraryVisibility")
  public open var libraryVisibility: String

  @JsName("NumericOutputTypeSelectionMode")
  public open var numericOutputTypeSelectionMode: String

  @JsName("Description")
  public open var description: String

  @JsName("Keywords")
  public open var keywords: String

  @JsName("CollapsedViewFormat")
  public open var collapsedViewFormat: String

  @JsName("ScriptMetaData")
  public open var scriptMetaData: Any

  @JsName("Source")
  public open var source: NiagaraScriptSourceBase

  @JsName("ScriptExecutionParamStoreCPU")
  public open var scriptExecutionParamStoreCpu: NiagaraScriptExecutionParameterStore

  @JsName("ScriptExecutionParamStoreGPU")
  public open var scriptExecutionParamStoreGpu: NiagaraScriptExecutionParameterStore

  @JsName("ScriptExecutionParamStore")
  public open var scriptExecutionParamStore: NiagaraScriptExecutionParameterStore

  @JsName("ScriptExecutionBoundParameters")
  public open var scriptExecutionBoundParameters: Array<NiagaraBoundParameter>

  @JsName("CachedScriptVMId")
  public open var cachedScriptVmId: NiagaraVmExecutableDataId

  @JsName("ActiveCompileRoots")
  public open var activeCompileRoots: Array<UObject>

  @JsName("CachedScriptVM")
  public open var cachedScriptVm: NiagaraVmExecutableData

  @JsName("CachedParameterCollectionReferences")
  public open var cachedParameterCollectionReferences: Array<NiagaraParameterCollection>

  @JsName("CachedDefaultDataInterfaces")
  public open var cachedDefaultDataInterfaces: Array<NiagaraScriptDataInterfaceInfo>

  @JsName("RaiseOnGPUCompilationComplete")
  public open fun raiseOnGpuCompilationComplete(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraScript

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraScript

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraScript

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraScript

    @JsName("C")
    public fun copy(other: UObject): NiagaraScript

    @JsName("C")
    public fun copy(other: Any): NiagaraScript
  }
}

@JsName("ENiagaraTickBehavior")
public external object NiagaraTickBehavior {
  public var UsePrereqs: String

  public var UseComponentTickGroup: String

  public var ForceTickFirst: String

  public var ForceTickLast: String

  @JsName("ENiagaraTickBehavior_MAX")
  public var Max: String
}

public open external class NiagaraUserRedirectionParameterStore : NiagaraParameterStore {
  @JsName("UserParameterRedirects")
  public open var userParameterRedirects: Any

  public override fun clone(): NiagaraUserRedirectionParameterStore

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraUserRedirectionParameterStore

    @JsName("C")
    public fun copy(other: Any): NiagaraUserRedirectionParameterStore
  }
}

public open external class NiagaraCulledComponentInfo {
  public open fun clone(): NiagaraCulledComponentInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraCulledComponentInfo

    @JsName("C")
    public fun copy(other: Any): NiagaraCulledComponentInfo
  }
}

public open external class NiagaraCullProxyComponent(
  outer: UObject,
) : NiagaraComponent {
  @JsName("Instances")
  public open var instances: Array<NiagaraCulledComponentInfo>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraCullProxyComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraCullProxyComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraCullProxyComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraCullProxyComponent

    @JsName("C")
    public fun copy(other: UObject): NiagaraCullProxyComponent

    @JsName("C")
    public fun copy(other: Any): NiagaraCullProxyComponent
  }
}

public open external class TextureRenderTarget(
  outer: UObject,
) : Texture {
  @JsName("TargetGamma")
  public open var targetGamma: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureRenderTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureRenderTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureRenderTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureRenderTarget

    @JsName("C")
    public fun copy(other: UObject): TextureRenderTarget

    @JsName("C")
    public fun copy(other: Any): TextureRenderTarget
  }
}

@JsName("ENiagaraAgeUpdateMode")
public external object NiagaraAgeUpdateMode {
  public var TickDeltaTime: String

  public var DesiredAge: String

  public var DesiredAgeNoSeek: String

  @JsName("ENiagaraAgeUpdateMode_MAX")
  public var Max: String
}

@JsName("Texture2DArray")
public open external class Texture2dArray(
  outer: UObject,
) : Texture {
  @JsName("AddressX")
  public open var addressX: String

  @JsName("AddressY")
  public open var addressY: String

  @JsName("AddressZ")
  public open var addressZ: String

  @JsName("SourceTextures")
  public open var sourceTextures: Array<Texture2d>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Texture2dArray

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Texture2dArray

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Texture2dArray

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Texture2dArray

    @JsName("C")
    public fun copy(other: UObject): Texture2dArray

    @JsName("C")
    public fun copy(other: Any): Texture2dArray
  }
}

public open external class VolumeTexture(
  outer: UObject,
) : Texture {
  @JsName("Source2DTexture")
  public open var source2dTexture: Texture2d

  @JsName("SourceLightingGuid")
  public open var sourceLightingGuid: Guid

  @JsName("Source2DTileSizeX")
  public open var source2dTileSizeX: Number

  @JsName("Source2DTileSizeY")
  public open var source2dTileSizeY: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VolumeTexture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VolumeTexture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VolumeTexture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VolumeTexture

    @JsName("C")
    public fun copy(other: UObject): VolumeTexture

    @JsName("C")
    public fun copy(other: Any): VolumeTexture
  }
}

public open external class NiagaraComponent(
  outer: UObject,
) : FxSystemComponent {
  @JsName("Asset")
  public open var asset: NiagaraSystem

  @JsName("TickBehavior")
  public open var tickBehavior: String

  @JsName("RandomSeedOffset")
  public open var randomSeedOffset: Number

  @JsName("OverrideParameters")
  public open var overrideParameters: NiagaraUserRedirectionParameterStore

  @JsName("EditorOverridesValue")
  public open var editorOverridesValue: Any

  @JsName("TemplateParameterOverrides")
  public open var templateParameterOverrides: Any

  @JsName("InstanceParameterOverrides")
  public open var instanceParameterOverrides: Any

  @JsName("bForceSolo")
  public open var forceSolo: Boolean

  @JsName("bEnableGpuComputeDebug")
  public open var enableGpuComputeDebug: Boolean

  @JsName("bAutoDestroy")
  public open var autoDestroy: Boolean

  @JsName("bRenderingEnabled")
  public open var renderingEnabled: Boolean

  @JsName("bAutoManageAttachment")
  public open var autoManageAttachment: Boolean

  @JsName("bAutoAttachWeldSimulatedBodies")
  public open var autoAttachWeldSimulatedBodies: Boolean

  @JsName("MaxTimeBeforeForceUpdateTransform")
  public open var maxTimeBeforeForceUpdateTransform: Number

  @JsName("OnSystemFinished")
  public open var onSystemFinished:
      UnrealEngineMulticastDelegate<(PSystem: NiagaraComponent) -> Unit>

  @JsName("AutoAttachParent")
  public open var autoAttachParent: Any

  @JsName("AutoAttachSocketName")
  public open var autoAttachSocketName: String

  @JsName("AutoAttachLocationRule")
  public open var autoAttachLocationRule: String

  @JsName("AutoAttachRotationRule")
  public open var autoAttachRotationRule: String

  @JsName("AutoAttachScaleRule")
  public open var autoAttachScaleRule: String

  @JsName("bWaitForCompilationOnActivate")
  public open var waitForCompilationOnActivate: Boolean

  @JsName("bAllowScalability")
  public open var allowScalability: Boolean

  @JsName("CullProxy")
  public open var cullProxy: NiagaraCullProxyComponent

  @JsName("SetVariableVec4")
  public open fun setVariableVec4(inVariableName: String, inValue: Vector4): Unit

  @JsName("SetVariableVec3")
  public open fun setVariableVec3(inVariableName: String, inValue: Vector): Unit

  @JsName("SetVariableVec2")
  public open fun setVariableVec2(inVariableName: String, inValue: Vector2d): Unit

  @JsName("SetVariableTextureRenderTarget")
  public open fun setVariableTextureRenderTarget(inVariableName: String,
      textureRenderTarget: TextureRenderTarget): Unit

  @JsName("SetVariableTexture")
  public open fun setVariableTexture(inVariableName: String, texture: Texture): Unit

  @JsName("SetVariableStaticMesh")
  public open fun setVariableStaticMesh(inVariableName: String, inValue: StaticMesh): Unit

  @JsName("SetVariableQuat")
  public open fun setVariableQuat(inVariableName: String, inValue: Quat): Unit

  @JsName("SetVariablePosition")
  public open fun setVariablePosition(inVariableName: String, inValue: Vector): Unit

  @JsName("SetVariableObject")
  public open fun setVariableObject(inVariableName: String, uObject: UObject): Unit

  @JsName("SetVariableMaterial")
  public open fun setVariableMaterial(inVariableName: String, uObject: MaterialInterface): Unit

  @JsName("SetVariableLinearColor")
  public open fun setVariableLinearColor(inVariableName: String, inValue: LinearColor): Unit

  @JsName("SetVariableInt")
  public open fun setVariableInt(inVariableName: String, inValue: Number): Unit

  @JsName("SetVariableFloat")
  public open fun setVariableFloat(inVariableName: String, inValue: Number): Unit

  @JsName("SetVariableBool")
  public open fun setVariableBool(inVariableName: String, inValue: Boolean): Unit

  @JsName("SetVariableActor")
  public open fun setVariableActor(inVariableName: String, actor: Actor): Unit

  @JsName("SetTickBehavior")
  public open fun setTickBehavior(newTickBehavior: String): Unit

  @JsName("SetSystemFixedBounds")
  public open fun setSystemFixedBounds(localBounds: Box): Unit

  @JsName("SetSeekDelta")
  public open fun setSeekDelta(inSeekDelta: Number): Unit

  @JsName("SetRenderingEnabled")
  public open fun setRenderingEnabled(inRenderingEnabled: Boolean): Unit

  @JsName("SetRandomSeedOffset")
  public open fun setRandomSeedOffset(newRandomSeedOffset: Number): Unit

  @JsName("SetPreviewLODDistance")
  public open fun setPreviewLodDistance(
    enablePreviewLodDistance: Boolean,
    previewLodDistance: Number,
    previewMaxDistance: Number,
  ): Unit

  @JsName("SetPaused")
  public open fun setPaused(inPaused: Boolean): Unit

  @JsName("SetNiagaraVariableVec4")
  public open fun setNiagaraVariableVec4(inVariableName: String, inValue: Vector4): Unit

  @JsName("SetNiagaraVariableVec3")
  public open fun setNiagaraVariableVec3(inVariableName: String, inValue: Vector): Unit

  @JsName("SetNiagaraVariableVec2")
  public open fun setNiagaraVariableVec2(inVariableName: String, inValue: Vector2d): Unit

  @JsName("SetNiagaraVariableQuat")
  public open fun setNiagaraVariableQuat(inVariableName: String, inValue: Quat): Unit

  @JsName("SetNiagaraVariablePosition")
  public open fun setNiagaraVariablePosition(inVariableName: String, inValue: Vector): Unit

  @JsName("SetNiagaraVariableObject")
  public open fun setNiagaraVariableObject(inVariableName: String, uObject: UObject): Unit

  @JsName("SetNiagaraVariableLinearColor")
  public open fun setNiagaraVariableLinearColor(inVariableName: String, inValue: LinearColor): Unit

  @JsName("SetNiagaraVariableInt")
  public open fun setNiagaraVariableInt(inVariableName: String, inValue: Number): Unit

  @JsName("SetNiagaraVariableFloat")
  public open fun setNiagaraVariableFloat(inVariableName: String, inValue: Number): Unit

  @JsName("SetNiagaraVariableBool")
  public open fun setNiagaraVariableBool(inVariableName: String, inValue: Boolean): Unit

  @JsName("SetNiagaraVariableActor")
  public open fun setNiagaraVariableActor(inVariableName: String, actor: Actor): Unit

  @JsName("SetMaxSimTime")
  public open fun setMaxSimTime(inMaxTime: Number): Unit

  @JsName("SetLockDesiredAgeDeltaTimeToSeekDelta")
  public open fun setLockDesiredAgeDeltaTimeToSeekDelta(lock: Boolean): Unit

  @JsName("SetGpuComputeDebug")
  public open fun setGpuComputeDebug(enableDebug: Boolean): Unit

  @JsName("SetForceSolo")
  public open fun setForceSolo(inForceSolo: Boolean): Unit

  @JsName("SetForceLocalPlayerEffect")
  public open fun setForceLocalPlayerEffect(isPlayerEffect: Boolean): Unit

  @JsName("SetEmitterFixedBounds")
  public open fun setEmitterFixedBounds(emitterName: String, localBounds: Box): Unit

  @JsName("SetDesiredAge")
  public open fun setDesiredAge(inDesiredAge: Number): Unit

  @JsName("SetCustomTimeDilation")
  public open fun setCustomTimeDilation(dilation: Number): Unit

  @JsName("SetCanRenderWhileSeeking")
  public open fun setCanRenderWhileSeeking(inCanRenderWhileSeeking: Boolean): Unit

  @JsName("SetAutoDestroy")
  public open fun setAutoDestroy(inAutoDestroy: Boolean): Unit

  @JsName("SetAsset")
  public open fun setAsset(inAsset: NiagaraSystem, resetExistingOverrideParameters: Boolean): Unit

  @JsName("SetAllowScalability")
  public open fun setAllowScalability(allow: Boolean): Unit

  @JsName("SetAgeUpdateMode")
  public open fun setAgeUpdateMode(inAgeUpdateMode: String): Unit

  @JsName("SeekToDesiredAge")
  public open fun seekToDesiredAge(inDesiredAge: Number): Unit

  @JsName("ResetSystem")
  public open fun resetSystem(): Unit

  @JsName("ReinitializeSystem")
  public open fun reinitializeSystem(): Unit

  @JsName("IsPaused")
  public open fun isPaused(): Boolean

  @JsName("InitForPerformanceBaseline")
  public open fun initForPerformanceBaseline(): Unit

  @JsName("GetTickBehavior")
  public open fun getTickBehavior(): String

  @JsName("GetSystemFixedBounds")
  public open fun getSystemFixedBounds(): Box

  @JsName("GetSeekDelta")
  public open fun getSeekDelta(): Number

  @JsName("GetRandomSeedOffset")
  public open fun getRandomSeedOffset(): Number

  @JsName("GetPreviewLODDistanceEnabled")
  public open fun getPreviewLodDistanceEnabled(): Boolean

  @JsName("GetPreviewLODDistance")
  public open fun getPreviewLodDistance(): Number

  @JsName("GetNiagaraParticleValueVec3_DebugOnly")
  public open fun getNiagaraParticleValueVec3DebugOnly(inEmitterName: String, inValueName: String):
      Array<Vector>

  @JsName("GetNiagaraParticleValues_DebugOnly")
  public open fun getNiagaraParticleValuesDebugOnly(inEmitterName: String, inValueName: String):
      Array<Number>

  @JsName("GetNiagaraParticlePositions_DebugOnly")
  public open fun getNiagaraParticlePositionsDebugOnly(inEmitterName: String): Array<Vector>

  @JsName("GetMaxSimTime")
  public open fun getMaxSimTime(): Number

  @JsName("GetLockDesiredAgeDeltaTimeToSeekDelta")
  public open fun getLockDesiredAgeDeltaTimeToSeekDelta(): Boolean

  @JsName("GetForceSolo")
  public open fun getForceSolo(): Boolean

  @JsName("GetForceLocalPlayerEffect")
  public open fun getForceLocalPlayerEffect(): Boolean

  @JsName("GetEmitterFixedBounds")
  public open fun getEmitterFixedBounds(emitterName: String): Box

  @JsName("GetDesiredAge")
  public open fun getDesiredAge(): Number

  @JsName("GetDataInterface")
  public open fun getDataInterface(name: String): NiagaraDataInterface

  @JsName("GetCustomTimeDilation")
  public open fun getCustomTimeDilation(): Number

  @JsName("GetAsset")
  public open fun getAsset(): NiagaraSystem

  @JsName("GetAllowScalability")
  public open fun getAllowScalability(): Boolean

  @JsName("GetAgeUpdateMode")
  public open fun getAgeUpdateMode(): String

  @JsName("ClearSystemFixedBounds")
  public open fun clearSystemFixedBounds(): Unit

  @JsName("ClearEmitterFixedBounds")
  public open fun clearEmitterFixedBounds(emitterName: String): Unit

  @JsName("AdvanceSimulationByTime")
  public open fun advanceSimulationByTime(simulateTime: Number, tickDeltaSeconds: Number): Unit

  @JsName("AdvanceSimulation")
  public open fun advanceSimulation(tickCount: Number, tickDeltaSeconds: Number): Unit

  @JsName("OverrideSystemUserVariableSkeletalMeshComponent")
  public open fun overrideSystemUserVariableSkeletalMeshComponent(overrideName: String,
      skeletalMeshComponent: SkeletalMeshComponent): Unit

  @JsName("OverrideSystemUserVariableStaticMesh")
  public open fun overrideSystemUserVariableStaticMesh(overrideName: String,
      staticMesh: StaticMesh): Unit

  @JsName("OverrideSystemUserVariableStaticMeshComponent")
  public open fun overrideSystemUserVariableStaticMeshComponent(overrideName: String,
      staticMeshComponent: StaticMeshComponent): Unit

  @JsName("SetSkeletalMeshDataInterfaceSamplingRegions")
  public open fun setSkeletalMeshDataInterfaceSamplingRegions(overrideName: String,
      samplingRegions: Array<String>): Unit

  @JsName("SetTexture2DArrayObject")
  public open fun setTexture2dArrayObject(overrideName: String, texture: Texture2dArray): Unit

  @JsName("SetTextureObject")
  public open fun setTextureObject(overrideName: String, texture: Texture): Unit

  @JsName("SetVolumeTextureObject")
  public open fun setVolumeTextureObject(overrideName: String, texture: VolumeTexture): Unit

  @JsName("GetNiagaraArrayBool")
  public open fun getNiagaraArrayBool(overrideName: String): Array<Boolean>

  @JsName("GetNiagaraArrayBoolValue")
  public open fun getNiagaraArrayBoolValue(overrideName: String, index: Number): Boolean

  @JsName("GetNiagaraArrayColor")
  public open fun getNiagaraArrayColor(overrideName: String): Array<LinearColor>

  @JsName("GetNiagaraArrayColorValue")
  public open fun getNiagaraArrayColorValue(overrideName: String, index: Number): LinearColor

  @JsName("GetNiagaraArrayFloat")
  public open fun getNiagaraArrayFloat(overrideName: String): Array<Number>

  @JsName("GetNiagaraArrayFloatValue")
  public open fun getNiagaraArrayFloatValue(overrideName: String, index: Number): Number

  @JsName("GetNiagaraArrayInt32")
  public open fun getNiagaraArrayInt32(overrideName: String): Array<Number>

  @JsName("GetNiagaraArrayInt32Value")
  public open fun getNiagaraArrayInt32Value(overrideName: String, index: Number): Number

  @JsName("GetNiagaraArrayPosition")
  public open fun getNiagaraArrayPosition(overrideName: String): Array<Vector>

  @JsName("GetNiagaraArrayPositionValue")
  public open fun getNiagaraArrayPositionValue(overrideName: String, index: Number): Vector

  @JsName("GetNiagaraArrayQuat")
  public open fun getNiagaraArrayQuat(overrideName: String): Array<Quat>

  @JsName("GetNiagaraArrayQuatValue")
  public open fun getNiagaraArrayQuatValue(overrideName: String, index: Number): Quat

  @JsName("GetNiagaraArrayVector")
  public open fun getNiagaraArrayVector(overrideName: String): Array<Vector>

  @JsName("GetNiagaraArrayVector2D")
  public open fun getNiagaraArrayVector2d(overrideName: String): Array<Vector2d>

  @JsName("GetNiagaraArrayVector2DValue")
  public open fun getNiagaraArrayVector2dValue(overrideName: String, index: Number): Vector2d

  @JsName("GetNiagaraArrayVector4")
  public open fun getNiagaraArrayVector4(overrideName: String): Array<Vector4>

  @JsName("GetNiagaraArrayVector4Value")
  public open fun getNiagaraArrayVector4Value(overrideName: String, index: Number): Vector4

  @JsName("GetNiagaraArrayVectorValue")
  public open fun getNiagaraArrayVectorValue(overrideName: String, index: Number): Vector

  @JsName("SetNiagaraArrayBool")
  public open fun setNiagaraArrayBool(overrideName: String, arrayData: Array<Boolean>): Unit

  @JsName("SetNiagaraArrayBoolValue")
  public open fun setNiagaraArrayBoolValue(
    overrideName: String,
    index: Number,
    value: Boolean,
    sizeToFit: Boolean,
  ): Unit

  @JsName("SetNiagaraArrayColor")
  public open fun setNiagaraArrayColor(overrideName: String, arrayData: Array<LinearColor>): Unit

  @JsName("SetNiagaraArrayColorValue")
  public open fun setNiagaraArrayColorValue(
    overrideName: String,
    index: Number,
    value: LinearColor,
    sizeToFit: Boolean,
  ): Unit

  @JsName("SetNiagaraArrayFloat")
  public open fun setNiagaraArrayFloat(overrideName: String, arrayData: Array<Number>): Unit

  @JsName("SetNiagaraArrayFloatValue")
  public open fun setNiagaraArrayFloatValue(
    overrideName: String,
    index: Number,
    value: Number,
    sizeToFit: Boolean,
  ): Unit

  @JsName("SetNiagaraArrayInt32")
  public open fun setNiagaraArrayInt32(overrideName: String, arrayData: Array<Number>): Unit

  @JsName("SetNiagaraArrayInt32Value")
  public open fun setNiagaraArrayInt32Value(
    overrideName: String,
    index: Number,
    value: Number,
    sizeToFit: Boolean,
  ): Unit

  @JsName("SetNiagaraArrayPosition")
  public open fun setNiagaraArrayPosition(overrideName: String, arrayData: Array<Vector>): Unit

  @JsName("SetNiagaraArrayPositionValue")
  public open fun setNiagaraArrayPositionValue(
    overrideName: String,
    index: Number,
    value: Vector,
    sizeToFit: Boolean,
  ): Unit

  @JsName("SetNiagaraArrayQuat")
  public open fun setNiagaraArrayQuat(overrideName: String, arrayData: Array<Quat>): Unit

  @JsName("SetNiagaraArrayQuatValue")
  public open fun setNiagaraArrayQuatValue(
    overrideName: String,
    index: Number,
    value: Quat,
    sizeToFit: Boolean,
  ): Unit

  @JsName("SetNiagaraArrayVector")
  public open fun setNiagaraArrayVector(overrideName: String, arrayData: Array<Vector>): Unit

  @JsName("SetNiagaraArrayVector2D")
  public open fun setNiagaraArrayVector2d(overrideName: String, arrayData: Array<Vector2d>): Unit

  @JsName("SetNiagaraArrayVector2DValue")
  public open fun setNiagaraArrayVector2dValue(
    overrideName: String,
    index: Number,
    value: Vector2d,
    sizeToFit: Boolean,
  ): Unit

  @JsName("SetNiagaraArrayVector4")
  public open fun setNiagaraArrayVector4(overrideName: String, arrayData: Array<Vector4>): Unit

  @JsName("SetNiagaraArrayVector4Value")
  public open fun setNiagaraArrayVector4Value(
    overrideName: String,
    index: Number,
    value: Vector4,
    sizeToFit: Boolean,
  ): Unit

  @JsName("SetNiagaraArrayVectorValue")
  public open fun setNiagaraArrayVectorValue(
    overrideName: String,
    index: Number,
    value: Vector,
    sizeToFit: Boolean,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraComponent

    @JsName("C")
    public fun copy(other: UObject): NiagaraComponent

    @JsName("C")
    public fun copy(other: Any): NiagaraComponent

    @JsName("OverrideSystemUserVariableSkeletalMeshComponent")
    public fun overrideSystemUserVariableSkeletalMeshComponent(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      skeletalMeshComponent: SkeletalMeshComponent,
    ): Unit

    @JsName("OverrideSystemUserVariableStaticMesh")
    public fun overrideSystemUserVariableStaticMesh(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      staticMesh: StaticMesh,
    ): Unit

    @JsName("OverrideSystemUserVariableStaticMeshComponent")
    public fun overrideSystemUserVariableStaticMeshComponent(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      staticMeshComponent: StaticMeshComponent,
    ): Unit

    @JsName("SetSkeletalMeshDataInterfaceSamplingRegions")
    public fun setSkeletalMeshDataInterfaceSamplingRegions(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      samplingRegions: Array<String>,
    ): Unit

    @JsName("SetTexture2DArrayObject")
    public fun setTexture2dArrayObject(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      texture: Texture2dArray,
    ): Unit

    @JsName("SetTextureObject")
    public fun setTextureObject(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      texture: Texture,
    ): Unit

    @JsName("SetVolumeTextureObject")
    public fun setVolumeTextureObject(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      texture: VolumeTexture,
    ): Unit

    @JsName("GetNiagaraArrayBool")
    public fun getNiagaraArrayBool(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<Boolean>

    @JsName("GetNiagaraArrayBoolValue")
    public fun getNiagaraArrayBoolValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): Boolean

    @JsName("GetNiagaraArrayColor")
    public fun getNiagaraArrayColor(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<LinearColor>

    @JsName("GetNiagaraArrayColorValue")
    public fun getNiagaraArrayColorValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): LinearColor

    @JsName("GetNiagaraArrayFloat")
    public fun getNiagaraArrayFloat(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<Number>

    @JsName("GetNiagaraArrayFloatValue")
    public fun getNiagaraArrayFloatValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): Number

    @JsName("GetNiagaraArrayInt32")
    public fun getNiagaraArrayInt32(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<Number>

    @JsName("GetNiagaraArrayInt32Value")
    public fun getNiagaraArrayInt32Value(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): Number

    @JsName("GetNiagaraArrayPosition")
    public fun getNiagaraArrayPosition(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<Vector>

    @JsName("GetNiagaraArrayPositionValue")
    public fun getNiagaraArrayPositionValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): Vector

    @JsName("GetNiagaraArrayQuat")
    public fun getNiagaraArrayQuat(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<Quat>

    @JsName("GetNiagaraArrayQuatValue")
    public fun getNiagaraArrayQuatValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): Quat

    @JsName("GetNiagaraArrayVector")
    public fun getNiagaraArrayVector(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<Vector>

    @JsName("GetNiagaraArrayVector2D")
    public fun getNiagaraArrayVector2d(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<Vector2d>

    @JsName("GetNiagaraArrayVector2DValue")
    public fun getNiagaraArrayVector2dValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): Vector2d

    @JsName("GetNiagaraArrayVector4")
    public fun getNiagaraArrayVector4(niagaraSystem: NiagaraComponent, overrideName: String):
        Array<Vector4>

    @JsName("GetNiagaraArrayVector4Value")
    public fun getNiagaraArrayVector4Value(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): Vector4

    @JsName("GetNiagaraArrayVectorValue")
    public fun getNiagaraArrayVectorValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
    ): Vector

    @JsName("SetNiagaraArrayBool")
    public fun setNiagaraArrayBool(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<Boolean>,
    ): Unit

    @JsName("SetNiagaraArrayBoolValue")
    public fun setNiagaraArrayBoolValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: Boolean,
      sizeToFit: Boolean,
    ): Unit

    @JsName("SetNiagaraArrayColor")
    public fun setNiagaraArrayColor(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<LinearColor>,
    ): Unit

    @JsName("SetNiagaraArrayColorValue")
    public fun setNiagaraArrayColorValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: LinearColor,
      sizeToFit: Boolean,
    ): Unit

    @JsName("SetNiagaraArrayFloat")
    public fun setNiagaraArrayFloat(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<Number>,
    ): Unit

    @JsName("SetNiagaraArrayFloatValue")
    public fun setNiagaraArrayFloatValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: Number,
      sizeToFit: Boolean,
    ): Unit

    @JsName("SetNiagaraArrayInt32")
    public fun setNiagaraArrayInt32(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<Number>,
    ): Unit

    @JsName("SetNiagaraArrayInt32Value")
    public fun setNiagaraArrayInt32Value(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: Number,
      sizeToFit: Boolean,
    ): Unit

    @JsName("SetNiagaraArrayPosition")
    public fun setNiagaraArrayPosition(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<Vector>,
    ): Unit

    @JsName("SetNiagaraArrayPositionValue")
    public fun setNiagaraArrayPositionValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: Vector,
      sizeToFit: Boolean,
    ): Unit

    @JsName("SetNiagaraArrayQuat")
    public fun setNiagaraArrayQuat(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<Quat>,
    ): Unit

    @JsName("SetNiagaraArrayQuatValue")
    public fun setNiagaraArrayQuatValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: Quat,
      sizeToFit: Boolean,
    ): Unit

    @JsName("SetNiagaraArrayVector")
    public fun setNiagaraArrayVector(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<Vector>,
    ): Unit

    @JsName("SetNiagaraArrayVector2D")
    public fun setNiagaraArrayVector2d(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<Vector2d>,
    ): Unit

    @JsName("SetNiagaraArrayVector2DValue")
    public fun setNiagaraArrayVector2dValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: Vector2d,
      sizeToFit: Boolean,
    ): Unit

    @JsName("SetNiagaraArrayVector4")
    public fun setNiagaraArrayVector4(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      arrayData: Array<Vector4>,
    ): Unit

    @JsName("SetNiagaraArrayVector4Value")
    public fun setNiagaraArrayVector4Value(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: Vector4,
      sizeToFit: Boolean,
    ): Unit

    @JsName("SetNiagaraArrayVectorValue")
    public fun setNiagaraArrayVectorValue(
      niagaraSystem: NiagaraComponent,
      overrideName: String,
      index: Number,
      value: Vector,
      sizeToFit: Boolean,
    ): Unit
  }
}

public open external class NiagaraSystemUpdateContext {
  @JsName("ComponentsToReset")
  public open var componentsToReset: Array<NiagaraComponent>

  @JsName("ComponentsToReInit")
  public open var componentsToReInit: Array<NiagaraComponent>

  @JsName("ComponentsToNotifySimDestroy")
  public open var componentsToNotifySimDestroy: Array<NiagaraComponent>

  @JsName("SystemSimsToDestroy")
  public open var systemSimsToDestroy: Array<NiagaraSystem>

  public open fun clone(): NiagaraSystemUpdateContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemUpdateContext

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemUpdateContext
  }
}

@JsName("ERendererStencilMask")
public external object RendererStencilMask {
  @JsName("ERSM_Default")
  public var Default: String

  @JsName("ERSM_255")
  public var TwoFiftyFive: String

  @JsName("ERSM_1")
  public var One: String

  @JsName("ERSM_2")
  public var Two: String

  @JsName("ERSM_4")
  public var Four: String

  @JsName("ERSM_8")
  public var Eight: String

  @JsName("ERSM_16")
  public var Sixteen: String

  @JsName("ERSM_32")
  public var ThirtyTwo: String

  @JsName("ERSM_64")
  public var SixtyFour: String

  @JsName("ERSM_128")
  public var OneTwentyEight: String

  @JsName("ERSM_MAX")
  public var Max: String
}

@JsName("ENiagaraScalabilityUpdateFrequency")
public external object NiagaraScalabilityUpdateFrequency {
  public var SpawnOnly: String

  public var Low: String

  public var Medium: String

  public var High: String

  public var Continuous: String

  @JsName("ENiagaraScalabilityUpdateFrequency_MAX")
  public var Max: String
}

@JsName("ENiagaraCullReaction")
public external object NiagaraCullReaction {
  public var Deactivate: String

  @JsName("DeactivateImmediate")
  public var Immediate: String

  @JsName("DeactivateResume")
  public var Resume: String

  @JsName("DeactivateImmediateResume")
  public var ImmediateResume: String

  @JsName("ENiagaraCullReaction_MAX")
  public var Max: String
}

public open external class NiagaraSignificanceHandler(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSignificanceHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSignificanceHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSignificanceHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSignificanceHandler

    @JsName("C")
    public fun copy(other: UObject): NiagaraSignificanceHandler

    @JsName("C")
    public fun copy(other: Any): NiagaraSignificanceHandler
  }
}

public open external class NiagaraDeviceProfileStateEntry {
  @JsName("ProfileName")
  public open var profileName: String

  @JsName("QualityLevelMask")
  public open var qualityLevelMask: Any

  @JsName("SetQualityLevelMask")
  public open var setQualityLevelMask: Any

  public open fun clone(): NiagaraDeviceProfileStateEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraDeviceProfileStateEntry

    @JsName("C")
    public fun copy(other: Any): NiagaraDeviceProfileStateEntry
  }
}

public open external class NiagaraPlatformSetCVarCondition {
  @JsName("CVarName")
  public open var cVarName: String

  @JsName("Value")
  public open var value: Boolean

  @JsName("MinInt")
  public open var minInt: Number

  @JsName("MaxInt")
  public open var maxInt: Number

  @JsName("MinFloat")
  public open var minFloat: Number

  @JsName("MaxFloat")
  public open var maxFloat: Number

  @JsName("bUseMinInt")
  public open var useMinInt: Boolean

  @JsName("bUseMaxInt")
  public open var useMaxInt: Boolean

  @JsName("bUseMinFloat")
  public open var useMinFloat: Boolean

  @JsName("bUseMaxFloat")
  public open var useMaxFloat: Boolean

  public open fun clone(): NiagaraPlatformSetCVarCondition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraPlatformSetCVarCondition

    @JsName("C")
    public fun copy(other: Any): NiagaraPlatformSetCVarCondition
  }
}

public open external class NiagaraPlatformSet {
  @JsName("QualityLevelMask")
  public open var qualityLevelMask: Number

  @JsName("DeviceProfileStates")
  public open var deviceProfileStates: Array<NiagaraDeviceProfileStateEntry>

  @JsName("CVarConditions")
  public open var cVarConditions: Array<NiagaraPlatformSetCVarCondition>

  public open fun clone(): NiagaraPlatformSet

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraPlatformSet

    @JsName("C")
    public fun copy(other: Any): NiagaraPlatformSet
  }
}

@JsName("ENiagaraCullProxyMode")
public external object NiagaraCullProxyMode {
  public var None: String

  @JsName("Instanced_Rendered")
  public var InstancedRendered: String

  @JsName("ENiagaraCullProxyMode_MAX")
  public var Max: String
}

public open external class NiagaraLinearRamp {
  @JsName("StartX")
  public open var startX: Number

  @JsName("StartY")
  public open var startY: Number

  @JsName("EndX")
  public open var endX: Number

  @JsName("EndY")
  public open var endY: Number

  public open fun clone(): NiagaraLinearRamp

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraLinearRamp

    @JsName("C")
    public fun copy(other: Any): NiagaraLinearRamp
  }
}

public open external class NiagaraGlobalBudgetScaling {
  @JsName("bCullByGlobalBudget")
  public open var cullByGlobalBudget: Boolean

  @JsName("bScaleMaxDistanceByGlobalBudgetUse")
  public open var scaleMaxDistanceByGlobalBudgetUse: Boolean

  @JsName("bScaleMaxInstanceCountByGlobalBudgetUse")
  public open var scaleMaxInstanceCountByGlobalBudgetUse: Boolean

  @JsName("bScaleSystemInstanceCountByGlobalBudgetUse")
  public open var scaleSystemInstanceCountByGlobalBudgetUse: Boolean

  @JsName("MaxGlobalBudgetUsage")
  public open var maxGlobalBudgetUsage: Number

  @JsName("MaxDistanceScaleByGlobalBudgetUse")
  public open var maxDistanceScaleByGlobalBudgetUse: NiagaraLinearRamp

  @JsName("MaxInstanceCountScaleByGlobalBudgetUse")
  public open var maxInstanceCountScaleByGlobalBudgetUse: NiagaraLinearRamp

  @JsName("MaxSystemInstanceCountScaleByGlobalBudgetUse")
  public open var maxSystemInstanceCountScaleByGlobalBudgetUse: NiagaraLinearRamp

  public open fun clone(): NiagaraGlobalBudgetScaling

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraGlobalBudgetScaling

    @JsName("C")
    public fun copy(other: Any): NiagaraGlobalBudgetScaling
  }
}

public open external class NiagaraSystemScalabilitySettings {
  @JsName("Platforms")
  public open var platforms: NiagaraPlatformSet

  @JsName("bCullByDistance")
  public open var cullByDistance: Boolean

  @JsName("bCullMaxInstanceCount")
  public open var cullMaxInstanceCount: Boolean

  @JsName("bCullPerSystemMaxInstanceCount")
  public open var cullPerSystemMaxInstanceCount: Boolean

  @JsName("bCullByMaxTimeWithoutRender")
  public open var cullByMaxTimeWithoutRender: Boolean

  @JsName("MaxDistance")
  public open var maxDistance: Number

  @JsName("MaxInstances")
  public open var maxInstances: Number

  @JsName("MaxSystemInstances")
  public open var maxSystemInstances: Number

  @JsName("MaxTimeWithoutRender")
  public open var maxTimeWithoutRender: Number

  @JsName("CullProxyMode")
  public open var cullProxyMode: String

  @JsName("MaxSystemProxies")
  public open var maxSystemProxies: Number

  @JsName("BudgetScaling")
  public open var budgetScaling: NiagaraGlobalBudgetScaling

  public open fun clone(): NiagaraSystemScalabilitySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemScalabilitySettings

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemScalabilitySettings
  }
}

public open external class NiagaraSystemScalabilitySettingsArray {
  @JsName("Settings")
  public open var settings: Array<NiagaraSystemScalabilitySettings>

  public open fun clone(): NiagaraSystemScalabilitySettingsArray

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemScalabilitySettingsArray

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemScalabilitySettingsArray
  }
}

public open external class NiagaraEmitterScalabilitySettings {
  @JsName("Platforms")
  public open var platforms: NiagaraPlatformSet

  @JsName("bScaleSpawnCount")
  public open var scaleSpawnCount: Boolean

  @JsName("SpawnCountScale")
  public open var spawnCountScale: Number

  public open fun clone(): NiagaraEmitterScalabilitySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEmitterScalabilitySettings

    @JsName("C")
    public fun copy(other: Any): NiagaraEmitterScalabilitySettings
  }
}

public open external class NiagaraEmitterScalabilitySettingsArray {
  @JsName("Settings")
  public open var settings: Array<NiagaraEmitterScalabilitySettings>

  public open fun clone(): NiagaraEmitterScalabilitySettingsArray

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEmitterScalabilitySettingsArray

    @JsName("C")
    public fun copy(other: Any): NiagaraEmitterScalabilitySettingsArray
  }
}

@JsName("EHorizTextAligment")
public external object HorizontalTextAlignment {
  @JsName("EHTA_Left")
  public var Left: String

  @JsName("EHTA_Center")
  public var Center: String

  @JsName("EHTA_Right")
  public var Right: String

  @JsName("EHTA_MAX")
  public var Max: String
}

@JsName("EVerticalTextAligment")
public external object VerticalTextAlignment {
  @JsName("EVRTA_TextTop")
  public var TextTop: String

  @JsName("EVRTA_TextCenter")
  public var TextCenter: String

  @JsName("EVRTA_TextBottom")
  public var TextBottom: String

  @JsName("EVRTA_QuadTop")
  public var QuadTop: String

  @JsName("EVRTA_MAX")
  public var Max: String
}

public open external class TextRenderComponent(
  outer: UObject,
) : PrimitiveComponent {
  public open var text: String

  @JsName("TextMaterial")
  public open var textMaterial: MaterialInterface

  @JsName("Font")
  public open var font: Font

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("TextRenderColor")
  public open var textRenderColor: Color

  @JsName("XScale")
  public open var xScale: Number

  @JsName("YScale")
  public open var yScale: Number

  @JsName("WorldSize")
  public open var worldSize: Number

  @JsName("InvDefaultSize")
  public open var invDefaultSize: Number

  @JsName("HorizSpacingAdjust")
  public open var horizSpacingAdjust: Number

  @JsName("VertSpacingAdjust")
  public open var vertSpacingAdjust: Number

  @JsName("bAlwaysRenderAsText")
  public open var alwaysRenderAsText: Boolean

  @JsName("SetYScale")
  public open fun setYScale(value: Number): Unit

  @JsName("SetXScale")
  public open fun setXScale(value: Number): Unit

  @JsName("SetWorldSize")
  public open fun setWorldSize(value: Number): Unit

  @JsName("SetVertSpacingAdjust")
  public open fun setVertSpacingAdjust(value: Number): Unit

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(value: String): Unit

  @JsName("SetTextRenderColor")
  public open fun setTextRenderColor(value: Color): Unit

  @JsName("SetTextMaterial")
  public open fun setTextMaterial(material: MaterialInterface): Unit

  @JsName("SetHorizSpacingAdjust")
  public open fun setHorizSpacingAdjust(value: Number): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(value: String): Unit

  @JsName("SetFont")
  public open fun setFont(value: Font): Unit

  @JsName("K2_SetText")
  public open fun k2SetText(value: String): Unit

  @JsName("GetTextWorldSize")
  public open fun getTextWorldSize(): Vector

  @JsName("GetTextLocalSize")
  public open fun getTextLocalSize(): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextRenderComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextRenderComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextRenderComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextRenderComponent

    @JsName("C")
    public fun copy(other: UObject): TextRenderComponent

    @JsName("C")
    public fun copy(other: Any): TextRenderComponent
  }
}

public open external class NiagaraPerfBaselineActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("Controller")
  public open var controller: NiagaraBaselineController

  @JsName("Label")
  public open var label: TextRenderComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraPerfBaselineActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraPerfBaselineActor

    @JsName("C")
    public fun copy(other: UObject): NiagaraPerfBaselineActor

    @JsName("C")
    public fun copy(other: Any): NiagaraPerfBaselineActor
  }
}

public open external class NiagaraPerfBaselineStats {
  @JsName("PerInstanceAvg_GT")
  public open var perInstanceAvgGt: Number

  @JsName("PerInstanceAvg_RT")
  public open var perInstanceAvgRt: Number

  @JsName("PerInstanceMax_GT")
  public open var perInstanceMaxGt: Number

  @JsName("PerInstanceMax_RT")
  public open var perInstanceMaxRt: Number

  public open fun clone(): NiagaraPerfBaselineStats

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraPerfBaselineStats

    @JsName("C")
    public fun copy(other: Any): NiagaraPerfBaselineStats
  }
}

public open external class NiagaraBaselineController(
  outer: UObject,
) : UObject {
  @JsName("TestDuration")
  public open var testDuration: Number

  @JsName("EffectType")
  public open var effectType: NiagaraEffectType

  @JsName("Owner")
  public open var owner: NiagaraPerfBaselineActor

  @JsName("System")
  public open var system: NiagaraSystem

  @JsName("OnTickTest")
  public open fun onTickTest(): Boolean

  @JsName("OnOwnerTick")
  public open fun onOwnerTick(deltaTime: Number): Unit

  @JsName("OnEndTest")
  public open fun onEndTest(stats: NiagaraPerfBaselineStats): Unit

  @JsName("OnBeginTest")
  public open fun onBeginTest(): Unit

  @JsName("GetSystem")
  public open fun getSystem(): NiagaraSystem

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraBaselineController

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraBaselineController

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraBaselineController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraBaselineController

    @JsName("C")
    public fun copy(other: UObject): NiagaraBaselineController

    @JsName("C")
    public fun copy(other: Any): NiagaraBaselineController
  }
}

public open external class NiagaraEffectType(
  outer: UObject,
) : UObject {
  @JsName("bAllowCullingForLocalPlayers")
  public open var allowCullingForLocalPlayers: Boolean

  @JsName("UpdateFrequency")
  public open var updateFrequency: String

  @JsName("CullReaction")
  public open var cullReaction: String

  @JsName("SignificanceHandler")
  public open var significanceHandler: NiagaraSignificanceHandler

  @JsName("DetailLevelScalabilitySettings")
  public open var detailLevelScalabilitySettings: Array<NiagaraSystemScalabilitySettings>

  @JsName("SystemScalabilitySettings")
  public open var systemScalabilitySettings: NiagaraSystemScalabilitySettingsArray

  @JsName("EmitterScalabilitySettings")
  public open var emitterScalabilitySettings: NiagaraEmitterScalabilitySettingsArray

  @JsName("PerformanceBaselineController")
  public open var performanceBaselineController: NiagaraBaselineController

  @JsName("PerfBaselineStats")
  public open var perfBaselineStats: NiagaraPerfBaselineStats

  @JsName("PerfBaselineVersion")
  public open var perfBaselineVersion: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraEffectType

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraEffectType

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraEffectType

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraEffectType

    @JsName("C")
    public fun copy(other: UObject): NiagaraEffectType

    @JsName("C")
    public fun copy(other: Any): NiagaraEffectType
  }
}

public open external class NiagaraSystemScalabilityOverride : NiagaraSystemScalabilitySettings {
  @JsName("bOverrideDistanceSettings")
  public open var overrideDistanceSettings: Boolean

  @JsName("bOverrideInstanceCountSettings")
  public open var overrideInstanceCountSettings: Boolean

  @JsName("bOverridePerSystemInstanceCountSettings")
  public open var overridePerSystemInstanceCountSettings: Boolean

  @JsName("bOverrideTimeSinceRendererSettings")
  public open var overrideTimeSinceRendererSettings: Boolean

  @JsName("bOverrideGlobalBudgetScalingSettings")
  public open var overrideGlobalBudgetScalingSettings: Boolean

  @JsName("bOverrideCullProxySettings")
  public open var overrideCullProxySettings: Boolean

  public override fun clone(): NiagaraSystemScalabilityOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemScalabilityOverride

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemScalabilityOverride
  }
}

public open external class NiagaraSystemScalabilityOverrides {
  @JsName("Overrides")
  public open var overrides: Array<NiagaraSystemScalabilityOverride>

  public open fun clone(): NiagaraSystemScalabilityOverrides

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemScalabilityOverrides

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemScalabilityOverrides
  }
}

@JsName("EParticleAllocationMode")
public external object ParticleAllocationMode {
  public var AutomaticEstimate: String

  public var ManualEstimate: String

  public var FixedCount: String

  @JsName("EParticleAllocationMode_MAX")
  public var Max: String
}

public open external class NiagaraEventReceiverProperties {
  @JsName("Name")
  public open var name: String

  @JsName("SourceEventGenerator")
  public open var sourceEventGenerator: String

  @JsName("SourceEmitter")
  public open var sourceEmitter: String

  public open fun clone(): NiagaraEventReceiverProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEventReceiverProperties

    @JsName("C")
    public fun copy(other: Any): NiagaraEventReceiverProperties
  }
}

public open external class NiagaraTypeLayoutInfo {
  @JsName("FloatComponentByteOffsets")
  public open var floatComponentByteOffsets: Array<Any>

  @JsName("FloatComponentRegisterOffsets")
  public open var floatComponentRegisterOffsets: Array<Any>

  @JsName("Int32ComponentByteOffsets")
  public open var int32ComponentByteOffsets: Array<Any>

  @JsName("Int32ComponentRegisterOffsets")
  public open var int32ComponentRegisterOffsets: Array<Any>

  @JsName("HalfComponentByteOffsets")
  public open var halfComponentByteOffsets: Array<Any>

  @JsName("HalfComponentRegisterOffsets")
  public open var halfComponentRegisterOffsets: Array<Any>

  public open fun clone(): NiagaraTypeLayoutInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraTypeLayoutInfo

    @JsName("C")
    public fun copy(other: Any): NiagaraTypeLayoutInfo
  }
}

public open external class NiagaraVariableLayoutInfo {
  @JsName("FloatComponentStart")
  public open var floatComponentStart: Any

  @JsName("Int32ComponentStart")
  public open var int32ComponentStart: Any

  @JsName("HalfComponentStart")
  public open var halfComponentStart: Any

  @JsName("LayoutInfo")
  public open var layoutInfo: NiagaraTypeLayoutInfo

  public open fun clone(): NiagaraVariableLayoutInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraVariableLayoutInfo

    @JsName("C")
    public fun copy(other: Any): NiagaraVariableLayoutInfo
  }
}

@JsName("ENiagaraSimTarget")
public external object NiagaraSimTarget {
  @JsName("CPUSim")
  public var CpuSim: String

  @JsName("GPUComputeSim")
  public var GpuComputeSim: String

  @JsName("ENiagaraSimTarget_MAX")
  public var Max: String
}

public open external class NiagaraDataSetCompiledData {
  @JsName("Variables")
  public open var variables: Array<NiagaraVariable>

  @JsName("VariableLayouts")
  public open var variableLayouts: Array<NiagaraVariableLayoutInfo>

  public open var ID: NiagaraDataSetId

  @JsName("TotalFloatComponents")
  public open var totalFloatComponents: Any

  @JsName("TotalInt32Components")
  public open var totalInt32Components: Any

  @JsName("TotalHalfComponents")
  public open var totalHalfComponents: Any

  @JsName("bRequiresPersistentIDs")
  public open var requiresPersistentIDs: Boolean

  @JsName("SimTarget")
  public open var simTarget: String

  public open fun clone(): NiagaraDataSetCompiledData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraDataSetCompiledData

    @JsName("C")
    public fun copy(other: Any): NiagaraDataSetCompiledData
  }
}

public open external class NiagaraEventGeneratorProperties {
  @JsName("MaxEventsPerFrame")
  public open var maxEventsPerFrame: Number

  public open var ID: String

  @JsName("DataSetCompiledData")
  public open var dataSetCompiledData: NiagaraDataSetCompiledData

  public open fun clone(): NiagaraEventGeneratorProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEventGeneratorProperties

    @JsName("C")
    public fun copy(other: Any): NiagaraEventGeneratorProperties
  }
}

public open external class NiagaraEmitterScriptProperties {
  @JsName("Script")
  public open var script: NiagaraScript

  @JsName("EventReceivers")
  public open var eventReceivers: Array<NiagaraEventReceiverProperties>

  @JsName("EventGenerators")
  public open var eventGenerators: Array<NiagaraEventGeneratorProperties>

  public open fun clone(): NiagaraEmitterScriptProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEmitterScriptProperties

    @JsName("C")
    public fun copy(other: Any): NiagaraEmitterScriptProperties
  }
}

public open external class NiagaraDetailsLevelScaleOverrides {
  @JsName("Low")
  public open var low: Number

  @JsName("Medium")
  public open var medium: Number

  @JsName("High")
  public open var high: Number

  @JsName("Epic")
  public open var epic: Number

  @JsName("Cine")
  public open var cine: Number

  public open fun clone(): NiagaraDetailsLevelScaleOverrides

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraDetailsLevelScaleOverrides

    @JsName("C")
    public fun copy(other: Any): NiagaraDetailsLevelScaleOverrides
  }
}

public open external class NiagaraEmitterScalabilityOverride : NiagaraEmitterScalabilitySettings {
  @JsName("bOverrideSpawnCountScale")
  public open var overrideSpawnCountScale: Boolean

  public override fun clone(): NiagaraEmitterScalabilityOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEmitterScalabilityOverride

    @JsName("C")
    public fun copy(other: Any): NiagaraEmitterScalabilityOverride
  }
}

public open external class NiagaraEmitterScalabilityOverrides {
  @JsName("Overrides")
  public open var overrides: Array<NiagaraEmitterScalabilityOverride>

  public open fun clone(): NiagaraEmitterScalabilityOverrides

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEmitterScalabilityOverrides

    @JsName("C")
    public fun copy(other: Any): NiagaraEmitterScalabilityOverrides
  }
}

public open external class NiagaraEditorDataBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraEditorDataBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraEditorDataBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraEditorDataBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraEditorDataBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraEditorDataBase

    @JsName("C")
    public fun copy(other: Any): NiagaraEditorDataBase
  }
}

public open external class NiagaraEditorParametersAdapterBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraEditorParametersAdapterBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraEditorParametersAdapterBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraEditorParametersAdapterBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraEditorParametersAdapterBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraEditorParametersAdapterBase

    @JsName("C")
    public fun copy(other: Any): NiagaraEditorParametersAdapterBase
  }
}

@JsName("ENiagaraRendererMotionVectorSetting")
public external object NiagaraRendererMotionVectorSetting {
  public var AutoDetect: String

  public var Precise: String

  public var Approximate: String

  public var Disable: String

  @JsName("ENiagaraRendererMotionVectorSetting_MAX")
  public var Max: String
}

@JsName("ENiagaraBindingSource")
public external object NiagaraBindingSource {
  public var ImplicitFromSource: String

  public var ExplicitParticles: String

  public var ExplicitEmitter: String

  public var ExplicitSystem: String

  public var ExplicitUser: String

  public var MaxBindingSource: String

  @JsName("ENiagaraBindingSource_MAX")
  public var Max: String
}

public open external class NiagaraVariableAttributeBinding {
  @JsName("ParamMapVariable")
  public open var paramMapVariable: NiagaraVariableBase

  @JsName("DataSetVariable")
  public open var dataSetVariable: NiagaraVariable

  @JsName("RootVariable")
  public open var rootVariable: NiagaraVariable

  @JsName("BoundVariable")
  public open var boundVariable: NiagaraVariable

  @JsName("CachedDisplayName")
  public open var cachedDisplayName: String

  @JsName("BindingSourceMode")
  public open var bindingSourceMode: String

  @JsName("bBindingExistsOnSource")
  public open var bindingExistsOnSource: Boolean

  @JsName("bIsCachedParticleValue")
  public open var isCachedParticleValue: Boolean

  public open fun clone(): NiagaraVariableAttributeBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraVariableAttributeBinding

    @JsName("C")
    public fun copy(other: Any): NiagaraVariableAttributeBinding
  }
}

public open external class NiagaraRendererProperties(
  outer: UObject,
) : NiagaraMergeable {
  @JsName("Platforms")
  public open var platforms: NiagaraPlatformSet

  @JsName("SortOrderHint")
  public open var sortOrderHint: Number

  @JsName("MotionVectorSetting")
  public open var motionVectorSetting: String

  @JsName("RendererEnabledBinding")
  public open var rendererEnabledBinding: NiagaraVariableAttributeBinding

  @JsName("bIsEnabled")
  public open var isEnabled: Boolean

  @JsName("bAllowInCullProxies")
  public open var allowInCullProxies: Boolean

  @JsName("bMotionBlurEnabled")
  public open var motionBlurEnabled: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraRendererProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraRendererProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraRendererProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraRendererProperties

    @JsName("C")
    public fun copy(other: UObject): NiagaraRendererProperties

    @JsName("C")
    public fun copy(other: Any): NiagaraRendererProperties
  }
}

@JsName("EScriptExecutionMode")
public external object ScriptExecutionMode {
  public var EveryParticle: String

  public var SpawnedParticles: String

  public var SingleParticle: String

  @JsName("EScriptExecutionMode_MAX")
  public var Max: String
}

public open external class NiagaraEventScriptProperties : NiagaraEmitterScriptProperties {
  @JsName("ExecutionMode")
  public open var executionMode: String

  @JsName("SpawnNumber")
  public open var spawnNumber: Any

  @JsName("MaxEventsPerFrame")
  public open var maxEventsPerFrame: Any

  @JsName("SourceEmitterID")
  public open var sourceEmitterId: Guid

  @JsName("SourceEventName")
  public open var sourceEventName: String

  @JsName("bRandomSpawnNumber")
  public open var randomSpawnNumber: Boolean

  @JsName("MinSpawnNumber")
  public open var minSpawnNumber: Any

  public override fun clone(): NiagaraEventScriptProperties

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEventScriptProperties

    @JsName("C")
    public fun copy(other: Any): NiagaraEventScriptProperties
  }
}

public open external class NiagaraSimulationStageBase(
  outer: UObject,
) : NiagaraMergeable {
  @JsName("Script")
  public open var script: NiagaraScript

  @JsName("SimulationStageName")
  public open var simulationStageName: String

  @JsName("bEnabled")
  public open var enabled: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSimulationStageBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSimulationStageBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSimulationStageBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSimulationStageBase

    @JsName("C")
    public fun copy(other: UObject): NiagaraSimulationStageBase

    @JsName("C")
    public fun copy(other: Any): NiagaraSimulationStageBase
  }
}

public open external class NiagaraEmitter(
  outer: UObject,
) : UObject {
  @JsName("bLocalSpace")
  public open var localSpace: Boolean

  @JsName("bDeterminism")
  public open var determinism: Boolean

  @JsName("RandomSeed")
  public open var randomSeed: Number

  @JsName("AllocationMode")
  public open var allocationMode: String

  @JsName("PreAllocationCount")
  public open var preAllocationCount: Number

  @JsName("UpdateScriptProps")
  public open var updateScriptProps: NiagaraEmitterScriptProperties

  @JsName("SpawnScriptProps")
  public open var spawnScriptProps: NiagaraEmitterScriptProperties

  @JsName("EmitterSpawnScriptProps")
  public open var emitterSpawnScriptProps: NiagaraEmitterScriptProperties

  @JsName("EmitterUpdateScriptProps")
  public open var emitterUpdateScriptProps: NiagaraEmitterScriptProperties

  @JsName("AttributesToPreserve")
  public open var attributesToPreserve: Array<String>

  @JsName("SimTarget")
  public open var simTarget: String

  @JsName("FixedBounds")
  public open var fixedBounds: Box

  @JsName("MinDetailLevel")
  public open var minDetailLevel: Number

  @JsName("MaxDetailLevel")
  public open var maxDetailLevel: Number

  @JsName("GlobalSpawnCountScaleOverrides")
  public open var globalSpawnCountScaleOverrides: NiagaraDetailsLevelScaleOverrides

  @JsName("Platforms")
  public open var platforms: NiagaraPlatformSet

  @JsName("ScalabilityOverrides")
  public open var scalabilityOverrides: NiagaraEmitterScalabilityOverrides

  @JsName("bInterpolatedSpawning")
  public open var interpolatedSpawning: Boolean

  @JsName("bFixedBounds")
  public open var isFixedBounds: Boolean

  @JsName("bUseMinDetailLevel")
  public open var useMinDetailLevel: Boolean

  @JsName("bUseMaxDetailLevel")
  public open var useMaxDetailLevel: Boolean

  @JsName("bOverrideGlobalSpawnCountScale")
  public open var overrideGlobalSpawnCountScale: Boolean

  @JsName("bRequiresPersistentIDs")
  public open var requiresPersistentIDs: Boolean

  @JsName("bCombineEventSpawn")
  public open var combineEventSpawn: Boolean

  @JsName("MaxDeltaTimePerTick")
  public open var maxDeltaTimePerTick: Number

  @JsName("bLimitDeltaTime")
  public open var limitDeltaTime: Boolean

  @JsName("MaxGPUParticlesSpawnPerFrame")
  public open var maxGpuParticlesSpawnPerFrame: Number

  @JsName("GraphSource")
  public open var graphSource: NiagaraScriptSourceBase

  @JsName("ThumbnailImage")
  public open var thumbnailImage: Texture2d

  @JsName("ThumbnailImageOutOfDate")
  public open var thumbnailImageOutOfDate: Boolean

  @JsName("bExposeToLibrary")
  public open var exposeToLibrary: Boolean

  @JsName("LibraryVisibility")
  public open var libraryVisibility: String

  @JsName("bIsTemplateAsset")
  public open var isTemplateAsset: Boolean

  @JsName("TemplateSpecification")
  public open var templateSpecification: String

  @JsName("TemplateAssetDescription")
  public open var templateAssetDescription: String

  @JsName("Category")
  public open var category: String

  @JsName("ScratchPadScripts")
  public open var scratchPadScripts: Array<NiagaraScript>

  @JsName("ParentScratchPadScripts")
  public open var parentScratchPadScripts: Array<NiagaraScript>

  @JsName("RendererBindings")
  public open var rendererBindings: NiagaraParameterStore

  @JsName("ChangeId")
  public open var changeId: Guid

  @JsName("EditorData")
  public open var editorData: NiagaraEditorDataBase

  @JsName("EditorParameters")
  public open var editorParameters: NiagaraEditorParametersAdapterBase

  @JsName("UniqueEmitterName")
  public open var uniqueEmitterName: String

  @JsName("RendererProperties")
  public open var rendererProperties: Array<NiagaraRendererProperties>

  @JsName("EventHandlerScriptProps")
  public open var eventHandlerScriptProps: Array<NiagaraEventScriptProperties>

  @JsName("SimulationStages")
  public open var simulationStages: Array<NiagaraSimulationStageBase>

  @JsName("GPUComputeScript")
  public open var gpuComputeScript: NiagaraScript

  @JsName("SharedEventGeneratorIds")
  public open var sharedEventGeneratorIds: Array<String>

  @JsName("Parent")
  public open var parent: NiagaraEmitter

  @JsName("ParentAtLastMerge")
  public open var parentAtLastMerge: NiagaraEmitter

  @JsName("ParameterDefinitionsSubscriptions")
  public open var parameterDefinitionsSubscriptions: Array<ParameterDefinitionsSubscription>

  @JsName("MessageKeyToMessageMap")
  public open var messageKeyToMessageMap: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraEmitter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraEmitter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraEmitter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraEmitter

    @JsName("C")
    public fun copy(other: UObject): NiagaraEmitter

    @JsName("C")
    public fun copy(other: Any): NiagaraEmitter
  }
}

public open external class NiagaraEmitterHandle {
  public open var ID: Guid

  @JsName("IdName")
  public open var idName: String

  @JsName("bIsEnabled")
  public open var isEnabled: Boolean

  @JsName("Name")
  public open var name: String

  @JsName("Source")
  public open var source: NiagaraEmitter

  @JsName("LastMergedSource")
  public open var lastMergedSource: NiagaraEmitter

  @JsName("bIsolated")
  public open var isolated: Boolean

  @JsName("Instance")
  public open var instance: NiagaraEmitter

  public open fun clone(): NiagaraEmitterHandle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraEmitterHandle

    @JsName("C")
    public fun copy(other: Any): NiagaraEmitterHandle
  }
}

public open external class NiagaraSystemCompileRequest {
  @JsName("RootObjects")
  public open var rootObjects: Array<UObject>

  public open fun clone(): NiagaraSystemCompileRequest

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemCompileRequest

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemCompileRequest
  }
}

public open external class NiagaraParameterDataSetBinding {
  @JsName("ParameterOffset")
  public open var parameterOffset: Number

  @JsName("DataSetComponentOffset")
  public open var dataSetComponentOffset: Number

  public open fun clone(): NiagaraParameterDataSetBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraParameterDataSetBinding

    @JsName("C")
    public fun copy(other: Any): NiagaraParameterDataSetBinding
  }
}

public open external class NiagaraParameterDataSetBindingCollection {
  @JsName("FloatOffsets")
  public open var floatOffsets: Array<NiagaraParameterDataSetBinding>

  @JsName("Int32Offsets")
  public open var int32Offsets: Array<NiagaraParameterDataSetBinding>

  public open fun clone(): NiagaraParameterDataSetBindingCollection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraParameterDataSetBindingCollection

    @JsName("C")
    public fun copy(other: Any): NiagaraParameterDataSetBindingCollection
  }
}

public open external class NiagaraSystemCompiledData {
  @JsName("InstanceParamStore")
  public open var instanceParamStore: NiagaraParameterStore

  @JsName("DataSetCompiledData")
  public open var dataSetCompiledData: NiagaraDataSetCompiledData

  @JsName("SpawnInstanceParamsDataSetCompiledData")
  public open var spawnInstanceParamsDataSetCompiledData: NiagaraDataSetCompiledData

  @JsName("UpdateInstanceParamsDataSetCompiledData")
  public open var updateInstanceParamsDataSetCompiledData: NiagaraDataSetCompiledData

  @JsName("SpawnInstanceGlobalBinding")
  public open var spawnInstanceGlobalBinding: NiagaraParameterDataSetBindingCollection

  @JsName("SpawnInstanceSystemBinding")
  public open var spawnInstanceSystemBinding: NiagaraParameterDataSetBindingCollection

  @JsName("SpawnInstanceOwnerBinding")
  public open var spawnInstanceOwnerBinding: NiagaraParameterDataSetBindingCollection

  @JsName("SpawnInstanceEmitterBindings")
  public open var spawnInstanceEmitterBindings: Array<NiagaraParameterDataSetBindingCollection>

  @JsName("UpdateInstanceGlobalBinding")
  public open var updateInstanceGlobalBinding: NiagaraParameterDataSetBindingCollection

  @JsName("UpdateInstanceSystemBinding")
  public open var updateInstanceSystemBinding: NiagaraParameterDataSetBindingCollection

  @JsName("UpdateInstanceOwnerBinding")
  public open var updateInstanceOwnerBinding: NiagaraParameterDataSetBindingCollection

  @JsName("UpdateInstanceEmitterBindings")
  public open var updateInstanceEmitterBindings: Array<NiagaraParameterDataSetBindingCollection>

  public open fun clone(): NiagaraSystemCompiledData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraSystemCompiledData

    @JsName("C")
    public fun copy(other: Any): NiagaraSystemCompiledData
  }
}

public open external class NiagaraBakerTextureSource {
  @JsName("SourceName")
  public open var sourceName: String

  public open fun clone(): NiagaraBakerTextureSource

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraBakerTextureSource

    @JsName("C")
    public fun copy(other: Any): NiagaraBakerTextureSource
  }
}

public open external class NiagaraBakerTextureSettings {
  @JsName("SourceBinding")
  public open var sourceBinding: NiagaraBakerTextureSource

  @JsName("bUseFrameSize")
  public open var useFrameSize: Boolean

  @JsName("FrameSize")
  public open var frameSize: IntPoint

  @JsName("TextureSize")
  public open var textureSize: IntPoint

  @JsName("GeneratedTexture")
  public open var generatedTexture: Texture2d

  public open fun clone(): NiagaraBakerTextureSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NiagaraBakerTextureSettings

    @JsName("C")
    public fun copy(other: Any): NiagaraBakerTextureSettings
  }
}

@JsName("ENiagaraBakerViewMode")
public external object NiagaraBakerViewMode {
  public var Perspective: String

  public var OrthoFront: String

  public var OrthoBack: String

  public var OrthoLeft: String

  public var OrthoRight: String

  public var OrthoTop: String

  public var OrthoBottom: String

  public var Num: String

  @JsName("ENiagaraBakerViewMode_MAX")
  public var Max: String
}

public open external class NiagaraBakerSettings(
  outer: UObject,
) : UObject {
  @JsName("StartSeconds")
  public open var startSeconds: Number

  @JsName("DurationSeconds")
  public open var durationSeconds: Number

  @JsName("FramesPerSecond")
  public open var framesPerSecond: Number

  @JsName("bPreviewLooping")
  public open var previewLooping: Boolean

  @JsName("FramesPerDimension")
  public open var framesPerDimension: IntPoint

  @JsName("OutputTextures")
  public open var outputTextures: Array<NiagaraBakerTextureSettings>

  @JsName("CameraViewportMode")
  public open var cameraViewportMode: String

  @JsName("CameraViewportLocation")
  public open var cameraViewportLocation: Vector

  @JsName("CameraViewportRotation")
  public open var cameraViewportRotation: Rotator

  @JsName("CameraOrbitDistance")
  public open var cameraOrbitDistance: Number

  @JsName("CameraFOV")
  public open var cameraFov: Number

  @JsName("CameraOrthoWidth")
  public open var cameraOrthoWidth: Number

  @JsName("bUseCameraAspectRatio")
  public open var useCameraAspectRatio: Boolean

  @JsName("CameraAspectRatio")
  public open var cameraAspectRatio: Number

  @JsName("bRenderComponentOnly")
  public open var renderComponentOnly: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraBakerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraBakerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraBakerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraBakerSettings

    @JsName("C")
    public fun copy(other: UObject): NiagaraBakerSettings

    @JsName("C")
    public fun copy(other: Any): NiagaraBakerSettings
  }
}

@JsName("ENCPoolMethod")
public external object NCPoolMethod {
  public var None: String

  public var AutoRelease: String

  public var ManualRelease: String

  @JsName("ManualRelease_OnComplete")
  public var ManualReleaseOnComplete: String

  public var FreeInPool: String

  @JsName("ENCPoolMethod_MAX")
  public var Max: String
}

public open external class NiagaraSystem(
  outer: UObject,
) : FxSystemAsset {
  @JsName("ThumbnailImage")
  public open var thumbnailImage: Texture2d

  @JsName("ThumbnailImageOutOfDate")
  public open var thumbnailImageOutOfDate: Boolean

  @JsName("bExposeToLibrary")
  public open var exposeToLibrary: Boolean

  @JsName("LibraryVisibility")
  public open var libraryVisibility: String

  @JsName("bIsTemplateAsset")
  public open var isTemplateAsset: Boolean

  @JsName("TemplateSpecification")
  public open var templateSpecification: String

  @JsName("TemplateAssetDescription")
  public open var templateAssetDescription: String

  @JsName("Category")
  public open var category: String

  @JsName("ScratchPadScripts")
  public open var scratchPadScripts: Array<NiagaraScript>

  @JsName("EditorOnlyAddedParameters")
  public open var editorOnlyAddedParameters: NiagaraParameterStore

  @JsName("UpdateContext")
  public open var updateContext: NiagaraSystemUpdateContext

  @JsName("bCompileForEdit")
  public open var compileForEdit: Boolean

  @JsName("bBakeOutRapidIteration")
  public open var bakeOutRapidIteration: Boolean

  @JsName("bBakeOutRapidIterationOnCook")
  public open var bakeOutRapidIterationOnCook: Boolean

  @JsName("bCompressAttributes")
  public open var compressAttributes: Boolean

  @JsName("bTrimAttributes")
  public open var trimAttributes: Boolean

  @JsName("bTrimAttributesOnCook")
  public open var trimAttributesOnCook: Boolean

  @JsName("bIgnoreParticleReadsForAttributeTrim")
  public open var ignoreParticleReadsForAttributeTrim: Boolean

  @JsName("bDisableDebugSwitches")
  public open var disableDebugSwitches: Boolean

  @JsName("bDisableDebugSwitchesOnCook")
  public open var disableDebugSwitchesOnCook: Boolean

  @JsName("ParameterDefinitionsSubscriptions")
  public open var parameterDefinitionsSubscriptions: Array<ParameterDefinitionsSubscription>

  @JsName("bSupportLargeWorldCoordinates")
  public open var supportLargeWorldCoordinates: Boolean

  @JsName("bOverrideCastShadow")
  public open var overrideCastShadow: Boolean

  @JsName("bOverrideReceivesDecals")
  public open var overrideReceivesDecals: Boolean

  @JsName("bOverrideRenderCustomDepth")
  public open var overrideRenderCustomDepth: Boolean

  @JsName("bOverrideCustomDepthStencilValue")
  public open var overrideCustomDepthStencilValue: Boolean

  @JsName("bOverrideCustomDepthStencilWriteMask")
  public open var overrideCustomDepthStencilWriteMask: Boolean

  @JsName("bCastShadow")
  public open var castShadow: Boolean

  @JsName("bReceivesDecals")
  public open var receivesDecals: Boolean

  @JsName("bRenderCustomDepth")
  public open var renderCustomDepth: Boolean

  @JsName("CustomDepthStencilWriteMask")
  public open var customDepthStencilWriteMask: String

  @JsName("CustomDepthStencilValue")
  public open var customDepthStencilValue: Number

  @JsName("bDumpDebugSystemInfo")
  public open var dumpDebugSystemInfo: Boolean

  @JsName("bDumpDebugEmitterInfo")
  public open var dumpDebugEmitterInfo: Boolean

  @JsName("bRequireCurrentFrameData")
  public open var requireCurrentFrameData: Boolean

  @JsName("bFixedBounds")
  public open var isFixedBounds: Boolean

  @JsName("EffectType")
  public open var effectType: NiagaraEffectType

  @JsName("bOverrideScalabilitySettings")
  public open var overrideScalabilitySettings: Boolean

  @JsName("bOverrideAllowCullingForLocalPlayers")
  public open var overrideAllowCullingForLocalPlayers: Boolean

  @JsName("bAllowCullingForLocalPlayersOverride")
  public open var allowCullingForLocalPlayersOverride: Boolean

  @JsName("ScalabilityOverrides")
  public open var scalabilityOverrides: Array<NiagaraSystemScalabilityOverride>

  @JsName("SystemScalabilityOverrides")
  public open var systemScalabilityOverrides: NiagaraSystemScalabilityOverrides

  @JsName("EmitterHandles")
  public open var emitterHandles: Array<NiagaraEmitterHandle>

  @JsName("ParameterCollectionOverrides")
  public open var parameterCollectionOverrides: Array<NiagaraParameterCollectionInstance>

  @JsName("ActiveCompilations")
  public open var activeCompilations: Array<NiagaraSystemCompileRequest>

  @JsName("SystemSpawnScript")
  public open var systemSpawnScript: NiagaraScript

  @JsName("SystemUpdateScript")
  public open var systemUpdateScript: NiagaraScript

  @JsName("SystemCompiledData")
  public open var systemCompiledData: NiagaraSystemCompiledData

  @JsName("ExposedParameters")
  public open var exposedParameters: NiagaraUserRedirectionParameterStore

  @JsName("EditorData")
  public open var editorData: NiagaraEditorDataBase

  @JsName("EditorParameters")
  public open var editorParameters: NiagaraEditorParametersAdapterBase

  @JsName("FixedBounds")
  public open var fixedBounds: Box

  @JsName("bAutoDeactivate")
  public open var autoDeactivate: Boolean

  @JsName("bDeterminism")
  public open var determinism: Boolean

  @JsName("RandomSeed")
  public open var randomSeed: Number

  @JsName("WarmupTime")
  public open var warmupTime: Number

  @JsName("WarmupTickCount")
  public open var warmupTickCount: Number

  @JsName("WarmupTickDelta")
  public open var warmupTickDelta: Number

  @JsName("bFixedTickDelta")
  public open var fixedTickDelta: Boolean

  @JsName("FixedTickDeltaTime")
  public open var fixedTickDeltaTime: Number

  @JsName("BakerSettings")
  public open var bakerSettings: NiagaraBakerSettings

  @JsName("BakerGeneratedSettings")
  public open var bakerGeneratedSettings: NiagaraBakerSettings

  @JsName("bHasSystemScriptDIsWithPerInstanceData")
  public open var hasSystemScriptDIsWithPerInstanceData: Boolean

  @JsName("bNeedsGPUContextInitForDataInterfaces")
  public open var needsGpuContextInitForDataInterfaces: Boolean

  @JsName("UserDINamesReadInSystemScripts")
  public open var userDiNamesReadInSystemScripts: Array<String>

  @JsName("MessageKeyToMessageMap")
  public open var messageKeyToMessageMap: Any

  @JsName("SpawnSystemAttached")
  public open fun spawnSystemAttached(
    attachToComponent: SceneComponent,
    attachPointName: String,
    location: Vector,
    rotation: Rotator,
    locationType: String,
    autoDestroy: Boolean,
    autoActivate: Boolean,
    poolingMethod: String,
    preCullCheck: Boolean,
  ): NiagaraComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NiagaraSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NiagaraSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NiagaraSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NiagaraSystem

    @JsName("C")
    public fun copy(other: UObject): NiagaraSystem

    @JsName("C")
    public fun copy(other: Any): NiagaraSystem

    @JsName("SpawnSystemAttached")
    public fun spawnSystemAttached(
      systemTemplate: NiagaraSystem,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      autoDestroy: Boolean,
      autoActivate: Boolean,
      poolingMethod: String,
      preCullCheck: Boolean,
    ): NiagaraComponent
  }
}

public open external class DebugFloatHistory {
  @JsName("Samples")
  public open var samples: Array<Number>

  @JsName("MaxSamples")
  public open var maxSamples: Number

  @JsName("MinValue")
  public open var minValue: Number

  @JsName("MaxValue")
  public open var maxValue: Number

  @JsName("bAutoAdjustMinMax")
  public open var autoAdjustMinMax: Boolean

  public open fun clone(): DebugFloatHistory

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DebugFloatHistory

    @JsName("C")
    public fun copy(other: Any): DebugFloatHistory

    @JsName("AddFloatHistorySample")
    public fun addFloatHistorySample(value: Number, floatHistory: DebugFloatHistory):
        DebugFloatHistory
  }
}

@JsName("T$292")
public external interface Object292 {
  @JsName("Handle")
  public var handle: TimerHandle

  @JsName("$")
  public var value: TimerHandle
}

public open external class TimerHandle {
  @JsName("Handle")
  public open var handle: Any

  public open fun clone(): TimerHandle

  @JsName("K2_InvalidateTimerHandle")
  public open fun k2InvalidateTimerHandle(): Object292

  @JsName("K2_IsValidTimerHandle")
  public open fun k2IsValidTimerHandle(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TimerHandle

    @JsName("C")
    public fun copy(other: Any): TimerHandle

    @JsName("K2_InvalidateTimerHandle")
    public fun k2InvalidateTimerHandle(handle: TimerHandle): Object292

    @JsName("K2_IsValidTimerHandle")
    public fun k2IsValidTimerHandle(handle: TimerHandle): Boolean

    @JsName("K2_SetTimerDelegate")
    public fun k2SetTimerDelegate(
      delegate: UnrealEngineDelegate<() -> Unit>,
      time: Number,
      looping: Boolean,
      initialStartDelay: Number,
      initialStartDelayVariance: Number,
    ): TimerHandle

    @JsName("K2_SetTimerForNextTickDelegate")
    public fun k2SetTimerForNextTickDelegate(delegate: UnrealEngineDelegate<() -> Unit>):
        TimerHandle
  }
}

@JsName("EQuitPreference")
public external object QuitPreference {
  public var Quit: String

  public var Background: String

  @JsName("EQuitPreference_MAX")
  public var Max: String
}

@JsName("ETextureRenderTargetFormat")
public external object TextureRenderTargetFormat {
  @JsName("RTF_R8")
  public var R8: String

  @JsName("RTF_RG8")
  public var Rg8: String

  @JsName("RTF_RGBA8")
  public var Rgba8: String

  @JsName("RTF_RGBA8_SRGB")
  public var Rgba8srgb: String

  @JsName("RTF_R16f")
  public var R16f: String

  @JsName("RTF_RG16f")
  public var Rg16f: String

  @JsName("RTF_RGBA16f")
  public var Rgba16f: String

  @JsName("RTF_R32f")
  public var R32f: String

  @JsName("RTF_RG32f")
  public var Rg32f: String

  @JsName("RTF_RGBA32f")
  public var Rgba32f: String

  @JsName("RTF_RGB10A2")
  public var Rgb10a2: String

  @JsName("RTF_MAX")
  public var Max: String
}

@JsName("EPixelFormat")
public external object PixelFormat {
  @JsName("PF_Unknown")
  public var Unknown: String

  @JsName("PF_A32B32G32R32F")
  public var A32b32g32r32f: String

  @JsName("PF_B8G8R8A8")
  public var B8g8r8a8: String

  @JsName("PF_G8")
  public var G8: String

  @JsName("PF_G16")
  public var G16: String

  @JsName("PF_DXT1")
  public var Dxt1: String

  @JsName("PF_DXT3")
  public var Dxt3: String

  @JsName("PF_DXT5")
  public var Dxt5: String

  @JsName("PF_UYVY")
  public var UYVY: String

  @JsName("PF_FloatRGB")
  public var FloatRgb: String

  @JsName("PF_FloatRGBA")
  public var FloatRgba: String

  @JsName("PF_DepthStencil")
  public var DepthStencil: String

  @JsName("PF_ShadowDepth")
  public var ShadowDepth: String

  @JsName("PF_R32_FLOAT")
  public var R32float: String

  @JsName("PF_G16R16")
  public var G16r16: String

  @JsName("PF_G16R16F")
  public var G16r16f: String

  @JsName("PF_G16R16F_FILTER")
  public var G16r16ffilter: String

  @JsName("PF_G32R32F")
  public var G32r32f: String

  @JsName("PF_A2B10G10R10")
  public var A2b10g10r10: String

  @JsName("PF_A16B16G16R16")
  public var A16b16g16r16: String

  @JsName("PF_D24")
  public var D24: String

  @JsName("PF_R16F")
  public var R16f: String

  @JsName("PF_R16F_FILTER")
  public var R16ffilter: String

  @JsName("PF_BC5")
  public var Bc5: String

  @JsName("PF_V8U8")
  public var V8u8: String

  @JsName("PF_A1")
  public var A1: String

  @JsName("PF_FloatR11G11B10")
  public var FloatR11g11b10: String

  @JsName("PF_A8")
  public var A8: String

  @JsName("PF_R32_UINT")
  public var R32uint: String

  @JsName("PF_R32_SINT")
  public var R32sint: String

  @JsName("PF_PVRTC2")
  public var Pvrtc2: String

  @JsName("PF_PVRTC4")
  public var Pvrtc4: String

  @JsName("PF_R16_UINT")
  public var R16uint: String

  @JsName("PF_R16_SINT")
  public var R16sint: String

  @JsName("PF_R16G16B16A16_UINT")
  public var R16g16b16a16uint: String

  @JsName("PF_R16G16B16A16_SINT")
  public var R16g16b16a16sint: String

  @JsName("PF_R5G6B5_UNORM")
  public var R5g6b5unorm: String

  @JsName("PF_R8G8B8A8")
  public var R8g8b8a8: String

  @JsName("PF_A8R8G8B8")
  public var A8r8g8b8: String

  @JsName("PF_BC4")
  public var Bc4: String

  @JsName("PF_R8G8")
  public var R8g8: String

  @JsName("PF_ATC_RGB")
  public var Atcrgb: String

  @JsName("PF_ATC_RGBA_E")
  public var Atcrgbae: String

  @JsName("PF_ATC_RGBA_I")
  public var Atcrgbai: String

  @JsName("PF_X24_G8")
  public var X24g8: String

  @JsName("PF_ETC1")
  public var Etc1: String

  @JsName("PF_ETC2_RGB")
  public var Etc2rgb: String

  @JsName("PF_ETC2_RGBA")
  public var Etc2rgba: String

  @JsName("PF_R32G32B32A32_UINT")
  public var R32g32b32a32uint: String

  @JsName("PF_R16G16_UINT")
  public var R16g16uint: String

  @JsName("PF_ASTC_4x4")
  public var Astc4x4: String

  @JsName("PF_ASTC_6x6")
  public var Astc6x6: String

  @JsName("PF_ASTC_8x8")
  public var Astc8x8: String

  @JsName("PF_ASTC_10x10")
  public var Astc10x10: String

  @JsName("PF_ASTC_12x12")
  public var Astc12x12: String

  @JsName("PF_BC6H")
  public var Bc6h: String

  @JsName("PF_BC7")
  public var Bc7: String

  @JsName("PF_R8_UINT")
  public var R8uint: String

  @JsName("PF_L8")
  public var L8: String

  @JsName("PF_XGXR8")
  public var Xgxr8: String

  @JsName("PF_R8G8B8A8_UINT")
  public var R8g8b8a8uint: String

  @JsName("PF_R8G8B8A8_SNORM")
  public var R8g8b8a8snorm: String

  @JsName("PF_R16G16B16A16_UNORM")
  public var R16g16b16a16unorm: String

  @JsName("PF_R16G16B16A16_SNORM")
  public var R16g16b16a16snorm: String

  @JsName("PF_PLATFORM_HDR_0")
  public var Platformhdr0: String

  @JsName("PF_PLATFORM_HDR_1")
  public var Platformhdr1: String

  @JsName("PF_PLATFORM_HDR_2")
  public var Platformhdr2: String

  @JsName("PF_NV12")
  public var Nv12: String

  @JsName("PF_R32G32_UINT")
  public var R32g32uint: String

  @JsName("PF_ETC2_R11_EAC")
  public var Etc2r11eac: String

  @JsName("PF_ETC2_RG11_EAC")
  public var Etc2rg11eac: String

  @JsName("PF_R8")
  public var R8: String

  @JsName("PF_B5G5R5A1_UNORM")
  public var B5g5r5a1unorm: String

  @JsName("PF_G16R16_SNORM")
  public var G16r16snorm: String

  @JsName("PF_R8G8_UINT")
  public var R8g8uint: String

  @JsName("PF_R32G32B32_UINT")
  public var R32g32b32uint: String

  @JsName("PF_R32G32B32_SINT")
  public var R32g32b32sint: String

  @JsName("PF_R32G32B32F")
  public var R32g32b32f: String

  @JsName("PF_R8_SINT")
  public var R8sint: String

  @JsName("PF_R64_UINT")
  public var R64uint: String

  @JsName("PF_MAX")
  public var Max: String
}

@JsName("TextureRenderTarget2D")
public open external class TextureRenderTarget2d(
  outer: UObject,
) : TextureRenderTarget {
  @JsName("SizeX")
  public open var sizeX: Number

  @JsName("SizeY")
  public open var sizeY: Number

  @JsName("ClearColor")
  public open var clearColor: LinearColor

  @JsName("AddressX")
  public open var addressX: String

  @JsName("AddressY")
  public open var addressY: String

  @JsName("bForceLinearGamma")
  public open var forceLinearGamma: Boolean

  @JsName("bHDR")
  public open var HDR: Boolean

  @JsName("bGPUSharedFlag")
  public open var gpuSharedFlag: Boolean

  @JsName("RenderTargetFormat")
  public open var renderTargetFormat: String

  @JsName("bAutoGenerateMips")
  public open var autoGenerateMips: Boolean

  @JsName("MipsSamplerFilter")
  public open var mipsSamplerFilter: String

  @JsName("MipsAddressU")
  public open var mipsAddressU: String

  @JsName("MipsAddressV")
  public open var mipsAddressV: String

  @JsName("OverrideFormat")
  public open var overrideFormat: String

  @JsName("ReleaseRenderTarget2D")
  public open fun releaseRenderTarget2d(): Unit

  @JsName("RenderTargetCreateStaticTexture2DEditorOnly")
  public open fun renderTargetCreateStaticTexture2dEditorOnly(
    name: String,
    compressionSettings: String,
    mipSettings: String,
  ): Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureRenderTarget2d

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureRenderTarget2d

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureRenderTarget2d

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureRenderTarget2d

    @JsName("C")
    public fun copy(other: UObject): TextureRenderTarget2d

    @JsName("C")
    public fun copy(other: Any): TextureRenderTarget2d

    @JsName("ReleaseRenderTarget2D")
    public fun releaseRenderTarget2d(textureRenderTarget: TextureRenderTarget2d): Unit

    @JsName("RenderTargetCreateStaticTexture2DEditorOnly")
    public fun renderTargetCreateStaticTexture2dEditorOnly(
      renderTarget: TextureRenderTarget2d,
      name: String,
      compressionSettings: String,
      mipSettings: String,
    ): Texture2d
  }
}

public open external class DrawToRenderTargetContext {
  @JsName("RenderTarget")
  public open var renderTarget: TextureRenderTarget2d

  public open fun clone(): DrawToRenderTargetContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DrawToRenderTargetContext

    @JsName("C")
    public fun copy(other: Any): DrawToRenderTargetContext
  }
}

@JsName("TextureRenderTarget2DArray")
public open external class TextureRenderTarget2dArray(
  outer: UObject,
) : TextureRenderTarget {
  @JsName("SizeX")
  public open var sizeX: Number

  @JsName("SizeY")
  public open var sizeY: Number

  @JsName("Slices")
  public open var slices: Number

  @JsName("ClearColor")
  public open var clearColor: LinearColor

  @JsName("OverrideFormat")
  public open var overrideFormat: String

  @JsName("bHDR")
  public open var HDR: Boolean

  @JsName("bForceLinearGamma")
  public open var forceLinearGamma: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureRenderTarget2dArray

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureRenderTarget2dArray

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureRenderTarget2dArray

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureRenderTarget2dArray

    @JsName("C")
    public fun copy(other: UObject): TextureRenderTarget2dArray

    @JsName("C")
    public fun copy(other: Any): TextureRenderTarget2dArray
  }
}

public open external class TextureRenderTargetVolume(
  outer: UObject,
) : TextureRenderTarget {
  @JsName("SizeX")
  public open var sizeX: Number

  @JsName("SizeY")
  public open var sizeY: Number

  @JsName("SizeZ")
  public open var sizeZ: Number

  @JsName("ClearColor")
  public open var clearColor: LinearColor

  @JsName("OverrideFormat")
  public open var overrideFormat: String

  @JsName("bHDR")
  public open var HDR: Boolean

  @JsName("bForceLinearGamma")
  public open var forceLinearGamma: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureRenderTargetVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureRenderTargetVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureRenderTargetVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureRenderTargetVolume

    @JsName("C")
    public fun copy(other: UObject): TextureRenderTargetVolume

    @JsName("C")
    public fun copy(other: Any): TextureRenderTargetVolume
  }
}

@JsName("EMIDCreationFlags")
public external object MIDCreationFlags {
  public var None: String

  public var Transient: String

  @JsName("EMIDCreationFlags_MAX")
  public var Max: String
}

@JsName("ESpawnActorCollisionHandlingMethod")
public external object SpawnActorCollisionHandlingMethod {
  public var Undefined: String

  public var AlwaysSpawn: String

  public var AdjustIfPossibleButAlwaysSpawn: String

  public var AdjustIfPossibleButDontSpawnIfColliding: String

  public var DontSpawnIfColliding: String

  @JsName("ESpawnActorCollisionHandlingMethod_MAX")
  public var Max: String
}

public open external class PredictProjectilePathParams {
  @JsName("StartLocation")
  public open var startLocation: Vector

  @JsName("LaunchVelocity")
  public open var launchVelocity: Vector

  @JsName("bTraceWithCollision")
  public open var traceWithCollision: Boolean

  @JsName("ProjectileRadius")
  public open var projectileRadius: Number

  @JsName("MaxSimTime")
  public open var maxSimTime: Number

  @JsName("bTraceWithChannel")
  public open var traceWithChannel: Boolean

  @JsName("TraceChannel")
  public open var traceChannel: String

  @JsName("ObjectTypes")
  public open var objectTypes: Array<String>

  @JsName("ActorsToIgnore")
  public open var actorsToIgnore: Array<Actor>

  @JsName("SimFrequency")
  public open var simFrequency: Number

  @JsName("OverrideGravityZ")
  public open var overrideGravityZ: Number

  @JsName("DrawDebugType")
  public open var drawDebugType: String

  @JsName("DrawDebugTime")
  public open var drawDebugTime: Number

  @JsName("bTraceComplex")
  public open var traceComplex: Boolean

  public open fun clone(): PredictProjectilePathParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PredictProjectilePathParams

    @JsName("C")
    public fun copy(other: Any): PredictProjectilePathParams
  }
}

public open external class PredictProjectilePathPointData {
  @JsName("Location")
  public open var location: Vector

  @JsName("Velocity")
  public open var velocity: Vector

  @JsName("Time")
  public open var time: Number

  public open fun clone(): PredictProjectilePathPointData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PredictProjectilePathPointData

    @JsName("C")
    public fun copy(other: Any): PredictProjectilePathPointData
  }
}

public open external class PredictProjectilePathResult {
  @JsName("PathData")
  public open var pathData: Array<PredictProjectilePathPointData>

  @JsName("LastTraceDestination")
  public open var lastTraceDestination: PredictProjectilePathPointData

  @JsName("HitResult")
  public open var hitResult: HitResult

  public open fun clone(): PredictProjectilePathResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PredictProjectilePathResult

    @JsName("C")
    public fun copy(other: Any): PredictProjectilePathResult
  }
}

@JsName("ESuggestProjVelocityTraceOption")
public external object SuggestProjVelocityTraceOption {
  public var DoNotTrace: String

  public var TraceFullPath: String

  public var OnlyTraceWhileAscending: String

  @JsName("ESuggestProjVelocityTraceOption_MAX")
  public var Max: String
}

public open external class Interface(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Interface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Interface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Interface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Interface

    @JsName("C")
    public fun copy(other: UObject): Interface

    @JsName("C")
    public fun copy(other: Any): Interface
  }
}

@JsName("EMouseCaptureMode")
public external object MouseCaptureMode {
  public var NoCapture: String

  public var CapturePermanently: String

  @JsName("CapturePermanently_IncludingInitialMouseDown")
  public var CapturePermanentlyIncludingInitialMouseDown: String

  public var CaptureDuringMouseDown: String

  public var CaptureDuringRightMouseDown: String

  @JsName("EMouseCaptureMode_MAX")
  public var Max: String
}

@JsName("EGrammaticalGender")
public external object GrammaticalGender {
  public var Neuter: String

  public var Masculine: String

  public var Feminine: String

  public var Mixed: String

  @JsName("EGrammaticalGender_MAX")
  public var Max: String
}

@JsName("EGrammaticalNumber")
public external object GrammaticalNumber {
  public var Singular: String

  public var Plural: String

  @JsName("EGrammaticalNumber_MAX")
  public var Max: String
}

public open external class DialogueVoice(
  outer: UObject,
) : UObject {
  @JsName("Gender")
  public open var gender: String

  @JsName("Plurality")
  public open var plurality: String

  @JsName("LocalizationGUID")
  public open var localizationGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DialogueVoice

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DialogueVoice

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DialogueVoice

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DialogueVoice

    @JsName("C")
    public fun copy(other: UObject): DialogueVoice

    @JsName("C")
    public fun copy(other: Any): DialogueVoice
  }
}

public open external class DialogueContext {
  @JsName("Speaker")
  public open var speaker: DialogueVoice

  @JsName("Targets")
  public open var targets: Array<DialogueVoice>

  public open fun clone(): DialogueContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DialogueContext

    @JsName("C")
    public fun copy(other: Any): DialogueContext
  }
}

public open external class DialogueSoundWaveProxy(
  outer: UObject,
) : SoundBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DialogueSoundWaveProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DialogueSoundWaveProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DialogueSoundWaveProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DialogueSoundWaveProxy

    @JsName("C")
    public fun copy(other: UObject): DialogueSoundWaveProxy

    @JsName("C")
    public fun copy(other: Any): DialogueSoundWaveProxy
  }
}

public open external class DialogueContextMapping {
  @JsName("Context")
  public open var context: DialogueContext

  @JsName("SoundWave")
  public open var soundWave: SoundWave

  @JsName("LocalizationKeyFormat")
  public open var localizationKeyFormat: String

  @JsName("Proxy")
  public open var proxy: DialogueSoundWaveProxy

  public open fun clone(): DialogueContextMapping

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DialogueContextMapping

    @JsName("C")
    public fun copy(other: Any): DialogueContextMapping
  }
}

public open external class DialogueWave(
  outer: UObject,
) : UObject {
  @JsName("bMature")
  public open var mature: Boolean

  @JsName("bOverride_SubtitleOverride")
  public open var overrideSubtitleOverride: Boolean

  @JsName("SpokenText")
  public open var spokenText: String

  @JsName("SubtitleOverride")
  public open var subtitleOverride: String

  @JsName("VoiceActorDirection")
  public open var voiceActorDirection: String

  @JsName("ContextMappings")
  public open var contextMappings: Array<DialogueContextMapping>

  @JsName("LocalizationGUID")
  public open var localizationGuid: Guid

  @JsName("SpawnDialogueAttached")
  public open fun spawnDialogueAttached(
    context: DialogueContext,
    attachToComponent: SceneComponent,
    attachPointName: String,
    location: Vector,
    rotation: Rotator,
    locationType: String,
    stopWhenAttachedToDestroyed: Boolean,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    attenuationSettings: SoundAttenuation,
    autoDestroy: Boolean,
  ): AudioComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DialogueWave

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DialogueWave

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DialogueWave

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DialogueWave

    @JsName("C")
    public fun copy(other: UObject): DialogueWave

    @JsName("C")
    public fun copy(other: Any): DialogueWave

    @JsName("SpawnDialogueAttached")
    public fun spawnDialogueAttached(
      dialogue: DialogueWave,
      context: DialogueContext,
      attachToComponent: SceneComponent,
      attachPointName: String,
      location: Vector,
      rotation: Rotator,
      locationType: String,
      stopWhenAttachedToDestroyed: Boolean,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      autoDestroy: Boolean,
    ): AudioComponent
  }
}

public open external class InitialActiveSoundParams(
  outer: UObject,
) : UObject {
  @JsName("AudioParams")
  public open var audioParams: Array<AudioParameter>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InitialActiveSoundParams

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InitialActiveSoundParams

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InitialActiveSoundParams

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InitialActiveSoundParams

    @JsName("C")
    public fun copy(other: UObject): InitialActiveSoundParams

    @JsName("C")
    public fun copy(other: Any): InitialActiveSoundParams
  }
}

@JsName("EAudioMixerStreamDataFormatType")
public external object AudioMixerStreamDataFormatType {
  public var Unknown: String

  public var Float: String

  public var Int16: String

  public var Unsupported: String

  @JsName("EAudioMixerStreamDataFormatType_MAX")
  public var Max: String
}

@JsName("EAudioMixerChannelType")
public external object AudioMixerChannelType {
  public var FrontLeft: String

  public var FrontRight: String

  public var FrontCenter: String

  public var LowFrequency: String

  public var BackLeft: String

  public var BackRight: String

  public var FrontLeftOfCenter: String

  public var FrontRightOfCenter: String

  public var BackCenter: String

  public var SideLeft: String

  public var SideRight: String

  public var TopCenter: String

  public var TopFrontLeft: String

  public var TopFrontCenter: String

  public var TopFrontRight: String

  public var TopBackLeft: String

  public var TopBackCenter: String

  public var TopBackRight: String

  public var Unknown: String

  public var ChannelTypeCount: String

  public var DefaultChannel: String

  @JsName("EAudioMixerChannelType_MAX")
  public var Max: String
}

public open external class AudioOutputDeviceInfo {
  @JsName("Name")
  public open var name: String

  @JsName("DeviceID")
  public open var deviceId: String

  @JsName("NumChannels")
  public open var numChannels: Number

  @JsName("SampleRate")
  public open var sampleRate: Number

  @JsName("Format")
  public open var format: String

  @JsName("OutputChannelArray")
  public open var outputChannelArray: Array<String>

  @JsName("bIsSystemDefault")
  public open var isSystemDefault: Boolean

  @JsName("bIsCurrentDevice")
  public open var isCurrentDevice: Boolean

  public open fun clone(): AudioOutputDeviceInfo

  @JsName("Conv_AudioOutputDeviceInfoToString")
  public open fun convertAudioOutputDeviceInfoToString(): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AudioOutputDeviceInfo

    @JsName("C")
    public fun copy(other: Any): AudioOutputDeviceInfo

    @JsName("Conv_AudioOutputDeviceInfoToString")
    public fun convertAudioOutputDeviceInfoToString(info: AudioOutputDeviceInfo): String
  }
}

@JsName("ESwapAudioOutputDeviceResultState")
public external object SwapAudioOutputDeviceResultState {
  public var Failure: String

  public var Success: String

  public var None: String

  @JsName("ESwapAudioOutputDeviceResultState_MAX")
  public var Max: String
}

public open external class SwapAudioOutputResult {
  @JsName("CurrentDeviceId")
  public open var currentDeviceId: String

  @JsName("RequestedDeviceId")
  public open var requestedDeviceId: String

  @JsName("Result")
  public open var result: String

  public open fun clone(): SwapAudioOutputResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SwapAudioOutputResult

    @JsName("C")
    public fun copy(other: Any): SwapAudioOutputResult
  }
}

@JsName("EPathFollowingResult")
public external object PathFollowingResult {
  public var Success: String

  public var Blocked: String

  public var OffPath: String

  public var Aborted: String

  @JsName("Skipped_DEPRECATED")
  public var SkippedDeprecated: String

  public var Invalid: String

  @JsName("EPathFollowingResult_MAX")
  public var Max: String
}

@JsName("AIRequestID")
public open external class AiRequestId {
  @JsName("RequestID")
  public open var requestId: Any

  public open fun clone(): AiRequestId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiRequestId

    @JsName("C")
    public fun copy(other: Any): AiRequestId
  }
}

@JsName("AIAsyncTaskBlueprintProxy")
public open external class AiAsyncTaskBlueprintProxy(
  outer: UObject,
) : UObject {
  @JsName("OnSuccess")
  public open var onSuccess: UnrealEngineMulticastDelegate<(MovementResult: String) -> Unit>

  @JsName("OnFail")
  public open var onFail: UnrealEngineMulticastDelegate<(MovementResult: String) -> Unit>

  @JsName("OnMoveCompleted")
  public open fun onMoveCompleted(requestId: AiRequestId, movementResult: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiAsyncTaskBlueprintProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiAsyncTaskBlueprintProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiAsyncTaskBlueprintProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: UObject): AiAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: Any): AiAsyncTaskBlueprintProxy
  }
}

public open external class BlackboardKeyType(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyType

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyType

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyType

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyType

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyType

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyType
  }
}

public open external class BlackboardKeySelector {
  @JsName("AllowedTypes")
  public open var allowedTypes: Array<BlackboardKeyType>

  @JsName("SelectedKeyName")
  public open var selectedKeyName: String

  @JsName("SelectedKeyType")
  public open var selectedKeyType: UnrealEngineClass

  @JsName("SelectedKeyID")
  public open var selectedKeyId: Number

  @JsName("bNoneIsAllowedValue")
  public open var noneIsAllowedValue: Boolean

  public open fun clone(): BlackboardKeySelector

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlackboardKeySelector

    @JsName("C")
    public fun copy(other: Any): BlackboardKeySelector
  }
}

public open external class BlackboardEntry {
  @JsName("EntryName")
  public open var entryName: String

  @JsName("EntryDescription")
  public open var entryDescription: String

  @JsName("EntryCategory")
  public open var entryCategory: String

  @JsName("KeyType")
  public open var keyType: BlackboardKeyType

  @JsName("bInstanceSynced")
  public open var instanceSynced: Boolean

  public open fun clone(): BlackboardEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlackboardEntry

    @JsName("C")
    public fun copy(other: Any): BlackboardEntry
  }
}

public open external class BlackboardData(
  outer: UObject,
) : DataAsset {
  @JsName("Parent")
  public open var parent: BlackboardData

  @JsName("ParentKeys")
  public open var parentKeys: Array<BlackboardEntry>

  @JsName("Keys")
  public open var keys: Array<BlackboardEntry>

  @JsName("bHasSynchronizedKeys")
  public open var hasSynchronizedKeys: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardData

    @JsName("C")
    public fun copy(other: UObject): BlackboardData

    @JsName("C")
    public fun copy(other: Any): BlackboardData
  }
}

@JsName("T$293")
public external interface Object293 {
  @JsName("ResultRotation")
  public var resultRotation: Rotator

  @JsName("$")
  public var value: Boolean
}

@JsName("T$294")
public external interface Object294 {
  @JsName("ResultLocation")
  public var resultLocation: Vector

  @JsName("$")
  public var value: Boolean
}

public open external class BlackboardComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("BrainComp")
  public open var brainComp: BrainComponent

  @JsName("DefaultBlackboardAsset")
  public open var defaultBlackboardAsset: BlackboardData

  @JsName("BlackboardAsset")
  public open var blackboardAsset: BlackboardData

  @JsName("KeyInstances")
  public open var keyInstances: Array<BlackboardKeyType>

  @JsName("SetValueAsVector")
  public open fun setValueAsVector(keyName: String, vectorValue: Vector): Unit

  @JsName("SetValueAsString")
  public open fun setValueAsString(keyName: String, stringValue: String): Unit

  @JsName("SetValueAsRotator")
  public open fun setValueAsRotator(keyName: String, vectorValue: Rotator): Unit

  @JsName("SetValueAsObject")
  public open fun setValueAsObject(keyName: String, objectValue: UObject): Unit

  @JsName("SetValueAsName")
  public open fun setValueAsName(keyName: String, nameValue: String): Unit

  @JsName("SetValueAsInt")
  public open fun setValueAsInt(keyName: String, intValue: Number): Unit

  @JsName("SetValueAsFloat")
  public open fun setValueAsFloat(keyName: String, floatValue: Number): Unit

  @JsName("SetValueAsEnum")
  public open fun setValueAsEnum(keyName: String, enumValue: Number): Unit

  @JsName("SetValueAsClass")
  public open fun setValueAsClass(keyName: String, classValue: UnrealEngineClass): Unit

  @JsName("SetValueAsBool")
  public open fun setValueAsBool(keyName: String, boolValue: Boolean): Unit

  @JsName("IsVectorValueSet")
  public open fun isVectorValueSet(keyName: String): Boolean

  @JsName("GetValueAsVector")
  public open fun getValueAsVector(keyName: String): Vector

  @JsName("GetValueAsString")
  public open fun getValueAsString(keyName: String): String

  @JsName("GetValueAsRotator")
  public open fun getValueAsRotator(keyName: String): Rotator

  @JsName("GetValueAsObject")
  public open fun getValueAsObject(keyName: String): UObject

  @JsName("GetValueAsName")
  public open fun getValueAsName(keyName: String): String

  @JsName("GetValueAsInt")
  public open fun getValueAsInt(keyName: String): Number

  @JsName("GetValueAsFloat")
  public open fun getValueAsFloat(keyName: String): Number

  @JsName("GetValueAsEnum")
  public open fun getValueAsEnum(keyName: String): Number

  @JsName("GetValueAsClass")
  public open fun getValueAsClass(keyName: String): UnrealEngineClass

  @JsName("GetValueAsBool")
  public open fun getValueAsBool(keyName: String): Boolean

  @JsName("GetRotationFromEntry")
  public open fun getRotationFromEntry(keyName: String, resultRotation: Rotator): Object293

  @JsName("GetLocationFromEntry")
  public open fun getLocationFromEntry(keyName: String, resultLocation: Vector): Object294

  @JsName("ClearValue")
  public open fun clearValue(keyName: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardComponent

    @JsName("C")
    public fun copy(other: UObject): BlackboardComponent

    @JsName("C")
    public fun copy(other: Any): BlackboardComponent
  }
}

@JsName("EPathFollowingAction")
public external object PathFollowingAction {
  public var Error: String

  public var NoMove: String

  public var DirectMove: String

  public var PartialPath: String

  public var PathToGoal: String

  @JsName("EPathFollowingAction_MAX")
  public var Max: String
}

public open external class PathFollowingComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("MovementComp")
  public open var movementComp: NavMovementComponent

  @JsName("MyNavData")
  public open var myNavData: NavigationData

  @JsName("OnNavDataRegistered")
  public open fun onNavDataRegistered(navData: NavigationData): Unit

  @JsName("OnActorBump")
  public open fun onActorBump(
    selfActor: Actor,
    otherActor: Actor,
    normalImpulse: Vector,
    hit: HitResult,
  ): Unit

  @JsName("GetPathDestination")
  public open fun getPathDestination(): Vector

  @JsName("GetPathActionType")
  public open fun getPathActionType(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PathFollowingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PathFollowingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PathFollowingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PathFollowingComponent

    @JsName("C")
    public fun copy(other: UObject): PathFollowingComponent

    @JsName("C")
    public fun copy(other: Any): PathFollowingComponent
  }
}

@JsName("AISenseConfig")
public open external class AiSenseConfig(
  outer: UObject,
) : UObject {
  @JsName("DebugColor")
  public open var debugColor: Color

  @JsName("MaxAge")
  public open var maxAge: Number

  @JsName("bStartsEnabled")
  public open var startsEnabled: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseConfig

    @JsName("C")
    public fun copy(other: UObject): AiSenseConfig

    @JsName("C")
    public fun copy(other: Any): AiSenseConfig
  }
}

@JsName("EAISenseNotifyType")
public external object AISenseNotifyType {
  @JsName("OnEveryPerception")
  public var EveryPerception: String

  @JsName("OnPerceptionChange")
  public var PerceptionChange: String

  @JsName("EAISenseNotifyType_MAX")
  public var Max: String
}

public open external class BehaviorTreeTemplateInfo {
  @JsName("Asset")
  public open var asset: BehaviorTree

  @JsName("Template")
  public open var template: BtCompositeNode

  public open fun clone(): BehaviorTreeTemplateInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BehaviorTreeTemplateInfo

    @JsName("C")
    public fun copy(other: Any): BehaviorTreeTemplateInfo
  }
}

public open external class BehaviorTreeManager(
  outer: UObject,
) : UObject {
  @JsName("MaxDebuggerSteps")
  public open var maxDebuggerSteps: Number

  @JsName("LoadedTemplates")
  public open var loadedTemplates: Array<BehaviorTreeTemplateInfo>

  @JsName("ActiveComponents")
  public open var activeComponents: Array<BehaviorTreeComponent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BehaviorTreeManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BehaviorTreeManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BehaviorTreeManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BehaviorTreeManager

    @JsName("C")
    public fun copy(other: UObject): BehaviorTreeManager

    @JsName("C")
    public fun copy(other: Any): BehaviorTreeManager
  }
}

public open external class EnvQueryNode(
  outer: UObject,
) : UObject {
  @JsName("VerNum")
  public open var verNum: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryNode

    @JsName("C")
    public fun copy(other: UObject): EnvQueryNode

    @JsName("C")
    public fun copy(other: Any): EnvQueryNode
  }
}

public open external class EnvQueryItemType(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryItemType

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryItemType

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryItemType

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryItemType

    @JsName("C")
    public fun copy(other: UObject): EnvQueryItemType

    @JsName("C")
    public fun copy(other: Any): EnvQueryItemType
  }
}

public open external class EnvQueryGenerator(
  outer: UObject,
) : EnvQueryNode {
  @JsName("OptionName")
  public open var optionName: String

  @JsName("ItemType")
  public open var itemType: UnrealEngineClass

  @JsName("bAutoSortTests")
  public open var autoSortTests: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGenerator

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGenerator

    @JsName("C")
    public fun copy(other: Any): EnvQueryGenerator
  }
}

@JsName("EEnvTestPurpose")
public external object EnvTestPurpose {
  public var Filter: String

  public var Score: String

  public var FilterAndScore: String

  @JsName("EEnvTestPurpose_MAX")
  public var Max: String
}

@JsName("EEnvTestFilterOperator")
public external object EnvTestFilterOperator {
  public var AllPass: String

  public var AnyPass: String

  @JsName("EEnvTestFilterOperator_MAX")
  public var Max: String
}

@JsName("EEnvTestScoreOperator")
public external object EnvTestScoreOperator {
  public var AverageScore: String

  public var MinScore: String

  public var MaxScore: String

  public var Multiply: String

  @JsName("EEnvTestScoreOperator_MAX")
  public var Max: String
}

@JsName("EEnvTestFilterType")
public external object EnvTestFilterType {
  public var Minimum: String

  public var Maximum: String

  public var Range: String

  public var Match: String

  @JsName("EEnvTestFilterType_MAX")
  public var Max: String
}

@JsName("AIDataProvider")
public open external class AiDataProvider(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiDataProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiDataProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiDataProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiDataProvider

    @JsName("C")
    public fun copy(other: UObject): AiDataProvider

    @JsName("C")
    public fun copy(other: Any): AiDataProvider
  }
}

@JsName("AIDataProviderValue")
public open external class AiDataProviderValue {
  @JsName("DataBinding")
  public open var dataBinding: AiDataProvider

  @JsName("DataField")
  public open var dataField: String

  public open fun clone(): AiDataProviderValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiDataProviderValue

    @JsName("C")
    public fun copy(other: Any): AiDataProviderValue
  }
}

@JsName("AIDataProviderTypedValue")
public open external class AiDataProviderTypedValue : AiDataProviderValue {
  @JsName("PropertyType")
  public open var propertyType: UnrealEngineClass

  public override fun clone(): AiDataProviderTypedValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiDataProviderTypedValue

    @JsName("C")
    public fun copy(other: Any): AiDataProviderTypedValue
  }
}

@JsName("AIDataProviderBoolValue")
public open external class AiDataProviderBoolValue : AiDataProviderTypedValue {
  @JsName("DefaultValue")
  public open var defaultValue: Boolean

  public override fun clone(): AiDataProviderBoolValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiDataProviderBoolValue

    @JsName("C")
    public fun copy(other: Any): AiDataProviderBoolValue
  }
}

@JsName("AIDataProviderFloatValue")
public open external class AiDataProviderFloatValue : AiDataProviderTypedValue {
  @JsName("DefaultValue")
  public open var defaultValue: Number

  public override fun clone(): AiDataProviderFloatValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiDataProviderFloatValue

    @JsName("C")
    public fun copy(other: Any): AiDataProviderFloatValue
  }
}

@JsName("EEnvTestScoreEquation")
public external object EnvTestScoreEquation {
  public var Linear: String

  public var Square: String

  public var InverseLinear: String

  public var SquareRoot: String

  public var Constant: String

  @JsName("EEnvTestScoreEquation_MAX")
  public var Max: String
}

@JsName("EEnvQueryTestClamping")
public external object EnvQueryTestClamping {
  public var None: String

  public var SpecifiedValue: String

  public var FilterThreshold: String

  @JsName("EEnvQueryTestClamping_MAX")
  public var Max: String
}

@JsName("EEQSNormalizationType")
public external object EQSNormalizationType {
  public var Absolute: String

  public var RelativeToScores: String

  @JsName("EEQSNormalizationType_MAX")
  public var Max: String
}

public open external class EnvQueryTest(
  outer: UObject,
) : EnvQueryNode {
  @JsName("TestOrder")
  public open var testOrder: Number

  @JsName("TestPurpose")
  public open var testPurpose: String

  @JsName("TestComment")
  public open var testComment: String

  @JsName("MultipleContextFilterOp")
  public open var multipleContextFilterOp: String

  @JsName("MultipleContextScoreOp")
  public open var multipleContextScoreOp: String

  @JsName("FilterType")
  public open var filterType: String

  @JsName("BoolValue")
  public open var boolValue: AiDataProviderBoolValue

  @JsName("FloatValueMin")
  public open var floatValueMin: AiDataProviderFloatValue

  @JsName("FloatValueMax")
  public open var floatValueMax: AiDataProviderFloatValue

  @JsName("ScoringEquation")
  public open var scoringEquation: String

  @JsName("ClampMinType")
  public open var clampMinType: String

  @JsName("ClampMaxType")
  public open var clampMaxType: String

  @JsName("NormalizationType")
  public open var normalizationType: String

  @JsName("ScoreClampMin")
  public open var scoreClampMin: AiDataProviderFloatValue

  @JsName("ScoreClampMax")
  public open var scoreClampMax: AiDataProviderFloatValue

  @JsName("ScoringFactor")
  public open var scoringFactor: AiDataProviderFloatValue

  @JsName("ReferenceValue")
  public open var referenceValue: AiDataProviderFloatValue

  @JsName("bDefineReferenceValue")
  public open var defineReferenceValue: Boolean

  @JsName("bWorkOnFloatValues")
  public open var workOnFloatValues: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTest

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTest

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTest

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTest

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTest

    @JsName("C")
    public fun copy(other: Any): EnvQueryTest
  }
}

public open external class EnvQueryOption(
  outer: UObject,
) : UObject {
  @JsName("Generator")
  public open var generator: EnvQueryGenerator

  @JsName("Tests")
  public open var tests: Array<EnvQueryTest>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryOption

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryOption

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryOption

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryOption

    @JsName("C")
    public fun copy(other: UObject): EnvQueryOption

    @JsName("C")
    public fun copy(other: Any): EnvQueryOption
  }
}

public open external class EnvQuery(
  outer: UObject,
) : DataAsset {
  @JsName("EdGraph")
  public open var edGraph: EdGraph

  @JsName("QueryName")
  public open var queryName: String

  @JsName("Options")
  public open var options: Array<EnvQueryOption>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQuery

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQuery

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQuery

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQuery

    @JsName("C")
    public fun copy(other: UObject): EnvQuery

    @JsName("C")
    public fun copy(other: Any): EnvQuery
  }
}

public open external class EnvQueryInstanceCache {
  @JsName("Template")
  public open var template: EnvQuery

  public open fun clone(): EnvQueryInstanceCache

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EnvQueryInstanceCache

    @JsName("C")
    public fun copy(other: Any): EnvQueryInstanceCache
  }
}

public open external class EnvQueryContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryContext

    @JsName("C")
    public fun copy(other: UObject): EnvQueryContext

    @JsName("C")
    public fun copy(other: Any): EnvQueryContext
  }
}

@JsName("EEnvQueryStatus")
public external object EnvQueryStatus {
  public var Processing: String

  public var Success: String

  public var Failed: String

  public var Aborted: String

  public var OwnerLost: String

  public var MissingParam: String

  @JsName("EEnvQueryStatus_MAX")
  public var Max: String
}

@JsName("T$295")
public external interface Object295 {
  @JsName("ResultLocations")
  public var resultLocations: Array<Vector>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$296")
public external interface Object296 {
  @JsName("ResultActors")
  public var resultActors: Array<Actor>

  @JsName("$")
  public var value: Boolean
}

public open external class EnvQueryInstanceBlueprintWrapper(
  outer: UObject,
) : UObject {
  @JsName("QueryID")
  public open var queryId: Number

  @JsName("ItemType")
  public open var itemType: UnrealEngineClass

  @JsName("OptionIndex")
  public open var optionIndex: Number

  @JsName("OnQueryFinishedEvent")
  public open var onQueryFinishedEvent:
      UnrealEngineMulticastDelegate<(QueryInstance: EnvQueryInstanceBlueprintWrapper,
      QueryStatus: String) -> Unit>

  @JsName("SetNamedParam")
  public open fun setNamedParam(paramName: String, value: Number): Unit

  @JsName("GetResultsAsLocations")
  public open fun getResultsAsLocations(): Array<Vector>

  @JsName("GetResultsAsActors")
  public open fun getResultsAsActors(): Array<Actor>

  @JsName("GetQueryResultsAsLocations")
  public open fun getQueryResultsAsLocations(resultLocations: Array<Vector>): Object295

  @JsName("GetQueryResultsAsActors")
  public open fun getQueryResultsAsActors(resultActors: Array<Actor>): Object296

  @JsName("GetItemScore")
  public open fun getItemScore(itemIndex: Number): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryInstanceBlueprintWrapper

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryInstanceBlueprintWrapper

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryInstanceBlueprintWrapper

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryInstanceBlueprintWrapper

    @JsName("C")
    public fun copy(other: UObject): EnvQueryInstanceBlueprintWrapper

    @JsName("C")
    public fun copy(other: Any): EnvQueryInstanceBlueprintWrapper
  }
}

@JsName("EEnvQueryRunMode")
public external object EnvQueryRunMode {
  public var SingleResult: String

  public var RandomBest5Pct: String

  public var RandomBest25Pct: String

  public var AllMatching: String

  @JsName("EEnvQueryRunMode_MAX")
  public var Max: String
}

public open external class EnvQueryManager(
  outer: UObject,
) : AiSubsystem {
  @JsName("InstanceCache")
  public open var instanceCache: Array<EnvQueryInstanceCache>

  @JsName("LocalContexts")
  public open var localContexts: Array<EnvQueryContext>

  @JsName("GCShieldedWrappers")
  public open var gcShieldedWrappers: Array<EnvQueryInstanceBlueprintWrapper>

  @JsName("MaxAllowedTestingTime")
  public open var maxAllowedTestingTime: Number

  @JsName("bTestQueriesUsingBreadth")
  public open var testQueriesUsingBreadth: Boolean

  @JsName("QueryCountWarningThreshold")
  public open var queryCountWarningThreshold: Number

  @JsName("QueryCountWarningInterval")
  public open var queryCountWarningInterval: Any

  @JsName("ExecutionTimeWarningSeconds")
  public open var executionTimeWarningSeconds: Any

  @JsName("HandlingResultTimeWarningSeconds")
  public open var handlingResultTimeWarningSeconds: Any

  @JsName("GenerationTimeWarningSeconds")
  public open var generationTimeWarningSeconds: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryManager

    @JsName("RunEQSQuery")
    public fun runEqsQuery(
      worldContextObject: UObject,
      queryTemplate: EnvQuery,
      querier: UObject,
      runMode: String,
      wrapperClass: UnrealEngineClass,
    ): EnvQueryInstanceBlueprintWrapper

    @JsName("C")
    public fun copy(other: UObject): EnvQueryManager

    @JsName("C")
    public fun copy(other: Any): EnvQueryManager
  }
}

@JsName("AIHotSpotManager")
public open external class AiHotSpotManager(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiHotSpotManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiHotSpotManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiHotSpotManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiHotSpotManager

    @JsName("C")
    public fun copy(other: UObject): AiHotSpotManager

    @JsName("C")
    public fun copy(other: Any): AiHotSpotManager
  }
}

@JsName("T$297")
public external interface Object297 {
  @JsName("PathPoints")
  public var pathPoints: Array<Vector>

  @JsName("$")
  public var value: Boolean
}

public open external class NavLocalGridManager(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavLocalGridManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavLocalGridManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLocalGridManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLocalGridManager

    @JsName("SetLocalNavigationGridDensity")
    public fun setLocalNavigationGridDensity(worldContextObject: UObject, cellSize: Number): Boolean

    @JsName("RemoveLocalNavigationGrid")
    public fun removeLocalNavigationGrid(
      worldContextObject: UObject,
      gridId: Number,
      rebuildGrids: Boolean,
    ): Unit

    @JsName("FindLocalNavigationGridPath")
    public fun findLocalNavigationGridPath(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      pathPoints: Array<Vector>,
    ): Object297

    @JsName("AddLocalNavigationGridForPoints")
    public fun addLocalNavigationGridForPoints(
      worldContextObject: UObject,
      locations: Array<Vector>,
      radius2d: Number,
      height: Number,
      rebuildGrids: Boolean,
    ): Number

    @JsName("AddLocalNavigationGridForPoint")
    public fun addLocalNavigationGridForPoint(
      worldContextObject: UObject,
      location: Vector,
      radius2d: Number,
      height: Number,
      rebuildGrids: Boolean,
    ): Number

    @JsName("AddLocalNavigationGridForCapsule")
    public fun addLocalNavigationGridForCapsule(
      worldContextObject: UObject,
      location: Vector,
      capsuleRadius: Number,
      capsuleHalfHeight: Number,
      radius2d: Number,
      height: Number,
      rebuildGrids: Boolean,
    ): Number

    @JsName("AddLocalNavigationGridForBox")
    public fun addLocalNavigationGridForBox(
      worldContextObject: UObject,
      location: Vector,
      extent: Vector,
      rotation: Rotator,
      radius2d: Number,
      height: Number,
      rebuildGrids: Boolean,
    ): Number

    @JsName("C")
    public fun copy(other: UObject): NavLocalGridManager

    @JsName("C")
    public fun copy(other: Any): NavLocalGridManager
  }
}

@JsName("AISystem")
public open external class AiSystem(
  outer: UObject,
) : AiSystemBase {
  @JsName("PerceptionSystemClassName")
  public open var perceptionSystemClassName: SoftClassPath

  @JsName("HotSpotManagerClassName")
  public open var hotSpotManagerClassName: SoftClassPath

  @JsName("EnvQueryManagerClassName")
  public open var envQueryManagerClassName: SoftClassPath

  @JsName("AcceptanceRadius")
  public open var acceptanceRadius: Number

  @JsName("PathfollowingRegularPathPointAcceptanceRadius")
  public open var pathfollowingRegularPathPointAcceptanceRadius: Number

  @JsName("PathfollowingNavLinkAcceptanceRadius")
  public open var pathfollowingNavLinkAcceptanceRadius: Number

  @JsName("bFinishMoveOnGoalOverlap")
  public open var finishMoveOnGoalOverlap: Boolean

  @JsName("bAcceptPartialPaths")
  public open var acceptPartialPaths: Boolean

  @JsName("bAllowStrafing")
  public open var allowStrafing: Boolean

  @JsName("bEnableBTAITasks")
  public open var enableBtaiTasks: Boolean

  @JsName("bAllowControllersAsEQSQuerier")
  public open var allowControllersAsEqsQuerier: Boolean

  @JsName("bEnableDebuggerPlugin")
  public open var enableDebuggerPlugin: Boolean

  @JsName("bForgetStaleActors")
  public open var forgetStaleActors: Boolean

  @JsName("bAddBlackboardSelfKey")
  public open var addBlackboardSelfKey: Boolean

  @JsName("bClearBBEntryOnBTEQSFail")
  public open var clearBbEntryOnBteqsFail: Boolean

  @JsName("DefaultSightCollisionChannel")
  public open var defaultSightCollisionChannel: String

  @JsName("BehaviorTreeManager")
  public open var behaviorTreeManager: BehaviorTreeManager

  @JsName("EnvironmentQueryManager")
  public open var environmentQueryManager: EnvQueryManager

  @JsName("PerceptionSystem")
  public open var perceptionSystem: AiPerceptionSystem

  @JsName("AllProxyObjects")
  public open var allProxyObjects: Array<AiAsyncTaskBlueprintProxy>

  @JsName("HotSpotManager")
  public open var hotSpotManager: AiHotSpotManager

  @JsName("NavLocalGrids")
  public open var navLocalGrids: NavLocalGridManager

  @JsName("AILoggingVerbose")
  public open fun aiLoggingVerbose(): Unit

  @JsName("AIIgnorePlayers")
  public open fun aiIgnorePlayers(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSystem

    @JsName("C")
    public fun copy(other: UObject): AiSystem

    @JsName("C")
    public fun copy(other: Any): AiSystem
  }
}

@JsName("AISubsystem")
public open external class AiSubsystem(
  outer: UObject,
) : UObject {
  @JsName("AISystem")
  public open var aiSystem: AiSystem

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSubsystem

    @JsName("C")
    public fun copy(other: UObject): AiSubsystem

    @JsName("C")
    public fun copy(other: Any): AiSubsystem
  }
}

@JsName("AISenseEvent")
public open external class AiSenseEvent(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseEvent

    @JsName("C")
    public fun copy(other: UObject): AiSenseEvent

    @JsName("C")
    public fun copy(other: Any): AiSenseEvent
  }
}

@JsName("AIStimulus")
public open external class AiStimulus {
  @JsName("Age")
  public open var age: Number

  @JsName("ExpirationAge")
  public open var expirationAge: Number

  @JsName("Strength")
  public open var strength: Number

  @JsName("StimulusLocation")
  public open var stimulusLocation: Vector

  @JsName("ReceiverLocation")
  public open var receiverLocation: Vector

  @JsName("Tag")
  public open var tag: String

  @JsName("bSuccessfullySensed")
  public open var successfullySensed: Boolean

  public open fun clone(): AiStimulus

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiStimulus

    @JsName("C")
    public fun copy(other: Any): AiStimulus
  }
}

@JsName("AIPerceptionSystem")
public open external class AiPerceptionSystem(
  outer: UObject,
) : AiSubsystem {
  @JsName("Senses")
  public open var senses: Array<AiSense>

  @JsName("PerceptionAgingRate")
  public open var perceptionAgingRate: Number

  @JsName("ReportEvent")
  public open fun reportEvent(perceptionEvent: AiSenseEvent): Unit

  @JsName("OnPerceptionStimuliSourceEndPlay")
  public open fun onPerceptionStimuliSourceEndPlay(actor: Actor, endPlayReason: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiPerceptionSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiPerceptionSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiPerceptionSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiPerceptionSystem

    @JsName("ReportPerceptionEvent")
    public fun reportPerceptionEvent(worldContextObject: UObject, perceptionEvent: AiSenseEvent):
        Unit

    @JsName("RegisterPerceptionStimuliSource")
    public fun registerPerceptionStimuliSource(
      worldContextObject: UObject,
      sense: UnrealEngineClass,
      target: Actor,
    ): Boolean

    @JsName("GetSenseClassForStimulus")
    public fun getSenseClassForStimulus(worldContextObject: UObject, stimulus: AiStimulus):
        UnrealEngineClass

    @JsName("C")
    public fun copy(other: UObject): AiPerceptionSystem

    @JsName("C")
    public fun copy(other: Any): AiPerceptionSystem
  }
}

@JsName("AISense")
public open external class AiSense(
  outer: UObject,
) : UObject {
  @JsName("DefaultExpirationAge")
  public open var defaultExpirationAge: Number

  @JsName("NotifyType")
  public open var notifyType: String

  @JsName("bWantsNewPawnNotification")
  public open var wantsNewPawnNotification: Boolean

  @JsName("bAutoRegisterAllPawnsAsSources")
  public open var autoRegisterAllPawnsAsSources: Boolean

  @JsName("PerceptionSystemInstance")
  public open var perceptionSystemInstance: AiPerceptionSystem

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSense

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSense

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSense

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSense

    @JsName("C")
    public fun copy(other: UObject): AiSense

    @JsName("C")
    public fun copy(other: Any): AiSense
  }
}

public open external class ActorPerceptionUpdateInfo {
  @JsName("TargetId")
  public open var targetId: Number

  @JsName("Target")
  public open var target: Any

  @JsName("Stimulus")
  public open var stimulus: AiStimulus

  public open fun clone(): ActorPerceptionUpdateInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorPerceptionUpdateInfo

    @JsName("C")
    public fun copy(other: Any): ActorPerceptionUpdateInfo
  }
}

public open external class ActorPerceptionBlueprintInfo {
  @JsName("Target")
  public open var target: Actor

  @JsName("LastSensedStimuli")
  public open var lastSensedStimuli: Array<AiStimulus>

  @JsName("bIsHostile")
  public open var isHostile: Boolean

  public open fun clone(): ActorPerceptionBlueprintInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorPerceptionBlueprintInfo

    @JsName("C")
    public fun copy(other: Any): ActorPerceptionBlueprintInfo
  }
}

@JsName("T$303")
public external interface Object303 {
  @JsName("Info")
  public var info: ActorPerceptionBlueprintInfo

  @JsName("$")
  public var value: Boolean
}

@JsName("AIPerceptionComponent")
public open external class AiPerceptionComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("SensesConfig")
  public open var sensesConfig: Array<AiSenseConfig>

  @JsName("DominantSense")
  public open var dominantSense: UnrealEngineClass

  @JsName("AIOwner")
  public open var aiOwner: AiController

  @JsName("OnPerceptionUpdated")
  public open var onPerceptionUpdated:
      UnrealEngineMulticastDelegate<(UpdatedActors: Array<Actor>) -> Unit>

  @JsName("OnTargetPerceptionUpdated")
  public open var onTargetPerceptionUpdated: UnrealEngineMulticastDelegate<(Actor: Actor,
      Stimulus: AiStimulus) -> Unit>

  @JsName("OnTargetPerceptionInfoUpdated")
  public open var onTargetPerceptionInfoUpdated:
      UnrealEngineMulticastDelegate<(UpdateInfo: ActorPerceptionUpdateInfo) -> Unit>

  @JsName("SetSenseEnabled")
  public open fun setSenseEnabled(senseClass: UnrealEngineClass, enable: Boolean): Unit

  @JsName("RequestStimuliListenerUpdate")
  public open fun requestStimuliListenerUpdate(): Unit

  @JsName("OnOwnerEndPlay")
  public open fun onOwnerEndPlay(actor: Actor, endPlayReason: String): Unit

  @JsName("GetPerceivedHostileActorsBySense")
  public open fun getPerceivedHostileActorsBySense(senseToUse: UnrealEngineClass,
      outActors: Array<Actor>): OutActorsProvider

  @JsName("GetPerceivedHostileActors")
  public open fun getPerceivedHostileActors(outActors: Array<Actor>): OutActorsProvider

  @JsName("GetPerceivedActors")
  public open fun getPerceivedActors(senseToUse: UnrealEngineClass, outActors: Array<Actor>):
      OutActorsProvider

  @JsName("GetKnownPerceivedActors")
  public open fun getKnownPerceivedActors(senseToUse: UnrealEngineClass, outActors: Array<Actor>):
      OutActorsProvider

  @JsName("GetCurrentlyPerceivedActors")
  public open fun getCurrentlyPerceivedActors(senseToUse: UnrealEngineClass,
      outActors: Array<Actor>): OutActorsProvider

  @JsName("GetActorsPerception")
  public open fun getActorsPerception(actor: Actor, info: ActorPerceptionBlueprintInfo): Object303

  @JsName("ForgetAll")
  public open fun forgetAll(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiPerceptionComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiPerceptionComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiPerceptionComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiPerceptionComponent

    @JsName("C")
    public fun copy(other: UObject): AiPerceptionComponent

    @JsName("C")
    public fun copy(other: Any): AiPerceptionComponent
  }
}

@JsName("EAIRequestPriority")
public external object AIRequestPriority {
  public var SoftScript: String

  public var Logic: String

  public var HardScript: String

  public var Reaction: String

  public var Ultimate: String

  public var MAX: String
}

@JsName("EPawnActionResult")
public external object PawnActionResult {
  public var NotStarted: String

  public var InProgress: String

  public var Success: String

  public var Failed: String

  public var Aborted: String

  @JsName("EPawnActionResult_MAX")
  public var Max: String
}

public open external class PawnAction(
  outer: UObject,
) : UObject {
  @JsName("ChildAction")
  public open var childAction: PawnAction

  @JsName("ParentAction")
  public open var parentAction: PawnAction

  @JsName("OwnerComponent")
  public open var ownerComponent: PawnActionsComponent

  @JsName("Instigator")
  public open var instigator: UObject

  @JsName("BrainComp")
  public open var brainComp: BrainComponent

  @JsName("bAllowNewSameClassInstance")
  public open var allowNewSameClassInstance: Boolean

  @JsName("bReplaceActiveSameClassInstance")
  public open var replaceActiveSameClassInstance: Boolean

  @JsName("bShouldPauseMovement")
  public open var shouldPauseMovement: Boolean

  @JsName("bAlwaysNotifyOnFinished")
  public open var alwaysNotifyOnFinished: Boolean

  @JsName("GetActionPriority")
  public open fun getActionPriority(): String

  @JsName("Finish")
  public open fun finish(withResult: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnAction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnAction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnAction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnAction

    @JsName("CreateActionInstance")
    public fun createActionInstance(worldContextObject: UObject, actionClass: UnrealEngineClass):
        PawnAction

    @JsName("C")
    public fun copy(other: UObject): PawnAction

    @JsName("C")
    public fun copy(other: Any): PawnAction
  }
}

public open external class PawnActionStack {
  @JsName("TopAction")
  public open var topAction: PawnAction

  public open fun clone(): PawnActionStack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PawnActionStack

    @JsName("C")
    public fun copy(other: Any): PawnActionStack
  }
}

public open external class PawnActionEvent {
  @JsName("Action")
  public open var action: PawnAction

  public open fun clone(): PawnActionEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PawnActionEvent

    @JsName("C")
    public fun copy(other: Any): PawnActionEvent
  }
}

@JsName("EPawnActionAbortState")
public external object PawnActionAbortState {
  public var NeverStarted: String

  public var NotBeingAborted: String

  public var MarkPendingAbort: String

  public var LatentAbortInProgress: String

  public var AbortDone: String

  public var MAX: String
}

public open external class PawnActionsComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("ControlledPawn")
  public open var controlledPawn: Pawn

  @JsName("ActionStacks")
  public open var actionStacks: Array<PawnActionStack>

  @JsName("ActionEvents")
  public open var actionEvents: Array<PawnActionEvent>

  @JsName("CurrentAction")
  public open var currentAction: PawnAction

  @JsName("K2_PushAction")
  public open fun k2PushAction(
    newAction: PawnAction,
    priority: String,
    instigator: UObject,
  ): Boolean

  @JsName("K2_ForceAbortAction")
  public open fun k2ForceAbortAction(actionToAbort: PawnAction): String

  @JsName("K2_AbortAction")
  public open fun k2AbortAction(actionToAbort: PawnAction): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnActionsComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnActionsComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnActionsComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnActionsComponent

    @JsName("K2_PerformAction")
    public fun k2PerformAction(
      pawn: Pawn,
      action: PawnAction,
      priority: String,
    ): Boolean

    @JsName("C")
    public fun copy(other: UObject): PawnActionsComponent

    @JsName("C")
    public fun copy(other: Any): PawnActionsComponent
  }
}

@JsName("ETaskResourceOverlapPolicy")
public external object TaskResourceOverlapPolicy {
  @JsName("StartOnTop")
  public var OnTop: String

  @JsName("StartAtEnd")
  public var AtEnd: String

  @JsName("ETaskResourceOverlapPolicy_MAX")
  public var Max: String
}

public open external class GameplayTask(
  outer: UObject,
) : UObject {
  @JsName("InstanceName")
  public open var instanceName: String

  @JsName("ResourceOverlapPolicy")
  public open var resourceOverlapPolicy: String

  @JsName("ChildTask")
  public open var childTask: GameplayTask

  @JsName("ReadyForActivation")
  public open fun readyForActivation(): Unit

  @JsName("EndTask")
  public open fun endTask(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTask

    @JsName("C")
    public fun copy(other: UObject): GameplayTask

    @JsName("C")
    public fun copy(other: Any): GameplayTask
  }
}

public open external class GameplayResourceSet {
  public open fun clone(): GameplayResourceSet

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayResourceSet

    @JsName("C")
    public fun copy(other: Any): GameplayResourceSet
  }
}

public open external class GameplayTasksComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("bIsNetDirty")
  public open var isNetDirty: Boolean

  @JsName("SimulatedTasks")
  public open var simulatedTasks: Array<GameplayTask>

  @JsName("TaskPriorityQueue")
  public open var taskPriorityQueue: Array<GameplayTask>

  @JsName("TickingTasks")
  public open var tickingTasks: Array<GameplayTask>

  @JsName("KnownTasks")
  public open var knownTasks: Array<GameplayTask>

  @JsName("OnClaimedResourcesChange")
  public open var onClaimedResourcesChange:
      UnrealEngineMulticastDelegate<(NewlyClaimed: GameplayResourceSet,
      FreshlyReleased: GameplayResourceSet) -> Unit>

  @JsName("OnRep_SimulatedTasks")
  public open fun onRepSimulatedTasks(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTasksComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTasksComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTasksComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTasksComponent

    @JsName("C")
    public fun copy(other: UObject): GameplayTasksComponent

    @JsName("C")
    public fun copy(other: Any): GameplayTasksComponent
  }
}

public open external class NavigationFilterArea {
  @JsName("AreaClass")
  public open var areaClass: UnrealEngineClass

  @JsName("TravelCostOverride")
  public open var travelCostOverride: Number

  @JsName("EnteringCostOverride")
  public open var enteringCostOverride: Number

  @JsName("bIsExcluded")
  public open var isExcluded: Boolean

  @JsName("bOverrideTravelCost")
  public open var overrideTravelCost: Boolean

  @JsName("bOverrideEnteringCost")
  public open var overrideEnteringCost: Boolean

  public open fun clone(): NavigationFilterArea

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavigationFilterArea

    @JsName("C")
    public fun copy(other: Any): NavigationFilterArea
  }
}

public open external class NavigationFilterFlags {
  @JsName("bNavFlag0")
  public open var navFlag0: Boolean

  @JsName("bNavFlag1")
  public open var navFlag1: Boolean

  @JsName("bNavFlag2")
  public open var navFlag2: Boolean

  @JsName("bNavFlag3")
  public open var navFlag3: Boolean

  @JsName("bNavFlag4")
  public open var navFlag4: Boolean

  @JsName("bNavFlag5")
  public open var navFlag5: Boolean

  @JsName("bNavFlag6")
  public open var navFlag6: Boolean

  @JsName("bNavFlag7")
  public open var navFlag7: Boolean

  @JsName("bNavFlag8")
  public open var navFlag8: Boolean

  @JsName("bNavFlag9")
  public open var navFlag9: Boolean

  @JsName("bNavFlag10")
  public open var navFlag10: Boolean

  @JsName("bNavFlag11")
  public open var navFlag11: Boolean

  @JsName("bNavFlag12")
  public open var navFlag12: Boolean

  @JsName("bNavFlag13")
  public open var navFlag13: Boolean

  @JsName("bNavFlag14")
  public open var navFlag14: Boolean

  @JsName("bNavFlag15")
  public open var navFlag15: Boolean

  public open fun clone(): NavigationFilterFlags

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavigationFilterFlags

    @JsName("C")
    public fun copy(other: Any): NavigationFilterFlags
  }
}

public open external class NavigationQueryFilter(
  outer: UObject,
) : UObject {
  @JsName("Areas")
  public open var areas: Array<NavigationFilterArea>

  @JsName("IncludeFlags")
  public open var includeFlags: NavigationFilterFlags

  @JsName("ExcludeFlags")
  public open var excludeFlags: NavigationFilterFlags

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationQueryFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationQueryFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationQueryFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationQueryFilter

    @JsName("C")
    public fun copy(other: UObject): NavigationQueryFilter

    @JsName("C")
    public fun copy(other: Any): NavigationQueryFilter
  }
}

public open external class GameplayTaskResource(
  outer: UObject,
) : UObject {
  @JsName("ManualResourceID")
  public open var manualResourceId: Number

  @JsName("AutoResourceID")
  public open var autoResourceId: Any

  @JsName("bManuallySetID")
  public open var manuallySetId: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTaskResource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTaskResource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTaskResource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTaskResource

    @JsName("C")
    public fun copy(other: UObject): GameplayTaskResource

    @JsName("C")
    public fun copy(other: Any): GameplayTaskResource
  }
}

@JsName("EPathFollowingRequestResult")
public external object PathFollowingRequestResult {
  public var Failed: String

  public var AlreadyAtGoal: String

  public var RequestSuccessful: String

  @JsName("EPathFollowingRequestResult_MAX")
  public var Max: String
}

@JsName("EPathFollowingStatus")
public external object PathFollowingStatus {
  public var Idle: String

  public var Waiting: String

  public var Paused: String

  public var Moving: String

  @JsName("EPathFollowingStatus_MAX")
  public var Max: String
}

@JsName("T$304")
public external interface Object304 {
  @JsName("BlackboardComponent")
  public var blackboardComponent: BlackboardComponent

  @JsName("$")
  public var value: Boolean
}

@JsName("AIController")
public open external class AiController(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Controller {
  @JsName("bStartAILogicOnPossess")
  public open var startAiLogicOnPossess: Boolean

  @JsName("bStopAILogicOnUnposses")
  public open var stopAiLogicOnUnposses: Boolean

  @JsName("bLOSflag")
  public open var loSflag: Boolean

  @JsName("bSkipExtraLOSChecks")
  public open var skipExtraLosChecks: Boolean

  @JsName("bAllowStrafe")
  public open var allowStrafe: Boolean

  @JsName("bWantsPlayerState")
  public open var wantsPlayerState: Boolean

  @JsName("bSetControlRotationFromPawnOrientation")
  public open var setControlRotationFromPawnOrientation: Boolean

  @JsName("PathFollowingComponent")
  public open var pathFollowingComponent: PathFollowingComponent

  @JsName("BrainComponent")
  public open var brainComponent: BrainComponent

  @JsName("PerceptionComponent")
  public open var perceptionComponent: AiPerceptionComponent

  @JsName("ActionsComp")
  public open var actionsComp: PawnActionsComponent

  @JsName("Blackboard")
  public open var blackboard: BlackboardComponent

  @JsName("CachedGameplayTasksComponent")
  public open var cachedGameplayTasksComponent: GameplayTasksComponent

  @JsName("DefaultNavigationFilterClass")
  public open var defaultNavigationFilterClass: UnrealEngineClass

  @JsName("ReceiveMoveCompleted")
  public open var receiveMoveCompleted: UnrealEngineMulticastDelegate<(RequestID: AiRequestId,
      Result: String) -> Unit>

  @JsName("UseBlackboard")
  public open fun useBlackboard(blackboardAsset: BlackboardData,
      blackboardComponent: BlackboardComponent): Object304

  @JsName("UnclaimTaskResource")
  public open fun unclaimTaskResource(resourceClass: UnrealEngineClass): Unit

  @JsName("SetPathFollowingComponent")
  public open fun setPathFollowingComponent(newPfComponent: PathFollowingComponent): Unit

  @JsName("SetMoveBlockDetection")
  public open fun setMoveBlockDetection(enable: Boolean): Unit

  @JsName("RunBehaviorTree")
  public open fun runBehaviorTree(btAsset: BehaviorTree): Boolean

  @JsName("OnUsingBlackBoard")
  public open fun onUsingBlackBoard(blackboardComp: BlackboardComponent,
      blackboardAsset: BlackboardData): Unit

  @JsName("OnGameplayTaskResourcesClaimed")
  public open fun onGameplayTaskResourcesClaimed(newlyClaimed: GameplayResourceSet,
      freshlyReleased: GameplayResourceSet): Unit

  @JsName("MoveToLocation")
  public open fun moveToLocation(
    dest: Vector,
    acceptanceRadius: Number,
    stopOnOverlap: Boolean,
    usePathfinding: Boolean,
    projectDestinationToNavigation: Boolean,
    canStrafe: Boolean,
    filterClass: UnrealEngineClass,
    allowPartialPath: Boolean,
  ): String

  @JsName("MoveToActor")
  public open fun moveToActor(
    goal: Actor,
    acceptanceRadius: Number,
    stopOnOverlap: Boolean,
    usePathfinding: Boolean,
    canStrafe: Boolean,
    filterClass: UnrealEngineClass,
    allowPartialPath: Boolean,
  ): String

  @JsName("K2_SetFocus")
  public open fun k2SetFocus(newFocus: Actor): Unit

  @JsName("K2_SetFocalPoint")
  public open fun k2SetFocalPoint(FP: Vector): Unit

  @JsName("K2_ClearFocus")
  public open fun k2ClearFocus(): Unit

  @JsName("HasPartialPath")
  public open fun hasPartialPath(): Boolean

  @JsName("GetPathFollowingComponent")
  public open fun getPathFollowingComponent(): PathFollowingComponent

  @JsName("GetMoveStatus")
  public open fun getMoveStatus(): String

  @JsName("GetImmediateMoveDestination")
  public open fun getImmediateMoveDestination(): Vector

  @JsName("GetFocusActor")
  public open fun getFocusActor(): Actor

  @JsName("GetFocalPointOnActor")
  public open fun getFocalPointOnActor(actor: Actor): Vector

  @JsName("GetFocalPoint")
  public open fun getFocalPoint(): Vector

  @JsName("GetAIPerceptionComponent")
  public open fun getAiPerceptionComponent(): AiPerceptionComponent

  @JsName("ClaimTaskResource")
  public open fun claimTaskResource(resourceClass: UnrealEngineClass): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiController

    @JsName("C")
    public fun copy(other: UObject): AiController

    @JsName("C")
    public fun copy(other: Any): AiController
  }
}

public open external class BrainComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("BlackboardComp")
  public open var blackboardComp: BlackboardComponent

  @JsName("AIOwner")
  public open var aiOwner: AiController

  @JsName("StopLogic")
  public open fun stopLogic(reason: String): Unit

  @JsName("StartLogic")
  public open fun startLogic(): Unit

  @JsName("RestartLogic")
  public open fun restartLogic(): Unit

  @JsName("IsRunning")
  public open fun isRunning(): Boolean

  @JsName("IsPaused")
  public open fun isPaused(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrainComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrainComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrainComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrainComponent

    @JsName("C")
    public fun copy(other: UObject): BrainComponent

    @JsName("C")
    public fun copy(other: Any): BrainComponent
  }
}

public open external class GameplayTagQuery {
  @JsName("TokenStreamVersion")
  public open var tokenStreamVersion: Number

  @JsName("TagDictionary")
  public open var tagDictionary: Array<GameplayTag>

  @JsName("QueryTokenStream")
  public open var queryTokenStream: Array<Number>

  @JsName("UserDescription")
  public open var userDescription: String

  @JsName("AutoDescription")
  public open var autoDescription: String

  public open fun clone(): GameplayTagQuery

  @JsName("IsTagQueryEmpty")
  public open fun isTagQueryEmpty(): Boolean

  @JsName("MakeGameplayTagQuery")
  public open fun makeGameplayTagQuery(): GameplayTagQuery

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayTagQuery

    @JsName("C")
    public fun copy(other: Any): GameplayTagQuery

    @JsName("IsTagQueryEmpty")
    public fun isTagQueryEmpty(tagQuery: GameplayTagQuery): Boolean

    @JsName("MakeGameplayTagQuery")
    public fun makeGameplayTagQuery(tagQuery: GameplayTagQuery): GameplayTagQuery
  }
}

@JsName("T$305")
public external interface TagContainerProvider {
  @JsName("TagContainer")
  public var tagContainer: GameplayTagContainer
}

@JsName("T$306")
public external interface InOutTagContainerProvider {
  @JsName("InOutTagContainer")
  public var inOutTagContainer: GameplayTagContainer
}

@JsName("T$307")
public external interface GameplayTagsProvider {
  @JsName("GameplayTags")
  public var gameplayTags: Array<GameplayTag>
}

@JsName("T$308")
public external interface Object308 {
  @JsName("TagContainer")
  public var tagContainer: GameplayTagContainer

  @JsName("$")
  public var value: Boolean
}

public open external class GameplayTagContainer {
  @JsName("GameplayTags")
  public open var gameplayTags: Array<GameplayTag>

  @JsName("ParentTags")
  public open var parentTags: Array<GameplayTag>

  public open fun clone(): GameplayTagContainer

  @JsName("AddGameplayTag")
  public open fun addGameplayTag(tag: GameplayTag): TagContainerProvider

  @JsName("AppendGameplayTagContainers")
  public open fun appendGameplayTagContainers(inTagContainer: GameplayTagContainer):
      InOutTagContainerProvider

  @JsName("BreakGameplayTagContainer")
  public open fun breakGameplayTagContainer(gameplayTags: Array<GameplayTag>): GameplayTagsProvider

  @JsName("DoesContainerMatchTagQuery")
  public open fun doesContainerMatchTagQuery(tagQuery: GameplayTagQuery): Boolean

  @JsName("EqualEqual_GameplayTagContainer")
  public open fun equalEqualGameplayTagContainer(b: GameplayTagContainer): Boolean

  @JsName("GetDebugStringFromGameplayTagContainer")
  public open fun getDebugStringFromGameplayTagContainer(): String

  @JsName("GetNumGameplayTagsInContainer")
  public open fun getNumGameplayTagsInContainer(): Number

  @JsName("HasAllTags")
  public open fun hasAllTags(otherContainer: GameplayTagContainer, exactMatch: Boolean): Boolean

  @JsName("HasAnyTags")
  public open fun hasAnyTags(otherContainer: GameplayTagContainer, exactMatch: Boolean): Boolean

  @JsName("HasTag")
  public open fun hasTag(tag: GameplayTag, exactMatch: Boolean): Boolean

  @JsName("MakeLiteralGameplayTagContainer")
  public open fun makeLiteralGameplayTagContainer(): GameplayTagContainer

  @JsName("NotEqual_GameplayTagContainer")
  public open fun notEqualGameplayTagContainer(b: GameplayTagContainer): Boolean

  @JsName("NotEqual_TagContainerTagContainer")
  public open fun notEqualTagContainerTagContainer(b: String): Boolean

  @JsName("RemoveGameplayTag")
  public open fun removeGameplayTag(tag: GameplayTag): Object308

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayTagContainer

    @JsName("C")
    public fun copy(other: Any): GameplayTagContainer

    @JsName("AddGameplayTag")
    public fun addGameplayTag(tagContainer: GameplayTagContainer, tag: GameplayTag):
        TagContainerProvider

    @JsName("AppendGameplayTagContainers")
    public fun appendGameplayTagContainers(inOutTagContainer: GameplayTagContainer,
        inTagContainer: GameplayTagContainer): InOutTagContainerProvider

    @JsName("BreakGameplayTagContainer")
    public fun breakGameplayTagContainer(gameplayTagContainer: GameplayTagContainer,
        gameplayTags: Array<GameplayTag>): GameplayTagsProvider

    @JsName("DoesContainerMatchTagQuery")
    public fun doesContainerMatchTagQuery(tagContainer: GameplayTagContainer,
        tagQuery: GameplayTagQuery): Boolean

    @JsName("EqualEqual_GameplayTagContainer")
    public fun equalEqualGameplayTagContainer(a: GameplayTagContainer, b: GameplayTagContainer):
        Boolean

    @JsName("GetDebugStringFromGameplayTagContainer")
    public fun getDebugStringFromGameplayTagContainer(tagContainer: GameplayTagContainer): String

    @JsName("GetNumGameplayTagsInContainer")
    public fun getNumGameplayTagsInContainer(tagContainer: GameplayTagContainer): Number

    @JsName("HasAllTags")
    public fun hasAllTags(
      tagContainer: GameplayTagContainer,
      otherContainer: GameplayTagContainer,
      exactMatch: Boolean,
    ): Boolean

    @JsName("HasAnyTags")
    public fun hasAnyTags(
      tagContainer: GameplayTagContainer,
      otherContainer: GameplayTagContainer,
      exactMatch: Boolean,
    ): Boolean

    @JsName("HasTag")
    public fun hasTag(
      tagContainer: GameplayTagContainer,
      tag: GameplayTag,
      exactMatch: Boolean,
    ): Boolean

    @JsName("MakeLiteralGameplayTagContainer")
    public fun makeLiteralGameplayTagContainer(value: GameplayTagContainer): GameplayTagContainer

    @JsName("NotEqual_GameplayTagContainer")
    public fun notEqualGameplayTagContainer(a: GameplayTagContainer, b: GameplayTagContainer):
        Boolean

    @JsName("NotEqual_TagContainerTagContainer")
    public fun notEqualTagContainerTagContainer(a: GameplayTagContainer, b: String): Boolean

    @JsName("RemoveGameplayTag")
    public fun removeGameplayTag(tagContainer: GameplayTagContainer, tag: GameplayTag): Object308

    @JsName("MakeGameplayTagContainerFromArray")
    public fun makeGameplayTagContainerFromArray(gameplayTags: Array<GameplayTag>):
        GameplayTagContainer
  }
}

public open external class GameplayTag {
  @JsName("TagName")
  public open var tagName: String

  public open fun clone(): GameplayTag

  @JsName("EqualEqual_GameplayTag")
  public open fun equalEqualGameplayTag(b: GameplayTag): Boolean

  @JsName("GetDebugStringFromGameplayTag")
  public open fun getDebugStringFromGameplayTag(): String

  @JsName("GetTagName")
  public open fun getTagName(): String

  @JsName("IsGameplayTagValid")
  public open fun isGameplayTagValid(): Boolean

  @JsName("MakeGameplayTagContainerFromTag")
  public open fun makeGameplayTagContainerFromTag(): GameplayTagContainer

  @JsName("MakeLiteralGameplayTag")
  public open fun makeLiteralGameplayTag(): GameplayTag

  @JsName("MatchesAnyTags")
  public open fun matchesAnyTags(otherContainer: GameplayTagContainer, exactMatch: Boolean): Boolean

  @JsName("MatchesTag")
  public open fun matchesTag(tagTwo: GameplayTag, exactMatch: Boolean): Boolean

  @JsName("NotEqual_GameplayTag")
  public open fun notEqualGameplayTag(b: GameplayTag): Boolean

  @JsName("NotEqual_TagTag")
  public open fun notEqualTagTag(b: String): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayTag

    @JsName("C")
    public fun copy(other: Any): GameplayTag

    @JsName("EqualEqual_GameplayTag")
    public fun equalEqualGameplayTag(a: GameplayTag, b: GameplayTag): Boolean

    @JsName("GetDebugStringFromGameplayTag")
    public fun getDebugStringFromGameplayTag(gameplayTag: GameplayTag): String

    @JsName("GetTagName")
    public fun getTagName(gameplayTag: GameplayTag): String

    @JsName("IsGameplayTagValid")
    public fun isGameplayTagValid(gameplayTag: GameplayTag): Boolean

    @JsName("MakeGameplayTagContainerFromTag")
    public fun makeGameplayTagContainerFromTag(singleTag: GameplayTag): GameplayTagContainer

    @JsName("MakeLiteralGameplayTag")
    public fun makeLiteralGameplayTag(value: GameplayTag): GameplayTag

    @JsName("MatchesAnyTags")
    public fun matchesAnyTags(
      tagOne: GameplayTag,
      otherContainer: GameplayTagContainer,
      exactMatch: Boolean,
    ): Boolean

    @JsName("MatchesTag")
    public fun matchesTag(
      tagOne: GameplayTag,
      tagTwo: GameplayTag,
      exactMatch: Boolean,
    ): Boolean

    @JsName("NotEqual_GameplayTag")
    public fun notEqualGameplayTag(a: GameplayTag, b: GameplayTag): Boolean

    @JsName("NotEqual_TagTag")
    public fun notEqualTagTag(a: GameplayTag, b: String): Boolean
  }
}

public open external class BehaviorTreeComponent(
  outer: UObject,
) : BrainComponent {
  @JsName("NodeInstances")
  public open var nodeInstances: Array<BtNode>

  @JsName("DefaultBehaviorTreeAsset")
  public open var defaultBehaviorTreeAsset: BehaviorTree

  @JsName("SetDynamicSubtree")
  public open fun setDynamicSubtree(injectTag: GameplayTag, behaviorAsset: BehaviorTree): Unit

  @JsName("GetTagCooldownEndTime")
  public open fun getTagCooldownEndTime(cooldownTag: GameplayTag): Number

  @JsName("AddCooldownTagDuration")
  public open fun addCooldownTagDuration(
    cooldownTag: GameplayTag,
    cooldownDuration: Number,
    addToExistingDuration: Boolean,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BehaviorTreeComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BehaviorTreeComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BehaviorTreeComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BehaviorTreeComponent

    @JsName("C")
    public fun copy(other: UObject): BehaviorTreeComponent

    @JsName("C")
    public fun copy(other: Any): BehaviorTreeComponent
  }
}

@JsName("BTNode")
public open external class BtNode(
  outer: UObject,
) : UObject {
  @JsName("NodeName")
  public open var nodeName: String

  @JsName("TreeAsset")
  public open var treeAsset: BehaviorTree

  @JsName("ParentNode")
  public open var parentNode: BtCompositeNode

  @JsName("ClearBlackboardValue")
  public open fun clearBlackboardValue(key: BlackboardKeySelector): Unit

  @JsName("ClearBlackboardValueAsVector")
  public open fun clearBlackboardValueAsVector(key: BlackboardKeySelector): Unit

  @JsName("GetBlackboardValueAsActor")
  public open fun getBlackboardValueAsActor(key: BlackboardKeySelector): Actor

  @JsName("GetBlackboardValueAsBool")
  public open fun getBlackboardValueAsBool(key: BlackboardKeySelector): Boolean

  @JsName("GetBlackboardValueAsClass")
  public open fun getBlackboardValueAsClass(key: BlackboardKeySelector): UnrealEngineClass

  @JsName("GetBlackboardValueAsEnum")
  public open fun getBlackboardValueAsEnum(key: BlackboardKeySelector): Number

  @JsName("GetBlackboardValueAsFloat")
  public open fun getBlackboardValueAsFloat(key: BlackboardKeySelector): Number

  @JsName("GetBlackboardValueAsInt")
  public open fun getBlackboardValueAsInt(key: BlackboardKeySelector): Number

  @JsName("GetBlackboardValueAsName")
  public open fun getBlackboardValueAsName(key: BlackboardKeySelector): String

  @JsName("GetBlackboardValueAsObject")
  public open fun getBlackboardValueAsObject(key: BlackboardKeySelector): UObject

  @JsName("GetBlackboardValueAsRotator")
  public open fun getBlackboardValueAsRotator(key: BlackboardKeySelector): Rotator

  @JsName("GetBlackboardValueAsString")
  public open fun getBlackboardValueAsString(key: BlackboardKeySelector): String

  @JsName("GetBlackboardValueAsVector")
  public open fun getBlackboardValueAsVector(key: BlackboardKeySelector): Vector

  @JsName("GetOwnerComponent")
  public open fun getOwnerComponent(): BehaviorTreeComponent

  @JsName("GetOwnersBlackboard")
  public open fun getOwnersBlackboard(): BlackboardComponent

  @JsName("SetBlackboardValueAsBool")
  public open fun setBlackboardValueAsBool(key: BlackboardKeySelector, value: Boolean): Unit

  @JsName("SetBlackboardValueAsClass")
  public open fun setBlackboardValueAsClass(key: BlackboardKeySelector, value: UnrealEngineClass):
      Unit

  @JsName("SetBlackboardValueAsEnum")
  public open fun setBlackboardValueAsEnum(key: BlackboardKeySelector, value: Number): Unit

  @JsName("SetBlackboardValueAsFloat")
  public open fun setBlackboardValueAsFloat(key: BlackboardKeySelector, value: Number): Unit

  @JsName("SetBlackboardValueAsInt")
  public open fun setBlackboardValueAsInt(key: BlackboardKeySelector, value: Number): Unit

  @JsName("SetBlackboardValueAsName")
  public open fun setBlackboardValueAsName(key: BlackboardKeySelector, value: String): Unit

  @JsName("SetBlackboardValueAsObject")
  public open fun setBlackboardValueAsObject(key: BlackboardKeySelector, value: UObject): Unit

  @JsName("SetBlackboardValueAsRotator")
  public open fun setBlackboardValueAsRotator(key: BlackboardKeySelector, value: Rotator): Unit

  @JsName("SetBlackboardValueAsString")
  public open fun setBlackboardValueAsString(key: BlackboardKeySelector, value: String): Unit

  @JsName("SetBlackboardValueAsVector")
  public open fun setBlackboardValueAsVector(key: BlackboardKeySelector, value: Vector): Unit

  @JsName("StartUsingExternalEvent")
  public open fun startUsingExternalEvent(owningActor: Actor): Unit

  @JsName("StopUsingExternalEvent")
  public open fun stopUsingExternalEvent(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtNode

    @JsName("C")
    public fun copy(other: UObject): BtNode

    @JsName("C")
    public fun copy(other: Any): BtNode

    @JsName("ClearBlackboardValue")
    public fun clearBlackboardValue(nodeOwner: BtNode, key: BlackboardKeySelector): Unit

    @JsName("ClearBlackboardValueAsVector")
    public fun clearBlackboardValueAsVector(nodeOwner: BtNode, key: BlackboardKeySelector): Unit

    @JsName("GetBlackboardValueAsActor")
    public fun getBlackboardValueAsActor(nodeOwner: BtNode, key: BlackboardKeySelector): Actor

    @JsName("GetBlackboardValueAsBool")
    public fun getBlackboardValueAsBool(nodeOwner: BtNode, key: BlackboardKeySelector): Boolean

    @JsName("GetBlackboardValueAsClass")
    public fun getBlackboardValueAsClass(nodeOwner: BtNode, key: BlackboardKeySelector):
        UnrealEngineClass

    @JsName("GetBlackboardValueAsEnum")
    public fun getBlackboardValueAsEnum(nodeOwner: BtNode, key: BlackboardKeySelector): Number

    @JsName("GetBlackboardValueAsFloat")
    public fun getBlackboardValueAsFloat(nodeOwner: BtNode, key: BlackboardKeySelector): Number

    @JsName("GetBlackboardValueAsInt")
    public fun getBlackboardValueAsInt(nodeOwner: BtNode, key: BlackboardKeySelector): Number

    @JsName("GetBlackboardValueAsName")
    public fun getBlackboardValueAsName(nodeOwner: BtNode, key: BlackboardKeySelector): String

    @JsName("GetBlackboardValueAsObject")
    public fun getBlackboardValueAsObject(nodeOwner: BtNode, key: BlackboardKeySelector): UObject

    @JsName("GetBlackboardValueAsRotator")
    public fun getBlackboardValueAsRotator(nodeOwner: BtNode, key: BlackboardKeySelector): Rotator

    @JsName("GetBlackboardValueAsString")
    public fun getBlackboardValueAsString(nodeOwner: BtNode, key: BlackboardKeySelector): String

    @JsName("GetBlackboardValueAsVector")
    public fun getBlackboardValueAsVector(nodeOwner: BtNode, key: BlackboardKeySelector): Vector

    @JsName("GetOwnerComponent")
    public fun getOwnerComponent(nodeOwner: BtNode): BehaviorTreeComponent

    @JsName("GetOwnersBlackboard")
    public fun getOwnersBlackboard(nodeOwner: BtNode): BlackboardComponent

    @JsName("SetBlackboardValueAsBool")
    public fun setBlackboardValueAsBool(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Boolean,
    ): Unit

    @JsName("SetBlackboardValueAsClass")
    public fun setBlackboardValueAsClass(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: UnrealEngineClass,
    ): Unit

    @JsName("SetBlackboardValueAsEnum")
    public fun setBlackboardValueAsEnum(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Number,
    ): Unit

    @JsName("SetBlackboardValueAsFloat")
    public fun setBlackboardValueAsFloat(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Number,
    ): Unit

    @JsName("SetBlackboardValueAsInt")
    public fun setBlackboardValueAsInt(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Number,
    ): Unit

    @JsName("SetBlackboardValueAsName")
    public fun setBlackboardValueAsName(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: String,
    ): Unit

    @JsName("SetBlackboardValueAsObject")
    public fun setBlackboardValueAsObject(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: UObject,
    ): Unit

    @JsName("SetBlackboardValueAsRotator")
    public fun setBlackboardValueAsRotator(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Rotator,
    ): Unit

    @JsName("SetBlackboardValueAsString")
    public fun setBlackboardValueAsString(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: String,
    ): Unit

    @JsName("SetBlackboardValueAsVector")
    public fun setBlackboardValueAsVector(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Vector,
    ): Unit

    @JsName("StartUsingExternalEvent")
    public fun startUsingExternalEvent(nodeOwner: BtNode, owningActor: Actor): Unit

    @JsName("StopUsingExternalEvent")
    public fun stopUsingExternalEvent(nodeOwner: BtNode): Unit
  }
}

@JsName("BTAuxiliaryNode")
public open external class BtAuxiliaryNode(
  outer: UObject,
) : BtNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtAuxiliaryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtAuxiliaryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtAuxiliaryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtAuxiliaryNode

    @JsName("C")
    public fun copy(other: UObject): BtAuxiliaryNode

    @JsName("C")
    public fun copy(other: Any): BtAuxiliaryNode
  }
}

@JsName("BTService")
public open external class BtService(
  outer: UObject,
) : BtAuxiliaryNode {
  @JsName("Interval")
  public open var interval: Number

  @JsName("RandomDeviation")
  public open var randomDeviation: Number

  @JsName("bCallTickOnSearchStart")
  public open var callTickOnSearchStart: Boolean

  @JsName("bRestartTimerOnEachActivation")
  public open var restartTimerOnEachActivation: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtService

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtService

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtService

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtService

    @JsName("C")
    public fun copy(other: UObject): BtService

    @JsName("C")
    public fun copy(other: Any): BtService
  }
}

@JsName("BTTaskNode")
public open external class BtTaskNode(
  outer: UObject,
) : BtNode {
  @JsName("Services")
  public open var services: Array<BtService>

  @JsName("bIgnoreRestartSelf")
  public open var ignoreRestartSelf: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskNode

    @JsName("C")
    public fun copy(other: UObject): BtTaskNode

    @JsName("C")
    public fun copy(other: Any): BtTaskNode
  }
}

@JsName("EBTFlowAbortMode")
public external object BTFlowAbortMode {
  public var None: String

  public var LowerPriority: String

  public var Self: String

  public var Both: String

  @JsName("EBTFlowAbortMode_MAX")
  public var Max: String
}

@JsName("BTDecorator")
public open external class BtDecorator(
  outer: UObject,
) : BtAuxiliaryNode {
  @JsName("bInverseCondition")
  public open var inverseCondition: Boolean

  @JsName("FlowAbortMode")
  public open var flowAbortMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecorator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecorator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecorator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecorator

    @JsName("C")
    public fun copy(other: UObject): BtDecorator

    @JsName("C")
    public fun copy(other: Any): BtDecorator
  }
}

@JsName("EBTDecoratorLogic")
public external object BTDecoratorLogicEnum {
  public var Invalid: String

  public var Test: String

  public var And: String

  public var Or: String

  public var Not: String

  @JsName("EBTDecoratorLogic_MAX")
  public var Max: String
}

@JsName("BTDecoratorLogic")
public open external class BtDecoratorLogic {
  @JsName("Operation")
  public open var operation: String

  @JsName("Number")
  public open var number: Any

  public open fun clone(): BtDecoratorLogic

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BtDecoratorLogic

    @JsName("C")
    public fun copy(other: Any): BtDecoratorLogic
  }
}

@JsName("BTCompositeChild")
public open external class BtCompositeChild {
  @JsName("ChildComposite")
  public open var childComposite: BtCompositeNode

  @JsName("ChildTask")
  public open var childTask: BtTaskNode

  @JsName("Decorators")
  public open var decorators: Array<BtDecorator>

  @JsName("DecoratorOps")
  public open var decoratorOps: Array<BtDecoratorLogic>

  public open fun clone(): BtCompositeChild

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BtCompositeChild

    @JsName("C")
    public fun copy(other: Any): BtCompositeChild
  }
}

@JsName("BTCompositeNode")
public open external class BtCompositeNode(
  outer: UObject,
) : BtNode {
  @JsName("Children")
  public open var children: Array<BtCompositeChild>

  @JsName("Services")
  public open var services: Array<BtService>

  @JsName("bApplyDecoratorScope")
  public open var applyDecoratorScope: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtCompositeNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtCompositeNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtCompositeNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtCompositeNode

    @JsName("C")
    public fun copy(other: UObject): BtCompositeNode

    @JsName("C")
    public fun copy(other: Any): BtCompositeNode
  }
}

public open external class EditedDocumentInfo {
  @JsName("EditedObjectPath")
  public open var editedObjectPath: SoftObjectPath

  @JsName("SavedViewOffset")
  public open var savedViewOffset: Vector2d

  @JsName("SavedZoomAmount")
  public open var savedZoomAmount: Number

  @JsName("EditedObject")
  public open var editedObject: UObject

  public open fun clone(): EditedDocumentInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditedDocumentInfo

    @JsName("C")
    public fun copy(other: Any): EditedDocumentInfo
  }
}

public open external class BehaviorTree(
  outer: UObject,
) : UObject {
  @JsName("RootNode")
  public open var rootNode: BtCompositeNode

  @JsName("BTGraph")
  public open var btGraph: EdGraph

  @JsName("LastEditedDocuments")
  public open var lastEditedDocuments: Array<EditedDocumentInfo>

  @JsName("BlackboardAsset")
  public open var blackboardAsset: BlackboardData

  @JsName("RootDecorators")
  public open var rootDecorators: Array<BtDecorator>

  @JsName("RootDecoratorOps")
  public open var rootDecoratorOps: Array<BtDecoratorLogic>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BehaviorTree

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BehaviorTree

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BehaviorTree

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BehaviorTree

    @JsName("C")
    public fun copy(other: UObject): BehaviorTree

    @JsName("C")
    public fun copy(other: Any): BehaviorTree
  }
}

@JsName("T$310")
public external interface Object310 {
  @JsName("Days")
  public var days: Number

  @JsName("Hours")
  public var hours: Number

  @JsName("Minutes")
  public var minutes: Number

  @JsName("Seconds")
  public var seconds: Number

  @JsName("Milliseconds")
  public var milliseconds: Number
}

@JsName("T$311")
public external interface Object311 {
  @JsName("Days")
  public var days: Number

  @JsName("Hours")
  public var hours: Number

  @JsName("Minutes")
  public var minutes: Number

  @JsName("Seconds")
  public var seconds: Number

  @JsName("FractionNano")
  public var fractionNano: Number
}

public open external class Timespan {
  public open fun clone(): Timespan

  @JsName("AsTimespan_Timespan")
  public open fun asTimespanTimespan(): String

  @JsName("Add_TimespanTimespan")
  public open fun addTimespanTimespan(b: Timespan): Timespan

  @JsName("BreakTimespan")
  public open fun breakTimespan(
    days: Number,
    hours: Number,
    minutes: Number,
    seconds: Number,
    milliseconds: Number,
  ): Object310

  @JsName("BreakTimespan2")
  public open fun breakTimespan2(
    days: Number,
    hours: Number,
    minutes: Number,
    seconds: Number,
    fractionNano: Number,
  ): Object311

  @JsName("Divide_TimespanFloat")
  public open fun divideTimespanFloat(scalar: Number): Timespan

  @JsName("EqualEqual_TimespanTimespan")
  public open fun equalEqualTimespanTimespan(b: Timespan): Boolean

  @JsName("GetDays")
  public open fun getDays(): Number

  @JsName("GetDuration")
  public open fun getDuration(): Timespan

  @JsName("GetHours")
  public open fun getHours(): Number

  @JsName("GetMilliseconds")
  public open fun getMilliseconds(): Number

  @JsName("GetMinutes")
  public open fun getMinutes(): Number

  @JsName("GetSeconds")
  public open fun getSeconds(): Number

  @JsName("GetTotalDays")
  public open fun getTotalDays(): Number

  @JsName("GetTotalHours")
  public open fun getTotalHours(): Number

  @JsName("GetTotalMilliseconds")
  public open fun getTotalMilliseconds(): Number

  @JsName("GetTotalMinutes")
  public open fun getTotalMinutes(): Number

  @JsName("GetTotalSeconds")
  public open fun getTotalSeconds(): Number

  @JsName("Greater_TimespanTimespan")
  public open fun greaterTimespanTimespan(b: Timespan): Boolean

  @JsName("GreaterEqual_TimespanTimespan")
  public open fun greaterEqualTimespanTimespan(b: Timespan): Boolean

  @JsName("Less_TimespanTimespan")
  public open fun lessTimespanTimespan(b: Timespan): Boolean

  @JsName("LessEqual_TimespanTimespan")
  public open fun lessEqualTimespanTimespan(b: Timespan): Boolean

  @JsName("Multiply_TimespanFloat")
  public open fun multiplyTimespanFloat(scalar: Number): Timespan

  @JsName("NotEqual_TimespanTimespan")
  public open fun notEqualTimespanTimespan(b: Timespan): Boolean

  @JsName("Subtract_TimespanTimespan")
  public open fun subtractTimespanTimespan(b: Timespan): Timespan

  @JsName("TimespanRatio")
  public open fun timespanRatio(b: Timespan): Number

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Timespan

    @JsName("C")
    public fun copy(other: Any): Timespan

    @JsName("AsTimespan_Timespan")
    public fun asTimespanTimespan(inTimespan: Timespan): String

    @JsName("Add_TimespanTimespan")
    public fun addTimespanTimespan(a: Timespan, b: Timespan): Timespan

    @JsName("BreakTimespan")
    public fun breakTimespan(
      inTimespan: Timespan,
      days: Number,
      hours: Number,
      minutes: Number,
      seconds: Number,
      milliseconds: Number,
    ): Object310

    @JsName("BreakTimespan2")
    public fun breakTimespan2(
      inTimespan: Timespan,
      days: Number,
      hours: Number,
      minutes: Number,
      seconds: Number,
      fractionNano: Number,
    ): Object311

    @JsName("Divide_TimespanFloat")
    public fun divideTimespanFloat(a: Timespan, scalar: Number): Timespan

    @JsName("EqualEqual_TimespanTimespan")
    public fun equalEqualTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("GetDays")
    public fun getDays(a: Timespan): Number

    @JsName("GetDuration")
    public fun getDuration(a: Timespan): Timespan

    @JsName("GetHours")
    public fun getHours(a: Timespan): Number

    @JsName("GetMilliseconds")
    public fun getMilliseconds(a: Timespan): Number

    @JsName("GetMinutes")
    public fun getMinutes(a: Timespan): Number

    @JsName("GetSeconds")
    public fun getSeconds(a: Timespan): Number

    @JsName("GetTotalDays")
    public fun getTotalDays(a: Timespan): Number

    @JsName("GetTotalHours")
    public fun getTotalHours(a: Timespan): Number

    @JsName("GetTotalMilliseconds")
    public fun getTotalMilliseconds(a: Timespan): Number

    @JsName("GetTotalMinutes")
    public fun getTotalMinutes(a: Timespan): Number

    @JsName("GetTotalSeconds")
    public fun getTotalSeconds(a: Timespan): Number

    @JsName("Greater_TimespanTimespan")
    public fun greaterTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("GreaterEqual_TimespanTimespan")
    public fun greaterEqualTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("Less_TimespanTimespan")
    public fun lessTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("LessEqual_TimespanTimespan")
    public fun lessEqualTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("Multiply_TimespanFloat")
    public fun multiplyTimespanFloat(a: Timespan, scalar: Number): Timespan

    @JsName("NotEqual_TimespanTimespan")
    public fun notEqualTimespanTimespan(a: Timespan, b: Timespan): Boolean

    @JsName("Subtract_TimespanTimespan")
    public fun subtractTimespanTimespan(a: Timespan, b: Timespan): Timespan

    @JsName("TimespanRatio")
    public fun timespanRatio(a: Timespan, b: Timespan): Number

    @JsName("FromDays")
    public fun fromDays(days: Number): Timespan

    @JsName("FromHours")
    public fun fromHours(hours: Number): Timespan

    @JsName("FromMilliseconds")
    public fun fromMilliseconds(milliseconds: Number): Timespan

    @JsName("FromMinutes")
    public fun fromMinutes(minutes: Number): Timespan

    @JsName("FromSeconds")
    public fun fromSeconds(seconds: Number): Timespan

    @JsName("MakeTimespan")
    public fun makeTimespan(
      days: Number,
      hours: Number,
      minutes: Number,
      seconds: Number,
      milliseconds: Number,
    ): Timespan

    @JsName("MakeTimespan2")
    public fun makeTimespan2(
      days: Number,
      hours: Number,
      minutes: Number,
      seconds: Number,
      fractionNano: Number,
    ): Timespan

    @JsName("TimespanMaxValue")
    public fun timespanMaxValue(): Timespan

    @JsName("TimespanMinValue")
    public fun timespanMinValue(): Timespan

    @JsName("TimespanZeroValue")
    public fun timespanZeroValue(): Timespan
  }
}

@JsName("T$312")
public external interface Object312 {
  @JsName("bIsTracked")
  public var isTracked: Boolean

  @JsName("Orientation")
  public var orientation: Rotator

  @JsName("bHasPositionalTracking")
  public var hasPositionalTracking: Boolean

  public var position: Vector
}

@JsName("XRDeviceId")
public open external class XrDeviceId {
  @JsName("SystemName")
  public open var systemName: String

  @JsName("DeviceID")
  public open var deviceId: Number

  public open fun clone(): XrDeviceId

  @JsName("GetDevicePose")
  public open fun getDevicePose(
    isTracked: Boolean,
    orientation: Rotator,
    hasPositionalTracking: Boolean,
    position: Vector,
  ): Object312

  @JsName("IsDeviceTracking")
  public open fun isDeviceTracking(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): XrDeviceId

    @JsName("C")
    public fun copy(other: Any): XrDeviceId

    @JsName("GetDevicePose")
    public fun getDevicePose(
      xrDeviceId: XrDeviceId,
      isTracked: Boolean,
      orientation: Rotator,
      hasPositionalTracking: Boolean,
      position: Vector,
    ): Object312

    @JsName("IsDeviceTracking")
    public fun isDeviceTracking(xrDeviceId: XrDeviceId): Boolean
  }
}

@JsName("ETrackingStatus")
public external object TrackingStatus {
  public var NotTracked: String

  public var InertialOnly: String

  public var Tracked: String

  @JsName("ETrackingStatus_MAX")
  public var Max: String
}

@JsName("XRHMDData")
public open external class XrhmdData {
  @JsName("bValid")
  public open var valid: Boolean

  @JsName("DeviceName")
  public open var deviceName: String

  @JsName("ApplicationInstanceID")
  public open var applicationInstanceId: Guid

  @JsName("TrackingStatus")
  public open var trackingStatus: String

  public open var position: Vector

  @JsName("Rotation")
  public open var rotation: Quat

  public open fun clone(): XrhmdData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): XrhmdData

    @JsName("C")
    public fun copy(other: Any): XrhmdData
  }
}

@JsName("EXRVisualType")
public external object ExrVisualType {
  @JsName("Controller")
  public var controller: String

  @JsName("Hand")
  public var hand: String

  @JsName("EXRVisualType_MAX")
  public var exrVisualTypeMax: String
}

@JsName("XRMotionControllerData")
public open external class XrMotionControllerData {
  @JsName("bValid")
  public open var valid: Boolean

  @JsName("DeviceName")
  public open var deviceName: String

  @JsName("ApplicationInstanceID")
  public open var applicationInstanceId: Guid

  @JsName("DeviceVisualType")
  public open var deviceVisualType: String

  @JsName("HandIndex")
  public open var handIndex: String

  @JsName("TrackingStatus")
  public open var trackingStatus: String

  @JsName("GripPosition")
  public open var gripPosition: Vector

  @JsName("GripRotation")
  public open var gripRotation: Quat

  @JsName("AimPosition")
  public open var aimPosition: Vector

  @JsName("AimRotation")
  public open var aimRotation: Quat

  @JsName("HandKeyPositions")
  public open var handKeyPositions: Array<Vector>

  @JsName("HandKeyRotations")
  public open var handKeyRotations: Array<Quat>

  @JsName("HandKeyRadii")
  public open var handKeyRadii: Array<Number>

  @JsName("bIsGrasped")
  public open var isGrasped: Boolean

  public open fun clone(): XrMotionControllerData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): XrMotionControllerData

    @JsName("C")
    public fun copy(other: Any): XrMotionControllerData
  }
}

@JsName("T$315")
public external interface IsMyTurnProvider {
  @JsName("bIsMyTurn")
  public var isMyTurn: Boolean
}

@JsName("T$316")
public external interface PlayerIndexProvider {
  @JsName("PlayerIndex")
  public var playerIndex: Number
}

@JsName("T$317")
public external interface PlayerDisplayNameProvider {
  @JsName("PlayerDisplayName")
  public var playerDisplayName: String
}

@JsName("T$318")
public external interface Object318 {
  @JsName("bFoundID")
  public var foundId: Boolean

  @JsName("Title")
  public var title: String

  @JsName("LockedDescription")
  public var lockedDescription: String

  @JsName("UnlockedDescription")
  public var unlockedDescription: String

  @JsName("bHidden")
  public var hidden: Boolean
}

@JsName("T$319")
public external interface Object319 {
  @JsName("bFoundID")
  public var foundId: Boolean

  @JsName("Progress")
  public var progress: Number
}

@JsName("T$320")
public external interface Object320 {
  @JsName("OutActors")
  public var outActors: Array<Actor>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$321")
public external interface Object321 {
  @JsName("OutComponents")
  public var outComponents: Array<PrimitiveComponent>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$322")
public external interface Object322 {
  @JsName("OutHits")
  public var outHits: Array<HitResult>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$330")
public external interface HandleProvider {
  @JsName("Handle")
  public var handle: TimerHandle
}

@JsName("T$339")
public external interface Object339 {
  @JsName("Canvas")
  public var canvas: Canvas

  @JsName("Size")
  public var size: Vector2d

  @JsName("Context")
  public var context: DrawToRenderTargetContext
}

@JsName("T$340")
public external interface Object340 {
  @JsName("OutSamples")
  public var outSamples: Array<Color>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$341")
public external interface Object341 {
  @JsName("OutLinearSamples")
  public var outLinearSamples: Array<LinearColor>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$342")
public external interface Object342 {
  @JsName("OutRectCenter")
  public var outRectCenter: Vector

  @JsName("OutRectRotation")
  public var outRectRotation: Rotator

  @JsName("OutRectLengthX")
  public var outRectLengthX: Number

  @JsName("OutRectLengthY")
  public var outRectLengthY: Number
}

@JsName("T$343")
public external interface Object343 {
  @JsName("OutRectCenter")
  public var outRectCenter: Vector

  @JsName("OutRectRotation")
  public var outRectRotation: Rotator

  @JsName("OutSideLengthX")
  public var outSideLengthX: Number

  @JsName("OutSideLengthY")
  public var outSideLengthY: Number
}

@JsName("T$344")
public external interface Object344 {
  @JsName("PredictResult")
  public var predictResult: PredictProjectilePathResult

  @JsName("$")
  public var value: Boolean
}

@JsName("T$345")
public external interface Object345 {
  @JsName("OutHit")
  public var outHit: HitResult

  @JsName("OutPathPositions")
  public var outPathPositions: Array<Vector>

  @JsName("OutLastTraceDestination")
  public var outLastTraceDestination: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$347")
public external interface Object347 {
  @JsName("TossVelocity")
  public var tossVelocity: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$352")
public external interface Object352 {
  @JsName("ListenerPosition")
  public var listenerPosition: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$353")
public external interface Object353 {
  @JsName("OutLaunchVelocity")
  public var outLaunchVelocity: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$354")
public external interface OutTransformsProvider {
  @JsName("OutTransforms")
  public var outTransforms: Array<Transform>
}

@JsName("T$355")
public external interface MagnitudesProvider {
  @JsName("Magnitudes")
  public var magnitudes: Array<Number>
}

@JsName("T$356")
public external interface PhasesProvider {
  @JsName("Phases")
  public var phases: Array<Number>
}

@JsName("T$357")
public external interface FoundWidgetsProvider {
  @JsName("FoundWidgets")
  public var foundWidgets: Array<UserWidget>
}

@JsName("T$359")
public external interface Object359 {
  @JsName("SafePadding")
  public var safePadding: Vector4

  @JsName("SafePaddingScale")
  public var safePaddingScale: Vector2d

  @JsName("SpillOverPadding")
  public var spillOverPadding: Vector4
}

@JsName("T$360")
public external interface Object360 {
  @JsName("PixelPosition")
  public var pixelPosition: Vector2d

  @JsName("ViewportPosition")
  public var viewportPosition: Vector2d
}

@JsName("T$361")
public external interface ViewportPositionProvider {
  @JsName("ViewportPosition")
  public var viewportPosition: Vector2d
}

@JsName("T$362")
public external interface AbsoluteCoordinateProvider {
  @JsName("AbsoluteCoordinate")
  public var absoluteCoordinate: Vector2d
}

@JsName("T$363")
public external interface LocalCoordinateProvider {
  @JsName("LocalCoordinate")
  public var localCoordinate: Vector2d
}

@JsName("T$365")
public external interface Object365 {
  @JsName("bTimeWasUsed")
  public var timeWasUsed: Boolean

  @JsName("Orientation")
  public var orientation: Rotator

  public var position: Vector

  @JsName("bProvidedLinearVelocity")
  public var providedLinearVelocity: Boolean

  @JsName("LinearVelocity")
  public var linearVelocity: Vector

  @JsName("bProvidedAngularVelocity")
  public var providedAngularVelocity: Boolean

  @JsName("AngularVelocityRadPerSec")
  public var angularVelocityRadPerSec: Vector

  @JsName("bProvidedLinearAcceleration")
  public var providedLinearAcceleration: Boolean

  @JsName("LinearAcceleration")
  public var linearAcceleration: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$366")
public external interface HmdDataProvider {
  @JsName("HMDData")
  public var hmdData: XrhmdData
}

@JsName("T$367")
public external interface MotionControllerDataProvider {
  @JsName("MotionControllerData")
  public var motionControllerData: XrMotionControllerData
}

public open external class World(
  outer: UObject,
) : UObject {
  @JsName("Layers")
  public open var layers: Array<Layer>

  @JsName("ActiveGroupActors")
  public open var activeGroupActors: Array<Actor>

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("PersistentLevel")
  public open var persistentLevel: Level

  @JsName("NetDriver")
  public open var netDriver: NetDriver

  @JsName("LineBatcher")
  public open var lineBatcher: LineBatchComponent

  @JsName("PersistentLineBatcher")
  public open var persistentLineBatcher: LineBatchComponent

  @JsName("ForegroundLineBatcher")
  public open var foregroundLineBatcher: LineBatchComponent

  @JsName("NetworkManager")
  public open var networkManager: GameNetworkManager

  @JsName("PhysicsCollisionHandler")
  public open var physicsCollisionHandler: PhysicsCollisionHandler

  @JsName("ExtraReferencedObjects")
  public open var extraReferencedObjects: Array<UObject>

  @JsName("PerModuleDataObjects")
  public open var perModuleDataObjects: Array<UObject>

  @JsName("StreamingLevels")
  public open var streamingLevels: Array<LevelStreaming>

  @JsName("StreamingLevelsToConsider")
  public open var streamingLevelsToConsider: StreamingLevelsToConsider

  @JsName("StreamingLevelsPrefix")
  public open var streamingLevelsPrefix: String

  @JsName("CurrentLevelPendingVisibility")
  public open var currentLevelPendingVisibility: Level

  @JsName("CurrentLevelPendingInvisibility")
  public open var currentLevelPendingInvisibility: Level

  @JsName("DemoNetDriver")
  public open var demoNetDriver: DemoNetDriver

  @JsName("MyParticleEventManager")
  public open var myParticleEventManager: ParticleEventManager

  @JsName("DefaultPhysicsVolume")
  public open var defaultPhysicsVolume: PhysicsVolume

  @JsName("bAreConstraintsDirty")
  public open var areConstraintsDirty: Boolean

  @JsName("NavigationSystem")
  public open var navigationSystem: NavigationSystemBase

  @JsName("AuthorityGameMode")
  public open var authorityGameMode: GameModeBase

  @JsName("GameState")
  public open var gameState: GameStateBase

  @JsName("AISystem")
  public open var aiSystem: AiSystemBase

  @JsName("AvoidanceManager")
  public open var avoidanceManager: AvoidanceManager

  @JsName("Levels")
  public open var levels: Array<Level>

  @JsName("LevelCollections")
  public open var levelCollections: Array<LevelCollection>

  @JsName("CurrentLevel")
  public open var currentLevel: Level

  @JsName("OwningGameInstance")
  public open var owningGameInstance: GameInstance

  @JsName("ParameterCollectionInstances")
  public open var parameterCollectionInstances: Array<MaterialParameterCollectionInstance>

  @JsName("CanvasForRenderingToTarget")
  public open var canvasForRenderingToTarget: Canvas

  @JsName("CanvasForDrawMaterialToRenderTarget")
  public open var canvasForDrawMaterialToRenderTarget: Canvas

  @JsName("EditorViews")
  public open var editorViews: Array<LevelViewportInfo>

  @JsName("PhysicsField")
  public open var physicsField: PhysicsFieldComponent

  @JsName("LWILastAssignedUID")
  public open var lwiLastAssignedUid: Any

  @JsName("ComponentsThatNeedPreEndOfFrameSync")
  public open var componentsThatNeedPreEndOfFrameSync: Any

  @JsName("ComponentsThatNeedEndOfFrameUpdate")
  public open var componentsThatNeedEndOfFrameUpdate: Array<ActorComponent>

  @JsName("ComponentsThatNeedEndOfFrameUpdate_OnGameThread")
  public open var componentsThatNeedEndOfFrameUpdateOnGameThread: Array<ActorComponent>

  @JsName("SelectedLevels")
  public open var selectedLevels: Array<Level>

  @JsName("WorldComposition")
  public open var worldComposition: WorldComposition

  @JsName("PSCPool")
  public open var pscPool: WorldPscPool

  @JsName("K2_GetWorldSettings")
  public open fun k2GetWorldSettings(): WorldSettings

  @JsName("HandleTimelineScrubbed")
  public open fun handleTimelineScrubbed(): Unit

  @JsName("EditorDestroyActor")
  public open fun editorDestroyActor(actor: Actor, shouldModifyLevel: Boolean): Boolean

  @JsName("EditorExec")
  public open fun editorExec(cmd: String): Boolean

  @JsName("ExportNavigation")
  public open fun exportNavigation(path: String): String

  @JsName("GetDefaultBrush")
  public open fun getDefaultBrush(): Brush

  @JsName("InvalidateModelGeometry")
  public open fun invalidateModelGeometry(inLevel: Level): Unit

  @JsName("RemoveLevelInstance")
  public open fun removeLevelInstance(): Unit

  @JsName("GetAvailableAudioInputDevices")
  public open
      fun getAvailableAudioInputDevices(onObtainDevicesEvent: UnrealEngineDelegate<(AvailableDevices: Array<AudioInputDeviceInfo>) -> Unit>):
      Unit

  @JsName("GetActors")
  public open fun getActors(actorLayer: ActorLayer): Array<Actor>

  @JsName("ExportAnimSequence")
  public open fun exportAnimSequence(
    sequence: LevelSequence,
    animSequence: AnimSequence,
    exportOption: AnimSeqExportOption,
    binding: SequencerBindingProxy,
  ): Boolean

  @JsName("ExportLevelSequenceFBX")
  public open fun exportLevelSequenceFbx(
    inSequence: LevelSequence,
    inBindings: Array<SequencerBindingProxy>,
    inMasterTracks: Array<MovieSceneTrack>,
    overrideOptions: FbxExportOption,
    inFbxFileName: String,
  ): Boolean

  @JsName("GetBoundObjects")
  public open fun getBoundObjects(
    inSequence: LevelSequence,
    inBindings: Array<SequencerBindingProxy>,
    inRange: SequencerScriptingRange,
  ): Array<SequencerBoundObjects>

  @JsName("GetObjectBindings")
  public open fun getObjectBindings(
    inSequence: LevelSequence,
    inObject: Array<UObject>,
    inRange: SequencerScriptingRange,
  ): Array<SequencerBoundObjects>

  @JsName("ImportFBXToControlRig")
  public open fun importFbxToControlRig(
    inSequence: LevelSequence,
    actorWithControlRigTrack: String,
    selectedControlRigNames: Array<String>,
    importFbxControlRigSettings: MovieSceneUserImportFbxControlRigSettings,
    importFilename: String,
  ): Boolean

  @JsName("ImportLevelSequenceFBX")
  public open fun importLevelSequenceFbx(
    inSequence: LevelSequence,
    inBindings: Array<SequencerBindingProxy>,
    inImportFbxSettings: MovieSceneUserImportFbxSettings,
    inImportFilename: String,
  ): Boolean

  @JsName("BakeToControlRig")
  public open fun bakeToControlRig(
    levelSequence: LevelSequence,
    controlRigClass: UnrealEngineClass,
    exportOptions: AnimSeqExportOption,
    reduceKeys: Boolean,
    tolerance: Number,
    binding: SequencerBindingProxy,
  ): Boolean

  @JsName("FindOrCreateControlRigComponentTrack")
  public open fun findOrCreateControlRigComponentTrack(levelSequence: LevelSequence,
      inBinding: SequencerBindingProxy): Array<MovieSceneTrack>

  @JsName("FindOrCreateControlRigTrack")
  public open fun findOrCreateControlRigTrack(
    levelSequence: LevelSequence,
    controlRigClass: UnrealEngineClass,
    inBinding: SequencerBindingProxy,
  ): MovieSceneTrack

  @JsName("ImportFBXToControlRigTrack")
  public open fun importFbxToControlRigTrack(
    inSequence: LevelSequence,
    inTrack: MovieSceneControlRigParameterTrack,
    inSection: MovieSceneControlRigParameterSection,
    selectedControlRigNames: Array<String>,
    importFbxControlRigSettings: MovieSceneUserImportFbxControlRigSettings,
    importFilename: String,
  ): Boolean

  @JsName("BeginPlay")
  public open fun beginPlay(): Unit

  @JsName("DestroyWorld")
  public open fun destroyWorld(): Unit

  @JsName("InitializeActorsForPlay")
  public open fun initializeActorsForPlay(URL: URL): Unit

  @JsName("GenerateNavigation")
  public open fun generateNavigation(navData: RecastNavMesh): Unit

  @JsName("GetAllActorsOfClassAndTags")
  public open fun getAllActorsOfClassAndTags(
    actorClass: UnrealEngineClass,
    tagsAccept: Array<String>,
    tagsDeny: Array<String>,
    outActors: Array<Actor>,
  ): OutActorsProvider

  @JsName("GetAllActorsOfClassAndTagsInCurrentLevel")
  public open fun getAllActorsOfClassAndTagsInCurrentLevel(
    actorClass: UnrealEngineClass,
    tagsAccept: Array<String>,
    tagsDeny: Array<String>,
    outActors: Array<Actor>,
  ): OutActorsProvider

  @JsName("GetLevels")
  public open fun getLevels(): Array<Level>

  @JsName("GetModel")
  public open fun getModel(): Model

  @JsName("GetWorldBounds")
  public open fun getWorldBounds(): Box

  @JsName("IsGameWorld")
  public open fun isGameWorld(): Boolean

  @JsName("IsPlayInEditor")
  public open fun isPlayInEditor(): Boolean

  @JsName("IsPlayInPreview")
  public open fun isPlayInPreview(): Boolean

  @JsName("TraceChannelTestUtil")
  public open fun traceChannelTestUtil(
    batchOptions: TraceChannelTestBatchOptions,
    start: Vector,
    end: Vector,
    sphereCapsuleRadius: Number,
    capsuleHalfHeight: Number,
    boxHalfSize: Vector,
    orientation: Rotator,
    traceChannel: String,
    objectTypes: Array<String>,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    ignoreSelf: Boolean,
    drawDebugType: String,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): TraceQueryTestResults

  @JsName("RunAllFunctionalTests")
  public open fun runAllFunctionalTests(
    newLog: Boolean,
    runLooped: Boolean,
    failedTestsReproString: String,
  ): Boolean

  @JsName("AutomationWaitForLoading")
  public open fun automationWaitForLoading(latentInfo: LatentActionInfo,
      options: AutomationWaitForLoadingOptions): Unit

  @JsName("DisableStatGroup")
  public open fun disableStatGroup(groupName: String): Unit

  @JsName("EnableStatGroup")
  public open fun enableStatGroup(groupName: String): Unit

  @JsName("SetScalabilityQualityLevelRelativeToMax")
  public open fun setScalabilityQualityLevelRelativeToMax(value: Number): Unit

  @JsName("SetScalabilityQualityToEpic")
  public open fun setScalabilityQualityToEpic(): Unit

  @JsName("SetScalabilityQualityToLow")
  public open fun setScalabilityQualityToLow(): Unit

  @JsName("TakeAutomationScreenshot")
  public open fun takeAutomationScreenshot(
    latentInfo: LatentActionInfo,
    name: String,
    notes: String,
    options: AutomationScreenshotOptions,
  ): Unit

  @JsName("TakeAutomationScreenshotAtCamera")
  public open fun takeAutomationScreenshotAtCamera(
    latentInfo: LatentActionInfo,
    camera: CameraActor,
    nameOverride: String,
    notes: String,
    options: AutomationScreenshotOptions,
  ): Unit

  @JsName("TakeAutomationScreenshotOfUI")
  public open fun takeAutomationScreenshotOfUi(
    latentInfo: LatentActionInfo,
    name: String,
    options: AutomationScreenshotOptions,
  ): Unit

  @JsName("AcquireNiagaraGPURayTracedCollisionGroup")
  public open fun acquireNiagaraGpuRayTracedCollisionGroup(): Number

  @JsName("GetNiagaraParameterCollection")
  public open fun getNiagaraParameterCollection(collection: NiagaraParameterCollection):
      NiagaraParameterCollectionInstance

  @JsName("ReleaseNiagaraGPURayTracedCollisionGroup")
  public open fun releaseNiagaraGpuRayTracedCollisionGroup(collisionGroup: Number): Unit

  @JsName("SetActorNiagaraGPURayTracedCollisionGroup")
  public open fun setActorNiagaraGpuRayTracedCollisionGroup(actor: Actor, collisionGroup: Number):
      Unit

  @JsName("SetComponentNiagaraGPURayTracedCollisionGroup")
  public open fun setComponentNiagaraGpuRayTracedCollisionGroup(primitive: PrimitiveComponent,
      collisionGroup: Number): Unit

  @JsName("SpawnSystemAtLocation")
  public open fun spawnSystemAtLocation(
    systemTemplate: NiagaraSystem,
    location: Vector,
    rotation: Rotator,
    scale: Vector,
    autoDestroy: Boolean,
    autoActivate: Boolean,
    poolingMethod: String,
    preCullCheck: Boolean,
  ): NiagaraComponent

  @JsName("GetIsMyTurn")
  public open fun getIsMyTurn(
    playerController: PlayerController,
    matchId: String,
    isMyTurn: Boolean,
  ): IsMyTurnProvider

  @JsName("GetMyPlayerIndex")
  public open fun getMyPlayerIndex(
    playerController: PlayerController,
    matchId: String,
    playerIndex: Number,
  ): PlayerIndexProvider

  @JsName("GetPlayerDisplayName")
  public open fun getPlayerDisplayName(
    playerController: PlayerController,
    matchId: String,
    playerIndex: Number,
    playerDisplayName: String,
  ): PlayerDisplayNameProvider

  @JsName("RegisterTurnBasedMatchInterfaceObject")
  public open fun registerTurnBasedMatchInterfaceObject(playerController: PlayerController,
      uObject: UObject): Unit

  @JsName("GetCachedAchievementDescription")
  public open fun getCachedAchievementDescription(
    playerController: PlayerController,
    achievementId: String,
    foundId: Boolean,
    title: String,
    lockedDescription: String,
    unlockedDescription: String,
    hidden: Boolean,
  ): Object318

  @JsName("GetCachedAchievementProgress")
  public open fun getCachedAchievementProgress(
    playerController: PlayerController,
    achievementId: String,
    foundId: Boolean,
    progress: Number,
  ): Object319

  @JsName("LogBox")
  public open fun logBox(
    boxShape: Box,
    text: String,
    objectColor: LinearColor,
    logCategory: String,
    addToMessageLog: Boolean,
  ): Unit

  @JsName("LogLocation")
  public open fun logLocation(
    location: Vector,
    text: String,
    objectColor: LinearColor,
    radius: Number,
    logCategory: String,
    addToMessageLog: Boolean,
  ): Unit

  @JsName("LogSegment")
  public open fun logSegment(
    segmentStart: Vector,
    segmentEnd: Vector,
    text: String,
    objectColor: LinearColor,
    thickness: Number,
    categoryName: String,
    addToMessageLog: Boolean,
  ): Unit

  @JsName("LogText")
  public open fun logText(
    text: String,
    logCategory: String,
    addToMessageLog: Boolean,
  ): Unit

  @JsName("BoxOverlapActors")
  public open fun boxOverlapActors(
    boxPos: Vector,
    boxExtent: Vector,
    objectTypes: Array<String>,
    actorClassFilter: UnrealEngineClass,
    actorsToIgnore: Array<Actor>,
    outActors: Array<Actor>,
  ): Object320

  @JsName("BoxOverlapComponents")
  public open fun boxOverlapComponents(
    boxPos: Vector,
    extent: Vector,
    objectTypes: Array<String>,
    componentClassFilter: UnrealEngineClass,
    actorsToIgnore: Array<Actor>,
    outComponents: Array<PrimitiveComponent>,
  ): Object321

  @JsName("BoxTraceMulti")
  public open fun boxTraceMulti(
    start: Vector,
    end: Vector,
    halfSize: Vector,
    orientation: Rotator,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("BoxTraceMultiByProfile")
  public open fun boxTraceMultiByProfile(
    start: Vector,
    end: Vector,
    halfSize: Vector,
    orientation: Rotator,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("BoxTraceMultiForObjects")
  public open fun boxTraceMultiForObjects(
    start: Vector,
    end: Vector,
    halfSize: Vector,
    orientation: Rotator,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("BoxTraceSingle")
  public open fun boxTraceSingle(
    start: Vector,
    end: Vector,
    halfSize: Vector,
    orientation: Rotator,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("BoxTraceSingleByProfile")
  public open fun boxTraceSingleByProfile(
    start: Vector,
    end: Vector,
    halfSize: Vector,
    orientation: Rotator,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("BoxTraceSingleForObjects")
  public open fun boxTraceSingleForObjects(
    start: Vector,
    end: Vector,
    halfSize: Vector,
    orientation: Rotator,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("CapsuleOverlapActors")
  public open fun capsuleOverlapActors(
    capsulePos: Vector,
    radius: Number,
    halfHeight: Number,
    objectTypes: Array<String>,
    actorClassFilter: UnrealEngineClass,
    actorsToIgnore: Array<Actor>,
    outActors: Array<Actor>,
  ): Object320

  @JsName("CapsuleOverlapComponents")
  public open fun capsuleOverlapComponents(
    capsulePos: Vector,
    radius: Number,
    halfHeight: Number,
    objectTypes: Array<String>,
    componentClassFilter: UnrealEngineClass,
    actorsToIgnore: Array<Actor>,
    outComponents: Array<PrimitiveComponent>,
  ): Object321

  @JsName("CapsuleTraceMulti")
  public open fun capsuleTraceMulti(
    start: Vector,
    end: Vector,
    radius: Number,
    halfHeight: Number,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("CapsuleTraceMultiByProfile")
  public open fun capsuleTraceMultiByProfile(
    start: Vector,
    end: Vector,
    radius: Number,
    halfHeight: Number,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("CapsuleTraceMultiForObjects")
  public open fun capsuleTraceMultiForObjects(
    start: Vector,
    end: Vector,
    radius: Number,
    halfHeight: Number,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("CapsuleTraceSingle")
  public open fun capsuleTraceSingle(
    start: Vector,
    end: Vector,
    radius: Number,
    halfHeight: Number,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("CapsuleTraceSingleByProfile")
  public open fun capsuleTraceSingleByProfile(
    start: Vector,
    end: Vector,
    radius: Number,
    halfHeight: Number,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("CapsuleTraceSingleForObjects")
  public open fun capsuleTraceSingleForObjects(
    start: Vector,
    end: Vector,
    radius: Number,
    halfHeight: Number,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("Delay")
  public open fun delay(duration: Number, latentInfo: LatentActionInfo): Unit

  @JsName("DelayUntilNextTick")
  public open fun delayUntilNextTick(latentInfo: LatentActionInfo): Unit

  @JsName("DrawDebugArrow")
  public open fun drawDebugArrow(
    lineStart: Vector,
    lineEnd: Vector,
    arrowSize: Number,
    lineColor: LinearColor,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugBox")
  public open fun drawDebugBox(
    center: Vector,
    extent: Vector,
    lineColor: LinearColor,
    rotation: Rotator,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugCapsule")
  public open fun drawDebugCapsule(
    center: Vector,
    halfHeight: Number,
    radius: Number,
    rotation: Rotator,
    lineColor: LinearColor,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugCircle")
  public open fun drawDebugCircle(
    center: Vector,
    radius: Number,
    numSegments: Number,
    lineColor: LinearColor,
    duration: Number,
    thickness: Number,
    yAxis: Vector,
    zAxis: Vector,
    drawAxis: Boolean,
  ): Unit

  @JsName("DrawDebugCone")
  public open fun drawDebugCone(
    origin: Vector,
    direction: Vector,
    length: Number,
    angleWidth: Number,
    angleHeight: Number,
    numSides: Number,
    lineColor: LinearColor,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugConeInDegrees")
  public open fun drawDebugConeInDegrees(
    origin: Vector,
    direction: Vector,
    length: Number,
    angleWidth: Number,
    angleHeight: Number,
    numSides: Number,
    lineColor: LinearColor,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugCoordinateSystem")
  public open fun drawDebugCoordinateSystem(
    axisLoc: Vector,
    axisRot: Rotator,
    scale: Number,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugCylinder")
  public open fun drawDebugCylinder(
    start: Vector,
    end: Vector,
    radius: Number,
    segments: Number,
    lineColor: LinearColor,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugFloatHistoryLocation")
  public open fun drawDebugFloatHistoryLocation(
    floatHistory: DebugFloatHistory,
    drawLocation: Vector,
    drawSize: Vector2d,
    drawColor: LinearColor,
    duration: Number,
  ): Unit

  @JsName("DrawDebugFloatHistoryTransform")
  public open fun drawDebugFloatHistoryTransform(
    floatHistory: DebugFloatHistory,
    drawTransform: Transform,
    drawSize: Vector2d,
    drawColor: LinearColor,
    duration: Number,
  ): Unit

  @JsName("DrawDebugFrustum")
  public open fun drawDebugFrustum(
    frustumTransform: Transform,
    frustumColor: LinearColor,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugLine")
  public open fun drawDebugLine(
    lineStart: Vector,
    lineEnd: Vector,
    lineColor: LinearColor,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugPlane")
  public open fun drawDebugPlane(
    planeCoordinates: Plane,
    location: Vector,
    size: Number,
    planeColor: LinearColor,
    duration: Number,
  ): Unit

  @JsName("DrawDebugPoint")
  public open fun drawDebugPoint(
    position: Vector,
    size: Number,
    pointColor: LinearColor,
    duration: Number,
  ): Unit

  @JsName("DrawDebugSphere")
  public open fun drawDebugSphere(
    center: Vector,
    radius: Number,
    segments: Number,
    lineColor: LinearColor,
    duration: Number,
    thickness: Number,
  ): Unit

  @JsName("DrawDebugString")
  public open fun drawDebugString(
    textLocation: Vector,
    text: String,
    testBaseActor: Actor,
    textColor: LinearColor,
    duration: Number,
  ): Unit

  @JsName("ExecuteConsoleCommand")
  public open fun executeConsoleCommand(command: String, specificPlayer: PlayerController): Unit

  @JsName("FlushDebugStrings")
  public open fun flushDebugStrings(): Unit

  @JsName("FlushPersistentDebugLines")
  public open fun flushPersistentDebugLines(): Unit

  @JsName("GetGameTimeInSeconds")
  public open fun getGameTimeInSeconds(): Number

  @JsName("HasMultipleLocalPlayers")
  public open fun hasMultipleLocalPlayers(): Boolean

  @JsName("IsDedicatedServer")
  public open fun isDedicatedServer(): Boolean

  @JsName("IsServer")
  public open fun isServer(): Boolean

  @JsName("IsSplitScreen")
  public open fun isSplitScreen(): Boolean

  @JsName("IsStandalone")
  public open fun isStandalone(): Boolean

  @JsName("K2_ClearAndInvalidateTimerHandle")
  public open fun k2ClearAndInvalidateTimerHandle(handle: TimerHandle): HandleProvider

  @JsName("K2_ClearTimerHandle")
  public open fun k2ClearTimerHandle(handle: TimerHandle): Unit

  @JsName("K2_GetTimerElapsedTimeHandle")
  public open fun k2GetTimerElapsedTimeHandle(handle: TimerHandle): Number

  @JsName("K2_GetTimerRemainingTimeHandle")
  public open fun k2GetTimerRemainingTimeHandle(handle: TimerHandle): Number

  @JsName("K2_IsTimerActiveHandle")
  public open fun k2IsTimerActiveHandle(handle: TimerHandle): Boolean

  @JsName("K2_IsTimerPausedHandle")
  public open fun k2IsTimerPausedHandle(handle: TimerHandle): Boolean

  @JsName("K2_PauseTimerHandle")
  public open fun k2PauseTimerHandle(handle: TimerHandle): Unit

  @JsName("K2_TimerExistsHandle")
  public open fun k2TimerExistsHandle(handle: TimerHandle): Boolean

  @JsName("K2_UnPauseTimerHandle")
  public open fun k2UnPauseTimerHandle(handle: TimerHandle): Unit

  @JsName("LineTraceMulti")
  public open fun lineTraceMulti(
    start: Vector,
    end: Vector,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("LineTraceMultiByProfile")
  public open fun lineTraceMultiByProfile(
    start: Vector,
    end: Vector,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("LineTraceMultiForObjects")
  public open fun lineTraceMultiForObjects(
    start: Vector,
    end: Vector,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("LineTraceSingle")
  public open fun lineTraceSingle(
    start: Vector,
    end: Vector,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("LineTraceSingleByProfile")
  public open fun lineTraceSingleByProfile(
    start: Vector,
    end: Vector,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("LineTraceSingleForObjects")
  public open fun lineTraceSingleForObjects(
    start: Vector,
    end: Vector,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("LoadAsset")
  public open fun loadAsset(
    asset: UObject,
    onLoaded: UnrealEngineDelegate<(Loaded: UObject) -> Unit>,
    latentInfo: LatentActionInfo,
  ): Unit

  @JsName("LoadAssetClass")
  public open fun loadAssetClass(
    assetClass: Class,
    onLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) -> Unit>,
    latentInfo: LatentActionInfo,
  ): Unit

  @JsName("PrintString")
  public open fun printString(
    inString: String,
    printToScreen: Boolean,
    printToLog: Boolean,
    textColor: LinearColor,
    duration: Number,
    key: String,
  ): Unit

  @JsName("PrintText")
  public open fun printText(
    inText: String,
    printToScreen: Boolean,
    printToLog: Boolean,
    textColor: LinearColor,
    duration: Number,
    key: String,
  ): Unit

  @JsName("QuitGame")
  public open fun quitGame(
    specificPlayer: PlayerController,
    quitPreference: String,
    ignorePlatformRestrictions: Boolean,
  ): Unit

  @JsName("RetriggerableDelay")
  public open fun retriggerableDelay(duration: Number, latentInfo: LatentActionInfo): Unit

  @JsName("SetSuppressViewportTransitionMessage")
  public open fun setSuppressViewportTransitionMessage(state: Boolean): Unit

  @JsName("SphereOverlapActors")
  public open fun sphereOverlapActors(
    spherePos: Vector,
    sphereRadius: Number,
    objectTypes: Array<String>,
    actorClassFilter: UnrealEngineClass,
    actorsToIgnore: Array<Actor>,
    outActors: Array<Actor>,
  ): Object320

  @JsName("SphereOverlapComponents")
  public open fun sphereOverlapComponents(
    spherePos: Vector,
    sphereRadius: Number,
    objectTypes: Array<String>,
    componentClassFilter: UnrealEngineClass,
    actorsToIgnore: Array<Actor>,
    outComponents: Array<PrimitiveComponent>,
  ): Object321

  @JsName("SphereTraceMulti")
  public open fun sphereTraceMulti(
    start: Vector,
    end: Vector,
    radius: Number,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("SphereTraceMultiByProfile")
  public open fun sphereTraceMultiByProfile(
    start: Vector,
    end: Vector,
    radius: Number,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("SphereTraceMultiForObjects")
  public open fun sphereTraceMultiForObjects(
    start: Vector,
    end: Vector,
    radius: Number,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHits: Array<HitResult>,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object322

  @JsName("SphereTraceSingle")
  public open fun sphereTraceSingle(
    start: Vector,
    end: Vector,
    radius: Number,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("SphereTraceSingleByProfile")
  public open fun sphereTraceSingleByProfile(
    start: Vector,
    end: Vector,
    radius: Number,
    profileName: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("SphereTraceSingleForObjects")
  public open fun sphereTraceSingleForObjects(
    start: Vector,
    end: Vector,
    radius: Number,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    outHit: HitResult,
    ignoreSelf: Boolean,
    traceColor: LinearColor,
    traceHitColor: LinearColor,
    drawTime: Number,
  ): Object53

  @JsName("BeginDrawCanvasToRenderTarget")
  public open fun beginDrawCanvasToRenderTarget(
    textureRenderTarget: TextureRenderTarget2d,
    canvas: Canvas,
    size: Vector2d,
    context: DrawToRenderTargetContext,
  ): Object339

  @JsName("ClearRenderTarget2D")
  public open fun clearRenderTarget2d(textureRenderTarget: TextureRenderTarget2d,
      clearColor: LinearColor): Unit

  @JsName("ConvertRenderTargetToTexture2DEditorOnly")
  public open fun convertRenderTargetToTexture2dEditorOnly(renderTarget: TextureRenderTarget2d,
      texture: Texture2d): Unit

  @JsName("CreateRenderTarget2D")
  public open fun createRenderTarget2d(
    width: Number,
    height: Number,
    format: String,
    clearColor: LinearColor,
    autoGenerateMipMaps: Boolean,
  ): TextureRenderTarget2d

  @JsName("CreateRenderTarget2DArray")
  public open fun createRenderTarget2dArray(
    width: Number,
    height: Number,
    slices: Number,
    format: String,
    clearColor: LinearColor,
    autoGenerateMipMaps: Boolean,
  ): TextureRenderTarget2dArray

  @JsName("CreateRenderTargetVolume")
  public open fun createRenderTargetVolume(
    width: Number,
    height: Number,
    depth: Number,
    format: String,
    clearColor: LinearColor,
    autoGenerateMipMaps: Boolean,
  ): TextureRenderTargetVolume

  @JsName("DrawMaterialToRenderTarget")
  public open fun drawMaterialToRenderTarget(textureRenderTarget: TextureRenderTarget2d,
      material: MaterialInterface): Unit

  @JsName("EndDrawCanvasToRenderTarget")
  public open fun endDrawCanvasToRenderTarget(context: DrawToRenderTargetContext): Unit

  @JsName("ExportRenderTarget")
  public open fun exportRenderTarget(
    textureRenderTarget: TextureRenderTarget2d,
    filePath: String,
    filename: String,
  ): Unit

  @JsName("ExportTexture2D")
  public open fun exportTexture2d(
    texture: Texture2d,
    filePath: String,
    filename: String,
  ): Unit

  @JsName("ImportBufferAsTexture2D")
  public open fun importBufferAsTexture2d(buffer: Array<Number>): Texture2d

  @JsName("ImportFileAsTexture2D")
  public open fun importFileAsTexture2d(filename: String): Texture2d

  @JsName("ReadRenderTarget")
  public open fun readRenderTarget(
    textureRenderTarget: TextureRenderTarget2d,
    outSamples: Array<Color>,
    normalize: Boolean,
  ): Object340

  @JsName("ReadRenderTargetPixel")
  public open fun readRenderTargetPixel(
    textureRenderTarget: TextureRenderTarget2d,
    x: Number,
    y: Number,
  ): Color

  @JsName("ReadRenderTargetRaw")
  public open fun readRenderTargetRaw(
    textureRenderTarget: TextureRenderTarget2d,
    outLinearSamples: Array<LinearColor>,
    normalize: Boolean,
  ): Object341

  @JsName("ReadRenderTargetRawPixel")
  public open fun readRenderTargetRawPixel(
    textureRenderTarget: TextureRenderTarget2d,
    x: Number,
    y: Number,
    normalize: Boolean,
  ): LinearColor

  @JsName("ReadRenderTargetRawPixelArea")
  public open fun readRenderTargetRawPixelArea(
    textureRenderTarget: TextureRenderTarget2d,
    minX: Number,
    minY: Number,
    maxX: Number,
    maxY: Number,
    normalize: Boolean,
  ): Array<LinearColor>

  @JsName("ReadRenderTargetRawUV")
  public open fun readRenderTargetRawUv(
    textureRenderTarget: TextureRenderTarget2d,
    u: Number,
    v: Number,
    normalize: Boolean,
  ): LinearColor

  @JsName("ReadRenderTargetRawUVArea")
  public open fun readRenderTargetRawUvArea(
    textureRenderTarget: TextureRenderTarget2d,
    area: Box2d,
    normalize: Boolean,
  ): Array<LinearColor>

  @JsName("ReadRenderTargetUV")
  public open fun readRenderTargetUv(
    textureRenderTarget: TextureRenderTarget2d,
    u: Number,
    v: Number,
  ): Color

  @JsName("MinAreaRectangle")
  public open fun minAreaRectangle(
    inPoints: Array<Vector>,
    sampleSurfaceNormal: Vector,
    outRectCenter: Vector,
    outRectRotation: Rotator,
    outRectLengthX: Number,
    outRectLengthY: Number,
    debugDraw: Boolean,
  ): Object342

  @JsName("MinimumAreaRectangle")
  public open fun minimumAreaRectangle(
    inVerts: Array<Vector>,
    sampleSurfaceNormal: Vector,
    outRectCenter: Vector,
    outRectRotation: Rotator,
    outSideLengthX: Number,
    outSideLengthY: Number,
    debugDraw: Boolean,
  ): Object343

  @JsName("CreateDynamicMaterialInstance")
  public open fun createDynamicMaterialInstance(
    parent: MaterialInterface,
    optionalName: String,
    creationFlags: String,
  ): MaterialInstanceDynamic

  @JsName("GetScalarParameterValue")
  public open fun getScalarParameterValue(collection: MaterialParameterCollection,
      parameterName: String): Number

  @JsName("GetVectorParameterValue")
  public open fun getVectorParameterValue(collection: MaterialParameterCollection,
      parameterName: String): LinearColor

  @JsName("SetScalarParameterValue")
  public open fun setScalarParameterValue(
    collection: MaterialParameterCollection,
    parameterName: String,
    parameterValue: Number,
  ): Unit

  @JsName("SetVectorParameterValue")
  public open fun setVectorParameterValue(
    collection: MaterialParameterCollection,
    parameterName: String,
    parameterValue: LinearColor,
  ): Unit

  @JsName("ActivateReverbEffect")
  public open fun activateReverbEffect(
    reverbEffect: ReverbEffect,
    tagName: String,
    priority: Number,
    volume: Number,
    fadeTime: Number,
  ): Unit

  @JsName("ApplyRadialDamage")
  public open fun applyRadialDamage(
    baseDamage: Number,
    origin: Vector,
    damageRadius: Number,
    damageTypeClass: UnrealEngineClass,
    ignoreActors: Array<Actor>,
    damageCauser: Actor,
    instigatedByController: Controller,
    doFullDamage: Boolean,
    damagePreventionChannel: String,
  ): Boolean

  @JsName("ApplyRadialDamageWithFalloff")
  public open fun applyRadialDamageWithFalloff(
    baseDamage: Number,
    minimumDamage: Number,
    origin: Vector,
    damageInnerRadius: Number,
    damageOuterRadius: Number,
    damageFalloff: Number,
    damageTypeClass: UnrealEngineClass,
    ignoreActors: Array<Actor>,
    damageCauser: Actor,
    instigatedByController: Controller,
    damagePreventionChannel: String,
  ): Boolean

  @JsName("AreAnyListenersWithinRange")
  public open fun areAnyListenersWithinRange(location: Vector, maximumRange: Number): Boolean

  @JsName("BeginDeferredActorSpawnFromClass")
  public open fun beginDeferredActorSpawnFromClass(
    actorClass: UnrealEngineClass,
    spawnTransform: Transform,
    collisionHandlingOverride: String,
    owner: Actor,
  ): Actor

  @JsName("BeginSpawningActorFromBlueprint")
  public open fun beginSpawningActorFromBlueprint(
    blueprint: Blueprint,
    spawnTransform: Transform,
    noCollisionFail: Boolean,
  ): Actor

  @JsName("Blueprint_PredictProjectilePath_Advanced")
  public open fun blueprintPredictProjectilePathAdvanced(predictParams: PredictProjectilePathParams,
      predictResult: PredictProjectilePathResult): Object344

  @JsName("Blueprint_PredictProjectilePath_ByObjectType")
  public open fun blueprintPredictProjectilePathByObjectType(
    outHit: HitResult,
    outPathPositions: Array<Vector>,
    outLastTraceDestination: Vector,
    startPos: Vector,
    launchVelocity: Vector,
    tracePath: Boolean,
    projectileRadius: Number,
    objectTypes: Array<String>,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    drawDebugTime: Number,
    simFrequency: Number,
    maxSimTime: Number,
    overrideGravityZ: Number,
  ): Object345

  @JsName("Blueprint_PredictProjectilePath_ByTraceChannel")
  public open fun blueprintPredictProjectilePathByTraceChannel(
    outHit: HitResult,
    outPathPositions: Array<Vector>,
    outLastTraceDestination: Vector,
    startPos: Vector,
    launchVelocity: Vector,
    tracePath: Boolean,
    projectileRadius: Number,
    traceChannel: String,
    traceComplex: Boolean,
    actorsToIgnore: Array<Actor>,
    drawDebugType: String,
    drawDebugTime: Number,
    simFrequency: Number,
    maxSimTime: Number,
    overrideGravityZ: Number,
  ): Object345

  @JsName("BlueprintSuggestProjectileVelocity")
  public open fun blueprintSuggestProjectileVelocity(
    tossVelocity: Vector,
    startLocation: Vector,
    endLocation: Vector,
    launchSpeed: Number,
    overrideGravityZ: Number,
    traceOption: String,
    collisionRadius: Number,
    favorHighArc: Boolean,
    drawDebug: Boolean,
  ): Object347

  @JsName("ClearSoundMixClassOverride")
  public open fun clearSoundMixClassOverride(
    inSoundMixModifier: SoundMix,
    inSoundClass: SoundClass,
    fadeOutTime: Number,
  ): Unit

  @JsName("ClearSoundMixModifiers")
  public open fun clearSoundMixModifiers(): Unit

  @JsName("CreatePlayer")
  public open fun createPlayer(controllerId: Number, spawnPlayerController: Boolean):
      PlayerController

  @JsName("CreateSound2D")
  public open fun createSound2d(
    sound: SoundBase,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    concurrencySettings: SoundConcurrency,
    persistAcrossLevelTransition: Boolean,
    autoDestroy: Boolean,
  ): AudioComponent

  @JsName("DeactivateReverbEffect")
  public open fun deactivateReverbEffect(tagName: String): Unit

  @JsName("FlushLevelStreaming")
  public open fun flushLevelStreaming(): Unit

  @JsName("GetActorOfClass")
  public open fun getActorOfClass(actorClass: UnrealEngineClass): Actor

  @JsName("GetAllActorsOfClass")
  public open fun getAllActorsOfClass(actorClass: UnrealEngineClass, outActors: Array<Actor>):
      OutActorsProvider

  @JsName("GetAllActorsOfClassWithTag")
  public open fun getAllActorsOfClassWithTag(
    actorClass: UnrealEngineClass,
    tag: String,
    outActors: Array<Actor>,
  ): OutActorsProvider

  @JsName("GetAllActorsWithInterface")
  public open fun getAllActorsWithInterface(`interface`: UnrealEngineClass,
      outActors: Array<Actor>): OutActorsProvider

  @JsName("GetAllActorsWithTag")
  public open fun getAllActorsWithTag(tag: String, outActors: Array<Actor>): OutActorsProvider

  @JsName("GetAudioTimeSeconds")
  public open fun getAudioTimeSeconds(): Number

  @JsName("GetClosestListenerLocation")
  public open fun getClosestListenerLocation(
    location: Vector,
    maximumRange: Number,
    allowAttenuationOverride: Boolean,
    listenerPosition: Vector,
  ): Object352

  @JsName("GetCurrentLevelName")
  public open fun getCurrentLevelName(removePrefixString: Boolean): String

  @JsName("GetCurrentReverbEffect")
  public open fun getCurrentReverbEffect(): ReverbEffect

  @JsName("GetEnableWorldRendering")
  public open fun getEnableWorldRendering(): Boolean

  @JsName("GetGameInstance")
  public open fun getGameInstance(): GameInstance

  @JsName("GetGameMode")
  public open fun getGameMode(): GameModeBase

  @JsName("GetGameState")
  public open fun getGameState(): GameStateBase

  @JsName("GetGlobalTimeDilation")
  public open fun getGlobalTimeDilation(): Number

  @JsName("GetMaxAudioChannelCount")
  public open fun getMaxAudioChannelCount(): Number

  @JsName("GetNumLocalPlayerControllers")
  public open fun getNumLocalPlayerControllers(): Number

  @JsName("GetNumPlayerControllers")
  public open fun getNumPlayerControllers(): Number

  @JsName("GetNumPlayerStates")
  public open fun getNumPlayerStates(): Number

  @JsName("GetPlayerCameraManager")
  public open fun getPlayerCameraManager(playerIndex: Number): PlayerCameraManager

  @JsName("GetPlayerCharacter")
  public open fun getPlayerCharacter(playerIndex: Number): Character

  @JsName("GetPlayerController")
  public open fun getPlayerController(playerIndex: Number): PlayerController

  @JsName("GetPlayerControllerFromID")
  public open fun getPlayerControllerFromId(controllerId: Number): PlayerController

  @JsName("GetPlayerPawn")
  public open fun getPlayerPawn(playerIndex: Number): Pawn

  @JsName("GetPlayerState")
  public open fun getPlayerState(playerStateIndex: Number): PlayerState

  @JsName("GetPlayerStateFromUniqueNetId")
  public open fun getPlayerStateFromUniqueNetId(uniqueId: UniqueNetIdRepl): PlayerState

  @JsName("GetRealTimeSeconds")
  public open fun getRealTimeSeconds(): Number

  @JsName("GetStreamingLevel")
  public open fun getStreamingLevel(packageName: String): LevelStreaming

  @JsName("GetTimeSeconds")
  public open fun getTimeSeconds(): Number

  @JsName("GetUnpausedTimeSeconds")
  public open fun getUnpausedTimeSeconds(): Number

  @JsName("GetViewportMouseCaptureMode")
  public open fun getViewportMouseCaptureMode(): String

  @JsName("GetWorldDeltaSeconds")
  public open fun getWorldDeltaSeconds(): Number

  @JsName("GetWorldOriginLocation")
  public open fun getWorldOriginLocation(): IntVector

  @JsName("GrassOverlappingSphereCount")
  public open fun grassOverlappingSphereCount(
    staticMesh: StaticMesh,
    centerPosition: Vector,
    radius: Number,
  ): Number

  @JsName("IsGamePaused")
  public open fun isGamePaused(): Boolean

  @JsName("IsSplitscreenForceDisabled")
  public open fun isSplitscreenForceDisabled(): Boolean

  @JsName("LoadStreamLevel")
  public open fun loadStreamLevel(
    levelName: String,
    makeVisibleAfterLoad: Boolean,
    shouldBlockOnLoad: Boolean,
    latentInfo: LatentActionInfo,
  ): Unit

  @JsName("LoadStreamLevelBySoftObjectPtr")
  public open fun loadStreamLevelBySoftObjectPtr(
    level: World,
    makeVisibleAfterLoad: Boolean,
    shouldBlockOnLoad: Boolean,
    latentInfo: LatentActionInfo,
  ): Unit

  @JsName("OpenLevel")
  public open fun openLevel(
    levelName: String,
    absolute: Boolean,
    options: String,
  ): Unit

  @JsName("OpenLevelBySoftObjectPtr")
  public open fun openLevelBySoftObjectPtr(
    level: World,
    absolute: Boolean,
    options: String,
  ): Unit

  @JsName("PlayDialogue2D")
  public open fun playDialogue2d(
    dialogue: DialogueWave,
    context: DialogueContext,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
  ): Unit

  @JsName("PlayDialogueAtLocation")
  public open fun playDialogueAtLocation(
    dialogue: DialogueWave,
    context: DialogueContext,
    location: Vector,
    rotation: Rotator,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    attenuationSettings: SoundAttenuation,
  ): Unit

  @JsName("PlaySound2D")
  public open fun playSound2d(
    sound: SoundBase,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    concurrencySettings: SoundConcurrency,
    owningActor: Actor,
    isUiSound: Boolean,
  ): Unit

  @JsName("PlaySoundAtLocation")
  public open fun playSoundAtLocation(
    sound: SoundBase,
    location: Vector,
    rotation: Rotator,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    attenuationSettings: SoundAttenuation,
    concurrencySettings: SoundConcurrency,
    owningActor: Actor,
    initialParams: InitialActiveSoundParams,
  ): Unit

  @JsName("PlayWorldCameraShake")
  public open fun playWorldCameraShake(
    shake: UnrealEngineClass,
    epicenter: Vector,
    innerRadius: Number,
    outerRadius: Number,
    falloff: Number,
    orientShakeTowardsEpicenter: Boolean,
  ): Unit

  @JsName("PopSoundMixModifier")
  public open fun popSoundMixModifier(inSoundMixModifier: SoundMix): Unit

  @JsName("PushSoundMixModifier")
  public open fun pushSoundMixModifier(inSoundMixModifier: SoundMix): Unit

  @JsName("RebaseLocalOriginOntoZero")
  public open fun rebaseLocalOriginOntoZero(worldLocation: Vector): Vector

  @JsName("RebaseZeroOriginOntoLocal")
  public open fun rebaseZeroOriginOntoLocal(worldLocation: Vector): Vector

  @JsName("SetBaseSoundMix")
  public open fun setBaseSoundMix(inSoundMix: SoundMix): Unit

  @JsName("SetEnableWorldRendering")
  public open fun setEnableWorldRendering(enable: Boolean): Unit

  @JsName("SetForceDisableSplitscreen")
  public open fun setForceDisableSplitscreen(disable: Boolean): Unit

  @JsName("SetGamePaused")
  public open fun setGamePaused(paused: Boolean): Boolean

  @JsName("SetGlobalListenerFocusParameters")
  public open fun setGlobalListenerFocusParameters(
    focusAzimuthScale: Number,
    nonFocusAzimuthScale: Number,
    focusDistanceScale: Number,
    nonFocusDistanceScale: Number,
    focusVolumeScale: Number,
    nonFocusVolumeScale: Number,
    focusPriorityScale: Number,
    nonFocusPriorityScale: Number,
  ): Unit

  @JsName("SetGlobalPitchModulation")
  public open fun setGlobalPitchModulation(pitchModulation: Number, timeSec: Number): Unit

  @JsName("SetGlobalTimeDilation")
  public open fun setGlobalTimeDilation(timeDilation: Number): Unit

  @JsName("SetMaxAudioChannelsScaled")
  public open fun setMaxAudioChannelsScaled(maxChannelCountScale: Number): Unit

  @JsName("SetSoundClassDistanceScale")
  public open fun setSoundClassDistanceScale(
    soundClass: SoundClass,
    distanceAttenuationScale: Number,
    timeSec: Number,
  ): Unit

  @JsName("SetSoundMixClassOverride")
  public open fun setSoundMixClassOverride(
    inSoundMixModifier: SoundMix,
    inSoundClass: SoundClass,
    volume: Number,
    pitch: Number,
    fadeInTime: Number,
    applyToChildren: Boolean,
  ): Unit

  @JsName("SetViewportMouseCaptureMode")
  public open fun setViewportMouseCaptureMode(mouseCaptureMode: String): Unit

  @JsName("SetWorldOriginLocation")
  public open fun setWorldOriginLocation(newLocation: IntVector): Unit

  @JsName("SpawnDecalAtLocation")
  public open fun spawnDecalAtLocation(
    decalMaterial: MaterialInterface,
    decalSize: Vector,
    location: Vector,
    rotation: Rotator,
    lifeSpan: Number,
  ): DecalComponent

  @JsName("SpawnDialogue2D")
  public open fun spawnDialogue2d(
    dialogue: DialogueWave,
    context: DialogueContext,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    autoDestroy: Boolean,
  ): AudioComponent

  @JsName("SpawnDialogueAtLocation")
  public open fun spawnDialogueAtLocation(
    dialogue: DialogueWave,
    context: DialogueContext,
    location: Vector,
    rotation: Rotator,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    attenuationSettings: SoundAttenuation,
    autoDestroy: Boolean,
  ): AudioComponent

  @JsName("SpawnEmitterAtLocation")
  public open fun spawnEmitterAtLocation(
    emitterTemplate: ParticleSystem,
    location: Vector,
    rotation: Rotator,
    scale: Vector,
    autoDestroy: Boolean,
    poolingMethod: String,
    autoActivateSystem: Boolean,
  ): ParticleSystemComponent

  @JsName("SpawnForceFeedbackAtLocation")
  public open fun spawnForceFeedbackAtLocation(
    forceFeedbackEffect: ForceFeedbackEffect,
    location: Vector,
    rotation: Rotator,
    looping: Boolean,
    intensityMultiplier: Number,
    startTime: Number,
    attenuationSettings: ForceFeedbackAttenuation,
    autoDestroy: Boolean,
  ): ForceFeedbackComponent

  @JsName("SpawnSound2D")
  public open fun spawnSound2d(
    sound: SoundBase,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    concurrencySettings: SoundConcurrency,
    persistAcrossLevelTransition: Boolean,
    autoDestroy: Boolean,
  ): AudioComponent

  @JsName("SpawnSoundAtLocation")
  public open fun spawnSoundAtLocation(
    sound: SoundBase,
    location: Vector,
    rotation: Rotator,
    volumeMultiplier: Number,
    pitchMultiplier: Number,
    startTime: Number,
    attenuationSettings: SoundAttenuation,
    concurrencySettings: SoundConcurrency,
    autoDestroy: Boolean,
  ): AudioComponent

  @JsName("SuggestProjectileVelocity_CustomArc")
  public open fun suggestProjectileVelocityCustomArc(
    outLaunchVelocity: Vector,
    startPos: Vector,
    endPos: Vector,
    overrideGravityZ: Number,
    arcParam: Number,
  ): Object353

  @JsName("UnloadStreamLevel")
  public open fun unloadStreamLevel(
    levelName: String,
    latentInfo: LatentActionInfo,
    shouldBlockOnUnload: Boolean,
  ): Unit

  @JsName("UnloadStreamLevelBySoftObjectPtr")
  public open fun unloadStreamLevelBySoftObjectPtr(
    level: World,
    latentInfo: LatentActionInfo,
    shouldBlockOnUnload: Boolean,
  ): Unit

  @JsName("FoliageOverlappingBoxCount")
  public open fun foliageOverlappingBoxCount(staticMesh: StaticMesh, box: Box): Number

  @JsName("FoliageOverlappingBoxTransforms")
  public open fun foliageOverlappingBoxTransforms(
    staticMesh: StaticMesh,
    box: Box,
    outTransforms: Array<Transform>,
  ): OutTransformsProvider

  @JsName("FoliageOverlappingSphereCount")
  public open fun foliageOverlappingSphereCount(
    staticMesh: StaticMesh,
    centerPosition: Vector,
    radius: Number,
  ): Number

  @JsName("AddMasterSubmixEffect")
  public open fun addMasterSubmixEffect(submixEffectPreset: SoundEffectSubmixPreset): Unit

  @JsName("AddSourceEffectToPresetChain")
  public open fun addSourceEffectToPresetChain(presetChain: SoundEffectSourcePresetChain,
      entry: SourceEffectChainEntry): Unit

  @JsName("AddSubmixEffect")
  public open fun addSubmixEffect(soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset): Number

  @JsName("ClearMasterSubmixEffects")
  public open fun clearMasterSubmixEffects(): Unit

  @JsName("ClearSubmixEffectChainOverride")
  public open fun clearSubmixEffectChainOverride(soundSubmix: SoundSubmix, fadeTimeSec: Number):
      Unit

  @JsName("ClearSubmixEffects")
  public open fun clearSubmixEffects(soundSubmix: SoundSubmix): Unit

  @JsName("GetAvailableAudioOutputDevices")
  public open
      fun getAvailableAudioOutputDevices(onObtainDevicesEvent: UnrealEngineDelegate<(AvailableDevices: Array<AudioOutputDeviceInfo>) -> Unit>):
      Unit

  @JsName("GetCurrentAudioOutputDeviceName")
  public open
      fun getCurrentAudioOutputDeviceName(onObtainCurrentDeviceEvent: UnrealEngineDelegate<(CurrentDevice: String) -> Unit>):
      Unit

  @JsName("GetMagnitudeForFrequencies")
  public open fun getMagnitudeForFrequencies(
    frequencies: Array<Number>,
    magnitudes: Array<Number>,
    submixToAnalyze: SoundSubmix,
  ): MagnitudesProvider

  @JsName("GetNumberOfEntriesInSourceEffectChain")
  public open fun getNumberOfEntriesInSourceEffectChain(presetChain: SoundEffectSourcePresetChain):
      Number

  @JsName("GetPhaseForFrequencies")
  public open fun getPhaseForFrequencies(
    frequencies: Array<Number>,
    phases: Array<Number>,
    submixToAnalyze: SoundSubmix,
  ): PhasesProvider

  @JsName("IsAudioBusActive")
  public open fun isAudioBusActive(audioBus: AudioBus): Boolean

  @JsName("PauseRecordingOutput")
  public open fun pauseRecordingOutput(submixToPause: SoundSubmix): Unit

  @JsName("RemoveMasterSubmixEffect")
  public open fun removeMasterSubmixEffect(submixEffectPreset: SoundEffectSubmixPreset): Unit

  @JsName("RemoveSourceEffectFromPresetChain")
  public open fun removeSourceEffectFromPresetChain(presetChain: SoundEffectSourcePresetChain,
      entryIndex: Number): Unit

  @JsName("RemoveSubmixEffect")
  public open fun removeSubmixEffect(soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset): Unit

  @JsName("RemoveSubmixEffectAtIndex")
  public open fun removeSubmixEffectAtIndex(soundSubmix: SoundSubmix, submixChainIndex: Number):
      Unit

  @JsName("RemoveSubmixEffectPreset")
  public open fun removeSubmixEffectPreset(soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset): Unit

  @JsName("RemoveSubmixEffectPresetAtIndex")
  public open fun removeSubmixEffectPresetAtIndex(soundSubmix: SoundSubmix,
      submixChainIndex: Number): Unit

  @JsName("ReplaceSoundEffectSubmix")
  public open fun replaceSoundEffectSubmix(
    inSoundSubmix: SoundSubmix,
    submixChainIndex: Number,
    submixEffectPreset: SoundEffectSubmixPreset,
  ): Unit

  @JsName("ReplaceSubmixEffect")
  public open fun replaceSubmixEffect(
    inSoundSubmix: SoundSubmix,
    submixChainIndex: Number,
    submixEffectPreset: SoundEffectSubmixPreset,
  ): Unit

  @JsName("ResumeRecordingOutput")
  public open fun resumeRecordingOutput(submixToPause: SoundSubmix): Unit

  @JsName("SetBypassSourceEffectChainEntry")
  public open fun setBypassSourceEffectChainEntry(
    presetChain: SoundEffectSourcePresetChain,
    entryIndex: Number,
    bypassed: Boolean,
  ): Unit

  @JsName("SetSubmixEffectChainOverride")
  public open fun setSubmixEffectChainOverride(
    soundSubmix: SoundSubmix,
    submixEffectPresetChain: Array<SoundEffectSubmixPreset>,
    fadeTimeSec: Number,
  ): Unit

  @JsName("StartAnalyzingOutput")
  public open fun startAnalyzingOutput(
    submixToAnalyze: SoundSubmix,
    fftSize: String,
    interpolationMethod: String,
    windowType: String,
    hopSize: Number,
    spectrumType: String,
  ): Unit

  @JsName("StartAudioBus")
  public open fun startAudioBus(audioBus: AudioBus): Unit

  @JsName("StartRecordingOutput")
  public open fun startRecordingOutput(expectedDuration: Number, submixToRecord: SoundSubmix): Unit

  @JsName("StopAnalyzingOutput")
  public open fun stopAnalyzingOutput(submixToStopAnalyzing: SoundSubmix): Unit

  @JsName("StopAudioBus")
  public open fun stopAudioBus(audioBus: AudioBus): Unit

  @JsName("StopRecordingOutput")
  public open fun stopRecordingOutput(
    exportType: String,
    name: String,
    path: String,
    submixToRecord: SoundSubmix,
    existingSoundWaveToOverwrite: SoundWave,
  ): SoundWave

  @JsName("SwapAudioOutputDevice")
  public open fun swapAudioOutputDevice(newDeviceId: String,
      onCompletedDeviceSwap: UnrealEngineDelegate<(SwapResult: SwapAudioOutputResult) -> Unit>):
      Unit

  @JsName("GetMousePositionOnViewport")
  public open fun getMousePositionOnViewport(): Vector2d

  @JsName("GetViewportScale")
  public open fun getViewportScale(): Number

  @JsName("GetViewportSize")
  public open fun getViewportSize(): Vector2d

  @JsName("GetViewportWidgetGeometry")
  public open fun getViewportWidgetGeometry(): Geometry

  @JsName("RemoveAllWidgets")
  public open fun removeAllWidgets(): Unit

  @JsName("Create")
  public open fun create(widgetType: UnrealEngineClass, owningPlayer: PlayerController): UserWidget

  @JsName("GetAllWidgetsOfClass")
  public open fun getAllWidgetsOfClass(
    foundWidgets: Array<UserWidget>,
    widgetClass: UnrealEngineClass,
    topLevelOnly: Boolean,
  ): FoundWidgetsProvider

  @JsName("GetAllWidgetsWithInterface")
  public open fun getAllWidgetsWithInterface(
    foundWidgets: Array<UserWidget>,
    `interface`: UnrealEngineClass,
    topLevelOnly: Boolean,
  ): FoundWidgetsProvider

  @JsName("GetSafeZonePadding")
  public open fun getSafeZonePadding(
    safePadding: Vector4,
    safePaddingScale: Vector2d,
    spillOverPadding: Vector4,
  ): Object359

  @JsName("SetHardwareCursor")
  public open fun setHardwareCursor(
    cursorShape: String,
    cursorName: String,
    hotSpot: Vector2d,
  ): Boolean

  @JsName("AbsoluteToViewport")
  public open fun absoluteToViewport(
    absoluteDesktopCoordinate: Vector2d,
    pixelPosition: Vector2d,
    viewportPosition: Vector2d,
  ): Object360

  @JsName("LocalToViewport")
  public open fun localToViewport(
    geometry: Geometry,
    localCoordinate: Vector2d,
    pixelPosition: Vector2d,
    viewportPosition: Vector2d,
  ): Object360

  @JsName("ScreenToViewport")
  public open fun screenToViewport(screenPosition: Vector2d, viewportPosition: Vector2d):
      ViewportPositionProvider

  @JsName("ScreenToWidgetAbsolute")
  public open fun screenToWidgetAbsolute(
    screenPosition: Vector2d,
    absoluteCoordinate: Vector2d,
    includeWindowPosition: Boolean,
  ): AbsoluteCoordinateProvider

  @JsName("ScreenToWidgetLocal")
  public open fun screenToWidgetLocal(
    geometry: Geometry,
    screenPosition: Vector2d,
    localCoordinate: Vector2d,
    includeWindowPosition: Boolean,
  ): LocalCoordinateProvider

  @JsName("CreateMoveToProxyObject")
  public open fun createMoveToProxyObject(
    pawn: Pawn,
    destination: Vector,
    targetActor: Actor,
    acceptanceRadius: Number,
    stopOnOverlap: Boolean,
  ): AiAsyncTaskBlueprintProxy

  @JsName("SpawnAIFromClass")
  public open fun spawnAiFromClass(
    pawnClass: UnrealEngineClass,
    behaviorTree: BehaviorTree,
    location: Vector,
    rotation: Rotator,
    noCollisionFail: Boolean,
    owner: Actor,
  ): Pawn

  @JsName("GetAllActorsOfClassMatchingTagQuery")
  public open fun getAllActorsOfClassMatchingTagQuery(
    actorClass: UnrealEngineClass,
    gameplayTagQuery: GameplayTagQuery,
    outActors: Array<Actor>,
  ): OutActorsProvider

  @JsName("GetControllerTransformForTime")
  public open fun getControllerTransformForTime(
    controllerIndex: Number,
    motionSource: String,
    time: Timespan,
    timeWasUsed: Boolean,
    orientation: Rotator,
    position: Vector,
    providedLinearVelocity: Boolean,
    linearVelocity: Vector,
    providedAngularVelocity: Boolean,
    angularVelocityRadPerSec: Vector,
    providedLinearAcceleration: Boolean,
    linearAcceleration: Vector,
  ): Object365

  @JsName("GetDeviceWorldPose")
  public open fun getDeviceWorldPose(
    xrDeviceId: XrDeviceId,
    isTracked: Boolean,
    orientation: Rotator,
    hasPositionalTracking: Boolean,
    position: Vector,
  ): Object312

  @JsName("GetHMDData")
  public open fun getHmdData(hmdData: XrhmdData): HmdDataProvider

  @JsName("GetMotionControllerData")
  public open fun getMotionControllerData(hand: String,
      motionControllerData: XrMotionControllerData): MotionControllerDataProvider

  @JsName("GetTrackingToWorldTransform")
  public open fun getTrackingToWorldTransform(): Transform

  @JsName("GetWorldToMetersScale")
  public open fun getWorldToMetersScale(): Number

  @JsName("SetWorldToMetersScale")
  public open fun setWorldToMetersScale(newScale: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): World

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): World

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): World

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): World

    @JsName("C")
    public fun copy(other: UObject): World

    @JsName("C")
    public fun copy(other: Any): World

    @JsName("EditorDestroyActor")
    public fun editorDestroyActor(
      world: World,
      actor: Actor,
      shouldModifyLevel: Boolean,
    ): Boolean

    @JsName("EditorExec")
    public fun editorExec(world: World, cmd: String): Boolean

    @JsName("ExportNavigation")
    public fun exportNavigation(inWorld: World, path: String): String

    @JsName("GetDefaultBrush")
    public fun getDefaultBrush(world: World): Brush

    @JsName("InvalidateModelGeometry")
    public fun invalidateModelGeometry(world: World, inLevel: Level): Unit

    @JsName("RemoveLevelInstance")
    public fun removeLevelInstance(world: World): Unit

    @JsName("GetAvailableAudioInputDevices")
    public fun getAvailableAudioInputDevices(worldContextObject: UObject,
        onObtainDevicesEvent: UnrealEngineDelegate<(AvailableDevices: Array<AudioInputDeviceInfo>) -> Unit>):
        Unit

    @JsName("GetActors")
    public fun getActors(worldContextObject: UObject, actorLayer: ActorLayer): Array<Actor>

    @JsName("ExportAnimSequence")
    public fun exportAnimSequence(
      world: World,
      sequence: LevelSequence,
      animSequence: AnimSequence,
      exportOption: AnimSeqExportOption,
      binding: SequencerBindingProxy,
    ): Boolean

    @JsName("ExportLevelSequenceFBX")
    public fun exportLevelSequenceFbx(
      inWorld: World,
      inSequence: LevelSequence,
      inBindings: Array<SequencerBindingProxy>,
      inMasterTracks: Array<MovieSceneTrack>,
      overrideOptions: FbxExportOption,
      inFbxFileName: String,
    ): Boolean

    @JsName("GetBoundObjects")
    public fun getBoundObjects(
      inWorld: World,
      inSequence: LevelSequence,
      inBindings: Array<SequencerBindingProxy>,
      inRange: SequencerScriptingRange,
    ): Array<SequencerBoundObjects>

    @JsName("GetObjectBindings")
    public fun getObjectBindings(
      inWorld: World,
      inSequence: LevelSequence,
      inObject: Array<UObject>,
      inRange: SequencerScriptingRange,
    ): Array<SequencerBoundObjects>

    @JsName("ImportFBXToControlRig")
    public fun importFbxToControlRig(
      world: World,
      inSequence: LevelSequence,
      actorWithControlRigTrack: String,
      selectedControlRigNames: Array<String>,
      importFbxControlRigSettings: MovieSceneUserImportFbxControlRigSettings,
      importFilename: String,
    ): Boolean

    @JsName("ImportLevelSequenceFBX")
    public fun importLevelSequenceFbx(
      inWorld: World,
      inSequence: LevelSequence,
      inBindings: Array<SequencerBindingProxy>,
      inImportFbxSettings: MovieSceneUserImportFbxSettings,
      inImportFilename: String,
    ): Boolean

    @JsName("BakeToControlRig")
    public fun bakeToControlRig(
      world: World,
      levelSequence: LevelSequence,
      controlRigClass: UnrealEngineClass,
      exportOptions: AnimSeqExportOption,
      reduceKeys: Boolean,
      tolerance: Number,
      binding: SequencerBindingProxy,
    ): Boolean

    @JsName("FindOrCreateControlRigComponentTrack")
    public fun findOrCreateControlRigComponentTrack(
      world: World,
      levelSequence: LevelSequence,
      inBinding: SequencerBindingProxy,
    ): Array<MovieSceneTrack>

    @JsName("FindOrCreateControlRigTrack")
    public fun findOrCreateControlRigTrack(
      world: World,
      levelSequence: LevelSequence,
      controlRigClass: UnrealEngineClass,
      inBinding: SequencerBindingProxy,
    ): MovieSceneTrack

    @JsName("ImportFBXToControlRigTrack")
    public fun importFbxToControlRigTrack(
      world: World,
      inSequence: LevelSequence,
      inTrack: MovieSceneControlRigParameterTrack,
      inSection: MovieSceneControlRigParameterSection,
      selectedControlRigNames: Array<String>,
      importFbxControlRigSettings: MovieSceneUserImportFbxControlRigSettings,
      importFilename: String,
    ): Boolean

    @JsName("BeginPlay")
    public fun beginPlay(world: World): Unit

    @JsName("DestroyWorld")
    public fun destroyWorld(world: World): Unit

    @JsName("InitializeActorsForPlay")
    public fun initializeActorsForPlay(world: World, URL: URL): Unit

    @JsName("GenerateNavigation")
    public fun generateNavigation(inWorld: World, navData: RecastNavMesh): Unit

    @JsName("GetAllActorsOfClassAndTags")
    public fun getAllActorsOfClassAndTags(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      tagsAccept: Array<String>,
      tagsDeny: Array<String>,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAllActorsOfClassAndTagsInCurrentLevel")
    public fun getAllActorsOfClassAndTagsInCurrentLevel(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      tagsAccept: Array<String>,
      tagsDeny: Array<String>,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetLevels")
    public fun getLevels(world: World): Array<Level>

    @JsName("GetModel")
    public fun getModel(world: World): Model

    @JsName("GetWorldBounds")
    public fun getWorldBounds(inWorld: World): Box

    @JsName("IsGameWorld")
    public fun isGameWorld(world: World): Boolean

    @JsName("IsPlayInEditor")
    public fun isPlayInEditor(world: World): Boolean

    @JsName("IsPlayInPreview")
    public fun isPlayInPreview(world: World): Boolean

    @JsName("TraceChannelTestUtil")
    public fun traceChannelTestUtil(
      worldContextObject: UObject,
      batchOptions: TraceChannelTestBatchOptions,
      start: Vector,
      end: Vector,
      sphereCapsuleRadius: Number,
      capsuleHalfHeight: Number,
      boxHalfSize: Vector,
      orientation: Rotator,
      traceChannel: String,
      objectTypes: Array<String>,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      ignoreSelf: Boolean,
      drawDebugType: String,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): TraceQueryTestResults

    @JsName("RunAllFunctionalTests")
    public fun runAllFunctionalTests(
      worldContextObject: UObject,
      newLog: Boolean,
      runLooped: Boolean,
      failedTestsReproString: String,
    ): Boolean

    @JsName("AutomationWaitForLoading")
    public fun automationWaitForLoading(
      worldContextObject: UObject,
      latentInfo: LatentActionInfo,
      options: AutomationWaitForLoadingOptions,
    ): Unit

    @JsName("DisableStatGroup")
    public fun disableStatGroup(worldContextObject: UObject, groupName: String): Unit

    @JsName("EnableStatGroup")
    public fun enableStatGroup(worldContextObject: UObject, groupName: String): Unit

    @JsName("SetScalabilityQualityLevelRelativeToMax")
    public fun setScalabilityQualityLevelRelativeToMax(worldContextObject: UObject,
        value: Number): Unit

    @JsName("SetScalabilityQualityToEpic")
    public fun setScalabilityQualityToEpic(worldContextObject: UObject): Unit

    @JsName("SetScalabilityQualityToLow")
    public fun setScalabilityQualityToLow(worldContextObject: UObject): Unit

    @JsName("TakeAutomationScreenshot")
    public fun takeAutomationScreenshot(
      worldContextObject: UObject,
      latentInfo: LatentActionInfo,
      name: String,
      notes: String,
      options: AutomationScreenshotOptions,
    ): Unit

    @JsName("TakeAutomationScreenshotAtCamera")
    public fun takeAutomationScreenshotAtCamera(
      worldContextObject: UObject,
      latentInfo: LatentActionInfo,
      camera: CameraActor,
      nameOverride: String,
      notes: String,
      options: AutomationScreenshotOptions,
    ): Unit

    @JsName("TakeAutomationScreenshotOfUI")
    public fun takeAutomationScreenshotOfUi(
      worldContextObject: UObject,
      latentInfo: LatentActionInfo,
      name: String,
      options: AutomationScreenshotOptions,
    ): Unit

    @JsName("AcquireNiagaraGPURayTracedCollisionGroup")
    public fun acquireNiagaraGpuRayTracedCollisionGroup(worldContextObject: UObject): Number

    @JsName("GetNiagaraParameterCollection")
    public fun getNiagaraParameterCollection(worldContextObject: UObject,
        collection: NiagaraParameterCollection): NiagaraParameterCollectionInstance

    @JsName("ReleaseNiagaraGPURayTracedCollisionGroup")
    public fun releaseNiagaraGpuRayTracedCollisionGroup(worldContextObject: UObject,
        collisionGroup: Number): Unit

    @JsName("SetActorNiagaraGPURayTracedCollisionGroup")
    public fun setActorNiagaraGpuRayTracedCollisionGroup(
      worldContextObject: UObject,
      actor: Actor,
      collisionGroup: Number,
    ): Unit

    @JsName("SetComponentNiagaraGPURayTracedCollisionGroup")
    public fun setComponentNiagaraGpuRayTracedCollisionGroup(
      worldContextObject: UObject,
      primitive: PrimitiveComponent,
      collisionGroup: Number,
    ): Unit

    @JsName("SpawnSystemAtLocation")
    public fun spawnSystemAtLocation(
      worldContextObject: UObject,
      systemTemplate: NiagaraSystem,
      location: Vector,
      rotation: Rotator,
      scale: Vector,
      autoDestroy: Boolean,
      autoActivate: Boolean,
      poolingMethod: String,
      preCullCheck: Boolean,
    ): NiagaraComponent

    @JsName("GetIsMyTurn")
    public fun getIsMyTurn(
      worldContextObject: UObject,
      playerController: PlayerController,
      matchId: String,
      isMyTurn: Boolean,
    ): IsMyTurnProvider

    @JsName("GetMyPlayerIndex")
    public fun getMyPlayerIndex(
      worldContextObject: UObject,
      playerController: PlayerController,
      matchId: String,
      playerIndex: Number,
    ): PlayerIndexProvider

    @JsName("GetPlayerDisplayName")
    public fun getPlayerDisplayName(
      worldContextObject: UObject,
      playerController: PlayerController,
      matchId: String,
      playerIndex: Number,
      playerDisplayName: String,
    ): PlayerDisplayNameProvider

    @JsName("RegisterTurnBasedMatchInterfaceObject")
    public fun registerTurnBasedMatchInterfaceObject(
      worldContextObject: UObject,
      playerController: PlayerController,
      uObject: UObject,
    ): Unit

    @JsName("GetCachedAchievementDescription")
    public fun getCachedAchievementDescription(
      worldContextObject: UObject,
      playerController: PlayerController,
      achievementId: String,
      foundId: Boolean,
      title: String,
      lockedDescription: String,
      unlockedDescription: String,
      hidden: Boolean,
    ): Object318

    @JsName("GetCachedAchievementProgress")
    public fun getCachedAchievementProgress(
      worldContextObject: UObject,
      playerController: PlayerController,
      achievementId: String,
      foundId: Boolean,
      progress: Number,
    ): Object319

    @JsName("LogBox")
    public fun logBox(
      worldContextObject: UObject,
      boxShape: Box,
      text: String,
      objectColor: LinearColor,
      logCategory: String,
      addToMessageLog: Boolean,
    ): Unit

    @JsName("LogLocation")
    public fun logLocation(
      worldContextObject: UObject,
      location: Vector,
      text: String,
      objectColor: LinearColor,
      radius: Number,
      logCategory: String,
      addToMessageLog: Boolean,
    ): Unit

    @JsName("LogSegment")
    public fun logSegment(
      worldContextObject: UObject,
      segmentStart: Vector,
      segmentEnd: Vector,
      text: String,
      objectColor: LinearColor,
      thickness: Number,
      categoryName: String,
      addToMessageLog: Boolean,
    ): Unit

    @JsName("LogText")
    public fun logText(
      worldContextObject: UObject,
      text: String,
      logCategory: String,
      addToMessageLog: Boolean,
    ): Unit

    @JsName("BoxOverlapActors")
    public fun boxOverlapActors(
      worldContextObject: UObject,
      boxPos: Vector,
      boxExtent: Vector,
      objectTypes: Array<String>,
      actorClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outActors: Array<Actor>,
    ): Object320

    @JsName("BoxOverlapComponents")
    public fun boxOverlapComponents(
      worldContextObject: UObject,
      boxPos: Vector,
      extent: Vector,
      objectTypes: Array<String>,
      componentClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outComponents: Array<PrimitiveComponent>,
    ): Object321

    @JsName("BoxTraceMulti")
    public fun boxTraceMulti(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("BoxTraceMultiByProfile")
    public fun boxTraceMultiByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("BoxTraceMultiForObjects")
    public fun boxTraceMultiForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("BoxTraceSingle")
    public fun boxTraceSingle(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("BoxTraceSingleByProfile")
    public fun boxTraceSingleByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("BoxTraceSingleForObjects")
    public fun boxTraceSingleForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      halfSize: Vector,
      orientation: Rotator,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("CapsuleOverlapActors")
    public fun capsuleOverlapActors(
      worldContextObject: UObject,
      capsulePos: Vector,
      radius: Number,
      halfHeight: Number,
      objectTypes: Array<String>,
      actorClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outActors: Array<Actor>,
    ): Object320

    @JsName("CapsuleOverlapComponents")
    public fun capsuleOverlapComponents(
      worldContextObject: UObject,
      capsulePos: Vector,
      radius: Number,
      halfHeight: Number,
      objectTypes: Array<String>,
      componentClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outComponents: Array<PrimitiveComponent>,
    ): Object321

    @JsName("CapsuleTraceMulti")
    public fun capsuleTraceMulti(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("CapsuleTraceMultiByProfile")
    public fun capsuleTraceMultiByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("CapsuleTraceMultiForObjects")
    public fun capsuleTraceMultiForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("CapsuleTraceSingle")
    public fun capsuleTraceSingle(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("CapsuleTraceSingleByProfile")
    public fun capsuleTraceSingleByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("CapsuleTraceSingleForObjects")
    public fun capsuleTraceSingleForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      halfHeight: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("Delay")
    public fun delay(
      worldContextObject: UObject,
      duration: Number,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("DelayUntilNextTick")
    public fun delayUntilNextTick(worldContextObject: UObject, latentInfo: LatentActionInfo): Unit

    @JsName("DrawDebugArrow")
    public fun drawDebugArrow(
      worldContextObject: UObject,
      lineStart: Vector,
      lineEnd: Vector,
      arrowSize: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugBox")
    public fun drawDebugBox(
      worldContextObject: UObject,
      center: Vector,
      extent: Vector,
      lineColor: LinearColor,
      rotation: Rotator,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugCapsule")
    public fun drawDebugCapsule(
      worldContextObject: UObject,
      center: Vector,
      halfHeight: Number,
      radius: Number,
      rotation: Rotator,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugCircle")
    public fun drawDebugCircle(
      worldContextObject: UObject,
      center: Vector,
      radius: Number,
      numSegments: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
      yAxis: Vector,
      zAxis: Vector,
      drawAxis: Boolean,
    ): Unit

    @JsName("DrawDebugCone")
    public fun drawDebugCone(
      worldContextObject: UObject,
      origin: Vector,
      direction: Vector,
      length: Number,
      angleWidth: Number,
      angleHeight: Number,
      numSides: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugConeInDegrees")
    public fun drawDebugConeInDegrees(
      worldContextObject: UObject,
      origin: Vector,
      direction: Vector,
      length: Number,
      angleWidth: Number,
      angleHeight: Number,
      numSides: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugCoordinateSystem")
    public fun drawDebugCoordinateSystem(
      worldContextObject: UObject,
      axisLoc: Vector,
      axisRot: Rotator,
      scale: Number,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugCylinder")
    public fun drawDebugCylinder(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      segments: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugFloatHistoryLocation")
    public fun drawDebugFloatHistoryLocation(
      worldContextObject: UObject,
      floatHistory: DebugFloatHistory,
      drawLocation: Vector,
      drawSize: Vector2d,
      drawColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugFloatHistoryTransform")
    public fun drawDebugFloatHistoryTransform(
      worldContextObject: UObject,
      floatHistory: DebugFloatHistory,
      drawTransform: Transform,
      drawSize: Vector2d,
      drawColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugFrustum")
    public fun drawDebugFrustum(
      worldContextObject: UObject,
      frustumTransform: Transform,
      frustumColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugLine")
    public fun drawDebugLine(
      worldContextObject: UObject,
      lineStart: Vector,
      lineEnd: Vector,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugPlane")
    public fun drawDebugPlane(
      worldContextObject: UObject,
      planeCoordinates: Plane,
      location: Vector,
      size: Number,
      planeColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugPoint")
    public fun drawDebugPoint(
      worldContextObject: UObject,
      position: Vector,
      size: Number,
      pointColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("DrawDebugSphere")
    public fun drawDebugSphere(
      worldContextObject: UObject,
      center: Vector,
      radius: Number,
      segments: Number,
      lineColor: LinearColor,
      duration: Number,
      thickness: Number,
    ): Unit

    @JsName("DrawDebugString")
    public fun drawDebugString(
      worldContextObject: UObject,
      textLocation: Vector,
      text: String,
      testBaseActor: Actor,
      textColor: LinearColor,
      duration: Number,
    ): Unit

    @JsName("ExecuteConsoleCommand")
    public fun executeConsoleCommand(
      worldContextObject: UObject,
      command: String,
      specificPlayer: PlayerController,
    ): Unit

    @JsName("FlushDebugStrings")
    public fun flushDebugStrings(worldContextObject: UObject): Unit

    @JsName("FlushPersistentDebugLines")
    public fun flushPersistentDebugLines(worldContextObject: UObject): Unit

    @JsName("GetGameTimeInSeconds")
    public fun getGameTimeInSeconds(worldContextObject: UObject): Number

    @JsName("HasMultipleLocalPlayers")
    public fun hasMultipleLocalPlayers(worldContextObject: UObject): Boolean

    @JsName("IsDedicatedServer")
    public fun isDedicatedServer(worldContextObject: UObject): Boolean

    @JsName("IsServer")
    public fun isServer(worldContextObject: UObject): Boolean

    @JsName("IsSplitScreen")
    public fun isSplitScreen(worldContextObject: UObject): Boolean

    @JsName("IsStandalone")
    public fun isStandalone(worldContextObject: UObject): Boolean

    @JsName("K2_ClearAndInvalidateTimerHandle")
    public fun k2ClearAndInvalidateTimerHandle(worldContextObject: UObject, handle: TimerHandle):
        HandleProvider

    @JsName("K2_ClearTimerHandle")
    public fun k2ClearTimerHandle(worldContextObject: UObject, handle: TimerHandle): Unit

    @JsName("K2_GetTimerElapsedTimeHandle")
    public fun k2GetTimerElapsedTimeHandle(worldContextObject: UObject, handle: TimerHandle): Number

    @JsName("K2_GetTimerRemainingTimeHandle")
    public fun k2GetTimerRemainingTimeHandle(worldContextObject: UObject, handle: TimerHandle):
        Number

    @JsName("K2_IsTimerActiveHandle")
    public fun k2IsTimerActiveHandle(worldContextObject: UObject, handle: TimerHandle): Boolean

    @JsName("K2_IsTimerPausedHandle")
    public fun k2IsTimerPausedHandle(worldContextObject: UObject, handle: TimerHandle): Boolean

    @JsName("K2_PauseTimerHandle")
    public fun k2PauseTimerHandle(worldContextObject: UObject, handle: TimerHandle): Unit

    @JsName("K2_TimerExistsHandle")
    public fun k2TimerExistsHandle(worldContextObject: UObject, handle: TimerHandle): Boolean

    @JsName("K2_UnPauseTimerHandle")
    public fun k2UnPauseTimerHandle(worldContextObject: UObject, handle: TimerHandle): Unit

    @JsName("LineTraceMulti")
    public fun lineTraceMulti(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("LineTraceMultiByProfile")
    public fun lineTraceMultiByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("LineTraceMultiForObjects")
    public fun lineTraceMultiForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("LineTraceSingle")
    public fun lineTraceSingle(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("LineTraceSingleByProfile")
    public fun lineTraceSingleByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("LineTraceSingleForObjects")
    public fun lineTraceSingleForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("LoadAsset")
    public fun loadAsset(
      worldContextObject: UObject,
      asset: UObject,
      onLoaded: UnrealEngineDelegate<(Loaded: UObject) -> Unit>,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("LoadAssetClass")
    public fun loadAssetClass(
      worldContextObject: UObject,
      assetClass: Class,
      onLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) -> Unit>,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("PrintString")
    public fun printString(
      worldContextObject: UObject,
      inString: String,
      printToScreen: Boolean,
      printToLog: Boolean,
      textColor: LinearColor,
      duration: Number,
      key: String,
    ): Unit

    @JsName("PrintText")
    public fun printText(
      worldContextObject: UObject,
      inText: String,
      printToScreen: Boolean,
      printToLog: Boolean,
      textColor: LinearColor,
      duration: Number,
      key: String,
    ): Unit

    @JsName("QuitGame")
    public fun quitGame(
      worldContextObject: UObject,
      specificPlayer: PlayerController,
      quitPreference: String,
      ignorePlatformRestrictions: Boolean,
    ): Unit

    @JsName("RetriggerableDelay")
    public fun retriggerableDelay(
      worldContextObject: UObject,
      duration: Number,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("SetSuppressViewportTransitionMessage")
    public fun setSuppressViewportTransitionMessage(worldContextObject: UObject, state: Boolean):
        Unit

    @JsName("SphereOverlapActors")
    public fun sphereOverlapActors(
      worldContextObject: UObject,
      spherePos: Vector,
      sphereRadius: Number,
      objectTypes: Array<String>,
      actorClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outActors: Array<Actor>,
    ): Object320

    @JsName("SphereOverlapComponents")
    public fun sphereOverlapComponents(
      worldContextObject: UObject,
      spherePos: Vector,
      sphereRadius: Number,
      objectTypes: Array<String>,
      componentClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outComponents: Array<PrimitiveComponent>,
    ): Object321

    @JsName("SphereTraceMulti")
    public fun sphereTraceMulti(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("SphereTraceMultiByProfile")
    public fun sphereTraceMultiByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("SphereTraceMultiForObjects")
    public fun sphereTraceMultiForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHits: Array<HitResult>,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object322

    @JsName("SphereTraceSingle")
    public fun sphereTraceSingle(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("SphereTraceSingleByProfile")
    public fun sphereTraceSingleByProfile(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      profileName: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("SphereTraceSingleForObjects")
    public fun sphereTraceSingleForObjects(
      worldContextObject: UObject,
      start: Vector,
      end: Vector,
      radius: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      outHit: HitResult,
      ignoreSelf: Boolean,
      traceColor: LinearColor,
      traceHitColor: LinearColor,
      drawTime: Number,
    ): Object53

    @JsName("BeginDrawCanvasToRenderTarget")
    public fun beginDrawCanvasToRenderTarget(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      canvas: Canvas,
      size: Vector2d,
      context: DrawToRenderTargetContext,
    ): Object339

    @JsName("ClearRenderTarget2D")
    public fun clearRenderTarget2d(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      clearColor: LinearColor,
    ): Unit

    @JsName("ConvertRenderTargetToTexture2DEditorOnly")
    public fun convertRenderTargetToTexture2dEditorOnly(
      worldContextObject: UObject,
      renderTarget: TextureRenderTarget2d,
      texture: Texture2d,
    ): Unit

    @JsName("CreateRenderTarget2D")
    public fun createRenderTarget2d(
      worldContextObject: UObject,
      width: Number,
      height: Number,
      format: String,
      clearColor: LinearColor,
      autoGenerateMipMaps: Boolean,
    ): TextureRenderTarget2d

    @JsName("CreateRenderTarget2DArray")
    public fun createRenderTarget2dArray(
      worldContextObject: UObject,
      width: Number,
      height: Number,
      slices: Number,
      format: String,
      clearColor: LinearColor,
      autoGenerateMipMaps: Boolean,
    ): TextureRenderTarget2dArray

    @JsName("CreateRenderTargetVolume")
    public fun createRenderTargetVolume(
      worldContextObject: UObject,
      width: Number,
      height: Number,
      depth: Number,
      format: String,
      clearColor: LinearColor,
      autoGenerateMipMaps: Boolean,
    ): TextureRenderTargetVolume

    @JsName("DrawMaterialToRenderTarget")
    public fun drawMaterialToRenderTarget(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      material: MaterialInterface,
    ): Unit

    @JsName("EndDrawCanvasToRenderTarget")
    public fun endDrawCanvasToRenderTarget(worldContextObject: UObject,
        context: DrawToRenderTargetContext): Unit

    @JsName("ExportRenderTarget")
    public fun exportRenderTarget(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      filePath: String,
      filename: String,
    ): Unit

    @JsName("ExportTexture2D")
    public fun exportTexture2d(
      worldContextObject: UObject,
      texture: Texture2d,
      filePath: String,
      filename: String,
    ): Unit

    @JsName("ImportBufferAsTexture2D")
    public fun importBufferAsTexture2d(worldContextObject: UObject, buffer: Array<Number>):
        Texture2d

    @JsName("ImportFileAsTexture2D")
    public fun importFileAsTexture2d(worldContextObject: UObject, filename: String): Texture2d

    @JsName("ReadRenderTarget")
    public fun readRenderTarget(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      outSamples: Array<Color>,
      normalize: Boolean,
    ): Object340

    @JsName("ReadRenderTargetPixel")
    public fun readRenderTargetPixel(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      x: Number,
      y: Number,
    ): Color

    @JsName("ReadRenderTargetRaw")
    public fun readRenderTargetRaw(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      outLinearSamples: Array<LinearColor>,
      normalize: Boolean,
    ): Object341

    @JsName("ReadRenderTargetRawPixel")
    public fun readRenderTargetRawPixel(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      x: Number,
      y: Number,
      normalize: Boolean,
    ): LinearColor

    @JsName("ReadRenderTargetRawPixelArea")
    public fun readRenderTargetRawPixelArea(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      minX: Number,
      minY: Number,
      maxX: Number,
      maxY: Number,
      normalize: Boolean,
    ): Array<LinearColor>

    @JsName("ReadRenderTargetRawUV")
    public fun readRenderTargetRawUv(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      u: Number,
      v: Number,
      normalize: Boolean,
    ): LinearColor

    @JsName("ReadRenderTargetRawUVArea")
    public fun readRenderTargetRawUvArea(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      area: Box2d,
      normalize: Boolean,
    ): Array<LinearColor>

    @JsName("ReadRenderTargetUV")
    public fun readRenderTargetUv(
      worldContextObject: UObject,
      textureRenderTarget: TextureRenderTarget2d,
      u: Number,
      v: Number,
    ): Color

    @JsName("MinAreaRectangle")
    public fun minAreaRectangle(
      worldContextObject: UObject,
      inPoints: Array<Vector>,
      sampleSurfaceNormal: Vector,
      outRectCenter: Vector,
      outRectRotation: Rotator,
      outRectLengthX: Number,
      outRectLengthY: Number,
      debugDraw: Boolean,
    ): Object342

    @JsName("MinimumAreaRectangle")
    public fun minimumAreaRectangle(
      worldContextObject: UObject,
      inVerts: Array<Vector>,
      sampleSurfaceNormal: Vector,
      outRectCenter: Vector,
      outRectRotation: Rotator,
      outSideLengthX: Number,
      outSideLengthY: Number,
      debugDraw: Boolean,
    ): Object343

    @JsName("CreateDynamicMaterialInstance")
    public fun createDynamicMaterialInstance(
      worldContextObject: UObject,
      parent: MaterialInterface,
      optionalName: String,
      creationFlags: String,
    ): MaterialInstanceDynamic

    @JsName("GetScalarParameterValue")
    public fun getScalarParameterValue(
      worldContextObject: UObject,
      collection: MaterialParameterCollection,
      parameterName: String,
    ): Number

    @JsName("GetVectorParameterValue")
    public fun getVectorParameterValue(
      worldContextObject: UObject,
      collection: MaterialParameterCollection,
      parameterName: String,
    ): LinearColor

    @JsName("SetScalarParameterValue")
    public fun setScalarParameterValue(
      worldContextObject: UObject,
      collection: MaterialParameterCollection,
      parameterName: String,
      parameterValue: Number,
    ): Unit

    @JsName("SetVectorParameterValue")
    public fun setVectorParameterValue(
      worldContextObject: UObject,
      collection: MaterialParameterCollection,
      parameterName: String,
      parameterValue: LinearColor,
    ): Unit

    @JsName("ActivateReverbEffect")
    public fun activateReverbEffect(
      worldContextObject: UObject,
      reverbEffect: ReverbEffect,
      tagName: String,
      priority: Number,
      volume: Number,
      fadeTime: Number,
    ): Unit

    @JsName("ApplyRadialDamage")
    public fun applyRadialDamage(
      worldContextObject: UObject,
      baseDamage: Number,
      origin: Vector,
      damageRadius: Number,
      damageTypeClass: UnrealEngineClass,
      ignoreActors: Array<Actor>,
      damageCauser: Actor,
      instigatedByController: Controller,
      doFullDamage: Boolean,
      damagePreventionChannel: String,
    ): Boolean

    @JsName("ApplyRadialDamageWithFalloff")
    public fun applyRadialDamageWithFalloff(
      worldContextObject: UObject,
      baseDamage: Number,
      minimumDamage: Number,
      origin: Vector,
      damageInnerRadius: Number,
      damageOuterRadius: Number,
      damageFalloff: Number,
      damageTypeClass: UnrealEngineClass,
      ignoreActors: Array<Actor>,
      damageCauser: Actor,
      instigatedByController: Controller,
      damagePreventionChannel: String,
    ): Boolean

    @JsName("AreAnyListenersWithinRange")
    public fun areAnyListenersWithinRange(
      worldContextObject: UObject,
      location: Vector,
      maximumRange: Number,
    ): Boolean

    @JsName("BeginDeferredActorSpawnFromClass")
    public fun beginDeferredActorSpawnFromClass(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      spawnTransform: Transform,
      collisionHandlingOverride: String,
      owner: Actor,
    ): Actor

    @JsName("BeginSpawningActorFromBlueprint")
    public fun beginSpawningActorFromBlueprint(
      worldContextObject: UObject,
      blueprint: Blueprint,
      spawnTransform: Transform,
      noCollisionFail: Boolean,
    ): Actor

    @JsName("Blueprint_PredictProjectilePath_Advanced")
    public fun blueprintPredictProjectilePathAdvanced(
      worldContextObject: UObject,
      predictParams: PredictProjectilePathParams,
      predictResult: PredictProjectilePathResult,
    ): Object344

    @JsName("Blueprint_PredictProjectilePath_ByObjectType")
    public fun blueprintPredictProjectilePathByObjectType(
      worldContextObject: UObject,
      outHit: HitResult,
      outPathPositions: Array<Vector>,
      outLastTraceDestination: Vector,
      startPos: Vector,
      launchVelocity: Vector,
      tracePath: Boolean,
      projectileRadius: Number,
      objectTypes: Array<String>,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      drawDebugTime: Number,
      simFrequency: Number,
      maxSimTime: Number,
      overrideGravityZ: Number,
    ): Object345

    @JsName("Blueprint_PredictProjectilePath_ByTraceChannel")
    public fun blueprintPredictProjectilePathByTraceChannel(
      worldContextObject: UObject,
      outHit: HitResult,
      outPathPositions: Array<Vector>,
      outLastTraceDestination: Vector,
      startPos: Vector,
      launchVelocity: Vector,
      tracePath: Boolean,
      projectileRadius: Number,
      traceChannel: String,
      traceComplex: Boolean,
      actorsToIgnore: Array<Actor>,
      drawDebugType: String,
      drawDebugTime: Number,
      simFrequency: Number,
      maxSimTime: Number,
      overrideGravityZ: Number,
    ): Object345

    @JsName("BlueprintSuggestProjectileVelocity")
    public fun blueprintSuggestProjectileVelocity(
      worldContextObject: UObject,
      tossVelocity: Vector,
      startLocation: Vector,
      endLocation: Vector,
      launchSpeed: Number,
      overrideGravityZ: Number,
      traceOption: String,
      collisionRadius: Number,
      favorHighArc: Boolean,
      drawDebug: Boolean,
    ): Object347

    @JsName("ClearSoundMixClassOverride")
    public fun clearSoundMixClassOverride(
      worldContextObject: UObject,
      inSoundMixModifier: SoundMix,
      inSoundClass: SoundClass,
      fadeOutTime: Number,
    ): Unit

    @JsName("ClearSoundMixModifiers")
    public fun clearSoundMixModifiers(worldContextObject: UObject): Unit

    @JsName("CreatePlayer")
    public fun createPlayer(
      worldContextObject: UObject,
      controllerId: Number,
      spawnPlayerController: Boolean,
    ): PlayerController

    @JsName("CreateSound2D")
    public fun createSound2d(
      worldContextObject: UObject,
      sound: SoundBase,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      concurrencySettings: SoundConcurrency,
      persistAcrossLevelTransition: Boolean,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("DeactivateReverbEffect")
    public fun deactivateReverbEffect(worldContextObject: UObject, tagName: String): Unit

    @JsName("FlushLevelStreaming")
    public fun flushLevelStreaming(worldContextObject: UObject): Unit

    @JsName("GetActorOfClass")
    public fun getActorOfClass(worldContextObject: UObject, actorClass: UnrealEngineClass): Actor

    @JsName("GetAllActorsOfClass")
    public fun getAllActorsOfClass(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAllActorsOfClassWithTag")
    public fun getAllActorsOfClassWithTag(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      tag: String,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAllActorsWithInterface")
    public fun getAllActorsWithInterface(
      worldContextObject: UObject,
      `interface`: UnrealEngineClass,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAllActorsWithTag")
    public fun getAllActorsWithTag(
      worldContextObject: UObject,
      tag: String,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetAudioTimeSeconds")
    public fun getAudioTimeSeconds(worldContextObject: UObject): Number

    @JsName("GetClosestListenerLocation")
    public fun getClosestListenerLocation(
      worldContextObject: UObject,
      location: Vector,
      maximumRange: Number,
      allowAttenuationOverride: Boolean,
      listenerPosition: Vector,
    ): Object352

    @JsName("GetCurrentLevelName")
    public fun getCurrentLevelName(worldContextObject: UObject, removePrefixString: Boolean): String

    @JsName("GetCurrentReverbEffect")
    public fun getCurrentReverbEffect(worldContextObject: UObject): ReverbEffect

    @JsName("GetEnableWorldRendering")
    public fun getEnableWorldRendering(worldContextObject: UObject): Boolean

    @JsName("GetGameInstance")
    public fun getGameInstance(worldContextObject: UObject): GameInstance

    @JsName("GetGameMode")
    public fun getGameMode(worldContextObject: UObject): GameModeBase

    @JsName("GetGameState")
    public fun getGameState(worldContextObject: UObject): GameStateBase

    @JsName("GetGlobalTimeDilation")
    public fun getGlobalTimeDilation(worldContextObject: UObject): Number

    @JsName("GetMaxAudioChannelCount")
    public fun getMaxAudioChannelCount(worldContextObject: UObject): Number

    @JsName("GetNumLocalPlayerControllers")
    public fun getNumLocalPlayerControllers(worldContextObject: UObject): Number

    @JsName("GetNumPlayerControllers")
    public fun getNumPlayerControllers(worldContextObject: UObject): Number

    @JsName("GetNumPlayerStates")
    public fun getNumPlayerStates(worldContextObject: UObject): Number

    @JsName("GetPlayerCameraManager")
    public fun getPlayerCameraManager(worldContextObject: UObject, playerIndex: Number):
        PlayerCameraManager

    @JsName("GetPlayerCharacter")
    public fun getPlayerCharacter(worldContextObject: UObject, playerIndex: Number): Character

    @JsName("GetPlayerController")
    public fun getPlayerController(worldContextObject: UObject, playerIndex: Number):
        PlayerController

    @JsName("GetPlayerControllerFromID")
    public fun getPlayerControllerFromId(worldContextObject: UObject, controllerId: Number):
        PlayerController

    @JsName("GetPlayerPawn")
    public fun getPlayerPawn(worldContextObject: UObject, playerIndex: Number): Pawn

    @JsName("GetPlayerState")
    public fun getPlayerState(worldContextObject: UObject, playerStateIndex: Number): PlayerState

    @JsName("GetPlayerStateFromUniqueNetId")
    public fun getPlayerStateFromUniqueNetId(worldContextObject: UObject,
        uniqueId: UniqueNetIdRepl): PlayerState

    @JsName("GetRealTimeSeconds")
    public fun getRealTimeSeconds(worldContextObject: UObject): Number

    @JsName("GetStreamingLevel")
    public fun getStreamingLevel(worldContextObject: UObject, packageName: String): LevelStreaming

    @JsName("GetTimeSeconds")
    public fun getTimeSeconds(worldContextObject: UObject): Number

    @JsName("GetUnpausedTimeSeconds")
    public fun getUnpausedTimeSeconds(worldContextObject: UObject): Number

    @JsName("GetViewportMouseCaptureMode")
    public fun getViewportMouseCaptureMode(worldContextObject: UObject): String

    @JsName("GetWorldDeltaSeconds")
    public fun getWorldDeltaSeconds(worldContextObject: UObject): Number

    @JsName("GetWorldOriginLocation")
    public fun getWorldOriginLocation(worldContextObject: UObject): IntVector

    @JsName("GrassOverlappingSphereCount")
    public fun grassOverlappingSphereCount(
      worldContextObject: UObject,
      staticMesh: StaticMesh,
      centerPosition: Vector,
      radius: Number,
    ): Number

    @JsName("IsGamePaused")
    public fun isGamePaused(worldContextObject: UObject): Boolean

    @JsName("IsSplitscreenForceDisabled")
    public fun isSplitscreenForceDisabled(worldContextObject: UObject): Boolean

    @JsName("LoadStreamLevel")
    public fun loadStreamLevel(
      worldContextObject: UObject,
      levelName: String,
      makeVisibleAfterLoad: Boolean,
      shouldBlockOnLoad: Boolean,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("LoadStreamLevelBySoftObjectPtr")
    public fun loadStreamLevelBySoftObjectPtr(
      worldContextObject: UObject,
      level: World,
      makeVisibleAfterLoad: Boolean,
      shouldBlockOnLoad: Boolean,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("OpenLevel")
    public fun openLevel(
      worldContextObject: UObject,
      levelName: String,
      absolute: Boolean,
      options: String,
    ): Unit

    @JsName("OpenLevelBySoftObjectPtr")
    public fun openLevelBySoftObjectPtr(
      worldContextObject: UObject,
      level: World,
      absolute: Boolean,
      options: String,
    ): Unit

    @JsName("PlayDialogue2D")
    public fun playDialogue2d(
      worldContextObject: UObject,
      dialogue: DialogueWave,
      context: DialogueContext,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
    ): Unit

    @JsName("PlayDialogueAtLocation")
    public fun playDialogueAtLocation(
      worldContextObject: UObject,
      dialogue: DialogueWave,
      context: DialogueContext,
      location: Vector,
      rotation: Rotator,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
    ): Unit

    @JsName("PlaySound2D")
    public fun playSound2d(
      worldContextObject: UObject,
      sound: SoundBase,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      concurrencySettings: SoundConcurrency,
      owningActor: Actor,
      isUiSound: Boolean,
    ): Unit

    @JsName("PlaySoundAtLocation")
    public fun playSoundAtLocation(
      worldContextObject: UObject,
      sound: SoundBase,
      location: Vector,
      rotation: Rotator,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      concurrencySettings: SoundConcurrency,
      owningActor: Actor,
      initialParams: InitialActiveSoundParams,
    ): Unit

    @JsName("PlayWorldCameraShake")
    public fun playWorldCameraShake(
      worldContextObject: UObject,
      shake: UnrealEngineClass,
      epicenter: Vector,
      innerRadius: Number,
      outerRadius: Number,
      falloff: Number,
      orientShakeTowardsEpicenter: Boolean,
    ): Unit

    @JsName("PopSoundMixModifier")
    public fun popSoundMixModifier(worldContextObject: UObject, inSoundMixModifier: SoundMix): Unit

    @JsName("PushSoundMixModifier")
    public fun pushSoundMixModifier(worldContextObject: UObject, inSoundMixModifier: SoundMix): Unit

    @JsName("RebaseLocalOriginOntoZero")
    public fun rebaseLocalOriginOntoZero(worldContextObject: UObject, worldLocation: Vector): Vector

    @JsName("RebaseZeroOriginOntoLocal")
    public fun rebaseZeroOriginOntoLocal(worldContextObject: UObject, worldLocation: Vector): Vector

    @JsName("SetBaseSoundMix")
    public fun setBaseSoundMix(worldContextObject: UObject, inSoundMix: SoundMix): Unit

    @JsName("SetEnableWorldRendering")
    public fun setEnableWorldRendering(worldContextObject: UObject, enable: Boolean): Unit

    @JsName("SetForceDisableSplitscreen")
    public fun setForceDisableSplitscreen(worldContextObject: UObject, disable: Boolean): Unit

    @JsName("SetGamePaused")
    public fun setGamePaused(worldContextObject: UObject, paused: Boolean): Boolean

    @JsName("SetGlobalListenerFocusParameters")
    public fun setGlobalListenerFocusParameters(
      worldContextObject: UObject,
      focusAzimuthScale: Number,
      nonFocusAzimuthScale: Number,
      focusDistanceScale: Number,
      nonFocusDistanceScale: Number,
      focusVolumeScale: Number,
      nonFocusVolumeScale: Number,
      focusPriorityScale: Number,
      nonFocusPriorityScale: Number,
    ): Unit

    @JsName("SetGlobalPitchModulation")
    public fun setGlobalPitchModulation(
      worldContextObject: UObject,
      pitchModulation: Number,
      timeSec: Number,
    ): Unit

    @JsName("SetGlobalTimeDilation")
    public fun setGlobalTimeDilation(worldContextObject: UObject, timeDilation: Number): Unit

    @JsName("SetMaxAudioChannelsScaled")
    public fun setMaxAudioChannelsScaled(worldContextObject: UObject, maxChannelCountScale: Number):
        Unit

    @JsName("SetSoundClassDistanceScale")
    public fun setSoundClassDistanceScale(
      worldContextObject: UObject,
      soundClass: SoundClass,
      distanceAttenuationScale: Number,
      timeSec: Number,
    ): Unit

    @JsName("SetSoundMixClassOverride")
    public fun setSoundMixClassOverride(
      worldContextObject: UObject,
      inSoundMixModifier: SoundMix,
      inSoundClass: SoundClass,
      volume: Number,
      pitch: Number,
      fadeInTime: Number,
      applyToChildren: Boolean,
    ): Unit

    @JsName("SetViewportMouseCaptureMode")
    public fun setViewportMouseCaptureMode(worldContextObject: UObject, mouseCaptureMode: String):
        Unit

    @JsName("SetWorldOriginLocation")
    public fun setWorldOriginLocation(worldContextObject: UObject, newLocation: IntVector): Unit

    @JsName("SpawnDecalAtLocation")
    public fun spawnDecalAtLocation(
      worldContextObject: UObject,
      decalMaterial: MaterialInterface,
      decalSize: Vector,
      location: Vector,
      rotation: Rotator,
      lifeSpan: Number,
    ): DecalComponent

    @JsName("SpawnDialogue2D")
    public fun spawnDialogue2d(
      worldContextObject: UObject,
      dialogue: DialogueWave,
      context: DialogueContext,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnDialogueAtLocation")
    public fun spawnDialogueAtLocation(
      worldContextObject: UObject,
      dialogue: DialogueWave,
      context: DialogueContext,
      location: Vector,
      rotation: Rotator,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnEmitterAtLocation")
    public fun spawnEmitterAtLocation(
      worldContextObject: UObject,
      emitterTemplate: ParticleSystem,
      location: Vector,
      rotation: Rotator,
      scale: Vector,
      autoDestroy: Boolean,
      poolingMethod: String,
      autoActivateSystem: Boolean,
    ): ParticleSystemComponent

    @JsName("SpawnForceFeedbackAtLocation")
    public fun spawnForceFeedbackAtLocation(
      worldContextObject: UObject,
      forceFeedbackEffect: ForceFeedbackEffect,
      location: Vector,
      rotation: Rotator,
      looping: Boolean,
      intensityMultiplier: Number,
      startTime: Number,
      attenuationSettings: ForceFeedbackAttenuation,
      autoDestroy: Boolean,
    ): ForceFeedbackComponent

    @JsName("SpawnSound2D")
    public fun spawnSound2d(
      worldContextObject: UObject,
      sound: SoundBase,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      concurrencySettings: SoundConcurrency,
      persistAcrossLevelTransition: Boolean,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SpawnSoundAtLocation")
    public fun spawnSoundAtLocation(
      worldContextObject: UObject,
      sound: SoundBase,
      location: Vector,
      rotation: Rotator,
      volumeMultiplier: Number,
      pitchMultiplier: Number,
      startTime: Number,
      attenuationSettings: SoundAttenuation,
      concurrencySettings: SoundConcurrency,
      autoDestroy: Boolean,
    ): AudioComponent

    @JsName("SuggestProjectileVelocity_CustomArc")
    public fun suggestProjectileVelocityCustomArc(
      worldContextObject: UObject,
      outLaunchVelocity: Vector,
      startPos: Vector,
      endPos: Vector,
      overrideGravityZ: Number,
      arcParam: Number,
    ): Object353

    @JsName("UnloadStreamLevel")
    public fun unloadStreamLevel(
      worldContextObject: UObject,
      levelName: String,
      latentInfo: LatentActionInfo,
      shouldBlockOnUnload: Boolean,
    ): Unit

    @JsName("UnloadStreamLevelBySoftObjectPtr")
    public fun unloadStreamLevelBySoftObjectPtr(
      worldContextObject: UObject,
      level: World,
      latentInfo: LatentActionInfo,
      shouldBlockOnUnload: Boolean,
    ): Unit

    @JsName("FoliageOverlappingBoxCount")
    public fun foliageOverlappingBoxCount(
      worldContextObject: UObject,
      staticMesh: StaticMesh,
      box: Box,
    ): Number

    @JsName("FoliageOverlappingBoxTransforms")
    public fun foliageOverlappingBoxTransforms(
      worldContextObject: UObject,
      staticMesh: StaticMesh,
      box: Box,
      outTransforms: Array<Transform>,
    ): OutTransformsProvider

    @JsName("FoliageOverlappingSphereCount")
    public fun foliageOverlappingSphereCount(
      worldContextObject: UObject,
      staticMesh: StaticMesh,
      centerPosition: Vector,
      radius: Number,
    ): Number

    @JsName("AddMasterSubmixEffect")
    public fun addMasterSubmixEffect(worldContextObject: UObject,
        submixEffectPreset: SoundEffectSubmixPreset): Unit

    @JsName("AddSourceEffectToPresetChain")
    public fun addSourceEffectToPresetChain(
      worldContextObject: UObject,
      presetChain: SoundEffectSourcePresetChain,
      entry: SourceEffectChainEntry,
    ): Unit

    @JsName("AddSubmixEffect")
    public fun addSubmixEffect(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Number

    @JsName("ClearMasterSubmixEffects")
    public fun clearMasterSubmixEffects(worldContextObject: UObject): Unit

    @JsName("ClearSubmixEffectChainOverride")
    public fun clearSubmixEffectChainOverride(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      fadeTimeSec: Number,
    ): Unit

    @JsName("ClearSubmixEffects")
    public fun clearSubmixEffects(worldContextObject: UObject, soundSubmix: SoundSubmix): Unit

    @JsName("GetAvailableAudioOutputDevices")
    public fun getAvailableAudioOutputDevices(worldContextObject: UObject,
        onObtainDevicesEvent: UnrealEngineDelegate<(AvailableDevices: Array<AudioOutputDeviceInfo>) -> Unit>):
        Unit

    @JsName("GetCurrentAudioOutputDeviceName")
    public fun getCurrentAudioOutputDeviceName(worldContextObject: UObject,
        onObtainCurrentDeviceEvent: UnrealEngineDelegate<(CurrentDevice: String) -> Unit>): Unit

    @JsName("GetMagnitudeForFrequencies")
    public fun getMagnitudeForFrequencies(
      worldContextObject: UObject,
      frequencies: Array<Number>,
      magnitudes: Array<Number>,
      submixToAnalyze: SoundSubmix,
    ): MagnitudesProvider

    @JsName("GetNumberOfEntriesInSourceEffectChain")
    public fun getNumberOfEntriesInSourceEffectChain(worldContextObject: UObject,
        presetChain: SoundEffectSourcePresetChain): Number

    @JsName("GetPhaseForFrequencies")
    public fun getPhaseForFrequencies(
      worldContextObject: UObject,
      frequencies: Array<Number>,
      phases: Array<Number>,
      submixToAnalyze: SoundSubmix,
    ): PhasesProvider

    @JsName("IsAudioBusActive")
    public fun isAudioBusActive(worldContextObject: UObject, audioBus: AudioBus): Boolean

    @JsName("PauseRecordingOutput")
    public fun pauseRecordingOutput(worldContextObject: UObject, submixToPause: SoundSubmix): Unit

    @JsName("RemoveMasterSubmixEffect")
    public fun removeMasterSubmixEffect(worldContextObject: UObject,
        submixEffectPreset: SoundEffectSubmixPreset): Unit

    @JsName("RemoveSourceEffectFromPresetChain")
    public fun removeSourceEffectFromPresetChain(
      worldContextObject: UObject,
      presetChain: SoundEffectSourcePresetChain,
      entryIndex: Number,
    ): Unit

    @JsName("RemoveSubmixEffect")
    public fun removeSubmixEffect(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Unit

    @JsName("RemoveSubmixEffectAtIndex")
    public fun removeSubmixEffectAtIndex(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixChainIndex: Number,
    ): Unit

    @JsName("RemoveSubmixEffectPreset")
    public fun removeSubmixEffectPreset(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Unit

    @JsName("RemoveSubmixEffectPresetAtIndex")
    public fun removeSubmixEffectPresetAtIndex(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixChainIndex: Number,
    ): Unit

    @JsName("ReplaceSoundEffectSubmix")
    public fun replaceSoundEffectSubmix(
      worldContextObject: UObject,
      inSoundSubmix: SoundSubmix,
      submixChainIndex: Number,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Unit

    @JsName("ReplaceSubmixEffect")
    public fun replaceSubmixEffect(
      worldContextObject: UObject,
      inSoundSubmix: SoundSubmix,
      submixChainIndex: Number,
      submixEffectPreset: SoundEffectSubmixPreset,
    ): Unit

    @JsName("ResumeRecordingOutput")
    public fun resumeRecordingOutput(worldContextObject: UObject, submixToPause: SoundSubmix): Unit

    @JsName("SetBypassSourceEffectChainEntry")
    public fun setBypassSourceEffectChainEntry(
      worldContextObject: UObject,
      presetChain: SoundEffectSourcePresetChain,
      entryIndex: Number,
      bypassed: Boolean,
    ): Unit

    @JsName("SetSubmixEffectChainOverride")
    public fun setSubmixEffectChainOverride(
      worldContextObject: UObject,
      soundSubmix: SoundSubmix,
      submixEffectPresetChain: Array<SoundEffectSubmixPreset>,
      fadeTimeSec: Number,
    ): Unit

    @JsName("StartAnalyzingOutput")
    public fun startAnalyzingOutput(
      worldContextObject: UObject,
      submixToAnalyze: SoundSubmix,
      fftSize: String,
      interpolationMethod: String,
      windowType: String,
      hopSize: Number,
      spectrumType: String,
    ): Unit

    @JsName("StartAudioBus")
    public fun startAudioBus(worldContextObject: UObject, audioBus: AudioBus): Unit

    @JsName("StartRecordingOutput")
    public fun startRecordingOutput(
      worldContextObject: UObject,
      expectedDuration: Number,
      submixToRecord: SoundSubmix,
    ): Unit

    @JsName("StopAnalyzingOutput")
    public fun stopAnalyzingOutput(worldContextObject: UObject, submixToStopAnalyzing: SoundSubmix):
        Unit

    @JsName("StopAudioBus")
    public fun stopAudioBus(worldContextObject: UObject, audioBus: AudioBus): Unit

    @JsName("StopRecordingOutput")
    public fun stopRecordingOutput(
      worldContextObject: UObject,
      exportType: String,
      name: String,
      path: String,
      submixToRecord: SoundSubmix,
      existingSoundWaveToOverwrite: SoundWave,
    ): SoundWave

    @JsName("SwapAudioOutputDevice")
    public fun swapAudioOutputDevice(
      worldContextObject: UObject,
      newDeviceId: String,
      onCompletedDeviceSwap: UnrealEngineDelegate<(SwapResult: SwapAudioOutputResult) -> Unit>,
    ): Unit

    @JsName("GetMousePositionOnViewport")
    public fun getMousePositionOnViewport(worldContextObject: UObject): Vector2d

    @JsName("GetViewportScale")
    public fun getViewportScale(worldContextObject: UObject): Number

    @JsName("GetViewportSize")
    public fun getViewportSize(worldContextObject: UObject): Vector2d

    @JsName("GetViewportWidgetGeometry")
    public fun getViewportWidgetGeometry(worldContextObject: UObject): Geometry

    @JsName("RemoveAllWidgets")
    public fun removeAllWidgets(worldContextObject: UObject): Unit

    @JsName("Create")
    public fun create(
      worldContextObject: UObject,
      widgetType: UnrealEngineClass,
      owningPlayer: PlayerController,
    ): UserWidget

    @JsName("GetAllWidgetsOfClass")
    public fun getAllWidgetsOfClass(
      worldContextObject: UObject,
      foundWidgets: Array<UserWidget>,
      widgetClass: UnrealEngineClass,
      topLevelOnly: Boolean,
    ): FoundWidgetsProvider

    @JsName("GetAllWidgetsWithInterface")
    public fun getAllWidgetsWithInterface(
      worldContextObject: UObject,
      foundWidgets: Array<UserWidget>,
      `interface`: UnrealEngineClass,
      topLevelOnly: Boolean,
    ): FoundWidgetsProvider

    @JsName("GetSafeZonePadding")
    public fun getSafeZonePadding(
      worldContextObject: UObject,
      safePadding: Vector4,
      safePaddingScale: Vector2d,
      spillOverPadding: Vector4,
    ): Object359

    @JsName("SetHardwareCursor")
    public fun setHardwareCursor(
      worldContextObject: UObject,
      cursorShape: String,
      cursorName: String,
      hotSpot: Vector2d,
    ): Boolean

    @JsName("AbsoluteToViewport")
    public fun absoluteToViewport(
      worldContextObject: UObject,
      absoluteDesktopCoordinate: Vector2d,
      pixelPosition: Vector2d,
      viewportPosition: Vector2d,
    ): Object360

    @JsName("LocalToViewport")
    public fun localToViewport(
      worldContextObject: UObject,
      geometry: Geometry,
      localCoordinate: Vector2d,
      pixelPosition: Vector2d,
      viewportPosition: Vector2d,
    ): Object360

    @JsName("ScreenToViewport")
    public fun screenToViewport(
      worldContextObject: UObject,
      screenPosition: Vector2d,
      viewportPosition: Vector2d,
    ): ViewportPositionProvider

    @JsName("ScreenToWidgetAbsolute")
    public fun screenToWidgetAbsolute(
      worldContextObject: UObject,
      screenPosition: Vector2d,
      absoluteCoordinate: Vector2d,
      includeWindowPosition: Boolean,
    ): AbsoluteCoordinateProvider

    @JsName("ScreenToWidgetLocal")
    public fun screenToWidgetLocal(
      worldContextObject: UObject,
      geometry: Geometry,
      screenPosition: Vector2d,
      localCoordinate: Vector2d,
      includeWindowPosition: Boolean,
    ): LocalCoordinateProvider

    @JsName("CreateMoveToProxyObject")
    public fun createMoveToProxyObject(
      worldContextObject: UObject,
      pawn: Pawn,
      destination: Vector,
      targetActor: Actor,
      acceptanceRadius: Number,
      stopOnOverlap: Boolean,
    ): AiAsyncTaskBlueprintProxy

    @JsName("SpawnAIFromClass")
    public fun spawnAiFromClass(
      worldContextObject: UObject,
      pawnClass: UnrealEngineClass,
      behaviorTree: BehaviorTree,
      location: Vector,
      rotation: Rotator,
      noCollisionFail: Boolean,
      owner: Actor,
    ): Pawn

    @JsName("GetAllActorsOfClassMatchingTagQuery")
    public fun getAllActorsOfClassMatchingTagQuery(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      gameplayTagQuery: GameplayTagQuery,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("GetControllerTransformForTime")
    public fun getControllerTransformForTime(
      worldContext: UObject,
      controllerIndex: Number,
      motionSource: String,
      time: Timespan,
      timeWasUsed: Boolean,
      orientation: Rotator,
      position: Vector,
      providedLinearVelocity: Boolean,
      linearVelocity: Vector,
      providedAngularVelocity: Boolean,
      angularVelocityRadPerSec: Vector,
      providedLinearAcceleration: Boolean,
      linearAcceleration: Vector,
    ): Object365

    @JsName("GetDeviceWorldPose")
    public fun getDeviceWorldPose(
      worldContext: UObject,
      xrDeviceId: XrDeviceId,
      isTracked: Boolean,
      orientation: Rotator,
      hasPositionalTracking: Boolean,
      position: Vector,
    ): Object312

    @JsName("GetHMDData")
    public fun getHmdData(worldContext: UObject, hmdData: XrhmdData): HmdDataProvider

    @JsName("GetMotionControllerData")
    public fun getMotionControllerData(
      worldContext: UObject,
      hand: String,
      motionControllerData: XrMotionControllerData,
    ): MotionControllerDataProvider

    @JsName("GetTrackingToWorldTransform")
    public fun getTrackingToWorldTransform(worldContext: UObject): Transform

    @JsName("GetWorldToMetersScale")
    public fun getWorldToMetersScale(worldContext: UObject): Number

    @JsName("SetWorldToMetersScale")
    public fun setWorldToMetersScale(worldContext: UObject, newScale: Number): Unit
  }
}

public typealias UnrealEngineClass = Any

public typealias TimeoutHandle = Any

public external fun gc(): Unit

public external fun setTimeout(function: (milliseconds: Number) -> Unit, timeout: Number):
    TimeoutHandle

public external fun clearTimeout(handle: TimeoutHandle): Unit

@JsName("process")
public external var GProcess: Process

@JsName("memory")
public external var GMemory: Memory

public external var GEngine: Engine

public external var GWorld: World

