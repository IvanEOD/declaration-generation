// Generated by Detonate Productions Declaration Generation, do not edit manually!
@file:Suppress(
  "INTERFACE_WITH_SUPERCLASS",
  "OVERRIDING_FINAL_MEMBER",
  "RETURN_TYPE_MISMATCH_ON_OVERRIDE",
  "CONFLICTING_OVERLOADS",
)

package ue


import org.w3c.dom.events.Event


public open external class BrushBuilder(
  outer: UObject,
) : UObject {
  @JsName("BitmapFilename")
  public open var bitmapFilename: String

  @JsName("Tooltip")
  public open var tooltip: String

  @JsName("NotifyBadParams")
  public open var notifyBadParams: Boolean

  @JsName("Vertices")
  public open var vertices: Array<Vector>

  @JsName("Polys")
  public open var polys: Array<BuilderPoly>

  @JsName("Layer")
  public open var layer: String

  @JsName("MergeCoplanars")
  public open var mergeCoplanars: Boolean

  @JsName("Build")
  public open fun build(inWorld: World, inBrush: Brush): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrushBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrushBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushBuilder

    @JsName("C")
    public fun copy(other: UObject): BrushBuilder

    @JsName("C")
    public fun copy(other: Any): BrushBuilder

    @JsName("Build")
    public fun build(
      builder: BrushBuilder,
      inWorld: World,
      inBrush: Brush,
    ): Boolean
  }
}

public open external class GeomSelection {
  @JsName("Type")
  public open var type: Number

  public open var index: Number

  @JsName("SelectionIndex")
  public open var selectionIndex: Number

  public open fun clone(): GeomSelection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GeomSelection

    @JsName("C")
    public fun copy(other: Any): GeomSelection
  }
}

@JsName("T$528")
public external interface SurfacesProvider {
  @JsName("Surfaces")
  public var surfaces: Array<Number>
}

public open external class Brush(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("BrushType")
  public open var brushType: String

  @JsName("BrushColor")
  public open var brushColor: Color

  @JsName("PolyFlags")
  public open var polyFlags: Number

  @JsName("bColored")
  public open var colored: Boolean

  @JsName("bSolidWhenSelected")
  public open var solidWhenSelected: Boolean

  @JsName("bPlaceableFromClassBrowser")
  public open var placeableFromClassBrowser: Boolean

  @JsName("bNotForClientOrServer")
  public open var notForClientOrServer: Boolean

  @JsName("Brush")
  public open var brush: Model

  @JsName("BrushComponent")
  public open var brushComponent: BrushComponent

  @JsName("BrushBuilder")
  public open var brushBuilder: BrushBuilder

  @JsName("bDisplayShadedVolume")
  public open var displayShadedVolume: Boolean

  @JsName("ShadedVolumeOpacityValue")
  public open var shadedVolumeOpacityValue: Number

  @JsName("bInManipulation")
  public open var inManipulation: Boolean

  @JsName("SavedSelections")
  public open var savedSelections: Array<GeomSelection>

  public open fun csgAdd(polyFlags: Number, brushType: String): Brush

  @JsName("GetSurfaces")
  public open fun getSurfaces(surfaces: Array<Number>): SurfacesProvider

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Brush

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Brush

    @JsName("C")
    public fun copy(other: UObject): Brush

    @JsName("C")
    public fun copy(other: Any): Brush

    public fun csgAdd(
      defaultBrush: Brush,
      polyFlags: Number,
      brushType: String,
    ): Brush

    @JsName("GetSurfaces")
    public fun getSurfaces(brush: Brush, surfaces: Array<Number>): SurfacesProvider
  }
}

public open external class Volume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Brush {
  @JsName("CreateBrushForVolumeActor")
  public open fun createBrushForVolumeActor(brushBuilder: BrushBuilder): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Volume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Volume

    @JsName("C")
    public fun copy(other: UObject): Volume

    @JsName("C")
    public fun copy(other: Any): Volume

    @JsName("CreateBrushForVolumeActor")
    public fun createBrushForVolumeActor(newActor: Volume, brushBuilder: BrushBuilder): Unit
  }
}

public open external class PhysicsVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("TerminalVelocity")
  public open var terminalVelocity: Number

  @JsName("Priority")
  public open var priority: Number

  @JsName("FluidFriction")
  public open var fluidFriction: Number

  @JsName("bWaterVolume")
  public open var waterVolume: Boolean

  @JsName("bPhysicsOnContact")
  public open var physicsOnContact: Boolean

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsVolume

    @JsName("C")
    public fun copy(other: UObject): PhysicsVolume

    @JsName("C")
    public fun copy(other: Any): PhysicsVolume
  }
}

@JsName("EDetachmentRule")
public external object DetachmentRule {
  @JsName("KeepRelative")
  public var Relative: String

  @JsName("KeepWorld")
  public var World: String

  @JsName("EDetachmentRule_MAX")
  public var Max: String
}

@JsName("EMoveComponentAction")
public external object MoveComponentAction {
  public var Move: String

  public var Stop: String

  public var Return: String

  @JsName("EMoveComponentAction_MAX")
  public var Max: String
}

@JsName("ARPin")
public open external class ArPin(
  outer: UObject,
) : UObject {
  @JsName("TrackedGeometry")
  public open var trackedGeometry: ArTrackedGeometry

  @JsName("PinnedComponent")
  public open var pinnedComponent: SceneComponent

  @JsName("LocalToTrackingTransform")
  public open var localToTrackingTransform: Transform

  @JsName("LocalToAlignedTrackingTransform")
  public open var localToAlignedTrackingTransform: Transform

  @JsName("TrackingState")
  public open var trackingState: String

  @JsName("OnARTrackingStateChanged")
  public open var onArTrackingStateChanged:
      UnrealEngineMulticastDelegate<(NewTrackingState: String) -> Unit>

  @JsName("OnARTransformUpdated")
  public open var onArTransformUpdated:
      UnrealEngineMulticastDelegate<(OldToNewTransform: Transform) -> Unit>

  @JsName("GetTrackingState")
  public open fun getTrackingState(): String

  @JsName("GetTrackedGeometry")
  public open fun getTrackedGeometry(): ArTrackedGeometry

  @JsName("GetPinnedComponent")
  public open fun getPinnedComponent(): SceneComponent

  @JsName("GetLocalToWorldTransform")
  public open fun getLocalToWorldTransform(): Transform

  @JsName("GetLocalToTrackingTransform")
  public open fun getLocalToTrackingTransform(): Transform

  @JsName("GetDebugName")
  public open fun getDebugName(): String

  @JsName("DebugDraw")
  public open fun debugDraw(
    world: World,
    color: LinearColor,
    scale: Number,
    persistForSeconds: Number,
  ): Unit

  @JsName("DebugDrawPin")
  public open fun debugDrawPin(
    worldContextObject: UObject,
    color: LinearColor,
    scale: Number,
    persistForSeconds: Number,
  ): Unit

  @JsName("RemovePin")
  public open fun removePin(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArPin

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArPin

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArPin

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArPin

    @JsName("C")
    public fun copy(other: UObject): ArPin

    @JsName("C")
    public fun copy(other: Any): ArPin

    @JsName("DebugDrawPin")
    public fun debugDrawPin(
      arPin: ArPin,
      worldContextObject: UObject,
      color: LinearColor,
      scale: Number,
      persistForSeconds: Number,
    ): Unit

    @JsName("RemovePin")
    public fun removePin(pinToRemove: ArPin): Unit
  }
}

@JsName("T$530")
public external interface SweepHitResultProvider {
  @JsName("SweepHitResult")
  public var sweepHitResult: HitResult
}

@JsName("T$531")
public external interface ParentsProvider {
  @JsName("Parents")
  public var parents: Array<SceneComponent>
}

@JsName("T$532")
public external interface ChildrenProvider {
  @JsName("Children")
  public var children: Array<SceneComponent>
}

public open external class SceneComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("PhysicsVolume")
  public open var physicsVolume: Any

  @JsName("AttachParent")
  public open var attachParent: SceneComponent

  @JsName("AttachSocketName")
  public open var attachSocketName: String

  @JsName("AttachChildren")
  public open var attachChildren: Array<SceneComponent>

  @JsName("ClientAttachedChildren")
  public open var clientAttachedChildren: Array<SceneComponent>

  @JsName("RelativeLocation")
  public open var relativeLocation: Vector

  @JsName("RelativeRotation")
  public open var relativeRotation: Rotator

  @JsName("RelativeScale3D")
  public open var relativeScale3d: Vector

  @JsName("ComponentVelocity")
  public open var componentVelocity: Vector

  @JsName("bComponentToWorldUpdated")
  public open var componentToWorldUpdated: Boolean

  @JsName("bAbsoluteLocation")
  public open var absoluteLocation: Boolean

  @JsName("bAbsoluteRotation")
  public open var absoluteRotation: Boolean

  @JsName("bAbsoluteScale")
  public open var absoluteScale: Boolean

  @JsName("bVisible")
  public open var visible: Boolean

  @JsName("bShouldBeAttached")
  public open var shouldBeAttached: Boolean

  @JsName("bShouldSnapLocationWhenAttached")
  public open var shouldSnapLocationWhenAttached: Boolean

  @JsName("bShouldSnapRotationWhenAttached")
  public open var shouldSnapRotationWhenAttached: Boolean

  @JsName("bShouldUpdatePhysicsVolume")
  public open var shouldUpdatePhysicsVolume: Boolean

  @JsName("bHiddenInGame")
  public open var hiddenInGame: Boolean

  @JsName("bBoundsChangeTriggersStreamingDataRebuild")
  public open var boundsChangeTriggersStreamingDataRebuild: Boolean

  @JsName("bUseAttachParentBound")
  public open var useAttachParentBound: Boolean

  @JsName("bComputeFastLocalBounds")
  public open var computeFastLocalBounds: Boolean

  @JsName("bComputeBoundsOnceForGame")
  public open var computeBoundsOnceForGame: Boolean

  @JsName("bComputedBoundsOnceForGame")
  public open var computedBoundsOnceForGame: Boolean

  @JsName("bVisualizeComponent")
  public open var visualizeComponent: Boolean

  @JsName("Mobility")
  public open var mobility: String

  @JsName("DetailMode")
  public open var detailMode: String

  @JsName("PhysicsVolumeChangedDelegate")
  public open var physicsVolumeChangedDelegate:
      UnrealEngineMulticastDelegate<(NewVolume: PhysicsVolume) -> Unit>

  @JsName("ReplacementSceneComponent")
  public open var replacementSceneComponent: SceneComponent

  @JsName("ToggleVisibility")
  public open fun toggleVisibility(propagateToChildren: Boolean): Unit

  @JsName("SetWorldScale3D")
  public open fun setWorldScale3d(newScale: Vector): Unit

  @JsName("SetVisibility")
  public open fun setVisibility(newVisibility: Boolean, propagateToChildren: Boolean): Unit

  @JsName("SetShouldUpdatePhysicsVolume")
  public open fun setShouldUpdatePhysicsVolume(inShouldUpdatePhysicsVolume: Boolean): Unit

  @JsName("SetRelativeScale3D")
  public open fun setRelativeScale3d(newScale3d: Vector): Unit

  @JsName("SetMobility")
  public open fun setMobility(newMobility: String): Unit

  @JsName("SetHiddenInGame")
  public open fun setHiddenInGame(newHidden: Boolean, propagateToChildren: Boolean): Unit

  @JsName("SetAbsolute")
  public open fun setAbsolute(
    newAbsoluteLocation: Boolean,
    newAbsoluteRotation: Boolean,
    newAbsoluteScale: Boolean,
  ): Unit

  @JsName("ResetRelativeTransform")
  public open fun resetRelativeTransform(): Unit

  @JsName("OnRep_Visibility")
  public open fun onRepVisibility(oldValue: Boolean): Unit

  @JsName("OnRep_Transform")
  public open fun onRepTransform(): Unit

  @JsName("OnRep_AttachSocketName")
  public open fun onRepAttachSocketName(): Unit

  @JsName("OnRep_AttachParent")
  public open fun onRepAttachParent(): Unit

  @JsName("OnRep_AttachChildren")
  public open fun onRepAttachChildren(): Unit

  @JsName("K2_SetWorldTransform")
  public open fun k2SetWorldTransform(
    newTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetWorldRotation")
  public open fun k2SetWorldRotation(
    newRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetWorldLocationAndRotation")
  public open fun k2SetWorldLocationAndRotation(
    newLocation: Vector,
    newRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetWorldLocation")
  public open fun k2SetWorldLocation(
    newLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetRelativeTransform")
  public open fun k2SetRelativeTransform(
    newTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetRelativeRotation")
  public open fun k2SetRelativeRotation(
    newRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetRelativeLocationAndRotation")
  public open fun k2SetRelativeLocationAndRotation(
    newLocation: Vector,
    newRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetRelativeLocation")
  public open fun k2SetRelativeLocation(
    newLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_GetComponentToWorld")
  public open fun k2GetComponentToWorld(): Transform

  @JsName("K2_GetComponentScale")
  public open fun k2GetComponentScale(): Vector

  @JsName("K2_GetComponentRotation")
  public open fun k2GetComponentRotation(): Rotator

  @JsName("K2_GetComponentLocation")
  public open fun k2GetComponentLocation(): Vector

  @JsName("K2_DetachFromComponent")
  public open fun k2DetachFromComponent(
    locationRule: String,
    rotationRule: String,
    scaleRule: String,
    callModify: Boolean,
  ): Unit

  @JsName("K2_AttachToComponent")
  public open fun k2AttachToComponent(
    parent: SceneComponent,
    socketName: String,
    locationRule: String,
    rotationRule: String,
    scaleRule: String,
    weldSimulatedBodies: Boolean,
  ): Boolean

  @JsName("K2_AttachTo")
  public open fun k2AttachTo(
    inParent: SceneComponent,
    inSocketName: String,
    attachType: String,
    weldSimulatedBodies: Boolean,
  ): Boolean

  @JsName("K2_AddWorldTransformKeepScale")
  public open fun k2AddWorldTransformKeepScale(
    deltaTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddWorldTransform")
  public open fun k2AddWorldTransform(
    deltaTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddWorldRotation")
  public open fun k2AddWorldRotation(
    deltaRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddWorldOffset")
  public open fun k2AddWorldOffset(
    deltaLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddRelativeRotation")
  public open fun k2AddRelativeRotation(
    deltaRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddRelativeLocation")
  public open fun k2AddRelativeLocation(
    deltaLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddLocalTransform")
  public open fun k2AddLocalTransform(
    deltaTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddLocalRotation")
  public open fun k2AddLocalRotation(
    deltaRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddLocalOffset")
  public open fun k2AddLocalOffset(
    deltaLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("IsVisible")
  public open fun isVisible(): Boolean

  @JsName("IsSimulatingPhysics")
  public open fun isSimulatingPhysics(boneName: String): Boolean

  @JsName("IsAnySimulatingPhysics")
  public open fun isAnySimulatingPhysics(): Boolean

  @JsName("GetUpVector")
  public open fun getUpVector(): Vector

  @JsName("GetSocketTransform")
  public open fun getSocketTransform(inSocketName: String, transformSpace: String): Transform

  @JsName("GetSocketRotation")
  public open fun getSocketRotation(inSocketName: String): Rotator

  @JsName("GetSocketQuaternion")
  public open fun getSocketQuaternion(inSocketName: String): Quat

  @JsName("GetSocketLocation")
  public open fun getSocketLocation(inSocketName: String): Vector

  @JsName("GetShouldUpdatePhysicsVolume")
  public open fun getShouldUpdatePhysicsVolume(): Boolean

  @JsName("GetRightVector")
  public open fun getRightVector(): Vector

  @JsName("GetRelativeTransform")
  public open fun getRelativeTransform(): Transform

  @JsName("GetPhysicsVolume")
  public open fun getPhysicsVolume(): PhysicsVolume

  @JsName("GetParentComponents")
  public open fun getParentComponents(parents: Array<SceneComponent>): ParentsProvider

  @JsName("GetNumChildrenComponents")
  public open fun getNumChildrenComponents(): Number

  @JsName("GetForwardVector")
  public open fun getForwardVector(): Vector

  @JsName("GetComponentVelocity")
  public open fun getComponentVelocity(): Vector

  @JsName("GetChildrenComponents")
  public open fun getChildrenComponents(includeAllDescendants: Boolean,
      children: Array<SceneComponent>): ChildrenProvider

  @JsName("GetChildComponent")
  public open fun getChildComponent(childIndex: Number): SceneComponent

  @JsName("GetAttachSocketName")
  public open fun getAttachSocketName(): String

  @JsName("GetAttachParent")
  public open fun getAttachParent(): SceneComponent

  @JsName("GetAllSocketNames")
  public open fun getAllSocketNames(): Array<String>

  @JsName("DoesSocketExist")
  public open fun doesSocketExist(inSocketName: String): Boolean

  @JsName("DetachFromParent")
  public open fun detachFromParent(maintainWorldPosition: Boolean, callModify: Boolean): Unit

  @JsName("SetMobile")
  public open fun setMobile(): Unit

  @JsName("GetComponentBounds")
  public open fun getComponentBounds(
    origin: Vector,
    boxExtent: Vector,
    sphereRadius: Number,
  ): Object153

  @JsName("MoveComponentTo")
  public open fun moveComponentTo(
    targetRelativeLocation: Vector,
    targetRelativeRotation: Rotator,
    easeOut: Boolean,
    easeIn: Boolean,
    overTime: Number,
    forceShortestRotationPath: Boolean,
    moveAction: String,
    latentInfo: LatentActionInfo,
  ): Unit

  @JsName("PinComponent")
  public open fun pinComponent(
    pinToWorldTransform: Transform,
    trackedGeometry: ArTrackedGeometry,
    debugName: String,
  ): ArPin

  @JsName("PinComponentToARPin")
  public open fun pinComponentToArPin(pin: ArPin): Boolean

  @JsName("PinComponentToTraceResult")
  public open fun pinComponentToTraceResult(traceResult: ArTraceResult, debugName: String): ArPin

  @JsName("UnpinComponent")
  public open fun unpinComponent(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SceneComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SceneComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SceneComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SceneComponent

    @JsName("C")
    public fun copy(other: UObject): SceneComponent

    @JsName("C")
    public fun copy(other: Any): SceneComponent

    @JsName("SetMobile")
    public fun setMobile(sceneComponent: SceneComponent): Unit

    @JsName("SetMobility")
    public fun setMobility(sceneComponent: SceneComponent, type: String): Unit

    @JsName("GetComponentBounds")
    public fun getComponentBounds(
      component: SceneComponent,
      origin: Vector,
      boxExtent: Vector,
      sphereRadius: Number,
    ): Object153

    @JsName("MoveComponentTo")
    public fun moveComponentTo(
      component: SceneComponent,
      targetRelativeLocation: Vector,
      targetRelativeRotation: Rotator,
      easeOut: Boolean,
      easeIn: Boolean,
      overTime: Number,
      forceShortestRotationPath: Boolean,
      moveAction: String,
      latentInfo: LatentActionInfo,
    ): Unit

    @JsName("PinComponent")
    public fun pinComponent(
      componentToPin: SceneComponent,
      pinToWorldTransform: Transform,
      trackedGeometry: ArTrackedGeometry,
      debugName: String,
    ): ArPin

    @JsName("PinComponentToARPin")
    public fun pinComponentToArPin(componentToPin: SceneComponent, pin: ArPin): Boolean

    @JsName("PinComponentToTraceResult")
    public fun pinComponentToTraceResult(
      componentToPin: SceneComponent,
      traceResult: ArTraceResult,
      debugName: String,
    ): ArPin

    @JsName("UnpinComponent")
    public fun unpinComponent(componentToUnpin: SceneComponent): Unit
  }
}

@JsName("ESceneDepthPriorityGroup")
public external object SceneDepthPriorityGroup {
  @JsName("SDPG_World")
  public var World: String

  @JsName("SDPG_Foreground")
  public var Foreground: String

  @JsName("SDPG_MAX")
  public var Max: String
}

@JsName("EIndirectLightingCacheQuality")
public external object IndirectLightingCacheQuality {
  @JsName("ILCQ_Off")
  public var Off: String

  @JsName("ILCQ_Point")
  public var Point: String

  @JsName("ILCQ_Volume")
  public var Volume: String

  @JsName("ILCQ_MAX")
  public var Max: String
}

@JsName("ELightmapType")
public external object LightmapType {
  public var Default: String

  public var ForceSurface: String

  public var ForceVolumetric: String

  @JsName("ELightmapType_MAX")
  public var Max: String
}

@JsName("EHLODBatchingPolicy")
public external object HLODBatchingPolicy {
  public var None: String

  public var MeshSection: String

  public var Instancing: String

  @JsName("EHLODBatchingPolicy_MAX")
  public var Max: String
}

@JsName("EHasCustomNavigableGeometry")
public external object HasCustomNavigableGeometry {
  public var No: String

  public var Yes: String

  public var EvenIfNotCollidable: String

  public var DontExport: String

  @JsName("EHasCustomNavigableGeometry_MAX")
  public var Max: String
}

@JsName("EHitProxyPriority")
public external object HitProxyPriority {
  @JsName("HPP_World")
  public var World: String

  @JsName("HPP_Wireframe")
  public var Wireframe: String

  @JsName("HPP_Foreground")
  public var Foreground: String

  @JsName("HPP_UI")
  public var UI: String

  @JsName("HPP_MAX")
  public var Max: String
}

@JsName("ECanBeCharacterBase")
public external object CanBeCharacterBase {
  @JsName("ECB_No")
  public var No: String

  @JsName("ECB_Yes")
  public var Yes: String

  @JsName("ECB_Owner")
  public var Owner: String

  @JsName("ECB_MAX")
  public var Max: String
}

public open external class LightingChannels {
  @JsName("bChannel0")
  public open var channel0: Boolean

  @JsName("bChannel1")
  public open var channel1: Boolean

  @JsName("bChannel2")
  public open var channel2: Boolean

  public open fun clone(): LightingChannels

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightingChannels

    @JsName("C")
    public fun copy(other: Any): LightingChannels
  }
}

public open external class CustomPrimitiveData {
  @JsName("Data")
  public open var data: Array<Number>

  public open fun clone(): CustomPrimitiveData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomPrimitiveData

    @JsName("C")
    public fun copy(other: Any): CustomPrimitiveData
  }
}

@JsName("ERuntimeVirtualTextureMainPassType")
public external object RuntimeVirtualTextureMainPassType {
  public var Never: String

  public var Exclusive: String

  public var Always: String

  @JsName("ERuntimeVirtualTextureMainPassType_MAX")
  public var Max: String
}

@JsName("ERayTracingGroupCullingPriority")
public external object RayTracingGroupCullingPriority {
  @JsName("CP_0_NEVER_CULL")
  public var Zeronevercull: String

  @JsName("CP_1")
  public var One: String

  @JsName("CP_2")
  public var Two: String

  @JsName("CP_3")
  public var Three: String

  @JsName("CP_4_DEFAULT")
  public var Fourdefault: String

  @JsName("CP_5")
  public var Five: String

  @JsName("CP_6")
  public var Six: String

  @JsName("CP_7")
  public var Seven: String

  @JsName("CP_8_QUICKLY_CULL")
  public var Eightquicklycull: String

  @JsName("CP_MAX")
  public var Max: String
}

@JsName("ERadialImpulseFalloff")
public external object RadialImpulseFalloff {
  @JsName("RIF_Constant")
  public var Constant: String

  @JsName("RIF_Linear")
  public var Linear: String

  @JsName("RIF_MAX")
  public var Max: String
}

@JsName("T$533")
public external interface Object533 {
  @JsName("HitLocation")
  public var hitLocation: Vector

  @JsName("HitNormal")
  public var hitNormal: Vector

  @JsName("BoneName")
  public var boneName: String

  @JsName("OutHit")
  public var outHit: HitResult

  @JsName("$")
  public var value: Boolean
}

@JsName("T$534")
public external interface OutOverlappingComponentsProvider {
  @JsName("OutOverlappingComponents")
  public var outOverlappingComponents: Array<PrimitiveComponent>
}

@JsName("T$535")
public external interface OverlappingActorsProvider {
  @JsName("OverlappingActors")
  public var overlappingActors: Array<Actor>
}

@JsName("T$536")
public external interface Object536 {
  @JsName("SectionIndex")
  public var sectionIndex: Number

  @JsName("$")
  public var value: MaterialInterface
}

@JsName("T$537")
public external interface Object537 {
  @JsName("OutPointOnBody")
  public var outPointOnBody: Vector

  @JsName("$")
  public var value: Number
}

public open external class PrimitiveComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("MinDrawDistance")
  public open var minDrawDistance: Number

  @JsName("LDMaxDrawDistance")
  public open var ldMaxDrawDistance: Number

  @JsName("CachedMaxDrawDistance")
  public open var cachedMaxDrawDistance: Number

  @JsName("DepthPriorityGroup")
  public open var depthPriorityGroup: String

  @JsName("ViewOwnerDepthPriorityGroup")
  public open var viewOwnerDepthPriorityGroup: String

  @JsName("IndirectLightingCacheQuality")
  public open var indirectLightingCacheQuality: String

  @JsName("LightmapType")
  public open var lightmapType: String

  @JsName("bEnableAutoLODGeneration")
  public open var enableAutoLodGeneration: Boolean

  @JsName("ExcludeForSpecificHLODLevels")
  public open var excludeForSpecificHlodLevels: Array<Number>

  @JsName("HLODBatchingPolicy")
  public open var hlodBatchingPolicy: String

  @JsName("bIsActorTextureStreamingBuiltData")
  public open var isActorTextureStreamingBuiltData: Boolean

  @JsName("bIsValidTextureStreamingBuiltData")
  public open var isValidTextureStreamingBuiltData: Boolean

  @JsName("bNeverDistanceCull")
  public open var neverDistanceCull: Boolean

  @JsName("bAlwaysCreatePhysicsState")
  public open var alwaysCreatePhysicsState: Boolean

  @JsName("bGenerateOverlapEvents")
  public open var generateOverlapEvents: Boolean

  @JsName("bMultiBodyOverlap")
  public open var multiBodyOverlap: Boolean

  @JsName("bTraceComplexOnMove")
  public open var traceComplexOnMove: Boolean

  @JsName("bReturnMaterialOnMove")
  public open var returnMaterialOnMove: Boolean

  @JsName("bUseViewOwnerDepthPriorityGroup")
  public open var useViewOwnerDepthPriorityGroup: Boolean

  @JsName("bAllowCullDistanceVolume")
  public open var allowCullDistanceVolume: Boolean

  @JsName("bHasMotionBlurVelocityMeshes")
  public open var hasMotionBlurVelocityMeshes: Boolean

  @JsName("bVisibleInReflectionCaptures")
  public open var visibleInReflectionCaptures: Boolean

  @JsName("bVisibleInRealTimeSkyCaptures")
  public open var visibleInRealTimeSkyCaptures: Boolean

  @JsName("bVisibleInRayTracing")
  public open var visibleInRayTracing: Boolean

  @JsName("bRenderInMainPass")
  public open var renderInMainPass: Boolean

  @JsName("bRenderInDepthPass")
  public open var renderInDepthPass: Boolean

  @JsName("bReceivesDecals")
  public open var receivesDecals: Boolean

  @JsName("bOwnerNoSee")
  public open var ownerNoSee: Boolean

  @JsName("bOnlyOwnerSee")
  public open var onlyOwnerSee: Boolean

  @JsName("bTreatAsBackgroundForOcclusion")
  public open var treatAsBackgroundForOcclusion: Boolean

  @JsName("bUseAsOccluder")
  public open var useAsOccluder: Boolean

  @JsName("bSelectable")
  public open var selectable: Boolean

  @JsName("bConsiderForActorPlacementWhenHidden")
  public open var considerForActorPlacementWhenHidden: Boolean

  @JsName("bForceMipStreaming")
  public open var forceMipStreaming: Boolean

  @JsName("bHasPerInstanceHitProxies")
  public open var hasPerInstanceHitProxies: Boolean

  @JsName("CastShadow")
  public open var castShadow: Boolean

  @JsName("bEmissiveLightSource")
  public open var emissiveLightSource: Boolean

  @JsName("bAffectDynamicIndirectLighting")
  public open var affectDynamicIndirectLighting: Boolean

  @JsName("bAffectDistanceFieldLighting")
  public open var affectDistanceFieldLighting: Boolean

  @JsName("bCastDynamicShadow")
  public open var castDynamicShadow: Boolean

  @JsName("bCastStaticShadow")
  public open var castStaticShadow: Boolean

  @JsName("bCastVolumetricTranslucentShadow")
  public open var castVolumetricTranslucentShadow: Boolean

  @JsName("bCastContactShadow")
  public open var castContactShadow: Boolean

  @JsName("bSelfShadowOnly")
  public open var selfShadowOnly: Boolean

  @JsName("bCastFarShadow")
  public open var castFarShadow: Boolean

  @JsName("bCastInsetShadow")
  public open var castInsetShadow: Boolean

  @JsName("bCastCinematicShadow")
  public open var castCinematicShadow: Boolean

  @JsName("bCastHiddenShadow")
  public open var castHiddenShadow: Boolean

  @JsName("bCastShadowAsTwoSided")
  public open var castShadowAsTwoSided: Boolean

  @JsName("bLightAsIfStatic")
  public open var lightAsIfStatic: Boolean

  @JsName("bLightAttachmentsAsGroup")
  public open var lightAttachmentsAsGroup: Boolean

  @JsName("bExcludeFromLightAttachmentGroup")
  public open var excludeFromLightAttachmentGroup: Boolean

  @JsName("bReceiveMobileCSMShadows")
  public open var receiveMobileCsmShadows: Boolean

  @JsName("bSingleSampleShadowFromStationaryLights")
  public open var singleSampleShadowFromStationaryLights: Boolean

  @JsName("bIgnoreRadialImpulse")
  public open var ignoreRadialImpulse: Boolean

  @JsName("bIgnoreRadialForce")
  public open var ignoreRadialForce: Boolean

  @JsName("bApplyImpulseOnDamage")
  public open var applyImpulseOnDamage: Boolean

  @JsName("bReplicatePhysicsToAutonomousProxy")
  public open var replicatePhysicsToAutonomousProxy: Boolean

  @JsName("bFillCollisionUnderneathForNavmesh")
  public open var fillCollisionUnderneathForNavmesh: Boolean

  @JsName("AlwaysLoadOnClient")
  public open var alwaysLoadOnClient: Boolean

  @JsName("AlwaysLoadOnServer")
  public open var alwaysLoadOnServer: Boolean

  @JsName("bUseEditorCompositing")
  public open var useEditorCompositing: Boolean

  @JsName("bIsBeingMovedByEditor")
  public open var isBeingMovedByEditor: Boolean

  @JsName("bRenderCustomDepth")
  public open var renderCustomDepth: Boolean

  @JsName("bVisibleInSceneCaptureOnly")
  public open var visibleInSceneCaptureOnly: Boolean

  @JsName("bHiddenInSceneCapture")
  public open var hiddenInSceneCapture: Boolean

  @JsName("bRayTracingFarField")
  public open var rayTracingFarField: Boolean

  @JsName("bHasNoStreamableTextures")
  public open var hasNoStreamableTextures: Boolean

  @JsName("bHasCustomNavigableGeometry")
  public open var hasCustomNavigableGeometry: String

  @JsName("HitProxyPriority")
  public open var hitProxyPriority: String

  @JsName("CanBeCharacterBase")
  public open var canBeCharacterBase: String

  @JsName("bUseMaxLODAsImposter")
  public open var useMaxLodAsImposter: Boolean

  @JsName("bBatchImpostersAsInstances")
  public open var batchImpostersAsInstances: Boolean

  @JsName("CanCharacterStepUpOn")
  public open var canCharacterStepUpOn: String

  @JsName("LightingChannels")
  public open var lightingChannels: LightingChannels

  @JsName("RayTracingGroupId")
  public open var rayTracingGroupId: Number

  @JsName("VisibilityId")
  public open var visibilityId: Number

  @JsName("CustomDepthStencilValue")
  public open var customDepthStencilValue: Number

  @JsName("CustomPrimitiveData")
  public open var customPrimitiveData: CustomPrimitiveData

  @JsName("CustomPrimitiveDataInternal")
  public open var customPrimitiveDataInternal: CustomPrimitiveData

  @JsName("TranslucencySortPriority")
  public open var translucencySortPriority: Number

  @JsName("TranslucencySortDistanceOffset")
  public open var translucencySortDistanceOffset: Number

  @JsName("RuntimeVirtualTextures")
  public open var runtimeVirtualTextures: Array<RuntimeVirtualTexture>

  @JsName("VirtualTextureLodBias")
  public open var virtualTextureLodBias: Any

  @JsName("VirtualTextureCullMips")
  public open var virtualTextureCullMips: Any

  @JsName("VirtualTextureMinCoverage")
  public open var virtualTextureMinCoverage: Any

  @JsName("VirtualTextureRenderPassType")
  public open var virtualTextureRenderPassType: String

  @JsName("BoundsScale")
  public open var boundsScale: Number

  @JsName("MoveIgnoreActors")
  public open var moveIgnoreActors: Array<Actor>

  @JsName("MoveIgnoreComponents")
  public open var moveIgnoreComponents: Array<PrimitiveComponent>

  @JsName("BodyInstance")
  public open var bodyInstance: BodyInstance

  @JsName("OnComponentHit")
  public open var onComponentHit: UnrealEngineMulticastDelegate<(
    HitComponent: PrimitiveComponent,
    OtherActor: Actor,
    OtherComp: PrimitiveComponent,
    NormalImpulse: Vector,
    Hit: HitResult,
  ) -> Unit>

  @JsName("OnComponentBeginOverlap")
  public open var onComponentBeginOverlap: UnrealEngineMulticastDelegate<(
    OverlappedComponent: PrimitiveComponent,
    OtherActor: Actor,
    OtherComp: PrimitiveComponent,
    OtherBodyIndex: Number,
    bFromSweep: Boolean,
    SweepResult: HitResult,
  ) -> Unit>

  @JsName("OnComponentEndOverlap")
  public open var onComponentEndOverlap: UnrealEngineMulticastDelegate<(
    OverlappedComponent: PrimitiveComponent,
    OtherActor: Actor,
    OtherComp: PrimitiveComponent,
    OtherBodyIndex: Number,
  ) -> Unit>

  @JsName("OnComponentWake")
  public open var onComponentWake:
      UnrealEngineMulticastDelegate<(WakingComponent: PrimitiveComponent, BoneName: String) -> Unit>

  @JsName("OnComponentSleep")
  public open var onComponentSleep:
      UnrealEngineMulticastDelegate<(SleepingComponent: PrimitiveComponent,
      BoneName: String) -> Unit>

  @JsName("OnBeginCursorOver")
  public open var onBeginCursorOver:
      UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent) -> Unit>

  @JsName("OnEndCursorOver")
  public open var onEndCursorOver:
      UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent) -> Unit>

  @JsName("OnClicked")
  public open var onClicked: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent,
      ButtonPressed: Key) -> Unit>

  @JsName("OnReleased")
  public open var onReleased: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent,
      ButtonReleased: Key) -> Unit>

  @JsName("OnInputTouchBegin")
  public open var onInputTouchBegin: UnrealEngineMulticastDelegate<(FingerIndex: String,
      TouchedComponent: PrimitiveComponent) -> Unit>

  @JsName("OnInputTouchEnd")
  public open var onInputTouchEnd: UnrealEngineMulticastDelegate<(FingerIndex: String,
      TouchedComponent: PrimitiveComponent) -> Unit>

  @JsName("OnInputTouchEnter")
  public open var onInputTouchEnter: UnrealEngineMulticastDelegate<(FingerIndex: String,
      TouchedComponent: PrimitiveComponent) -> Unit>

  @JsName("OnInputTouchLeave")
  public open var onInputTouchLeave: UnrealEngineMulticastDelegate<(FingerIndex: String,
      TouchedComponent: PrimitiveComponent) -> Unit>

  @JsName("RayTracingGroupCullingPriority")
  public open var rayTracingGroupCullingPriority: String

  @JsName("CustomDepthStencilWriteMask")
  public open var customDepthStencilWriteMask: String

  @JsName("LODParentPrimitive")
  public open var lodParentPrimitive: PrimitiveComponent

  @JsName("WasRecentlyRendered")
  public open fun wasRecentlyRendered(tolerance: Number): Boolean

  @JsName("WakeRigidBody")
  public open fun wakeRigidBody(boneName: String): Unit

  @JsName("WakeAllRigidBodies")
  public open fun wakeAllRigidBodies(): Unit

  @JsName("SetWalkableSlopeOverride")
  public open fun setWalkableSlopeOverride(newOverride: WalkableSlopeOverride): Unit

  @JsName("SetVisibleInSceneCaptureOnly")
  public open fun setVisibleInSceneCaptureOnly(value: Boolean): Unit

  @JsName("SetVisibleInRayTracing")
  public open fun setVisibleInRayTracing(newVisibleInRayTracing: Boolean): Unit

  @JsName("SetVectorParameterForDefaultCustomPrimitiveData")
  public open fun setVectorParameterForDefaultCustomPrimitiveData(parameterName: String,
      value: Vector4): Unit

  @JsName("SetVectorParameterForCustomPrimitiveData")
  public open fun setVectorParameterForCustomPrimitiveData(parameterName: String, value: Vector4):
      Unit

  @JsName("SetUseCCD")
  public open fun setUseCcd(inUseCcd: Boolean, boneName: String): Unit

  @JsName("SetTranslucentSortPriority")
  public open fun setTranslucentSortPriority(newTranslucentSortPriority: Number): Unit

  @JsName("SetTranslucencySortDistanceOffset")
  public open fun setTranslucencySortDistanceOffset(newTranslucencySortDistanceOffset: Number): Unit

  @JsName("SetSingleSampleShadowFromStationaryLights")
  public open
      fun setSingleSampleShadowFromStationaryLights(newSingleSampleShadowFromStationaryLights: Boolean):
      Unit

  @JsName("SetSimulatePhysics")
  public open fun setSimulatePhysics(simulate: Boolean): Unit

  @JsName("SetScalarParameterForDefaultCustomPrimitiveData")
  public open fun setScalarParameterForDefaultCustomPrimitiveData(parameterName: String,
      value: Number): Unit

  @JsName("SetScalarParameterForCustomPrimitiveData")
  public open fun setScalarParameterForCustomPrimitiveData(parameterName: String, value: Number):
      Unit

  @JsName("SetRenderInMainPass")
  public open fun setRenderInMainPass(value: Boolean): Unit

  @JsName("SetRenderInDepthPass")
  public open fun setRenderInDepthPass(value: Boolean): Unit

  @JsName("SetRenderCustomDepth")
  public open fun setRenderCustomDepth(value: Boolean): Unit

  @JsName("SetReceivesDecals")
  public open fun setReceivesDecals(newReceivesDecals: Boolean): Unit

  @JsName("SetPhysMaterialOverride")
  public open fun setPhysMaterialOverride(newPhysMaterial: PhysicalMaterial): Unit

  @JsName("SetPhysicsMaxAngularVelocityInRadians")
  public open fun setPhysicsMaxAngularVelocityInRadians(
    newMaxAngVel: Number,
    addToCurrent: Boolean,
    boneName: String,
  ): Unit

  @JsName("SetPhysicsMaxAngularVelocityInDegrees")
  public open fun setPhysicsMaxAngularVelocityInDegrees(
    newMaxAngVel: Number,
    addToCurrent: Boolean,
    boneName: String,
  ): Unit

  @JsName("SetPhysicsLinearVelocity")
  public open fun setPhysicsLinearVelocity(
    newVel: Vector,
    addToCurrent: Boolean,
    boneName: String,
  ): Unit

  @JsName("SetPhysicsAngularVelocityInRadians")
  public open fun setPhysicsAngularVelocityInRadians(
    newAngVel: Vector,
    addToCurrent: Boolean,
    boneName: String,
  ): Unit

  @JsName("SetPhysicsAngularVelocityInDegrees")
  public open fun setPhysicsAngularVelocityInDegrees(
    newAngVel: Vector,
    addToCurrent: Boolean,
    boneName: String,
  ): Unit

  @JsName("SetOwnerNoSee")
  public open fun setOwnerNoSee(newOwnerNoSee: Boolean): Unit

  @JsName("SetOnlyOwnerSee")
  public open fun setOnlyOwnerSee(newOnlyOwnerSee: Boolean): Unit

  @JsName("SetNotifyRigidBodyCollision")
  public open fun setNotifyRigidBodyCollision(newNotifyRigidBodyCollision: Boolean): Unit

  @JsName("SetMaterialByName")
  public open fun setMaterialByName(materialSlotName: String, material: MaterialInterface): Unit

  @JsName("SetMaterial")
  public open fun setMaterial(elementIndex: Number, material: MaterialInterface): Unit

  @JsName("SetMassScale")
  public open fun setMassScale(boneName: String, inMassScale: Number): Unit

  @JsName("SetMassOverrideInKg")
  public open fun setMassOverrideInKg(
    boneName: String,
    massInKg: Number,
    overrideMass: Boolean,
  ): Unit

  @JsName("SetLinearDamping")
  public open fun setLinearDamping(inDamping: Number): Unit

  @JsName("SetLightingChannels")
  public open fun setLightingChannels(
    channel0: Boolean,
    channel1: Boolean,
    channel2: Boolean,
  ): Unit

  @JsName("SetLightAttachmentsAsGroup")
  public open fun setLightAttachmentsAsGroup(inLightAttachmentsAsGroup: Boolean): Unit

  @JsName("SetHiddenInSceneCapture")
  public open fun setHiddenInSceneCapture(value: Boolean): Unit

  @JsName("SetGenerateOverlapEvents")
  public open fun setGenerateOverlapEvents(inGenerateOverlapEvents: Boolean): Unit

  @JsName("SetExcludeFromLightAttachmentGroup")
  public open fun setExcludeFromLightAttachmentGroup(inExcludeFromLightAttachmentGroup: Boolean):
      Unit

  @JsName("SetEnableGravity")
  public open fun setEnableGravity(gravityEnabled: Boolean): Unit

  @JsName("SetEmissiveLightSource")
  public open fun setEmissiveLightSource(newEmissiveLightSource: Boolean): Unit

  @JsName("SetDefaultCustomPrimitiveDataVector4")
  public open fun setDefaultCustomPrimitiveDataVector4(dataIndex: Number, value: Vector4): Unit

  @JsName("SetDefaultCustomPrimitiveDataVector3")
  public open fun setDefaultCustomPrimitiveDataVector3(dataIndex: Number, value: Vector): Unit

  @JsName("SetDefaultCustomPrimitiveDataVector2")
  public open fun setDefaultCustomPrimitiveDataVector2(dataIndex: Number, value: Vector2d): Unit

  @JsName("SetDefaultCustomPrimitiveDataFloat")
  public open fun setDefaultCustomPrimitiveDataFloat(dataIndex: Number, value: Number): Unit

  @JsName("SetCustomPrimitiveDataVector4")
  public open fun setCustomPrimitiveDataVector4(dataIndex: Number, value: Vector4): Unit

  @JsName("SetCustomPrimitiveDataVector3")
  public open fun setCustomPrimitiveDataVector3(dataIndex: Number, value: Vector): Unit

  @JsName("SetCustomPrimitiveDataVector2")
  public open fun setCustomPrimitiveDataVector2(dataIndex: Number, value: Vector2d): Unit

  @JsName("SetCustomPrimitiveDataFloat")
  public open fun setCustomPrimitiveDataFloat(dataIndex: Number, value: Number): Unit

  @JsName("SetCustomDepthStencilWriteMask")
  public open fun setCustomDepthStencilWriteMask(writeMaskBit: String): Unit

  @JsName("SetCustomDepthStencilValue")
  public open fun setCustomDepthStencilValue(value: Number): Unit

  @JsName("SetCullDistance")
  public open fun setCullDistance(newCullDistance: Number): Unit

  @JsName("SetConstraintMode")
  public open fun setConstraintMode(constraintMode: String): Unit

  @JsName("SetCollisionResponseToChannel")
  public open fun setCollisionResponseToChannel(channel: String, newResponse: String): Unit

  @JsName("SetCollisionResponseToAllChannels")
  public open fun setCollisionResponseToAllChannels(newResponse: String): Unit

  @JsName("SetCollisionProfileName")
  public open fun setCollisionProfileName(inCollisionProfileName: String, updateOverlaps: Boolean):
      Unit

  @JsName("SetCollisionObjectType")
  public open fun setCollisionObjectType(channel: String): Unit

  @JsName("SetCollisionEnabled")
  public open fun setCollisionEnabled(newType: String): Unit

  @JsName("SetCenterOfMass")
  public open fun setCenterOfMass(centerOfMassOffset: Vector, boneName: String): Unit

  @JsName("SetCastShadow")
  public open fun setCastShadow(newCastShadow: Boolean): Unit

  @JsName("SetCastInsetShadow")
  public open fun setCastInsetShadow(inCastInsetShadow: Boolean): Unit

  @JsName("SetCastHiddenShadow")
  public open fun setCastHiddenShadow(newCastHiddenShadow: Boolean): Unit

  @JsName("SetCastContactShadow")
  public open fun setCastContactShadow(inCastContactShadow: Boolean): Unit

  @JsName("SetBoundsScale")
  public open fun setBoundsScale(newBoundsScale: Number): Unit

  @JsName("SetAngularDamping")
  public open fun setAngularDamping(inDamping: Number): Unit

  @JsName("SetAllUseCCD")
  public open fun setAllUseCcd(inUseCcd: Boolean): Unit

  @JsName("SetAllPhysicsLinearVelocity")
  public open fun setAllPhysicsLinearVelocity(newVel: Vector, addToCurrent: Boolean): Unit

  @JsName("SetAllPhysicsAngularVelocityInRadians")
  public open fun setAllPhysicsAngularVelocityInRadians(newAngVel: Vector, addToCurrent: Boolean):
      Unit

  @JsName("SetAllPhysicsAngularVelocityInDegrees")
  public open fun setAllPhysicsAngularVelocityInDegrees(newAngVel: Vector, addToCurrent: Boolean):
      Unit

  @JsName("SetAllMassScale")
  public open fun setAllMassScale(inMassScale: Number): Unit

  @JsName("ScaleByMomentOfInertia")
  public open fun scaleByMomentOfInertia(inputVector: Vector, boneName: String): Vector

  @JsName("PutRigidBodyToSleep")
  public open fun putRigidBodyToSleep(boneName: String): Unit

  @JsName("K2_SphereTraceComponent")
  public open fun k2SphereTraceComponent(
    traceStart: Vector,
    traceEnd: Vector,
    sphereRadius: Number,
    traceComplex: Boolean,
    showTrace: Boolean,
    persistentShowTrace: Boolean,
    hitLocation: Vector,
    hitNormal: Vector,
    boneName: String,
    outHit: HitResult,
  ): Object533

  @JsName("K2_SphereOverlapComponent")
  public open fun k2SphereOverlapComponent(
    inSphereCentre: Vector,
    inSphereRadius: Number,
    traceComplex: Boolean,
    showTrace: Boolean,
    persistentShowTrace: Boolean,
    hitLocation: Vector,
    hitNormal: Vector,
    boneName: String,
    outHit: HitResult,
  ): Object533

  @JsName("K2_LineTraceComponent")
  public open fun k2LineTraceComponent(
    traceStart: Vector,
    traceEnd: Vector,
    traceComplex: Boolean,
    showTrace: Boolean,
    persistentShowTrace: Boolean,
    hitLocation: Vector,
    hitNormal: Vector,
    boneName: String,
    outHit: HitResult,
  ): Object533

  @JsName("K2_IsQueryCollisionEnabled")
  public open fun k2IsQueryCollisionEnabled(): Boolean

  @JsName("K2_IsPhysicsCollisionEnabled")
  public open fun k2IsPhysicsCollisionEnabled(): Boolean

  @JsName("K2_IsCollisionEnabled")
  public open fun k2IsCollisionEnabled(): Boolean

  @JsName("K2_BoxOverlapComponent")
  public open fun k2BoxOverlapComponent(
    inBoxCentre: Vector,
    inBox: Box,
    traceComplex: Boolean,
    showTrace: Boolean,
    persistentShowTrace: Boolean,
    hitLocation: Vector,
    hitNormal: Vector,
    boneName: String,
    outHit: HitResult,
  ): Object533

  @JsName("IsOverlappingComponent")
  public open fun isOverlappingComponent(otherComp: PrimitiveComponent): Boolean

  @JsName("IsOverlappingActor")
  public open fun isOverlappingActor(other: Actor): Boolean

  @JsName("IsGravityEnabled")
  public open fun isGravityEnabled(): Boolean

  @JsName("IsAnyRigidBodyAwake")
  public open fun isAnyRigidBodyAwake(): Boolean

  @JsName("IgnoreComponentWhenMoving")
  public open fun ignoreComponentWhenMoving(component: PrimitiveComponent, shouldIgnore: Boolean):
      Unit

  @JsName("IgnoreActorWhenMoving")
  public open fun ignoreActorWhenMoving(actor: Actor, shouldIgnore: Boolean): Unit

  @JsName("GetWalkableSlopeOverride")
  public open fun getWalkableSlopeOverride(): WalkableSlopeOverride

  @JsName("GetPhysicsLinearVelocityAtPoint")
  public open fun getPhysicsLinearVelocityAtPoint(point: Vector, boneName: String): Vector

  @JsName("GetPhysicsLinearVelocity")
  public open fun getPhysicsLinearVelocity(boneName: String): Vector

  @JsName("GetPhysicsAngularVelocityInRadians")
  public open fun getPhysicsAngularVelocityInRadians(boneName: String): Vector

  @JsName("GetPhysicsAngularVelocityInDegrees")
  public open fun getPhysicsAngularVelocityInDegrees(boneName: String): Vector

  @JsName("GetOverlappingComponents")
  public open fun getOverlappingComponents(outOverlappingComponents: Array<PrimitiveComponent>):
      OutOverlappingComponentsProvider

  @JsName("GetOverlappingActors")
  public open fun getOverlappingActors(overlappingActors: Array<Actor>,
      classFilter: UnrealEngineClass): OverlappingActorsProvider

  @JsName("GetNumMaterials")
  public open fun getNumMaterials(): Number

  @JsName("GetMaterialFromCollisionFaceIndex")
  public open fun getMaterialFromCollisionFaceIndex(faceIndex: Number, sectionIndex: Number):
      Object536

  @JsName("GetMaterial")
  public open fun getMaterial(elementIndex: Number): MaterialInterface

  @JsName("GetMassScale")
  public open fun getMassScale(boneName: String): Number

  @JsName("GetMass")
  public open fun getMass(): Number

  @JsName("GetLinearDamping")
  public open fun getLinearDamping(): Number

  @JsName("GetInertiaTensor")
  public open fun getInertiaTensor(boneName: String): Vector

  @JsName("GetGenerateOverlapEvents")
  public open fun getGenerateOverlapEvents(): Boolean

  @JsName("GetCustomPrimitiveDataIndexForVectorParameter")
  public open fun getCustomPrimitiveDataIndexForVectorParameter(parameterName: String): Number

  @JsName("GetCustomPrimitiveDataIndexForScalarParameter")
  public open fun getCustomPrimitiveDataIndexForScalarParameter(parameterName: String): Number

  @JsName("GetCollisionResponseToChannel")
  public open fun getCollisionResponseToChannel(channel: String): String

  @JsName("GetCollisionProfileName")
  public open fun getCollisionProfileName(): String

  @JsName("GetCollisionObjectType")
  public open fun getCollisionObjectType(): String

  @JsName("GetCollisionEnabled")
  public open fun getCollisionEnabled(): String

  @JsName("GetClosestPointOnCollision")
  public open fun getClosestPointOnCollision(
    point: Vector,
    outPointOnBody: Vector,
    boneName: String,
  ): Object537

  @JsName("GetCenterOfMass")
  public open fun getCenterOfMass(boneName: String): Vector

  @JsName("GetAngularDamping")
  public open fun getAngularDamping(): Number

  @JsName("CreateDynamicMaterialInstance")
  public open fun createDynamicMaterialInstance(
    elementIndex: Number,
    sourceMaterial: MaterialInterface,
    optionalName: String,
  ): MaterialInstanceDynamic

  @JsName("CreateAndSetMaterialInstanceDynamicFromMaterial")
  public open fun createAndSetMaterialInstanceDynamicFromMaterial(elementIndex: Number,
      parent: MaterialInterface): MaterialInstanceDynamic

  @JsName("CreateAndSetMaterialInstanceDynamic")
  public open fun createAndSetMaterialInstanceDynamic(elementIndex: Number): MaterialInstanceDynamic

  @JsName("CopyArrayOfMoveIgnoreComponents")
  public open fun copyArrayOfMoveIgnoreComponents(): Array<PrimitiveComponent>

  @JsName("CopyArrayOfMoveIgnoreActors")
  public open fun copyArrayOfMoveIgnoreActors(): Array<Actor>

  @JsName("ClearMoveIgnoreComponents")
  public open fun clearMoveIgnoreComponents(): Unit

  @JsName("ClearMoveIgnoreActors")
  public open fun clearMoveIgnoreActors(): Unit

  @JsName("CanCharacterStepUp")
  public open fun canCharacterStepUp(pawn: Pawn): Boolean

  @JsName("AddVelocityChangeImpulseAtLocation")
  public open fun addVelocityChangeImpulseAtLocation(
    impulse: Vector,
    location: Vector,
    boneName: String,
  ): Unit

  @JsName("AddTorqueInRadians")
  public open fun addTorqueInRadians(
    torque: Vector,
    boneName: String,
    accelChange: Boolean,
  ): Unit

  @JsName("AddTorqueInDegrees")
  public open fun addTorqueInDegrees(
    torque: Vector,
    boneName: String,
    accelChange: Boolean,
  ): Unit

  @JsName("AddRadialImpulse")
  public open fun addRadialImpulse(
    origin: Vector,
    radius: Number,
    strength: Number,
    falloff: String,
    velChange: Boolean,
  ): Unit

  @JsName("AddRadialForce")
  public open fun addRadialForce(
    origin: Vector,
    radius: Number,
    strength: Number,
    falloff: String,
    accelChange: Boolean,
  ): Unit

  @JsName("AddImpulseAtLocation")
  public open fun addImpulseAtLocation(
    impulse: Vector,
    location: Vector,
    boneName: String,
  ): Unit

  @JsName("AddImpulse")
  public open fun addImpulse(
    impulse: Vector,
    boneName: String,
    velChange: Boolean,
  ): Unit

  @JsName("AddForceAtLocationLocal")
  public open fun addForceAtLocationLocal(
    force: Vector,
    location: Vector,
    boneName: String,
  ): Unit

  @JsName("AddForceAtLocation")
  public open fun addForceAtLocation(
    force: Vector,
    location: Vector,
    boneName: String,
  ): Unit

  @JsName("AddForce")
  public open fun addForce(
    force: Vector,
    boneName: String,
    accelChange: Boolean,
  ): Unit

  @JsName("AddAngularImpulseInRadians")
  public open fun addAngularImpulseInRadians(
    impulse: Vector,
    boneName: String,
    velChange: Boolean,
  ): Unit

  @JsName("AddAngularImpulseInDegrees")
  public open fun addAngularImpulseInDegrees(
    impulse: Vector,
    boneName: String,
    velChange: Boolean,
  ): Unit

  @JsName("ComponentOverlapActors")
  public open fun componentOverlapActors(
    componentTransform: Transform,
    objectTypes: Array<String>,
    actorClassFilter: UnrealEngineClass,
    actorsToIgnore: Array<Actor>,
    outActors: Array<Actor>,
  ): Object320

  @JsName("ComponentOverlapComponents")
  public open fun componentOverlapComponents(
    componentTransform: Transform,
    objectTypes: Array<String>,
    componentClassFilter: UnrealEngineClass,
    actorsToIgnore: Array<Actor>,
    outComponents: Array<PrimitiveComponent>,
  ): Object321

  @JsName("SetCastInsetShadowForAllAttachments")
  public open fun setCastInsetShadowForAllAttachments(castInsetShadow: Boolean,
      lightAttachmentsAsGroup: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PrimitiveComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PrimitiveComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PrimitiveComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PrimitiveComponent

    @JsName("C")
    public fun copy(other: UObject): PrimitiveComponent

    @JsName("C")
    public fun copy(other: Any): PrimitiveComponent

    @JsName("ComponentOverlapActors")
    public fun componentOverlapActors(
      component: PrimitiveComponent,
      componentTransform: Transform,
      objectTypes: Array<String>,
      actorClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outActors: Array<Actor>,
    ): Object320

    @JsName("ComponentOverlapComponents")
    public fun componentOverlapComponents(
      component: PrimitiveComponent,
      componentTransform: Transform,
      objectTypes: Array<String>,
      componentClassFilter: UnrealEngineClass,
      actorsToIgnore: Array<Actor>,
      outComponents: Array<PrimitiveComponent>,
    ): Object321

    @JsName("SetCastInsetShadowForAllAttachments")
    public fun setCastInsetShadowForAllAttachments(
      primitiveComponent: PrimitiveComponent,
      castInsetShadow: Boolean,
      lightAttachmentsAsGroup: Boolean,
    ): Unit
  }
}

@JsName("MRMeshBodyHolder")
public open external class MrMeshBodyHolder(
  outer: UObject,
) : UObject {
  @JsName("BodySetup")
  public open var bodySetup: BodySetup

  @JsName("BodyInstance")
  public open var bodyInstance: BodyInstance

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MrMeshBodyHolder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MrMeshBodyHolder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MrMeshBodyHolder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MrMeshBodyHolder

    @JsName("C")
    public fun copy(other: UObject): MrMeshBodyHolder

    @JsName("C")
    public fun copy(other: Any): MrMeshBodyHolder
  }
}

@JsName("MRMeshComponent")
public open external class MrMeshComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("Material")
  public open var material: MaterialInterface

  @JsName("WireframeMaterial")
  public open var wireframeMaterial: MaterialInterface

  @JsName("bCreateMeshProxySections")
  public open var createMeshProxySections: Boolean

  @JsName("bUpdateNavMeshOnMeshUpdate")
  public open var updateNavMeshOnMeshUpdate: Boolean

  @JsName("bNeverCreateCollisionMesh")
  public open var neverCreateCollisionMesh: Boolean

  @JsName("BodyHolders")
  public open var bodyHolders: Array<MrMeshBodyHolder>

  @JsName("SetWireframeMaterial")
  public open fun setWireframeMaterial(inMaterial: MaterialInterface): Unit

  @JsName("SetWireframeColor")
  public open fun setWireframeColor(inColor: LinearColor): Unit

  @JsName("SetUseWireframe")
  public open fun setUseWireframe(useWireframe: Boolean): Unit

  @JsName("SetEnableMeshOcclusion")
  public open fun setEnableMeshOcclusion(enable: Boolean): Unit

  @JsName("RequestNavMeshUpdate")
  public open fun requestNavMeshUpdate(): Unit

  @JsName("IsConnected")
  public open fun isConnected(): Boolean

  @JsName("GetWireframeColor")
  public open fun getWireframeColor(): LinearColor

  @JsName("GetUseWireframe")
  public open fun getUseWireframe(): Boolean

  @JsName("GetEnableMeshOcclusion")
  public open fun getEnableMeshOcclusion(): Boolean

  @JsName("ForceNavMeshUpdate")
  public open fun forceNavMeshUpdate(): Unit

  @JsName("Clear")
  public open fun clear(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MrMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MrMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MrMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MrMeshComponent

    @JsName("C")
    public fun copy(other: UObject): MrMeshComponent

    @JsName("C")
    public fun copy(other: Any): MrMeshComponent
  }
}

@JsName("EARObjectClassification")
public external object ARObjectClassification {
  public var NotApplicable: String

  public var Unknown: String

  public var Wall: String

  public var Ceiling: String

  public var Floor: String

  public var Table: String

  public var Seat: String

  public var Face: String

  public var Image: String

  public var World: String

  public var SceneObject: String

  public var HandMesh: String

  public var Door: String

  public var Window: String

  @JsName("EARObjectClassification_MAX")
  public var Max: String
}

@JsName("EARSpatialMeshUsageFlags")
public external object ARSpatialMeshUsageFlags {
  public var NotApplicable: String

  public var Visible: String

  public var Collision: String

  @JsName("EARSpatialMeshUsageFlags_MAX")
  public var Max: String
}

@JsName("ARTrackedGeometry")
public open external class ArTrackedGeometry(
  outer: UObject,
) : UObject {
  @JsName("UniqueId")
  public open var uniqueId: Guid

  @JsName("LocalToTrackingTransform")
  public open var localToTrackingTransform: Transform

  @JsName("LocalToAlignedTrackingTransform")
  public open var localToAlignedTrackingTransform: Transform

  @JsName("TrackingState")
  public open var trackingState: String

  @JsName("UnderlyingMesh")
  public open var underlyingMesh: MrMeshComponent

  @JsName("ObjectClassification")
  public open var objectClassification: String

  @JsName("SpatialMeshUsageFlags")
  public open var spatialMeshUsageFlags: String

  @JsName("LastUpdateFrameNumber")
  public open var lastUpdateFrameNumber: Number

  @JsName("DebugName")
  public open var debugName: String

  @JsName("IsTracked")
  public open fun isTracked(): Boolean

  @JsName("HasSpatialMeshUsageFlag")
  public open fun hasSpatialMeshUsageFlag(inFlag: String): Boolean

  @JsName("GetUnderlyingMesh")
  public open fun getUnderlyingMesh(): MrMeshComponent

  @JsName("GetTrackingState")
  public open fun getTrackingState(): String

  @JsName("GetObjectClassification")
  public open fun getObjectClassification(): String

  public override fun getName(): String

  @JsName("GetLocalToWorldTransform")
  public open fun getLocalToWorldTransform(): Transform

  @JsName("GetLocalToTrackingTransform")
  public open fun getLocalToTrackingTransform(): Transform

  @JsName("GetLastUpdateTimestamp")
  public open fun getLastUpdateTimestamp(): Number

  @JsName("GetLastUpdateFrameNumber")
  public open fun getLastUpdateFrameNumber(): Number

  @JsName("GetDebugName")
  public open fun getDebugName(): String

  @JsName("DebugDrawTrackedGeometry")
  public open fun debugDrawTrackedGeometry(
    worldContextObject: UObject,
    color: LinearColor,
    outlineThickness: Number,
    persistForSeconds: Number,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTrackedGeometry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTrackedGeometry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTrackedGeometry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTrackedGeometry

    @JsName("C")
    public fun copy(other: UObject): ArTrackedGeometry

    @JsName("C")
    public fun copy(other: Any): ArTrackedGeometry

    @JsName("DebugDrawTrackedGeometry")
    public fun debugDrawTrackedGeometry(
      trackedGeometry: ArTrackedGeometry,
      worldContextObject: UObject,
      color: LinearColor,
      outlineThickness: Number,
      persistForSeconds: Number,
    ): Unit
  }
}

@JsName("ARTraceResult")
public open external class ArTraceResult {
  @JsName("DistanceFromCamera")
  public open var distanceFromCamera: Number

  @JsName("TraceChannel")
  public open var traceChannel: String

  @JsName("LocalTransform")
  public open var localTransform: Transform

  @JsName("TrackedGeometry")
  public open var trackedGeometry: ArTrackedGeometry

  public open fun clone(): ArTraceResult

  @JsName("GetDistanceFromCamera")
  public open fun getDistanceFromCamera(): Number

  @JsName("GetLocalToTrackingTransform")
  public open fun getLocalToTrackingTransform(): Transform

  @JsName("GetLocalToWorldTransform")
  public open fun getLocalToWorldTransform(): Transform

  @JsName("GetLocalTransform")
  public open fun getLocalTransform(): Transform

  @JsName("GetTraceChannel")
  public open fun getTraceChannel(): String

  @JsName("GetTrackedGeometry")
  public open fun getTrackedGeometry(): ArTrackedGeometry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArTraceResult

    @JsName("C")
    public fun copy(other: Any): ArTraceResult

    @JsName("GetDistanceFromCamera")
    public fun getDistanceFromCamera(traceResult: ArTraceResult): Number

    @JsName("GetLocalToTrackingTransform")
    public fun getLocalToTrackingTransform(traceResult: ArTraceResult): Transform

    @JsName("GetLocalToWorldTransform")
    public fun getLocalToWorldTransform(traceResult: ArTraceResult): Transform

    @JsName("GetLocalTransform")
    public fun getLocalTransform(traceResult: ArTraceResult): Transform

    @JsName("GetTraceChannel")
    public fun getTraceChannel(traceResult: ArTraceResult): String

    @JsName("GetTrackedGeometry")
    public fun getTrackedGeometry(traceResult: ArTraceResult): ArTrackedGeometry
  }
}

@JsName("EHMDTrackingOrigin")
public external object HMDTrackingOrigin {
  public var Floor: String

  public var Eye: String

  public var Stage: String

  @JsName("EHMDTrackingOrigin_MAX")
  public var Max: String
}

@JsName("T$542")
public external interface Object542 {
  @JsName("X")
  public var x: Any

  @JsName("Y")
  public var y: Any
}

@JsName("T$543")
public external interface Vector2DProvider {
  @JsName("A")
  public var vector2d: Vector2d
}

@JsName("T$544")
public external interface Object544 {
  @JsName("OutDir")
  public var outDir: Vector2d

  @JsName("OutLength")
  public var outLength: Any
}

@JsName("Vector2D")
public open external class Vector2d {
  @JsName("X")
  public open var x: Any

  @JsName("Y")
  public open var y: Any

  public open fun clone(): Vector2d

  @JsName("Conv_Vector2dToText")
  public open fun convertVector2dToText(): String

  @JsName("Conv_Vector2dToString")
  public open fun convertVector2dToString(): String

  @JsName("Add_Vector2DFloat")
  public open fun addVector2dFloat(b: Any): Vector2d

  @JsName("Add_Vector2DVector2D")
  public open fun addVector2dVector2d(b: Vector2d): Vector2d

  @JsName("BreakVector2D")
  public open fun breakVector2d(x: Any, y: Any): Object542

  @JsName("ClampAxes2D")
  public open fun clampAxes2d(minAxisVal: Any, maxAxisVal: Any): Vector2d

  @JsName("Conv_Vector2DToIntPoint")
  public open fun convertVector2dToIntPoint(): IntPoint

  @JsName("Conv_Vector2DToVector")
  public open fun convertVector2dToVector(z: Number): Vector

  @JsName("CrossProduct2D")
  public open fun crossProduct2d(b: Vector2d): Any

  @JsName("Distance2D")
  public open fun distance2d(v2: Vector2d): Any

  @JsName("DistanceSquared2D")
  public open fun distanceSquared2d(v2: Vector2d): Any

  @JsName("Divide_Vector2DFloat")
  public open fun divideVector2dFloat(b: Any): Vector2d

  @JsName("Divide_Vector2DVector2D")
  public open fun divideVector2dVector2d(b: Vector2d): Vector2d

  @JsName("DotProduct2D")
  public open fun dotProduct2d(b: Vector2d): Any

  @JsName("EqualEqual_Vector2DVector2D")
  public open fun equalEqualVector2dVector2d(b: Vector2d, errorTolerance: Number): Boolean

  @JsName("EqualExactly_Vector2DVector2D")
  public open fun equalExactlyVector2dVector2d(b: Vector2d): Boolean

  @JsName("GetAbs2D")
  public open fun getAbs2d(): Vector2d

  @JsName("GetAbsMax2D")
  public open fun getAbsMax2d(): Any

  @JsName("GetMax2D")
  public open fun getMax2d(): Any

  @JsName("GetMin2D")
  public open fun getMin2d(): Any

  @JsName("GetRotated2D")
  public open fun getRotated2d(angleDeg: Number): Vector2d

  @JsName("IsNearlyZero2D")
  public open fun isNearlyZero2d(tolerance: Number): Boolean

  @JsName("IsZero2D")
  public open fun isZero2d(): Boolean

  @JsName("MakeBox2D")
  public open fun makeBox2d(max: Vector2d): Box2d

  @JsName("Multiply_Vector2DFloat")
  public open fun multiplyVector2dFloat(b: Any): Vector2d

  @JsName("Multiply_Vector2DVector2D")
  public open fun multiplyVector2dVector2d(b: Vector2d): Vector2d

  @JsName("Negated2D")
  public open fun negated2d(): Vector2d

  @JsName("Normal2D")
  public open fun normal2d(): Vector2d

  @JsName("Normalize2D")
  public open fun normalize2d(tolerance: Number): Vector2DProvider

  @JsName("NormalSafe2D")
  public open fun normalSafe2d(tolerance: Number): Vector2d

  @JsName("NotEqual_Vector2DVector2D")
  public open fun notEqualVector2dVector2d(b: Vector2d, errorTolerance: Number): Boolean

  @JsName("NotEqualExactly_Vector2DVector2D")
  public open fun notEqualExactlyVector2dVector2d(b: Vector2d): Boolean

  @JsName("Set2D")
  public open fun set2d(x: Any, y: Any): Vector2DProvider

  @JsName("Spherical2DToUnitCartesian")
  public open fun spherical2dToUnitCartesian(): Vector

  @JsName("Subtract_Vector2DFloat")
  public open fun subtractVector2dFloat(b: Any): Vector2d

  @JsName("Subtract_Vector2DVector2D")
  public open fun subtractVector2dVector2d(b: Vector2d): Vector2d

  @JsName("ToDirectionAndLength2D")
  public open fun toDirectionAndLength2d(outDir: Vector2d, outLength: Any): Object544

  @JsName("ToRounded2D")
  public open fun toRounded2d(): Vector2d

  @JsName("ToSign2D")
  public open fun toSign2d(): Vector2d

  @JsName("Vector2DInterpTo")
  public open fun vector2dInterpTo(
    target: Vector2d,
    deltaTime: Number,
    interpSpeed: Number,
  ): Vector2d

  @JsName("Vector2DInterpTo_Constant")
  public open fun vector2dInterpToConstant(
    target: Vector2d,
    deltaTime: Number,
    interpSpeed: Number,
  ): Vector2d

  @JsName("VSize2D")
  public open fun vSize2d(): Any

  @JsName("VSize2DSquared")
  public open fun vSize2dSquared(): Any

  @JsName("SetSpectatorScreenModeTexturePlusEyeLayout")
  public open fun setSpectatorScreenModeTexturePlusEyeLayout(
    eyeRectMax: Vector2d,
    textureRectMin: Vector2d,
    textureRectMax: Vector2d,
    drawEyeFirst: Boolean,
    clearBlack: Boolean,
    useAlpha: Boolean,
  ): Unit

  @JsName("LineTraceTrackedObjects")
  public open fun lineTraceTrackedObjects(
    testFeaturePoints: Boolean,
    testGroundPlane: Boolean,
    testPlaneExtents: Boolean,
    testPlaneBoundaryPolygon: Boolean,
  ): Array<ArTraceResult>

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Vector2d

    @JsName("C")
    public fun copy(other: Any): Vector2d

    @JsName("Conv_Vector2dToText")
    public fun convertVector2dToText(inVec: Vector2d): String

    @JsName("Conv_Vector2dToString")
    public fun convertVector2dToString(inVec: Vector2d): String

    @JsName("Add_Vector2DFloat")
    public fun addVector2dFloat(a: Vector2d, b: Any): Vector2d

    @JsName("Add_Vector2DVector2D")
    public fun addVector2dVector2d(a: Vector2d, b: Vector2d): Vector2d

    @JsName("BreakVector2D")
    public fun breakVector2d(
      inVec: Vector2d,
      x: Any,
      y: Any,
    ): Object542

    @JsName("ClampAxes2D")
    public fun clampAxes2d(
      a: Vector2d,
      minAxisVal: Any,
      maxAxisVal: Any,
    ): Vector2d

    @JsName("Conv_Vector2DToIntPoint")
    public fun convertVector2dToIntPoint(inVector2d: Vector2d): IntPoint

    @JsName("Conv_Vector2DToVector")
    public fun convertVector2dToVector(inVector2d: Vector2d, z: Number): Vector

    @JsName("CrossProduct2D")
    public fun crossProduct2d(a: Vector2d, b: Vector2d): Any

    @JsName("Distance2D")
    public fun distance2d(v1: Vector2d, v2: Vector2d): Any

    @JsName("DistanceSquared2D")
    public fun distanceSquared2d(v1: Vector2d, v2: Vector2d): Any

    @JsName("Divide_Vector2DFloat")
    public fun divideVector2dFloat(a: Vector2d, b: Any): Vector2d

    @JsName("Divide_Vector2DVector2D")
    public fun divideVector2dVector2d(a: Vector2d, b: Vector2d): Vector2d

    @JsName("DotProduct2D")
    public fun dotProduct2d(a: Vector2d, b: Vector2d): Any

    @JsName("EqualEqual_Vector2DVector2D")
    public fun equalEqualVector2dVector2d(
      a: Vector2d,
      b: Vector2d,
      errorTolerance: Number,
    ): Boolean

    @JsName("EqualExactly_Vector2DVector2D")
    public fun equalExactlyVector2dVector2d(a: Vector2d, b: Vector2d): Boolean

    @JsName("GetAbs2D")
    public fun getAbs2d(a: Vector2d): Vector2d

    @JsName("GetAbsMax2D")
    public fun getAbsMax2d(a: Vector2d): Any

    @JsName("GetMax2D")
    public fun getMax2d(a: Vector2d): Any

    @JsName("GetMin2D")
    public fun getMin2d(a: Vector2d): Any

    @JsName("GetRotated2D")
    public fun getRotated2d(a: Vector2d, angleDeg: Number): Vector2d

    @JsName("IsNearlyZero2D")
    public fun isNearlyZero2d(a: Vector2d, tolerance: Number): Boolean

    @JsName("IsZero2D")
    public fun isZero2d(a: Vector2d): Boolean

    @JsName("MakeBox2D")
    public fun makeBox2d(min: Vector2d, max: Vector2d): Box2d

    @JsName("Multiply_Vector2DFloat")
    public fun multiplyVector2dFloat(a: Vector2d, b: Any): Vector2d

    @JsName("Multiply_Vector2DVector2D")
    public fun multiplyVector2dVector2d(a: Vector2d, b: Vector2d): Vector2d

    @JsName("Negated2D")
    public fun negated2d(a: Vector2d): Vector2d

    @JsName("Normal2D")
    public fun normal2d(a: Vector2d): Vector2d

    @JsName("Normalize2D")
    public fun normalize2d(a: Vector2d, tolerance: Number): Vector2DProvider

    @JsName("NormalSafe2D")
    public fun normalSafe2d(a: Vector2d, tolerance: Number): Vector2d

    @JsName("NotEqual_Vector2DVector2D")
    public fun notEqualVector2dVector2d(
      a: Vector2d,
      b: Vector2d,
      errorTolerance: Number,
    ): Boolean

    @JsName("NotEqualExactly_Vector2DVector2D")
    public fun notEqualExactlyVector2dVector2d(a: Vector2d, b: Vector2d): Boolean

    @JsName("Set2D")
    public fun set2d(
      a: Vector2d,
      x: Any,
      y: Any,
    ): Vector2DProvider

    @JsName("Spherical2DToUnitCartesian")
    public fun spherical2dToUnitCartesian(a: Vector2d): Vector

    @JsName("Subtract_Vector2DFloat")
    public fun subtractVector2dFloat(a: Vector2d, b: Any): Vector2d

    @JsName("Subtract_Vector2DVector2D")
    public fun subtractVector2dVector2d(a: Vector2d, b: Vector2d): Vector2d

    @JsName("ToDirectionAndLength2D")
    public fun toDirectionAndLength2d(
      a: Vector2d,
      outDir: Vector2d,
      outLength: Any,
    ): Object544

    @JsName("ToRounded2D")
    public fun toRounded2d(a: Vector2d): Vector2d

    @JsName("ToSign2D")
    public fun toSign2d(a: Vector2d): Vector2d

    @JsName("Vector2DInterpTo")
    public fun vector2dInterpTo(
      current: Vector2d,
      target: Vector2d,
      deltaTime: Number,
      interpSpeed: Number,
    ): Vector2d

    @JsName("Vector2DInterpTo_Constant")
    public fun vector2dInterpToConstant(
      current: Vector2d,
      target: Vector2d,
      deltaTime: Number,
      interpSpeed: Number,
    ): Vector2d

    @JsName("VSize2D")
    public fun vSize2d(a: Vector2d): Any

    @JsName("VSize2DSquared")
    public fun vSize2dSquared(a: Vector2d): Any

    @JsName("SetSpectatorScreenModeTexturePlusEyeLayout")
    public fun setSpectatorScreenModeTexturePlusEyeLayout(
      eyeRectMin: Vector2d,
      eyeRectMax: Vector2d,
      textureRectMin: Vector2d,
      textureRectMax: Vector2d,
      drawEyeFirst: Boolean,
      clearBlack: Boolean,
      useAlpha: Boolean,
    ): Unit

    @JsName("LineTraceTrackedObjects")
    public fun lineTraceTrackedObjects(
      screenCoord: Vector2d,
      testFeaturePoints: Boolean,
      testGroundPlane: Boolean,
      testPlaneExtents: Boolean,
      testPlaneBoundaryPolygon: Boolean,
    ): Array<ArTraceResult>

    @JsName("GenerateDynamicImageResource")
    public fun generateDynamicImageResource(inDynamicBrushName: String): Vector2d

    @JsName("MakeVector2D")
    public fun makeVector2d(x: Any, y: Any): Vector2d

    @JsName("Vector2D_One")
    public fun vector2dOne(): Vector2d

    @JsName("Vector2D_Unit45Deg")
    public fun vector2dUnit45Deg(): Vector2d

    @JsName("Vector2D_Zero")
    public fun vector2dZero(): Vector2d

    @JsName("NextSobolCell2D")
    public fun nextSobolCell2d(
      index: Number,
      numCells: Number,
      previousValue: Vector2d,
    ): Vector2d

    @JsName("RandomSobolCell2D")
    public fun randomSobolCell2d(
      index: Number,
      numCells: Number,
      cell: Vector2d,
      seed: Vector2d,
    ): Vector2d

    @JsName("GetMousePositionOnPlatform")
    public fun getMousePositionOnPlatform(): Vector2d

    @JsName("GetPlayAreaBounds")
    public fun getPlayAreaBounds(origin: String): Vector2d
  }
}

@JsName("T$545")
public external interface Object545 {
  @JsName("SpringState")
  public var springState: VectorSpringState
}

public open external class VectorSpringState {
  public open fun clone(): VectorSpringState

  @JsName("ResetVectorSpringState")
  public open fun resetVectorSpringState(): Object545

  @JsName("SetVectorSpringStateVelocity")
  public open fun setVectorSpringStateVelocity(velocity: Vector): Object545

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VectorSpringState

    @JsName("C")
    public fun copy(other: Any): VectorSpringState

    @JsName("ResetVectorSpringState")
    public fun resetVectorSpringState(springState: VectorSpringState): Object545

    @JsName("SetVectorSpringStateVelocity")
    public fun setVectorSpringStateVelocity(springState: VectorSpringState, velocity: Vector):
        Object545
  }
}

@JsName("T$547")
public external interface Object547 {
  @JsName("Segment1Point")
  public var segment1Point: Vector

  @JsName("Segment2Point")
  public var segment2Point: Vector
}

@JsName("T$548")
public external interface Object548 {
  @JsName("Azimuth")
  public var azimuth: Number

  @JsName("Elevation")
  public var elevation: Number
}

@JsName("T$549")
public external interface Object549 {
  @JsName("OutSlopePitchDegreeAngle")
  public var outSlopePitchDegreeAngle: Number

  @JsName("OutSlopeRollDegreeAngle")
  public var outSlopeRollDegreeAngle: Number
}

@JsName("T$550")
public external interface Object550 {
  @JsName("Yaw")
  public var yaw: Number

  @JsName("Pitch")
  public var pitch: Number
}

@JsName("T$551")
public external interface Object551 {
  @JsName("T")
  public var t: Number

  @JsName("Intersection")
  public var intersection: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$552")
public external interface VectorProvider {
  @JsName("A")
  public var vector: Vector
}

@JsName("T$553")
public external interface Object553 {
  @JsName("SpringState")
  public var springState: VectorSpringState

  @JsName("$")
  public var value: Vector
}

@JsName("T$554")
public external interface Object554 {
  @JsName("Distance")
  public var distance: Number

  @JsName("$")
  public var value: Actor
}

@JsName("T$555")
public external interface Object555 {
  @JsName("OutJointPos")
  public var outJointPos: Vector

  @JsName("OutEndPos")
  public var outEndPos: Vector
}

@JsName("T$556")
public external interface Object556 {
  @JsName("CameraOrigin")
  public var cameraOrigin: Vector

  @JsName("CameraRotation")
  public var cameraRotation: Rotator

  public var HFOV: Number

  public var VFOV: Number

  @JsName("CameraDistance")
  public var cameraDistance: Number

  @JsName("NearPlane")
  public var nearPlane: Number

  @JsName("FarPlane")
  public var farPlane: Number
}

@JsName("T$557")
public external interface Object557 {
  @JsName("Origin")
  public var origin: Vector

  @JsName("Rotation")
  public var rotation: Rotator

  @JsName("LeftFOV")
  public var leftFov: Number

  @JsName("RightFOV")
  public var rightFov: Number

  @JsName("TopFOV")
  public var topFov: Number

  @JsName("BottomFOV")
  public var bottomFov: Number

  @JsName("Distance")
  public var distance: Number

  @JsName("NearPlane")
  public var nearPlane: Number

  @JsName("FarPlane")
  public var farPlane: Number

  @JsName("IsActive")
  public var isActive: Boolean
}

@JsName("T$558")
public external interface Object558 {
  @JsName("OutClassification")
  public var outClassification: String

  @JsName("OutClassificationLocation")
  public var outClassificationLocation: Vector

  @JsName("$")
  public var value: Boolean
}

public open external class Vector {
  @JsName("X")
  public open var x: Any

  @JsName("Y")
  public open var y: Any

  @JsName("Z")
  public open var z: Any

  public open fun clone(): Vector

  @JsName("GenerateBoxMesh")
  public open fun generateBoxMesh(
    vertices: Array<Vector>,
    triangles: Array<Number>,
    normals: Array<Vector>,
    uVs: Array<Vector2d>,
    tangents: Array<ProcMeshTangent>,
  ): Object239

  @JsName("GetLevelViewportCameraInfo")
  public open fun getLevelViewportCameraInfo(cameraRotation: Rotator): Object436

  @JsName("SetLevelViewportCameraInfo")
  public open fun setLevelViewportCameraInfo(cameraRotation: Rotator): Unit

  @JsName("SegmentIntersection2D")
  public open fun segmentIntersection2d(
    segmentEndA: Vector,
    segmentStartB: Vector,
    segmentEndB: Vector,
    intersectionPoint: Vector,
  ): Object408

  @JsName("GetSelectionBounds")
  public open fun getSelectionBounds(boxExtent: Vector, sphereRadius: Number): Object153

  @JsName("Conv_VectorToText")
  public open fun convertVectorToText(): String

  @JsName("Conv_VectorToString")
  public open fun convertVectorToString(): String

  @JsName("Add_VectorFloat")
  public open fun addVectorFloat(b: Any): Vector

  @JsName("Add_VectorInt")
  public open fun addVectorInt(b: Number): Vector

  @JsName("Add_VectorVector")
  public open fun addVectorVector(b: Vector): Vector

  @JsName("BreakVector")
  public open fun breakVector(
    x: Any,
    y: Any,
    z: Any,
  ): Object50

  @JsName("ClampVectorSize")
  public open fun clampVectorSize(min: Any, max: Any): Vector

  @JsName("Conv_VectorToLinearColor")
  public open fun convertVectorToLinearColor(): LinearColor

  @JsName("Conv_VectorToQuaternion")
  public open fun convertVectorToQuaternion(): Quat

  @JsName("Conv_VectorToRotator")
  public open fun convertVectorToRotator(): Rotator

  @JsName("Conv_VectorToTransform")
  public open fun convertVectorToTransform(): Transform

  @JsName("Conv_VectorToVector2D")
  public open fun convertVectorToVector2d(): Vector2d

  @JsName("Cross_VectorVector")
  public open fun crossVectorVector(b: Vector): Vector

  @JsName("Divide_VectorFloat")
  public open fun divideVectorFloat(b: Any): Vector

  @JsName("Divide_VectorInt")
  public open fun divideVectorInt(b: Number): Vector

  @JsName("Divide_VectorVector")
  public open fun divideVectorVector(b: Vector): Vector

  @JsName("Dot_VectorVector")
  public open fun dotVectorVector(b: Vector): Any

  @JsName("DynamicWeightedMovingAverage_FVector")
  public open fun dynamicWeightedMovingAverageFVector(
    previousSample: Vector,
    maxDistance: Number,
    minWeight: Number,
    maxWeight: Number,
  ): Vector

  @JsName("EqualEqual_VectorVector")
  public open fun equalEqualVectorVector(b: Vector, errorTolerance: Number): Boolean

  @JsName("EqualExactly_VectorVector")
  public open fun equalExactlyVectorVector(b: Vector): Boolean

  @JsName("FindClosestPointOnLine")
  public open fun findClosestPointOnLine(lineOrigin: Vector, lineDirection: Vector): Vector

  @JsName("FindClosestPointOnSegment")
  public open fun findClosestPointOnSegment(segmentStart: Vector, segmentEnd: Vector): Vector

  @JsName("FindLookAtRotation")
  public open fun findLookAtRotation(target: Vector): Rotator

  @JsName("FindNearestPointsOnLineSegments")
  public open fun findNearestPointsOnLineSegments(
    segment1End: Vector,
    segment2Start: Vector,
    segment2End: Vector,
    segment1Point: Vector,
    segment2Point: Vector,
  ): Object547

  @JsName("FTruncVector")
  public open fun fTruncVector(): IntVector

  @JsName("GetAzimuthAndElevation")
  public open fun getAzimuthAndElevation(
    referenceFrame: Transform,
    azimuth: Number,
    elevation: Number,
  ): Object548

  @JsName("GetDirectionUnitVector")
  public open fun getDirectionUnitVector(to: Vector): Vector

  @JsName("GetMaxElement")
  public open fun getMaxElement(): Any

  @JsName("GetMinElement")
  public open fun getMinElement(): Any

  @JsName("GetPointDistanceToLine")
  public open fun getPointDistanceToLine(lineOrigin: Vector, lineDirection: Vector): Number

  @JsName("GetPointDistanceToSegment")
  public open fun getPointDistanceToSegment(segmentStart: Vector, segmentEnd: Vector): Number

  @JsName("GetReflectionVector")
  public open fun getReflectionVector(surfaceNormal: Vector): Vector

  @JsName("GetSlopeDegreeAngles")
  public open fun getSlopeDegreeAngles(
    floorNormal: Vector,
    upVector: Vector,
    outSlopePitchDegreeAngle: Number,
    outSlopeRollDegreeAngle: Number,
  ): Object549

  @JsName("GetYawPitchFromVector")
  public open fun getYawPitchFromVector(yaw: Number, pitch: Number): Object550

  @JsName("GreaterGreater_VectorRotator")
  public open fun greaterGreaterVectorRotator(b: Rotator): Vector

  @JsName("IsPointInBox")
  public open fun isPointInBox(boxOrigin: Vector, boxExtent: Vector): Boolean

  @JsName("IsPointInBoxWithTransform")
  public open fun isPointInBoxWithTransform(boxWorldTransform: Transform, boxExtent: Vector):
      Boolean

  @JsName("LessLess_VectorRotator")
  public open fun lessLessVectorRotator(b: Rotator): Vector

  @JsName("LinePlaneIntersection")
  public open fun linePlaneIntersection(
    lineEnd: Vector,
    aPlane: Plane,
    t: Number,
    intersection: Vector,
  ): Object551

  @JsName("LinePlaneIntersection_OriginNormal")
  public open fun linePlaneIntersectionOriginNormal(
    lineEnd: Vector,
    planeOrigin: Vector,
    planeNormal: Vector,
    t: Number,
    intersection: Vector,
  ): Object551

  @JsName("MakeBox")
  public open fun makeBox(max: Vector): Box

  @JsName("MakeBoxSphereBounds")
  public open fun makeBoxSphereBounds(boxExtent: Vector, sphereRadius: Number): BoxSphereBounds

  @JsName("MakePlaneFromPointAndNormal")
  public open fun makePlaneFromPointAndNormal(normal: Vector): Plane

  @JsName("MakeRotationFromAxes")
  public open fun makeRotationFromAxes(right: Vector, up: Vector): Rotator

  @JsName("MakeRotFromX")
  public open fun makeRotFromX(): Rotator

  @JsName("MakeRotFromXY")
  public open fun makeRotFromXy(y: Vector): Rotator

  @JsName("MakeRotFromXZ")
  public open fun makeRotFromXz(z: Vector): Rotator

  @JsName("MakeRotFromY")
  public open fun makeRotFromY(): Rotator

  @JsName("MakeRotFromYX")
  public open fun makeRotFromYx(x: Vector): Rotator

  @JsName("MakeRotFromYZ")
  public open fun makeRotFromYz(z: Vector): Rotator

  @JsName("MakeRotFromZ")
  public open fun makeRotFromZ(): Rotator

  @JsName("MakeRotFromZX")
  public open fun makeRotFromZx(x: Vector): Rotator

  @JsName("MakeRotFromZY")
  public open fun makeRotFromZy(y: Vector): Rotator

  @JsName("MakeTransform")
  public open fun makeTransform(rotation: Rotator, scale: Vector): Transform

  @JsName("MirrorVectorByNormal")
  public open fun mirrorVectorByNormal(inNormal: Vector): Vector

  @JsName("Multiply_VectorFloat")
  public open fun multiplyVectorFloat(b: Any): Vector

  @JsName("Multiply_VectorInt")
  public open fun multiplyVectorInt(b: Number): Vector

  @JsName("Multiply_VectorVector")
  public open fun multiplyVectorVector(b: Vector): Vector

  @JsName("NegateVector")
  public open fun negateVector(): Vector

  @JsName("Normal")
  public open fun normal(tolerance: Number): Vector

  @JsName("NotEqual_VectorVector")
  public open fun notEqualVectorVector(b: Vector, errorTolerance: Number): Boolean

  @JsName("NotEqualExactly_VectorVector")
  public open fun notEqualExactlyVectorVector(b: Vector): Boolean

  @JsName("ProjectPointOnToPlane")
  public open fun projectPointOnToPlane(planeBase: Vector, planeNormal: Vector): Vector

  @JsName("ProjectVectorOnToPlane")
  public open fun projectVectorOnToPlane(planeNormal: Vector): Vector

  @JsName("ProjectVectorOnToVector")
  public open fun projectVectorOnToVector(target: Vector): Vector

  @JsName("Quat_MakeFromEuler")
  public open fun quatMakeFromEuler(): Quat

  @JsName("RandomPointInBoundingBox")
  public open fun randomPointInBoundingBox(halfSize: Vector): Vector

  @JsName("RandomPointInBoundingBoxFromStream")
  public open fun randomPointInBoundingBoxFromStream(halfSize: Vector, stream: RandomStream): Vector

  @JsName("RandomUnitVectorInConeInDegrees")
  public open fun randomUnitVectorInConeInDegrees(coneHalfAngleInDegrees: Number): Vector

  @JsName("RandomUnitVectorInConeInDegreesFromStream")
  public open fun randomUnitVectorInConeInDegreesFromStream(coneHalfAngleInDegrees: Number,
      stream: RandomStream): Vector

  @JsName("RandomUnitVectorInConeInRadians")
  public open fun randomUnitVectorInConeInRadians(coneHalfAngleInRadians: Number): Vector

  @JsName("RandomUnitVectorInConeInRadiansFromStream")
  public open fun randomUnitVectorInConeInRadiansFromStream(coneHalfAngleInRadians: Number,
      stream: RandomStream): Vector

  @JsName("RandomUnitVectorInEllipticalConeInDegrees")
  public open fun randomUnitVectorInEllipticalConeInDegrees(maxYawInDegrees: Number,
      maxPitchInDegrees: Number): Vector

  @JsName("RandomUnitVectorInEllipticalConeInDegreesFromStream")
  public open fun randomUnitVectorInEllipticalConeInDegreesFromStream(
    maxYawInDegrees: Number,
    maxPitchInDegrees: Number,
    stream: RandomStream,
  ): Vector

  @JsName("RandomUnitVectorInEllipticalConeInRadians")
  public open fun randomUnitVectorInEllipticalConeInRadians(maxYawInRadians: Number,
      maxPitchInRadians: Number): Vector

  @JsName("RandomUnitVectorInEllipticalConeInRadiansFromStream")
  public open fun randomUnitVectorInEllipticalConeInRadiansFromStream(
    maxYawInRadians: Number,
    maxPitchInRadians: Number,
    stream: RandomStream,
  ): Vector

  @JsName("RotateAngleAxis")
  public open fun rotateAngleAxis(angleDeg: Number, axis: Vector): Vector

  @JsName("RotatorFromAxisAndAngle")
  public open fun rotatorFromAxisAndAngle(angle: Number): Rotator

  @JsName("SelectVector")
  public open fun selectVector(b: Vector, pickA: Boolean): Vector

  @JsName("Subtract_VectorFloat")
  public open fun subtractVectorFloat(b: Any): Vector

  @JsName("Subtract_VectorInt")
  public open fun subtractVectorInt(b: Number): Vector

  @JsName("Subtract_VectorVector")
  public open fun subtractVectorVector(b: Vector): Vector

  @JsName("VEase")
  public open fun vEase(
    b: Vector,
    alpha: Number,
    easingFunc: String,
    blendExp: Number,
    steps: Number,
  ): Vector

  @JsName("Vector_AddBounded")
  public open fun vectorAddBounded(inAddVect: Vector, inRadius: Number): VectorProvider

  @JsName("Vector_Assign")
  public open fun vectorAssign(inVector: Vector): VectorProvider

  @JsName("Vector_BoundedToBox")
  public open fun vectorBoundedToBox(inBoxMin: Vector, inBoxMax: Vector): Vector

  @JsName("Vector_BoundedToCube")
  public open fun vectorBoundedToCube(inRadius: Number): Vector

  @JsName("Vector_ClampSize2D")
  public open fun vectorClampSize2d(min: Any, max: Any): Vector

  @JsName("Vector_ClampSizeMax")
  public open fun vectorClampSizeMax(max: Any): Vector

  @JsName("Vector_ClampSizeMax2D")
  public open fun vectorClampSizeMax2d(max: Any): Vector

  @JsName("Vector_ComponentMax")
  public open fun vectorComponentMax(b: Vector): Vector

  @JsName("Vector_ComponentMin")
  public open fun vectorComponentMin(b: Vector): Vector

  @JsName("Vector_CosineAngle2D")
  public open fun vectorCosineAngle2d(b: Vector): Any

  @JsName("Vector_Distance")
  public open fun vectorDistance(v2: Vector): Any

  @JsName("Vector_Distance2D")
  public open fun vectorDistance2d(v2: Vector): Any

  @JsName("Vector_Distance2DSquared")
  public open fun vectorDistance2dSquared(v2: Vector): Any

  @JsName("Vector_DistanceSquared")
  public open fun vectorDistanceSquared(v2: Vector): Any

  @JsName("Vector_GetAbs")
  public open fun vectorGetAbs(): Vector

  @JsName("Vector_GetAbsMax")
  public open fun vectorGetAbsMax(): Any

  @JsName("Vector_GetAbsMin")
  public open fun vectorGetAbsMin(): Any

  @JsName("Vector_GetProjection")
  public open fun vectorGetProjection(): Vector

  @JsName("Vector_GetSignVector")
  public open fun vectorGetSignVector(): Vector

  @JsName("Vector_HeadingAngle")
  public open fun vectorHeadingAngle(): Any

  @JsName("Vector_IsNAN")
  public open fun vectorIsNan(): Boolean

  @JsName("Vector_IsNearlyZero")
  public open fun vectorIsNearlyZero(tolerance: Number): Boolean

  @JsName("Vector_IsNormal")
  public open fun vectorIsNormal(): Boolean

  @JsName("Vector_IsUniform")
  public open fun vectorIsUniform(tolerance: Number): Boolean

  @JsName("Vector_IsUnit")
  public open fun vectorIsUnit(squaredLenthTolerance: Number): Boolean

  @JsName("Vector_IsZero")
  public open fun vectorIsZero(): Boolean

  @JsName("Vector_MirrorByPlane")
  public open fun vectorMirrorByPlane(inPlane: Plane): Vector

  @JsName("Vector_Normal2D")
  public open fun vectorNormal2d(tolerance: Number): Vector

  @JsName("Vector_Normalize")
  public open fun vectorNormalize(tolerance: Number): VectorProvider

  @JsName("Vector_NormalUnsafe")
  public open fun vectorNormalUnsafe(): Vector

  @JsName("Vector_ProjectOnToNormal")
  public open fun vectorProjectOnToNormal(inNormal: Vector): Vector

  @JsName("Vector_Reciprocal")
  public open fun vectorReciprocal(): Vector

  @JsName("Vector_Set")
  public open fun vectorSet(
    x: Any,
    y: Any,
    z: Any,
  ): VectorProvider

  @JsName("Vector_SnappedToGrid")
  public open fun vectorSnappedToGrid(inGridSize: Number): Vector

  @JsName("Vector_ToDegrees")
  public open fun vectorToDegrees(): Vector

  @JsName("Vector_ToRadians")
  public open fun vectorToRadians(): Vector

  @JsName("Vector_UnitCartesianToSpherical")
  public open fun vectorUnitCartesianToSpherical(): Vector2d

  @JsName("Vector_UnwindEuler")
  public open fun vectorUnwindEuler(): VectorProvider

  @JsName("VectorSpringInterp")
  public open fun vectorSpringInterp(
    target: Vector,
    springState: VectorSpringState,
    stiffness: Number,
    criticalDampingFactor: Number,
    deltaTime: Number,
    mass: Number,
    targetVelocityAmount: Number,
    clamp: Boolean,
    minValue: Vector,
    maxValue: Vector,
    initializeFromTarget: Boolean,
  ): Object553

  @JsName("VInterpTo")
  public open fun vInterpTo(
    target: Vector,
    deltaTime: Number,
    interpSpeed: Number,
  ): Vector

  @JsName("VInterpTo_Constant")
  public open fun vInterpToConstant(
    target: Vector,
    deltaTime: Number,
    interpSpeed: Number,
  ): Vector

  @JsName("VLerp")
  public open fun vLerp(b: Vector, alpha: Number): Vector

  @JsName("VSize")
  public open fun vSize(): Any

  @JsName("VSizeSquared")
  public open fun vSizeSquared(): Any

  @JsName("VSizeXY")
  public open fun vSizeXy(): Any

  @JsName("VSizeXYSquared")
  public open fun vSizeXySquared(): Any

  @JsName("WeightedMovingAverage_FVector")
  public open fun weightedMovingAverageFVector(previousSample: Vector, weight: Number): Vector

  @JsName("FindNearestActor")
  public open fun findNearestActor(actorsToCheck: Array<Actor>, distance: Number): Object554

  @JsName("CalculateDirection")
  public open fun calculateDirection(baseRotation: Rotator): Number

  @JsName("K2_TwoBoneIK")
  public open fun k2TwoBoneIk(
    jointPos: Vector,
    endPos: Vector,
    jointTarget: Vector,
    effector: Vector,
    outJointPos: Vector,
    outEndPos: Vector,
    allowStretching: Boolean,
    startStretchRatio: Number,
    maxStretchScale: Number,
  ): Object555

  @JsName("IsValidAIDirection")
  public open fun isValidAiDirection(): Boolean

  @JsName("IsValidAILocation")
  public open fun isValidAiLocation(): Boolean

  @JsName("GetPositionalTrackingCameraParameters")
  public open fun getPositionalTrackingCameraParameters(
    cameraRotation: Rotator,
    HFOV: Number,
    VFOV: Number,
    cameraDistance: Number,
    nearPlane: Number,
    farPlane: Number,
  ): Object556

  @JsName("GetTrackingSensorParameters")
  public open fun getTrackingSensorParameters(
    rotation: Rotator,
    leftFov: Number,
    rightFov: Number,
    topFov: Number,
    bottomFov: Number,
    distance: Number,
    nearPlane: Number,
    farPlane: Number,
    isActive: Boolean,
    index: Number,
  ): Object557

  @JsName("AddManualEnvironmentCaptureProbe")
  public open fun addManualEnvironmentCaptureProbe(extent: Vector): Boolean

  @JsName("GetObjectClassificationAtLocation")
  public open fun getObjectClassificationAtLocation(
    outClassification: String,
    outClassificationLocation: Vector,
    maxLocationDiff: Number,
  ): Object558

  @JsName("LineTraceTrackedObjects3D")
  public open fun lineTraceTrackedObjects3d(
    end: Vector,
    testFeaturePoints: Boolean,
    testGroundPlane: Boolean,
    testPlaneExtents: Boolean,
    testPlaneBoundaryPolygon: Boolean,
  ): Array<ArTraceResult>

  @JsName("SetARWorldOriginLocationAndRotation")
  public open fun setArWorldOriginLocationAndRotation(
    originRotation: Rotator,
    isTransformInWorldSpace: Boolean,
    maintainUpDirection: Boolean,
  ): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Vector

    @JsName("C")
    public fun copy(other: Any): Vector

    @JsName("GenerateBoxMesh")
    public fun generateBoxMesh(
      boxRadius: Vector,
      vertices: Array<Vector>,
      triangles: Array<Number>,
      normals: Array<Vector>,
      uVs: Array<Vector2d>,
      tangents: Array<ProcMeshTangent>,
    ): Object239

    @JsName("GetLevelViewportCameraInfo")
    public fun getLevelViewportCameraInfo(cameraLocation: Vector, cameraRotation: Rotator):
        Object436

    @JsName("SetLevelViewportCameraInfo")
    public fun setLevelViewportCameraInfo(cameraLocation: Vector, cameraRotation: Rotator): Unit

    @JsName("SegmentIntersection2D")
    public fun segmentIntersection2d(
      segmentStartA: Vector,
      segmentEndA: Vector,
      segmentStartB: Vector,
      segmentEndB: Vector,
      intersectionPoint: Vector,
    ): Object408

    @JsName("GetSelectionBounds")
    public fun getSelectionBounds(
      origin: Vector,
      boxExtent: Vector,
      sphereRadius: Number,
    ): Object153

    @JsName("Conv_VectorToText")
    public fun convertVectorToText(inVec: Vector): String

    @JsName("Conv_VectorToString")
    public fun convertVectorToString(inVec: Vector): String

    @JsName("Add_VectorFloat")
    public fun addVectorFloat(a: Vector, b: Any): Vector

    @JsName("Add_VectorInt")
    public fun addVectorInt(a: Vector, b: Number): Vector

    @JsName("Add_VectorVector")
    public fun addVectorVector(a: Vector, b: Vector): Vector

    @JsName("BreakVector")
    public fun breakVector(
      inVec: Vector,
      x: Any,
      y: Any,
      z: Any,
    ): Object50

    @JsName("ClampVectorSize")
    public fun clampVectorSize(
      a: Vector,
      min: Any,
      max: Any,
    ): Vector

    @JsName("Conv_VectorToLinearColor")
    public fun convertVectorToLinearColor(inVec: Vector): LinearColor

    @JsName("Conv_VectorToQuaternion")
    public fun convertVectorToQuaternion(inVec: Vector): Quat

    @JsName("Conv_VectorToRotator")
    public fun convertVectorToRotator(inVec: Vector): Rotator

    @JsName("Conv_VectorToTransform")
    public fun convertVectorToTransform(inLocation: Vector): Transform

    @JsName("Conv_VectorToVector2D")
    public fun convertVectorToVector2d(inVector: Vector): Vector2d

    @JsName("Cross_VectorVector")
    public fun crossVectorVector(a: Vector, b: Vector): Vector

    @JsName("Divide_VectorFloat")
    public fun divideVectorFloat(a: Vector, b: Any): Vector

    @JsName("Divide_VectorInt")
    public fun divideVectorInt(a: Vector, b: Number): Vector

    @JsName("Divide_VectorVector")
    public fun divideVectorVector(a: Vector, b: Vector): Vector

    @JsName("Dot_VectorVector")
    public fun dotVectorVector(a: Vector, b: Vector): Any

    @JsName("DynamicWeightedMovingAverage_FVector")
    public fun dynamicWeightedMovingAverageFVector(
      currentSample: Vector,
      previousSample: Vector,
      maxDistance: Number,
      minWeight: Number,
      maxWeight: Number,
    ): Vector

    @JsName("EqualEqual_VectorVector")
    public fun equalEqualVectorVector(
      a: Vector,
      b: Vector,
      errorTolerance: Number,
    ): Boolean

    @JsName("EqualExactly_VectorVector")
    public fun equalExactlyVectorVector(a: Vector, b: Vector): Boolean

    @JsName("FindClosestPointOnLine")
    public fun findClosestPointOnLine(
      point: Vector,
      lineOrigin: Vector,
      lineDirection: Vector,
    ): Vector

    @JsName("FindClosestPointOnSegment")
    public fun findClosestPointOnSegment(
      point: Vector,
      segmentStart: Vector,
      segmentEnd: Vector,
    ): Vector

    @JsName("FindLookAtRotation")
    public fun findLookAtRotation(start: Vector, target: Vector): Rotator

    @JsName("FindNearestPointsOnLineSegments")
    public fun findNearestPointsOnLineSegments(
      segment1Start: Vector,
      segment1End: Vector,
      segment2Start: Vector,
      segment2End: Vector,
      segment1Point: Vector,
      segment2Point: Vector,
    ): Object547

    @JsName("FTruncVector")
    public fun fTruncVector(inVector: Vector): IntVector

    @JsName("GetAzimuthAndElevation")
    public fun getAzimuthAndElevation(
      inDirection: Vector,
      referenceFrame: Transform,
      azimuth: Number,
      elevation: Number,
    ): Object548

    @JsName("GetDirectionUnitVector")
    public fun getDirectionUnitVector(from: Vector, to: Vector): Vector

    @JsName("GetMaxElement")
    public fun getMaxElement(a: Vector): Any

    @JsName("GetMinElement")
    public fun getMinElement(a: Vector): Any

    @JsName("GetPointDistanceToLine")
    public fun getPointDistanceToLine(
      point: Vector,
      lineOrigin: Vector,
      lineDirection: Vector,
    ): Number

    @JsName("GetPointDistanceToSegment")
    public fun getPointDistanceToSegment(
      point: Vector,
      segmentStart: Vector,
      segmentEnd: Vector,
    ): Number

    @JsName("GetReflectionVector")
    public fun getReflectionVector(direction: Vector, surfaceNormal: Vector): Vector

    @JsName("GetSlopeDegreeAngles")
    public fun getSlopeDegreeAngles(
      myRightYAxis: Vector,
      floorNormal: Vector,
      upVector: Vector,
      outSlopePitchDegreeAngle: Number,
      outSlopeRollDegreeAngle: Number,
    ): Object549

    @JsName("GetYawPitchFromVector")
    public fun getYawPitchFromVector(
      inVec: Vector,
      yaw: Number,
      pitch: Number,
    ): Object550

    @JsName("GreaterGreater_VectorRotator")
    public fun greaterGreaterVectorRotator(a: Vector, b: Rotator): Vector

    @JsName("IsPointInBox")
    public fun isPointInBox(
      point: Vector,
      boxOrigin: Vector,
      boxExtent: Vector,
    ): Boolean

    @JsName("IsPointInBoxWithTransform")
    public fun isPointInBoxWithTransform(
      point: Vector,
      boxWorldTransform: Transform,
      boxExtent: Vector,
    ): Boolean

    @JsName("LessLess_VectorRotator")
    public fun lessLessVectorRotator(a: Vector, b: Rotator): Vector

    @JsName("LinePlaneIntersection")
    public fun linePlaneIntersection(
      lineStart: Vector,
      lineEnd: Vector,
      aPlane: Plane,
      t: Number,
      intersection: Vector,
    ): Object551

    @JsName("LinePlaneIntersection_OriginNormal")
    public fun linePlaneIntersectionOriginNormal(
      lineStart: Vector,
      lineEnd: Vector,
      planeOrigin: Vector,
      planeNormal: Vector,
      t: Number,
      intersection: Vector,
    ): Object551

    @JsName("MakeBox")
    public fun makeBox(min: Vector, max: Vector): Box

    @JsName("MakeBoxSphereBounds")
    public fun makeBoxSphereBounds(
      origin: Vector,
      boxExtent: Vector,
      sphereRadius: Number,
    ): BoxSphereBounds

    @JsName("MakePlaneFromPointAndNormal")
    public fun makePlaneFromPointAndNormal(point: Vector, normal: Vector): Plane

    @JsName("MakeRotationFromAxes")
    public fun makeRotationFromAxes(
      forward: Vector,
      right: Vector,
      up: Vector,
    ): Rotator

    @JsName("MakeRotFromX")
    public fun makeRotFromX(x: Vector): Rotator

    @JsName("MakeRotFromXY")
    public fun makeRotFromXy(x: Vector, y: Vector): Rotator

    @JsName("MakeRotFromXZ")
    public fun makeRotFromXz(x: Vector, z: Vector): Rotator

    @JsName("MakeRotFromY")
    public fun makeRotFromY(y: Vector): Rotator

    @JsName("MakeRotFromYX")
    public fun makeRotFromYx(y: Vector, x: Vector): Rotator

    @JsName("MakeRotFromYZ")
    public fun makeRotFromYz(y: Vector, z: Vector): Rotator

    @JsName("MakeRotFromZ")
    public fun makeRotFromZ(z: Vector): Rotator

    @JsName("MakeRotFromZX")
    public fun makeRotFromZx(z: Vector, x: Vector): Rotator

    @JsName("MakeRotFromZY")
    public fun makeRotFromZy(z: Vector, y: Vector): Rotator

    @JsName("MakeTransform")
    public fun makeTransform(
      location: Vector,
      rotation: Rotator,
      scale: Vector,
    ): Transform

    @JsName("MirrorVectorByNormal")
    public fun mirrorVectorByNormal(inVect: Vector, inNormal: Vector): Vector

    @JsName("Multiply_VectorFloat")
    public fun multiplyVectorFloat(a: Vector, b: Any): Vector

    @JsName("Multiply_VectorInt")
    public fun multiplyVectorInt(a: Vector, b: Number): Vector

    @JsName("Multiply_VectorVector")
    public fun multiplyVectorVector(a: Vector, b: Vector): Vector

    @JsName("NegateVector")
    public fun negateVector(a: Vector): Vector

    @JsName("Normal")
    public fun normal(a: Vector, tolerance: Number): Vector

    @JsName("NotEqual_VectorVector")
    public fun notEqualVectorVector(
      a: Vector,
      b: Vector,
      errorTolerance: Number,
    ): Boolean

    @JsName("NotEqualExactly_VectorVector")
    public fun notEqualExactlyVectorVector(a: Vector, b: Vector): Boolean

    @JsName("ProjectPointOnToPlane")
    public fun projectPointOnToPlane(
      point: Vector,
      planeBase: Vector,
      planeNormal: Vector,
    ): Vector

    @JsName("ProjectVectorOnToPlane")
    public fun projectVectorOnToPlane(v: Vector, planeNormal: Vector): Vector

    @JsName("ProjectVectorOnToVector")
    public fun projectVectorOnToVector(v: Vector, target: Vector): Vector

    @JsName("Quat_MakeFromEuler")
    public fun quatMakeFromEuler(euler: Vector): Quat

    @JsName("RandomPointInBoundingBox")
    public fun randomPointInBoundingBox(center: Vector, halfSize: Vector): Vector

    @JsName("RandomPointInBoundingBoxFromStream")
    public fun randomPointInBoundingBoxFromStream(
      center: Vector,
      halfSize: Vector,
      stream: RandomStream,
    ): Vector

    @JsName("RandomUnitVectorInConeInDegrees")
    public fun randomUnitVectorInConeInDegrees(coneDir: Vector, coneHalfAngleInDegrees: Number):
        Vector

    @JsName("RandomUnitVectorInConeInDegreesFromStream")
    public fun randomUnitVectorInConeInDegreesFromStream(
      coneDir: Vector,
      coneHalfAngleInDegrees: Number,
      stream: RandomStream,
    ): Vector

    @JsName("RandomUnitVectorInConeInRadians")
    public fun randomUnitVectorInConeInRadians(coneDir: Vector, coneHalfAngleInRadians: Number):
        Vector

    @JsName("RandomUnitVectorInConeInRadiansFromStream")
    public fun randomUnitVectorInConeInRadiansFromStream(
      coneDir: Vector,
      coneHalfAngleInRadians: Number,
      stream: RandomStream,
    ): Vector

    @JsName("RandomUnitVectorInEllipticalConeInDegrees")
    public fun randomUnitVectorInEllipticalConeInDegrees(
      coneDir: Vector,
      maxYawInDegrees: Number,
      maxPitchInDegrees: Number,
    ): Vector

    @JsName("RandomUnitVectorInEllipticalConeInDegreesFromStream")
    public fun randomUnitVectorInEllipticalConeInDegreesFromStream(
      coneDir: Vector,
      maxYawInDegrees: Number,
      maxPitchInDegrees: Number,
      stream: RandomStream,
    ): Vector

    @JsName("RandomUnitVectorInEllipticalConeInRadians")
    public fun randomUnitVectorInEllipticalConeInRadians(
      coneDir: Vector,
      maxYawInRadians: Number,
      maxPitchInRadians: Number,
    ): Vector

    @JsName("RandomUnitVectorInEllipticalConeInRadiansFromStream")
    public fun randomUnitVectorInEllipticalConeInRadiansFromStream(
      coneDir: Vector,
      maxYawInRadians: Number,
      maxPitchInRadians: Number,
      stream: RandomStream,
    ): Vector

    @JsName("RotateAngleAxis")
    public fun rotateAngleAxis(
      inVect: Vector,
      angleDeg: Number,
      axis: Vector,
    ): Vector

    @JsName("RotatorFromAxisAndAngle")
    public fun rotatorFromAxisAndAngle(axis: Vector, angle: Number): Rotator

    @JsName("SelectVector")
    public fun selectVector(
      a: Vector,
      b: Vector,
      pickA: Boolean,
    ): Vector

    @JsName("Subtract_VectorFloat")
    public fun subtractVectorFloat(a: Vector, b: Any): Vector

    @JsName("Subtract_VectorInt")
    public fun subtractVectorInt(a: Vector, b: Number): Vector

    @JsName("Subtract_VectorVector")
    public fun subtractVectorVector(a: Vector, b: Vector): Vector

    @JsName("VEase")
    public fun vEase(
      a: Vector,
      b: Vector,
      alpha: Number,
      easingFunc: String,
      blendExp: Number,
      steps: Number,
    ): Vector

    @JsName("Vector_AddBounded")
    public fun vectorAddBounded(
      a: Vector,
      inAddVect: Vector,
      inRadius: Number,
    ): VectorProvider

    @JsName("Vector_Assign")
    public fun vectorAssign(a: Vector, inVector: Vector): VectorProvider

    @JsName("Vector_BoundedToBox")
    public fun vectorBoundedToBox(
      inVect: Vector,
      inBoxMin: Vector,
      inBoxMax: Vector,
    ): Vector

    @JsName("Vector_BoundedToCube")
    public fun vectorBoundedToCube(inVect: Vector, inRadius: Number): Vector

    @JsName("Vector_ClampSize2D")
    public fun vectorClampSize2d(
      a: Vector,
      min: Any,
      max: Any,
    ): Vector

    @JsName("Vector_ClampSizeMax")
    public fun vectorClampSizeMax(a: Vector, max: Any): Vector

    @JsName("Vector_ClampSizeMax2D")
    public fun vectorClampSizeMax2d(a: Vector, max: Any): Vector

    @JsName("Vector_ComponentMax")
    public fun vectorComponentMax(a: Vector, b: Vector): Vector

    @JsName("Vector_ComponentMin")
    public fun vectorComponentMin(a: Vector, b: Vector): Vector

    @JsName("Vector_CosineAngle2D")
    public fun vectorCosineAngle2d(a: Vector, b: Vector): Any

    @JsName("Vector_Distance")
    public fun vectorDistance(v1: Vector, v2: Vector): Any

    @JsName("Vector_Distance2D")
    public fun vectorDistance2d(v1: Vector, v2: Vector): Any

    @JsName("Vector_Distance2DSquared")
    public fun vectorDistance2dSquared(v1: Vector, v2: Vector): Any

    @JsName("Vector_DistanceSquared")
    public fun vectorDistanceSquared(v1: Vector, v2: Vector): Any

    @JsName("Vector_GetAbs")
    public fun vectorGetAbs(a: Vector): Vector

    @JsName("Vector_GetAbsMax")
    public fun vectorGetAbsMax(a: Vector): Any

    @JsName("Vector_GetAbsMin")
    public fun vectorGetAbsMin(a: Vector): Any

    @JsName("Vector_GetProjection")
    public fun vectorGetProjection(a: Vector): Vector

    @JsName("Vector_GetSignVector")
    public fun vectorGetSignVector(a: Vector): Vector

    @JsName("Vector_HeadingAngle")
    public fun vectorHeadingAngle(a: Vector): Any

    @JsName("Vector_IsNAN")
    public fun vectorIsNan(a: Vector): Boolean

    @JsName("Vector_IsNearlyZero")
    public fun vectorIsNearlyZero(a: Vector, tolerance: Number): Boolean

    @JsName("Vector_IsNormal")
    public fun vectorIsNormal(a: Vector): Boolean

    @JsName("Vector_IsUniform")
    public fun vectorIsUniform(a: Vector, tolerance: Number): Boolean

    @JsName("Vector_IsUnit")
    public fun vectorIsUnit(a: Vector, squaredLenthTolerance: Number): Boolean

    @JsName("Vector_IsZero")
    public fun vectorIsZero(a: Vector): Boolean

    @JsName("Vector_MirrorByPlane")
    public fun vectorMirrorByPlane(a: Vector, inPlane: Plane): Vector

    @JsName("Vector_Normal2D")
    public fun vectorNormal2d(a: Vector, tolerance: Number): Vector

    @JsName("Vector_Normalize")
    public fun vectorNormalize(a: Vector, tolerance: Number): VectorProvider

    @JsName("Vector_NormalUnsafe")
    public fun vectorNormalUnsafe(a: Vector): Vector

    @JsName("Vector_ProjectOnToNormal")
    public fun vectorProjectOnToNormal(v: Vector, inNormal: Vector): Vector

    @JsName("Vector_Reciprocal")
    public fun vectorReciprocal(a: Vector): Vector

    @JsName("Vector_Set")
    public fun vectorSet(
      a: Vector,
      x: Any,
      y: Any,
      z: Any,
    ): VectorProvider

    @JsName("Vector_SnappedToGrid")
    public fun vectorSnappedToGrid(inVect: Vector, inGridSize: Number): Vector

    @JsName("Vector_ToDegrees")
    public fun vectorToDegrees(a: Vector): Vector

    @JsName("Vector_ToRadians")
    public fun vectorToRadians(a: Vector): Vector

    @JsName("Vector_UnitCartesianToSpherical")
    public fun vectorUnitCartesianToSpherical(a: Vector): Vector2d

    @JsName("Vector_UnwindEuler")
    public fun vectorUnwindEuler(a: Vector): VectorProvider

    @JsName("VectorSpringInterp")
    public fun vectorSpringInterp(
      current: Vector,
      target: Vector,
      springState: VectorSpringState,
      stiffness: Number,
      criticalDampingFactor: Number,
      deltaTime: Number,
      mass: Number,
      targetVelocityAmount: Number,
      clamp: Boolean,
      minValue: Vector,
      maxValue: Vector,
      initializeFromTarget: Boolean,
    ): Object553

    @JsName("VInterpTo")
    public fun vInterpTo(
      current: Vector,
      target: Vector,
      deltaTime: Number,
      interpSpeed: Number,
    ): Vector

    @JsName("VInterpTo_Constant")
    public fun vInterpToConstant(
      current: Vector,
      target: Vector,
      deltaTime: Number,
      interpSpeed: Number,
    ): Vector

    @JsName("VLerp")
    public fun vLerp(
      a: Vector,
      b: Vector,
      alpha: Number,
    ): Vector

    @JsName("VSize")
    public fun vSize(a: Vector): Any

    @JsName("VSizeSquared")
    public fun vSizeSquared(a: Vector): Any

    @JsName("VSizeXY")
    public fun vSizeXy(a: Vector): Any

    @JsName("VSizeXYSquared")
    public fun vSizeXySquared(a: Vector): Any

    @JsName("WeightedMovingAverage_FVector")
    public fun weightedMovingAverageFVector(
      currentSample: Vector,
      previousSample: Vector,
      weight: Number,
    ): Vector

    @JsName("FindNearestActor")
    public fun findNearestActor(
      origin: Vector,
      actorsToCheck: Array<Actor>,
      distance: Number,
    ): Object554

    @JsName("CalculateDirection")
    public fun calculateDirection(velocity: Vector, baseRotation: Rotator): Number

    @JsName("K2_TwoBoneIK")
    public fun k2TwoBoneIk(
      rootPos: Vector,
      jointPos: Vector,
      endPos: Vector,
      jointTarget: Vector,
      effector: Vector,
      outJointPos: Vector,
      outEndPos: Vector,
      allowStretching: Boolean,
      startStretchRatio: Number,
      maxStretchScale: Number,
    ): Object555

    @JsName("IsValidAIDirection")
    public fun isValidAiDirection(directionVector: Vector): Boolean

    @JsName("IsValidAILocation")
    public fun isValidAiLocation(location: Vector): Boolean

    @JsName("GetPositionalTrackingCameraParameters")
    public fun getPositionalTrackingCameraParameters(
      cameraOrigin: Vector,
      cameraRotation: Rotator,
      HFOV: Number,
      VFOV: Number,
      cameraDistance: Number,
      nearPlane: Number,
      farPlane: Number,
    ): Object556

    @JsName("GetTrackingSensorParameters")
    public fun getTrackingSensorParameters(
      origin: Vector,
      rotation: Rotator,
      leftFov: Number,
      rightFov: Number,
      topFov: Number,
      bottomFov: Number,
      distance: Number,
      nearPlane: Number,
      farPlane: Number,
      isActive: Boolean,
      index: Number,
    ): Object557

    @JsName("AddManualEnvironmentCaptureProbe")
    public fun addManualEnvironmentCaptureProbe(location: Vector, extent: Vector): Boolean

    @JsName("GetObjectClassificationAtLocation")
    public fun getObjectClassificationAtLocation(
      inWorldLocation: Vector,
      outClassification: String,
      outClassificationLocation: Vector,
      maxLocationDiff: Number,
    ): Object558

    @JsName("LineTraceTrackedObjects3D")
    public fun lineTraceTrackedObjects3d(
      start: Vector,
      end: Vector,
      testFeaturePoints: Boolean,
      testGroundPlane: Boolean,
      testPlaneExtents: Boolean,
      testPlaneBoundaryPolygon: Boolean,
    ): Array<ArTraceResult>

    @JsName("SetARWorldOriginLocationAndRotation")
    public fun setArWorldOriginLocationAndRotation(
      originLocation: Vector,
      originRotation: Rotator,
      isTransformInWorldSpace: Boolean,
      maintainUpDirection: Boolean,
    ): Unit

    @JsName("Conv_DoubleToVector")
    public fun convertDoubleToVector(inDouble: Any): Vector

    @JsName("Conv_FloatToVector")
    public fun convertFloatToVector(inFloat: Number): Vector

    @JsName("Conv_IntToVector")
    public fun convertIntToVector(inInt: Number): Vector

    @JsName("CreateVectorFromYawPitch")
    public fun createVectorFromYawPitch(
      yaw: Number,
      pitch: Number,
      length: Number,
    ): Vector

    @JsName("GetVectorArrayAverage")
    public fun getVectorArrayAverage(vectors: Array<Vector>): Vector

    @JsName("MakeVector")
    public fun makeVector(
      x: Any,
      y: Any,
      z: Any,
    ): Vector

    @JsName("RandomUnitVector")
    public fun randomUnitVector(): Vector

    @JsName("Vector_Backward")
    public fun vectorBackward(): Vector

    @JsName("Vector_Down")
    public fun vectorDown(): Vector

    @JsName("Vector_Forward")
    public fun vectorForward(): Vector

    @JsName("Vector_Left")
    public fun vectorLeft(): Vector

    @JsName("Vector_One")
    public fun vectorOne(): Vector

    @JsName("Vector_Right")
    public fun vectorRight(): Vector

    @JsName("Vector_Up")
    public fun vectorUp(): Vector

    @JsName("Vector_Zero")
    public fun vectorZero(): Vector

    @JsName("NextSobolCell3D")
    public fun nextSobolCell3d(
      index: Number,
      numCells: Number,
      previousValue: Vector,
    ): Vector

    @JsName("RandomSobolCell3D")
    public fun randomSobolCell3d(
      index: Number,
      numCells: Number,
      cell: Vector,
      seed: Vector,
    ): Vector

    @JsName("GetActorArrayAverageLocation")
    public fun getActorArrayAverageLocation(actors: Array<Actor>): Vector

    @JsName("K2_MakePerlinNoiseVectorAndRemap")
    public fun k2MakePerlinNoiseVectorAndRemap(
      x: Number,
      y: Number,
      z: Number,
      rangeOutMinX: Number,
      rangeOutMaxX: Number,
      rangeOutMinY: Number,
      rangeOutMaxY: Number,
      rangeOutMinZ: Number,
      rangeOutMaxZ: Number,
    ): Vector
  }
}

@JsName("EVectorQuantization")
public external object VectorQuantization {
  @JsName("RoundWholeNumber")
  public var WholeNumber: String

  @JsName("RoundOneDecimal")
  public var OneDecimal: String

  @JsName("RoundTwoDecimals")
  public var TwoDecimals: String

  @JsName("EVectorQuantization_MAX")
  public var Max: String
}

@JsName("ERotatorQuantization")
public external object RotatorQuantization {
  public var ByteComponents: String

  public var ShortComponents: String

  @JsName("ERotatorQuantization_MAX")
  public var Max: String
}

public open external class RepMovement {
  @JsName("LinearVelocity")
  public open var linearVelocity: Vector

  @JsName("AngularVelocity")
  public open var angularVelocity: Vector

  @JsName("Location")
  public open var location: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("bSimulatedPhysicSleep")
  public open var simulatedPhysicSleep: Boolean

  @JsName("bRepPhysics")
  public open var repPhysics: Boolean

  @JsName("LocationQuantizationLevel")
  public open var locationQuantizationLevel: String

  @JsName("VelocityQuantizationLevel")
  public open var velocityQuantizationLevel: String

  @JsName("RotationQuantizationLevel")
  public open var rotationQuantizationLevel: String

  public open fun clone(): RepMovement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RepMovement

    @JsName("C")
    public fun copy(other: Any): RepMovement
  }
}

@JsName("EActorGridPlacement")
public external object ActorGridPlacement {
  public var Bounds: String

  public var Location: String

  public var AlwaysLoaded: String

  public var None: String

  @JsName("EActorGridPlacement_MAX")
  public var Max: String
}

public open external class RepAttachment {
  @JsName("AttachParent")
  public open var attachParent: Actor

  @JsName("LocationOffset")
  public open var locationOffset: VectorNetQuantize100

  @JsName("RelativeScale3D")
  public open var relativeScale3d: VectorNetQuantize100

  @JsName("RotationOffset")
  public open var rotationOffset: Rotator

  @JsName("AttachSocket")
  public open var attachSocket: String

  @JsName("AttachComponent")
  public open var attachComponent: SceneComponent

  public open fun clone(): RepAttachment

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RepAttachment

    @JsName("C")
    public fun copy(other: Any): RepAttachment
  }
}

@JsName("ENetDormancy")
public external object NetDormancy {
  @JsName("DORM_Never")
  public var Never: String

  @JsName("DORM_Awake")
  public var Awake: String

  @JsName("DORM_DormantAll")
  public var DormantAll: String

  @JsName("DORM_DormantPartial")
  public var DormantPartial: String

  @JsName("DORM_Initial")
  public var Initial: String

  @JsName("DORM_MAX")
  public var Max: String
}

@JsName("EChildActorComponentTreeViewVisualizationMode")
public external object ChildActorComponentTreeViewVisualizationMode {
  public var UseDefault: String

  public var ComponentOnly: String

  public var ComponentWithChildActor: String

  public var ChildActorOnly: String

  @JsName("EChildActorComponentTreeViewVisualizationMode_MAX")
  public var Max: String
}

public open external class ChildActorComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("ChildActorClass")
  public open var childActorClass: UnrealEngineClass

  @JsName("ChildActor")
  public open var childActor: Actor

  @JsName("ChildActorTemplate")
  public open var childActorTemplate: Actor

  @JsName("EditorTreeViewVisualizationMode")
  public open var editorTreeViewVisualizationMode: String

  @JsName("SetChildActorClass")
  public open fun setChildActorClass(inClass: UnrealEngineClass): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ChildActorComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ChildActorComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ChildActorComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ChildActorComponent

    @JsName("C")
    public fun copy(other: UObject): ChildActorComponent

    @JsName("C")
    public fun copy(other: Any): ChildActorComponent
  }
}

public open external class ScriptTypedElementHandle {
  public open fun clone(): ScriptTypedElementHandle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScriptTypedElementHandle

    @JsName("C")
    public fun copy(other: Any): ScriptTypedElementHandle
  }
}

@JsName("T$560")
public external interface OverlappingComponentsProvider {
  @JsName("OverlappingComponents")
  public var overlappingComponents: Array<PrimitiveComponent>
}

@JsName("T$563")
public external interface ChildActorsProvider {
  @JsName("ChildActors")
  public var childActors: Array<Actor>
}

@JsName("T$564")
public external interface Object564 {
  @JsName("OutLocation")
  public var outLocation: Vector

  @JsName("OutRotation")
  public var outRotation: Rotator
}

@JsName("T$565")
public external interface Object565 {
  @JsName("Origin")
  public var origin: Vector

  @JsName("BoxExtent")
  public var boxExtent: Vector
}

@JsName("T$566")
public external interface Object566 {
  @JsName("XRDeviceId")
  public var xrDeviceId: XrDeviceId

  @JsName("$")
  public var value: PrimitiveComponent
}

public open external class Actor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : UObject {
  @JsName("PrimaryActorTick")
  public open var primaryActorTick: ActorTickFunction

  @JsName("bNetTemporary")
  public open var netTemporary: Boolean

  @JsName("bNetStartup")
  public open var netStartup: Boolean

  @JsName("bOnlyRelevantToOwner")
  public open var onlyRelevantToOwner: Boolean

  @JsName("bAlwaysRelevant")
  public open var alwaysRelevant: Boolean

  @JsName("bReplicateMovement")
  public open var replicateMovement: Boolean

  @JsName("bCallPreReplication")
  public open var callPreReplication: Boolean

  @JsName("bCallPreReplicationForReplay")
  public open var callPreReplicationForReplay: Boolean

  @JsName("bHidden")
  public open var hidden: Boolean

  @JsName("bTearOff")
  public open var tearOff: Boolean

  @JsName("bForceNetAddressable")
  public open var forceNetAddressable: Boolean

  @JsName("bIsInEditingLevelInstance")
  public open var isInEditingLevelInstance: Boolean

  @JsName("bExchangedRoles")
  public open var exchangedRoles: Boolean

  @JsName("bNetLoadOnClient")
  public open var netLoadOnClient: Boolean

  @JsName("bNetUseOwnerRelevancy")
  public open var netUseOwnerRelevancy: Boolean

  @JsName("bRelevantForNetworkReplays")
  public open var relevantForNetworkReplays: Boolean

  @JsName("bRelevantForLevelBounds")
  public open var relevantForLevelBounds: Boolean

  @JsName("bReplayRewindable")
  public open var replayRewindable: Boolean

  @JsName("bAllowTickBeforeBeginPlay")
  public open var allowTickBeforeBeginPlay: Boolean

  @JsName("bAutoDestroyWhenFinished")
  public open var autoDestroyWhenFinished: Boolean

  @JsName("bCanBeDamaged")
  public open var canBeDamaged: Boolean

  @JsName("bBlockInput")
  public open var blockInput: Boolean

  @JsName("bCollideWhenPlacing")
  public open var collideWhenPlacing: Boolean

  @JsName("bFindCameraComponentWhenViewTarget")
  public open var findCameraComponentWhenViewTarget: Boolean

  @JsName("bGenerateOverlapEventsDuringLevelStreaming")
  public open var generateOverlapEventsDuringLevelStreaming: Boolean

  @JsName("bIgnoresOriginShifting")
  public open var ignoresOriginShifting: Boolean

  @JsName("bEnableAutoLODGeneration")
  public open var enableAutoLodGeneration: Boolean

  @JsName("bIsEditorOnlyActor")
  public open var isEditorOnlyActor: Boolean

  @JsName("bActorSeamlessTraveled")
  public open var actorSeamlessTraveled: Boolean

  @JsName("bReplicates")
  public open var replicates: Boolean

  @JsName("bCanBeInCluster")
  public open var canBeInCluster: Boolean

  @JsName("bAllowReceiveTickEventOnDedicatedServer")
  public open var allowReceiveTickEventOnDedicatedServer: Boolean

  @JsName("bActorEnableCollision")
  public open var actorEnableCollision: Boolean

  @JsName("bActorIsBeingDestroyed")
  public open var actorIsBeingDestroyed: Boolean

  @JsName("UpdateOverlapsMethodDuringLevelStreaming")
  public open var updateOverlapsMethodDuringLevelStreaming: String

  @JsName("DefaultUpdateOverlapsMethodDuringLevelStreaming")
  public open var defaultUpdateOverlapsMethodDuringLevelStreaming: String

  @JsName("RemoteRole")
  public open var remoteRole: String

  @JsName("ReplicatedMovement")
  public open var replicatedMovement: RepMovement

  @JsName("InitialLifeSpan")
  public open var initialLifeSpan: Number

  @JsName("CustomTimeDilation")
  public open var customTimeDilation: Number

  @JsName("GridPlacement")
  public open var gridPlacement: String

  @JsName("RuntimeGrid")
  public open var runtimeGrid: String

  @JsName("AttachmentReplication")
  public open var attachmentReplication: RepAttachment

  @JsName("Owner")
  public open var owner: Actor

  @JsName("NetDriverName")
  public open var netDriverName: String

  @JsName("Role")
  public open var role: String

  @JsName("NetDormancy")
  public open var netDormancy: String

  @JsName("SpawnCollisionHandlingMethod")
  public open var spawnCollisionHandlingMethod: String

  @JsName("AutoReceiveInput")
  public open var autoReceiveInput: String

  @JsName("InputPriority")
  public open var inputPriority: Number

  @JsName("InputComponent")
  public open var inputComponent: InputComponent

  @JsName("NetCullDistanceSquared")
  public open var netCullDistanceSquared: Number

  @JsName("NetTag")
  public open var netTag: Number

  @JsName("NetUpdateFrequency")
  public open var netUpdateFrequency: Number

  @JsName("MinNetUpdateFrequency")
  public open var minNetUpdateFrequency: Number

  @JsName("NetPriority")
  public open var netPriority: Number

  @JsName("Instigator")
  public open var instigator: Pawn

  @JsName("Children")
  public open var children: Array<Actor>

  @JsName("RootComponent")
  public open var rootComponent: SceneComponent

  @JsName("PivotOffset")
  public open var pivotOffset: Vector

  @JsName("HLODLayer")
  public open var hlodLayer: HlodLayer

  @JsName("RayTracingGroupId")
  public open var rayTracingGroupId: Number

  @JsName("Layers")
  public open var layers: Array<String>

  @JsName("ParentComponentActor")
  public open var parentComponentActor: Any

  @JsName("ParentComponent")
  public open var parentComponent: Any

  @JsName("ActorGuid")
  public open var actorGuid: Guid

  @JsName("DataLayers")
  public open var dataLayers: Array<ActorDataLayer>

  @JsName("GroupActor")
  public open var groupActor: Actor

  @JsName("SpriteScale")
  public open var spriteScale: Number

  @JsName("HiddenEditorViews")
  public open var hiddenEditorViews: Any

  @JsName("ActorLabel")
  public open var actorLabel: String

  @JsName("FolderPath")
  public open var folderPath: String

  @JsName("FolderGuid")
  public open var folderGuid: Guid

  @JsName("bHiddenEd")
  public open var hiddenEd: Boolean

  @JsName("bIsEditorPreviewActor")
  public open var isEditorPreviewActor: Boolean

  @JsName("bHiddenEdLayer")
  public open var hiddenEdLayer: Boolean

  @JsName("bHiddenEdLevel")
  public open var hiddenEdLevel: Boolean

  @JsName("bLockLocation")
  public open var lockLocation: Boolean

  @JsName("bActorLabelEditable")
  public open var actorLabelEditable: Boolean

  @JsName("bEditable")
  public open var editable: Boolean

  @JsName("bListedInSceneOutliner")
  public open var listedInSceneOutliner: Boolean

  @JsName("bOptimizeBPComponentData")
  public open var optimizeBpComponentData: Boolean

  @JsName("bCanPlayFromHere")
  public open var canPlayFromHere: Boolean

  @JsName("bIsSpatiallyLoaded")
  public open var isSpatiallyLoaded: Boolean

  @JsName("bHiddenEdTemporary")
  public open var hiddenEdTemporary: Boolean

  @JsName("bForceExternalActorLevelReferenceForPIE")
  public open var forceExternalActorLevelReferenceForPie: Boolean

  @JsName("Tags")
  public open var tags: Array<String>

  @JsName("OnTakeAnyDamage")
  public open var onTakeAnyDamage: UnrealEngineMulticastDelegate<(
    DamagedActor: Actor,
    Damage: Number,
    DamageType: DamageType,
    InstigatedBy: Controller,
    DamageCauser: Actor,
  ) -> Unit>

  @JsName("OnTakePointDamage")
  public open var onTakePointDamage: UnrealEngineMulticastDelegate<(
    DamagedActor: Actor,
    Damage: Number,
    InstigatedBy: Controller,
    HitLocation: Vector,
    FHitComponent: PrimitiveComponent,
    BoneName: String,
    ShotFromDirection: Vector,
    DamageType: DamageType,
    DamageCauser: Actor,
  ) -> Unit>

  @JsName("OnTakeRadialDamage")
  public open var onTakeRadialDamage: UnrealEngineMulticastDelegate<(
    DamagedActor: Actor,
    Damage: Number,
    DamageType: DamageType,
    Origin: Vector,
    HitInfo: HitResult,
    InstigatedBy: Controller,
    DamageCauser: Actor,
  ) -> Unit>

  @JsName("OnActorBeginOverlap")
  public open var onActorBeginOverlap: UnrealEngineMulticastDelegate<(OverlappedActor: Actor,
      OtherActor: Actor) -> Unit>

  @JsName("OnActorEndOverlap")
  public open var onActorEndOverlap: UnrealEngineMulticastDelegate<(OverlappedActor: Actor,
      OtherActor: Actor) -> Unit>

  @JsName("OnBeginCursorOver")
  public open var onBeginCursorOver: UnrealEngineMulticastDelegate<(TouchedActor: Actor) -> Unit>

  @JsName("OnEndCursorOver")
  public open var onEndCursorOver: UnrealEngineMulticastDelegate<(TouchedActor: Actor) -> Unit>

  @JsName("OnClicked")
  public open var onClicked: UnrealEngineMulticastDelegate<(TouchedActor: Actor,
      ButtonPressed: Key) -> Unit>

  @JsName("OnReleased")
  public open var onReleased: UnrealEngineMulticastDelegate<(TouchedActor: Actor,
      ButtonReleased: Key) -> Unit>

  @JsName("OnInputTouchBegin")
  public open var onInputTouchBegin: UnrealEngineMulticastDelegate<(FingerIndex: String,
      TouchedActor: Actor) -> Unit>

  @JsName("OnInputTouchEnd")
  public open var onInputTouchEnd: UnrealEngineMulticastDelegate<(FingerIndex: String,
      TouchedActor: Actor) -> Unit>

  @JsName("OnInputTouchEnter")
  public open var onInputTouchEnter: UnrealEngineMulticastDelegate<(FingerIndex: String,
      TouchedActor: Actor) -> Unit>

  @JsName("OnInputTouchLeave")
  public open var onInputTouchLeave: UnrealEngineMulticastDelegate<(FingerIndex: String,
      TouchedActor: Actor) -> Unit>

  @JsName("OnActorHit")
  public open var onActorHit: UnrealEngineMulticastDelegate<(
    SelfActor: Actor,
    OtherActor: Actor,
    NormalImpulse: Vector,
    Hit: HitResult,
  ) -> Unit>

  @JsName("OnDestroyed")
  public open var onDestroyed: UnrealEngineMulticastDelegate<(DestroyedActor: Actor) -> Unit>

  @JsName("OnEndPlay")
  public open var onEndPlay: UnrealEngineMulticastDelegate<(Actor: Actor,
      EndPlayReason: String) -> Unit>

  @JsName("InstanceComponents")
  public open var instanceComponents: Array<ActorComponent>

  @JsName("BlueprintCreatedComponents")
  public open var blueprintCreatedComponents: Array<ActorComponent>

  @JsName("WasRecentlyRendered")
  public open fun wasRecentlyRendered(tolerance: Number): Boolean

  @JsName("UserConstructionScript")
  public open fun userConstructionScript(): Unit

  @JsName("TearOff")
  public open fun tearOff(): Unit

  @JsName("SetTickGroup")
  public open fun setTickGroup(newTickGroup: String): Unit

  @JsName("SetTickableWhenPaused")
  public open fun setTickableWhenPaused(tickableWhenPaused: Boolean): Unit

  @JsName("SetReplicates")
  public open fun setReplicates(inReplicates: Boolean): Unit

  @JsName("SetReplicateMovement")
  public open fun setReplicateMovement(inReplicateMovement: Boolean): Unit

  @JsName("SetRayTracingGroupId")
  public open fun setRayTracingGroupId(inRaytracingGroupId: Number): Unit

  @JsName("SetOwner")
  public open fun setOwner(newOwner: Actor): Unit

  @JsName("SetNetDormancy")
  public open fun setNetDormancy(newDormancy: String): Unit

  @JsName("SetLifeSpan")
  public open fun setLifeSpan(inLifespan: Number): Unit

  @JsName("SetIsTemporarilyHiddenInEditor")
  public open fun setIsTemporarilyHiddenInEditor(isHidden: Boolean): Unit

  @JsName("SetFolderPath")
  public open fun setFolderPath(newFolderPath: String): Unit

  @JsName("SetAutoDestroyWhenFinished")
  public open fun setAutoDestroyWhenFinished(`val`: Boolean): Unit

  @JsName("SetActorTickInterval")
  public open fun setActorTickInterval(tickInterval: Number): Unit

  @JsName("SetActorTickEnabled")
  public open fun setActorTickEnabled(enabled: Boolean): Unit

  @JsName("SetActorScale3D")
  public open fun setActorScale3d(newScale3d: Vector): Unit

  @JsName("SetActorRelativeScale3D")
  public open fun setActorRelativeScale3d(newRelativeScale: Vector): Unit

  @JsName("SetActorLabel")
  public open fun setActorLabel(newActorLabel: String, markDirty: Boolean): Unit

  @JsName("SetActorHiddenInGame")
  public open fun setActorHiddenInGame(newHidden: Boolean): Unit

  @JsName("SetActorEnableCollision")
  public open fun setActorEnableCollision(newActorEnableCollision: Boolean): Unit

  @JsName("RemoveTickPrerequisiteComponent")
  public open fun removeTickPrerequisiteComponent(prerequisiteComponent: ActorComponent): Unit

  @JsName("RemoveTickPrerequisiteActor")
  public open fun removeTickPrerequisiteActor(prerequisiteActor: Actor): Unit

  @JsName("ReceiveTick")
  public open fun receiveTick(deltaSeconds: Number): Unit

  @JsName("ReceiveRadialDamage")
  public open fun receiveRadialDamage(
    damageReceived: Number,
    damageType: DamageType,
    origin: Vector,
    hitInfo: HitResult,
    instigatedBy: Controller,
    damageCauser: Actor,
  ): Unit

  @JsName("ReceivePointDamage")
  public open fun receivePointDamage(
    damage: Number,
    damageType: DamageType,
    hitLocation: Vector,
    hitNormal: Vector,
    hitComponent: PrimitiveComponent,
    boneName: String,
    shotFromDirection: Vector,
    instigatedBy: Controller,
    damageCauser: Actor,
    hitInfo: HitResult,
  ): Unit

  @JsName("ReceiveHit")
  public open fun receiveHit(
    myComp: PrimitiveComponent,
    other: Actor,
    otherComp: PrimitiveComponent,
    selfMoved: Boolean,
    hitLocation: Vector,
    hitNormal: Vector,
    normalImpulse: Vector,
    hit: HitResult,
  ): Unit

  @JsName("ReceiveEndPlay")
  public open fun receiveEndPlay(endPlayReason: String): Unit

  @JsName("ReceiveDestroyed")
  public open fun receiveDestroyed(): Unit

  @JsName("ReceiveBeginPlay")
  public open fun receiveBeginPlay(): Unit

  @JsName("ReceiveAnyDamage")
  public open fun receiveAnyDamage(
    damage: Number,
    damageType: DamageType,
    instigatedBy: Controller,
    damageCauser: Actor,
  ): Unit

  @JsName("ReceiveActorOnReleased")
  public open fun receiveActorOnReleased(buttonReleased: Key): Unit

  @JsName("ReceiveActorOnInputTouchLeave")
  public open fun receiveActorOnInputTouchLeave(fingerIndex: String): Unit

  @JsName("ReceiveActorOnInputTouchEnter")
  public open fun receiveActorOnInputTouchEnter(fingerIndex: String): Unit

  @JsName("ReceiveActorOnInputTouchEnd")
  public open fun receiveActorOnInputTouchEnd(fingerIndex: String): Unit

  @JsName("ReceiveActorOnInputTouchBegin")
  public open fun receiveActorOnInputTouchBegin(fingerIndex: String): Unit

  @JsName("ReceiveActorOnClicked")
  public open fun receiveActorOnClicked(buttonPressed: Key): Unit

  @JsName("ReceiveActorEndOverlap")
  public open fun receiveActorEndOverlap(otherActor: Actor): Unit

  @JsName("ReceiveActorEndCursorOver")
  public open fun receiveActorEndCursorOver(): Unit

  @JsName("ReceiveActorBeginOverlap")
  public open fun receiveActorBeginOverlap(otherActor: Actor): Unit

  @JsName("ReceiveActorBeginCursorOver")
  public open fun receiveActorBeginCursorOver(): Unit

  @JsName("PrestreamTextures")
  public open fun prestreamTextures(
    seconds: Number,
    enableStreaming: Boolean,
    cinematicTextureGroups: Number,
  ): Unit

  @JsName("OnRep_ReplicateMovement")
  public open fun onRepReplicateMovement(): Unit

  @JsName("OnRep_ReplicatedMovement")
  public open fun onRepReplicatedMovement(): Unit

  @JsName("OnRep_Owner")
  public open fun onRepOwner(): Unit

  @JsName("OnRep_Instigator")
  public open fun onRepInstigator(): Unit

  @JsName("OnRep_AttachmentReplication")
  public open fun onRepAttachmentReplication(): Unit

  @JsName("MakeNoise")
  public open fun makeNoise(
    loudness: Number,
    noiseInstigator: Pawn,
    noiseLocation: Vector,
    maxRange: Number,
    tag: String,
  ): Unit

  @JsName("K2_TeleportTo")
  public open fun k2TeleportTo(destLocation: Vector, destRotation: Rotator): Boolean

  @JsName("K2_SetActorTransform")
  public open fun k2SetActorTransform(
    newTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): Object503

  @JsName("K2_SetActorRotation")
  public open fun k2SetActorRotation(newRotation: Rotator, teleportPhysics: Boolean): Boolean

  @JsName("K2_SetActorRelativeTransform")
  public open fun k2SetActorRelativeTransform(
    newRelativeTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetActorRelativeRotation")
  public open fun k2SetActorRelativeRotation(
    newRelativeRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetActorRelativeLocation")
  public open fun k2SetActorRelativeLocation(
    newRelativeLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_SetActorLocationAndRotation")
  public open fun k2SetActorLocationAndRotation(
    newLocation: Vector,
    newRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): Object503

  @JsName("K2_SetActorLocation")
  public open fun k2SetActorLocation(
    newLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): Object503

  @JsName("K2_OnReset")
  public open fun k2OnReset(): Unit

  @JsName("K2_OnEndViewTarget")
  public open fun k2OnEndViewTarget(PC: PlayerController): Unit

  @JsName("K2_OnBecomeViewTarget")
  public open fun k2OnBecomeViewTarget(PC: PlayerController): Unit

  @JsName("K2_GetRootComponent")
  public open fun k2GetRootComponent(): SceneComponent

  @JsName("K2_GetComponentsByClass")
  public open fun k2GetComponentsByClass(componentClass: UnrealEngineClass): Array<ActorComponent>

  @JsName("K2_GetActorRotation")
  public open fun k2GetActorRotation(): Rotator

  @JsName("K2_GetActorLocation")
  public open fun k2GetActorLocation(): Vector

  @JsName("K2_DetachFromActor")
  public open fun k2DetachFromActor(
    locationRule: String,
    rotationRule: String,
    scaleRule: String,
  ): Unit

  @JsName("K2_DestroyActor")
  public open fun k2DestroyActor(): Unit

  @JsName("K2_AttachToComponent")
  public open fun k2AttachToComponent(
    parent: SceneComponent,
    socketName: String,
    locationRule: String,
    rotationRule: String,
    scaleRule: String,
    weldSimulatedBodies: Boolean,
  ): Unit

  @JsName("K2_AttachToActor")
  public open fun k2AttachToActor(
    parentActor: Actor,
    socketName: String,
    locationRule: String,
    rotationRule: String,
    scaleRule: String,
    weldSimulatedBodies: Boolean,
  ): Unit

  @JsName("K2_AttachRootComponentToActor")
  public open fun k2AttachRootComponentToActor(
    inParentActor: Actor,
    inSocketName: String,
    attachLocationType: String,
    weldSimulatedBodies: Boolean,
  ): Unit

  @JsName("K2_AttachRootComponentTo")
  public open fun k2AttachRootComponentTo(
    inParent: SceneComponent,
    inSocketName: String,
    attachLocationType: String,
    weldSimulatedBodies: Boolean,
  ): Unit

  @JsName("K2_AddActorWorldTransformKeepScale")
  public open fun k2AddActorWorldTransformKeepScale(
    deltaTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddActorWorldTransform")
  public open fun k2AddActorWorldTransform(
    deltaTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddActorWorldRotation")
  public open fun k2AddActorWorldRotation(
    deltaRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddActorWorldOffset")
  public open fun k2AddActorWorldOffset(
    deltaLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddActorLocalTransform")
  public open fun k2AddActorLocalTransform(
    newTransform: Transform,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddActorLocalRotation")
  public open fun k2AddActorLocalRotation(
    deltaRotation: Rotator,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("K2_AddActorLocalOffset")
  public open fun k2AddActorLocalOffset(
    deltaLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): SweepHitResultProvider

  @JsName("IsTemporarilyHiddenInEditor")
  public open fun isTemporarilyHiddenInEditor(includeParent: Boolean): Boolean

  @JsName("IsSelectable")
  public open fun isSelectable(): Boolean

  @JsName("IsOverlappingActor")
  public open fun isOverlappingActor(other: Actor): Boolean

  @JsName("IsHiddenEdAtStartup")
  public open fun isHiddenEdAtStartup(): Boolean

  @JsName("IsHiddenEd")
  public open fun isHiddenEd(): Boolean

  @JsName("IsEditable")
  public open fun isEditable(): Boolean

  @JsName("IsChildActor")
  public open fun isChildActor(): Boolean

  @JsName("IsActorTickEnabled")
  public open fun isActorTickEnabled(): Boolean

  @JsName("IsActorBeingDestroyed")
  public open fun isActorBeingDestroyed(): Boolean

  @JsName("HasAuthority")
  public open fun hasAuthority(): Boolean

  @JsName("GetVerticalDistanceTo")
  public open fun getVerticalDistanceTo(otherActor: Actor): Number

  @JsName("GetVelocity")
  public open fun getVelocity(): Vector

  @JsName("GetTransform")
  public open fun getTransform(): Transform

  @JsName("GetTickableWhenPaused")
  public open fun getTickableWhenPaused(): Boolean

  @JsName("GetSquaredHorizontalDistanceTo")
  public open fun getSquaredHorizontalDistanceTo(otherActor: Actor): Number

  @JsName("GetSquaredDistanceTo")
  public open fun getSquaredDistanceTo(otherActor: Actor): Number

  @JsName("GetRemoteRole")
  public open fun getRemoteRole(): String

  @JsName("GetRayTracingGroupId")
  public open fun getRayTracingGroupId(): Number

  @JsName("GetParentComponent")
  public open fun getParentComponent(): ChildActorComponent

  @JsName("GetParentActor")
  public open fun getParentActor(): Actor

  @JsName("GetOwner")
  public open fun getOwner(): Actor

  @JsName("GetOverlappingComponents")
  public open fun getOverlappingComponents(overlappingComponents: Array<PrimitiveComponent>):
      OverlappingComponentsProvider

  @JsName("GetOverlappingActors")
  public open fun getOverlappingActors(overlappingActors: Array<Actor>,
      classFilter: UnrealEngineClass): OverlappingActorsProvider

  @JsName("GetLocalRole")
  public open fun getLocalRole(): String

  @JsName("GetLifeSpan")
  public open fun getLifeSpan(): Number

  @JsName("GetLevelTransform")
  public open fun getLevelTransform(): Transform

  @JsName("GetLevel")
  public open fun getLevel(): Level

  @JsName("GetInstigatorController")
  public open fun getInstigatorController(): Controller

  @JsName("GetInstigator")
  public open fun getInstigator(): Pawn

  @JsName("GetInputVectorAxisValue")
  public open fun getInputVectorAxisValue(inputAxisKey: Key): Vector

  @JsName("GetInputAxisValue")
  public open fun getInputAxisValue(inputAxisName: String): Number

  @JsName("GetInputAxisKeyValue")
  public open fun getInputAxisKeyValue(inputAxisKey: Key): Number

  @JsName("GetHorizontalDotProductTo")
  public open fun getHorizontalDotProductTo(otherActor: Actor): Number

  @JsName("GetHorizontalDistanceTo")
  public open fun getHorizontalDistanceTo(otherActor: Actor): Number

  @JsName("GetGameTimeSinceCreation")
  public open fun getGameTimeSinceCreation(): Number

  @JsName("GetFolderPath")
  public open fun getFolderPath(): String

  @JsName("GetDotProductTo")
  public open fun getDotProductTo(otherActor: Actor): Number

  @JsName("GetDistanceTo")
  public open fun getDistanceTo(otherActor: Actor): Number

  @JsName("GetDefaultActorLabel")
  public open fun getDefaultActorLabel(): String

  @JsName("GetComponentsByTag")
  public open fun getComponentsByTag(componentClass: UnrealEngineClass, tag: String):
      Array<ActorComponent>

  @JsName("GetComponentsByInterface")
  public open fun getComponentsByInterface(`interface`: UnrealEngineClass): Array<ActorComponent>

  @JsName("GetComponentByClass")
  public open fun getComponentByClass(componentClass: UnrealEngineClass): ActorComponent

  @JsName("GetAttachParentSocketName")
  public open fun getAttachParentSocketName(): String

  @JsName("GetAttachParentActor")
  public open fun getAttachParentActor(): Actor

  @JsName("GetAttachedActors")
  public open fun getAttachedActors(
    outActors: Array<Actor>,
    resetArray: Boolean,
    recursivelyIncludeAttachedActors: Boolean,
  ): OutActorsProvider

  @JsName("GetAllChildActors")
  public open fun getAllChildActors(childActors: Array<Actor>, includeDescendants: Boolean):
      ChildActorsProvider

  @JsName("GetActorUpVector")
  public open fun getActorUpVector(): Vector

  @JsName("GetActorTimeDilation")
  public open fun getActorTimeDilation(): Number

  @JsName("GetActorTickInterval")
  public open fun getActorTickInterval(): Number

  @JsName("GetActorScale3D")
  public open fun getActorScale3d(): Vector

  @JsName("GetActorRightVector")
  public open fun getActorRightVector(): Vector

  @JsName("GetActorRelativeScale3D")
  public open fun getActorRelativeScale3d(): Vector

  @JsName("GetActorLabel")
  public open fun getActorLabel(createIfNone: Boolean): String

  @JsName("GetActorForwardVector")
  public open fun getActorForwardVector(): Vector

  @JsName("GetActorEyesViewPoint")
  public open fun getActorEyesViewPoint(outLocation: Vector, outRotation: Rotator): Object564

  @JsName("GetActorEnableCollision")
  public open fun getActorEnableCollision(): Boolean

  @JsName("GetActorBounds")
  public open fun getActorBounds(
    onlyCollidingComponents: Boolean,
    origin: Vector,
    boxExtent: Vector,
    includeFromChildActors: Boolean,
  ): Object565

  @JsName("GetActorBounds")
  public open fun getActorBounds(onlyCollidingComponents: Boolean): Object565

  @JsName("GetActorBounds")
  public open fun getActorBounds(onlyCollidingComponents: Boolean, origin: Vector): Object565

  @JsName("GetActorBounds")
  public open fun getActorBounds(
    onlyCollidingComponents: Boolean,
    origin: Vector,
    boxExtent: Vector,
  ): Object565

  @JsName("ForceNetUpdate")
  public open fun forceNetUpdate(): Unit

  @JsName("FlushNetDormancy")
  public open fun flushNetDormancy(): Unit

  @JsName("FinishAddComponent")
  public open fun finishAddComponent(
    component: ActorComponent,
    manualAttachment: Boolean,
    relativeTransform: Transform,
  ): Unit

  @JsName("EnableInput")
  public open fun enableInput(playerController: PlayerController): Unit

  @JsName("DisableInput")
  public open fun disableInput(playerController: PlayerController): Unit

  @JsName("DetachRootComponentFromParent")
  public open fun detachRootComponentFromParent(maintainWorldPosition: Boolean): Unit

  @JsName("AddTickPrerequisiteComponent")
  public open fun addTickPrerequisiteComponent(prerequisiteComponent: ActorComponent): Unit

  @JsName("AddTickPrerequisiteActor")
  public open fun addTickPrerequisiteActor(prerequisiteActor: Actor): Unit

  @JsName("AddComponentByClass")
  public open fun addComponentByClass(
    `class`: UnrealEngineClass,
    manualAttachment: Boolean,
    relativeTransform: Transform,
    deferredFinish: Boolean,
  ): ActorComponent

  @JsName("AddComponent")
  public open fun addComponent(
    templateName: String,
    manualAttachment: Boolean,
    relativeTransform: Transform,
    componentTemplateContext: UObject,
    deferredFinish: Boolean,
  ): ActorComponent

  @JsName("ActorHasTag")
  public open fun actorHasTag(tag: String): Boolean

  @JsName("ClearActorLabel")
  public open fun clearActorLabel(): Unit

  @JsName("GetActorLabel")
  public open fun getActorLabel(): String

  @JsName("GetActorLocation")
  public open fun getActorLocation(): Vector

  @JsName("GetActorRotation")
  public open fun getActorRotation(): Rotator

  @JsName("IsActorLabelEditable")
  public open fun isActorLabelEditable(): Boolean

  @JsName("SetActorLabelUnique")
  public open fun setActorLabelUnique(newActorLabel: String, inExistingActorLabels: Array<String>):
      Unit

  @JsName("SetActorLocation")
  public open fun setActorLocation(
    newLocation: Vector,
    sweep: Boolean,
    sweepHitResult: HitResult,
    teleport: Boolean,
  ): Object503

  @JsName("SetFolderPath_Recursively")
  public open fun setFolderPathRecursively(newFolderPath: String): Unit

  @JsName("AddActorToLayer")
  public open fun addActorToLayer(layer: ActorLayer): Unit

  @JsName("RemoveActorFromLayer")
  public open fun removeActorFromLayer(layer: ActorLayer): Unit

  @JsName("DestroyActor")
  public open fun destroyActor(): Boolean

  @JsName("PilotLevelActor")
  public open fun pilotLevelActor(): Unit

  @JsName("SetActorSelectionState")
  public open fun setActorSelectionState(shouldBeSelected: Boolean): Unit

  @JsName("Actor_GetWorld")
  public open fun actorGetWorld(): World

  @JsName("GetComponentsByClass")
  public open fun getComponentsByClass(componentClass: UnrealEngineClass): Array<ActorComponent>

  @JsName("GetLastRenderTime")
  public open fun getLastRenderTime(): Number

  @JsName("IsPendingKill")
  public open fun isPendingKill(): Boolean

  @JsName("ReregisterAllComponents")
  public open fun reregisterAllComponents(): Unit

  @JsName("SetActorFlags")
  public open fun setActorFlags(flags: Number): Unit

  @JsName("SetRootComponent")
  public open fun setRootComponent(component: SceneComponent): Unit

  @JsName("ConvertActorToLightWeightInstance")
  public open fun convertActorToLightWeightInstance(): ActorInstanceHandle

  @JsName("GetActorBounds")
  public open fun getActorBounds(origin: Vector, boxExtent: Vector): Object565

  @JsName("GetActorBounds")
  public open fun getActorBounds(): Object565

  @JsName("GetActorBounds")
  public open fun getActorBounds(origin: Vector): Object565

  @JsName("ApplyDamage")
  public open fun applyDamage(
    baseDamage: Number,
    eventInstigator: Controller,
    damageCauser: Actor,
    damageTypeClass: UnrealEngineClass,
  ): Number

  @JsName("ApplyPointDamage")
  public open fun applyPointDamage(
    baseDamage: Number,
    hitFromDirection: Vector,
    hitInfo: HitResult,
    eventInstigator: Controller,
    damageCauser: Actor,
    damageTypeClass: UnrealEngineClass,
  ): Number

  @JsName("FinishSpawningActor")
  public open fun finishSpawningActor(spawnTransform: Transform): Actor

  @JsName("K2_AcquireEditorActorElementHandle")
  public open fun k2AcquireEditorActorElementHandle(allowCreate: Boolean): ScriptTypedElementHandle

  @JsName("GetAIController")
  public open fun getAiController(): AiController

  @JsName("GetBlackboard")
  public open fun getBlackboard(): BlackboardComponent

  @JsName("AddDeviceVisualizationComponentBlocking")
  public open fun addDeviceVisualizationComponentBlocking(
    xrDeviceId: XrDeviceId,
    manualAttachment: Boolean,
    relativeTransform: Transform,
  ): PrimitiveComponent

  @JsName("AddNamedDeviceVisualizationComponentBlocking")
  public open fun addNamedDeviceVisualizationComponentBlocking(
    systemName: String,
    deviceName: String,
    manualAttachment: Boolean,
    relativeTransform: Transform,
    xrDeviceId: XrDeviceId,
  ): Object566

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Actor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Actor

    @JsName("C")
    public fun copy(other: UObject): Actor

    @JsName("C")
    public fun copy(other: Any): Actor

    @JsName("ClearActorLabel")
    public fun clearActorLabel(actor: Actor): Unit

    @JsName("GetActorLabel")
    public fun getActorLabel(actor: Actor): String

    @JsName("GetActorLocation")
    public fun getActorLocation(actor: Actor): Vector

    @JsName("GetActorRotation")
    public fun getActorRotation(actor: Actor): Rotator

    @JsName("GetFolderPath")
    public fun getFolderPath(actor: Actor): String

    @JsName("IsActorLabelEditable")
    public fun isActorLabelEditable(actor: Actor): Boolean

    @JsName("SetActorLabel")
    public fun setActorLabel(
      actor: Actor,
      newActorLabel: String,
      markDirty: Boolean,
    ): Unit

    @JsName("SetActorLabelUnique")
    public fun setActorLabelUnique(
      actor: Actor,
      newActorLabel: String,
      inExistingActorLabels: Array<String>,
    ): Unit

    @JsName("SetActorLocation")
    public fun setActorLocation(
      actor: Actor,
      newLocation: Vector,
      sweep: Boolean,
      sweepHitResult: HitResult,
      teleport: Boolean,
    ): Object503

    @JsName("SetFolderPath")
    public fun setFolderPath(actor: Actor, newFolderPath: String): Unit

    @JsName("SetFolderPath_Recursively")
    public fun setFolderPathRecursively(actor: Actor, newFolderPath: String): Unit

    @JsName("SetIsTemporarilyHiddenInEditor")
    public fun setIsTemporarilyHiddenInEditor(actor: Actor, isHidden: Boolean): Unit

    @JsName("AddActorToLayer")
    public fun addActorToLayer(inActor: Actor, layer: ActorLayer): Unit

    @JsName("RemoveActorFromLayer")
    public fun removeActorFromLayer(inActor: Actor, layer: ActorLayer): Unit

    @JsName("DestroyActor")
    public fun destroyActor(actorToDestroy: Actor): Boolean

    @JsName("PilotLevelActor")
    public fun pilotLevelActor(actorToPilot: Actor): Unit

    @JsName("SetActorSelectionState")
    public fun setActorSelectionState(actor: Actor, shouldBeSelected: Boolean): Unit

    @JsName("Actor_GetWorld")
    public fun actorGetWorld(actor: Actor): World

    @JsName("GetComponentsByClass")
    public fun getComponentsByClass(actor: Actor, componentClass: UnrealEngineClass):
        Array<ActorComponent>

    @JsName("GetLastRenderTime")
    public fun getLastRenderTime(actor: Actor): Number

    @JsName("GetLevel")
    public fun getLevel(actor: Actor): Level

    @JsName("IsPendingKill")
    public fun isPendingKill(inActor: Actor): Boolean

    @JsName("ReregisterAllComponents")
    public fun reregisterAllComponents(actor: Actor): Unit

    @JsName("SetActorFlags")
    public fun setActorFlags(actor: Actor, flags: Number): Unit

    @JsName("SetRootComponent")
    public fun setRootComponent(actor: Actor, component: SceneComponent): Unit

    @JsName("ConvertActorToLightWeightInstance")
    public fun convertActorToLightWeightInstance(actor: Actor): ActorInstanceHandle

    @JsName("GetActorBounds")
    public fun getActorBounds(
      actor: Actor,
      origin: Vector,
      boxExtent: Vector,
    ): Object565

    @JsName("ApplyDamage")
    public fun applyDamage(
      damagedActor: Actor,
      baseDamage: Number,
      eventInstigator: Controller,
      damageCauser: Actor,
      damageTypeClass: UnrealEngineClass,
    ): Number

    @JsName("ApplyPointDamage")
    public fun applyPointDamage(
      damagedActor: Actor,
      baseDamage: Number,
      hitFromDirection: Vector,
      hitInfo: HitResult,
      eventInstigator: Controller,
      damageCauser: Actor,
      damageTypeClass: UnrealEngineClass,
    ): Number

    @JsName("FinishSpawningActor")
    public fun finishSpawningActor(actor: Actor, spawnTransform: Transform): Actor

    @JsName("K2_AcquireEditorActorElementHandle")
    public fun k2AcquireEditorActorElementHandle(actor: Actor, allowCreate: Boolean):
        ScriptTypedElementHandle

    @JsName("GetAIController")
    public fun getAiController(controlledActor: Actor): AiController

    @JsName("GetBlackboard")
    public fun getBlackboard(target: Actor): BlackboardComponent

    @JsName("AddDeviceVisualizationComponentBlocking")
    public fun addDeviceVisualizationComponentBlocking(
      target: Actor,
      xrDeviceId: XrDeviceId,
      manualAttachment: Boolean,
      relativeTransform: Transform,
    ): PrimitiveComponent

    @JsName("AddNamedDeviceVisualizationComponentBlocking")
    public fun addNamedDeviceVisualizationComponentBlocking(
      target: Actor,
      systemName: String,
      deviceName: String,
      manualAttachment: Boolean,
      relativeTransform: Transform,
      xrDeviceId: XrDeviceId,
    ): Object566
  }
}

public open external class ActorComponent(
  outer: UObject,
) : UObject {
  @JsName("PrimaryComponentTick")
  public open var primaryComponentTick: ActorComponentTickFunction

  @JsName("ComponentTags")
  public open var componentTags: Array<String>

  @JsName("AssetUserData")
  public open var assetUserData: Array<AssetUserData>

  @JsName("UCSSerializationIndex")
  public open var ucsSerializationIndex: Number

  @JsName("bNetAddressable")
  public open var netAddressable: Boolean

  @JsName("bReplicates")
  public open var replicates: Boolean

  @JsName("bCreatedByConstructionScript")
  public open var createdByConstructionScript: Boolean

  @JsName("bInstanceComponent")
  public open var instanceComponent: Boolean

  @JsName("bAutoActivate")
  public open var autoActivate: Boolean

  @JsName("bIsActive")
  public open var isActive: Boolean

  @JsName("bEditableWhenInherited")
  public open var editableWhenInherited: Boolean

  @JsName("bCanEverAffectNavigation")
  public open var canEverAffectNavigation: Boolean

  @JsName("bIsEditorOnly")
  public open var isEditorOnly: Boolean

  @JsName("bIsVisualizationComponent")
  public open var isVisualizationComponent: Boolean

  @JsName("bNeedsUCSSerializationIndexEvaluted")
  public open var needsUcsSerializationIndexEvaluted: Boolean

  @JsName("CreationMethod")
  public open var creationMethod: String

  @JsName("OnComponentActivated")
  public open var onComponentActivated: UnrealEngineMulticastDelegate<(Component: ActorComponent,
      bReset: Boolean) -> Unit>

  @JsName("OnComponentDeactivated")
  public open var onComponentDeactivated:
      UnrealEngineMulticastDelegate<(Component: ActorComponent) -> Unit>

  @JsName("UCSModifiedProperties")
  public open var ucsModifiedProperties: Array<SimpleMemberReference>

  @JsName("ToggleActive")
  public open fun toggleActive(): Unit

  @JsName("SetTickGroup")
  public open fun setTickGroup(newTickGroup: String): Unit

  @JsName("SetTickableWhenPaused")
  public open fun setTickableWhenPaused(tickableWhenPaused: Boolean): Unit

  @JsName("SetIsReplicated")
  public open fun setIsReplicated(shouldReplicate: Boolean): Unit

  @JsName("SetComponentTickIntervalAndCooldown")
  public open fun setComponentTickIntervalAndCooldown(tickInterval: Number): Unit

  @JsName("SetComponentTickInterval")
  public open fun setComponentTickInterval(tickInterval: Number): Unit

  @JsName("SetComponentTickEnabled")
  public open fun setComponentTickEnabled(enabled: Boolean): Unit

  @JsName("SetAutoActivate")
  public open fun setAutoActivate(newAutoActivate: Boolean): Unit

  @JsName("SetActive")
  public open fun setActive(newActive: Boolean, reset: Boolean): Unit

  @JsName("RemoveTickPrerequisiteComponent")
  public open fun removeTickPrerequisiteComponent(prerequisiteComponent: ActorComponent): Unit

  @JsName("RemoveTickPrerequisiteActor")
  public open fun removeTickPrerequisiteActor(prerequisiteActor: Actor): Unit

  @JsName("ReceiveTick")
  public open fun receiveTick(deltaSeconds: Number): Unit

  @JsName("ReceiveEndPlay")
  public open fun receiveEndPlay(endPlayReason: String): Unit

  @JsName("ReceiveBeginPlay")
  public open fun receiveBeginPlay(): Unit

  @JsName("OnRep_IsActive")
  public open fun onRepIsActive(): Unit

  @JsName("K2_DestroyComponent")
  public open fun k2DestroyComponent(uObject: UObject): Unit

  @JsName("IsComponentTickEnabled")
  public open fun isComponentTickEnabled(): Boolean

  @JsName("IsBeingDestroyed")
  public open fun isBeingDestroyed(): Boolean

  @JsName("IsActive")
  public open fun isActive(): Boolean

  @JsName("GetOwner")
  public open fun getOwner(): Actor

  @JsName("GetComponentTickInterval")
  public open fun getComponentTickInterval(): Number

  @JsName("Deactivate")
  public open fun deactivate(): Unit

  @JsName("ComponentHasTag")
  public open fun componentHasTag(tag: String): Boolean

  @JsName("AddTickPrerequisiteComponent")
  public open fun addTickPrerequisiteComponent(prerequisiteComponent: ActorComponent): Unit

  @JsName("AddTickPrerequisiteActor")
  public open fun addTickPrerequisiteActor(prerequisiteActor: Actor): Unit

  @JsName("Activate")
  public open fun activate(reset: Boolean): Unit

  @JsName("IsRegistered")
  public open fun isRegistered(): Boolean

  @JsName("MarkRenderStateDirty")
  public open fun markRenderStateDirty(): Unit

  @JsName("RegisterComponent")
  public open fun registerComponent(): Unit

  @JsName("ReregisterComponent")
  public open fun reregisterComponent(): Unit

  @JsName("UnregisterComponent")
  public open fun unregisterComponent(): Unit

  @JsName("K2_AcquireEditorComponentElementHandle")
  public open fun k2AcquireEditorComponentElementHandle(allowCreate: Boolean):
      ScriptTypedElementHandle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorComponent

    @JsName("C")
    public fun copy(other: UObject): ActorComponent

    @JsName("C")
    public fun copy(other: Any): ActorComponent

    @JsName("IsRegistered")
    public fun isRegistered(actorComponent: ActorComponent): Boolean

    @JsName("MarkRenderStateDirty")
    public fun markRenderStateDirty(component: ActorComponent): Unit

    @JsName("RegisterComponent")
    public fun registerComponent(actorComponent: ActorComponent): Unit

    @JsName("ReregisterComponent")
    public fun reregisterComponent(actorComponent: ActorComponent): Unit

    @JsName("UnregisterComponent")
    public fun unregisterComponent(actorComponent: ActorComponent): Unit

    @JsName("K2_AcquireEditorComponentElementHandle")
    public fun k2AcquireEditorComponentElementHandle(component: ActorComponent,
        allowCreate: Boolean): ScriptTypedElementHandle
  }
}

public open external class BlueprintComponentChangedPropertyInfo {
  @JsName("PropertyName")
  public open var propertyName: String

  @JsName("ArrayIndex")
  public open var arrayIndex: Number

  @JsName("PropertyScope")
  public open var propertyScope: Struct

  public open fun clone(): BlueprintComponentChangedPropertyInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintComponentChangedPropertyInfo

    @JsName("C")
    public fun copy(other: Any): BlueprintComponentChangedPropertyInfo
  }
}

public open external class BlueprintCookedComponentInstancingData {
  @JsName("ChangedPropertyList")
  public open var changedPropertyList: Array<BlueprintComponentChangedPropertyInfo>

  @JsName("bHasValidCookedData")
  public open var hasValidCookedData: Boolean

  public open fun clone(): BlueprintCookedComponentInstancingData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintCookedComponentInstancingData

    @JsName("C")
    public fun copy(other: Any): BlueprintCookedComponentInstancingData
  }
}

@JsName("BPVariableMetaDataEntry")
public open external class BpVariableMetaDataEntry {
  @JsName("DataKey")
  public open var dataKey: String

  @JsName("DataValue")
  public open var dataValue: String

  public open fun clone(): BpVariableMetaDataEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BpVariableMetaDataEntry

    @JsName("C")
    public fun copy(other: Any): BpVariableMetaDataEntry
  }
}

@JsName("SCS_Node")
public open external class ScsNode(
  outer: UObject,
) : UObject {
  @JsName("ComponentClass")
  public open var componentClass: UnrealEngineClass

  @JsName("ComponentTemplate")
  public open var componentTemplate: ActorComponent

  @JsName("CookedComponentInstancingData")
  public open var cookedComponentInstancingData: BlueprintCookedComponentInstancingData

  @JsName("CategoryName")
  public open var categoryName: String

  @JsName("AttachToName")
  public open var attachToName: String

  @JsName("ParentComponentOrVariableName")
  public open var parentComponentOrVariableName: String

  @JsName("ParentComponentOwnerClassName")
  public open var parentComponentOwnerClassName: String

  @JsName("bIsParentComponentNative")
  public open var isParentComponentNative: Boolean

  @JsName("ChildNodes")
  public open var childNodes: Array<ScsNode>

  @JsName("MetaDataArray")
  public open var metaDataArray: Array<BpVariableMetaDataEntry>

  @JsName("VariableGuid")
  public open var variableGuid: Guid

  @JsName("bIsNative")
  public open var isNative: Boolean

  @JsName("NativeComponentName")
  public open var nativeComponentName: String

  @JsName("bVariableNameAutoGenerated")
  public open var variableNameAutoGenerated: Boolean

  @JsName("InternalVariableName")
  public open var internalVariableName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScsNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScsNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScsNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScsNode

    @JsName("C")
    public fun copy(other: UObject): ScsNode

    @JsName("C")
    public fun copy(other: Any): ScsNode
  }
}

public open external class SimpleConstructionScript(
  outer: UObject,
) : UObject {
  @JsName("RootNodes")
  public open var rootNodes: Array<ScsNode>

  @JsName("AllNodes")
  public open var allNodes: Array<ScsNode>

  @JsName("DefaultSceneRootNode")
  public open var defaultSceneRootNode: ScsNode

  @JsName("RootNode")
  public open var rootNode: ScsNode

  @JsName("ActorComponentNodes")
  public open var actorComponentNodes: Array<ScsNode>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SimpleConstructionScript

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SimpleConstructionScript

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SimpleConstructionScript

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SimpleConstructionScript

    @JsName("C")
    public fun copy(other: UObject): SimpleConstructionScript

    @JsName("C")
    public fun copy(other: Any): SimpleConstructionScript
  }
}

@JsName("ETimelineLengthMode")
public external object TimelineLengthMode {
  @JsName("TL_TimelineLength")
  public var TimelineLength: String

  @JsName("TL_LastKeyFrame")
  public var LastKeyFrame: String

  @JsName("TL_MAX")
  public var Max: String
}

@JsName("TTTrackBase")
public open external class TtTrackBase {
  @JsName("TrackName")
  public open var trackName: String

  @JsName("bIsExternalCurve")
  public open var isExternalCurve: Boolean

  @JsName("bIsExpanded")
  public open var isExpanded: Boolean

  @JsName("bIsCurveViewSynchronized")
  public open var isCurveViewSynchronized: Boolean

  public open fun clone(): TtTrackBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TtTrackBase

    @JsName("C")
    public fun copy(other: Any): TtTrackBase
  }
}

@JsName("TTEventTrack")
public open external class TtEventTrack : TtTrackBase {
  @JsName("FunctionName")
  public open var functionName: String

  @JsName("CurveKeys")
  public open var curveKeys: CurveFloat

  public override fun clone(): TtEventTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TtEventTrack

    @JsName("C")
    public fun copy(other: Any): TtEventTrack
  }
}

@JsName("TTPropertyTrack")
public open external class TtPropertyTrack : TtTrackBase {
  @JsName("PropertyName")
  public open var propertyName: String

  public override fun clone(): TtPropertyTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TtPropertyTrack

    @JsName("C")
    public fun copy(other: Any): TtPropertyTrack
  }
}

@JsName("TTFloatTrack")
public open external class TtFloatTrack : TtPropertyTrack {
  @JsName("CurveFloat")
  public open var curveFloat: CurveFloat

  public override fun clone(): TtFloatTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TtFloatTrack

    @JsName("C")
    public fun copy(other: Any): TtFloatTrack
  }
}

public open external class CurveVector(
  outer: UObject,
) : CurveBase {
  @JsName("FloatCurves")
  public open var floatCurves: RichCurve

  @JsName("GetVectorValue")
  public open fun getVectorValue(inTime: Number): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveVector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveVector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveVector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveVector

    @JsName("C")
    public fun copy(other: UObject): CurveVector

    @JsName("C")
    public fun copy(other: Any): CurveVector
  }
}

@JsName("TTVectorTrack")
public open external class TtVectorTrack : TtPropertyTrack {
  @JsName("CurveVector")
  public open var curveVector: CurveVector

  public override fun clone(): TtVectorTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TtVectorTrack

    @JsName("C")
    public fun copy(other: Any): TtVectorTrack
  }
}

@JsName("TTLinearColorTrack")
public open external class TtLinearColorTrack : TtPropertyTrack {
  @JsName("CurveLinearColor")
  public open var curveLinearColor: CurveLinearColor

  public override fun clone(): TtLinearColorTrack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TtLinearColorTrack

    @JsName("C")
    public fun copy(other: Any): TtLinearColorTrack
  }
}

@JsName("TTTrackId")
public open external class TtTrackId {
  @JsName("TrackType")
  public open var trackType: Number

  @JsName("TrackIndex")
  public open var trackIndex: Number

  public open fun clone(): TtTrackId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TtTrackId

    @JsName("C")
    public fun copy(other: Any): TtTrackId
  }
}

public open external class TimelineTemplate(
  outer: UObject,
) : UObject {
  @JsName("TimeLineLength")
  public open var timeLineLength: Number

  @JsName("LengthMode")
  public open var lengthMode: String

  @JsName("bAutoPlay")
  public open var autoPlay: Boolean

  @JsName("bLoop")
  public open var loop: Boolean

  @JsName("bReplicated")
  public open var replicated: Boolean

  @JsName("bIgnoreTimeDilation")
  public open var ignoreTimeDilation: Boolean

  @JsName("EventTracks")
  public open var eventTracks: Array<TtEventTrack>

  @JsName("FloatTracks")
  public open var floatTracks: Array<TtFloatTrack>

  @JsName("VectorTracks")
  public open var vectorTracks: Array<TtVectorTrack>

  @JsName("LinearColorTracks")
  public open var linearColorTracks: Array<TtLinearColorTrack>

  @JsName("MetaDataArray")
  public open var metaDataArray: Array<BpVariableMetaDataEntry>

  @JsName("TimelineGuid")
  public open var timelineGuid: Guid

  @JsName("TimelineTickGroup")
  public open var timelineTickGroup: String

  @JsName("VariableName")
  public open var variableName: String

  @JsName("DirectionPropertyName")
  public open var directionPropertyName: String

  @JsName("UpdateFunctionName")
  public open var updateFunctionName: String

  @JsName("FinishedFunctionName")
  public open var finishedFunctionName: String

  @JsName("TrackDisplayOrder")
  public open var trackDisplayOrder: Array<TtTrackId>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TimelineTemplate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TimelineTemplate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TimelineTemplate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TimelineTemplate

    @JsName("C")
    public fun copy(other: UObject): TimelineTemplate

    @JsName("C")
    public fun copy(other: Any): TimelineTemplate
  }
}

@JsName("BPComponentClassOverride")
public open external class BpComponentClassOverride {
  @JsName("ComponentName")
  public open var componentName: String

  @JsName("ComponentClass")
  public open var componentClass: UnrealEngineClass

  public open fun clone(): BpComponentClassOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BpComponentClassOverride

    @JsName("C")
    public fun copy(other: Any): BpComponentClassOverride
  }
}

public open external class ComponentKey {
  @JsName("OwnerClass")
  public open var ownerClass: UnrealEngineClass

  @JsName("SCSVariableName")
  public open var scsVariableName: String

  @JsName("AssociatedGuid")
  public open var associatedGuid: Guid

  public open fun clone(): ComponentKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ComponentKey

    @JsName("C")
    public fun copy(other: Any): ComponentKey
  }
}

public open external class ComponentOverrideRecord {
  @JsName("ComponentClass")
  public open var componentClass: UnrealEngineClass

  @JsName("ComponentTemplate")
  public open var componentTemplate: ActorComponent

  @JsName("ComponentKey")
  public open var componentKey: ComponentKey

  @JsName("CookedComponentInstancingData")
  public open var cookedComponentInstancingData: BlueprintCookedComponentInstancingData

  public open fun clone(): ComponentOverrideRecord

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ComponentOverrideRecord

    @JsName("C")
    public fun copy(other: Any): ComponentOverrideRecord
  }
}

public open external class InheritableComponentHandler(
  outer: UObject,
) : UObject {
  @JsName("Records")
  public open var records: Array<ComponentOverrideRecord>

  @JsName("UnnecessaryComponents")
  public open var unnecessaryComponents: Array<ActorComponent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InheritableComponentHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InheritableComponentHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InheritableComponentHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InheritableComponentHandler

    @JsName("C")
    public fun copy(other: UObject): InheritableComponentHandler

    @JsName("C")
    public fun copy(other: Any): InheritableComponentHandler
  }
}

@JsName("ELifetimeCondition")
public external object LifetimeCondition {
  @JsName("COND_None")
  public var None: String

  @JsName("COND_InitialOnly")
  public var InitialOnly: String

  @JsName("COND_OwnerOnly")
  public var OwnerOnly: String

  @JsName("COND_SkipOwner")
  public var SkipOwner: String

  @JsName("COND_SimulatedOnly")
  public var SimulatedOnly: String

  @JsName("COND_AutonomousOnly")
  public var AutonomousOnly: String

  @JsName("COND_SimulatedOrPhysics")
  public var SimulatedOrPhysics: String

  @JsName("COND_InitialOrOwner")
  public var InitialOrOwner: String

  @JsName("COND_Custom")
  public var Custom: String

  @JsName("COND_ReplayOrOwner")
  public var ReplayOrOwner: String

  @JsName("COND_ReplayOnly")
  public var ReplayOnly: String

  @JsName("COND_SimulatedOnlyNoReplay")
  public var SimulatedOnlyNoReplay: String

  @JsName("COND_SimulatedOrPhysicsNoReplay")
  public var SimulatedOrPhysicsNoReplay: String

  @JsName("COND_SkipReplay")
  public var SkipReplay: String

  @JsName("COND_Never")
  public var Never: String

  @JsName("COND_Max")
  public var Max: String
}

@JsName("BPVariableDescription")
public open external class BpVariableDescription {
  @JsName("VarName")
  public open var varName: String

  @JsName("VarGuid")
  public open var varGuid: Guid

  @JsName("VarType")
  public open var varType: EdGraphPinType

  @JsName("FriendlyName")
  public open var friendlyName: String

  @JsName("Category")
  public open var category: String

  @JsName("PropertyFlags")
  public open var propertyFlags: Any

  @JsName("RepNotifyFunc")
  public open var repNotifyFunc: String

  @JsName("ReplicationCondition")
  public open var replicationCondition: String

  @JsName("MetaDataArray")
  public open var metaDataArray: Array<BpVariableMetaDataEntry>

  @JsName("DefaultValue")
  public open var defaultValue: String

  public open fun clone(): BpVariableDescription

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BpVariableDescription

    @JsName("C")
    public fun copy(other: Any): BpVariableDescription
  }
}

@JsName("BPInterfaceDescription")
public open external class BpInterfaceDescription {
  @JsName("Interface")
  public open var `interface`: UnrealEngineClass

  @JsName("Graphs")
  public open var graphs: Array<EdGraph>

  public open fun clone(): BpInterfaceDescription

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BpInterfaceDescription

    @JsName("C")
    public fun copy(other: Any): BpInterfaceDescription
  }
}

@JsName("BPEditorBookmarkNode")
public open external class BpEditorBookmarkNode {
  @JsName("NodeGuid")
  public open var nodeGuid: Guid

  @JsName("ParentGuid")
  public open var parentGuid: Guid

  @JsName("DisplayName")
  public open var displayName: String

  public open fun clone(): BpEditorBookmarkNode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BpEditorBookmarkNode

    @JsName("C")
    public fun copy(other: Any): BpEditorBookmarkNode
  }
}

public open external class Breakpoint(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Breakpoint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Breakpoint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Breakpoint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Breakpoint

    @JsName("C")
    public fun copy(other: UObject): Breakpoint

    @JsName("C")
    public fun copy(other: Any): Breakpoint
  }
}

public open external class EdGraphPinReference {
  @JsName("OwningNode")
  public open var owningNode: Any

  @JsName("PinId")
  public open var pinId: Guid

  public open fun clone(): EdGraphPinReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EdGraphPinReference

    @JsName("C")
    public fun copy(other: Any): EdGraphPinReference
  }
}

public open external class BlueprintExtension(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintExtension

    @JsName("C")
    public fun copy(other: UObject): BlueprintExtension

    @JsName("C")
    public fun copy(other: Any): BlueprintExtension
  }
}

public open external class Blueprint(
  outer: UObject,
) : BlueprintCore {
  @JsName("ParentClass")
  public open var parentClass: UnrealEngineClass

  @JsName("BlueprintType")
  public open var blueprintType: String

  @JsName("bRecompileOnLoad")
  public open var recompileOnLoad: Boolean

  @JsName("bHasBeenRegenerated")
  public open var hasBeenRegenerated: Boolean

  @JsName("bIsRegeneratingOnLoad")
  public open var isRegeneratingOnLoad: Boolean

  @JsName("bBeingCompiled")
  public open var beingCompiled: Boolean

  @JsName("bIsNewlyCreated")
  public open var isNewlyCreated: Boolean

  @JsName("bForceFullEditor")
  public open var forceFullEditor: Boolean

  @JsName("bQueuedForCompilation")
  public open var queuedForCompilation: Boolean

  @JsName("bRunConstructionScriptOnDrag")
  public open var runConstructionScriptOnDrag: Boolean

  @JsName("bRunConstructionScriptInSequencer")
  public open var runConstructionScriptInSequencer: Boolean

  @JsName("bGenerateConstClass")
  public open var generateConstClass: Boolean

  @JsName("bGenerateAbstractClass")
  public open var generateAbstractClass: Boolean

  @JsName("bDisplayCompilePIEWarning")
  public open var displayCompilePieWarning: Boolean

  @JsName("bDeprecate")
  public open var deprecate: Boolean

  @JsName("bDuplicatingReadOnly")
  public open var duplicatingReadOnly: Boolean

  @JsName("NativizationFlag")
  public open var nativizationFlag: String

  @JsName("CompileMode")
  public open var compileMode: String

  @JsName("Status")
  public open var status: String

  @JsName("BlueprintDisplayName")
  public open var blueprintDisplayName: String

  @JsName("BlueprintDescription")
  public open var blueprintDescription: String

  @JsName("BlueprintNamespace")
  public open var blueprintNamespace: String

  @JsName("BlueprintCategory")
  public open var blueprintCategory: String

  @JsName("HideCategories")
  public open var hideCategories: Array<String>

  @JsName("BlueprintSystemVersion")
  public open var blueprintSystemVersion: Number

  @JsName("SimpleConstructionScript")
  public open var simpleConstructionScript: SimpleConstructionScript

  @JsName("UbergraphPages")
  public open var ubergraphPages: Array<EdGraph>

  @JsName("FunctionGraphs")
  public open var functionGraphs: Array<EdGraph>

  @JsName("DelegateSignatureGraphs")
  public open var delegateSignatureGraphs: Array<EdGraph>

  @JsName("MacroGraphs")
  public open var macroGraphs: Array<EdGraph>

  @JsName("IntermediateGeneratedGraphs")
  public open var intermediateGeneratedGraphs: Array<EdGraph>

  @JsName("EventGraphs")
  public open var eventGraphs: Array<EdGraph>

  @JsName("PRIVATE_CachedMacroInfo")
  public open var privateCachedMacroInfo: Any

  @JsName("ComponentTemplates")
  public open var componentTemplates: Array<ActorComponent>

  @JsName("Timelines")
  public open var timelines: Array<TimelineTemplate>

  @JsName("ComponentClassOverrides")
  public open var componentClassOverrides: Array<BpComponentClassOverride>

  @JsName("InheritableComponentHandler")
  public open var inheritableComponentHandler: InheritableComponentHandler

  @JsName("NewVariables")
  public open var newVariables: Array<BpVariableDescription>

  @JsName("CategorySorting")
  public open var categorySorting: Array<String>

  @JsName("ImportedNamespaces")
  public open var importedNamespaces: Any

  @JsName("ImplementedInterfaces")
  public open var implementedInterfaces: Array<BpInterfaceDescription>

  @JsName("LastEditedDocuments")
  public open var lastEditedDocuments: Array<EditedDocumentInfo>

  @JsName("Bookmarks")
  public open var bookmarks: Any

  @JsName("BookmarkNodes")
  public open var bookmarkNodes: Array<BpEditorBookmarkNode>

  @JsName("Breakpoints")
  public open var breakpoints: Array<Breakpoint>

  @JsName("WatchedPins")
  public open var watchedPins: Array<EdGraphPinReference>

  @JsName("DeprecatedPinWatches")
  public open var deprecatedPinWatches: Array<EdGraphPinDeprecated>

  @JsName("ComponentTemplateNameIndex")
  public open var componentTemplateNameIndex: Any

  @JsName("OldToNewComponentTemplateNames")
  public open var oldToNewComponentTemplateNames: Any

  @JsName("Extensions")
  public open var extensions: Array<BlueprintExtension>

  @JsName("ThumbnailInfo")
  public open var thumbnailInfo: ThumbnailInfo

  @JsName("CrcLastCompiledCDO")
  public open var crcLastCompiledCdo: Any

  @JsName("CrcLastCompiledSignature")
  public open var crcLastCompiledSignature: Any

  @JsName("bCachedDependenciesUpToDate")
  public open var cachedDependenciesUpToDate: Boolean

  @JsName("CachedDependencies")
  public open var cachedDependencies: Any

  @JsName("CachedDependents")
  public open var cachedDependents: Any

  @JsName("CachedUDSDependencies")
  public open var cachedUdsDependencies: Any

  @JsName("OriginalClass")
  public open var originalClass: UnrealEngineClass

  @JsName("AddComponentsToBlueprint")
  public open fun addComponentsToBlueprint(
    components: Array<ActorComponent>,
    harvesting: Boolean,
    optionalNewRootComponent: ActorComponent,
    keepMobility: Boolean,
  ): Unit

  @JsName("CompileBlueprint")
  public open fun compileBlueprint(): Unit

  @JsName("GetParentClassOfBlueprint")
  public open fun getParentClassOfBlueprint(): UnrealEngineClass

  @JsName("RemoveComponentFromBlueprint")
  public open fun removeComponentFromBlueprint(removeComponent: ActorComponent,
      promoteChildren: Boolean): Unit

  @JsName("GetBlueprintGeneratedClass")
  public open fun getBlueprintGeneratedClass(): UnrealEngineClass

  @JsName("AddFunctionGraph")
  public open fun addFunctionGraph(funcName: String): EdGraph

  @JsName("FindEventGraph")
  public open fun findEventGraph(): EdGraph

  @JsName("FindGraph")
  public open fun findGraph(graphName: String): EdGraph

  @JsName("RemoveFunctionGraph")
  public open fun removeFunctionGraph(funcName: String): Unit

  @JsName("RemoveGraph")
  public open fun removeGraph(graph: EdGraph): Unit

  @JsName("RemoveUnusedNodes")
  public open fun removeUnusedNodes(): Unit

  @JsName("RemoveUnusedVariables")
  public open fun removeUnusedVariables(): Number

  @JsName("ReparentBlueprint")
  public open fun reparentBlueprint(newParentClass: UnrealEngineClass): Unit

  @JsName("ReplaceVariableReferences")
  public open fun replaceVariableReferences(oldVarName: String, newVarName: String): Unit

  @JsName("UpgradeOperatorNodes")
  public open fun upgradeOperatorNodes(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Blueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Blueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Blueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Blueprint

    @JsName("C")
    public fun copy(other: UObject): Blueprint

    @JsName("C")
    public fun copy(other: Any): Blueprint

    @JsName("AddComponentsToBlueprint")
    public fun addComponentsToBlueprint(
      blueprint: Blueprint,
      components: Array<ActorComponent>,
      harvesting: Boolean,
      optionalNewRootComponent: ActorComponent,
      keepMobility: Boolean,
    ): Unit

    @JsName("CompileBlueprint")
    public fun compileBlueprint(blueprint: Blueprint): Unit

    @JsName("GetParentClassOfBlueprint")
    public fun getParentClassOfBlueprint(blueprint: Blueprint): UnrealEngineClass

    @JsName("RemoveComponentFromBlueprint")
    public fun removeComponentFromBlueprint(
      blueprint: Blueprint,
      removeComponent: ActorComponent,
      promoteChildren: Boolean,
    ): Unit

    @JsName("GetBlueprintGeneratedClass")
    public fun getBlueprintGeneratedClass(blueprint: Blueprint): UnrealEngineClass

    @JsName("AddFunctionGraph")
    public fun addFunctionGraph(blueprint: Blueprint, funcName: String): EdGraph

    @JsName("FindEventGraph")
    public fun findEventGraph(blueprint: Blueprint): EdGraph

    @JsName("FindGraph")
    public fun findGraph(blueprint: Blueprint, graphName: String): EdGraph

    @JsName("RemoveFunctionGraph")
    public fun removeFunctionGraph(blueprint: Blueprint, funcName: String): Unit

    @JsName("RemoveGraph")
    public fun removeGraph(blueprint: Blueprint, graph: EdGraph): Unit

    @JsName("RemoveUnusedNodes")
    public fun removeUnusedNodes(blueprint: Blueprint): Unit

    @JsName("RemoveUnusedVariables")
    public fun removeUnusedVariables(blueprint: Blueprint): Number

    @JsName("ReparentBlueprint")
    public fun reparentBlueprint(blueprint: Blueprint, newParentClass: UnrealEngineClass): Unit

    @JsName("ReplaceVariableReferences")
    public fun replaceVariableReferences(
      blueprint: Blueprint,
      oldVarName: String,
      newVarName: String,
    ): Unit

    @JsName("UpgradeOperatorNodes")
    public fun upgradeOperatorNodes(blueprint: Blueprint): Unit
  }
}

@JsName("ERigVMGraphNotifType")
public external object RigVMGraphNotifType {
  public var GraphChanged: String

  public var NodeAdded: String

  public var NodeRemoved: String

  public var NodeSelected: String

  public var NodeDeselected: String

  public var NodeSelectionChanged: String

  public var NodePositionChanged: String

  public var NodeSizeChanged: String

  public var NodeColorChanged: String

  public var PinAdded: String

  public var PinRemoved: String

  public var PinRenamed: String

  public var PinExpansionChanged: String

  public var PinWatchedChanged: String

  public var PinArraySizeChanged: String

  public var PinDefaultValueChanged: String

  public var PinDirectionChanged: String

  public var PinTypeChanged: String

  public var PinIndexChanged: String

  public var LinkAdded: String

  public var LinkRemoved: String

  public var CommentTextChanged: String

  public var RerouteCompactnessChanged: String

  public var VariableAdded: String

  public var VariableRemoved: String

  public var VariableRenamed: String

  public var ParameterAdded: String

  public var ParameterRemoved: String

  public var ParameterRenamed: String

  public var InteractionBracketOpened: String

  public var InteractionBracketClosed: String

  public var InteractionBracketCanceled: String

  public var PinBoundVariableChanged: String

  public var NodeRenamed: String

  public var NodeReferenceChanged: String

  public var NodeCategoryChanged: String

  public var NodeKeywordsChanged: String

  public var NodeDescriptionChanged: String

  public var VariableRemappingChanged: String

  public var Invalid: String

  @JsName("ERigVMGraphNotifType_MAX")
  public var Max: String
}

@JsName("ERigVMPinDirection")
public external object RigVMPinDirection {
  public var Input: String

  public var Output: String

  public var IO: String

  public var Visible: String

  public var Hidden: String

  public var Invalid: String

  @JsName("ERigVMPinDirection_MAX")
  public var Max: String
}

@JsName("RigVMLink")
public open external class RigVmLink(
  outer: UObject,
) : UObject {
  @JsName("SourcePinPath")
  public open var sourcePinPath: String

  @JsName("TargetPinPath")
  public open var targetPinPath: String

  @JsName("GetTargetPin")
  public open fun getTargetPin(): RigVmPin

  @JsName("GetSourcePin")
  public open fun getSourcePin(): RigVmPin

  @JsName("GetPinPathRepresentation")
  public open fun getPinPathRepresentation(): String

  @JsName("GetLinkIndex")
  public open fun getLinkIndex(): Number

  @JsName("GetGraph")
  public open fun getGraph(): RigVmGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmLink

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmLink

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmLink

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmLink

    @JsName("C")
    public fun copy(other: UObject): RigVmLink

    @JsName("C")
    public fun copy(other: Any): RigVmLink
  }
}

@JsName("RigVMUnitNode")
public open external class RigVmUnitNode(
  outer: UObject,
) : RigVmNode {
  @JsName("ScriptStruct")
  public open var scriptStruct: ScriptStruct

  @JsName("MethodName")
  public open var methodName: String

  @JsName("GetStructDefaultValue")
  public open fun getStructDefaultValue(): String

  @JsName("GetScriptStruct")
  public open fun getScriptStruct(): ScriptStruct

  @JsName("GetMethodName")
  public open fun getMethodName(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmUnitNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmUnitNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmUnitNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmUnitNode

    @JsName("C")
    public fun copy(other: UObject): RigVmUnitNode

    @JsName("C")
    public fun copy(other: Any): RigVmUnitNode
  }
}

@JsName("RigVMInjectionInfo")
public open external class RigVmInjectionInfo(
  outer: UObject,
) : UObject {
  @JsName("UnitNode")
  public open var unitNode: RigVmUnitNode

  @JsName("UNode")
  public open var uNode: RigVmNode

  @JsName("bInjectedAsInput")
  public open var injectedAsInput: Boolean

  @JsName("InputPin")
  public open var inputPin: RigVmPin

  @JsName("OutputPin")
  public open var outputPin: RigVmPin

  @JsName("GetPin")
  public open fun getPin(): RigVmPin

  @JsName("GetGraph")
  public open fun getGraph(): RigVmGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmInjectionInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmInjectionInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmInjectionInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmInjectionInfo

    @JsName("C")
    public fun copy(other: UObject): RigVmInjectionInfo

    @JsName("C")
    public fun copy(other: Any): RigVmInjectionInfo
  }
}

@JsName("RigVMPin")
public open external class RigVmPin(
  outer: UObject,
) : UObject {
  @JsName("DisplayName")
  public open var displayName: String

  @JsName("Direction")
  public open var direction: String

  @JsName("bIsExpanded")
  public open var isExpanded: Boolean

  @JsName("bIsConstant")
  public open var isConstant: Boolean

  @JsName("bRequiresWatch")
  public open var requiresWatch: Boolean

  @JsName("bIsDynamicArray")
  public open var isDynamicArray: Boolean

  @JsName("CPPType")
  public open var cppType: String

  @JsName("CPPTypeObject")
  public open var cppTypeObject: UObject

  @JsName("CPPTypeObjectPath")
  public open var cppTypeObjectPath: String

  @JsName("DefaultValue")
  public open var defaultValue: String

  @JsName("CustomWidgetName")
  public open var customWidgetName: String

  @JsName("SubPins")
  public open var subPins: Array<RigVmPin>

  @JsName("Links")
  public open var links: Array<RigVmLink>

  @JsName("InjectionInfos")
  public open var injectionInfos: Array<RigVmInjectionInfo>

  @JsName("BoundVariablePath")
  public open var boundVariablePath: String

  @JsName("RequiresWatch")
  public open fun requiresWatch(checkExposedPinChain: Boolean): Boolean

  @JsName("IsUObject")
  public open fun isUObject(): Boolean

  @JsName("IsUnknownType")
  public open fun isUnknownType(): Boolean

  @JsName("IsStructMember")
  public open fun isStructMember(): Boolean

  @JsName("IsStruct")
  public open fun isStruct(): Boolean

  @JsName("IsStringType")
  public open fun isStringType(): Boolean

  @JsName("IsRootPin")
  public open fun isRootPin(): Boolean

  @JsName("IsReferenceCountedContainer")
  public open fun isReferenceCountedContainer(): Boolean

  @JsName("IsLinkedTo")
  public open fun isLinkedTo(inPin: RigVmPin): Boolean

  @JsName("IsExpanded")
  public open fun isExpanded(): Boolean

  @JsName("IsExecuteContext")
  public open fun isExecuteContext(): Boolean

  @JsName("IsDynamicArray")
  public open fun isDynamicArray(): Boolean

  @JsName("IsDefinedAsConstant")
  public open fun isDefinedAsConstant(): Boolean

  @JsName("IsArrayElement")
  public open fun isArrayElement(): Boolean

  @JsName("IsArray")
  public open fun isArray(): Boolean

  @JsName("GetToolTipText")
  public open fun getToolTipText(): String

  @JsName("GetTargetLinks")
  public open fun getTargetLinks(recursive: Boolean): Array<RigVmLink>

  @JsName("GetSubPins")
  public open fun getSubPins(): Array<RigVmPin>

  @JsName("GetSourceLinks")
  public open fun getSourceLinks(recursive: Boolean): Array<RigVmLink>

  @JsName("GetSegmentPath")
  public open fun getSegmentPath(includeRootPin: Boolean): String

  @JsName("GetScriptStruct")
  public open fun getScriptStruct(): ScriptStruct

  @JsName("GetRootPin")
  public open fun getRootPin(): RigVmPin

  @JsName("GetPinPath")
  public open fun getPinPath(useNodePath: Boolean): String

  @JsName("GetPinIndex")
  public open fun getPinIndex(): Number

  @JsName("GetPinForLink")
  public open fun getPinForLink(): RigVmPin

  @JsName("GetParentPin")
  public open fun getParentPin(): RigVmPin

  @JsName("GetOriginalPinFromInjectedNode")
  public open fun getOriginalPinFromInjectedNode(): RigVmPin

  @JsName("GetNode")
  public open fun getNode(): RigVmNode

  @JsName("GetLinks")
  public open fun getLinks(): Array<RigVmLink>

  @JsName("GetLinkedTargetPins")
  public open fun getLinkedTargetPins(recursive: Boolean): Array<RigVmPin>

  @JsName("GetLinkedSourcePins")
  public open fun getLinkedSourcePins(recursive: Boolean): Array<RigVmPin>

  @JsName("GetGraph")
  public open fun getGraph(): RigVmGraph

  @JsName("GetEnum")
  public open fun getEnum(): Enum

  public override fun getDisplayName(): String

  @JsName("GetDirection")
  public open fun getDirection(): String

  @JsName("GetDefaultValue")
  public open fun getDefaultValue(): String

  @JsName("GetCustomWidgetName")
  public open fun getCustomWidgetName(): String

  @JsName("GetCPPTypeObject")
  public open fun getCppTypeObject(): UObject

  @JsName("GetCPPType")
  public open fun getCppType(): String

  @JsName("GetArraySize")
  public open fun getArraySize(): Number

  @JsName("GetArrayElementCppType")
  public open fun getArrayElementCppType(): String

  @JsName("FindSubPin")
  public open fun findSubPin(inPinPath: String): RigVmPin

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmPin

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmPin

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmPin

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmPin

    @JsName("C")
    public fun copy(other: UObject): RigVmPin

    @JsName("C")
    public fun copy(other: Any): RigVmPin
  }
}

@JsName("RigVMNode")
public open external class RigVmNode(
  outer: UObject,
) : UObject {
  @JsName("NodeTitle")
  public open var nodeTitle: String

  public open var position: Vector2d

  @JsName("Size")
  public open var size: Vector2d

  @JsName("NodeColor")
  public open var nodeColor: LinearColor

  @JsName("PreviousName")
  public open var previousName: String

  @JsName("bHasBreakpoint")
  public open var hasBreakpoint: Boolean

  @JsName("bHaltedAtThisNode")
  public open var haltedAtThisNode: Boolean

  @JsName("Pins")
  public open var pins: Array<RigVmPin>

  @JsName("OrphanedPins")
  public open var orphanedPins: Array<RigVmPin>

  @JsName("SetHasBreakpoint")
  public open fun setHasBreakpoint(value: Boolean): Unit

  @JsName("SetExecutionIsHaltedAtThisNode")
  public open fun setExecutionIsHaltedAtThisNode(value: Boolean): Unit

  @JsName("IsVisibleInUI")
  public open fun isVisibleInUi(): Boolean

  @JsName("IsSelected")
  public open fun isSelected(): Boolean

  @JsName("IsPure")
  public open fun isPure(): Boolean

  @JsName("IsMutable")
  public open fun isMutable(): Boolean

  @JsName("IsLinkedTo")
  public open fun isLinkedTo(inNode: RigVmNode): Boolean

  @JsName("IsInjected")
  public open fun isInjected(): Boolean

  @JsName("IsEvent")
  public open fun isEvent(): Boolean

  @JsName("IsDefinedAsVarying")
  public open fun isDefinedAsVarying(): Boolean

  @JsName("IsDefinedAsConstant")
  public open fun isDefinedAsConstant(): Boolean

  @JsName("HasPinOfDirection")
  public open fun hasPinOfDirection(inDirection: String): Boolean

  @JsName("HasOutputPin")
  public open fun hasOutputPin(includeIo: Boolean): Boolean

  @JsName("HasOrphanedPins")
  public open fun hasOrphanedPins(): Boolean

  @JsName("HasIOPin")
  public open fun hasIoPin(): Boolean

  @JsName("HasInputPin")
  public open fun hasInputPin(includeIo: Boolean): Boolean

  @JsName("HasBreakpoint")
  public open fun hasBreakpoint(): Boolean

  @JsName("GetToolTipText")
  public open fun getToolTipText(): String

  @JsName("GetSize")
  public open fun getSize(): Vector2d

  @JsName("GetRootGraph")
  public open fun getRootGraph(): RigVmGraph

  @JsName("GetPreviousFName")
  public open fun getPreviousFName(): String

  @JsName("GetPosition")
  public open fun getPosition(): Vector2d

  @JsName("GetPins")
  public open fun getPins(): Array<RigVmPin>

  @JsName("GetOrphanedPins")
  public open fun getOrphanedPins(): Array<RigVmPin>

  @JsName("GetNodeTitle")
  public open fun getNodeTitle(): String

  @JsName("GetNodePath")
  public open fun getNodePath(recursive: Boolean): String

  @JsName("GetNodeIndex")
  public open fun getNodeIndex(): Number

  @JsName("GetNodeColor")
  public open fun getNodeColor(): LinearColor

  @JsName("GetLinks")
  public open fun getLinks(): Array<RigVmLink>

  @JsName("GetLinkedTargetNodes")
  public open fun getLinkedTargetNodes(): Array<RigVmNode>

  @JsName("GetLinkedSourceNodes")
  public open fun getLinkedSourceNodes(): Array<RigVmNode>

  @JsName("GetInjectionInfo")
  public open fun getInjectionInfo(): RigVmInjectionInfo

  @JsName("GetGraph")
  public open fun getGraph(): RigVmGraph

  @JsName("GetEventName")
  public open fun getEventName(): String

  @JsName("GetAllPinsRecursively")
  public open fun getAllPinsRecursively(): Array<RigVmPin>

  @JsName("FindPin")
  public open fun findPin(inPinPath: String): RigVmPin

  @JsName("ExecutionIsHaltedAtThisNode")
  public open fun executionIsHaltedAtThisNode(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmNode

    @JsName("C")
    public fun copy(other: UObject): RigVmNode

    @JsName("C")
    public fun copy(other: Any): RigVmNode
  }
}

@JsName("RigVMGraphVariableDescription")
public open external class RigVmGraphVariableDescription {
  @JsName("Name")
  public open var name: String

  @JsName("CPPType")
  public open var cppType: String

  @JsName("CPPTypeObject")
  public open var cppTypeObject: UObject

  @JsName("DefaultValue")
  public open var defaultValue: String

  public open fun clone(): RigVmGraphVariableDescription

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmGraphVariableDescription

    @JsName("C")
    public fun copy(other: Any): RigVmGraphVariableDescription
  }
}

@JsName("RigVMLibraryNode")
public open external class RigVmLibraryNode(
  outer: UObject,
) : RigVmNode {
  @JsName("GetLibrary")
  public open fun getLibrary(): RigVmFunctionLibrary

  @JsName("GetContainedGraph")
  public open fun getContainedGraph(): RigVmGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmLibraryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmLibraryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmLibraryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmLibraryNode

    @JsName("C")
    public fun copy(other: UObject): RigVmLibraryNode

    @JsName("C")
    public fun copy(other: Any): RigVmLibraryNode
  }
}

@JsName("RigVMFunctionReferenceNode")
public open external class RigVmFunctionReferenceNode(
  outer: UObject,
) : RigVmLibraryNode {
  @JsName("ReferencedNodePtr")
  public open var referencedNodePtr: RigVmLibraryNode

  @JsName("VariableMap")
  public open var variableMap: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmFunctionReferenceNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmFunctionReferenceNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmFunctionReferenceNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmFunctionReferenceNode

    @JsName("C")
    public fun copy(other: UObject): RigVmFunctionReferenceNode

    @JsName("C")
    public fun copy(other: Any): RigVmFunctionReferenceNode
  }
}

@JsName("RigVMBuildData")
public open external class RigVmBuildData(
  outer: UObject,
) : UObject {
  @JsName("FunctionReferences")
  public open var functionReferences: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmBuildData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmBuildData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmBuildData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmBuildData

    @JsName("C")
    public fun copy(other: UObject): RigVmBuildData

    @JsName("C")
    public fun copy(other: Any): RigVmBuildData
  }
}

@JsName("RigVMFunctionLibrary")
public open external class RigVmFunctionLibrary(
  outer: UObject,
) : RigVmGraph {
  @JsName("FunctionReferences")
  public open var functionReferences: Any

  @JsName("LocalizedFunctions")
  public open var localizedFunctions: Any

  @JsName("GetReferencesForFunction")
  public open fun getReferencesForFunction(inFunctionName: String):
      Array<RigVmFunctionReferenceNode>

  @JsName("GetReferencePathsForFunction")
  public open fun getReferencePathsForFunction(inFunctionName: String): Array<String>

  @JsName("GetFunctions")
  public open fun getFunctions(): Array<RigVmLibraryNode>

  @JsName("GetBuildData")
  public open fun getBuildData(): RigVmBuildData

  @JsName("FindFunctionForNode")
  public open fun findFunctionForNode(inNode: RigVmNode): RigVmLibraryNode

  @JsName("FindFunction")
  public open fun findFunction(inFunctionName: String): RigVmLibraryNode

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmFunctionLibrary

    @JsName("C")
    public fun copy(other: UObject): RigVmFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): RigVmFunctionLibrary
  }
}

@JsName("RigVMFunctionReturnNode")
public open external class RigVmFunctionReturnNode(
  outer: UObject,
) : RigVmNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmFunctionReturnNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmFunctionReturnNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmFunctionReturnNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmFunctionReturnNode

    @JsName("C")
    public fun copy(other: UObject): RigVmFunctionReturnNode

    @JsName("C")
    public fun copy(other: Any): RigVmFunctionReturnNode
  }
}

@JsName("RigVMGraphParameterDescription")
public open external class RigVmGraphParameterDescription {
  @JsName("Name")
  public open var name: String

  @JsName("bIsInput")
  public open var isInput: Boolean

  @JsName("CPPType")
  public open var cppType: String

  @JsName("CPPTypeObject")
  public open var cppTypeObject: UObject

  @JsName("DefaultValue")
  public open var defaultValue: String

  public open fun clone(): RigVmGraphParameterDescription

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmGraphParameterDescription

    @JsName("C")
    public fun copy(other: Any): RigVmGraphParameterDescription
  }
}

@JsName("RigVMFunctionEntryNode")
public open external class RigVmFunctionEntryNode(
  outer: UObject,
) : RigVmNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmFunctionEntryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmFunctionEntryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmFunctionEntryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmFunctionEntryNode

    @JsName("C")
    public fun copy(other: UObject): RigVmFunctionEntryNode

    @JsName("C")
    public fun copy(other: Any): RigVmFunctionEntryNode
  }
}

@JsName("RigVMGraph")
public open external class RigVmGraph(
  outer: UObject,
) : UObject {
  @JsName("Nodes")
  public open var nodes: Array<RigVmNode>

  @JsName("Links")
  public open var links: Array<RigVmLink>

  @JsName("SelectedNodes")
  public open var selectedNodes: Array<String>

  @JsName("DefaultFunctionLibraryPtr")
  public open var defaultFunctionLibraryPtr: Any

  @JsName("LocalVariables")
  public open var localVariables: Array<RigVmGraphVariableDescription>

  @JsName("SetDefaultFunctionLibrary")
  public open fun setDefaultFunctionLibrary(inFunctionLibrary: RigVmFunctionLibrary): Unit

  @JsName("IsTopLevelGraph")
  public open fun isTopLevelGraph(): Boolean

  @JsName("IsRootGraph")
  public open fun isRootGraph(): Boolean

  @JsName("IsNodeSelected")
  public open fun isNodeSelected(inNodeName: String): Boolean

  @JsName("GetVariableDescriptions")
  public open fun getVariableDescriptions(): Array<RigVmGraphVariableDescription>

  @JsName("GetSelectNodes")
  public open fun getSelectNodes(): Array<String>

  @JsName("GetRootGraph")
  public open fun getRootGraph(): RigVmGraph

  @JsName("GetReturnNode")
  public open fun getReturnNode(): RigVmFunctionReturnNode

  @JsName("GetParentGraph")
  public open fun getParentGraph(): RigVmGraph

  @JsName("GetParameterDescriptions")
  public open fun getParameterDescriptions(): Array<RigVmGraphParameterDescription>

  @JsName("GetOutputArguments")
  public open fun getOutputArguments(): Array<RigVmGraphVariableDescription>

  @JsName("GetNodes")
  public open fun getNodes(): Array<RigVmNode>

  @JsName("GetNodePath")
  public open fun getNodePath(): String

  @JsName("GetLocalVariables")
  public open fun getLocalVariables(includeInputArguments: Boolean):
      Array<RigVmGraphVariableDescription>

  @JsName("GetLinks")
  public open fun getLinks(): Array<RigVmLink>

  @JsName("GetInputArguments")
  public open fun getInputArguments(): Array<RigVmGraphVariableDescription>

  @JsName("GetGraphName")
  public open fun getGraphName(): String

  @JsName("GetEntryNode")
  public open fun getEntryNode(): RigVmFunctionEntryNode

  @JsName("GetDefaultFunctionLibrary")
  public open fun getDefaultFunctionLibrary(): RigVmFunctionLibrary

  @JsName("GetContainedGraphs")
  public open fun getContainedGraphs(recursive: Boolean): Array<RigVmGraph>

  @JsName("FindPin")
  public open fun findPin(inPinPath: String): RigVmPin

  @JsName("FindNodeByName")
  public open fun findNodeByName(inNodeName: String): RigVmNode

  @JsName("FindNode")
  public open fun findNode(inNodePath: String): RigVmNode

  @JsName("FindLink")
  public open fun findLink(inLinkPinPathRepresentation: String): RigVmLink

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmGraph

    @JsName("C")
    public fun copy(other: UObject): RigVmGraph

    @JsName("C")
    public fun copy(other: Any): RigVmGraph
  }
}

@JsName("RigVMActionKey")
public open external class RigVmActionKey {
  @JsName("ScriptStructPath")
  public open var scriptStructPath: String

  @JsName("ExportedText")
  public open var exportedText: String

  public open fun clone(): RigVmActionKey

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmActionKey

    @JsName("C")
    public fun copy(other: Any): RigVmActionKey
  }
}

@JsName("RigVMActionStack")
public open external class RigVmActionStack(
  outer: UObject,
) : UObject {
  @JsName("ActionIndex")
  public open var actionIndex: Number

  @JsName("UndoActions")
  public open var undoActions: Array<RigVmActionKey>

  @JsName("RedoActions")
  public open var redoActions: Array<RigVmActionKey>

  @JsName("Undo")
  public open fun undo(inController: RigVmController): Boolean

  @JsName("Redo")
  public open fun redo(inController: RigVmController): Boolean

  @JsName("OpenUndoBracket")
  public open fun openUndoBracket(inTitle: String): Boolean

  @JsName("CloseUndoBracket")
  public open fun closeUndoBracket(): Boolean

  @JsName("CancelUndoBracket")
  public open fun cancelUndoBracket(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmActionStack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmActionStack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmActionStack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmActionStack

    @JsName("C")
    public fun copy(other: UObject): RigVmActionStack

    @JsName("C")
    public fun copy(other: Any): RigVmActionStack
  }
}

@JsName("RigVMCollapseNode")
public open external class RigVmCollapseNode(
  outer: UObject,
) : RigVmLibraryNode {
  @JsName("ContainedGraph")
  public open var containedGraph: RigVmGraph

  @JsName("NodeCategory")
  public open var nodeCategory: String

  @JsName("NodeKeywords")
  public open var nodeKeywords: String

  @JsName("NodeDescription")
  public open var nodeDescription: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmCollapseNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmCollapseNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmCollapseNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmCollapseNode

    @JsName("C")
    public fun copy(other: UObject): RigVmCollapseNode

    @JsName("C")
    public fun copy(other: Any): RigVmCollapseNode
  }
}

@JsName("RigVMVariableNode")
public open external class RigVmVariableNode(
  outer: UObject,
) : RigVmNode {
  @JsName("IsLocalVariable")
  public open fun isLocalVariable(): Boolean

  @JsName("IsInputArgument")
  public open fun isInputArgument(): Boolean

  @JsName("IsGetter")
  public open fun isGetter(): Boolean

  @JsName("GetVariableName")
  public open fun getVariableName(): String

  @JsName("GetVariableDescription")
  public open fun getVariableDescription(): RigVmGraphVariableDescription

  @JsName("GetDefaultValue")
  public open fun getDefaultValue(): String

  @JsName("GetCPPTypeObject")
  public open fun getCppTypeObject(): UObject

  @JsName("GetCPPType")
  public open fun getCppType(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmVariableNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmVariableNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmVariableNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmVariableNode

    @JsName("C")
    public fun copy(other: UObject): RigVmVariableNode

    @JsName("C")
    public fun copy(other: Any): RigVmVariableNode
  }
}

@JsName("RigVMSelectNode")
public open external class RigVmSelectNode(
  outer: UObject,
) : RigVmNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmSelectNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmSelectNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmSelectNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmSelectNode

    @JsName("C")
    public fun copy(other: UObject): RigVmSelectNode

    @JsName("C")
    public fun copy(other: Any): RigVmSelectNode
  }
}

@JsName("RigVMRerouteNode")
public open external class RigVmRerouteNode(
  outer: UObject,
) : RigVmNode {
  @JsName("bShowAsFullNode")
  public open var showAsFullNode: Boolean

  @JsName("GetShowsAsFullNode")
  public open fun getShowsAsFullNode(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmRerouteNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmRerouteNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmRerouteNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmRerouteNode

    @JsName("C")
    public fun copy(other: UObject): RigVmRerouteNode

    @JsName("C")
    public fun copy(other: Any): RigVmRerouteNode
  }
}

@JsName("RigVMPrototypeNode")
public open external class RigVmPrototypeNode(
  outer: UObject,
) : RigVmNode {
  @JsName("PrototypeNotation")
  public open var prototypeNotation: String

  @JsName("SupportedTypesCache")
  public open var supportedTypesCache: Any

  @JsName("GetNotation")
  public open fun getNotation(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmPrototypeNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmPrototypeNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmPrototypeNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmPrototypeNode

    @JsName("C")
    public fun copy(other: UObject): RigVmPrototypeNode

    @JsName("C")
    public fun copy(other: Any): RigVmPrototypeNode
  }
}

@JsName("RigVMParameterNode")
public open external class RigVmParameterNode(
  outer: UObject,
) : RigVmNode {
  @JsName("IsInput")
  public open fun isInput(): Boolean

  @JsName("GetParameterName")
  public open fun getParameterName(): String

  @JsName("GetParameterDescription")
  public open fun getParameterDescription(): RigVmGraphParameterDescription

  @JsName("GetDefaultValue")
  public open fun getDefaultValue(): String

  @JsName("GetCPPTypeObject")
  public open fun getCppTypeObject(): UObject

  @JsName("GetCPPType")
  public open fun getCppType(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmParameterNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmParameterNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmParameterNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmParameterNode

    @JsName("C")
    public fun copy(other: UObject): RigVmParameterNode

    @JsName("C")
    public fun copy(other: Any): RigVmParameterNode
  }
}

@JsName("RigVMIfNode")
public open external class RigVmIfNode(
  outer: UObject,
) : RigVmNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmIfNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmIfNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmIfNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmIfNode

    @JsName("C")
    public fun copy(other: UObject): RigVmIfNode

    @JsName("C")
    public fun copy(other: Any): RigVmIfNode
  }
}

@JsName("RigVMEnumNode")
public open external class RigVmEnumNode(
  outer: UObject,
) : RigVmNode {
  @JsName("GetEnum")
  public open fun getEnum(): Enum

  @JsName("GetCPPTypeObject")
  public open fun getCppTypeObject(): UObject

  @JsName("GetCPPType")
  public open fun getCppType(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmEnumNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmEnumNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmEnumNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmEnumNode

    @JsName("C")
    public fun copy(other: UObject): RigVmEnumNode

    @JsName("C")
    public fun copy(other: Any): RigVmEnumNode
  }
}

@JsName("RigVMCommentNode")
public open external class RigVmCommentNode(
  outer: UObject,
) : RigVmNode {
  @JsName("CommentText")
  public open var commentText: String

  @JsName("FontSize")
  public open var fontSize: Number

  @JsName("bBubbleVisible")
  public open var bubbleVisible: Boolean

  @JsName("bColorBubble")
  public open var colorBubble: Boolean

  @JsName("GetCommentText")
  public open fun getCommentText(): String

  @JsName("GetCommentFontSize")
  public open fun getCommentFontSize(): Number

  @JsName("GetCommentColorBubble")
  public open fun getCommentColorBubble(): Boolean

  @JsName("GetCommentBubbleVisible")
  public open fun getCommentBubbleVisible(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmCommentNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmCommentNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmCommentNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmCommentNode

    @JsName("C")
    public fun copy(other: UObject): RigVmCommentNode

    @JsName("C")
    public fun copy(other: Any): RigVmCommentNode
  }
}

@JsName("RigVMBranchNode")
public open external class RigVmBranchNode(
  outer: UObject,
) : RigVmNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmBranchNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmBranchNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmBranchNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmBranchNode

    @JsName("C")
    public fun copy(other: UObject): RigVmBranchNode

    @JsName("C")
    public fun copy(other: Any): RigVmBranchNode
  }
}

@JsName("RigVMArrayNode")
public open external class RigVmArrayNode(
  outer: UObject,
) : RigVmNode {
  @JsName("OpCode")
  public open var opCode: String

  @JsName("GetOpCode")
  public open fun getOpCode(): String

  @JsName("GetCPPTypeObject")
  public open fun getCppTypeObject(): UObject

  @JsName("GetCPPType")
  public open fun getCppType(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmArrayNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmArrayNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmArrayNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmArrayNode

    @JsName("C")
    public fun copy(other: UObject): RigVmArrayNode

    @JsName("C")
    public fun copy(other: Any): RigVmArrayNode
  }
}

@JsName("T$567")
public external interface Object567 {
  @JsName("bSetupUndoRedo")
  public var setupUndoRedo: Boolean

  @JsName("$")
  public var value: Boolean
}

@JsName("RigVMController")
public open external class RigVmController(
  outer: UObject,
) : UObject {
  @JsName("ModifiedEventDynamic")
  public open var modifiedEventDynamic: UnrealEngineMulticastDelegate<(
    NotifType: String,
    Graph: RigVmGraph,
    Subject: UObject,
  ) -> Unit>

  @JsName("Graphs")
  public open var graphs: Array<RigVmGraph>

  @JsName("ExecuteContextStruct")
  public open var executeContextStruct: Struct

  @JsName("ActionStack")
  public open var actionStack: RigVmActionStack

  @JsName("Undo")
  public open fun undo(): Boolean

  @JsName("UnbindPinFromVariable")
  public open fun unbindPinFromVariable(
    inPinPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetRerouteCompactnessByName")
  public open fun setRerouteCompactnessByName(
    inNodeName: String,
    showAsFullNode: Boolean,
    setupUndoRedo: Boolean,
  ): Boolean

  @JsName("SetRerouteCompactness")
  public open fun setRerouteCompactness(
    inNode: RigVmNode,
    showAsFullNode: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetRemappedVariable")
  public open fun setRemappedVariable(
    inFunctionRefNode: RigVmFunctionReferenceNode,
    inInnerVariableName: String,
    inOuterVariableName: String,
    setupUndoRedo: Boolean,
  ): Boolean

  @JsName("SetPinIsWatched")
  public open fun setPinIsWatched(
    inPinPath: String,
    isWatched: Boolean,
    setupUndoRedo: Boolean,
  ): Boolean

  @JsName("SetPinExpansion")
  public open fun setPinExpansion(
    inPinPath: String,
    isExpanded: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetPinDefaultValue")
  public open fun setPinDefaultValue(
    inPinPath: String,
    inDefaultValue: String,
    resizeArrays: Boolean,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodeSizeByName")
  public open fun setNodeSizeByName(
    inNodeName: String,
    inSize: Vector2d,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodeSize")
  public open fun setNodeSize(
    inNode: RigVmNode,
    inSize: Vector2d,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodeSelection")
  public open fun setNodeSelection(
    inNodeNames: Array<String>,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodePositionByName")
  public open fun setNodePositionByName(
    inNodeName: String,
    inPosition: Vector2d,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodePosition")
  public open fun setNodePosition(
    inNode: RigVmNode,
    inPosition: Vector2d,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodeKeywordsByName")
  public open fun setNodeKeywordsByName(
    inNodeName: String,
    inKeywords: String,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
  ): Boolean

  @JsName("SetNodeKeywords")
  public open fun setNodeKeywords(
    inNode: RigVmCollapseNode,
    inKeywords: String,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodeDescriptionByName")
  public open fun setNodeDescriptionByName(
    inNodeName: String,
    inDescription: String,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
  ): Boolean

  @JsName("SetNodeDescription")
  public open fun setNodeDescription(
    inNode: RigVmCollapseNode,
    inDescription: String,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodeColorByName")
  public open fun setNodeColorByName(
    inNodeName: String,
    inColor: LinearColor,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
  ): Boolean

  @JsName("SetNodeColor")
  public open fun setNodeColor(
    inNode: RigVmNode,
    inColor: LinearColor,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetNodeCategoryByName")
  public open fun setNodeCategoryByName(
    inNodeName: String,
    inCategory: String,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
  ): Boolean

  @JsName("SetNodeCategory")
  public open fun setNodeCategory(
    inNode: RigVmCollapseNode,
    inCategory: String,
    setupUndoRedo: Boolean,
    mergeUndoAction: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetLocalVariableTypeFromObjectPath")
  public open fun setLocalVariableTypeFromObjectPath(
    inVariableName: String,
    inCppType: String,
    inCppTypeObjectPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetLocalVariableType")
  public open fun setLocalVariableType(
    inVariableName: String,
    inCppType: String,
    inCppTypeObject: UObject,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetLocalVariableDefaultValue")
  public open fun setLocalVariableDefaultValue(
    inVariableName: String,
    inDefaultValue: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
    notify: Boolean,
  ): Boolean

  @JsName("SetIsRunningUnitTest")
  public open fun setIsRunningUnitTest(isRunning: Boolean): Unit

  @JsName("SetGraph")
  public open fun setGraph(inGraph: RigVmGraph): Unit

  @JsName("SetExposedPinIndex")
  public open fun setExposedPinIndex(
    inPinName: String,
    inNewIndex: Number,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetCommentTextByName")
  public open fun setCommentTextByName(
    inNodeName: String,
    inCommentText: String,
    inCommentFontSize: Number,
    inCommentBubbleVisible: Boolean,
    inCommentColorBubble: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetCommentText")
  public open fun setCommentText(
    inNode: RigVmNode,
    inCommentText: String,
    inCommentFontSize: Number,
    inCommentBubbleVisible: Boolean,
    inCommentColorBubble: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SetArrayPinSize")
  public open fun setArrayPinSize(
    inArrayPinPath: String,
    inSize: Number,
    inDefaultValue: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("SelectNodeByName")
  public open fun selectNodeByName(
    inNodeName: String,
    select: Boolean,
    setupUndoRedo: Boolean,
  ): Boolean

  @JsName("SelectNode")
  public open fun selectNode(
    inNode: RigVmNode,
    select: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("ResetPinDefaultValue")
  public open fun resetPinDefaultValue(
    inPinPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("ReplaceParameterNodeWithVariable")
  public open fun replaceParameterNodeWithVariable(
    inNodeName: String,
    inVariableName: String,
    inCppType: String,
    inCppTypeObject: UObject,
    setupUndoRedo: Boolean,
  ): RigVmVariableNode

  @JsName("RenameVariable")
  public open fun renameVariable(
    inOldName: String,
    inNewName: String,
    setupUndoRedo: Boolean,
  ): Boolean

  @JsName("RenameParameter")
  public open fun renameParameter(
    inOldName: String,
    inNewName: String,
    setupUndoRedo: Boolean,
  ): Boolean

  @JsName("RenameNode")
  public open fun renameNode(
    inNode: RigVmNode,
    inNewName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RenameLocalVariable")
  public open fun renameLocalVariable(
    inVariableName: String,
    inNewVariableName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RenameFunction")
  public open fun renameFunction(
    inOldFunctionName: String,
    inNewFunctionName: String,
    setupUndoRedo: Boolean,
  ): Boolean

  @JsName("RenameExposedPin")
  public open fun renameExposedPin(
    inOldPinName: String,
    inNewPinName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RemoveNodeByName")
  public open fun removeNodeByName(
    inNodeName: String,
    setupUndoRedo: Boolean,
    recursive: Boolean,
    printPythonCommand: Boolean,
    relinkPins: Boolean,
  ): Boolean

  @JsName("RemoveNode")
  public open fun removeNode(
    inNode: RigVmNode,
    setupUndoRedo: Boolean,
    recursive: Boolean,
    printPythonCommand: Boolean,
    relinkPins: Boolean,
  ): Boolean

  @JsName("RemoveLocalVariable")
  public open fun removeLocalVariable(
    inVariableName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RemoveInjectedNode")
  public open fun removeInjectedNode(
    inPinPath: String,
    asInput: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RemoveFunctionFromLibrary")
  public open fun removeFunctionFromLibrary(inFunctionName: String, setupUndoRedo: Boolean): Boolean

  @JsName("RemoveExposedPin")
  public open fun removeExposedPin(
    inPinName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RemoveArrayPin")
  public open fun removeArrayPin(
    inArrayElementPinPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("RefreshVariableNode")
  public open fun refreshVariableNode(
    inNodeName: String,
    inVariableName: String,
    inCppType: String,
    inCppTypeObject: UObject,
    setupUndoRedo: Boolean,
    setupOrphanPins: Boolean,
  ): Unit

  @JsName("Redo")
  public open fun redo(): Boolean

  @JsName("PushGraph")
  public open fun pushGraph(inGraph: RigVmGraph, setupUndoRedo: Boolean): Unit

  @JsName("PromotePinToVariable")
  public open fun promotePinToVariable(
    inPinPath: String,
    createVariableNode: Boolean,
    inNodePosition: Vector2d,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("PromoteFunctionReferenceNodeToCollapseNode")
  public open fun promoteFunctionReferenceNodeToCollapseNode(
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
    removeFunctionDefinition: Boolean,
  ): String

  @JsName("PromoteCollapseNodeToFunctionReferenceNode")
  public open fun promoteCollapseNodeToFunctionReferenceNode(
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
    inExistingFunctionDefinitionPath: String,
  ): String

  @JsName("PopGraph")
  public open fun popGraph(setupUndoRedo: Boolean): RigVmGraph

  @JsName("OpenUndoBracket")
  public open fun openUndoBracket(inTitle: String): Boolean

  @JsName("OnExternalVariableTypeChangedFromObjectPath")
  public open fun onExternalVariableTypeChangedFromObjectPath(
    inVarName: String,
    inCppType: String,
    inCppTypeObjectPath: String,
    setupUndoRedo: Boolean,
  ): Unit

  @JsName("OnExternalVariableTypeChanged")
  public open fun onExternalVariableTypeChanged(
    inVarName: String,
    inCppType: String,
    inCppTypeObject: UObject,
    setupUndoRedo: Boolean,
  ): Unit

  @JsName("OnExternalVariableRenamed")
  public open fun onExternalVariableRenamed(
    inOldVarName: String,
    inNewVarName: String,
    setupUndoRedo: Boolean,
  ): Unit

  @JsName("OnExternalVariableRemoved")
  public open fun onExternalVariableRemoved(inVarName: String, setupUndoRedo: Boolean): Unit

  @JsName("MakeVariableNodeFromBinding")
  public open fun makeVariableNodeFromBinding(
    inPinPath: String,
    inNodePosition: Vector2d,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("MakeBindingsFromVariableNode")
  public open fun makeBindingsFromVariableNode(
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("LocalizeFunctions")
  public open fun localizeFunctions(
    inFunctionDefinitions: Array<RigVmLibraryNode>,
    localizeDependentPrivateFunctions: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Any

  @JsName("LocalizeFunction")
  public open fun localizeFunction(
    inFunctionDefinition: RigVmLibraryNode,
    localizeDependentPrivateFunctions: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmLibraryNode

  @JsName("IsReportingEnabled")
  public open fun isReportingEnabled(): Boolean

  @JsName("InsertArrayPin")
  public open fun insertArrayPin(
    inArrayPinPath: String,
    inIndex: Number,
    inDefaultValue: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): String

  @JsName("ImportNodesFromText")
  public open fun importNodesFromText(
    inText: String,
    setupUndoRedo: Boolean,
    printPythonCommands: Boolean,
  ): Array<String>

  @JsName("GetTopLevelGraph")
  public open fun getTopLevelGraph(): RigVmGraph

  @JsName("GetPinDefaultValue")
  public open fun getPinDefaultValue(inPinPath: String): String

  @JsName("GetGraph")
  public open fun getGraph(): RigVmGraph

  @JsName("GeneratePythonCommands")
  public open fun generatePythonCommands(): Array<String>

  @JsName("ExportSelectedNodesToText")
  public open fun exportSelectedNodesToText(): String

  @JsName("ExportNodesToText")
  public open fun exportNodesToText(inNodeNames: Array<String>): String

  @JsName("ExpandLibraryNode")
  public open fun expandLibraryNode(
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Array<RigVmNode>

  @JsName("EnableReporting")
  public open fun enableReporting(enabled: Boolean): Unit

  @JsName("EjectNodeFromPin")
  public open fun ejectNodeFromPin(
    inPinPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmNode

  @JsName("DuplicateArrayPin")
  public open fun duplicateArrayPin(
    inArrayElementPinPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): String

  @JsName("CollapseNodes")
  public open fun collapseNodes(
    inNodeNames: Array<String>,
    inCollapseNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmCollapseNode

  @JsName("CloseUndoBracket")
  public open fun closeUndoBracket(): Boolean

  @JsName("ClearNodeSelection")
  public open fun clearNodeSelection(setupUndoRedo: Boolean, printPythonCommand: Boolean): Boolean

  @JsName("ClearArrayPin")
  public open fun clearArrayPin(
    inArrayPinPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("ChangeExposedPinType")
  public open fun changeExposedPinType(
    inPinName: String,
    inCppType: String,
    inCppTypeObjectPath: String,
    setupUndoRedo: Boolean,
    setupOrphanPins: Boolean,
    printPythonCommand: Boolean,
  ): Object567

  @JsName("CanImportNodesFromText")
  public open fun canImportNodesFromText(inText: String): Boolean

  @JsName("CancelUndoBracket")
  public open fun cancelUndoBracket(): Boolean

  @JsName("BreakLink")
  public open fun breakLink(
    inOutputPinPath: String,
    inInputPinPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("BreakAllLinks")
  public open fun breakAllLinks(
    inPinPath: String,
    asInput: Boolean,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("BindPinToVariable")
  public open fun bindPinToVariable(
    inPinPath: String,
    inNewBoundVariablePath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("AddVariableNodeFromObjectPath")
  public open fun addVariableNodeFromObjectPath(
    inVariableName: String,
    inCppType: String,
    inCppTypeObjectPath: String,
    isGetter: Boolean,
    inDefaultValue: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmVariableNode

  @JsName("AddVariableNode")
  public open fun addVariableNode(
    inVariableName: String,
    inCppType: String,
    inCppTypeObject: UObject,
    isGetter: Boolean,
    inDefaultValue: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmVariableNode

  @JsName("AddUnitNodeFromStructPath")
  public open fun addUnitNodeFromStructPath(
    inScriptStructPath: String,
    inMethodName: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmUnitNode

  @JsName("AddUnitNode")
  public open fun addUnitNode(
    inScriptStruct: ScriptStruct,
    inMethodName: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmUnitNode

  @JsName("AddSelectNodeFromStruct")
  public open fun addSelectNodeFromStruct(
    inScriptStruct: ScriptStruct,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
  ): RigVmSelectNode

  @JsName("AddSelectNode")
  public open fun addSelectNode(
    inCppType: String,
    inCppTypeObjectPath: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmSelectNode

  @JsName("AddRerouteNodeOnPin")
  public open fun addRerouteNodeOnPin(
    inPinPath: String,
    asInput: Boolean,
    showAsFullNode: Boolean,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmRerouteNode

  @JsName("AddRerouteNodeOnLinkPath")
  public open fun addRerouteNodeOnLinkPath(
    inLinkPinPathRepresentation: String,
    showAsFullNode: Boolean,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmRerouteNode

  @JsName("AddRerouteNodeOnLink")
  public open fun addRerouteNodeOnLink(
    inLink: RigVmLink,
    showAsFullNode: Boolean,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmRerouteNode

  @JsName("AddPrototypeNode")
  public open fun addPrototypeNode(
    inNotation: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmPrototypeNode

  @JsName("AddParameterNodeFromObjectPath")
  public open fun addParameterNodeFromObjectPath(
    inParameterName: String,
    inCppType: String,
    inCppTypeObjectPath: String,
    isInput: Boolean,
    inDefaultValue: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmParameterNode

  @JsName("AddParameterNode")
  public open fun addParameterNode(
    inParameterName: String,
    inCppType: String,
    inCppTypeObject: UObject,
    isInput: Boolean,
    inDefaultValue: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmParameterNode

  @JsName("AddLocalVariableFromObjectPath")
  public open fun addLocalVariableFromObjectPath(
    inVariableName: String,
    inCppType: String,
    inCppTypeObjectPath: String,
    inDefaultValue: String,
    setupUndoRedo: Boolean,
  ): RigVmGraphVariableDescription

  @JsName("AddLocalVariable")
  public open fun addLocalVariable(
    inVariableName: String,
    inCppType: String,
    inCppTypeObject: UObject,
    inDefaultValue: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmGraphVariableDescription

  @JsName("AddLink")
  public open fun addLink(
    inOutputPinPath: String,
    inInputPinPath: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): Boolean

  @JsName("AddInjectedNodeFromStructPath")
  public open fun addInjectedNodeFromStructPath(
    inPinPath: String,
    asInput: Boolean,
    inScriptStructPath: String,
    inMethodName: String,
    inInputPinName: String,
    inOutputPinName: String,
    inNodeName: String,
    setupUndoRedo: Boolean,
  ): RigVmInjectionInfo

  @JsName("AddInjectedNode")
  public open fun addInjectedNode(
    inPinPath: String,
    asInput: Boolean,
    inScriptStruct: ScriptStruct,
    inMethodName: String,
    inInputPinName: String,
    inOutputPinName: String,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmInjectionInfo

  @JsName("AddIfNodeFromStruct")
  public open fun addIfNodeFromStruct(
    inScriptStruct: ScriptStruct,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
  ): RigVmIfNode

  @JsName("AddIfNode")
  public open fun addIfNode(
    inCppType: String,
    inCppTypeObjectPath: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmIfNode

  @JsName("AddFunctionToLibrary")
  public open fun addFunctionToLibrary(
    inFunctionName: String,
    mutable: Boolean,
    inNodePosition: Vector2d,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmLibraryNode

  @JsName("AddFunctionReferenceNode")
  public open fun addFunctionReferenceNode(
    inFunctionDefinition: RigVmLibraryNode,
    inNodePosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmFunctionReferenceNode

  @JsName("AddFreeRerouteNode")
  public open fun addFreeRerouteNode(
    showAsFullNode: Boolean,
    inCppType: String,
    inCppTypeObjectPath: String,
    isConstant: Boolean,
    inCustomWidgetName: String,
    inDefaultValue: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
  ): RigVmRerouteNode

  @JsName("AddExposedPin")
  public open fun addExposedPin(
    inPinName: String,
    inDirection: String,
    inCppType: String,
    inCppTypeObjectPath: String,
    inDefaultValue: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): String

  @JsName("AddEnumNode")
  public open fun addEnumNode(
    inCppTypeObjectPath: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmEnumNode

  @JsName("AddCommentNode")
  public open fun addCommentNode(
    inCommentText: String,
    inPosition: Vector2d,
    inSize: Vector2d,
    inColor: LinearColor,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmCommentNode

  @JsName("AddBranchNode")
  public open fun addBranchNode(
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmBranchNode

  @JsName("AddArrayPin")
  public open fun addArrayPin(
    inArrayPinPath: String,
    inDefaultValue: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): String

  @JsName("AddArrayNodeFromObjectPath")
  public open fun addArrayNodeFromObjectPath(
    inOpCode: String,
    inCppType: String,
    inCppTypeObjectPath: String,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmArrayNode

  @JsName("AddArrayNode")
  public open fun addArrayNode(
    inOpCode: String,
    inCppType: String,
    inCppTypeObject: UObject,
    inPosition: Vector2d,
    inNodeName: String,
    setupUndoRedo: Boolean,
    printPythonCommand: Boolean,
  ): RigVmArrayNode

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RigVmController

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RigVmController

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RigVmController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RigVmController

    @JsName("C")
    public fun copy(other: UObject): RigVmController

    @JsName("C")
    public fun copy(other: Any): RigVmController
  }
}

public open external class ControlRigGraph(
  outer: UObject,
) : EdGraph {
  @JsName("ModelNodePath")
  public open var modelNodePath: String

  @JsName("bIsFunctionDefinition")
  public open var isFunctionDefinition: Boolean

  @JsName("TemplateController")
  public open var templateController: RigVmController

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigGraph

    @JsName("C")
    public fun copy(other: UObject): ControlRigGraph

    @JsName("C")
    public fun copy(other: Any): ControlRigGraph
  }
}

public open external class RigGraphDisplaySettings {
  @JsName("bShowNodeRunCounts")
  public open var showNodeRunCounts: Boolean

  @JsName("NodeRunLowerBound")
  public open var nodeRunLowerBound: Number

  @JsName("NodeRunLimit")
  public open var nodeRunLimit: Number

  @JsName("MinMicroSeconds")
  public open var minMicroSeconds: Any

  @JsName("MaxMicroSeconds")
  public open var maxMicroSeconds: Any

  @JsName("TotalMicroSeconds")
  public open var totalMicroSeconds: Any

  @JsName("bAutoDetermineRange")
  public open var autoDetermineRange: Boolean

  @JsName("LastMinMicroSeconds")
  public open var lastMinMicroSeconds: Any

  @JsName("LastMaxMicroSeconds")
  public open var lastMaxMicroSeconds: Any

  @JsName("MinDurationColor")
  public open var minDurationColor: LinearColor

  @JsName("MaxDurationColor")
  public open var maxDurationColor: LinearColor

  public open fun clone(): RigGraphDisplaySettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigGraphDisplaySettings

    @JsName("C")
    public fun copy(other: Any): RigGraphDisplaySettings
  }
}

@JsName("RigVMParserASTSettings")
public open external class RigVmParserAstSettings {
  @JsName("bFoldAssignments")
  public open var foldAssignments: Boolean

  @JsName("bFoldLiterals")
  public open var foldLiterals: Boolean

  @JsName("bFoldConstantBranches")
  public open var foldConstantBranches: Boolean

  @JsName("LinksToSkip")
  public open var linksToSkip: Array<RigVmLink>

  public open fun clone(): RigVmParserAstSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmParserAstSettings

    @JsName("C")
    public fun copy(other: Any): RigVmParserAstSettings
  }
}

@JsName("RigVMCompileSettings")
public open external class RigVmCompileSettings {
  @JsName("SurpressInfoMessages")
  public open var surpressInfoMessages: Boolean

  @JsName("SurpressWarnings")
  public open var surpressWarnings: Boolean

  @JsName("SurpressErrors")
  public open var surpressErrors: Boolean

  @JsName("EnablePinWatches")
  public open var enablePinWatches: Boolean

  @JsName("IsPreprocessorPhase")
  public open var isPreprocessorPhase: Boolean

  @JsName("ASTSettings")
  public open var astSettings: RigVmParserAstSettings

  @JsName("SetupNodeInstructionIndex")
  public open var setupNodeInstructionIndex: Boolean

  public open fun clone(): RigVmCompileSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmCompileSettings

    @JsName("C")
    public fun copy(other: Any): RigVmCompileSettings
  }
}

public open external class ControlRigPythonSettings {
  public open fun clone(): ControlRigPythonSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigPythonSettings

    @JsName("C")
    public fun copy(other: Any): ControlRigPythonSettings
  }
}

public open external class ControlRigPublicFunctionArg {
  @JsName("Name")
  public open var name: String

  @JsName("CPPType")
  public open var cppType: String

  @JsName("CPPTypeObjectPath")
  public open var cppTypeObjectPath: String

  @JsName("bIsArray")
  public open var isArray: Boolean

  @JsName("Direction")
  public open var direction: String

  public open fun clone(): ControlRigPublicFunctionArg

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigPublicFunctionArg

    @JsName("C")
    public fun copy(other: Any): ControlRigPublicFunctionArg
  }
}

public open external class ControlRigPublicFunctionData {
  @JsName("Name")
  public open var name: String

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("Category")
  public open var category: String

  @JsName("Keywords")
  public open var keywords: String

  @JsName("ReturnValue")
  public open var returnValue: ControlRigPublicFunctionArg

  @JsName("Arguments")
  public open var arguments: Array<ControlRigPublicFunctionArg>

  public open fun clone(): ControlRigPublicFunctionData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ControlRigPublicFunctionData

    @JsName("C")
    public fun copy(other: Any): ControlRigPublicFunctionData
  }
}

@JsName("RigVMReferenceNodeData")
public open external class RigVmReferenceNodeData {
  @JsName("ReferenceNodePath")
  public open var referenceNodePath: String

  @JsName("ReferencedFunctionPath")
  public open var referencedFunctionPath: String

  public open fun clone(): RigVmReferenceNodeData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigVmReferenceNodeData

    @JsName("C")
    public fun copy(other: Any): RigVmReferenceNodeData
  }
}

public open external class RigElement {
  @JsName("Name")
  public open var name: String

  public open var index: Number

  public open fun clone(): RigElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigElement

    @JsName("C")
    public fun copy(other: Any): RigElement
  }
}

public open external class RigBone : RigElement {
  @JsName("ParentName")
  public open var parentName: String

  @JsName("ParentIndex")
  public open var parentIndex: Number

  @JsName("InitialTransform")
  public open var initialTransform: Transform

  @JsName("GlobalTransform")
  public open var globalTransform: Transform

  @JsName("LocalTransform")
  public open var localTransform: Transform

  @JsName("Dependents")
  public open var dependents: Array<Number>

  @JsName("Type")
  public open var type: String

  public override fun clone(): RigBone

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigBone

    @JsName("C")
    public fun copy(other: Any): RigBone
  }
}

public open external class RigBoneHierarchy {
  @JsName("Bones")
  public open var bones: Array<RigBone>

  public open fun clone(): RigBoneHierarchy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigBoneHierarchy

    @JsName("C")
    public fun copy(other: Any): RigBoneHierarchy
  }
}

@JsName("ERigSpaceType")
public external object RigSpaceType {
  public var Global: String

  public var Bone: String

  public var Control: String

  public var Space: String

  @JsName("ERigSpaceType_MAX")
  public var Max: String
}

public open external class RigSpace : RigElement {
  @JsName("SpaceType")
  public open var spaceType: String

  @JsName("ParentName")
  public open var parentName: String

  @JsName("ParentIndex")
  public open var parentIndex: Number

  @JsName("InitialTransform")
  public open var initialTransform: Transform

  @JsName("LocalTransform")
  public open var localTransform: Transform

  public override fun clone(): RigSpace

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigSpace

    @JsName("C")
    public fun copy(other: Any): RigSpace
  }
}

public open external class RigSpaceHierarchy {
  @JsName("Spaces")
  public open var spaces: Array<RigSpace>

  public open fun clone(): RigSpaceHierarchy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigSpaceHierarchy

    @JsName("C")
    public fun copy(other: Any): RigSpaceHierarchy
  }
}

public open external class RigControl : RigElement {
  @JsName("ControlType")
  public open var controlType: String

  @JsName("DisplayName")
  public open var displayName: String

  @JsName("ParentName")
  public open var parentName: String

  @JsName("ParentIndex")
  public open var parentIndex: Number

  @JsName("SpaceName")
  public open var spaceName: String

  @JsName("SpaceIndex")
  public open var spaceIndex: Number

  @JsName("OffsetTransform")
  public open var offsetTransform: Transform

  @JsName("InitialValue")
  public open var initialValue: RigControlValue

  @JsName("Value")
  public open var value: RigControlValue

  @JsName("PrimaryAxis")
  public open var primaryAxis: String

  @JsName("bIsCurve")
  public open var isCurve: Boolean

  @JsName("bAnimatable")
  public open var animatable: Boolean

  @JsName("bLimitTranslation")
  public open var limitTranslation: Boolean

  @JsName("bLimitRotation")
  public open var limitRotation: Boolean

  @JsName("bLimitScale")
  public open var limitScale: Boolean

  @JsName("bDrawLimits")
  public open var drawLimits: Boolean

  @JsName("MinimumValue")
  public open var minimumValue: RigControlValue

  @JsName("MaximumValue")
  public open var maximumValue: RigControlValue

  @JsName("bGizmoEnabled")
  public open var gizmoEnabled: Boolean

  @JsName("bGizmoVisible")
  public open var gizmoVisible: Boolean

  @JsName("GizmoName")
  public open var gizmoName: String

  @JsName("GizmoTransform")
  public open var gizmoTransform: Transform

  @JsName("GizmoColor")
  public open var gizmoColor: LinearColor

  @JsName("Dependents")
  public open var dependents: Array<Number>

  @JsName("bIsTransientControl")
  public open var isTransientControl: Boolean

  @JsName("ControlEnum")
  public open var controlEnum: Enum

  public override fun clone(): RigControl

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigControl

    @JsName("C")
    public fun copy(other: Any): RigControl
  }
}

public open external class RigControlHierarchy {
  @JsName("Controls")
  public open var controls: Array<RigControl>

  public open fun clone(): RigControlHierarchy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigControlHierarchy

    @JsName("C")
    public fun copy(other: Any): RigControlHierarchy
  }
}

public open external class RigCurve : RigElement {
  @JsName("Value")
  public open var value: Number

  public override fun clone(): RigCurve

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigCurve

    @JsName("C")
    public fun copy(other: Any): RigCurve
  }
}

public open external class RigCurveContainer {
  @JsName("Curves")
  public open var curves: Array<RigCurve>

  public open fun clone(): RigCurveContainer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigCurveContainer

    @JsName("C")
    public fun copy(other: Any): RigCurveContainer
  }
}

public open external class RigHierarchyContainer {
  @JsName("BoneHierarchy")
  public open var boneHierarchy: RigBoneHierarchy

  @JsName("SpaceHierarchy")
  public open var spaceHierarchy: RigSpaceHierarchy

  @JsName("ControlHierarchy")
  public open var controlHierarchy: RigControlHierarchy

  @JsName("CurveContainer")
  public open var curveContainer: RigCurveContainer

  public open fun clone(): RigHierarchyContainer

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RigHierarchyContainer

    @JsName("C")
    public fun copy(other: Any): RigHierarchyContainer
  }
}

public open external class ControlRigValidationPass(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigValidationPass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigValidationPass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigValidationPass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigValidationPass

    @JsName("C")
    public fun copy(other: UObject): ControlRigValidationPass

    @JsName("C")
    public fun copy(other: Any): ControlRigValidationPass
  }
}

public open external class ControlRigValidator(
  outer: UObject,
) : UObject {
  @JsName("Passes")
  public open var passes: Array<ControlRigValidationPass>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigValidator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigValidator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigValidator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigValidator

    @JsName("C")
    public fun copy(other: UObject): ControlRigValidator

    @JsName("C")
    public fun copy(other: Any): ControlRigValidator
  }
}

public open external class ControlRigBlueprint(
  outer: UObject,
) : Blueprint {
  @JsName("FunctionLibraryEdGraph")
  public open var functionLibraryEdGraph: ControlRigGraph

  @JsName("RigGraphDisplaySettings")
  public open var rigGraphDisplaySettings: RigGraphDisplaySettings

  @JsName("VMRuntimeSettings")
  public open var vmRuntimeSettings: RigVmRuntimeSettings

  @JsName("VMCompileSettings")
  public open var vmCompileSettings: RigVmCompileSettings

  @JsName("PythonLogSettings")
  public open var pythonLogSettings: ControlRigPythonSettings

  @JsName("Model")
  public open var model: RigVmGraph

  @JsName("FunctionLibrary")
  public open var functionLibrary: RigVmFunctionLibrary

  @JsName("PublicFunctions")
  public open var publicFunctions: Array<ControlRigPublicFunctionData>

  @JsName("FunctionReferenceNodeData")
  public open var functionReferenceNodeData: Array<RigVmReferenceNodeData>

  @JsName("Controllers")
  public open var controllers: Any

  @JsName("TemplateModel")
  public open var templateModel: RigVmGraph

  @JsName("TemplateController")
  public open var templateController: RigVmController

  @JsName("PinToOperandMap")
  public open var pinToOperandMap: Any

  @JsName("GizmoLibrary")
  public open var gizmoLibrary: ControlRigShapeLibrary

  @JsName("ShapeLibraries")
  public open var shapeLibraries: Array<ControlRigShapeLibrary>

  @JsName("Statistics")
  public open var statistics: RigVmStatistics

  @JsName("DrawContainer")
  public open var drawContainer: ControlRigDrawContainer

  @JsName("Influences")
  public open var influences: RigInfluenceMapPerEvent

  @JsName("HierarchyContainer")
  public open var hierarchyContainer: RigHierarchyContainer

  @JsName("Hierarchy")
  public open var hierarchy: RigHierarchy

  @JsName("bSupportsInversion")
  public open var supportsInversion: Boolean

  @JsName("bSupportsControls")
  public open var supportsControls: Boolean

  @JsName("PreviewSkeletalMesh")
  public open var previewSkeletalMesh: SkeletalMesh

  @JsName("SourceHierarchyImport")
  public open var sourceHierarchyImport: UObject

  @JsName("SourceCurveImport")
  public open var sourceCurveImport: UObject

  @JsName("SupportedEventNames")
  public open var supportedEventNames: Array<String>

  @JsName("bExposesAnimatableControls")
  public open var exposesAnimatableControls: Boolean

  @JsName("bAutoRecompileVM")
  public open var autoRecompileVm: Boolean

  @JsName("bVMRecompilationRequired")
  public open var vmRecompilationRequired: Boolean

  @JsName("bIsCompiling")
  public open var isCompiling: Boolean

  @JsName("VMRecompilationBracket")
  public open var vmRecompilationBracket: Number

  @JsName("Validator")
  public open var validator: ControlRigValidator

  @JsName("DebugBoneRadius")
  public open var debugBoneRadius: Number

  @JsName("SuspendNotifications")
  public open fun suspendNotifications(suspendNotifs: Boolean): Unit

  @JsName("SetPreviewMesh")
  public open fun setPreviewMesh(previewMesh: SkeletalMesh, markAsDirty: Boolean): Unit

  @JsName("RequestControlRigInit")
  public open fun requestControlRigInit(): Unit

  @JsName("RequestAutoVMRecompilation")
  public open fun requestAutoVmRecompilation(): Unit

  @JsName("RenameMemberVariable")
  public open fun renameMemberVariable(inOldName: String, inNewName: String): Boolean

  @JsName("RemoveMemberVariable")
  public open fun removeMemberVariable(inName: String): Boolean

  @JsName("RecompileVMIfRequired")
  public open fun recompileVmIfRequired(): Unit

  @JsName("RecompileVM")
  public open fun recompileVm(): Unit

  @JsName("GetPreviewMesh")
  public open fun getPreviewMesh(): SkeletalMesh

  @JsName("GetOrCreateController")
  public open fun getOrCreateController(inGraph: RigVmGraph): RigVmController

  @JsName("GetModel")
  public open fun getModel(inEdGraph: EdGraph): RigVmGraph

  @JsName("GetLocalFunctionLibrary")
  public open fun getLocalFunctionLibrary(): RigVmFunctionLibrary

  @JsName("GetHierarchyController")
  public open fun getHierarchyController(): RigHierarchyController

  @JsName("GetControlRigClass")
  public open fun getControlRigClass(): UnrealEngineClass

  @JsName("GetControllerByName")
  public open fun getControllerByName(inGraphName: String): RigVmController

  @JsName("GetController")
  public open fun getController(inGraph: RigVmGraph): RigVmController

  @JsName("GetAllModels")
  public open fun getAllModels(): Array<RigVmGraph>

  @JsName("GeneratePythonCommands")
  public open fun generatePythonCommands(inNewBlueprintName: String): Array<String>

  @JsName("CreateControlRig")
  public open fun createControlRig(): ControlRig

  @JsName("ChangeMemberVariableType")
  public open fun changeMemberVariableType(
    inName: String,
    inCppType: String,
    isPublic: Boolean,
    isReadOnly: Boolean,
    inDefaultValue: String,
  ): Boolean

  @JsName("AddMemberVariable")
  public open fun addMemberVariable(
    inName: String,
    inCppType: String,
    isPublic: Boolean,
    isReadOnly: Boolean,
    inDefaultValue: String,
  ): String

  @JsName("GetController")
  public open fun getController(): RigVmController

  @JsName("GetHierarchy")
  public open fun getHierarchy(): RigHierarchy

  @JsName("GetModel")
  public open fun getModel(): RigVmGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ControlRigBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ControlRigBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ControlRigBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ControlRigBlueprint

    @JsName("GetCurrentlyOpenRigBlueprints")
    public fun getCurrentlyOpenRigBlueprints(): Array<ControlRigBlueprint>

    @JsName("GetAvailableRigUnits")
    public fun getAvailableRigUnits(): Array<Struct>

    @JsName("C")
    public fun copy(other: UObject): ControlRigBlueprint

    @JsName("C")
    public fun copy(other: Any): ControlRigBlueprint

    @JsName("GetController")
    public fun getController(inRigBlueprint: ControlRigBlueprint): RigVmController

    @JsName("GetHierarchy")
    public fun getHierarchy(inRigBlueprint: ControlRigBlueprint): RigHierarchy

    @JsName("GetHierarchyController")
    public fun getHierarchyController(inRigBlueprint: ControlRigBlueprint): RigHierarchyController

    @JsName("GetModel")
    public fun getModel(inRigBlueprint: ControlRigBlueprint): RigVmGraph

    @JsName("GetPreviewMesh")
    public fun getPreviewMesh(inRigBlueprint: ControlRigBlueprint): SkeletalMesh

    @JsName("RecompileVM")
    public fun recompileVm(inRigBlueprint: ControlRigBlueprint): Unit

    @JsName("RecompileVMIfRequired")
    public fun recompileVmIfRequired(inRigBlueprint: ControlRigBlueprint): Unit

    @JsName("RequestAutoVMRecompilation")
    public fun requestAutoVmRecompilation(inRigBlueprint: ControlRigBlueprint): Unit

    @JsName("RequestControlRigInit")
    public fun requestControlRigInit(inRigBlueprint: ControlRigBlueprint): Unit

    @JsName("SetPreviewMesh")
    public fun setPreviewMesh(
      inRigBlueprint: ControlRigBlueprint,
      previewMesh: SkeletalMesh,
      markAsDirty: Boolean,
    ): Unit
  }
}

public open external class DirectoryItem {
  @JsName("Name")
  public open var name: String

  @JsName("bIsDirectory")
  public open var isDirectory: Boolean

  public open fun clone(): DirectoryItem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DirectoryItem

    @JsName("C")
    public fun copy(other: Any): DirectoryItem
  }
}

@JsName("EFileRead_JS")
public external object FileRead_JS {
  @JsName("FILEREAD_None")
  public var None: String

  @JsName("FILEREAD_NoFail")
  public var NoFail: String

  @JsName("FILEREAD_Silent")
  public var Silent: String

  @JsName("FILEREAD_NotUsedDummy")
  public var NotUsedDummy: String

  @JsName("FILEREAD_AllowWrite")
  public var AllowWrite: String

  @JsName("FILEREAD_MAX")
  public var Max: String
}

public open external class JavascriptStubStruct {
  public open fun clone(): JavascriptStubStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptStubStruct

    @JsName("C")
    public fun copy(other: Any): JavascriptStubStruct
  }
}

public open external class JavascriptFunction {
  public open fun clone(): JavascriptFunction

  @JsName("CallJS")
  public open fun callJs(customStruct: JavascriptStubStruct): Unit

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): JavascriptFunction

    @JsName("C")
    public fun copy(other: Any): JavascriptFunction

    @JsName("CallJS")
    public fun callJs(uFunction: JavascriptFunction, customStruct: JavascriptStubStruct): Unit
  }
}

public open external class ReadStringFromFileHandle {
  public open fun clone(): ReadStringFromFileHandle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ReadStringFromFileHandle

    @JsName("C")
    public fun copy(other: Any): ReadStringFromFileHandle
  }
}

@JsName("EJavascriptEncodingOptions")
public external object JavascriptEncodingOptions {
  public var AutoDetect: String

  public var ForceAnsi: String

  public var ForceUnicode: String

  @JsName("ForceUTF8")
  public var ForceUtf8: String

  @JsName("ForceUTF8WithoutBOM")
  public var ForceUtf8WithoutBom: String

  @JsName("EJavascriptEncodingOptions_MAX")
  public var Max: String
}

public open external class AudioEngineSubsystem(
  outer: UObject,
) : DynamicSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioEngineSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioEngineSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioEngineSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioEngineSubsystem

    @JsName("C")
    public fun copy(other: UObject): AudioEngineSubsystem

    @JsName("C")
    public fun copy(other: Any): AudioEngineSubsystem
  }
}

public open external class GameInstanceSubsystem(
  outer: UObject,
) : Subsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameInstanceSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameInstanceSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameInstanceSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameInstanceSubsystem

    @JsName("C")
    public fun copy(other: UObject): GameInstanceSubsystem

    @JsName("C")
    public fun copy(other: Any): GameInstanceSubsystem
  }
}

public open external class WorldSubsystem(
  outer: UObject,
) : Subsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WorldSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WorldSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WorldSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WorldSubsystem

    @JsName("C")
    public fun copy(other: UObject): WorldSubsystem

    @JsName("C")
    public fun copy(other: Any): WorldSubsystem
  }
}

public open external class CollisionProfileName {
  @JsName("Name")
  public open var name: String

  public open fun clone(): CollisionProfileName

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CollisionProfileName

    @JsName("C")
    public fun copy(other: Any): CollisionProfileName
  }
}

@JsName("EPropertyAccessChangeNotifyMode")
public external object PropertyAccessChangeNotifyMode {
  public var Default: String

  public var Never: String

  public var Always: String

  @JsName("EPropertyAccessChangeNotifyMode_MAX")
  public var Max: String
}

public open external class GenericStruct {
  @JsName("Data")
  public open var data: Number

  public open fun clone(): GenericStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GenericStruct

    @JsName("C")
    public fun copy(other: Any): GenericStruct
  }
}

@JsName("T$569")
public external interface Object569 {
  @JsName("OutItems")
  public var outItems: Array<DirectoryItem>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$570")
public external interface Object570 {
  @JsName("OutKeys")
  public var outKeys: Array<String>

  @JsName("OutValues")
  public var outValues: Array<String>
}

@JsName("T$571")
public external interface Object571 {
  @JsName("PropertyValue")
  public var propertyValue: Number

  @JsName("$")
  public var value: Boolean
}

public open external class UObject(
  outer: UObject,
) {
  @JsName("ExecuteUbergraph")
  public open fun executeUbergraph(entryPoint: Number): Unit

  @JsName("AddWhitelistedObject")
  public open fun addWhitelistedObject(): Unit

  @JsName("BroadcastAssetCreated")
  public open fun broadcastAssetCreated(): Unit

  @JsName("ConditionalBeginDestroybyUObject")
  public open fun conditionalBeginDestroybyUObject(): Boolean

  @JsName("GetUniqueID")
  public open fun getUniqueId(): Number

  @JsName("MarkPackageDirty")
  public open fun markPackageDirty(): Boolean

  @JsName("ModifyObject")
  public open fun modifyObject(alwaysMarkDirty: Boolean): Unit

  @JsName("OpenEditorForAsset")
  public open fun openEditorForAsset(): Boolean

  @JsName("PostEditChange")
  public open fun postEditChange(): Unit

  @JsName("CastToControlRigBlueprint")
  public open fun castToControlRigBlueprint(branches: String,
      asControlRigBlueprint: ControlRigBlueprint): Object437

  @JsName("SpawnActorFromObject")
  public open fun spawnActorFromObject(
    location: Vector,
    rotation: Rotator,
    transient: Boolean,
  ): Actor

  @JsName("CheckoutLoadedAsset")
  public open fun checkoutLoadedAsset(): Boolean

  @JsName("ConsolidateAssets")
  public open fun consolidateAssets(assetsToConsolidate: Array<UObject>): Boolean

  @JsName("DeleteLoadedAsset")
  public open fun deleteLoadedAsset(): Boolean

  @JsName("DuplicateLoadedAsset")
  public open fun duplicateLoadedAsset(destinationAssetPath: String): UObject

  @JsName("GetMetadataTag")
  public open fun getMetadataTag(tag: String): String

  @JsName("GetMetadataTagValues")
  public open fun getMetadataTagValues(): Any

  @JsName("GetPathNameForLoadedAsset")
  public open fun getPathNameForLoadedAsset(): String

  @JsName("RemoveMetadataTag")
  public open fun removeMetadataTag(tag: String): Unit

  @JsName("RenameLoadedAsset")
  public open fun renameLoadedAsset(destinationAssetPath: String): Boolean

  @JsName("SaveLoadedAsset")
  public open fun saveLoadedAsset(onlyIfIsDirty: Boolean): Boolean

  @JsName("SetMetadataTag")
  public open fun setMetadataTag(tag: String, value: String): Unit

  @JsName("DestroyUObject")
  public open fun destroyUObject(): Unit

  @JsName("ConvertRelativePathToFull")
  public open fun convertRelativePathToFull(relativePath: String): String

  @JsName("CreateEnum")
  public open fun createEnum(
    name: String,
    displayNames: Array<String>,
    flags: Array<String>,
  ): Enum

  @JsName("CreatePackage")
  public open fun createPackage(packageName: String): Package

  @JsName("Duplicate")
  public open fun duplicate(outer: UObject, name: String): UObject

  @JsName("FindObjectWithOuter")
  public open fun findObjectWithOuter(classToLookFor: UnrealEngineClass, nameToLookFor: String):
      UObject

  @JsName("FindPackage")
  public open fun findPackage(packageName: String): Package

  @JsName("GetArchetypePathName")
  public open fun getArchetypePathName(): String

  @JsName("GetDir")
  public open fun getDir(whichDir: String): String

  @JsName("GetFields")
  public open fun getFields(includeSuper: Boolean): Array<Field>

  @JsName("GetFileSize")
  public open fun getFileSize(filename: String): Number

  @JsName("GetName")
  public open fun getName(): String

  @JsName("GetObjectsWithOuter")
  public open fun getObjectsWithOuter(
    results: Array<UObject>,
    includeNestedObjects: Boolean,
    exclusionFlags: Number,
    exclusionInternalFlags: Number,
  ): ResultsProvider

  @JsName("GetOuter")
  public open fun getOuter(): UObject

  @JsName("GetOutermost")
  public open fun getOutermost(): UObject

  @JsName("HasAnyFlags")
  public open fun hasAnyFlags(flags: Number): Boolean

  @JsName("ReadDirectory")
  public open fun readDirectory(directory: String, outItems: Array<DirectoryItem>): Object569

  @JsName("ReadFile")
  public open fun readFile(filename: String): Boolean

  @JsName("ReadStringFromFile")
  public open fun readStringFromFile(filename: String, readFlags: String): String

  @JsName("ReadStringFromFileAsync")
  public open fun readStringFromFileAsync(filename: String, uFunction: JavascriptFunction):
      ReadStringFromFileHandle

  @JsName("SetObjectFlags")
  public open fun setObjectFlags(flags: Number): Unit

  @JsName("WriteFile")
  public open fun writeFile(filename: String): Boolean

  @JsName("WriteStringToFile")
  public open fun writeStringToFile(
    filename: String,
    data: String,
    encodingOptions: String,
  ): Boolean

  @JsName("RenameAsset")
  public open fun renameAsset(newName: String): Unit

  @JsName("GetDatasmithUserData")
  public open fun getDatasmithUserData(): DatasmithAssetUserData

  @JsName("GetDatasmithUserDataKeysAndValuesForValue")
  public open fun getDatasmithUserDataKeysAndValuesForValue(
    stringToMatch: String,
    outKeys: Array<String>,
    outValues: Array<String>,
  ): Object570

  @JsName("GetDatasmithUserDataValueForKey")
  public open fun getDatasmithUserDataValueForKey(key: String): String

  @JsName("RedirectVislog")
  public open fun redirectVislog(destinationOwner: UObject): Unit

  @JsName("GetAudioEngineSubsystem")
  public open fun getAudioEngineSubsystem(`class`: UnrealEngineClass): AudioEngineSubsystem

  @JsName("GetGameInstanceSubsystem")
  public open fun getGameInstanceSubsystem(`class`: UnrealEngineClass): GameInstanceSubsystem

  @JsName("GetLocalPlayerSubsystem")
  public open fun getLocalPlayerSubsystem(`class`: UnrealEngineClass): LocalPlayerSubsystem

  @JsName("GetWorldSubsystem")
  public open fun getWorldSubsystem(`class`: UnrealEngineClass): WorldSubsystem

  @JsName("MarkPropertyDirty")
  public open fun markPropertyDirty(propertyName: String): Unit

  @JsName("MarkPropertyDirtyFromRepIndex")
  public open fun markPropertyDirtyFromRepIndex(repIndex: Number, propertyName: String): Unit

  @JsName("Conv_ObjectToText")
  public open fun convertObjectToText(): String

  @JsName("Conv_ObjectToClass")
  public open fun convertObjectToClass(`class`: UnrealEngineClass): UnrealEngineClass

  @JsName("Conv_ObjectToSoftObjectReference")
  public open fun convertObjectToSoftObjectReference(): UObject

  @JsName("Conv_SoftObjectReferenceToObject")
  public open fun convertSoftObjectReferenceToObject(): UObject

  @JsName("Conv_SoftObjectReferenceToString")
  public open fun convertSoftObjectReferenceToString(): String

  @JsName("CreateCopyForUndoBuffer")
  public open fun createCopyForUndoBuffer(): Unit

  @JsName("DoesImplementInterface")
  public open fun doesImplementInterface(`interface`: UnrealEngineClass): Boolean

  @JsName("EqualEqual_SoftObjectReference")
  public open fun equalEqualSoftObjectReference(b: UObject): Boolean

  @JsName("GetDisplayName")
  public open fun getDisplayName(): String

  @JsName("GetEditorProperty")
  public open fun getEditorProperty(propertyName: String, propertyValue: Number): Object571

  @JsName("GetObjectName")
  public open fun getObjectName(): String

  @JsName("GetOuterObject")
  public open fun getOuterObject(): UObject

  @JsName("GetPathName")
  public open fun getPathName(): String

  @JsName("GetPrimaryAssetIdFromObject")
  public open fun getPrimaryAssetIdFromObject(): PrimaryAssetId

  @JsName("GetPrimaryAssetIdFromSoftObjectReference")
  public open fun getPrimaryAssetIdFromSoftObjectReference(): PrimaryAssetId

  @JsName("GetSystemPath")
  public open fun getSystemPath(): String

  @JsName("IsValid")
  public open fun isValid(): Boolean

  @JsName("IsValidSoftObjectReference")
  public open fun isValidSoftObjectReference(): Boolean

  @JsName("K2_ClearTimer")
  public open fun k2ClearTimer(functionName: String): Unit

  @JsName("K2_GetTimerElapsedTime")
  public open fun k2GetTimerElapsedTime(functionName: String): Number

  @JsName("K2_GetTimerRemainingTime")
  public open fun k2GetTimerRemainingTime(functionName: String): Number

  @JsName("K2_IsTimerActive")
  public open fun k2IsTimerActive(functionName: String): Boolean

  @JsName("K2_IsTimerPaused")
  public open fun k2IsTimerPaused(functionName: String): Boolean

  @JsName("K2_PauseTimer")
  public open fun k2PauseTimer(functionName: String): Unit

  @JsName("K2_SetTimer")
  public open fun k2SetTimer(
    functionName: String,
    time: Number,
    looping: Boolean,
    initialStartDelay: Number,
    initialStartDelayVariance: Number,
  ): TimerHandle

  @JsName("K2_SetTimerForNextTick")
  public open fun k2SetTimerForNextTick(functionName: String): TimerHandle

  @JsName("K2_TimerExists")
  public open fun k2TimerExists(functionName: String): Boolean

  @JsName("K2_UnPauseTimer")
  public open fun k2UnPauseTimer(functionName: String): Unit

  @JsName("LoadAsset_Blocking")
  public open fun loadAssetBlocking(): UObject

  @JsName("NotEqual_SoftObjectReference")
  public open fun notEqualSoftObjectReference(b: UObject): Boolean

  @JsName("SetBoolPropertyByName")
  public open fun setBoolPropertyByName(propertyName: String, value: Boolean): Unit

  @JsName("SetBytePropertyByName")
  public open fun setBytePropertyByName(propertyName: String, value: Number): Unit

  @JsName("SetClassPropertyByName")
  public open fun setClassPropertyByName(propertyName: String, value: UnrealEngineClass): Unit

  @JsName("SetCollisionProfileNameProperty")
  public open fun setCollisionProfileNameProperty(propertyName: String,
      value: CollisionProfileName): Unit

  @JsName("SetColorPropertyByName")
  public open fun setColorPropertyByName(propertyName: String, value: Color): Unit

  @JsName("SetDoublePropertyByName")
  public open fun setDoublePropertyByName(propertyName: String, value: Any): Unit

  @JsName("SetEditorProperty")
  public open fun setEditorProperty(
    propertyName: String,
    propertyValue: Number,
    changeNotifyMode: String,
  ): Boolean

  @JsName("SetFieldPathPropertyByName")
  public open fun setFieldPathPropertyByName(propertyName: String, value: Any): Unit

  @JsName("SetInt64PropertyByName")
  public open fun setInt64PropertyByName(propertyName: String, value: Any): Unit

  @JsName("SetInterfacePropertyByName")
  public open fun setInterfacePropertyByName(propertyName: String, value: Any): Unit

  @JsName("SetIntPropertyByName")
  public open fun setIntPropertyByName(propertyName: String, value: Number): Unit

  @JsName("SetLinearColorPropertyByName")
  public open fun setLinearColorPropertyByName(propertyName: String, value: LinearColor): Unit

  @JsName("SetNamePropertyByName")
  public open fun setNamePropertyByName(propertyName: String, value: String): Unit

  @JsName("SetObjectPropertyByName")
  public open fun setObjectPropertyByName(propertyName: String, value: UObject): Unit

  @JsName("SetRotatorPropertyByName")
  public open fun setRotatorPropertyByName(propertyName: String, value: Rotator): Unit

  @JsName("SetSoftClassPropertyByName")
  public open fun setSoftClassPropertyByName(propertyName: String, value: Class): Unit

  @JsName("SetSoftObjectPropertyByName")
  public open fun setSoftObjectPropertyByName(propertyName: String, value: UObject): Unit

  @JsName("SetStringPropertyByName")
  public open fun setStringPropertyByName(propertyName: String, value: String): Unit

  @JsName("SetStructurePropertyByName")
  public open fun setStructurePropertyByName(propertyName: String, value: GenericStruct): Unit

  @JsName("SetTextPropertyByName")
  public open fun setTextPropertyByName(propertyName: String, value: String): Unit

  @JsName("SetTransformPropertyByName")
  public open fun setTransformPropertyByName(propertyName: String, value: Transform): Unit

  @JsName("SetVector3fPropertyByName")
  public open fun setVector3fPropertyByName(propertyName: String, value: Vector3f): Unit

  @JsName("SetVectorPropertyByName")
  public open fun setVectorPropertyByName(propertyName: String, value: Vector): Unit

  @JsName("SnapshotObject")
  public open fun snapshotObject(): Unit

  @JsName("TransactObject")
  public open fun transactObject(): Unit

  @JsName("Conv_ObjectToString")
  public open fun convertObjectToString(): String

  @JsName("EqualEqual_ObjectObject")
  public open fun equalEqualObjectObject(b: UObject): Boolean

  @JsName("NotEqual_ObjectObject")
  public open fun notEqualObjectObject(b: UObject): Boolean

  @JsName("SelectObject")
  public open fun selectObject(b: UObject, selectA: Boolean): UObject

  @JsName("SetArrayPropertyByName")
  public open fun setArrayPropertyByName(propertyName: String, value: Array<Number>): Unit

  @JsName("GetObjectClass")
  public open fun getObjectClass(): UnrealEngineClass

  @JsName("K2_AcquireEditorObjectElementHandle")
  public open fun k2AcquireEditorObjectElementHandle(allowCreate: Boolean): ScriptTypedElementHandle

  @JsName("SetSetPropertyByName")
  public open fun setSetPropertyByName(propertyName: String, value: Any): Unit

  @JsName("SetMapPropertyByName")
  public open fun setMapPropertyByName(propertyName: String, value: Any): Unit

  @JsName("GetBlueprintAsset")
  public open fun getBlueprintAsset(): Blueprint

  public companion object {
    @JsName("StaticClass")
    public var staticClass: Any

    @JsName("Load")
    public fun load(resourceName: String): UObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UObject

    @JsName("GetClassObject")
    public fun getClassObject(): Class

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UObject

    @JsName("GetDefaultSubobjectByName")
    public fun getDefaultSubobjectByName(name: String): UObject

    @JsName("SetDefaultSubobjectClass")
    public fun setDefaultSubobjectClass(name: String): Unit

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UObject

    @JsName("C")
    public fun copy(other: UObject): UObject

    @JsName("C")
    public fun copy(other: Any): UObject

    @JsName("AddWhitelistedObject")
    public fun addWhitelistedObject(inObject: UObject): Unit

    @JsName("BroadcastAssetCreated")
    public fun broadcastAssetCreated(newAsset: UObject): Unit

    @JsName("ConditionalBeginDestroybyUObject")
    public fun conditionalBeginDestroybyUObject(targetObject: UObject): Boolean

    @JsName("GetUniqueID")
    public fun getUniqueId(inObject: UObject): Number

    @JsName("MarkPackageDirty")
    public fun markPackageDirty(inObject: UObject): Boolean

    @JsName("ModifyObject")
    public fun modifyObject(uObject: UObject, alwaysMarkDirty: Boolean): Unit

    @JsName("OpenEditorForAsset")
    public fun openEditorForAsset(asset: UObject): Boolean

    @JsName("PostEditChange")
    public fun postEditChange(inObject: UObject): Unit

    @JsName("CastToControlRigBlueprint")
    public fun castToControlRigBlueprint(
      uObject: UObject,
      branches: String,
      asControlRigBlueprint: ControlRigBlueprint,
    ): Object437

    @JsName("SpawnActorFromObject")
    public fun spawnActorFromObject(
      objectToUse: UObject,
      location: Vector,
      rotation: Rotator,
      transient: Boolean,
    ): Actor

    @JsName("CheckoutLoadedAsset")
    public fun checkoutLoadedAsset(assetToCheckout: UObject): Boolean

    @JsName("ConsolidateAssets")
    public fun consolidateAssets(assetToConsolidateTo: UObject,
        assetsToConsolidate: Array<UObject>): Boolean

    @JsName("DeleteLoadedAsset")
    public fun deleteLoadedAsset(assetToDelete: UObject): Boolean

    @JsName("DuplicateLoadedAsset")
    public fun duplicateLoadedAsset(sourceAsset: UObject, destinationAssetPath: String): UObject

    @JsName("GetMetadataTag")
    public fun getMetadataTag(uObject: UObject, tag: String): String

    @JsName("GetMetadataTagValues")
    public fun getMetadataTagValues(uObject: UObject): Any

    @JsName("GetPathNameForLoadedAsset")
    public fun getPathNameForLoadedAsset(loadedAsset: UObject): String

    @JsName("RemoveMetadataTag")
    public fun removeMetadataTag(uObject: UObject, tag: String): Unit

    @JsName("RenameLoadedAsset")
    public fun renameLoadedAsset(sourceAsset: UObject, destinationAssetPath: String): Boolean

    @JsName("SaveLoadedAsset")
    public fun saveLoadedAsset(assetToSave: UObject, onlyIfIsDirty: Boolean): Boolean

    @JsName("SetMetadataTag")
    public fun setMetadataTag(
      uObject: UObject,
      tag: String,
      value: String,
    ): Unit

    @JsName("DestroyUObject")
    public fun destroyUObject(uObject: UObject): Unit

    @JsName("ConvertRelativePathToFull")
    public fun convertRelativePathToFull(uObject: UObject, relativePath: String): String

    @JsName("CreateEnum")
    public fun createEnum(
      outer: UObject,
      name: String,
      displayNames: Array<String>,
      flags: Array<String>,
    ): Enum

    @JsName("CreatePackage")
    public fun createPackage(outer: UObject, packageName: String): Package

    @JsName("Duplicate")
    public fun duplicate(
      uObject: UObject,
      outer: UObject,
      name: String,
    ): UObject

    @JsName("FindObjectWithOuter")
    public fun findObjectWithOuter(
      outer: UObject,
      classToLookFor: UnrealEngineClass,
      nameToLookFor: String,
    ): UObject

    @JsName("FindPackage")
    public fun findPackage(inOuter: UObject, packageName: String): Package

    @JsName("GetArchetypePathName")
    public fun getArchetypePathName(uObject: UObject): String

    @JsName("GetDir")
    public fun getDir(uObject: UObject, whichDir: String): String

    @JsName("GetFields")
    public fun getFields(uObject: UObject, includeSuper: Boolean): Array<Field>

    @JsName("GetFileSize")
    public fun getFileSize(uObject: UObject, filename: String): Number

    @JsName("GetName")
    public fun getName(uObject: UObject): String

    @JsName("GetObjectsWithOuter")
    public fun getObjectsWithOuter(
      outer: UObject,
      results: Array<UObject>,
      includeNestedObjects: Boolean,
      exclusionFlags: Number,
      exclusionInternalFlags: Number,
    ): ResultsProvider

    @JsName("GetOuter")
    public fun getOuter(uObject: UObject): UObject

    @JsName("GetOutermost")
    public fun getOutermost(uObject: UObject): UObject

    @JsName("HasAnyFlags")
    public fun hasAnyFlags(uObject: UObject, flags: Number): Boolean

    @JsName("ReadDirectory")
    public fun readDirectory(
      uObject: UObject,
      directory: String,
      outItems: Array<DirectoryItem>,
    ): Object569

    @JsName("ReadFile")
    public fun readFile(uObject: UObject, filename: String): Boolean

    @JsName("ReadStringFromFile")
    public fun readStringFromFile(
      uObject: UObject,
      filename: String,
      readFlags: String,
    ): String

    @JsName("ReadStringFromFileAsync")
    public fun readStringFromFileAsync(
      uObject: UObject,
      filename: String,
      uFunction: JavascriptFunction,
    ): ReadStringFromFileHandle

    @JsName("SetObjectFlags")
    public fun setObjectFlags(obj: UObject, flags: Number): Unit

    @JsName("WriteFile")
    public fun writeFile(uObject: UObject, filename: String): Boolean

    @JsName("WriteStringToFile")
    public fun writeStringToFile(
      uObject: UObject,
      filename: String,
      data: String,
      encodingOptions: String,
    ): Boolean

    @JsName("RenameAsset")
    public fun renameAsset(asset: UObject, newName: String): Unit

    @JsName("GetDatasmithUserData")
    public fun getDatasmithUserData(uObject: UObject): DatasmithAssetUserData

    @JsName("GetDatasmithUserDataKeysAndValuesForValue")
    public fun getDatasmithUserDataKeysAndValuesForValue(
      uObject: UObject,
      stringToMatch: String,
      outKeys: Array<String>,
      outValues: Array<String>,
    ): Object570

    @JsName("GetDatasmithUserDataValueForKey")
    public fun getDatasmithUserDataValueForKey(uObject: UObject, key: String): String

    @JsName("RedirectVislog")
    public fun redirectVislog(sourceOwner: UObject, destinationOwner: UObject): Unit

    @JsName("GetAudioEngineSubsystem")
    public fun getAudioEngineSubsystem(contextObject: UObject, `class`: UnrealEngineClass):
        AudioEngineSubsystem

    @JsName("GetGameInstanceSubsystem")
    public fun getGameInstanceSubsystem(contextObject: UObject, `class`: UnrealEngineClass):
        GameInstanceSubsystem

    @JsName("GetLocalPlayerSubsystem")
    public fun getLocalPlayerSubsystem(contextObject: UObject, `class`: UnrealEngineClass):
        LocalPlayerSubsystem

    @JsName("GetWorldSubsystem")
    public fun getWorldSubsystem(contextObject: UObject, `class`: UnrealEngineClass): WorldSubsystem

    @JsName("MarkPropertyDirty")
    public fun markPropertyDirty(uObject: UObject, propertyName: String): Unit

    @JsName("MarkPropertyDirtyFromRepIndex")
    public fun markPropertyDirtyFromRepIndex(
      uObject: UObject,
      repIndex: Number,
      propertyName: String,
    ): Unit

    @JsName("Conv_ObjectToText")
    public fun convertObjectToText(inObj: UObject): String

    @JsName("Conv_ObjectToClass")
    public fun convertObjectToClass(uObject: UObject, `class`: UnrealEngineClass): UnrealEngineClass

    @JsName("Conv_ObjectToSoftObjectReference")
    public fun convertObjectToSoftObjectReference(uObject: UObject): UObject

    @JsName("Conv_SoftObjectReferenceToObject")
    public fun convertSoftObjectReferenceToObject(softobject: UObject): UObject

    @JsName("Conv_SoftObjectReferenceToString")
    public fun convertSoftObjectReferenceToString(softObjectReference: UObject): String

    @JsName("CreateCopyForUndoBuffer")
    public fun createCopyForUndoBuffer(objectToModify: UObject): Unit

    @JsName("DoesImplementInterface")
    public fun doesImplementInterface(testObject: UObject, `interface`: UnrealEngineClass): Boolean

    @JsName("EqualEqual_SoftObjectReference")
    public fun equalEqualSoftObjectReference(a: UObject, b: UObject): Boolean

    @JsName("GetDisplayName")
    public fun getDisplayName(uObject: UObject): String

    @JsName("GetEditorProperty")
    public fun getEditorProperty(
      uObject: UObject,
      propertyName: String,
      propertyValue: Number,
    ): Object571

    @JsName("GetObjectName")
    public fun getObjectName(uObject: UObject): String

    @JsName("GetOuterObject")
    public fun getOuterObject(uObject: UObject): UObject

    @JsName("GetPathName")
    public fun getPathName(uObject: UObject): String

    @JsName("GetPrimaryAssetIdFromObject")
    public fun getPrimaryAssetIdFromObject(uObject: UObject): PrimaryAssetId

    @JsName("GetPrimaryAssetIdFromSoftObjectReference")
    public fun getPrimaryAssetIdFromSoftObjectReference(softObjectReference: UObject):
        PrimaryAssetId

    @JsName("GetSystemPath")
    public fun getSystemPath(uObject: UObject): String

    @JsName("IsValid")
    public fun isValid(uObject: UObject): Boolean

    @JsName("IsValidSoftObjectReference")
    public fun isValidSoftObjectReference(softObjectReference: UObject): Boolean

    @JsName("K2_ClearTimer")
    public fun k2ClearTimer(uObject: UObject, functionName: String): Unit

    @JsName("K2_GetTimerElapsedTime")
    public fun k2GetTimerElapsedTime(uObject: UObject, functionName: String): Number

    @JsName("K2_GetTimerRemainingTime")
    public fun k2GetTimerRemainingTime(uObject: UObject, functionName: String): Number

    @JsName("K2_IsTimerActive")
    public fun k2IsTimerActive(uObject: UObject, functionName: String): Boolean

    @JsName("K2_IsTimerPaused")
    public fun k2IsTimerPaused(uObject: UObject, functionName: String): Boolean

    @JsName("K2_PauseTimer")
    public fun k2PauseTimer(uObject: UObject, functionName: String): Unit

    @JsName("K2_SetTimer")
    public fun k2SetTimer(
      uObject: UObject,
      functionName: String,
      time: Number,
      looping: Boolean,
      initialStartDelay: Number,
      initialStartDelayVariance: Number,
    ): TimerHandle

    @JsName("K2_SetTimerForNextTick")
    public fun k2SetTimerForNextTick(uObject: UObject, functionName: String): TimerHandle

    @JsName("K2_TimerExists")
    public fun k2TimerExists(uObject: UObject, functionName: String): Boolean

    @JsName("K2_UnPauseTimer")
    public fun k2UnPauseTimer(uObject: UObject, functionName: String): Unit

    @JsName("LoadAsset_Blocking")
    public fun loadAssetBlocking(asset: UObject): UObject

    @JsName("NotEqual_SoftObjectReference")
    public fun notEqualSoftObjectReference(a: UObject, b: UObject): Boolean

    @JsName("SetBoolPropertyByName")
    public fun setBoolPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Boolean,
    ): Unit

    @JsName("SetBytePropertyByName")
    public fun setBytePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Number,
    ): Unit

    @JsName("SetClassPropertyByName")
    public fun setClassPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: UnrealEngineClass,
    ): Unit

    @JsName("SetCollisionProfileNameProperty")
    public fun setCollisionProfileNameProperty(
      uObject: UObject,
      propertyName: String,
      value: CollisionProfileName,
    ): Unit

    @JsName("SetColorPropertyByName")
    public fun setColorPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Color,
    ): Unit

    @JsName("SetDoublePropertyByName")
    public fun setDoublePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("SetEditorProperty")
    public fun setEditorProperty(
      uObject: UObject,
      propertyName: String,
      propertyValue: Number,
      changeNotifyMode: String,
    ): Boolean

    @JsName("SetFieldPathPropertyByName")
    public fun setFieldPathPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("SetInt64PropertyByName")
    public fun setInt64PropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("SetInterfacePropertyByName")
    public fun setInterfacePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("SetIntPropertyByName")
    public fun setIntPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Number,
    ): Unit

    @JsName("SetLinearColorPropertyByName")
    public fun setLinearColorPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: LinearColor,
    ): Unit

    @JsName("SetNamePropertyByName")
    public fun setNamePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: String,
    ): Unit

    @JsName("SetObjectPropertyByName")
    public fun setObjectPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: UObject,
    ): Unit

    @JsName("SetRotatorPropertyByName")
    public fun setRotatorPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Rotator,
    ): Unit

    @JsName("SetSoftClassPropertyByName")
    public fun setSoftClassPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Class,
    ): Unit

    @JsName("SetSoftObjectPropertyByName")
    public fun setSoftObjectPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: UObject,
    ): Unit

    @JsName("SetStringPropertyByName")
    public fun setStringPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: String,
    ): Unit

    @JsName("SetStructurePropertyByName")
    public fun setStructurePropertyByName(
      uObject: UObject,
      propertyName: String,
      value: GenericStruct,
    ): Unit

    @JsName("SetTextPropertyByName")
    public fun setTextPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: String,
    ): Unit

    @JsName("SetTransformPropertyByName")
    public fun setTransformPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Transform,
    ): Unit

    @JsName("SetVector3fPropertyByName")
    public fun setVector3fPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Vector3f,
    ): Unit

    @JsName("SetVectorPropertyByName")
    public fun setVectorPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Vector,
    ): Unit

    @JsName("SnapshotObject")
    public fun snapshotObject(uObject: UObject): Unit

    @JsName("TransactObject")
    public fun transactObject(uObject: UObject): Unit

    @JsName("Conv_ObjectToString")
    public fun convertObjectToString(inObj: UObject): String

    @JsName("EqualEqual_ObjectObject")
    public fun equalEqualObjectObject(a: UObject, b: UObject): Boolean

    @JsName("NotEqual_ObjectObject")
    public fun notEqualObjectObject(a: UObject, b: UObject): Boolean

    @JsName("SelectObject")
    public fun selectObject(
      a: UObject,
      b: UObject,
      selectA: Boolean,
    ): UObject

    @JsName("SetArrayPropertyByName")
    public fun setArrayPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Array<Number>,
    ): Unit

    @JsName("GetObjectClass")
    public fun getObjectClass(uObject: UObject): UnrealEngineClass

    @JsName("K2_AcquireEditorObjectElementHandle")
    public fun k2AcquireEditorObjectElementHandle(uObject: UObject, allowCreate: Boolean):
        ScriptTypedElementHandle

    @JsName("SetSetPropertyByName")
    public fun setSetPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("SetMapPropertyByName")
    public fun setMapPropertyByName(
      uObject: UObject,
      propertyName: String,
      value: Any,
    ): Unit

    @JsName("GetBlueprintAsset")
    public fun getBlueprintAsset(uObject: UObject): Blueprint
  }
}

@JsName("GCObjectReferencer")
public open external class GcObjectReferencer(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GcObjectReferencer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GcObjectReferencer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GcObjectReferencer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GcObjectReferencer

    @JsName("C")
    public fun copy(other: UObject): GcObjectReferencer

    @JsName("C")
    public fun copy(other: Any): GcObjectReferencer
  }
}

public open external class TextBuffer(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextBuffer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextBuffer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextBuffer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextBuffer

    @JsName("C")
    public fun copy(other: UObject): TextBuffer

    @JsName("C")
    public fun copy(other: Any): TextBuffer
  }
}

public open external class DelegateFunction(
  outer: UObject,
) : UFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DelegateFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DelegateFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DelegateFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DelegateFunction

    @JsName("C")
    public fun copy(other: UObject): DelegateFunction

    @JsName("C")
    public fun copy(other: Any): DelegateFunction
  }
}

public open external class SparseDelegateFunction(
  outer: UObject,
) : DelegateFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SparseDelegateFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SparseDelegateFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SparseDelegateFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SparseDelegateFunction

    @JsName("C")
    public fun copy(other: UObject): SparseDelegateFunction

    @JsName("C")
    public fun copy(other: Any): SparseDelegateFunction
  }
}

public open external class DynamicClass(
  outer: UObject,
) : Class {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicClass

    @JsName("C")
    public fun copy(other: UObject): DynamicClass

    @JsName("C")
    public fun copy(other: Any): DynamicClass
  }
}

public open external class LinkerPlaceholderClass(
  outer: UObject,
) : Class {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LinkerPlaceholderClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LinkerPlaceholderClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LinkerPlaceholderClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LinkerPlaceholderClass

    @JsName("C")
    public fun copy(other: UObject): LinkerPlaceholderClass

    @JsName("C")
    public fun copy(other: Any): LinkerPlaceholderClass
  }
}

public open external class LinkerPlaceholderExportObject(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LinkerPlaceholderExportObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LinkerPlaceholderExportObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LinkerPlaceholderExportObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LinkerPlaceholderExportObject

    @JsName("C")
    public fun copy(other: UObject): LinkerPlaceholderExportObject

    @JsName("C")
    public fun copy(other: Any): LinkerPlaceholderExportObject
  }
}

public open external class LinkerPlaceholderFunction(
  outer: UObject,
) : UFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LinkerPlaceholderFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LinkerPlaceholderFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LinkerPlaceholderFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LinkerPlaceholderFunction

    @JsName("C")
    public fun copy(other: UObject): LinkerPlaceholderFunction

    @JsName("C")
    public fun copy(other: Any): LinkerPlaceholderFunction
  }
}

public open external class MetaData(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MetaData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MetaData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MetaData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MetaData

    @JsName("C")
    public fun copy(other: UObject): MetaData

    @JsName("C")
    public fun copy(other: Any): MetaData
  }
}

public open external class ObjectRedirector(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ObjectRedirector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ObjectRedirector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ObjectRedirector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ObjectRedirector

    @JsName("C")
    public fun copy(other: UObject): ObjectRedirector

    @JsName("C")
    public fun copy(other: Any): ObjectRedirector
  }
}

public open external class Property(
  outer: UObject,
) : Field {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Property

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Property

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Property

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Property

    @JsName("C")
    public fun copy(other: UObject): Property

    @JsName("C")
    public fun copy(other: Any): Property
  }
}

public open external class EnumProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnumProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnumProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnumProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnumProperty

    @JsName("C")
    public fun copy(other: UObject): EnumProperty

    @JsName("C")
    public fun copy(other: Any): EnumProperty
  }
}

public open external class ArrayProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArrayProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArrayProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArrayProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArrayProperty

    @JsName("C")
    public fun copy(other: UObject): ArrayProperty

    @JsName("C")
    public fun copy(other: Any): ArrayProperty
  }
}

public open external class ObjectPropertyBase(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ObjectPropertyBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ObjectPropertyBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ObjectPropertyBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ObjectPropertyBase

    @JsName("C")
    public fun copy(other: UObject): ObjectPropertyBase

    @JsName("C")
    public fun copy(other: Any): ObjectPropertyBase
  }
}

public open external class BoolProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoolProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoolProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoolProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoolProperty

    @JsName("C")
    public fun copy(other: UObject): BoolProperty

    @JsName("C")
    public fun copy(other: Any): BoolProperty
  }
}

public open external class NumericProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NumericProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NumericProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NumericProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NumericProperty

    @JsName("C")
    public fun copy(other: UObject): NumericProperty

    @JsName("C")
    public fun copy(other: Any): NumericProperty
  }
}

public open external class ByteProperty(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ByteProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ByteProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ByteProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ByteProperty

    @JsName("C")
    public fun copy(other: UObject): ByteProperty

    @JsName("C")
    public fun copy(other: Any): ByteProperty
  }
}

public open external class ObjectProperty(
  outer: UObject,
) : ObjectPropertyBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ObjectProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ObjectProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ObjectProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ObjectProperty

    @JsName("C")
    public fun copy(other: UObject): ObjectProperty

    @JsName("C")
    public fun copy(other: Any): ObjectProperty
  }
}

public open external class ClassProperty(
  outer: UObject,
) : ObjectProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClassProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClassProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClassProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClassProperty

    @JsName("C")
    public fun copy(other: UObject): ClassProperty

    @JsName("C")
    public fun copy(other: Any): ClassProperty
  }
}

public open external class DelegateProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DelegateProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DelegateProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DelegateProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DelegateProperty

    @JsName("C")
    public fun copy(other: UObject): DelegateProperty

    @JsName("C")
    public fun copy(other: Any): DelegateProperty
  }
}

public open external class DoubleProperty(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DoubleProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DoubleProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DoubleProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DoubleProperty

    @JsName("C")
    public fun copy(other: UObject): DoubleProperty

    @JsName("C")
    public fun copy(other: Any): DoubleProperty
  }
}

public open external class FloatProperty(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FloatProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FloatProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FloatProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FloatProperty

    @JsName("C")
    public fun copy(other: UObject): FloatProperty

    @JsName("C")
    public fun copy(other: Any): FloatProperty
  }
}

public open external class IntProperty(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IntProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IntProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IntProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IntProperty

    @JsName("C")
    public fun copy(other: UObject): IntProperty

    @JsName("C")
    public fun copy(other: Any): IntProperty
  }
}

public open external class Int8Property(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Int8Property

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Int8Property

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Int8Property

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Int8Property

    @JsName("C")
    public fun copy(other: UObject): Int8Property

    @JsName("C")
    public fun copy(other: Any): Int8Property
  }
}

public open external class Int16Property(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Int16Property

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Int16Property

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Int16Property

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Int16Property

    @JsName("C")
    public fun copy(other: UObject): Int16Property

    @JsName("C")
    public fun copy(other: Any): Int16Property
  }
}

public open external class Int64Property(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Int64Property

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Int64Property

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Int64Property

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Int64Property

    @JsName("C")
    public fun copy(other: UObject): Int64Property

    @JsName("C")
    public fun copy(other: Any): Int64Property
  }
}

public open external class InterfaceProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterfaceProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterfaceProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterfaceProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterfaceProperty

    @JsName("C")
    public fun copy(other: UObject): InterfaceProperty

    @JsName("C")
    public fun copy(other: Any): InterfaceProperty
  }
}

public open external class LazyObjectProperty(
  outer: UObject,
) : ObjectPropertyBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LazyObjectProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LazyObjectProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LazyObjectProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LazyObjectProperty

    @JsName("C")
    public fun copy(other: UObject): LazyObjectProperty

    @JsName("C")
    public fun copy(other: Any): LazyObjectProperty
  }
}

public open external class MapProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MapProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MapProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MapProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MapProperty

    @JsName("C")
    public fun copy(other: UObject): MapProperty

    @JsName("C")
    public fun copy(other: Any): MapProperty
  }
}

public open external class MulticastDelegateProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MulticastDelegateProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MulticastDelegateProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MulticastDelegateProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MulticastDelegateProperty

    @JsName("C")
    public fun copy(other: UObject): MulticastDelegateProperty

    @JsName("C")
    public fun copy(other: Any): MulticastDelegateProperty
  }
}

public open external class MulticastInlineDelegateProperty(
  outer: UObject,
) : MulticastDelegateProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MulticastInlineDelegateProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MulticastInlineDelegateProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MulticastInlineDelegateProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MulticastInlineDelegateProperty

    @JsName("C")
    public fun copy(other: UObject): MulticastInlineDelegateProperty

    @JsName("C")
    public fun copy(other: Any): MulticastInlineDelegateProperty
  }
}

public open external class MulticastSparseDelegateProperty(
  outer: UObject,
) : MulticastDelegateProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MulticastSparseDelegateProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MulticastSparseDelegateProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MulticastSparseDelegateProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MulticastSparseDelegateProperty

    @JsName("C")
    public fun copy(other: UObject): MulticastSparseDelegateProperty

    @JsName("C")
    public fun copy(other: Any): MulticastSparseDelegateProperty
  }
}

public open external class NameProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NameProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NameProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NameProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NameProperty

    @JsName("C")
    public fun copy(other: UObject): NameProperty

    @JsName("C")
    public fun copy(other: Any): NameProperty
  }
}

public open external class SetProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SetProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SetProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SetProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SetProperty

    @JsName("C")
    public fun copy(other: UObject): SetProperty

    @JsName("C")
    public fun copy(other: Any): SetProperty
  }
}

public open external class SoftObjectProperty(
  outer: UObject,
) : ObjectPropertyBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoftObjectProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoftObjectProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoftObjectProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoftObjectProperty

    @JsName("C")
    public fun copy(other: UObject): SoftObjectProperty

    @JsName("C")
    public fun copy(other: Any): SoftObjectProperty
  }
}

public open external class SoftClassProperty(
  outer: UObject,
) : SoftObjectProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoftClassProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoftClassProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoftClassProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoftClassProperty

    @JsName("C")
    public fun copy(other: UObject): SoftClassProperty

    @JsName("C")
    public fun copy(other: Any): SoftClassProperty
  }
}

public open external class StrProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StrProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StrProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StrProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StrProperty

    @JsName("C")
    public fun copy(other: UObject): StrProperty

    @JsName("C")
    public fun copy(other: Any): StrProperty
  }
}

public open external class StructProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StructProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StructProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StructProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StructProperty

    @JsName("C")
    public fun copy(other: UObject): StructProperty

    @JsName("C")
    public fun copy(other: Any): StructProperty
  }
}

public open external class UInt16Property(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UInt16Property

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UInt16Property

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UInt16Property

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UInt16Property

    @JsName("C")
    public fun copy(other: UObject): UInt16Property

    @JsName("C")
    public fun copy(other: Any): UInt16Property
  }
}

public open external class UInt32Property(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UInt32Property

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UInt32Property

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UInt32Property

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UInt32Property

    @JsName("C")
    public fun copy(other: UObject): UInt32Property

    @JsName("C")
    public fun copy(other: Any): UInt32Property
  }
}

public open external class UInt64Property(
  outer: UObject,
) : NumericProperty {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UInt64Property

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UInt64Property

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UInt64Property

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UInt64Property

    @JsName("C")
    public fun copy(other: UObject): UInt64Property

    @JsName("C")
    public fun copy(other: Any): UInt64Property
  }
}

public open external class WeakObjectProperty(
  outer: UObject,
) : ObjectPropertyBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WeakObjectProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WeakObjectProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WeakObjectProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WeakObjectProperty

    @JsName("C")
    public fun copy(other: UObject): WeakObjectProperty

    @JsName("C")
    public fun copy(other: Any): WeakObjectProperty
  }
}

public open external class TextProperty(
  outer: UObject,
) : Property {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextProperty

    @JsName("C")
    public fun copy(other: UObject): TextProperty

    @JsName("C")
    public fun copy(other: Any): TextProperty
  }
}

public open external class PropertyWrapper(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PropertyWrapper

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PropertyWrapper

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyWrapper

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyWrapper

    @JsName("C")
    public fun copy(other: UObject): PropertyWrapper

    @JsName("C")
    public fun copy(other: Any): PropertyWrapper
  }
}

public open external class MulticastDelegatePropertyWrapper(
  outer: UObject,
) : PropertyWrapper {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MulticastDelegatePropertyWrapper

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MulticastDelegatePropertyWrapper

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MulticastDelegatePropertyWrapper

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MulticastDelegatePropertyWrapper

    @JsName("C")
    public fun copy(other: UObject): MulticastDelegatePropertyWrapper

    @JsName("C")
    public fun copy(other: Any): MulticastDelegatePropertyWrapper
  }
}

public open external class MulticastInlineDelegatePropertyWrapper(
  outer: UObject,
) : MulticastDelegatePropertyWrapper {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MulticastInlineDelegatePropertyWrapper

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MulticastInlineDelegatePropertyWrapper

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MulticastInlineDelegatePropertyWrapper

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MulticastInlineDelegatePropertyWrapper

    @JsName("C")
    public fun copy(other: UObject): MulticastInlineDelegatePropertyWrapper

    @JsName("C")
    public fun copy(other: Any): MulticastInlineDelegatePropertyWrapper
  }
}

public open external class InputCoreTypes(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputCoreTypes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputCoreTypes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputCoreTypes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputCoreTypes

    @JsName("C")
    public fun copy(other: UObject): InputCoreTypes

    @JsName("C")
    public fun copy(other: Any): InputCoreTypes
  }
}

public open external class FontFaceInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FontFaceInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FontFaceInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FontFaceInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FontFaceInterface

    @JsName("C")
    public fun copy(other: UObject): FontFaceInterface

    @JsName("C")
    public fun copy(other: Any): FontFaceInterface
  }
}

public open external class FontProviderInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FontProviderInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FontProviderInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FontProviderInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FontProviderInterface

    @JsName("C")
    public fun copy(other: UObject): FontProviderInterface

    @JsName("C")
    public fun copy(other: Any): FontProviderInterface
  }
}

public open external class SlateTypes(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateTypes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateTypes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateTypes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateTypes

    @JsName("C")
    public fun copy(other: UObject): SlateTypes

    @JsName("C")
    public fun copy(other: Any): SlateTypes
  }
}

public open external class SlateWidgetStyleContainerBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateWidgetStyleContainerBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateWidgetStyleContainerBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateWidgetStyleContainerBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateWidgetStyleContainerBase

    @JsName("C")
    public fun copy(other: UObject): SlateWidgetStyleContainerBase

    @JsName("C")
    public fun copy(other: Any): SlateWidgetStyleContainerBase
  }
}

public open external class SlateWidgetStyleAsset(
  outer: UObject,
) : UObject {
  @JsName("CustomStyle")
  public open var customStyle: SlateWidgetStyleContainerBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateWidgetStyleAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateWidgetStyleAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateWidgetStyleAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateWidgetStyleAsset

    @JsName("C")
    public fun copy(other: UObject): SlateWidgetStyleAsset

    @JsName("C")
    public fun copy(other: Any): SlateWidgetStyleAsset
  }
}

public open external class SlateWidgetStyleContainerInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateWidgetStyleContainerInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateWidgetStyleContainerInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateWidgetStyleContainerInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateWidgetStyleContainerInterface

    @JsName("C")
    public fun copy(other: UObject): SlateWidgetStyleContainerInterface

    @JsName("C")
    public fun copy(other: Any): SlateWidgetStyleContainerInterface
  }
}

public open external class StyleColorList {
  @JsName("StyleColors")
  public open var styleColors: LinearColor

  public open fun clone(): StyleColorList

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): StyleColorList

    @JsName("C")
    public fun copy(other: Any): StyleColorList
  }
}

public open external class SlateThemeManager(
  outer: UObject,
) : UObject {
  @JsName("CurrentThemeId")
  public open var currentThemeId: Guid

  @JsName("ActiveColors")
  public open var activeColors: StyleColorList

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateThemeManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateThemeManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateThemeManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateThemeManager

    @JsName("C")
    public fun copy(other: UObject): SlateThemeManager

    @JsName("C")
    public fun copy(other: Any): SlateThemeManager
  }
}

public open external class SlateWidgetStyle {
  public open fun clone(): SlateWidgetStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlateWidgetStyle

    @JsName("C")
    public fun copy(other: Any): SlateWidgetStyle
  }
}

public open external class SlateSound {
  @JsName("ResourceObject")
  public open var resourceObject: UObject

  public open fun clone(): SlateSound

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlateSound

    @JsName("C")
    public fun copy(other: Any): SlateSound
  }
}

public open external class ButtonStyle : SlateWidgetStyle {
  @JsName("Normal")
  public open var normal: SlateBrush

  @JsName("Hovered")
  public open var hovered: SlateBrush

  @JsName("Pressed")
  public open var pressed: SlateBrush

  @JsName("Disabled")
  public open var disabled: SlateBrush

  @JsName("NormalForeground")
  public open var normalForeground: SlateColor

  @JsName("HoveredForeground")
  public open var hoveredForeground: SlateColor

  @JsName("PressedForeground")
  public open var pressedForeground: SlateColor

  @JsName("DisabledForeground")
  public open var disabledForeground: SlateColor

  @JsName("NormalPadding")
  public open var normalPadding: Margin

  @JsName("PressedPadding")
  public open var pressedPadding: Margin

  @JsName("PressedSlateSound")
  public open var pressedSlateSound: SlateSound

  @JsName("HoveredSlateSound")
  public open var hoveredSlateSound: SlateSound

  @JsName("PressedSound")
  public open var pressedSound: String

  @JsName("HoveredSound")
  public open var hoveredSound: String

  public override fun clone(): ButtonStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ButtonStyle

    @JsName("C")
    public fun copy(other: Any): ButtonStyle
  }
}

public open external class ButtonWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("ButtonStyle")
  public open var buttonStyle: ButtonStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ButtonWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ButtonWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ButtonWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ButtonWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): ButtonWidgetStyle

    @JsName("C")
    public fun copy(other: Any): ButtonWidgetStyle
  }
}

@JsName("ESlateCheckBoxType")
public external object SlateCheckBoxType {
  public var CheckBox: String

  public var ToggleButton: String

  @JsName("ESlateCheckBoxType_MAX")
  public var Max: String
}

public open external class CheckBoxStyle : SlateWidgetStyle {
  @JsName("CheckBoxType")
  public open var checkBoxType: String

  @JsName("UncheckedImage")
  public open var uncheckedImage: SlateBrush

  @JsName("UncheckedHoveredImage")
  public open var uncheckedHoveredImage: SlateBrush

  @JsName("UncheckedPressedImage")
  public open var uncheckedPressedImage: SlateBrush

  @JsName("CheckedImage")
  public open var checkedImage: SlateBrush

  @JsName("CheckedHoveredImage")
  public open var checkedHoveredImage: SlateBrush

  @JsName("CheckedPressedImage")
  public open var checkedPressedImage: SlateBrush

  @JsName("UndeterminedImage")
  public open var undeterminedImage: SlateBrush

  @JsName("UndeterminedHoveredImage")
  public open var undeterminedHoveredImage: SlateBrush

  @JsName("UndeterminedPressedImage")
  public open var undeterminedPressedImage: SlateBrush

  @JsName("Padding")
  public open var padding: Margin

  @JsName("BackgroundImage")
  public open var backgroundImage: SlateBrush

  @JsName("BackgroundHoveredImage")
  public open var backgroundHoveredImage: SlateBrush

  @JsName("BackgroundPressedImage")
  public open var backgroundPressedImage: SlateBrush

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("HoveredForeground")
  public open var hoveredForeground: SlateColor

  @JsName("PressedForeground")
  public open var pressedForeground: SlateColor

  @JsName("CheckedForeground")
  public open var checkedForeground: SlateColor

  @JsName("CheckedHoveredForeground")
  public open var checkedHoveredForeground: SlateColor

  @JsName("CheckedPressedForeground")
  public open var checkedPressedForeground: SlateColor

  @JsName("UndeterminedForeground")
  public open var undeterminedForeground: SlateColor

  @JsName("BorderBackgroundColor")
  public open var borderBackgroundColor: SlateColor

  @JsName("CheckedSlateSound")
  public open var checkedSlateSound: SlateSound

  @JsName("UncheckedSlateSound")
  public open var uncheckedSlateSound: SlateSound

  @JsName("HoveredSlateSound")
  public open var hoveredSlateSound: SlateSound

  @JsName("CheckedSound")
  public open var checkedSound: String

  @JsName("UncheckedSound")
  public open var uncheckedSound: String

  @JsName("HoveredSound")
  public open var hoveredSound: String

  public override fun clone(): CheckBoxStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CheckBoxStyle

    @JsName("C")
    public fun copy(other: Any): CheckBoxStyle
  }
}

public open external class CheckBoxWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("CheckBoxStyle")
  public open var checkBoxStyle: CheckBoxStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CheckBoxWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CheckBoxWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CheckBoxWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CheckBoxWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): CheckBoxWidgetStyle

    @JsName("C")
    public fun copy(other: Any): CheckBoxWidgetStyle
  }
}

public open external class ComboButtonStyle : SlateWidgetStyle {
  @JsName("ButtonStyle")
  public open var buttonStyle: ButtonStyle

  @JsName("DownArrowImage")
  public open var downArrowImage: SlateBrush

  @JsName("ShadowOffset")
  public open var shadowOffset: Vector2d

  @JsName("ShadowColorAndOpacity")
  public open var shadowColorAndOpacity: LinearColor

  @JsName("MenuBorderBrush")
  public open var menuBorderBrush: SlateBrush

  @JsName("MenuBorderPadding")
  public open var menuBorderPadding: Margin

  @JsName("ContentPadding")
  public open var contentPadding: Margin

  @JsName("DownArrowPadding")
  public open var downArrowPadding: Margin

  @JsName("DownArrowAlign")
  public open var downArrowAlign: String

  public override fun clone(): ComboButtonStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ComboButtonStyle

    @JsName("C")
    public fun copy(other: Any): ComboButtonStyle
  }
}

public open external class ComboBoxStyle : SlateWidgetStyle {
  @JsName("ComboButtonStyle")
  public open var comboButtonStyle: ComboButtonStyle

  @JsName("PressedSlateSound")
  public open var pressedSlateSound: SlateSound

  @JsName("SelectionChangeSlateSound")
  public open var selectionChangeSlateSound: SlateSound

  @JsName("ContentPadding")
  public open var contentPadding: Margin

  @JsName("MenuRowPadding")
  public open var menuRowPadding: Margin

  @JsName("PressedSound")
  public open var pressedSound: String

  @JsName("SelectionChangeSound")
  public open var selectionChangeSound: String

  public override fun clone(): ComboBoxStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ComboBoxStyle

    @JsName("C")
    public fun copy(other: Any): ComboBoxStyle
  }
}

public open external class ComboBoxWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("ComboBoxStyle")
  public open var comboBoxStyle: ComboBoxStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComboBoxWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComboBoxWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComboBoxWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComboBoxWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): ComboBoxWidgetStyle

    @JsName("C")
    public fun copy(other: Any): ComboBoxWidgetStyle
  }
}

public open external class ComboButtonWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("ComboButtonStyle")
  public open var comboButtonStyle: ComboButtonStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComboButtonWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComboButtonWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComboButtonWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComboButtonWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): ComboButtonWidgetStyle

    @JsName("C")
    public fun copy(other: Any): ComboButtonWidgetStyle
  }
}

public open external class FontOutlineSettings {
  @JsName("OutlineSize")
  public open var outlineSize: Number

  @JsName("bSeparateFillAlpha")
  public open var separateFillAlpha: Boolean

  @JsName("bApplyOutlineToDropShadows")
  public open var applyOutlineToDropShadows: Boolean

  @JsName("OutlineMaterial")
  public open var outlineMaterial: UObject

  @JsName("OutlineColor")
  public open var outlineColor: LinearColor

  public open fun clone(): FontOutlineSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FontOutlineSettings

    @JsName("C")
    public fun copy(other: Any): FontOutlineSettings
  }
}

public open external class SlateFontInfo {
  @JsName("FontObject")
  public open var fontObject: UObject

  @JsName("FontMaterial")
  public open var fontMaterial: UObject

  @JsName("OutlineSettings")
  public open var outlineSettings: FontOutlineSettings

  @JsName("TypefaceFontName")
  public open var typefaceFontName: String

  @JsName("Size")
  public open var size: Number

  @JsName("LetterSpacing")
  public open var letterSpacing: Number

  @JsName("FontName")
  public open var fontName: String

  @JsName("Hinting")
  public open var hinting: String

  public open fun clone(): SlateFontInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlateFontInfo

    @JsName("C")
    public fun copy(other: Any): SlateFontInfo
  }
}

public open external class ScrollBarStyle : SlateWidgetStyle {
  @JsName("HorizontalBackgroundImage")
  public open var horizontalBackgroundImage: SlateBrush

  @JsName("VerticalBackgroundImage")
  public open var verticalBackgroundImage: SlateBrush

  @JsName("VerticalTopSlotImage")
  public open var verticalTopSlotImage: SlateBrush

  @JsName("HorizontalTopSlotImage")
  public open var horizontalTopSlotImage: SlateBrush

  @JsName("VerticalBottomSlotImage")
  public open var verticalBottomSlotImage: SlateBrush

  @JsName("HorizontalBottomSlotImage")
  public open var horizontalBottomSlotImage: SlateBrush

  @JsName("NormalThumbImage")
  public open var normalThumbImage: SlateBrush

  @JsName("HoveredThumbImage")
  public open var hoveredThumbImage: SlateBrush

  @JsName("DraggedThumbImage")
  public open var draggedThumbImage: SlateBrush

  @JsName("Thickness")
  public open var thickness: Number

  public override fun clone(): ScrollBarStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScrollBarStyle

    @JsName("C")
    public fun copy(other: Any): ScrollBarStyle
  }
}

public open external class EditableTextBoxStyle : SlateWidgetStyle {
  @JsName("BackgroundImageNormal")
  public open var backgroundImageNormal: SlateBrush

  @JsName("BackgroundImageHovered")
  public open var backgroundImageHovered: SlateBrush

  @JsName("BackgroundImageFocused")
  public open var backgroundImageFocused: SlateBrush

  @JsName("BackgroundImageReadOnly")
  public open var backgroundImageReadOnly: SlateBrush

  @JsName("Padding")
  public open var padding: Margin

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("BackgroundColor")
  public open var backgroundColor: SlateColor

  @JsName("ReadOnlyForegroundColor")
  public open var readOnlyForegroundColor: SlateColor

  @JsName("FocusedForegroundColor")
  public open var focusedForegroundColor: SlateColor

  @JsName("HScrollBarPadding")
  public open var hScrollBarPadding: Margin

  @JsName("VScrollBarPadding")
  public open var vScrollBarPadding: Margin

  @JsName("ScrollBarStyle")
  public open var scrollBarStyle: ScrollBarStyle

  public override fun clone(): EditableTextBoxStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditableTextBoxStyle

    @JsName("C")
    public fun copy(other: Any): EditableTextBoxStyle
  }
}

public open external class EditableTextBoxWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("EditableTextBoxStyle")
  public open var editableTextBoxStyle: EditableTextBoxStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableTextBoxWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditableTextBoxWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableTextBoxWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableTextBoxWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): EditableTextBoxWidgetStyle

    @JsName("C")
    public fun copy(other: Any): EditableTextBoxWidgetStyle
  }
}

public open external class EditableTextStyle : SlateWidgetStyle {
  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("ColorAndOpacity")
  public open var colorAndOpacity: SlateColor

  @JsName("BackgroundImageSelected")
  public open var backgroundImageSelected: SlateBrush

  @JsName("BackgroundImageComposing")
  public open var backgroundImageComposing: SlateBrush

  @JsName("CaretImage")
  public open var caretImage: SlateBrush

  public override fun clone(): EditableTextStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditableTextStyle

    @JsName("C")
    public fun copy(other: Any): EditableTextStyle
  }
}

public open external class EditableTextWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("EditableTextStyle")
  public open var editableTextStyle: EditableTextStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableTextWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditableTextWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableTextWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableTextWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): EditableTextWidgetStyle

    @JsName("C")
    public fun copy(other: Any): EditableTextWidgetStyle
  }
}

public open external class ProgressBarStyle : SlateWidgetStyle {
  @JsName("BackgroundImage")
  public open var backgroundImage: SlateBrush

  @JsName("FillImage")
  public open var fillImage: SlateBrush

  @JsName("MarqueeImage")
  public open var marqueeImage: SlateBrush

  @JsName("EnableFillAnimation")
  public open var enableFillAnimation: Boolean

  public override fun clone(): ProgressBarStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ProgressBarStyle

    @JsName("C")
    public fun copy(other: Any): ProgressBarStyle
  }
}

public open external class ProgressWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("ProgressBarStyle")
  public open var progressBarStyle: ProgressBarStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProgressWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProgressWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProgressWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProgressWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): ProgressWidgetStyle

    @JsName("C")
    public fun copy(other: Any): ProgressWidgetStyle
  }
}

public open external class ScrollBarWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("ScrollBarStyle")
  public open var scrollBarStyle: ScrollBarStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScrollBarWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScrollBarWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScrollBarWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScrollBarWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): ScrollBarWidgetStyle

    @JsName("C")
    public fun copy(other: Any): ScrollBarWidgetStyle
  }
}

public open external class ScrollBoxStyle : SlateWidgetStyle {
  @JsName("BarThickness")
  public open var barThickness: Number

  @JsName("TopShadowBrush")
  public open var topShadowBrush: SlateBrush

  @JsName("BottomShadowBrush")
  public open var bottomShadowBrush: SlateBrush

  @JsName("LeftShadowBrush")
  public open var leftShadowBrush: SlateBrush

  @JsName("RightShadowBrush")
  public open var rightShadowBrush: SlateBrush

  public override fun clone(): ScrollBoxStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScrollBoxStyle

    @JsName("C")
    public fun copy(other: Any): ScrollBoxStyle
  }
}

public open external class ScrollBoxWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("ScrollBoxStyle")
  public open var scrollBoxStyle: ScrollBoxStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScrollBoxWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScrollBoxWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScrollBoxWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScrollBoxWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): ScrollBoxWidgetStyle

    @JsName("C")
    public fun copy(other: Any): ScrollBoxWidgetStyle
  }
}

public open external class SlateSettings(
  outer: UObject,
) : UObject {
  @JsName("bExplicitCanvasChildZOrder")
  public open var explicitCanvasChildZOrder: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateSettings

    @JsName("C")
    public fun copy(other: UObject): SlateSettings

    @JsName("C")
    public fun copy(other: Any): SlateSettings
  }
}

public open external class SpinBoxStyle : SlateWidgetStyle {
  @JsName("BackgroundBrush")
  public open var backgroundBrush: SlateBrush

  @JsName("ActiveBackgroundBrush")
  public open var activeBackgroundBrush: SlateBrush

  @JsName("HoveredBackgroundBrush")
  public open var hoveredBackgroundBrush: SlateBrush

  @JsName("ActiveFillBrush")
  public open var activeFillBrush: SlateBrush

  @JsName("HoveredFillBrush")
  public open var hoveredFillBrush: SlateBrush

  @JsName("InactiveFillBrush")
  public open var inactiveFillBrush: SlateBrush

  @JsName("ArrowsImage")
  public open var arrowsImage: SlateBrush

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("TextPadding")
  public open var textPadding: Margin

  @JsName("InsetPadding")
  public open var insetPadding: Margin

  public override fun clone(): SpinBoxStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SpinBoxStyle

    @JsName("C")
    public fun copy(other: Any): SpinBoxStyle
  }
}

public open external class SpinBoxWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("SpinBoxStyle")
  public open var spinBoxStyle: SpinBoxStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpinBoxWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpinBoxWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpinBoxWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpinBoxWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): SpinBoxWidgetStyle

    @JsName("C")
    public fun copy(other: Any): SpinBoxWidgetStyle
  }
}

@JsName("ETextTransformPolicy")
public external object TextTransformPolicy {
  public var None: String

  public var ToLower: String

  public var ToUpper: String

  @JsName("ETextTransformPolicy_MAX")
  public var Max: String
}

@JsName("ETextOverflowPolicy")
public external object TextOverflowPolicy {
  public var Clip: String

  public var Ellipsis: String

  @JsName("ETextOverflowPolicy_MAX")
  public var Max: String
}

public open external class TextBlockStyle : SlateWidgetStyle {
  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("ColorAndOpacity")
  public open var colorAndOpacity: SlateColor

  @JsName("ShadowOffset")
  public open var shadowOffset: Vector2d

  @JsName("ShadowColorAndOpacity")
  public open var shadowColorAndOpacity: LinearColor

  @JsName("SelectedBackgroundColor")
  public open var selectedBackgroundColor: SlateColor

  @JsName("HighlightColor")
  public open var highlightColor: SlateColor

  @JsName("HighlightShape")
  public open var highlightShape: SlateBrush

  @JsName("StrikeBrush")
  public open var strikeBrush: SlateBrush

  @JsName("UnderlineBrush")
  public open var underlineBrush: SlateBrush

  @JsName("TransformPolicy")
  public open var transformPolicy: String

  @JsName("OverflowPolicy")
  public open var overflowPolicy: String

  public override fun clone(): TextBlockStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TextBlockStyle

    @JsName("C")
    public fun copy(other: Any): TextBlockStyle
  }
}

public open external class TextBlockWidgetStyle(
  outer: UObject,
) : SlateWidgetStyleContainerBase {
  @JsName("TextBlockStyle")
  public open var textBlockStyle: TextBlockStyle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextBlockWidgetStyle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextBlockWidgetStyle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextBlockWidgetStyle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextBlockWidgetStyle

    @JsName("C")
    public fun copy(other: UObject): TextBlockWidgetStyle

    @JsName("C")
    public fun copy(other: Any): TextBlockWidgetStyle
  }
}

public open external class ToolMenuBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenuBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenuBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenuBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenuBase

    @JsName("C")
    public fun copy(other: UObject): ToolMenuBase

    @JsName("C")
    public fun copy(other: Any): ToolMenuBase
  }
}

public open external class TypedElementCounterInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementCounterInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementCounterInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementCounterInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementCounterInterface

    @JsName("C")
    public fun copy(other: UObject): TypedElementCounterInterface

    @JsName("C")
    public fun copy(other: Any): TypedElementCounterInterface
  }
}

public open external class TestTypedElementInterfaceA(
  outer: UObject,
) : Interface {
  @JsName("SetDisplayName")
  public open fun setDisplayName(
    inElementHandle: ScriptTypedElementHandle,
    inNewName: String,
    notify: Boolean,
  ): Boolean

  @JsName("GetDisplayName")
  public open fun getDisplayName(inElementHandle: ScriptTypedElementHandle): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestTypedElementInterfaceA

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestTypedElementInterfaceA

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestTypedElementInterfaceA

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestTypedElementInterfaceA

    @JsName("C")
    public fun copy(other: UObject): TestTypedElementInterfaceA

    @JsName("C")
    public fun copy(other: Any): TestTypedElementInterfaceA
  }
}

public open external class TestTypedElementInterfaceB(
  outer: UObject,
) : Interface {
  @JsName("MarkAsTested")
  public open fun markAsTested(inElementHandle: ScriptTypedElementHandle): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestTypedElementInterfaceB

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestTypedElementInterfaceB

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestTypedElementInterfaceB

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestTypedElementInterfaceB

    @JsName("C")
    public fun copy(other: UObject): TestTypedElementInterfaceB

    @JsName("C")
    public fun copy(other: Any): TestTypedElementInterfaceB
  }
}

public open external class TestTypedElementInterfaceC(
  outer: UObject,
) : Interface {
  @JsName("GetIsTested")
  public open fun getIsTested(inElementHandle: ScriptTypedElementHandle): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestTypedElementInterfaceC

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestTypedElementInterfaceC

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestTypedElementInterfaceC

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestTypedElementInterfaceC

    @JsName("C")
    public fun copy(other: UObject): TestTypedElementInterfaceC

    @JsName("C")
    public fun copy(other: Any): TestTypedElementInterfaceC
  }
}

@JsName("TestTypedElementInterfaceA_ImplTyped")
public open external class TestTypedElementInterfaceAImplTyped(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestTypedElementInterfaceAImplTyped

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestTypedElementInterfaceAImplTyped

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestTypedElementInterfaceAImplTyped

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestTypedElementInterfaceAImplTyped

    @JsName("C")
    public fun copy(other: UObject): TestTypedElementInterfaceAImplTyped

    @JsName("C")
    public fun copy(other: Any): TestTypedElementInterfaceAImplTyped
  }
}

@JsName("TestTypedElementInterfaceA_ImplUntyped")
public open external class TestTypedElementInterfaceAImplUntyped(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestTypedElementInterfaceAImplUntyped

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestTypedElementInterfaceAImplUntyped

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestTypedElementInterfaceAImplUntyped

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestTypedElementInterfaceAImplUntyped

    @JsName("C")
    public fun copy(other: UObject): TestTypedElementInterfaceAImplUntyped

    @JsName("C")
    public fun copy(other: Any): TestTypedElementInterfaceAImplUntyped
  }
}

@JsName("TestTypedElementInterfaceBAndC_Typed")
public open external class TestTypedElementInterfaceBAndCTyped(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TestTypedElementInterfaceBAndCTyped

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TestTypedElementInterfaceBAndCTyped

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TestTypedElementInterfaceBAndCTyped

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TestTypedElementInterfaceBAndCTyped

    @JsName("C")
    public fun copy(other: UObject): TestTypedElementInterfaceBAndCTyped

    @JsName("C")
    public fun copy(other: Any): TestTypedElementInterfaceBAndCTyped
  }
}

@JsName("T$575")
public external interface ElementHandleProvider {
  @JsName("ElementHandle")
  public var elementHandle: ScriptTypedElementHandle
}

public open external class TypedElementHandleLibrary(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementHandleLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementHandleLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementHandleLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementHandleLibrary

    @JsName("Release")
    public fun release(elementHandle: ScriptTypedElementHandle): ElementHandleProvider

    @JsName("NotEqual")
    public fun notEqual(LHS: ScriptTypedElementHandle, RHS: ScriptTypedElementHandle): Boolean

    @JsName("IsSet")
    public fun isSet(elementHandle: ScriptTypedElementHandle): Boolean

    @JsName("Equal")
    public fun equal(LHS: ScriptTypedElementHandle, RHS: ScriptTypedElementHandle): Boolean

    @JsName("C")
    public fun copy(other: UObject): TypedElementHandleLibrary

    @JsName("C")
    public fun copy(other: Any): TypedElementHandleLibrary
  }
}

public open external class ScriptTypedElementListProxy {
  public open fun clone(): ScriptTypedElementListProxy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScriptTypedElementListProxy

    @JsName("C")
    public fun copy(other: Any): ScriptTypedElementListProxy
  }
}

public open external class TypedElementRegistry(
  outer: UObject,
) : UObject {
  @JsName("GetElementInterface")
  public open fun getElementInterface(inElementHandle: ScriptTypedElementHandle,
      inBaseInterfaceType: UnrealEngineClass): UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementRegistry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementRegistry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementRegistry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementRegistry

    @JsName("GetInstance")
    public fun getInstance(): TypedElementRegistry

    @JsName("C")
    public fun copy(other: UObject): TypedElementRegistry

    @JsName("C")
    public fun copy(other: Any): TypedElementRegistry
  }
}

public open external class TypedElementListLibrary(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementListLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementListLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementListLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementListLibrary

    @JsName("Shrink")
    public fun shrink(elementList: ScriptTypedElementListProxy): Unit

    @JsName("Reset")
    public fun reset(elementList: ScriptTypedElementListProxy): Unit

    @JsName("Reserve")
    public fun reserve(elementList: ScriptTypedElementListProxy, size: Number): Unit

    @JsName("Remove")
    public fun remove(elementList: ScriptTypedElementListProxy,
        elementHandle: ScriptTypedElementHandle): Boolean

    @JsName("Num")
    public fun num(elementList: ScriptTypedElementListProxy): Number

    @JsName("IsValidIndex")
    public fun isValidIndex(elementList: ScriptTypedElementListProxy, index: Number): Boolean

    @JsName("HasElementsOfType")
    public fun hasElementsOfType(elementList: ScriptTypedElementListProxy, elementTypeName: String):
        Boolean

    @JsName("HasElements")
    public fun hasElements(elementList: ScriptTypedElementListProxy,
        baseInterfaceType: UnrealEngineClass): Boolean

    @JsName("GetElementInterface")
    public fun getElementInterface(
      elementList: ScriptTypedElementListProxy,
      elementHandle: ScriptTypedElementHandle,
      baseInterfaceType: UnrealEngineClass,
    ): UObject

    @JsName("GetElementHandles")
    public fun getElementHandles(elementList: ScriptTypedElementListProxy,
        baseInterfaceType: UnrealEngineClass): Array<ScriptTypedElementHandle>

    @JsName("GetElementHandleAt")
    public fun getElementHandleAt(elementList: ScriptTypedElementListProxy, index: Number):
        ScriptTypedElementHandle

    @JsName("Empty")
    public fun empty(elementList: ScriptTypedElementListProxy, slack: Number): Unit

    @JsName("CreateScriptElementList")
    public fun createScriptElementList(registry: TypedElementRegistry): ScriptTypedElementListProxy

    @JsName("CountElementsOfType")
    public fun countElementsOfType(elementList: ScriptTypedElementListProxy,
        elementTypeName: String): Number

    @JsName("CountElements")
    public fun countElements(elementList: ScriptTypedElementListProxy,
        baseInterfaceType: UnrealEngineClass): Number

    @JsName("Contains")
    public fun contains(elementList: ScriptTypedElementListProxy,
        elementHandle: ScriptTypedElementHandle): Boolean

    @JsName("Clone")
    public fun clone(elementList: ScriptTypedElementListProxy): ScriptTypedElementListProxy

    @JsName("AppendList")
    public fun appendList(elementList: ScriptTypedElementListProxy,
        otherElementList: ScriptTypedElementListProxy): Unit

    @JsName("Append")
    public fun append(elementList: ScriptTypedElementListProxy,
        elementHandles: Array<ScriptTypedElementHandle>): Unit

    @JsName("Add")
    public fun add(elementList: ScriptTypedElementListProxy,
        elementHandle: ScriptTypedElementHandle): Boolean

    @JsName("C")
    public fun copy(other: UObject): TypedElementListLibrary

    @JsName("C")
    public fun copy(other: Any): TypedElementListLibrary
  }
}

public open external class TypedElementAssetDataInterface(
  outer: UObject,
) : Interface {
  @JsName("GetAssetData")
  public open fun getAssetData(inElementHandle: ScriptTypedElementHandle): AssetData

  @JsName("GetAllReferencedAssetDatas")
  public open fun getAllReferencedAssetDatas(inElementHandle: ScriptTypedElementHandle):
      Array<AssetData>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementAssetDataInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementAssetDataInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementAssetDataInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementAssetDataInterface

    @JsName("C")
    public fun copy(other: UObject): TypedElementAssetDataInterface

    @JsName("C")
    public fun copy(other: Any): TypedElementAssetDataInterface
  }
}

@JsName("T$576")
public external interface OutElementHandlesProvider {
  @JsName("OutElementHandles")
  public var outElementHandles: Array<ScriptTypedElementHandle>
}

public open external class TypedElementHierarchyInterface(
  outer: UObject,
) : Interface {
  @JsName("GetParentElement")
  public open fun getParentElement(inElementHandle: ScriptTypedElementHandle, allowCreate: Boolean):
      ScriptTypedElementHandle

  @JsName("GetChildElements")
  public open fun getChildElements(
    inElementHandle: ScriptTypedElementHandle,
    outElementHandles: Array<ScriptTypedElementHandle>,
    allowCreate: Boolean,
  ): OutElementHandlesProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementHierarchyInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementHierarchyInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementHierarchyInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementHierarchyInterface

    @JsName("C")
    public fun copy(other: UObject): TypedElementHierarchyInterface

    @JsName("C")
    public fun copy(other: Any): TypedElementHierarchyInterface
  }
}

public open external class TypedElementObjectInterface(
  outer: UObject,
) : Interface {
  @JsName("GetObjectClass")
  public open fun getObjectClass(inElementHandle: ScriptTypedElementHandle): UnrealEngineClass

  @JsName("GetObject")
  public open fun getObject(inElementHandle: ScriptTypedElementHandle): UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementObjectInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementObjectInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementObjectInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementObjectInterface

    @JsName("C")
    public fun copy(other: UObject): TypedElementObjectInterface

    @JsName("C")
    public fun copy(other: Any): TypedElementObjectInterface
  }
}

@JsName("ETypedElementChildInclusionMethod")
public external object TypedElementChildInclusionMethod {
  public var None: String

  public var Immediate: String

  public var Recursive: String

  @JsName("ETypedElementChildInclusionMethod_MAX")
  public var Max: String
}

public open external class TypedElementSelectionOptions {
  @JsName("bAllowHidden")
  public open var allowHidden: Boolean

  @JsName("bAllowGroups")
  public open var allowGroups: Boolean

  @JsName("bAllowLegacyNotifications")
  public open var allowLegacyNotifications: Boolean

  @JsName("bWarnIfLocked")
  public open var warnIfLocked: Boolean

  @JsName("ChildElementInclusionMethod")
  public open var childElementInclusionMethod: String

  public open fun clone(): TypedElementSelectionOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TypedElementSelectionOptions

    @JsName("C")
    public fun copy(other: Any): TypedElementSelectionOptions
  }
}

public open external class TypedElementIsSelectedOptions {
  @JsName("bAllowIndirect")
  public open var allowIndirect: Boolean

  public open fun clone(): TypedElementIsSelectedOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TypedElementIsSelectedOptions

    @JsName("C")
    public fun copy(other: Any): TypedElementIsSelectedOptions
  }
}

@JsName("ETypedElementSelectionMethod")
public external object TypedElementSelectionMethod {
  public var Primary: String

  public var Secondary: String

  @JsName("ETypedElementSelectionMethod_MAX")
  public var Max: String
}

public open external class TypedElementSelectionInterface(
  outer: UObject,
) : Interface {
  @JsName("SelectElement")
  public open fun selectElement(
    inElementHandle: ScriptTypedElementHandle,
    inSelectionSet: ScriptTypedElementListProxy,
    inSelectionOptions: TypedElementSelectionOptions,
  ): Boolean

  @JsName("IsElementSelected")
  public open fun isElementSelected(
    inElementHandle: ScriptTypedElementHandle,
    inSelectionSet: ScriptTypedElementListProxy,
    inSelectionOptions: TypedElementIsSelectedOptions,
  ): Boolean

  @JsName("GetSelectionElement")
  public open fun getSelectionElement(
    inElementHandle: ScriptTypedElementHandle,
    inCurrentSelection: ScriptTypedElementListProxy,
    inSelectionMethod: String,
  ): ScriptTypedElementHandle

  @JsName("DeselectElement")
  public open fun deselectElement(
    inElementHandle: ScriptTypedElementHandle,
    inSelectionSet: ScriptTypedElementListProxy,
    inSelectionOptions: TypedElementSelectionOptions,
  ): Boolean

  @JsName("CanSelectElement")
  public open fun canSelectElement(inElementHandle: ScriptTypedElementHandle,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("CanDeselectElement")
  public open fun canDeselectElement(inElementHandle: ScriptTypedElementHandle,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("AllowSelectionModifiers")
  public open fun allowSelectionModifiers(inElementHandle: ScriptTypedElementHandle,
      inSelectionSet: ScriptTypedElementListProxy): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementSelectionInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementSelectionInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementSelectionInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementSelectionInterface

    @JsName("C")
    public fun copy(other: UObject): TypedElementSelectionInterface

    @JsName("C")
    public fun copy(other: Any): TypedElementSelectionInterface
  }
}

public open external class TypedElementSelectionSetState {
  @JsName("CreatedFromSelectionSet")
  public open var createdFromSelectionSet: Any

  public open fun clone(): TypedElementSelectionSetState

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TypedElementSelectionSetState

    @JsName("C")
    public fun copy(other: Any): TypedElementSelectionSetState
  }
}

public open external class TypedElementSelectionSet(
  outer: UObject,
) : UObject {
  @JsName("OnPreSelectionChange")
  public open var onPreSelectionChange:
      UnrealEngineMulticastDelegate<(SelectionSet: TypedElementSelectionSet) -> Unit>

  @JsName("OnSelectionChange")
  public open var onSelectionChange:
      UnrealEngineMulticastDelegate<(SelectionSet: TypedElementSelectionSet) -> Unit>

  @JsName("SetSelection")
  public open fun setSelection(inElementHandles: Array<ScriptTypedElementHandle>,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("SelectElements")
  public open fun selectElements(inElementHandles: Array<ScriptTypedElementHandle>,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("SelectElement")
  public open fun selectElement(inElementHandle: ScriptTypedElementHandle,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("RestoreSelectionState")
  public open fun restoreSelectionState(inSelectionState: TypedElementSelectionSetState): Unit

  @JsName("K2_GetSelectedElementHandles")
  public open fun k2GetSelectedElementHandles(inBaseInterfaceType: UnrealEngineClass):
      Array<ScriptTypedElementHandle>

  @JsName("IsElementSelected")
  public open fun isElementSelected(inElementHandle: ScriptTypedElementHandle,
      inSelectionOptions: TypedElementIsSelectedOptions): Boolean

  @JsName("HasSelectedObjects")
  public open fun hasSelectedObjects(inRequiredClass: UnrealEngineClass): Boolean

  @JsName("HasSelectedElements")
  public open fun hasSelectedElements(inBaseInterfaceType: UnrealEngineClass): Boolean

  @JsName("GetTopSelectedObject")
  public open fun getTopSelectedObject(inRequiredClass: UnrealEngineClass): UObject

  @JsName("GetSelectionElement")
  public open fun getSelectionElement(inElementHandle: ScriptTypedElementHandle,
      inSelectionMethod: String): ScriptTypedElementHandle

  @JsName("GetSelectedObjects")
  public open fun getSelectedObjects(inRequiredClass: UnrealEngineClass): Array<UObject>

  @JsName("GetNumSelectedElements")
  public open fun getNumSelectedElements(): Number

  @JsName("GetCurrentSelectionState")
  public open fun getCurrentSelectionState(): TypedElementSelectionSetState

  @JsName("GetBottomSelectedObject")
  public open fun getBottomSelectedObject(inRequiredClass: UnrealEngineClass): UObject

  @JsName("DeselectElements")
  public open fun deselectElements(inElementHandles: Array<ScriptTypedElementHandle>,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("DeselectElement")
  public open fun deselectElement(inElementHandle: ScriptTypedElementHandle,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("CountSelectedObjects")
  public open fun countSelectedObjects(inRequiredClass: UnrealEngineClass): Number

  @JsName("CountSelectedElements")
  public open fun countSelectedElements(inBaseInterfaceType: UnrealEngineClass): Number

  @JsName("ClearSelection")
  public open fun clearSelection(inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("CanSelectElement")
  public open fun canSelectElement(inElementHandle: ScriptTypedElementHandle,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("CanDeselectElement")
  public open fun canDeselectElement(inElementHandle: ScriptTypedElementHandle,
      inSelectionOptions: TypedElementSelectionOptions): Boolean

  @JsName("AllowSelectionModifiers")
  public open fun allowSelectionModifiers(inElementHandle: ScriptTypedElementHandle): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementSelectionSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementSelectionSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementSelectionSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementSelectionSet

    @JsName("C")
    public fun copy(other: UObject): TypedElementSelectionSet

    @JsName("C")
    public fun copy(other: Any): TypedElementSelectionSet
  }
}

public open external class TypedElementSelectionNormalizationOptions {
  @JsName("bExpandGroups")
  public open var expandGroups: Boolean

  @JsName("bFollowAttachment")
  public open var followAttachment: Boolean

  public open fun clone(): TypedElementSelectionNormalizationOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TypedElementSelectionNormalizationOptions

    @JsName("C")
    public fun copy(other: Any): TypedElementSelectionNormalizationOptions
  }
}

public open external class TypedElementSelectionSetLibrary(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementSelectionSetLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementSelectionSetLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementSelectionSetLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementSelectionSetLibrary

    @JsName("SetSelectionFromList")
    public fun setSelectionFromList(
      selectionSet: TypedElementSelectionSet,
      elementList: ScriptTypedElementListProxy,
      selectionOptions: TypedElementSelectionOptions,
    ): Boolean

    @JsName("SelectElementsFromList")
    public fun selectElementsFromList(
      selectionSet: TypedElementSelectionSet,
      elementList: ScriptTypedElementListProxy,
      selectionOptions: TypedElementSelectionOptions,
    ): Boolean

    @JsName("GetNormalizedSelection")
    public fun getNormalizedSelection(selectionSet: TypedElementSelectionSet,
        normalizationOptions: TypedElementSelectionNormalizationOptions):
        ScriptTypedElementListProxy

    @JsName("GetNormalizedElementList")
    public fun getNormalizedElementList(
      selectionSet: TypedElementSelectionSet,
      elementList: ScriptTypedElementListProxy,
      normalizationOptions: TypedElementSelectionNormalizationOptions,
    ): ScriptTypedElementListProxy

    @JsName("DeselectElementsFromList")
    public fun deselectElementsFromList(
      selectionSet: TypedElementSelectionSet,
      elementList: ScriptTypedElementListProxy,
      selectionOptions: TypedElementSelectionOptions,
    ): Boolean

    @JsName("C")
    public fun copy(other: UObject): TypedElementSelectionSetLibrary

    @JsName("C")
    public fun copy(other: Any): TypedElementSelectionSetLibrary
  }
}

@JsName("EColorVisionDeficiency")
public external object ColorVisionDeficiency {
  public var NormalVision: String

  public var Deuteranope: String

  public var Protanope: String

  public var Tritanope: String

  @JsName("EColorVisionDeficiency_MAX")
  public var Max: String
}

@JsName("ELogTimes")
public external object LogTimes {
  public var None: String

  public var UTC: String

  public var SinceGStartTime: String

  public var Local: String

  @JsName("ELogTimes_MAX")
  public var Max: String
}

@JsName("ELogCategoryColorizationMode")
public external object LogCategoryColorizationMode {
  public var None: String

  public var ColorizeWholeLine: String

  public var ColorizeCategoryOnly: String

  public var ColorizeCategoryAsBadge: String

  @JsName("ELogCategoryColorizationMode_MAX")
  public var Max: String
}

@JsName("EAssetEditorOpenLocation")
public external object AssetEditorOpenLocation {
  public var Default: String

  public var NewWindow: String

  public var MainWindow: String

  public var ContentBrowser: String

  public var LastDockedWindowOrNewWindow: String

  public var LastDockedWindowOrMainWindow: String

  public var LastDockedWindowOrContentBrowser: String

  @JsName("EAssetEditorOpenLocation_MAX")
  public var Max: String
}

public open external class EditorStyleSettings(
  outer: UObject,
) : UObject {
  @JsName("bEnableHighDPIAwareness")
  public open var enableHighDpiAwareness: Boolean

  @JsName("bEnableUserEditorLayoutManagement")
  public open var enableUserEditorLayoutManagement: Boolean

  @JsName("ColorVisionDeficiencyPreviewType")
  public open var colorVisionDeficiencyPreviewType: String

  @JsName("ColorVisionDeficiencySeverity")
  public open var colorVisionDeficiencySeverity: Number

  @JsName("bColorVisionDeficiencyCorrection")
  public open var colorVisionDeficiencyCorrection: Boolean

  @JsName("bColorVisionDeficiencyCorrectionPreviewWithDeficiency")
  public open var colorVisionDeficiencyCorrectionPreviewWithDeficiency: Boolean

  @JsName("SelectionColor")
  public open var selectionColor: LinearColor

  @JsName("bEnableEditorWindowBackgroundColor")
  public open var enableEditorWindowBackgroundColor: Boolean

  @JsName("EditorWindowBackgroundColor")
  public open var editorWindowBackgroundColor: LinearColor

  @JsName("bUseSmallToolBarIcons")
  public open var useSmallToolBarIcons: Boolean

  @JsName("bUseGrid")
  public open var useGrid: Boolean

  @JsName("RegularColor")
  public open var regularColor: LinearColor

  @JsName("RuleColor")
  public open var ruleColor: LinearColor

  @JsName("CenterColor")
  public open var centerColor: LinearColor

  @JsName("GridSnapSize")
  public open var gridSnapSize: Any

  @JsName("GraphBackgroundBrush")
  public open var graphBackgroundBrush: SlateBrush

  @JsName("bShowFriendlyNames")
  public open var showFriendlyNames: Boolean

  @JsName("bShowNativeComponentNames")
  public open var showNativeComponentNames: Boolean

  @JsName("bExpandConfigurationMenus")
  public open var expandConfigurationMenus: Boolean

  @JsName("bShowProjectMenus")
  public open var showProjectMenus: Boolean

  @JsName("bShowLaunchMenus")
  public open var showLaunchMenus: Boolean

  @JsName("bShowAllAdvancedDetails")
  public open var showAllAdvancedDetails: Boolean

  @JsName("bShowHiddenPropertiesWhilePlaying")
  public open var showHiddenPropertiesWhilePlaying: Boolean

  @JsName("LogFontSize")
  public open var logFontSize: Number

  @JsName("LogTimestampMode")
  public open var logTimestampMode: String

  @JsName("bPromoteOutputLogWarningsDuringPIE")
  public open var promoteOutputLogWarningsDuringPie: Boolean

  @JsName("CategoryColorizationMode")
  public open var categoryColorizationMode: String

  @JsName("bCycleToOutputLogDrawer")
  public open var cycleToOutputLogDrawer: Boolean

  @JsName("AssetEditorOpenLocation")
  public open var assetEditorOpenLocation: String

  @JsName("bEnableColorizedEditorTabs")
  public open var enableColorizedEditorTabs: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorStyleSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorStyleSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorStyleSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorStyleSettings

    @JsName("C")
    public fun copy(other: UObject): EditorStyleSettings

    @JsName("C")
    public fun copy(other: Any): EditorStyleSettings
  }
}

public open external class MaterialShaderQualitySettings(
  outer: UObject,
) : UObject {
  @JsName("ForwardSettingMap")
  public open var forwardSettingMap: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialShaderQualitySettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialShaderQualitySettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialShaderQualitySettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialShaderQualitySettings

    @JsName("C")
    public fun copy(other: UObject): MaterialShaderQualitySettings

    @JsName("C")
    public fun copy(other: Any): MaterialShaderQualitySettings
  }
}

@JsName("EMobileShadowQuality")
public external object MobileShadowQuality {
  public var NoFiltering: String

  @JsName("PCF_1x1")
  public var Pcf1x1: String

  @JsName("PCF_3x3")
  public var Pcf3x3: String

  @JsName("PCF_5x5")
  public var Pcf5x5: String

  @JsName("EMobileShadowQuality_MAX")
  public var Max: String
}

public open external class MaterialQualityOverrides {
  @JsName("bDiscardQualityDuringCook")
  public open var discardQualityDuringCook: Boolean

  @JsName("bEnableOverride")
  public open var enableOverride: Boolean

  @JsName("bForceFullyRough")
  public open var forceFullyRough: Boolean

  @JsName("bForceNonMetal")
  public open var forceNonMetal: Boolean

  @JsName("bForceDisableLMDirectionality")
  public open var forceDisableLmDirectionality: Boolean

  @JsName("bForceLQReflections")
  public open var forceLqReflections: Boolean

  @JsName("bForceDisablePreintegratedGF")
  public open var forceDisablePreintegratedGf: Boolean

  @JsName("bDisableMaterialNormalCalculation")
  public open var disableMaterialNormalCalculation: Boolean

  @JsName("MobileShadowQuality")
  public open var mobileShadowQuality: String

  public open fun clone(): MaterialQualityOverrides

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MaterialQualityOverrides

    @JsName("C")
    public fun copy(other: Any): MaterialQualityOverrides
  }
}

public open external class ShaderPlatformQualitySettings(
  outer: UObject,
) : UObject {
  @JsName("QualityOverrides")
  public open var qualityOverrides: MaterialQualityOverrides

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ShaderPlatformQualitySettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ShaderPlatformQualitySettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ShaderPlatformQualitySettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ShaderPlatformQualitySettings

    @JsName("C")
    public fun copy(other: UObject): ShaderPlatformQualitySettings

    @JsName("C")
    public fun copy(other: Any): ShaderPlatformQualitySettings
  }
}

public open external class DeveloperSettings(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DeveloperSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DeveloperSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DeveloperSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DeveloperSettings

    @JsName("C")
    public fun copy(other: UObject): DeveloperSettings

    @JsName("C")
    public fun copy(other: Any): DeveloperSettings
  }
}

public open external class DeveloperSettingsBackedByCVars(
  outer: UObject,
) : DeveloperSettings {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DeveloperSettingsBackedByCVars

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DeveloperSettingsBackedByCVars

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DeveloperSettingsBackedByCVars

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DeveloperSettingsBackedByCVars

    @JsName("C")
    public fun copy(other: UObject): DeveloperSettingsBackedByCVars

    @JsName("C")
    public fun copy(other: Any): DeveloperSettingsBackedByCVars
  }
}

public open external class PlatformSettings(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlatformSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlatformSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlatformSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlatformSettings

    @JsName("C")
    public fun copy(other: UObject): PlatformSettings

    @JsName("C")
    public fun copy(other: Any): PlatformSettings
  }
}

public open external class PlatformSettingsManager(
  outer: UObject,
) : UObject {
  @JsName("SettingsMap")
  public open var settingsMap: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlatformSettingsManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlatformSettingsManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlatformSettingsManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlatformSettingsManager

    @JsName("C")
    public fun copy(other: UObject): PlatformSettingsManager

    @JsName("C")
    public fun copy(other: Any): PlatformSettingsManager
  }
}

@JsName("ECookProgressDisplayMode")
public external object CookProgressDisplayMode {
  public var Nothing: String

  public var RemainingPackages: String

  public var PackageNames: String

  public var NamesAndRemainingPackages: String

  public var Instigators: String

  public var InstigatorsAndCount: String

  public var InstigatorsAndNames: String

  public var InstigatorsAndNamesAndCount: String

  public var Max: String

  @JsName("ECookProgressDisplayMode_MAX")
  public var _Max: String
}

@JsName("EBlueprintComponentDataCookingMethod")
public external object BlueprintComponentDataCookingMethod {
  public var Disabled: String

  public var AllBlueprints: String

  public var EnabledBlueprintsOnly: String

  @JsName("EBlueprintComponentDataCookingMethod_MAX")
  public var Max: String
}

@JsName("ETextureFormatASTCCompressor")
public external object TextureFormatASTCCompressor {
  @JsName("IntelISPC")
  public var IntelIspc: String

  public var Arm: String

  public var Max: String

  @JsName("ETextureFormatASTCCompressor_MAX")
  public var _Max: String
}

public open external class CookerSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bEnableCookOnTheSide")
  public open var enableCookOnTheSide: Boolean

  @JsName("bEnableBuildDDCInBackground")
  public open var enableBuildDdcInBackground: Boolean

  @JsName("bIterativeCookingForLaunchOn")
  public open var iterativeCookingForLaunchOn: Boolean

  @JsName("bIterativeCookingForFileCookContent")
  public open var iterativeCookingForFileCookContent: Boolean

  @JsName("bCookOnTheFlyForLaunchOn")
  public open var cookOnTheFlyForLaunchOn: Boolean

  @JsName("CookProgressDisplayMode")
  public open var cookProgressDisplayMode: String

  @JsName("bIgnoreIniSettingsOutOfDateForIteration")
  public open var ignoreIniSettingsOutOfDateForIteration: Boolean

  @JsName("bIgnoreScriptPackagesOutOfDateForIteration")
  public open var ignoreScriptPackagesOutOfDateForIteration: Boolean

  @JsName("bCompileBlueprintsInDevelopmentMode")
  public open var compileBlueprintsInDevelopmentMode: Boolean

  @JsName("BlueprintComponentDataCookingMethod")
  public open var blueprintComponentDataCookingMethod: String

  @JsName("ClassesExcludedOnDedicatedServer")
  public open var classesExcludedOnDedicatedServer: Array<String>

  @JsName("ModulesExcludedOnDedicatedServer")
  public open var modulesExcludedOnDedicatedServer: Array<String>

  @JsName("ClassesExcludedOnDedicatedClient")
  public open var classesExcludedOnDedicatedClient: Array<String>

  @JsName("ModulesExcludedOnDedicatedClient")
  public open var modulesExcludedOnDedicatedClient: Array<String>

  @JsName("VersionedIntRValues")
  public open var versionedIntRValues: Array<String>

  @JsName("DefaultASTCQualityBySpeed")
  public open var defaultAstcQualityBySpeed: Number

  @JsName("DefaultASTCQualityBySize")
  public open var defaultAstcQualityBySize: Number

  @JsName("DefaultASTCCompressor")
  public open var defaultAstcCompressor: String

  @JsName("bAllowASTCHDRProfile")
  public open var allowAstchdrProfile: Boolean

  @JsName("bAllowCookedDataInEditorBuilds")
  public open var allowCookedDataInEditorBuilds: Boolean

  @JsName("bCookBlueprintComponentTemplateData")
  public open var cookBlueprintComponentTemplateData: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CookerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CookerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CookerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CookerSettings

    @JsName("C")
    public fun copy(other: UObject): CookerSettings

    @JsName("C")
    public fun copy(other: Any): CookerSettings
  }
}

@JsName("EProjectPackagingBuild")
public external object ProjectPackagingBuild {
  public var Always: String

  public var Never: String

  public var IfProjectHasCode: String

  public var IfEditorWasBuiltLocally: String

  @JsName("EProjectPackagingBuild_MAX")
  public var Max: String
}

@JsName("EProjectPackagingBuildConfigurations")
public external object ProjectPackagingBuildConfigurations {
  @JsName("PPBC_Debug")
  public var Debug: String

  @JsName("PPBC_DebugGame")
  public var DebugGame: String

  @JsName("PPBC_Development")
  public var Development: String

  @JsName("PPBC_Test")
  public var Test: String

  @JsName("PPBC_Shipping")
  public var Shipping: String

  @JsName("PPBC_MAX")
  public var Max: String
}

public open external class DirectoryPath {
  @JsName("Path")
  public open var path: String

  public open fun clone(): DirectoryPath

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DirectoryPath

    @JsName("C")
    public fun copy(other: Any): DirectoryPath
  }
}

@JsName("EProjectPackagingBlueprintNativizationMethod")
public external object ProjectPackagingBlueprintNativizationMethod {
  public var Disabled: String

  public var Inclusive: String

  public var Exclusive: String

  @JsName("EProjectPackagingBlueprintNativizationMethod_MAX")
  public var Max: String
}

@JsName("EProjectPackagingInternationalizationPresets")
public external object ProjectPackagingInternationalizationPresets {
  public var English: String

  public var EFIGS: String

  public var EFIGSCJK: String

  public var CJK: String

  public var All: String

  @JsName("EProjectPackagingInternationalizationPresets_MAX")
  public var Max: String
}

public open external class ProjectBuildSettings {
  @JsName("Name")
  public open var name: String

  @JsName("SpecificPlatforms")
  public open var specificPlatforms: Array<String>

  @JsName("BuildCookRunParams")
  public open var buildCookRunParams: String

  public open fun clone(): ProjectBuildSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ProjectBuildSettings

    @JsName("C")
    public fun copy(other: Any): ProjectBuildSettings
  }
}

public open external class ProjectPackagingSettings(
  outer: UObject,
) : UObject {
  @JsName("Build")
  public open var build: String

  @JsName("BuildConfiguration")
  public open var buildConfiguration: String

  @JsName("BuildTarget")
  public open var buildTarget: String

  @JsName("LaunchOnTarget")
  public open var launchOnTarget: String

  @JsName("StagingDirectory")
  public open var stagingDirectory: DirectoryPath

  @JsName("FullRebuild")
  public open var fullRebuild: Boolean

  @JsName("ForDistribution")
  public open var forDistribution: Boolean

  @JsName("IncludeDebugFiles")
  public open var includeDebugFiles: Boolean

  @JsName("BlueprintNativizationMethod")
  public open var blueprintNativizationMethod: String

  @JsName("NativizeBlueprintAssets")
  public open var nativizeBlueprintAssets: Array<FilePath>

  @JsName("bIncludeNativizedAssetsInProjectGeneration")
  public open var includeNativizedAssetsInProjectGeneration: Boolean

  @JsName("bExcludeMonolithicEngineHeadersInNativizedCode")
  public open var excludeMonolithicEngineHeadersInNativizedCode: Boolean

  @JsName("UsePakFile")
  public open var usePakFile: Boolean

  @JsName("bUseIoStore")
  public open var useIoStore: Boolean

  @JsName("bUseZenStore")
  public open var useZenStore: Boolean

  @JsName("bMakeBinaryConfig")
  public open var makeBinaryConfig: Boolean

  @JsName("bGenerateChunks")
  public open var generateChunks: Boolean

  @JsName("bGenerateNoChunks")
  public open var generateNoChunks: Boolean

  @JsName("bChunkHardReferencesOnly")
  public open var chunkHardReferencesOnly: Boolean

  @JsName("bForceOneChunkPerFile")
  public open var forceOneChunkPerFile: Boolean

  @JsName("MaxChunkSize")
  public open var maxChunkSize: Any

  @JsName("bBuildHttpChunkInstallData")
  public open var buildHttpChunkInstallData: Boolean

  @JsName("HttpChunkInstallDataDirectory")
  public open var httpChunkInstallDataDirectory: DirectoryPath

  @JsName("bCompressed")
  public open var compressed: Boolean

  @JsName("PackageCompressionFormat")
  public open var packageCompressionFormat: String

  @JsName("bForceUseProjectCompressionFormatIgnoreHardwareOverride")
  public open var forceUseProjectCompressionFormatIgnoreHardwareOverride: Boolean

  @JsName("PackageAdditionalCompressionOptions")
  public open var packageAdditionalCompressionOptions: String

  @JsName("PackageCompressionMethod")
  public open var packageCompressionMethod: String

  @JsName("PackageCompressionLevel_DebugDevelopment")
  public open var packageCompressionLevelDebugDevelopment: Number

  @JsName("PackageCompressionLevel_TestShipping")
  public open var packageCompressionLevelTestShipping: Number

  @JsName("PackageCompressionLevel_Distribution")
  public open var packageCompressionLevelDistribution: Number

  @JsName("PackageCompressionMinBytesSaved")
  public open var packageCompressionMinBytesSaved: Number

  @JsName("PackageCompressionMinPercentSaved")
  public open var packageCompressionMinPercentSaved: Number

  @JsName("bPackageCompressionEnableDDC")
  public open var packageCompressionEnableDdc: Boolean

  @JsName("PackageCompressionMinSizeToConsiderDDC")
  public open var packageCompressionMinSizeToConsiderDdc: Number

  @JsName("HttpChunkInstallDataVersion")
  public open var httpChunkInstallDataVersion: String

  @JsName("IncludePrerequisites")
  public open var includePrerequisites: Boolean

  @JsName("IncludeAppLocalPrerequisites")
  public open var includeAppLocalPrerequisites: Boolean

  @JsName("bShareMaterialShaderCode")
  public open var shareMaterialShaderCode: Boolean

  @JsName("bDeterministicShaderCodeOrder")
  public open var deterministicShaderCodeOrder: Boolean

  @JsName("bSharedMaterialNativeLibraries")
  public open var sharedMaterialNativeLibraries: Boolean

  @JsName("ApplocalPrerequisitesDirectory")
  public open var applocalPrerequisitesDirectory: DirectoryPath

  @JsName("IncludeCrashReporter")
  public open var includeCrashReporter: Boolean

  @JsName("InternationalizationPreset")
  public open var internationalizationPreset: String

  @JsName("CulturesToStage")
  public open var culturesToStage: Array<String>

  @JsName("LocalizationTargetsToChunk")
  public open var localizationTargetsToChunk: Array<String>

  @JsName("LocalizationTargetCatchAllChunkId")
  public open var localizationTargetCatchAllChunkId: Number

  @JsName("bCookAll")
  public open var cookAll: Boolean

  @JsName("bCookMapsOnly")
  public open var cookMapsOnly: Boolean

  @JsName("bEncryptIniFiles")
  public open var encryptIniFiles: Boolean

  @JsName("bEncryptPakIndex")
  public open var encryptPakIndex: Boolean

  @JsName("GenerateEarlyDownloaderPakFile")
  public open var generateEarlyDownloaderPakFile: Boolean

  @JsName("bSkipEditorContent")
  public open var skipEditorContent: Boolean

  @JsName("bSkipMovies")
  public open var skipMovies: Boolean

  @JsName("UFSMovies")
  public open var ufsMovies: Array<String>

  @JsName("NonUFSMovies")
  public open var nonUfsMovies: Array<String>

  @JsName("CompressedChunkWildcard")
  public open var compressedChunkWildcard: Array<String>

  @JsName("IniKeyBlacklist")
  public open var iniKeyBlacklist: Array<String>

  @JsName("IniSectionBlacklist")
  public open var iniSectionBlacklist: Array<String>

  @JsName("EarlyDownloaderPakFileFiles")
  public open var earlyDownloaderPakFileFiles: Array<String>

  @JsName("MapsToCook")
  public open var mapsToCook: Array<FilePath>

  @JsName("DirectoriesToAlwaysCook")
  public open var directoriesToAlwaysCook: Array<DirectoryPath>

  @JsName("DirectoriesToNeverCook")
  public open var directoriesToNeverCook: Array<DirectoryPath>

  @JsName("TestDirectoriesToNotSearch")
  public open var testDirectoriesToNotSearch: Array<DirectoryPath>

  @JsName("DirectoriesToAlwaysStageAsUFS")
  public open var directoriesToAlwaysStageAsUfs: Array<DirectoryPath>

  @JsName("DirectoriesToAlwaysStageAsNonUFS")
  public open var directoriesToAlwaysStageAsNonUfs: Array<DirectoryPath>

  @JsName("DirectoriesToAlwaysStageAsUFSServer")
  public open var directoriesToAlwaysStageAsUfsServer: Array<DirectoryPath>

  @JsName("DirectoriesToAlwaysStageAsNonUFSServer")
  public open var directoriesToAlwaysStageAsNonUfsServer: Array<DirectoryPath>

  @JsName("ProjectCustomBuilds")
  public open var projectCustomBuilds: Array<ProjectBuildSettings>

  @JsName("EngineCustomBuilds")
  public open var engineCustomBuilds: Array<ProjectBuildSettings>

  @JsName("PerPlatformBuildConfig")
  public open var perPlatformBuildConfig: Any

  @JsName("PerPlatformTargetFlavorName")
  public open var perPlatformTargetFlavorName: Any

  @JsName("PerPlatformBuildTarget")
  public open var perPlatformBuildTarget: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProjectPackagingSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProjectPackagingSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProjectPackagingSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProjectPackagingSettings

    @JsName("C")
    public fun copy(other: UObject): ProjectPackagingSettings

    @JsName("C")
    public fun copy(other: Any): ProjectPackagingSettings
  }
}

public open external class ClothingAssetFactoryBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothingAssetFactoryBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothingAssetFactoryBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothingAssetFactoryBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothingAssetFactoryBase

    @JsName("C")
    public fun copy(other: UObject): ClothingAssetFactoryBase

    @JsName("C")
    public fun copy(other: Any): ClothingAssetFactoryBase
  }
}

public open external class StatePerObjectConfig(
  outer: UObject,
) : UObject {
  @JsName("PerObjectConfigSection")
  public open var perObjectConfigSection: String

  @JsName("bEnabled")
  public open var enabled: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StatePerObjectConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StatePerObjectConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StatePerObjectConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StatePerObjectConfig

    @JsName("C")
    public fun copy(other: UObject): StatePerObjectConfig

    @JsName("C")
    public fun copy(other: Any): StatePerObjectConfig
  }
}

public open external class EscalationManagerConfig(
  outer: UObject,
) : StatePerObjectConfig {
  @JsName("EscalationSeverity")
  public open var escalationSeverity: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EscalationManagerConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EscalationManagerConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EscalationManagerConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EscalationManagerConfig

    @JsName("C")
    public fun copy(other: UObject): EscalationManagerConfig

    @JsName("C")
    public fun copy(other: Any): EscalationManagerConfig
  }
}

public open external class NetAnalyticsDataConfig {
  @JsName("DataName")
  public open var dataName: String

  @JsName("bEnabled")
  public open var enabled: Boolean

  public open fun clone(): NetAnalyticsDataConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NetAnalyticsDataConfig

    @JsName("C")
    public fun copy(other: Any): NetAnalyticsDataConfig
  }
}

public open external class NetAnalyticsAggregatorConfig(
  outer: UObject,
) : UObject {
  @JsName("NetAnalyticsData")
  public open var netAnalyticsData: Array<NetAnalyticsDataConfig>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NetAnalyticsAggregatorConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NetAnalyticsAggregatorConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NetAnalyticsAggregatorConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NetAnalyticsAggregatorConfig

    @JsName("C")
    public fun copy(other: UObject): NetAnalyticsAggregatorConfig

    @JsName("C")
    public fun copy(other: Any): NetAnalyticsAggregatorConfig
  }
}

public open external class JsonUtilitiesDummyObject(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): JsonUtilitiesDummyObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): JsonUtilitiesDummyObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): JsonUtilitiesDummyObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): JsonUtilitiesDummyObject

    @JsName("C")
    public fun copy(other: UObject): JsonUtilitiesDummyObject

    @JsName("C")
    public fun copy(other: Any): JsonUtilitiesDummyObject
  }
}

public open external class AssetRegistryImpl(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetRegistryImpl

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetRegistryImpl

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetRegistryImpl

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetRegistryImpl

    @JsName("C")
    public fun copy(other: UObject): AssetRegistryImpl

    @JsName("C")
    public fun copy(other: Any): AssetRegistryImpl
  }
}

@JsName("ARFilter")
public open external class ArFilter {
  @JsName("PackageNames")
  public open var packageNames: Array<String>

  @JsName("PackagePaths")
  public open var packagePaths: Array<String>

  @JsName("ObjectPaths")
  public open var objectPaths: Array<String>

  @JsName("ClassNames")
  public open var classNames: Array<String>

  @JsName("RecursiveClassesExclusionSet")
  public open var recursiveClassesExclusionSet: Any

  @JsName("bRecursivePaths")
  public open var recursivePaths: Boolean

  @JsName("bRecursiveClasses")
  public open var recursiveClasses: Boolean

  @JsName("bIncludeOnlyOnDiskAssets")
  public open var includeOnlyOnDiskAssets: Boolean

  public open fun clone(): ArFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArFilter

    @JsName("C")
    public fun copy(other: Any): ArFilter
  }
}

public open external class TagAndValue {
  @JsName("Tag")
  public open var tag: String

  @JsName("Value")
  public open var value: String

  public open fun clone(): TagAndValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TagAndValue

    @JsName("C")
    public fun copy(other: Any): TagAndValue
  }
}

@JsName("T$577")
public external interface Object577 {
  @JsName("OutTagValue")
  public var outTagValue: String

  @JsName("$")
  public var value: Boolean
}

public open external class AssetRegistryHelpers(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetRegistryHelpers

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetRegistryHelpers

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetRegistryHelpers

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetRegistryHelpers

    @JsName("ToSoftObjectPath")
    public fun toSoftObjectPath(inAssetData: AssetData): SoftObjectPath

    @JsName("SetFilterTagsAndValues")
    public fun setFilterTagsAndValues(inFilter: ArFilter, inTagsAndValues: Array<TagAndValue>):
        ArFilter

    @JsName("IsValid")
    public fun isValid(inAssetData: AssetData): Boolean

    @JsName("IsUAsset")
    public fun isUAsset(inAssetData: AssetData): Boolean

    @JsName("IsRedirector")
    public fun isRedirector(inAssetData: AssetData): Boolean

    @JsName("IsAssetLoaded")
    public fun isAssetLoaded(inAssetData: AssetData): Boolean

    @JsName("GetTagValue")
    public fun getTagValue(
      inAssetData: AssetData,
      inTagName: String,
      outTagValue: String,
    ): Object577

    @JsName("GetFullName")
    public fun getFullName(inAssetData: AssetData): String

    @JsName("GetExportTextName")
    public fun getExportTextName(inAssetData: AssetData): String

    @JsName("GetClass")
    public fun getClass(inAssetData: AssetData): UnrealEngineClass

    @JsName("GetAsset")
    public fun getAsset(inAssetData: AssetData): UObject

    @JsName("CreateAssetData")
    public fun createAssetData(inAsset: UObject, allowBlueprintClass: Boolean): AssetData

    @JsName("C")
    public fun copy(other: UObject): AssetRegistryHelpers

    @JsName("C")
    public fun copy(other: Any): AssetRegistryHelpers
  }
}

public open external class AssetRegistryDependencyOptions {
  @JsName("bIncludeSoftPackageReferences")
  public open var includeSoftPackageReferences: Boolean

  @JsName("bIncludeHardPackageReferences")
  public open var includeHardPackageReferences: Boolean

  @JsName("bIncludeSearchableNames")
  public open var includeSearchableNames: Boolean

  @JsName("bIncludeSoftManagementReferences")
  public open var includeSoftManagementReferences: Boolean

  @JsName("bIncludeHardManagementReferences")
  public open var includeHardManagementReferences: Boolean

  public open fun clone(): AssetRegistryDependencyOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetRegistryDependencyOptions

    @JsName("C")
    public fun copy(other: Any): AssetRegistryDependencyOptions
  }
}

@JsName("T$578")
public external interface AssetDataListProvider {
  @JsName("AssetDataList")
  public var assetDataList: Array<AssetData>
}

@JsName("T$580")
public external interface Object580 {
  @JsName("OutReferencers")
  public var outReferencers: Array<String>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$581")
public external interface Object581 {
  @JsName("OutDependencies")
  public var outDependencies: Array<String>

  @JsName("$")
  public var value: Boolean
}

@JsName("T$582")
public external interface OutPathListProvider {
  @JsName("OutPathList")
  public var outPathList: Array<String>
}

@JsName("T$583")
public external interface Object583 {
  @JsName("OutAssetData")
  public var outAssetData: Array<AssetData>

  @JsName("$")
  public var value: Boolean
}

public open external class AssetRegistry(
  outer: UObject,
) : Interface {
  @JsName("WaitForPackage")
  public open fun waitForPackage(packageName: String): Unit

  @JsName("WaitForCompletion")
  public open fun waitForCompletion(): Unit

  @JsName("UseFilterToExcludeAssets")
  public open fun useFilterToExcludeAssets(assetDataList: Array<AssetData>, filter: ArFilter):
      AssetDataListProvider

  @JsName("SearchAllAssets")
  public open fun searchAllAssets(synchronousSearch: Boolean): Unit

  @JsName("ScanPathsSynchronous")
  public open fun scanPathsSynchronous(
    inPaths: Array<String>,
    forceRescan: Boolean,
    ignoreDenyListScanFilters: Boolean,
  ): Unit

  @JsName("ScanModifiedAssetFiles")
  public open fun scanModifiedAssetFiles(inFilePaths: Array<String>): Unit

  @JsName("ScanFilesSynchronous")
  public open fun scanFilesSynchronous(inFilePaths: Array<String>, forceRescan: Boolean): Unit

  @JsName("RunAssetsThroughFilter")
  public open fun runAssetsThroughFilter(assetDataList: Array<AssetData>, filter: ArFilter):
      AssetDataListProvider

  @JsName("PrioritizeSearchPath")
  public open fun prioritizeSearchPath(pathToPrioritize: String): Unit

  @JsName("K2_GetReferencers")
  public open fun k2GetReferencers(
    packageName: String,
    referenceOptions: AssetRegistryDependencyOptions,
    outReferencers: Array<String>,
  ): Object580

  @JsName("K2_GetDependencies")
  public open fun k2GetDependencies(
    packageName: String,
    dependencyOptions: AssetRegistryDependencyOptions,
    outDependencies: Array<String>,
  ): Object581

  @JsName("IsSearchAsync")
  public open fun isSearchAsync(): Boolean

  @JsName("IsSearchAllAssets")
  public open fun isSearchAllAssets(): Boolean

  @JsName("IsLoadingAssets")
  public open fun isLoadingAssets(): Boolean

  @JsName("HasAssets")
  public open fun hasAssets(packagePath: String, recursive: Boolean): Boolean

  @JsName("GetSubPaths")
  public open fun getSubPaths(
    inBasePath: String,
    outPathList: Array<String>,
    inRecurse: Boolean,
  ): OutPathListProvider

  @JsName("GetAssetsByPaths")
  public open fun getAssetsByPaths(
    packagePaths: Array<String>,
    outAssetData: Array<AssetData>,
    recursive: Boolean,
    includeOnlyOnDiskAssets: Boolean,
  ): Object583

  @JsName("GetAssetsByPath")
  public open fun getAssetsByPath(
    packagePath: String,
    outAssetData: Array<AssetData>,
    recursive: Boolean,
    includeOnlyOnDiskAssets: Boolean,
  ): Object583

  @JsName("GetAssetsByPackageName")
  public open fun getAssetsByPackageName(
    packageName: String,
    outAssetData: Array<AssetData>,
    includeOnlyOnDiskAssets: Boolean,
  ): Object583

  @JsName("GetAssetsByClass")
  public open fun getAssetsByClass(
    className: String,
    outAssetData: Array<AssetData>,
    searchSubClasses: Boolean,
  ): Object583

  @JsName("GetAssets")
  public open fun getAssets(filter: ArFilter, outAssetData: Array<AssetData>): Object583

  @JsName("GetAssetByObjectPath")
  public open fun getAssetByObjectPath(objectPath: String, includeOnlyOnDiskAssets: Boolean):
      AssetData

  @JsName("GetAllCachedPaths")
  public open fun getAllCachedPaths(outPathList: Array<String>): OutPathListProvider

  @JsName("GetAllAssets")
  public open fun getAllAssets(outAssetData: Array<AssetData>, includeOnlyOnDiskAssets: Boolean):
      Object583

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetRegistry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetRegistry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetRegistry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetRegistry

    @JsName("C")
    public fun copy(other: UObject): AssetRegistry

    @JsName("C")
    public fun copy(other: Any): AssetRegistry
  }
}

public open external class AutoCompleteCommand {
  @JsName("Command")
  public open var command: String

  @JsName("Desc")
  public open var desc: String

  public open fun clone(): AutoCompleteCommand

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AutoCompleteCommand

    @JsName("C")
    public fun copy(other: Any): AutoCompleteCommand
  }
}

public open external class ConsoleSettings(
  outer: UObject,
) : UObject {
  @JsName("MaxScrollbackSize")
  public open var maxScrollbackSize: Number

  @JsName("ManualAutoCompleteList")
  public open var manualAutoCompleteList: Array<AutoCompleteCommand>

  @JsName("AutoCompleteMapPaths")
  public open var autoCompleteMapPaths: Array<String>

  @JsName("BackgroundOpacityPercentage")
  public open var backgroundOpacityPercentage: Number

  @JsName("bOrderTopToBottom")
  public open var orderTopToBottom: Boolean

  @JsName("bDisplayHelpInAutoComplete")
  public open var displayHelpInAutoComplete: Boolean

  @JsName("InputColor")
  public open var inputColor: Color

  @JsName("HistoryColor")
  public open var historyColor: Color

  @JsName("AutoCompleteCommandColor")
  public open var autoCompleteCommandColor: Color

  @JsName("AutoCompleteCVarColor")
  public open var autoCompleteCVarColor: Color

  @JsName("AutoCompleteFadedColor")
  public open var autoCompleteFadedColor: Color

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConsoleSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConsoleSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConsoleSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConsoleSettings

    @JsName("C")
    public fun copy(other: UObject): ConsoleSettings

    @JsName("C")
    public fun copy(other: Any): ConsoleSettings
  }
}

public open external class TemplateMapInfoOverride {
  @JsName("Thumbnail")
  public open var thumbnail: SoftObjectPath

  @JsName("Map")
  public open var map: SoftObjectPath

  @JsName("DisplayName")
  public open var displayName: String

  public open fun clone(): TemplateMapInfoOverride

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TemplateMapInfoOverride

    @JsName("C")
    public fun copy(other: Any): TemplateMapInfoOverride
  }
}

@JsName("ETwoPlayerSplitScreenType")
public external object TwoPlayerSplitScreenType {
  public var Horizontal: String

  public var Vertical: String

  @JsName("ETwoPlayerSplitScreenType_MAX")
  public var Max: String
}

@JsName("EThreePlayerSplitScreenType")
public external object ThreePlayerSplitScreenType {
  public var FavorTop: String

  public var FavorBottom: String

  public var Vertical: String

  public var Horizontal: String

  @JsName("EThreePlayerSplitScreenType_MAX")
  public var Max: String
}

@JsName("EFourPlayerSplitScreenType")
public external object FourPlayerSplitScreenType {
  public var Grid: String

  public var Vertical: String

  public var Horizontal: String

  @JsName("EFourPlayerSplitScreenType_MAX")
  public var Max: String
}

public open external class GameModeName {
  @JsName("Name")
  public open var name: String

  @JsName("GameMode")
  public open var gameMode: SoftClassPath

  public open fun clone(): GameModeName

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameModeName

    @JsName("C")
    public fun copy(other: Any): GameModeName
  }
}

public open external class GameMapsSettings(
  outer: UObject,
) : UObject {
  @JsName("EditorStartupMap")
  public open var editorStartupMap: SoftObjectPath

  @JsName("EditorTemplateMapOverrides")
  public open var editorTemplateMapOverrides: Array<TemplateMapInfoOverride>

  @JsName("LocalMapOptions")
  public open var localMapOptions: String

  @JsName("TransitionMap")
  public open var transitionMap: SoftObjectPath

  @JsName("bUseSplitscreen")
  public open var useSplitscreen: Boolean

  @JsName("TwoPlayerSplitscreenLayout")
  public open var twoPlayerSplitscreenLayout: String

  @JsName("ThreePlayerSplitscreenLayout")
  public open var threePlayerSplitscreenLayout: String

  @JsName("FourPlayerSplitscreenLayout")
  public open var fourPlayerSplitscreenLayout: String

  @JsName("bOffsetPlayerGamepadIds")
  public open var offsetPlayerGamepadIds: Boolean

  @JsName("GameInstanceClass")
  public open var gameInstanceClass: SoftClassPath

  @JsName("GameDefaultMap")
  public open var gameDefaultMap: SoftObjectPath

  @JsName("ServerDefaultMap")
  public open var serverDefaultMap: SoftObjectPath

  @JsName("GlobalDefaultGameMode")
  public open var globalDefaultGameMode: SoftClassPath

  @JsName("GlobalDefaultServerGameMode")
  public open var globalDefaultServerGameMode: SoftClassPath

  @JsName("GameModeMapPrefixes")
  public open var gameModeMapPrefixes: Array<GameModeName>

  @JsName("GameModeClassAliases")
  public open var gameModeClassAliases: Array<GameModeName>

  @JsName("SetSkipAssigningGamepadToPlayer1")
  public open fun setSkipAssigningGamepadToPlayer1(skipFirstPlayer: Boolean): Unit

  @JsName("GetSkipAssigningGamepadToPlayer1")
  public open fun getSkipAssigningGamepadToPlayer1(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameMapsSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameMapsSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameMapsSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameMapsSettings

    @JsName("GetGameMapsSettings")
    public fun getGameMapsSettings(): GameMapsSettings

    @JsName("C")
    public fun copy(other: UObject): GameMapsSettings

    @JsName("C")
    public fun copy(other: Any): GameMapsSettings
  }
}

public open external class GameNetworkManagerSettings(
  outer: UObject,
) : UObject {
  @JsName("MinDynamicBandwidth")
  public open var minDynamicBandwidth: Number

  @JsName("MaxDynamicBandwidth")
  public open var maxDynamicBandwidth: Number

  @JsName("TotalNetBandwidth")
  public open var totalNetBandwidth: Number

  @JsName("BadPingThreshold")
  public open var badPingThreshold: Number

  @JsName("bIsStandbyCheckingEnabled")
  public open var isStandbyCheckingEnabled: Boolean

  @JsName("StandbyRxCheatTime")
  public open var standbyRxCheatTime: Number

  @JsName("StandbyTxCheatTime")
  public open var standbyTxCheatTime: Number

  @JsName("PercentMissingForRxStandby")
  public open var percentMissingForRxStandby: Number

  @JsName("PercentMissingForTxStandby")
  public open var percentMissingForTxStandby: Number

  @JsName("PercentForBadPing")
  public open var percentForBadPing: Number

  @JsName("JoinInProgressStandbyWaitTime")
  public open var joinInProgressStandbyWaitTime: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameNetworkManagerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameNetworkManagerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameNetworkManagerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameNetworkManagerSettings

    @JsName("C")
    public fun copy(other: UObject): GameNetworkManagerSettings

    @JsName("C")
    public fun copy(other: Any): GameNetworkManagerSettings
  }
}

public open external class GameSessionSettings(
  outer: UObject,
) : UObject {
  @JsName("MaxSpectators")
  public open var maxSpectators: Number

  @JsName("MaxPlayers")
  public open var maxPlayers: Number

  @JsName("bRequiresPushToTalk")
  public open var requiresPushToTalk: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameSessionSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameSessionSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameSessionSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameSessionSettings

    @JsName("C")
    public fun copy(other: UObject): GameSessionSettings

    @JsName("C")
    public fun copy(other: Any): GameSessionSettings
  }
}

public open external class GeneralEngineSettings(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeneralEngineSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeneralEngineSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeneralEngineSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeneralEngineSettings

    @JsName("C")
    public fun copy(other: UObject): GeneralEngineSettings

    @JsName("C")
    public fun copy(other: Any): GeneralEngineSettings
  }
}

public open external class GeneralProjectSettings(
  outer: UObject,
) : UObject {
  @JsName("CompanyName")
  public open var companyName: String

  @JsName("CompanyDistinguishedName")
  public open var companyDistinguishedName: String

  @JsName("CopyrightNotice")
  public open var copyrightNotice: String

  @JsName("Description")
  public open var description: String

  @JsName("Homepage")
  public open var homepage: String

  @JsName("LicensingTerms")
  public open var licensingTerms: String

  @JsName("PrivacyPolicy")
  public open var privacyPolicy: String

  @JsName("ProjectID")
  public open var projectId: Guid

  @JsName("ProjectName")
  public open var projectName: String

  @JsName("ProjectVersion")
  public open var projectVersion: String

  @JsName("SupportContact")
  public open var supportContact: String

  @JsName("ProjectDisplayedTitle")
  public open var projectDisplayedTitle: String

  @JsName("ProjectDebugTitleInfo")
  public open var projectDebugTitleInfo: String

  @JsName("bShouldWindowPreserveAspectRatio")
  public open var shouldWindowPreserveAspectRatio: Boolean

  @JsName("bUseBorderlessWindow")
  public open var useBorderlessWindow: Boolean

  @JsName("bStartInVR")
  public open var startInVr: Boolean

  @JsName("bAllowWindowResize")
  public open var allowWindowResize: Boolean

  @JsName("bAllowClose")
  public open var allowClose: Boolean

  @JsName("bAllowMaximize")
  public open var allowMaximize: Boolean

  @JsName("bAllowMinimize")
  public open var allowMinimize: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GeneralProjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GeneralProjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GeneralProjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GeneralProjectSettings

    @JsName("C")
    public fun copy(other: UObject): GeneralProjectSettings

    @JsName("C")
    public fun copy(other: Any): GeneralProjectSettings
  }
}

public open external class HudSettings(
  outer: UObject,
) : UObject {
  @JsName("bShowHUD")
  public open var showHud: Boolean

  @JsName("DebugDisplay")
  public open var debugDisplay: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HudSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HudSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HudSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HudSettings

    @JsName("C")
    public fun copy(other: UObject): HudSettings

    @JsName("C")
    public fun copy(other: Any): HudSettings
  }
}

public open external class HandlerComponentFactory(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HandlerComponentFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HandlerComponentFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HandlerComponentFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HandlerComponentFactory

    @JsName("C")
    public fun copy(other: UObject): HandlerComponentFactory

    @JsName("C")
    public fun copy(other: Any): HandlerComponentFactory
  }
}

public open external class PacketHandlerProfileConfig(
  outer: UObject,
) : UObject {
  @JsName("Components")
  public open var components: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PacketHandlerProfileConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PacketHandlerProfileConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PacketHandlerProfileConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PacketHandlerProfileConfig

    @JsName("C")
    public fun copy(other: UObject): PacketHandlerProfileConfig

    @JsName("C")
    public fun copy(other: Any): PacketHandlerProfileConfig
  }
}

public open external class ChaosPhysicalMaterial(
  outer: UObject,
) : UObject {
  @JsName("Friction")
  public open var friction: Number

  @JsName("StaticFriction")
  public open var staticFriction: Number

  @JsName("Restitution")
  public open var restitution: Number

  @JsName("LinearEtherDrag")
  public open var linearEtherDrag: Number

  @JsName("AngularEtherDrag")
  public open var angularEtherDrag: Number

  @JsName("SleepingLinearVelocityThreshold")
  public open var sleepingLinearVelocityThreshold: Number

  @JsName("SleepingAngularVelocityThreshold")
  public open var sleepingAngularVelocityThreshold: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ChaosPhysicalMaterial

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ChaosPhysicalMaterial

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ChaosPhysicalMaterial

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ChaosPhysicalMaterial

    @JsName("C")
    public fun copy(other: UObject): ChaosPhysicalMaterial

    @JsName("C")
    public fun copy(other: Any): ChaosPhysicalMaterial
  }
}

@JsName("EClusterUnionMethod")
public external object ClusterUnionMethod {
  public var PointImplicit: String

  public var DelaunayTriangulation: String

  public var MinimalSpanningSubsetDelaunayTriangulation: String

  public var PointImplicitAugmentedWithMinimalDelaunay: String

  public var None: String

  @JsName("EClusterUnionMethod_MAX")
  public var Max: String
}

public open external class SolverCollisionFilterSettings {
  @JsName("FilterEnabled")
  public open var filterEnabled: Boolean

  @JsName("MinMass")
  public open var minMass: Number

  @JsName("MinSpeed")
  public open var minSpeed: Number

  @JsName("MinImpulse")
  public open var minImpulse: Number

  public open fun clone(): SolverCollisionFilterSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SolverCollisionFilterSettings

    @JsName("C")
    public fun copy(other: Any): SolverCollisionFilterSettings
  }
}

public open external class SolverBreakingFilterSettings {
  @JsName("FilterEnabled")
  public open var filterEnabled: Boolean

  @JsName("MinMass")
  public open var minMass: Number

  @JsName("MinSpeed")
  public open var minSpeed: Number

  @JsName("MinVolume")
  public open var minVolume: Number

  public open fun clone(): SolverBreakingFilterSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SolverBreakingFilterSettings

    @JsName("C")
    public fun copy(other: Any): SolverBreakingFilterSettings
  }
}

public open external class SolverTrailingFilterSettings {
  @JsName("FilterEnabled")
  public open var filterEnabled: Boolean

  @JsName("MinMass")
  public open var minMass: Number

  @JsName("MinSpeed")
  public open var minSpeed: Number

  @JsName("MinVolume")
  public open var minVolume: Number

  public open fun clone(): SolverTrailingFilterSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SolverTrailingFilterSettings

    @JsName("C")
    public fun copy(other: Any): SolverTrailingFilterSettings
  }
}

public open external class ChaosSolverConfiguration {
  @JsName("Iterations")
  public open var iterations: Number

  @JsName("CollisionPairIterations")
  public open var collisionPairIterations: Number

  @JsName("PushOutIterations")
  public open var pushOutIterations: Number

  @JsName("CollisionPushOutPairIterations")
  public open var collisionPushOutPairIterations: Number

  @JsName("CollisionMarginFraction")
  public open var collisionMarginFraction: Number

  @JsName("CollisionMarginMax")
  public open var collisionMarginMax: Number

  @JsName("CollisionCullDistance")
  public open var collisionCullDistance: Number

  @JsName("CollisionMaxPushOutVelocity")
  public open var collisionMaxPushOutVelocity: Number

  @JsName("JointPairIterations")
  public open var jointPairIterations: Number

  @JsName("JointPushOutPairIterations")
  public open var jointPushOutPairIterations: Number

  @JsName("ClusterConnectionFactor")
  public open var clusterConnectionFactor: Number

  @JsName("ClusterUnionConnectionType")
  public open var clusterUnionConnectionType: String

  @JsName("bGenerateCollisionData")
  public open var generateCollisionData: Boolean

  @JsName("CollisionFilterSettings")
  public open var collisionFilterSettings: SolverCollisionFilterSettings

  @JsName("bGenerateBreakData")
  public open var generateBreakData: Boolean

  @JsName("BreakingFilterSettings")
  public open var breakingFilterSettings: SolverBreakingFilterSettings

  @JsName("bGenerateTrailingData")
  public open var generateTrailingData: Boolean

  @JsName("TrailingFilterSettings")
  public open var trailingFilterSettings: SolverTrailingFilterSettings

  @JsName("bGenerateContactGraph")
  public open var generateContactGraph: Boolean

  public open fun clone(): ChaosSolverConfiguration

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ChaosSolverConfiguration

    @JsName("C")
    public fun copy(other: Any): ChaosSolverConfiguration
  }
}

public open external class PhysicsSettingsCore(
  outer: UObject,
) : DeveloperSettings {
  @JsName("DefaultGravityZ")
  public open var defaultGravityZ: Number

  @JsName("DefaultTerminalVelocity")
  public open var defaultTerminalVelocity: Number

  @JsName("DefaultFluidFriction")
  public open var defaultFluidFriction: Number

  @JsName("SimulateScratchMemorySize")
  public open var simulateScratchMemorySize: Number

  @JsName("RagdollAggregateThreshold")
  public open var ragdollAggregateThreshold: Number

  @JsName("TriangleMeshTriangleMinAreaThreshold")
  public open var triangleMeshTriangleMinAreaThreshold: Number

  @JsName("bEnableShapeSharing")
  public open var enableShapeSharing: Boolean

  @JsName("bEnablePCM")
  public open var enablePcm: Boolean

  @JsName("bEnableStabilization")
  public open var enableStabilization: Boolean

  @JsName("bWarnMissingLocks")
  public open var warnMissingLocks: Boolean

  @JsName("bEnable2DPhysics")
  public open var enable2dPhysics: Boolean

  @JsName("bDefaultHasComplexCollision")
  public open var defaultHasComplexCollision: Boolean

  @JsName("BounceThresholdVelocity")
  public open var bounceThresholdVelocity: Number

  @JsName("FrictionCombineMode")
  public open var frictionCombineMode: String

  @JsName("RestitutionCombineMode")
  public open var restitutionCombineMode: String

  @JsName("MaxAngularVelocity")
  public open var maxAngularVelocity: Number

  @JsName("MaxDepenetrationVelocity")
  public open var maxDepenetrationVelocity: Number

  @JsName("ContactOffsetMultiplier")
  public open var contactOffsetMultiplier: Number

  @JsName("MinContactOffset")
  public open var minContactOffset: Number

  @JsName("MaxContactOffset")
  public open var maxContactOffset: Number

  @JsName("bSimulateSkeletalMeshOnDedicatedServer")
  public open var simulateSkeletalMeshOnDedicatedServer: Boolean

  @JsName("DefaultShapeComplexity")
  public open var defaultShapeComplexity: String

  @JsName("SolverOptions")
  public open var solverOptions: ChaosSolverConfiguration

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsSettingsCore

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsSettingsCore

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsSettingsCore

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsSettingsCore

    @JsName("C")
    public fun copy(other: UObject): PhysicsSettingsCore

    @JsName("C")
    public fun copy(other: Any): PhysicsSettingsCore
  }
}

public open external class AudioParameterControllerInterface(
  outer: UObject,
) : Interface {
  @JsName("SetTriggerParameter")
  public open fun setTriggerParameter(inName: String): Unit

  @JsName("SetStringParameter")
  public open fun setStringParameter(inName: String, inValue: String): Unit

  @JsName("SetStringArrayParameter")
  public open fun setStringArrayParameter(inName: String, inValue: Array<String>): Unit

  @JsName("SetParameters_Blueprint")
  public open fun setParametersBlueprint(inParameters: Array<AudioParameter>): Unit

  @JsName("SetObjectParameter")
  public open fun setObjectParameter(inName: String, inValue: UObject): Unit

  @JsName("SetObjectArrayParameter")
  public open fun setObjectArrayParameter(inName: String, inValue: Array<UObject>): Unit

  @JsName("SetIntParameter")
  public open fun setIntParameter(inName: String, inInt: Number): Unit

  @JsName("SetIntArrayParameter")
  public open fun setIntArrayParameter(inName: String, inValue: Array<Number>): Unit

  @JsName("SetFloatParameter")
  public open fun setFloatParameter(inName: String, inFloat: Number): Unit

  @JsName("SetFloatArrayParameter")
  public open fun setFloatArrayParameter(inName: String, inValue: Array<Number>): Unit

  @JsName("SetBoolParameter")
  public open fun setBoolParameter(inName: String, inBool: Boolean): Unit

  @JsName("SetBoolArrayParameter")
  public open fun setBoolArrayParameter(inName: String, inValue: Array<Boolean>): Unit

  @JsName("ResetParameters")
  public open fun resetParameters(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioParameterControllerInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioParameterControllerInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioParameterControllerInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioParameterControllerInterface

    @JsName("C")
    public fun copy(other: UObject): AudioParameterControllerInterface

    @JsName("C")
    public fun copy(other: Any): AudioParameterControllerInterface
  }
}

public open external class AudioCodecEncoderSettings(
  outer: UObject,
) : UObject {
  @JsName("Version")
  public open var version: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioCodecEncoderSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioCodecEncoderSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioCodecEncoderSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioCodecEncoderSettings

    @JsName("C")
    public fun copy(other: UObject): AudioCodecEncoderSettings

    @JsName("C")
    public fun copy(other: Any): AudioCodecEncoderSettings
  }
}

public open external class AudioEndpointSettingsBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioEndpointSettingsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioEndpointSettingsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioEndpointSettingsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioEndpointSettingsBase

    @JsName("C")
    public fun copy(other: UObject): AudioEndpointSettingsBase

    @JsName("C")
    public fun copy(other: Any): AudioEndpointSettingsBase
  }
}

public open external class DummyEndpointSettings(
  outer: UObject,
) : AudioEndpointSettingsBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DummyEndpointSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DummyEndpointSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DummyEndpointSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DummyEndpointSettings

    @JsName("C")
    public fun copy(other: UObject): DummyEndpointSettings

    @JsName("C")
    public fun copy(other: Any): DummyEndpointSettings
  }
}

public open external class SoundfieldEndpointSettingsBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundfieldEndpointSettingsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundfieldEndpointSettingsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundfieldEndpointSettingsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundfieldEndpointSettingsBase

    @JsName("C")
    public fun copy(other: UObject): SoundfieldEndpointSettingsBase

    @JsName("C")
    public fun copy(other: Any): SoundfieldEndpointSettingsBase
  }
}

public open external class SoundfieldEffectSettingsBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundfieldEffectSettingsBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundfieldEffectSettingsBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundfieldEffectSettingsBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundfieldEffectSettingsBase

    @JsName("C")
    public fun copy(other: UObject): SoundfieldEffectSettingsBase

    @JsName("C")
    public fun copy(other: Any): SoundfieldEffectSettingsBase
  }
}

public open external class SoundfieldEffectBase(
  outer: UObject,
) : UObject {
  @JsName("Settings")
  public open var settings: SoundfieldEffectSettingsBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundfieldEffectBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundfieldEffectBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundfieldEffectBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundfieldEffectBase

    @JsName("C")
    public fun copy(other: UObject): SoundfieldEffectBase

    @JsName("C")
    public fun copy(other: Any): SoundfieldEffectBase
  }
}

@JsName("EPcmBitDepthConversion")
public external object PcmBitDepthConversion {
  public var SameAsSource: String

  public var Int16: String

  public var Float32: String

  @JsName("EPcmBitDepthConversion_MAX")
  public var Max: String
}

public open external class AudioPcmEncoderSettings(
  outer: UObject,
) : AudioCodecEncoderSettings {
  @JsName("BitDepthConversion")
  public open var bitDepthConversion: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AudioPcmEncoderSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AudioPcmEncoderSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AudioPcmEncoderSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AudioPcmEncoderSettings

    @JsName("C")
    public fun copy(other: UObject): AudioPcmEncoderSettings

    @JsName("C")
    public fun copy(other: Any): AudioPcmEncoderSettings
  }
}

public open external class ClothConfigBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothConfigBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothConfigBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothConfigBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothConfigBase

    @JsName("C")
    public fun copy(other: UObject): ClothConfigBase

    @JsName("C")
    public fun copy(other: Any): ClothConfigBase
  }
}

public open external class ClothSharedSimConfigBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothSharedSimConfigBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothSharedSimConfigBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothSharedSimConfigBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothSharedSimConfigBase

    @JsName("C")
    public fun copy(other: UObject): ClothSharedSimConfigBase

    @JsName("C")
    public fun copy(other: Any): ClothSharedSimConfigBase
  }
}

public open external class ClothVertBoneData {
  @JsName("NumInfluences")
  public open var numInfluences: Number

  @JsName("BoneIndices")
  public open var boneIndices: Any

  @JsName("BoneWeights")
  public open var boneWeights: Number

  public open fun clone(): ClothVertBoneData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothVertBoneData

    @JsName("C")
    public fun copy(other: Any): ClothVertBoneData
  }
}

@JsName("ClothPhysicalMeshDataBase_Legacy")
public open external class ClothPhysicalMeshDataBaseLegacy(
  outer: UObject,
) : UObject {
  @JsName("Vertices")
  public open var vertices: Array<Vector3f>

  @JsName("Normals")
  public open var normals: Array<Vector3f>

  @JsName("VertexColors")
  public open var vertexColors: Array<Color>

  @JsName("Indices")
  public open var indices: Array<Any>

  @JsName("InverseMasses")
  public open var inverseMasses: Array<Number>

  @JsName("BoneData")
  public open var boneData: Array<ClothVertBoneData>

  @JsName("NumFixedVerts")
  public open var numFixedVerts: Number

  @JsName("MaxBoneWeights")
  public open var maxBoneWeights: Number

  @JsName("SelfCollisionIndices")
  public open var selfCollisionIndices: Array<Any>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothPhysicalMeshDataBaseLegacy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothPhysicalMeshDataBaseLegacy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothPhysicalMeshDataBaseLegacy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothPhysicalMeshDataBaseLegacy

    @JsName("C")
    public fun copy(other: UObject): ClothPhysicalMeshDataBaseLegacy

    @JsName("C")
    public fun copy(other: Any): ClothPhysicalMeshDataBaseLegacy
  }
}

@JsName("EMultiBoxType")
public external object MultiBoxType {
  public var MenuBar: String

  public var ToolBar: String

  public var VerticalToolBar: String

  public var SlimHorizontalToolBar: String

  public var UniformToolBar: String

  public var Menu: String

  public var ButtonRow: String

  @JsName("EMultiBoxType_MAX")
  public var Max: String
}

public open external class ToolMenuOwner {
  public open fun clone(): ToolMenuOwner

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToolMenuOwner

    @JsName("C")
    public fun copy(other: Any): ToolMenuOwner
  }
}

public open external class ToolMenuContext {
  @JsName("ContextObjects")
  public open var contextObjects: Array<UObject>

  public open fun clone(): ToolMenuContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToolMenuContext

    @JsName("C")
    public fun copy(other: Any): ToolMenuContext
  }
}

@JsName("EMultiBlockType")
public external object MultiBlockType {
  public var None: String

  public var ButtonRow: String

  public var EditableText: String

  public var Heading: String

  public var MenuEntry: String

  public var Separator: String

  public var ToolBarButton: String

  public var ToolBarComboButton: String

  public var Widget: String

  @JsName("EMultiBlockType_MAX")
  public var Max: String
}

@JsName("EUserInterfaceActionType")
public external object UserInterfaceActionType {
  public var None: String

  public var Button: String

  public var ToggleButton: String

  public var RadioButton: String

  public var Check: String

  public var CollapsedButton: String

  @JsName("EUserInterfaceActionType_MAX")
  public var Max: String
}

@JsName("EToolMenuInsertType")
public external object ToolMenuInsertType {
  public var Default: String

  public var Before: String

  public var After: String

  public var First: String

  @JsName("EToolMenuInsertType_MAX")
  public var Max: String
}

public open external class ToolMenuInsert {
  @JsName("Name")
  public open var name: String

  public open var position: String

  public open fun clone(): ToolMenuInsert

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToolMenuInsert

    @JsName("C")
    public fun copy(other: Any): ToolMenuInsert
  }
}

public open external class ScriptSlateIcon {
  @JsName("StyleSetName")
  public open var styleSetName: String

  @JsName("StyleName")
  public open var styleName: String

  @JsName("SmallStyleName")
  public open var smallStyleName: String

  public open fun clone(): ScriptSlateIcon

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ScriptSlateIcon

    @JsName("C")
    public fun copy(other: Any): ScriptSlateIcon
  }
}

public open external class ToolMenuEntryScriptDataAdvanced {
  @JsName("TutorialHighlight")
  public open var tutorialHighlight: String

  @JsName("EntryType")
  public open var entryType: String

  @JsName("UserInterfaceActionType")
  public open var userInterfaceActionType: String

  @JsName("StyleNameOverride")
  public open var styleNameOverride: String

  @JsName("bIsSubMenu")
  public open var isSubMenu: Boolean

  @JsName("bOpenSubMenuOnClick")
  public open var openSubMenuOnClick: Boolean

  @JsName("bShouldCloseWindowAfterMenuSelection")
  public open var shouldCloseWindowAfterMenuSelection: Boolean

  @JsName("bSimpleComboBox")
  public open var simpleComboBox: Boolean

  public open fun clone(): ToolMenuEntryScriptDataAdvanced

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToolMenuEntryScriptDataAdvanced

    @JsName("C")
    public fun copy(other: Any): ToolMenuEntryScriptDataAdvanced
  }
}

public open external class ToolMenuEntryScriptData {
  @JsName("Menu")
  public open var menu: String

  @JsName("Section")
  public open var section: String

  @JsName("Name")
  public open var name: String

  @JsName("Label")
  public open var label: String

  @JsName("Tooltip")
  public open var tooltip: String

  @JsName("Icon")
  public open var icon: ScriptSlateIcon

  @JsName("OwnerName")
  public open var ownerName: String

  @JsName("InsertPosition")
  public open var insertPosition: ToolMenuInsert

  @JsName("Advanced")
  public open var advanced: ToolMenuEntryScriptDataAdvanced

  public open fun clone(): ToolMenuEntryScriptData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToolMenuEntryScriptData

    @JsName("C")
    public fun copy(other: Any): ToolMenuEntryScriptData
  }
}

@JsName("ECheckBoxState")
public external object CheckBoxState {
  public var Unchecked: String

  public var Checked: String

  public var Undetermined: String

  @JsName("ECheckBoxState_MAX")
  public var Max: String
}

public open external class ToolMenuEntryScript(
  outer: UObject,
) : UObject {
  @JsName("Data")
  public open var data: ToolMenuEntryScriptData

  @JsName("RegisterMenuEntry")
  public open fun registerMenuEntry(): Unit

  @JsName("IsVisible")
  public open fun isVisible(context: ToolMenuContext): Boolean

  @JsName("InitEntry")
  public open fun initEntry(
    ownerName: String,
    menu: String,
    section: String,
    name: String,
    label: String,
    tooltip: String,
  ): Unit

  @JsName("GetToolTip")
  public open fun getToolTip(context: ToolMenuContext): String

  @JsName("GetLabel")
  public open fun getLabel(context: ToolMenuContext): String

  @JsName("GetIcon")
  public open fun getIcon(context: ToolMenuContext): ScriptSlateIcon

  @JsName("GetCheckState")
  public open fun getCheckState(context: ToolMenuContext): String

  @JsName("Execute")
  public open fun execute(context: ToolMenuContext): Unit

  @JsName("ConstructMenuEntry")
  public open fun constructMenuEntry(
    menu: ToolMenu,
    sectionName: String,
    context: ToolMenuContext,
  ): Unit

  @JsName("CanExecute")
  public open fun canExecute(context: ToolMenuContext): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenuEntryScript

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenuEntryScript

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenuEntryScript

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenuEntryScript

    @JsName("C")
    public fun copy(other: UObject): ToolMenuEntryScript

    @JsName("C")
    public fun copy(other: Any): ToolMenuEntryScript
  }
}

public open external class ToolMenuEntry {
  @JsName("Name")
  public open var name: String

  @JsName("Owner")
  public open var owner: ToolMenuOwner

  @JsName("Type")
  public open var type: String

  @JsName("UserInterfaceActionType")
  public open var userInterfaceActionType: String

  @JsName("TutorialHighlightName")
  public open var tutorialHighlightName: String

  @JsName("InsertPosition")
  public open var insertPosition: ToolMenuInsert

  @JsName("bShouldCloseWindowAfterMenuSelection")
  public open var shouldCloseWindowAfterMenuSelection: Boolean

  @JsName("ScriptObject")
  public open var scriptObject: ToolMenuEntryScript

  @JsName("StyleNameOverride")
  public open var styleNameOverride: String

  @JsName("bCommandIsKeybindOnly")
  public open var commandIsKeybindOnly: Boolean

  public open fun clone(): ToolMenuEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToolMenuEntry

    @JsName("C")
    public fun copy(other: Any): ToolMenuEntry
  }
}

public open external class ToolMenuSectionDynamic(
  outer: UObject,
) : UObject {
  @JsName("ConstructSections")
  public open fun constructSections(menu: ToolMenu, context: ToolMenuContext): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenuSectionDynamic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenuSectionDynamic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenuSectionDynamic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenuSectionDynamic

    @JsName("C")
    public fun copy(other: UObject): ToolMenuSectionDynamic

    @JsName("C")
    public fun copy(other: Any): ToolMenuSectionDynamic
  }
}

public open external class ToolMenuSection {
  @JsName("Name")
  public open var name: String

  @JsName("Owner")
  public open var owner: ToolMenuOwner

  @JsName("Blocks")
  public open var blocks: Array<ToolMenuEntry>

  @JsName("InsertPosition")
  public open var insertPosition: ToolMenuInsert

  @JsName("Context")
  public open var context: ToolMenuContext

  @JsName("ToolMenuSectionDynamic")
  public open var toolMenuSectionDynamic: ToolMenuSectionDynamic

  public open fun clone(): ToolMenuSection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToolMenuSection

    @JsName("C")
    public fun copy(other: Any): ToolMenuSection
  }
}

public open external class ToolMenu(
  outer: UObject,
) : ToolMenuBase {
  @JsName("MenuName")
  public open var menuName: String

  @JsName("MenuParent")
  public open var menuParent: String

  @JsName("StyleName")
  public open var styleName: String

  @JsName("TutorialHighlightName")
  public open var tutorialHighlightName: String

  @JsName("MenuType")
  public open var menuType: String

  @JsName("bShouldCleanupContextOnDestroy")
  public open var shouldCleanupContextOnDestroy: Boolean

  @JsName("bShouldCloseWindowAfterMenuSelection")
  public open var shouldCloseWindowAfterMenuSelection: Boolean

  @JsName("bCloseSelfOnly")
  public open var closeSelfOnly: Boolean

  @JsName("bSearchable")
  public open var searchable: Boolean

  @JsName("bToolBarIsFocusable")
  public open var toolBarIsFocusable: Boolean

  @JsName("bToolBarForceSmallIcons")
  public open var toolBarForceSmallIcons: Boolean

  @JsName("bPreventCustomization")
  public open var preventCustomization: Boolean

  @JsName("MenuOwner")
  public open var menuOwner: ToolMenuOwner

  @JsName("Context")
  public open var context: ToolMenuContext

  @JsName("Sections")
  public open var sections: Array<ToolMenuSection>

  @JsName("SubMenuParent")
  public open var subMenuParent: ToolMenu

  @JsName("SubMenuSourceEntryName")
  public open var subMenuSourceEntryName: String

  @JsName("InitMenu")
  public open fun initMenu(
    owner: ToolMenuOwner,
    name: String,
    parent: String,
    type: String,
  ): Unit

  @JsName("AddSubMenuScript")
  public open fun addSubMenuScript(
    owner: String,
    sectionName: String,
    name: String,
    label: String,
    tooltip: String,
  ): ToolMenu

  @JsName("AddSectionScript")
  public open fun addSectionScript(
    sectionName: String,
    label: String,
    insertName: String,
    insertType: String,
  ): Unit

  @JsName("AddMenuEntryObject")
  public open fun addMenuEntryObject(inObject: ToolMenuEntryScript): Unit

  @JsName("AddMenuEntry")
  public open fun addMenuEntry(sectionName: String, args: ToolMenuEntry): Unit

  @JsName("AddDynamicSectionScript")
  public open fun addDynamicSectionScript(sectionName: String, uObject: ToolMenuSectionDynamic):
      Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenu

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenu

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenu

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenu

    @JsName("C")
    public fun copy(other: UObject): ToolMenu

    @JsName("C")
    public fun copy(other: Any): ToolMenu
  }
}

public open external class ToolMenuContextBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenuContextBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenuContextBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenuContextBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenuContextBase

    @JsName("C")
    public fun copy(other: UObject): ToolMenuContextBase

    @JsName("C")
    public fun copy(other: Any): ToolMenuContextBase
  }
}

public open external class SlateTabManagerContext(
  outer: UObject,
) : ToolMenuContextBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateTabManagerContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateTabManagerContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateTabManagerContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateTabManagerContext

    @JsName("C")
    public fun copy(other: UObject): SlateTabManagerContext

    @JsName("C")
    public fun copy(other: Any): SlateTabManagerContext
  }
}

public open external class CustomizedToolMenu {
  @JsName("Name")
  public open var name: String

  @JsName("Entries")
  public open var entries: Any

  @JsName("Sections")
  public open var sections: Any

  @JsName("EntryOrder")
  public open var entryOrder: Any

  @JsName("SectionOrder")
  public open var sectionOrder: Array<String>

  public open fun clone(): CustomizedToolMenu

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomizedToolMenu

    @JsName("C")
    public fun copy(other: Any): CustomizedToolMenu
  }
}

public open external class ToolMenus(
  outer: UObject,
) : UObject {
  @JsName("CustomizedMenus")
  public open var customizedMenus: Array<CustomizedToolMenu>

  @JsName("MenuSubstitutionsDuringGenerate")
  public open var menuSubstitutionsDuringGenerate: Any

  @JsName("Menus")
  public open var menus: Any

  @JsName("UnregisterOwnerByName")
  public open fun unregisterOwnerByName(inOwnerName: String): Unit

  @JsName("SetSectionPosition")
  public open fun setSectionPosition(
    menuName: String,
    sectionName: String,
    otherSectionName: String,
    positionType: String,
  ): Unit

  @JsName("SetSectionLabel")
  public open fun setSectionLabel(
    menuName: String,
    sectionName: String,
    label: String,
  ): Unit

  @JsName("RemoveSection")
  public open fun removeSection(menuName: String, section: String): Unit

  @JsName("RemoveMenu")
  public open fun removeMenu(menuName: String): Unit

  @JsName("RemoveEntry")
  public open fun removeEntry(
    menuName: String,
    section: String,
    name: String,
  ): Unit

  @JsName("RegisterMenu")
  public open fun registerMenu(
    name: String,
    parent: String,
    type: String,
    warnIfAlreadyRegistered: Boolean,
  ): ToolMenu

  @JsName("RefreshMenuWidget")
  public open fun refreshMenuWidget(name: String): Boolean

  @JsName("RefreshAllWidgets")
  public open fun refreshAllWidgets(): Unit

  @JsName("IsMenuRegistered")
  public open fun isMenuRegistered(name: String): Boolean

  @JsName("FindMenu")
  public open fun findMenu(name: String): ToolMenu

  @JsName("ExtendMenu")
  public open fun extendMenu(name: String): ToolMenu

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenus

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenus

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenus

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenus

    @JsName("Get")
    public fun get(): ToolMenus

    @JsName("FindContext")
    public fun findContext(inContext: ToolMenuContext, inClass: UnrealEngineClass): UObject

    @JsName("AddMenuEntryObject")
    public fun addMenuEntryObject(menuEntryObject: ToolMenuEntryScript): Boolean

    @JsName("C")
    public fun copy(other: UObject): ToolMenus

    @JsName("C")
    public fun copy(other: Any): ToolMenus
  }
}

public open external class ToolMenuContextExtensions(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenuContextExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenuContextExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenuContextExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenuContextExtensions

    @JsName("FindByClass")
    public fun findByClass(context: ToolMenuContext, inClass: UnrealEngineClass): UObject

    @JsName("C")
    public fun copy(other: UObject): ToolMenuContextExtensions

    @JsName("C")
    public fun copy(other: Any): ToolMenuContextExtensions
  }
}

@JsName("EToolMenuStringCommandType")
public external object ToolMenuStringCommandType {
  public var Command: String

  public var Python: String

  public var Custom: String

  @JsName("EToolMenuStringCommandType_MAX")
  public var Max: String
}

public open external class ToolMenuStringCommand {
  @JsName("Type")
  public open var type: String

  @JsName("CustomType")
  public open var customType: String

  public open var string: String

  public open fun clone(): ToolMenuStringCommand

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ToolMenuStringCommand

    @JsName("C")
    public fun copy(other: Any): ToolMenuStringCommand
  }
}

@JsName("T$590")
public external interface TargetProvider {
  @JsName("Target")
  public var target: ToolMenuEntry
}

@JsName("T$591")
public external interface NameProvider {
  @JsName("Name")
  public var name: String
}

@JsName("T$592")
public external interface Object592 {
  @JsName("Type")
  public var type: String

  @JsName("CustomType")
  public var customType: String

  public var string: String
}

@JsName("T$593")
public external interface Object593 {
  @JsName("StyleSetName")
  public var styleSetName: String

  @JsName("StyleName")
  public var styleName: String

  @JsName("SmallStyleName")
  public var smallStyleName: String
}

public open external class ToolMenuEntryExtensions(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenuEntryExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenuEntryExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenuEntryExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenuEntryExtensions

    @JsName("SetToolTip")
    public fun setToolTip(target: ToolMenuEntry, tooltip: String): TargetProvider

    @JsName("SetStringCommand")
    public fun setStringCommand(
      target: ToolMenuEntry,
      type: String,
      customType: String,
      string: String,
    ): TargetProvider

    @JsName("SetLabel")
    public fun setLabel(target: ToolMenuEntry, label: String): TargetProvider

    @JsName("SetIcon")
    public fun setIcon(
      target: ToolMenuEntry,
      styleSetName: String,
      styleName: String,
      smallStyleName: String,
    ): TargetProvider

    @JsName("MakeToolMenuOwner")
    public fun makeToolMenuOwner(name: String): ToolMenuOwner

    @JsName("MakeStringCommand")
    public fun makeStringCommand(
      type: String,
      customType: String,
      string: String,
    ): ToolMenuStringCommand

    @JsName("MakeScriptSlateIcon")
    public fun makeScriptSlateIcon(
      styleSetName: String,
      styleName: String,
      smallStyleName: String,
    ): ScriptSlateIcon

    @JsName("InitMenuEntry")
    public fun initMenuEntry(
      inOwner: String,
      inName: String,
      inLabel: String,
      inToolTip: String,
      commandType: String,
      customCommandType: String,
      commandString: String,
    ): ToolMenuEntry

    @JsName("GetToolTip")
    public fun getToolTip(target: ToolMenuEntry): String

    @JsName("GetLabel")
    public fun getLabel(target: ToolMenuEntry): String

    @JsName("BreakToolMenuOwner")
    public fun breakToolMenuOwner(inValue: ToolMenuOwner, name: String): NameProvider

    @JsName("BreakStringCommand")
    public fun breakStringCommand(
      inValue: ToolMenuStringCommand,
      type: String,
      customType: String,
      string: String,
    ): Object592

    @JsName("BreakScriptSlateIcon")
    public fun breakScriptSlateIcon(
      inValue: ScriptSlateIcon,
      styleSetName: String,
      styleName: String,
      smallStyleName: String,
    ): Object593

    @JsName("C")
    public fun copy(other: UObject): ToolMenuEntryExtensions

    @JsName("C")
    public fun copy(other: Any): ToolMenuEntryExtensions
  }
}

@JsName("T$594")
public external interface SectionProvider {
  @JsName("Section")
  public var section: ToolMenuSection
}

public open external class ToolMenuSectionExtensions(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolMenuSectionExtensions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolMenuSectionExtensions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolMenuSectionExtensions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolMenuSectionExtensions

    @JsName("SetLabel")
    public fun setLabel(section: ToolMenuSection, label: String): SectionProvider

    @JsName("GetLabel")
    public fun getLabel(section: ToolMenuSection): String

    @JsName("AddEntryObject")
    public fun addEntryObject(section: ToolMenuSection, inObject: ToolMenuEntryScript):
        SectionProvider

    @JsName("AddEntry")
    public fun addEntry(section: ToolMenuSection, args: ToolMenuEntry): SectionProvider

    @JsName("C")
    public fun copy(other: UObject): ToolMenuSectionExtensions

    @JsName("C")
    public fun copy(other: Any): ToolMenuSectionExtensions
  }
}

public open external class PropertyConfigFileDisplayRow(
  outer: UObject,
) : UObject {
  @JsName("ConfigFileName")
  public open var configFileName: String

  @JsName("ExternalProperty")
  public open var externalProperty: Any

  @JsName("bIsFileWritable")
  public open var isFileWritable: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PropertyConfigFileDisplayRow

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PropertyConfigFileDisplayRow

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PropertyConfigFileDisplayRow

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PropertyConfigFileDisplayRow

    @JsName("C")
    public fun copy(other: UObject): PropertyConfigFileDisplayRow

    @JsName("C")
    public fun copy(other: Any): PropertyConfigFileDisplayRow
  }
}

public open external class ConfigHierarchyPropertyView(
  outer: UObject,
) : UObject {
  @JsName("EditProperty")
  public open var editProperty: Any

  @JsName("ConfigFilePropertyObjects")
  public open var configFilePropertyObjects: Array<PropertyConfigFileDisplayRow>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ConfigHierarchyPropertyView

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ConfigHierarchyPropertyView

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ConfigHierarchyPropertyView

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ConfigHierarchyPropertyView

    @JsName("C")
    public fun copy(other: UObject): ConfigHierarchyPropertyView

    @JsName("C")
    public fun copy(other: Any): ConfigHierarchyPropertyView
  }
}

@JsName("EInterchangeNodeContainerType")
public external object InterchangeNodeContainerType {
  @JsName("NodeContainerType_None")
  public var None: String

  @JsName("NodeContainerType_TranslatedScene")
  public var TranslatedScene: String

  @JsName("NodeContainerType_TranslatedAsset")
  public var TranslatedAsset: String

  @JsName("NodeContainerType_FactoryData")
  public var FactoryData: String

  @JsName("NodeContainerType_MAX")
  public var Max: String
}

@JsName("T$595")
public external interface OutTargetAssetsProvider {
  @JsName("OutTargetAssets")
  public var outTargetAssets: Array<String>
}

@JsName("T$596")
public external interface OutDependenciesProvider {
  @JsName("OutDependencies")
  public var outDependencies: Array<String>
}

@JsName("T$597")
public external interface Object597 {
  @JsName("OutValue")
  public var outValue: Boolean

  @JsName("$")
  public var value: Boolean
}

public open external class InterchangeBaseNode(
  outer: UObject,
) : UObject {
  @JsName("ReferenceObject")
  public open var referenceObject: SoftObjectPath

  @JsName("SetParentUid")
  public open fun setParentUid(parentUid: String): Boolean

  @JsName("SetEnabled")
  public open fun setEnabled(isEnabled: Boolean): Boolean

  @JsName("SetDisplayLabel")
  public open fun setDisplayLabel(displayName: String): Boolean

  @JsName("SetAssetName")
  public open fun setAssetName(assetName: String): Boolean

  @JsName("RemoveTargetNodeUid")
  public open fun removeTargetNodeUid(assetUid: String): Boolean

  @JsName("RemoveFactoryDependencyUid")
  public open fun removeFactoryDependencyUid(dependencyUid: String): Boolean

  @JsName("RemoveAttribute")
  public open fun removeAttribute(nodeAttributeKey: String): Boolean

  @JsName("IsEnabled")
  public open fun isEnabled(): Boolean

  @JsName("InitializeNode")
  public open fun initializeNode(
    uniqueId: String,
    displayLabel: String,
    nodeContainerType: String,
  ): Unit

  @JsName("GetUniqueID")
  public open fun getUniqueId(): String

  @JsName("GetTargetNodeUids")
  public open fun getTargetNodeUids(outTargetAssets: Array<String>): OutTargetAssetsProvider

  @JsName("GetTargetNodeCount")
  public open fun getTargetNodeCount(): Number

  @JsName("GetStringAttribute")
  public open fun getStringAttribute(nodeAttributeKey: String, outValue: String): Object187

  @JsName("GetParentUid")
  public open fun getParentUid(): String

  @JsName("GetNodeContainerType")
  public open fun getNodeContainerType(): String

  @JsName("GetInt32Attribute")
  public open fun getInt32Attribute(nodeAttributeKey: String, outValue: Number): Object189

  @JsName("GetFloatAttribute")
  public open fun getFloatAttribute(nodeAttributeKey: String, outValue: Number): Object189

  @JsName("GetFactoryDependency")
  public open fun getFactoryDependency(index: Number, outDependency: String): OutDependencyProvider

  @JsName("GetFactoryDependenciesCount")
  public open fun getFactoryDependenciesCount(): Number

  @JsName("GetFactoryDependencies")
  public open fun getFactoryDependencies(outDependencies: Array<String>): OutDependenciesProvider

  @JsName("GetDisplayLabel")
  public open fun getDisplayLabel(): String

  @JsName("GetBooleanAttribute")
  public open fun getBooleanAttribute(nodeAttributeKey: String, outValue: Boolean): Object597

  @JsName("GetAssetName")
  public open fun getAssetName(): String

  @JsName("AddTargetNodeUid")
  public open fun addTargetNodeUid(assetUid: String): Boolean

  @JsName("AddStringAttribute")
  public open fun addStringAttribute(nodeAttributeKey: String, value: String): Boolean

  @JsName("AddInt32Attribute")
  public open fun addInt32Attribute(nodeAttributeKey: String, value: Number): Boolean

  @JsName("AddFloatAttribute")
  public open fun addFloatAttribute(nodeAttributeKey: String, value: Number): Boolean

  @JsName("AddFactoryDependencyUid")
  public open fun addFactoryDependencyUid(dependencyUid: String): Boolean

  @JsName("AddBooleanAttribute")
  public open fun addBooleanAttribute(nodeAttributeKey: String, value: Boolean): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeBaseNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeBaseNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeBaseNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeBaseNode

    @JsName("C")
    public fun copy(other: UObject): InterchangeBaseNode

    @JsName("C")
    public fun copy(other: Any): InterchangeBaseNode
  }
}

@JsName("T$598")
public external interface RootNodesProvider {
  @JsName("RootNodes")
  public var rootNodes: Array<String>
}

@JsName("T$599")
public external interface OutNodesProvider {
  @JsName("OutNodes")
  public var outNodes: Array<String>
}

public open external class InterchangeBaseNodeContainer(
  outer: UObject,
) : UObject {
  @JsName("Nodes")
  public open var nodes: Any

  @JsName("SetNodeParentUid")
  public open fun setNodeParentUid(nodeUniqueId: String, newParentNodeUid: String): Boolean

  @JsName("SaveToFile")
  public open fun saveToFile(filename: String): Unit

  @JsName("LoadFromFile")
  public open fun loadFromFile(filename: String): Unit

  @JsName("IsNodeUidValid")
  public open fun isNodeUidValid(nodeUniqueId: String): Boolean

  @JsName("GetRoots")
  public open fun getRoots(rootNodes: Array<String>): RootNodesProvider

  @JsName("GetNodes")
  public open fun getNodes(classNode: UnrealEngineClass, outNodes: Array<String>): OutNodesProvider

  @JsName("GetNodeChildrenUids")
  public open fun getNodeChildrenUids(nodeUniqueId: String): Array<String>

  @JsName("GetNodeChildrenCount")
  public open fun getNodeChildrenCount(nodeUniqueId: String): Number

  @JsName("GetNodeChildren")
  public open fun getNodeChildren(nodeUniqueId: String, childIndex: Number): InterchangeBaseNode

  @JsName("GetNode")
  public open fun getNode(nodeUniqueId: String): InterchangeBaseNode

  @JsName("AddNode")
  public open fun addNode(uNode: InterchangeBaseNode): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeBaseNodeContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeBaseNodeContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeBaseNodeContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeBaseNodeContainer

    @JsName("C")
    public fun copy(other: UObject): InterchangeBaseNodeContainer

    @JsName("C")
    public fun copy(other: Any): InterchangeBaseNodeContainer
  }
}

public open external class InterchangeResult(
  outer: UObject,
) : UObject {
  @JsName("SourceAssetName")
  public open var sourceAssetName: String

  @JsName("DestinationAssetName")
  public open var destinationAssetName: String

  @JsName("AssetType")
  public open var assetType: UnrealEngineClass

  @JsName("InterchangeKey")
  public open var interchangeKey: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResult

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResult

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResult

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResult

    @JsName("C")
    public fun copy(other: UObject): InterchangeResult

    @JsName("C")
    public fun copy(other: Any): InterchangeResult
  }
}

public open external class InterchangeResultsContainer(
  outer: UObject,
) : UObject {
  @JsName("Results")
  public open var results: Array<InterchangeResult>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultsContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultsContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultsContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultsContainer

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultsContainer

    @JsName("C")
    public fun copy(other: Any): InterchangeResultsContainer
  }
}

public open external class InterchangeFactoryBase(
  outer: UObject,
) : UObject {
  @JsName("Results")
  public open var results: InterchangeResultsContainer

  @JsName("GetFactoryClass")
  public open fun getFactoryClass(): UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeFactoryBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeFactoryBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeFactoryBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeFactoryBase

    @JsName("C")
    public fun copy(other: UObject): InterchangeFactoryBase

    @JsName("C")
    public fun copy(other: Any): InterchangeFactoryBase
  }
}

public open external class InterchangeSourceData(
  outer: UObject,
) : UObject {
  @JsName("Filename")
  public open var filename: String

  @JsName("SetFilename")
  public open fun setFilename(inFilename: String): Boolean

  @JsName("GetFilename")
  public open fun getFilename(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeSourceData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeSourceData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeSourceData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeSourceData

    @JsName("C")
    public fun copy(other: UObject): InterchangeSourceData

    @JsName("C")
    public fun copy(other: Any): InterchangeSourceData
  }
}

@JsName("EInterchangePipelineTask")
public external object InterchangePipelineTask {
  public var PreFactoryImport: String

  public var PostFactoryImport: String

  public var Export: String

  @JsName("EInterchangePipelineTask_MAX")
  public var Max: String
}

public open external class InterchangePipelineBase(
  outer: UObject,
) : UObject {
  @JsName("Results")
  public open var results: InterchangeResultsContainer

  @JsName("ScriptedExecutePreImportPipeline")
  public open fun scriptedExecutePreImportPipeline(baseNodeContainer: InterchangeBaseNodeContainer,
      sourceDatas: Array<InterchangeSourceData>): Boolean

  @JsName("ScriptedExecutePostImportPipeline")
  public open fun scriptedExecutePostImportPipeline(
    baseNodeContainer: InterchangeBaseNodeContainer,
    nodeKey: String,
    createdAsset: UObject,
    isAReimport: Boolean,
  ): Boolean

  @JsName("ScriptedExecuteExportPipeline")
  public open fun scriptedExecuteExportPipeline(baseNodeContainer: InterchangeBaseNodeContainer):
      Boolean

  @JsName("ScriptedCanExecuteOnAnyThread")
  public open fun scriptedCanExecuteOnAnyThread(pipelineTask: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePipelineBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePipelineBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePipelineBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePipelineBase

    @JsName("C")
    public fun copy(other: UObject): InterchangePipelineBase

    @JsName("C")
    public fun copy(other: Any): InterchangePipelineBase
  }
}

public open external class InterchangeResultSuccess(
  outer: UObject,
) : InterchangeResult {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultSuccess

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultSuccess

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultSuccess

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultSuccess

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultSuccess

    @JsName("C")
    public fun copy(other: Any): InterchangeResultSuccess
  }
}

public open external class InterchangeResultWarning(
  outer: UObject,
) : InterchangeResult {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultWarning

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultWarning

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultWarning

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultWarning

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultWarning

    @JsName("C")
    public fun copy(other: Any): InterchangeResultWarning
  }
}

public open external class InterchangeResultError(
  outer: UObject,
) : InterchangeResult {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultError

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultError

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultError

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultError

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultError

    @JsName("C")
    public fun copy(other: Any): InterchangeResultError
  }
}

@JsName("InterchangeResultWarning_Generic")
public open external class InterchangeResultWarningGeneric(
  outer: UObject,
) : InterchangeResultWarning {
  public open var text: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultWarningGeneric

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultWarningGeneric

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultWarningGeneric

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultWarningGeneric

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultWarningGeneric

    @JsName("C")
    public fun copy(other: Any): InterchangeResultWarningGeneric
  }
}

@JsName("InterchangeResultError_Generic")
public open external class InterchangeResultErrorGeneric(
  outer: UObject,
) : InterchangeResultError {
  public open var text: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeResultErrorGeneric

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeResultErrorGeneric

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeResultErrorGeneric

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeResultErrorGeneric

    @JsName("C")
    public fun copy(other: UObject): InterchangeResultErrorGeneric

    @JsName("C")
    public fun copy(other: Any): InterchangeResultErrorGeneric
  }
}

public open external class InterchangeTranslatorBase(
  outer: UObject,
) : UObject {
  @JsName("Results")
  public open var results: InterchangeResultsContainer

  @JsName("SourceData")
  public open var sourceData: InterchangeSourceData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeTranslatorBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeTranslatorBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeTranslatorBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeTranslatorBase

    @JsName("C")
    public fun copy(other: UObject): InterchangeTranslatorBase

    @JsName("C")
    public fun copy(other: Any): InterchangeTranslatorBase
  }
}

public open external class InterchangeWriterBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeWriterBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeWriterBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeWriterBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeWriterBase

    @JsName("C")
    public fun copy(other: UObject): InterchangeWriterBase

    @JsName("C")
    public fun copy(other: Any): InterchangeWriterBase
  }
}

public open external class LiveLinkRole(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkRole

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkRole

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkRole

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkRole

    @JsName("C")
    public fun copy(other: UObject): LiveLinkRole

    @JsName("C")
    public fun copy(other: Any): LiveLinkRole
  }
}

public open external class LiveLinkBasicRole(
  outer: UObject,
) : LiveLinkRole {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkBasicRole

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkBasicRole

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkBasicRole

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkBasicRole

    @JsName("C")
    public fun copy(other: UObject): LiveLinkBasicRole

    @JsName("C")
    public fun copy(other: Any): LiveLinkBasicRole
  }
}

public open external class LiveLinkAnimationRole(
  outer: UObject,
) : LiveLinkBasicRole {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkAnimationRole

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkAnimationRole

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkAnimationRole

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkAnimationRole

    @JsName("C")
    public fun copy(other: UObject): LiveLinkAnimationRole

    @JsName("C")
    public fun copy(other: Any): LiveLinkAnimationRole
  }
}

public open external class LiveLinkTransformRole(
  outer: UObject,
) : LiveLinkBasicRole {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkTransformRole

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkTransformRole

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkTransformRole

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkTransformRole

    @JsName("C")
    public fun copy(other: UObject): LiveLinkTransformRole

    @JsName("C")
    public fun copy(other: Any): LiveLinkTransformRole
  }
}

public open external class LiveLinkCameraRole(
  outer: UObject,
) : LiveLinkTransformRole {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkCameraRole

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkCameraRole

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkCameraRole

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkCameraRole

    @JsName("C")
    public fun copy(other: UObject): LiveLinkCameraRole

    @JsName("C")
    public fun copy(other: Any): LiveLinkCameraRole
  }
}

public open external class LiveLinkController(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkController

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkController

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkController

    @JsName("C")
    public fun copy(other: UObject): LiveLinkController

    @JsName("C")
    public fun copy(other: Any): LiveLinkController
  }
}

@JsName("ELiveLinkSourceMode")
public external object LiveLinkSourceMode {
  public var Latest: String

  public var EngineTime: String

  public var Timecode: String

  @JsName("ELiveLinkSourceMode_MAX")
  public var Max: String
}

public open external class LiveLinkSourceBufferManagementSettings {
  @JsName("bValidEngineTimeEnabled")
  public open var validEngineTimeEnabled: Boolean

  @JsName("ValidEngineTime")
  public open var validEngineTime: Number

  @JsName("EngineTimeOffset")
  public open var engineTimeOffset: Number

  @JsName("EngineTimeClockOffset")
  public open var engineTimeClockOffset: Any

  @JsName("SmoothEngineTimeOffset")
  public open var smoothEngineTimeOffset: Any

  @JsName("TimecodeFrameRate")
  public open var timecodeFrameRate: FrameRate

  @JsName("bGenerateSubFrame")
  public open var generateSubFrame: Boolean

  @JsName("DetectedFrameRate")
  public open var detectedFrameRate: FrameRate

  @JsName("bUseTimecodeSmoothLatest")
  public open var useTimecodeSmoothLatest: Boolean

  @JsName("SourceTimecodeFrameRate")
  public open var sourceTimecodeFrameRate: FrameRate

  @JsName("bValidTimecodeFrameEnabled")
  public open var validTimecodeFrameEnabled: Boolean

  @JsName("ValidTimecodeFrame")
  public open var validTimecodeFrame: Number

  @JsName("TimecodeFrameOffset")
  public open var timecodeFrameOffset: Number

  @JsName("TimecodeClockOffset")
  public open var timecodeClockOffset: Any

  @JsName("LatestOffset")
  public open var latestOffset: Number

  @JsName("MaxNumberOfFrameToBuffered")
  public open var maxNumberOfFrameToBuffered: Number

  @JsName("bKeepAtLeastOneFrame")
  public open var keepAtLeastOneFrame: Boolean

  public open fun clone(): LiveLinkSourceBufferManagementSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LiveLinkSourceBufferManagementSettings

    @JsName("C")
    public fun copy(other: Any): LiveLinkSourceBufferManagementSettings
  }
}

public open external class LiveLinkSourceFactory(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkSourceFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkSourceFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkSourceFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkSourceFactory

    @JsName("C")
    public fun copy(other: UObject): LiveLinkSourceFactory

    @JsName("C")
    public fun copy(other: Any): LiveLinkSourceFactory
  }
}

public open external class LiveLinkSubjectName {
  @JsName("Name")
  public open var name: String

  public open fun clone(): LiveLinkSubjectName

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LiveLinkSubjectName

    @JsName("C")
    public fun copy(other: Any): LiveLinkSubjectName
  }
}

public open external class LiveLinkSourceDebugInfo {
  @JsName("SubjectName")
  public open var subjectName: LiveLinkSubjectName

  @JsName("SnapshotIndex")
  public open var snapshotIndex: Number

  @JsName("NumberOfBufferAtSnapshot")
  public open var numberOfBufferAtSnapshot: Number

  public open fun clone(): LiveLinkSourceDebugInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LiveLinkSourceDebugInfo

    @JsName("C")
    public fun copy(other: Any): LiveLinkSourceDebugInfo
  }
}

public open external class LiveLinkSourceSettings(
  outer: UObject,
) : UObject {
  @JsName("Mode")
  public open var mode: String

  @JsName("BufferSettings")
  public open var bufferSettings: LiveLinkSourceBufferManagementSettings

  @JsName("ConnectionString")
  public open var connectionString: String

  @JsName("Factory")
  public open var factory: UnrealEngineClass

  @JsName("SourceDebugInfos")
  public open var sourceDebugInfos: Array<LiveLinkSourceDebugInfo>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkSourceSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkSourceSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkSourceSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkSourceSettings

    @JsName("C")
    public fun copy(other: UObject): LiveLinkSourceSettings

    @JsName("C")
    public fun copy(other: Any): LiveLinkSourceSettings
  }
}

public open external class LiveLinkCurveConversionSettings {
  @JsName("CurveConversionAssetMap")
  public open var curveConversionAssetMap: Any

  public open fun clone(): LiveLinkCurveConversionSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LiveLinkCurveConversionSettings

    @JsName("C")
    public fun copy(other: Any): LiveLinkCurveConversionSettings
  }
}

public open external class LiveLinkCurveRemapSettings(
  outer: UObject,
) : LiveLinkSourceSettings {
  @JsName("CurveConversionSettings")
  public open var curveConversionSettings: LiveLinkCurveConversionSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkCurveRemapSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkCurveRemapSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkCurveRemapSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkCurveRemapSettings

    @JsName("C")
    public fun copy(other: UObject): LiveLinkCurveRemapSettings

    @JsName("C")
    public fun copy(other: Any): LiveLinkCurveRemapSettings
  }
}

public open external class LiveLinkFrameInterpolationProcessor(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkFrameInterpolationProcessor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkFrameInterpolationProcessor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkFrameInterpolationProcessor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkFrameInterpolationProcessor

    @JsName("C")
    public fun copy(other: UObject): LiveLinkFrameInterpolationProcessor

    @JsName("C")
    public fun copy(other: Any): LiveLinkFrameInterpolationProcessor
  }
}

public open external class LiveLinkFramePreProcessor(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkFramePreProcessor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkFramePreProcessor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkFramePreProcessor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkFramePreProcessor

    @JsName("C")
    public fun copy(other: UObject): LiveLinkFramePreProcessor

    @JsName("C")
    public fun copy(other: Any): LiveLinkFramePreProcessor
  }
}

public open external class LiveLinkFrameTranslator(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkFrameTranslator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkFrameTranslator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkFrameTranslator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkFrameTranslator

    @JsName("C")
    public fun copy(other: UObject): LiveLinkFrameTranslator

    @JsName("C")
    public fun copy(other: Any): LiveLinkFrameTranslator
  }
}

public open external class LiveLinkLightRole(
  outer: UObject,
) : LiveLinkTransformRole {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkLightRole

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkLightRole

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkLightRole

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkLightRole

    @JsName("C")
    public fun copy(other: UObject): LiveLinkLightRole

    @JsName("C")
    public fun copy(other: Any): LiveLinkLightRole
  }
}

public open external class LiveLinkSubjectSettings(
  outer: UObject,
) : UObject {
  @JsName("PreProcessors")
  public open var preProcessors: Array<LiveLinkFramePreProcessor>

  @JsName("InterpolationProcessor")
  public open var interpolationProcessor: LiveLinkFrameInterpolationProcessor

  @JsName("Translators")
  public open var translators: Array<LiveLinkFrameTranslator>

  @JsName("Role")
  public open var role: UnrealEngineClass

  @JsName("FrameRate")
  public open var frameRate: FrameRate

  @JsName("bRebroadcastSubject")
  public open var rebroadcastSubject: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkSubjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkSubjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkSubjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkSubjectSettings

    @JsName("C")
    public fun copy(other: UObject): LiveLinkSubjectSettings

    @JsName("C")
    public fun copy(other: Any): LiveLinkSubjectSettings
  }
}

public open external class LiveLinkVirtualSubject(
  outer: UObject,
) : UObject {
  @JsName("Role")
  public open var role: UnrealEngineClass

  @JsName("Subjects")
  public open var subjects: Array<LiveLinkSubjectName>

  @JsName("FrameTranslators")
  public open var frameTranslators: Array<LiveLinkFrameTranslator>

  @JsName("bRebroadcastSubject")
  public open var rebroadcastSubject: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LiveLinkVirtualSubject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LiveLinkVirtualSubject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LiveLinkVirtualSubject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LiveLinkVirtualSubject

    @JsName("C")
    public fun copy(other: UObject): LiveLinkVirtualSubject

    @JsName("C")
    public fun copy(other: Any): LiveLinkVirtualSubject
  }
}

@JsName("EPIEPreviewDeviceType")
public external object PIEPreviewDeviceType {
  public var Unset: String

  public var Android: String

  public var IOS: String

  public var TVOS: String

  public var Switch: String

  public var MAX: String
}

@JsName("PIEPreviewDeviceSpecification")
public open external class PiePreviewDeviceSpecification(
  outer: UObject,
) : UObject {
  @JsName("PreviewDeviceType")
  public open var previewDeviceType: String

  @JsName("GPUFamily")
  public open var gpuFamily: String

  @JsName("GLVersion")
  public open var glVersion: String

  @JsName("VulkanVersion")
  public open var vulkanVersion: String

  @JsName("AndroidVersion")
  public open var androidVersion: String

  @JsName("DeviceMake")
  public open var deviceMake: String

  @JsName("DeviceModel")
  public open var deviceModel: String

  @JsName("DeviceBuildNumber")
  public open var deviceBuildNumber: String

  @JsName("UsingHoudini")
  public open var usingHoudini: Boolean

  @JsName("Hardware")
  public open var hardware: String

  @JsName("Chipset")
  public open var chipset: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PiePreviewDeviceSpecification

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PiePreviewDeviceSpecification

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PiePreviewDeviceSpecification

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PiePreviewDeviceSpecification

    @JsName("C")
    public fun copy(other: UObject): PiePreviewDeviceSpecification

    @JsName("C")
    public fun copy(other: Any): PiePreviewDeviceSpecification
  }
}

public open external class InputBehavior(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputBehavior

    @JsName("C")
    public fun copy(other: UObject): InputBehavior

    @JsName("C")
    public fun copy(other: Any): InputBehavior
  }
}

public open external class AnyButtonInputBehavior(
  outer: UObject,
) : InputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnyButtonInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnyButtonInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnyButtonInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnyButtonInputBehavior

    @JsName("C")
    public fun copy(other: UObject): AnyButtonInputBehavior

    @JsName("C")
    public fun copy(other: Any): AnyButtonInputBehavior
  }
}

public open external class AssetBackedTarget(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetBackedTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetBackedTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetBackedTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetBackedTarget

    @JsName("C")
    public fun copy(other: UObject): AssetBackedTarget

    @JsName("C")
    public fun copy(other: Any): AssetBackedTarget
  }
}

public open external class InteractiveGizmoBuilder(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): InteractiveGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): InteractiveGizmoBuilder
  }
}

public open external class AxisAngleGizmoBuilder(
  outer: UObject,
) : InteractiveGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AxisAngleGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AxisAngleGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AxisAngleGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AxisAngleGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): AxisAngleGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): AxisAngleGizmoBuilder
  }
}

public open external class BehaviorInfo {
  @JsName("Behavior")
  public open var behavior: InputBehavior

  public open fun clone(): BehaviorInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BehaviorInfo

    @JsName("C")
    public fun copy(other: Any): BehaviorInfo
  }
}

public open external class InputBehaviorSet(
  outer: UObject,
) : UObject {
  @JsName("Behaviors")
  public open var behaviors: Array<BehaviorInfo>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputBehaviorSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputBehaviorSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputBehaviorSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputBehaviorSet

    @JsName("C")
    public fun copy(other: UObject): InputBehaviorSet

    @JsName("C")
    public fun copy(other: Any): InputBehaviorSet
  }
}

public open external class InteractiveGizmo(
  outer: UObject,
) : UObject {
  @JsName("InputBehaviors")
  public open var inputBehaviors: InputBehaviorSet

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveGizmo

    @JsName("C")
    public fun copy(other: UObject): InteractiveGizmo

    @JsName("C")
    public fun copy(other: Any): InteractiveGizmo
  }
}

public open external class ClickDragInputBehavior(
  outer: UObject,
) : AnyButtonInputBehavior {
  @JsName("bUpdateModifiersDuringDrag")
  public open var updateModifiersDuringDrag: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClickDragInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClickDragInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClickDragInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClickDragInputBehavior

    @JsName("C")
    public fun copy(other: UObject): ClickDragInputBehavior

    @JsName("C")
    public fun copy(other: Any): ClickDragInputBehavior
  }
}

public open external class AxisAngleGizmo(
  outer: UObject,
) : InteractiveGizmo {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("AngleSource")
  public open var angleSource: Any

  @JsName("HitTarget")
  public open var hitTarget: Any

  @JsName("StateTarget")
  public open var stateTarget: Any

  @JsName("MouseBehavior")
  public open var mouseBehavior: ClickDragInputBehavior

  @JsName("bInInteraction")
  public open var inInteraction: Boolean

  @JsName("RotationOrigin")
  public open var rotationOrigin: Vector

  @JsName("RotationAxis")
  public open var rotationAxis: Vector

  @JsName("RotationPlaneX")
  public open var rotationPlaneX: Vector

  @JsName("RotationPlaneY")
  public open var rotationPlaneY: Vector

  @JsName("InteractionStartPoint")
  public open var interactionStartPoint: Vector

  @JsName("InteractionCurPoint")
  public open var interactionCurPoint: Vector

  @JsName("InteractionStartAngle")
  public open var interactionStartAngle: Number

  @JsName("InteractionCurAngle")
  public open var interactionCurAngle: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AxisAngleGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AxisAngleGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AxisAngleGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AxisAngleGizmo

    @JsName("C")
    public fun copy(other: UObject): AxisAngleGizmo

    @JsName("C")
    public fun copy(other: Any): AxisAngleGizmo
  }
}

public open external class AxisPositionGizmoBuilder(
  outer: UObject,
) : InteractiveGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AxisPositionGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AxisPositionGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AxisPositionGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AxisPositionGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): AxisPositionGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): AxisPositionGizmoBuilder
  }
}

public open external class GizmoViewContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoViewContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoViewContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoViewContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoViewContext

    @JsName("C")
    public fun copy(other: UObject): GizmoViewContext

    @JsName("C")
    public fun copy(other: Any): GizmoViewContext
  }
}

public open external class AxisPositionGizmo(
  outer: UObject,
) : InteractiveGizmo {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("ParameterSource")
  public open var parameterSource: Any

  @JsName("GizmoViewContext")
  public open var gizmoViewContext: GizmoViewContext

  @JsName("HitTarget")
  public open var hitTarget: Any

  @JsName("StateTarget")
  public open var stateTarget: Any

  @JsName("MouseBehavior")
  public open var mouseBehavior: ClickDragInputBehavior

  @JsName("bEnableSignedAxis")
  public open var enableSignedAxis: Boolean

  @JsName("bInInteraction")
  public open var inInteraction: Boolean

  @JsName("InteractionOrigin")
  public open var interactionOrigin: Vector

  @JsName("InteractionAxis")
  public open var interactionAxis: Vector

  @JsName("InteractionStartPoint")
  public open var interactionStartPoint: Vector

  @JsName("InteractionCurPoint")
  public open var interactionCurPoint: Vector

  @JsName("InteractionStartParameter")
  public open var interactionStartParameter: Number

  @JsName("InteractionCurParameter")
  public open var interactionCurParameter: Number

  @JsName("ParameterSign")
  public open var parameterSign: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AxisPositionGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AxisPositionGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AxisPositionGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AxisPositionGizmo

    @JsName("C")
    public fun copy(other: UObject): AxisPositionGizmo

    @JsName("C")
    public fun copy(other: Any): AxisPositionGizmo
  }
}

public open external class GizmoConstantAxisSource(
  outer: UObject,
) : UObject {
  @JsName("Origin")
  public open var origin: Vector

  @JsName("Direction")
  public open var direction: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoConstantAxisSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoConstantAxisSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoConstantAxisSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoConstantAxisSource

    @JsName("C")
    public fun copy(other: UObject): GizmoConstantAxisSource

    @JsName("C")
    public fun copy(other: Any): GizmoConstantAxisSource
  }
}

public open external class GizmoConstantFrameAxisSource(
  outer: UObject,
) : UObject {
  @JsName("Origin")
  public open var origin: Vector

  @JsName("Direction")
  public open var direction: Vector

  @JsName("TangentX")
  public open var tangentX: Vector

  @JsName("TangentY")
  public open var tangentY: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoConstantFrameAxisSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoConstantFrameAxisSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoConstantFrameAxisSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoConstantFrameAxisSource

    @JsName("C")
    public fun copy(other: UObject): GizmoConstantFrameAxisSource

    @JsName("C")
    public fun copy(other: Any): GizmoConstantFrameAxisSource
  }
}

public open external class GizmoWorldAxisSource(
  outer: UObject,
) : UObject {
  @JsName("Origin")
  public open var origin: Vector

  @JsName("AxisIndex")
  public open var axisIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoWorldAxisSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoWorldAxisSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoWorldAxisSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoWorldAxisSource

    @JsName("C")
    public fun copy(other: UObject): GizmoWorldAxisSource

    @JsName("C")
    public fun copy(other: Any): GizmoWorldAxisSource
  }
}

public open external class GizmoComponentAxisSource(
  outer: UObject,
) : UObject {
  @JsName("Component")
  public open var component: SceneComponent

  @JsName("AxisIndex")
  public open var axisIndex: Number

  @JsName("bLocalAxes")
  public open var localAxes: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoComponentAxisSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoComponentAxisSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoComponentAxisSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoComponentAxisSource

    @JsName("C")
    public fun copy(other: UObject): GizmoComponentAxisSource

    @JsName("C")
    public fun copy(other: Any): GizmoComponentAxisSource
  }
}

public open external class InteractiveToolPropertySet(
  outer: UObject,
) : UObject {
  @JsName("CachedPropertiesMap")
  public open var cachedPropertiesMap: Any

  @JsName("bIsPropertySetEnabled")
  public open var isPropertySetEnabled: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolPropertySet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolPropertySet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolPropertySet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolPropertySet

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolPropertySet

    @JsName("C")
    public fun copy(other: Any): InteractiveToolPropertySet
  }
}

public open external class BrushBaseProperties(
  outer: UObject,
) : InteractiveToolPropertySet {
  @JsName("BrushSize")
  public open var brushSize: Number

  @JsName("bSpecifyRadius")
  public open var specifyRadius: Boolean

  @JsName("BrushRadius")
  public open var brushRadius: Number

  @JsName("BrushStrength")
  public open var brushStrength: Number

  @JsName("BrushFalloffAmount")
  public open var brushFalloffAmount: Number

  @JsName("bShowStrength")
  public open var showStrength: Boolean

  @JsName("bShowFalloff")
  public open var showFalloff: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrushBaseProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrushBaseProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushBaseProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushBaseProperties

    @JsName("C")
    public fun copy(other: UObject): BrushBaseProperties

    @JsName("C")
    public fun copy(other: Any): BrushBaseProperties
  }
}

public open external class InteractiveTool(
  outer: UObject,
) : UObject {
  @JsName("InputBehaviors")
  public open var inputBehaviors: InputBehaviorSet

  @JsName("ToolPropertyObjects")
  public open var toolPropertyObjects: Array<UObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveTool

    @JsName("C")
    public fun copy(other: UObject): InteractiveTool

    @JsName("C")
    public fun copy(other: Any): InteractiveTool
  }
}

public open external class ToolTarget(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolTarget

    @JsName("C")
    public fun copy(other: UObject): ToolTarget

    @JsName("C")
    public fun copy(other: Any): ToolTarget
  }
}

public open external class SingleSelectionTool(
  outer: UObject,
) : InteractiveTool {
  @JsName("Target")
  public open var target: ToolTarget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleSelectionTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleSelectionTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleSelectionTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleSelectionTool

    @JsName("C")
    public fun copy(other: UObject): SingleSelectionTool

    @JsName("C")
    public fun copy(other: Any): SingleSelectionTool
  }
}

public open external class MeshSurfacePointTool(
  outer: UObject,
) : SingleSelectionTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSurfacePointTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSurfacePointTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSurfacePointTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSurfacePointTool

    @JsName("C")
    public fun copy(other: UObject): MeshSurfacePointTool

    @JsName("C")
    public fun copy(other: Any): MeshSurfacePointTool
  }
}

public open external class BrushStampData {
  public open fun clone(): BrushStampData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BrushStampData

    @JsName("C")
    public fun copy(other: Any): BrushStampData
  }
}

public open external class BrushStampIndicator(
  outer: UObject,
) : InteractiveGizmo {
  @JsName("bVisible")
  public open var visible: Boolean

  @JsName("BrushRadius")
  public open var brushRadius: Number

  @JsName("BrushFalloff")
  public open var brushFalloff: Number

  @JsName("BrushPosition")
  public open var brushPosition: Vector

  @JsName("BrushNormal")
  public open var brushNormal: Vector

  @JsName("bDrawIndicatorLines")
  public open var drawIndicatorLines: Boolean

  @JsName("bDrawRadiusCircle")
  public open var drawRadiusCircle: Boolean

  @JsName("SampleStepCount")
  public open var sampleStepCount: Number

  @JsName("LineColor")
  public open var lineColor: LinearColor

  @JsName("LineThickness")
  public open var lineThickness: Number

  @JsName("bDepthTested")
  public open var depthTested: Boolean

  @JsName("bDrawSecondaryLines")
  public open var drawSecondaryLines: Boolean

  @JsName("SecondaryLineThickness")
  public open var secondaryLineThickness: Number

  @JsName("SecondaryLineColor")
  public open var secondaryLineColor: LinearColor

  @JsName("AttachedComponent")
  public open var attachedComponent: PrimitiveComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrushStampIndicator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrushStampIndicator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushStampIndicator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushStampIndicator

    @JsName("C")
    public fun copy(other: UObject): BrushStampIndicator

    @JsName("C")
    public fun copy(other: Any): BrushStampIndicator
  }
}

public open external class BaseBrushTool(
  outer: UObject,
) : MeshSurfacePointTool {
  @JsName("BrushProperties")
  public open var brushProperties: BrushBaseProperties

  @JsName("bInBrushStroke")
  public open var inBrushStroke: Boolean

  @JsName("WorldToLocalScale")
  public open var worldToLocalScale: Number

  @JsName("LastBrushStamp")
  public open var lastBrushStamp: BrushStampData

  @JsName("PropertyClass")
  public open var propertyClass: Class

  @JsName("BrushStampIndicator")
  public open var brushStampIndicator: BrushStampIndicator

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BaseBrushTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BaseBrushTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseBrushTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseBrushTool

    @JsName("C")
    public fun copy(other: UObject): BaseBrushTool

    @JsName("C")
    public fun copy(other: Any): BaseBrushTool
  }
}

public open external class BrushStampIndicatorBuilder(
  outer: UObject,
) : InteractiveGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrushStampIndicatorBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrushStampIndicatorBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushStampIndicatorBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushStampIndicatorBuilder

    @JsName("C")
    public fun copy(other: UObject): BrushStampIndicatorBuilder

    @JsName("C")
    public fun copy(other: Any): BrushStampIndicatorBuilder
  }
}

public open external class LocalClickDragInputBehavior(
  outer: UObject,
) : ClickDragInputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalClickDragInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalClickDragInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalClickDragInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalClickDragInputBehavior

    @JsName("C")
    public fun copy(other: UObject): LocalClickDragInputBehavior

    @JsName("C")
    public fun copy(other: Any): LocalClickDragInputBehavior
  }
}

public open external class InteractiveToolBuilder(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolBuilder

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolBuilder

    @JsName("C")
    public fun copy(other: Any): InteractiveToolBuilder
  }
}

public open external class ClickDragToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClickDragToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClickDragToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClickDragToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClickDragToolBuilder

    @JsName("C")
    public fun copy(other: UObject): ClickDragToolBuilder

    @JsName("C")
    public fun copy(other: Any): ClickDragToolBuilder
  }
}

public open external class ClickDragTool(
  outer: UObject,
) : InteractiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClickDragTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClickDragTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClickDragTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClickDragTool

    @JsName("C")
    public fun copy(other: UObject): ClickDragTool

    @JsName("C")
    public fun copy(other: Any): ClickDragTool
  }
}

public open external class InternalToolFrameworkActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("bIsSelectableInEditor")
  public open var isSelectableInEditor: Boolean

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InternalToolFrameworkActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InternalToolFrameworkActor

    @JsName("C")
    public fun copy(other: UObject): InternalToolFrameworkActor

    @JsName("C")
    public fun copy(other: Any): InternalToolFrameworkActor
  }
}

public open external class GizmoActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : InternalToolFrameworkActor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoActor

    @JsName("C")
    public fun copy(other: UObject): GizmoActor

    @JsName("C")
    public fun copy(other: Any): GizmoActor
  }
}

public open external class CombinedTransformGizmoActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : GizmoActor {
  @JsName("TranslateX")
  public open var translateX: PrimitiveComponent

  @JsName("TranslateY")
  public open var translateY: PrimitiveComponent

  @JsName("TranslateZ")
  public open var translateZ: PrimitiveComponent

  @JsName("TranslateYZ")
  public open var translateYz: PrimitiveComponent

  @JsName("TranslateXZ")
  public open var translateXz: PrimitiveComponent

  @JsName("TranslateXY")
  public open var translateXy: PrimitiveComponent

  @JsName("RotateX")
  public open var rotateX: PrimitiveComponent

  @JsName("RotateY")
  public open var rotateY: PrimitiveComponent

  @JsName("RotateZ")
  public open var rotateZ: PrimitiveComponent

  @JsName("UniformScale")
  public open var uniformScale: PrimitiveComponent

  @JsName("AxisScaleX")
  public open var axisScaleX: PrimitiveComponent

  @JsName("AxisScaleY")
  public open var axisScaleY: PrimitiveComponent

  @JsName("AxisScaleZ")
  public open var axisScaleZ: PrimitiveComponent

  @JsName("PlaneScaleYZ")
  public open var planeScaleYz: PrimitiveComponent

  @JsName("PlaneScaleXZ")
  public open var planeScaleXz: PrimitiveComponent

  @JsName("PlaneScaleXY")
  public open var planeScaleXy: PrimitiveComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CombinedTransformGizmoActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CombinedTransformGizmoActor

    @JsName("C")
    public fun copy(other: UObject): CombinedTransformGizmoActor

    @JsName("C")
    public fun copy(other: Any): CombinedTransformGizmoActor
  }
}

public open external class CombinedTransformGizmoBuilder(
  outer: UObject,
) : InteractiveGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CombinedTransformGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CombinedTransformGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CombinedTransformGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CombinedTransformGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): CombinedTransformGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): CombinedTransformGizmoBuilder
  }
}

public open external class TransformProxy(
  outer: UObject,
) : UObject {
  @JsName("bRotatePerObject")
  public open var rotatePerObject: Boolean

  @JsName("bSetPivotMode")
  public open var setPivotMode: Boolean

  @JsName("SharedTransform")
  public open var sharedTransform: Transform

  @JsName("InitialSharedTransform")
  public open var initialSharedTransform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TransformProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TransformProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TransformProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TransformProxy

    @JsName("C")
    public fun copy(other: UObject): TransformProxy

    @JsName("C")
    public fun copy(other: Any): TransformProxy
  }
}

@JsName("EToolContextCoordinateSystem")
public external object ToolContextCoordinateSystem {
  public var World: String

  public var Local: String

  @JsName("EToolContextCoordinateSystem_MAX")
  public var Max: String
}

public open external class GizmoTransformChangeStateTarget(
  outer: UObject,
) : UObject {
  @JsName("TransactionManager")
  public open var transactionManager: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoTransformChangeStateTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoTransformChangeStateTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoTransformChangeStateTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoTransformChangeStateTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoTransformChangeStateTarget

    @JsName("C")
    public fun copy(other: Any): GizmoTransformChangeStateTarget
  }
}

public open external class CombinedTransformGizmo(
  outer: UObject,
) : InteractiveGizmo {
  @JsName("ActiveTarget")
  public open var activeTarget: TransformProxy

  @JsName("bSnapToWorldGrid")
  public open var snapToWorldGrid: Boolean

  @JsName("bGridSizeIsExplicit")
  public open var gridSizeIsExplicit: Boolean

  @JsName("ExplicitGridSize")
  public open var explicitGridSize: Vector

  @JsName("bRotationGridSizeIsExplicit")
  public open var rotationGridSizeIsExplicit: Boolean

  @JsName("ExplicitRotationGridSize")
  public open var explicitRotationGridSize: Rotator

  @JsName("bSnapToWorldRotGrid")
  public open var snapToWorldRotGrid: Boolean

  @JsName("bUseContextCoordinateSystem")
  public open var useContextCoordinateSystem: Boolean

  @JsName("CurrentCoordinateSystem")
  public open var currentCoordinateSystem: String

  @JsName("ActiveComponents")
  public open var activeComponents: Array<PrimitiveComponent>

  @JsName("NonuniformScaleComponents")
  public open var nonuniformScaleComponents: Array<PrimitiveComponent>

  @JsName("ActiveGizmos")
  public open var activeGizmos: Array<InteractiveGizmo>

  @JsName("CameraAxisSource")
  public open var cameraAxisSource: GizmoConstantFrameAxisSource

  @JsName("AxisXSource")
  public open var axisXSource: GizmoComponentAxisSource

  @JsName("AxisYSource")
  public open var axisYSource: GizmoComponentAxisSource

  @JsName("AxisZSource")
  public open var axisZSource: GizmoComponentAxisSource

  @JsName("UnitAxisXSource")
  public open var unitAxisXSource: GizmoComponentAxisSource

  @JsName("UnitAxisYSource")
  public open var unitAxisYSource: GizmoComponentAxisSource

  @JsName("UnitAxisZSource")
  public open var unitAxisZSource: GizmoComponentAxisSource

  @JsName("StateTarget")
  public open var stateTarget: GizmoTransformChangeStateTarget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CombinedTransformGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CombinedTransformGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CombinedTransformGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CombinedTransformGizmo

    @JsName("C")
    public fun copy(other: UObject): CombinedTransformGizmo

    @JsName("C")
    public fun copy(other: Any): CombinedTransformGizmo
  }
}

public open external class ContextObjectStore(
  outer: UObject,
) : UObject {
  @JsName("ContextObjects")
  public open var contextObjects: Array<UObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContextObjectStore

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContextObjectStore

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContextObjectStore

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContextObjectStore

    @JsName("C")
    public fun copy(other: UObject): ContextObjectStore

    @JsName("C")
    public fun copy(other: Any): ContextObjectStore
  }
}

public open external class GizmoBaseComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("Color")
  public open var color: LinearColor

  @JsName("HoverSizeMultiplier")
  public open var hoverSizeMultiplier: Number

  @JsName("PixelHitDistanceThreshold")
  public open var pixelHitDistanceThreshold: Number

  @JsName("GizmoViewContext")
  public open var gizmoViewContext: GizmoViewContext

  @JsName("UpdateWorldLocalState")
  public open fun updateWorldLocalState(worldIn: Boolean): Unit

  @JsName("UpdateHoverState")
  public open fun updateHoverState(hoveringIn: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoBaseComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoBaseComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoBaseComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoBaseComponent

    @JsName("C")
    public fun copy(other: UObject): GizmoBaseComponent

    @JsName("C")
    public fun copy(other: Any): GizmoBaseComponent
  }
}

public open external class GizmoArrowComponent(
  outer: UObject,
) : GizmoBaseComponent {
  @JsName("Direction")
  public open var direction: Vector

  @JsName("Gap")
  public open var gap: Number

  @JsName("Length")
  public open var length: Number

  @JsName("Thickness")
  public open var thickness: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoArrowComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoArrowComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoArrowComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoArrowComponent

    @JsName("C")
    public fun copy(other: UObject): GizmoArrowComponent

    @JsName("C")
    public fun copy(other: Any): GizmoArrowComponent
  }
}

public open external class GizmoBoxComponent(
  outer: UObject,
) : GizmoBaseComponent {
  @JsName("Origin")
  public open var origin: Vector

  @JsName("Rotation")
  public open var rotation: Quat

  @JsName("Dimensions")
  public open var dimensions: Vector

  @JsName("LineThickness")
  public open var lineThickness: Number

  @JsName("bRemoveHiddenLines")
  public open var removeHiddenLines: Boolean

  @JsName("bEnableAxisFlip")
  public open var enableAxisFlip: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoBoxComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoBoxComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoBoxComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoBoxComponent

    @JsName("C")
    public fun copy(other: UObject): GizmoBoxComponent

    @JsName("C")
    public fun copy(other: Any): GizmoBoxComponent
  }
}

public open external class GizmoCircleComponent(
  outer: UObject,
) : GizmoBaseComponent {
  @JsName("Normal")
  public open var normal: Vector

  @JsName("Radius")
  public open var radius: Number

  @JsName("Thickness")
  public open var thickness: Number

  @JsName("NumSides")
  public open var numSides: Number

  @JsName("bViewAligned")
  public open var viewAligned: Boolean

  @JsName("bDrawFullCircle")
  public open var drawFullCircle: Boolean

  @JsName("bOnlyAllowFrontFacingHits")
  public open var onlyAllowFrontFacingHits: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoCircleComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoCircleComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoCircleComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoCircleComponent

    @JsName("C")
    public fun copy(other: UObject): GizmoCircleComponent

    @JsName("C")
    public fun copy(other: Any): GizmoCircleComponent
  }
}

public open external class GizmoTransformSource(
  outer: UObject,
) : Interface {
  @JsName("SetTransform")
  public open fun setTransform(newTransform: Transform): Unit

  @JsName("GetTransform")
  public open fun getTransform(): Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoTransformSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoTransformSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoTransformSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoTransformSource

    @JsName("C")
    public fun copy(other: UObject): GizmoTransformSource

    @JsName("C")
    public fun copy(other: Any): GizmoTransformSource
  }
}

@JsName("T$600")
public external interface Object600 {
  @JsName("TangentXOut")
  public var tangentXOut: Vector

  @JsName("TangentYOut")
  public var tangentYOut: Vector
}

public open external class GizmoAxisSource(
  outer: UObject,
) : Interface {
  @JsName("HasTangentVectors")
  public open fun hasTangentVectors(): Boolean

  @JsName("GetTangentVectors")
  public open fun getTangentVectors(tangentXOut: Vector, tangentYOut: Vector): Object600

  @JsName("GetOrigin")
  public open fun getOrigin(): Vector

  @JsName("GetDirection")
  public open fun getDirection(): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoAxisSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoAxisSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoAxisSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoAxisSource

    @JsName("C")
    public fun copy(other: UObject): GizmoAxisSource

    @JsName("C")
    public fun copy(other: Any): GizmoAxisSource
  }
}

public open external class GizmoClickTarget(
  outer: UObject,
) : Interface {
  @JsName("UpdateInteractingState")
  public open fun updateInteractingState(interacting: Boolean): Unit

  @JsName("UpdateHoverState")
  public open fun updateHoverState(hovering: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoClickTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoClickTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoClickTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoClickTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoClickTarget

    @JsName("C")
    public fun copy(other: Any): GizmoClickTarget
  }
}

public open external class GizmoStateTarget(
  outer: UObject,
) : Interface {
  @JsName("EndUpdate")
  public open fun endUpdate(): Unit

  @JsName("BeginUpdate")
  public open fun beginUpdate(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoStateTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoStateTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoStateTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoStateTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoStateTarget

    @JsName("C")
    public fun copy(other: Any): GizmoStateTarget
  }
}

public open external class GizmoFloatParameterSource(
  outer: UObject,
) : Interface {
  @JsName("SetParameter")
  public open fun setParameter(newValue: Number): Unit

  @JsName("GetParameter")
  public open fun getParameter(): Number

  @JsName("EndModify")
  public open fun endModify(): Unit

  @JsName("BeginModify")
  public open fun beginModify(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoFloatParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoFloatParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoFloatParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoFloatParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoFloatParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoFloatParameterSource
  }
}

public open external class GizmoVec2ParameterSource(
  outer: UObject,
) : Interface {
  @JsName("SetParameter")
  public open fun setParameter(newValue: Vector2d): Unit

  @JsName("GetParameter")
  public open fun getParameter(): Vector2d

  @JsName("EndModify")
  public open fun endModify(): Unit

  @JsName("BeginModify")
  public open fun beginModify(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoVec2ParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoVec2ParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoVec2ParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoVec2ParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoVec2ParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoVec2ParameterSource
  }
}

public open external class GizmoLineHandleComponent(
  outer: UObject,
) : GizmoBaseComponent {
  @JsName("Normal")
  public open var normal: Vector

  @JsName("HandleSize")
  public open var handleSize: Number

  @JsName("Thickness")
  public open var thickness: Number

  @JsName("Direction")
  public open var direction: Vector

  @JsName("Length")
  public open var length: Number

  @JsName("bImageScale")
  public open var imageScale: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoLineHandleComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoLineHandleComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoLineHandleComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoLineHandleComponent

    @JsName("C")
    public fun copy(other: UObject): GizmoLineHandleComponent

    @JsName("C")
    public fun copy(other: Any): GizmoLineHandleComponent
  }
}

public open external class GizmoRectangleComponent(
  outer: UObject,
) : GizmoBaseComponent {
  @JsName("DirectionX")
  public open var directionX: Vector

  @JsName("DirectionY")
  public open var directionY: Vector

  @JsName("bOrientYAccordingToCamera")
  public open var orientYAccordingToCamera: Boolean

  @JsName("OffsetX")
  public open var offsetX: Number

  @JsName("OffsetY")
  public open var offsetY: Number

  @JsName("LengthX")
  public open var lengthX: Number

  @JsName("LengthY")
  public open var lengthY: Number

  @JsName("Thickness")
  public open var thickness: Number

  @JsName("SegmentFlags")
  public open var segmentFlags: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoRectangleComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoRectangleComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoRectangleComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoRectangleComponent

    @JsName("C")
    public fun copy(other: UObject): GizmoRectangleComponent

    @JsName("C")
    public fun copy(other: Any): GizmoRectangleComponent
  }
}

public open external class GizmoLambdaHitTarget(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoLambdaHitTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoLambdaHitTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoLambdaHitTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoLambdaHitTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoLambdaHitTarget

    @JsName("C")
    public fun copy(other: Any): GizmoLambdaHitTarget
  }
}

public open external class GizmoComponentHitTarget(
  outer: UObject,
) : UObject {
  @JsName("Component")
  public open var component: PrimitiveComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoComponentHitTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoComponentHitTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoComponentHitTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoComponentHitTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoComponentHitTarget

    @JsName("C")
    public fun copy(other: Any): GizmoComponentHitTarget
  }
}

public open external class InputBehaviorSource(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputBehaviorSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputBehaviorSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputBehaviorSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputBehaviorSource

    @JsName("C")
    public fun copy(other: UObject): InputBehaviorSource

    @JsName("C")
    public fun copy(other: Any): InputBehaviorSource
  }
}

public open external class LocalInputBehaviorSource(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalInputBehaviorSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalInputBehaviorSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalInputBehaviorSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalInputBehaviorSource

    @JsName("C")
    public fun copy(other: UObject): LocalInputBehaviorSource

    @JsName("C")
    public fun copy(other: Any): LocalInputBehaviorSource
  }
}

public open external class InputRouter(
  outer: UObject,
) : UObject {
  @JsName("bAutoInvalidateOnHover")
  public open var autoInvalidateOnHover: Boolean

  @JsName("bAutoInvalidateOnCapture")
  public open var autoInvalidateOnCapture: Boolean

  @JsName("ActiveInputBehaviors")
  public open var activeInputBehaviors: InputBehaviorSet

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputRouter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputRouter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputRouter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputRouter

    @JsName("C")
    public fun copy(other: UObject): InputRouter

    @JsName("C")
    public fun copy(other: Any): InputRouter
  }
}

public open external class InteractionMechanic(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractionMechanic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractionMechanic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractionMechanic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractionMechanic

    @JsName("C")
    public fun copy(other: UObject): InteractionMechanic

    @JsName("C")
    public fun copy(other: Any): InteractionMechanic
  }
}

public open external class ActiveGizmo {
  @JsName("Gizmo")
  public open var gizmo: InteractiveGizmo

  public open fun clone(): ActiveGizmo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActiveGizmo

    @JsName("C")
    public fun copy(other: Any): ActiveGizmo
  }
}

public open external class InteractiveGizmoManager(
  outer: UObject,
) : UObject {
  @JsName("ActiveGizmos")
  public open var activeGizmos: Array<ActiveGizmo>

  @JsName("GizmoBuilders")
  public open var gizmoBuilders: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveGizmoManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveGizmoManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveGizmoManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveGizmoManager

    @JsName("C")
    public fun copy(other: UObject): InteractiveGizmoManager

    @JsName("C")
    public fun copy(other: Any): InteractiveGizmoManager
  }
}

public open external class InteractiveToolWithToolTargetsBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolWithToolTargetsBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolWithToolTargetsBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolWithToolTargetsBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolWithToolTargetsBuilder

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolWithToolTargetsBuilder

    @JsName("C")
    public fun copy(other: Any): InteractiveToolWithToolTargetsBuilder
  }
}

public open external class ToolContextTransactionProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolContextTransactionProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolContextTransactionProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolContextTransactionProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolContextTransactionProvider

    @JsName("C")
    public fun copy(other: UObject): ToolContextTransactionProvider

    @JsName("C")
    public fun copy(other: Any): ToolContextTransactionProvider
  }
}

public open external class InteractiveToolManager(
  outer: UObject,
) : UObject {
  @JsName("ActiveLeftTool")
  public open var activeLeftTool: InteractiveTool

  @JsName("ActiveRightTool")
  public open var activeRightTool: InteractiveTool

  @JsName("ToolBuilders")
  public open var toolBuilders: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolManager

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolManager

    @JsName("C")
    public fun copy(other: Any): InteractiveToolManager
  }
}

public open external class ToolFrameworkComponent(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolFrameworkComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolFrameworkComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolFrameworkComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolFrameworkComponent

    @JsName("C")
    public fun copy(other: UObject): ToolFrameworkComponent

    @JsName("C")
    public fun copy(other: Any): ToolFrameworkComponent
  }
}

@JsName("InteractiveToolCameraFocusAPI")
public open external class InteractiveToolCameraFocusApi(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolCameraFocusApi

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolCameraFocusApi

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolCameraFocusApi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolCameraFocusApi

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolCameraFocusApi

    @JsName("C")
    public fun copy(other: Any): InteractiveToolCameraFocusApi
  }
}

@JsName("InteractiveToolNestedAcceptCancelAPI")
public open external class InteractiveToolNestedAcceptCancelApi(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolNestedAcceptCancelApi

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolNestedAcceptCancelApi

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolNestedAcceptCancelApi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolNestedAcceptCancelApi

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolNestedAcceptCancelApi

    @JsName("C")
    public fun copy(other: Any): InteractiveToolNestedAcceptCancelApi
  }
}

@JsName("InteractiveToolExclusiveToolAPI")
public open external class InteractiveToolExclusiveToolApi(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolExclusiveToolApi

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolExclusiveToolApi

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolExclusiveToolApi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolExclusiveToolApi

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolExclusiveToolApi

    @JsName("C")
    public fun copy(other: Any): InteractiveToolExclusiveToolApi
  }
}

public open external class ToolTargetFactory(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): ToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): ToolTargetFactory
  }
}

public open external class ToolTargetManager(
  outer: UObject,
) : UObject {
  @JsName("Factories")
  public open var factories: Array<ToolTargetFactory>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ToolTargetManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ToolTargetManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ToolTargetManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ToolTargetManager

    @JsName("C")
    public fun copy(other: UObject): ToolTargetManager

    @JsName("C")
    public fun copy(other: Any): ToolTargetManager
  }
}

public open external class InteractiveToolsContext(
  outer: UObject,
) : UObject {
  @JsName("InputRouter")
  public open var inputRouter: InputRouter

  @JsName("TargetManager")
  public open var targetManager: ToolTargetManager

  @JsName("ToolManager")
  public open var toolManager: InteractiveToolManager

  @JsName("GizmoManager")
  public open var gizmoManager: InteractiveGizmoManager

  @JsName("ContextObjectStore")
  public open var contextObjectStore: ContextObjectStore

  @JsName("ToolManagerClass")
  public open var toolManagerClass: Class

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InteractiveToolsContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InteractiveToolsContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InteractiveToolsContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InteractiveToolsContext

    @JsName("C")
    public fun copy(other: UObject): InteractiveToolsContext

    @JsName("C")
    public fun copy(other: Any): InteractiveToolsContext
  }
}

public open external class IntervalGizmoActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : GizmoActor {
  @JsName("UpIntervalComponent")
  public open var upIntervalComponent: GizmoLineHandleComponent

  @JsName("DownIntervalComponent")
  public open var downIntervalComponent: GizmoLineHandleComponent

  @JsName("ForwardIntervalComponent")
  public open var forwardIntervalComponent: GizmoLineHandleComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IntervalGizmoActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IntervalGizmoActor

    @JsName("C")
    public fun copy(other: UObject): IntervalGizmoActor

    @JsName("C")
    public fun copy(other: Any): IntervalGizmoActor
  }
}

public open external class IntervalGizmoBuilder(
  outer: UObject,
) : InteractiveGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IntervalGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IntervalGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IntervalGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IntervalGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): IntervalGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): IntervalGizmoBuilder
  }
}

public open external class IntervalGizmo(
  outer: UObject,
) : InteractiveGizmo {
  @JsName("StateTarget")
  public open var stateTarget: GizmoTransformChangeStateTarget

  @JsName("TransformProxy")
  public open var transformProxy: TransformProxy

  @JsName("ActiveComponents")
  public open var activeComponents: Array<PrimitiveComponent>

  @JsName("ActiveGizmos")
  public open var activeGizmos: Array<InteractiveGizmo>

  @JsName("AxisYSource")
  public open var axisYSource: GizmoComponentAxisSource

  @JsName("AxisZSource")
  public open var axisZSource: GizmoComponentAxisSource

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IntervalGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IntervalGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IntervalGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IntervalGizmo

    @JsName("C")
    public fun copy(other: UObject): IntervalGizmo

    @JsName("C")
    public fun copy(other: Any): IntervalGizmo
  }
}

public open external class GizmoBaseFloatParameterSource(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoBaseFloatParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoBaseFloatParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoBaseFloatParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoBaseFloatParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoBaseFloatParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoBaseFloatParameterSource
  }
}

public open external class GizmoAxisIntervalParameterSource(
  outer: UObject,
) : GizmoBaseFloatParameterSource {
  @JsName("FloatParameterSource")
  public open var floatParameterSource: Any

  @JsName("MinParameter")
  public open var minParameter: Number

  @JsName("MaxParameter")
  public open var maxParameter: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoAxisIntervalParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoAxisIntervalParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoAxisIntervalParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoAxisIntervalParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoAxisIntervalParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoAxisIntervalParameterSource
  }
}

public open external class KeyAsModifierInputBehavior(
  outer: UObject,
) : InputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): KeyAsModifierInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): KeyAsModifierInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): KeyAsModifierInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): KeyAsModifierInputBehavior

    @JsName("C")
    public fun copy(other: UObject): KeyAsModifierInputBehavior

    @JsName("C")
    public fun copy(other: Any): KeyAsModifierInputBehavior
  }
}

public open external class MaterialProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialProvider

    @JsName("C")
    public fun copy(other: UObject): MaterialProvider

    @JsName("C")
    public fun copy(other: Any): MaterialProvider
  }
}

public open external class MeshDescriptionCommitter(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshDescriptionCommitter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshDescriptionCommitter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshDescriptionCommitter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshDescriptionCommitter

    @JsName("C")
    public fun copy(other: UObject): MeshDescriptionCommitter

    @JsName("C")
    public fun copy(other: Any): MeshDescriptionCommitter
  }
}

public open external class MeshDescriptionProvider(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshDescriptionProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshDescriptionProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshDescriptionProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshDescriptionProvider

    @JsName("C")
    public fun copy(other: UObject): MeshDescriptionProvider

    @JsName("C")
    public fun copy(other: Any): MeshDescriptionProvider
  }
}

public open external class MeshSurfacePointToolBuilder(
  outer: UObject,
) : InteractiveToolWithToolTargetsBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSurfacePointToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSurfacePointToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSurfacePointToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSurfacePointToolBuilder

    @JsName("C")
    public fun copy(other: UObject): MeshSurfacePointToolBuilder

    @JsName("C")
    public fun copy(other: Any): MeshSurfacePointToolBuilder
  }
}

public open external class MouseHoverBehavior(
  outer: UObject,
) : InputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MouseHoverBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MouseHoverBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MouseHoverBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MouseHoverBehavior

    @JsName("C")
    public fun copy(other: UObject): MouseHoverBehavior

    @JsName("C")
    public fun copy(other: Any): MouseHoverBehavior
  }
}

public open external class LocalMouseHoverBehavior(
  outer: UObject,
) : MouseHoverBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalMouseHoverBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalMouseHoverBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalMouseHoverBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalMouseHoverBehavior

    @JsName("C")
    public fun copy(other: UObject): LocalMouseHoverBehavior

    @JsName("C")
    public fun copy(other: Any): LocalMouseHoverBehavior
  }
}

public open external class MouseWheelInputBehavior(
  outer: UObject,
) : AnyButtonInputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MouseWheelInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MouseWheelInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MouseWheelInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MouseWheelInputBehavior

    @JsName("C")
    public fun copy(other: UObject): MouseWheelInputBehavior

    @JsName("C")
    public fun copy(other: Any): MouseWheelInputBehavior
  }
}

public open external class MultiClickSequenceInputBehavior(
  outer: UObject,
) : AnyButtonInputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MultiClickSequenceInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MultiClickSequenceInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MultiClickSequenceInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MultiClickSequenceInputBehavior

    @JsName("C")
    public fun copy(other: UObject): MultiClickSequenceInputBehavior

    @JsName("C")
    public fun copy(other: Any): MultiClickSequenceInputBehavior
  }
}

public open external class MultiSelectionTool(
  outer: UObject,
) : InteractiveTool {
  @JsName("Targets")
  public open var targets: Array<ToolTarget>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MultiSelectionTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MultiSelectionTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MultiSelectionTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MultiSelectionTool

    @JsName("C")
    public fun copy(other: UObject): MultiSelectionTool

    @JsName("C")
    public fun copy(other: Any): MultiSelectionTool
  }
}

public open external class GizmoFloatParameterChange {
  @JsName("InitialValue")
  public open var initialValue: Number

  @JsName("CurrentValue")
  public open var currentValue: Number

  public open fun clone(): GizmoFloatParameterChange

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GizmoFloatParameterChange

    @JsName("C")
    public fun copy(other: Any): GizmoFloatParameterChange
  }
}

public open external class GizmoLocalFloatParameterSource(
  outer: UObject,
) : GizmoBaseFloatParameterSource {
  @JsName("Value")
  public open var value: Number

  @JsName("LastChange")
  public open var lastChange: GizmoFloatParameterChange

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoLocalFloatParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoLocalFloatParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoLocalFloatParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoLocalFloatParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoLocalFloatParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoLocalFloatParameterSource
  }
}

public open external class GizmoBaseVec2ParameterSource(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoBaseVec2ParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoBaseVec2ParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoBaseVec2ParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoBaseVec2ParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoBaseVec2ParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoBaseVec2ParameterSource
  }
}

public open external class GizmoVec2ParameterChange {
  @JsName("InitialValue")
  public open var initialValue: Vector2d

  @JsName("CurrentValue")
  public open var currentValue: Vector2d

  public open fun clone(): GizmoVec2ParameterChange

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GizmoVec2ParameterChange

    @JsName("C")
    public fun copy(other: Any): GizmoVec2ParameterChange
  }
}

public open external class GizmoLocalVec2ParameterSource(
  outer: UObject,
) : GizmoBaseVec2ParameterSource {
  @JsName("Value")
  public open var value: Vector2d

  @JsName("LastChange")
  public open var lastChange: GizmoVec2ParameterChange

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoLocalVec2ParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoLocalVec2ParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoLocalVec2ParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoLocalVec2ParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoLocalVec2ParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoLocalVec2ParameterSource
  }
}

public open external class GizmoAxisTranslationParameterSource(
  outer: UObject,
) : GizmoBaseFloatParameterSource {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("TransformSource")
  public open var transformSource: Any

  @JsName("Parameter")
  public open var parameter: Number

  @JsName("LastChange")
  public open var lastChange: GizmoFloatParameterChange

  @JsName("CurTranslationAxis")
  public open var curTranslationAxis: Vector

  @JsName("CurTranslationOrigin")
  public open var curTranslationOrigin: Vector

  @JsName("InitialTransform")
  public open var initialTransform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoAxisTranslationParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoAxisTranslationParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoAxisTranslationParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoAxisTranslationParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoAxisTranslationParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoAxisTranslationParameterSource
  }
}

public open external class GizmoPlaneTranslationParameterSource(
  outer: UObject,
) : GizmoBaseVec2ParameterSource {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("TransformSource")
  public open var transformSource: Any

  @JsName("Parameter")
  public open var parameter: Vector2d

  @JsName("LastChange")
  public open var lastChange: GizmoVec2ParameterChange

  @JsName("CurTranslationOrigin")
  public open var curTranslationOrigin: Vector

  @JsName("CurTranslationNormal")
  public open var curTranslationNormal: Vector

  @JsName("CurTranslationAxisX")
  public open var curTranslationAxisX: Vector

  @JsName("CurTranslationAxisY")
  public open var curTranslationAxisY: Vector

  @JsName("InitialTransform")
  public open var initialTransform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoPlaneTranslationParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoPlaneTranslationParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoPlaneTranslationParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoPlaneTranslationParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoPlaneTranslationParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoPlaneTranslationParameterSource
  }
}

public open external class GizmoAxisRotationParameterSource(
  outer: UObject,
) : GizmoBaseFloatParameterSource {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("TransformSource")
  public open var transformSource: Any

  @JsName("Angle")
  public open var angle: Number

  @JsName("LastChange")
  public open var lastChange: GizmoFloatParameterChange

  @JsName("CurRotationAxis")
  public open var curRotationAxis: Vector

  @JsName("CurRotationOrigin")
  public open var curRotationOrigin: Vector

  @JsName("InitialTransform")
  public open var initialTransform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoAxisRotationParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoAxisRotationParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoAxisRotationParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoAxisRotationParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoAxisRotationParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoAxisRotationParameterSource
  }
}

public open external class GizmoUniformScaleParameterSource(
  outer: UObject,
) : GizmoBaseVec2ParameterSource {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("TransformSource")
  public open var transformSource: Any

  @JsName("ScaleMultiplier")
  public open var scaleMultiplier: Number

  @JsName("Parameter")
  public open var parameter: Vector2d

  @JsName("LastChange")
  public open var lastChange: GizmoVec2ParameterChange

  @JsName("CurScaleOrigin")
  public open var curScaleOrigin: Vector

  @JsName("CurScaleNormal")
  public open var curScaleNormal: Vector

  @JsName("CurScaleAxisX")
  public open var curScaleAxisX: Vector

  @JsName("CurScaleAxisY")
  public open var curScaleAxisY: Vector

  @JsName("InitialTransform")
  public open var initialTransform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoUniformScaleParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoUniformScaleParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoUniformScaleParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoUniformScaleParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoUniformScaleParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoUniformScaleParameterSource
  }
}

public open external class GizmoAxisScaleParameterSource(
  outer: UObject,
) : GizmoBaseFloatParameterSource {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("TransformSource")
  public open var transformSource: Any

  @JsName("ScaleMultiplier")
  public open var scaleMultiplier: Number

  @JsName("bClampToZero")
  public open var clampToZero: Boolean

  @JsName("Parameter")
  public open var parameter: Number

  @JsName("LastChange")
  public open var lastChange: GizmoFloatParameterChange

  @JsName("CurScaleAxis")
  public open var curScaleAxis: Vector

  @JsName("CurScaleOrigin")
  public open var curScaleOrigin: Vector

  @JsName("InitialTransform")
  public open var initialTransform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoAxisScaleParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoAxisScaleParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoAxisScaleParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoAxisScaleParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoAxisScaleParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoAxisScaleParameterSource
  }
}

public open external class GizmoPlaneScaleParameterSource(
  outer: UObject,
) : GizmoBaseVec2ParameterSource {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("TransformSource")
  public open var transformSource: Any

  @JsName("ScaleMultiplier")
  public open var scaleMultiplier: Number

  @JsName("bUseEqualScaling")
  public open var useEqualScaling: Boolean

  @JsName("bClampToZero")
  public open var clampToZero: Boolean

  @JsName("Parameter")
  public open var parameter: Vector2d

  @JsName("LastChange")
  public open var lastChange: GizmoVec2ParameterChange

  @JsName("CurScaleOrigin")
  public open var curScaleOrigin: Vector

  @JsName("CurScaleNormal")
  public open var curScaleNormal: Vector

  @JsName("CurScaleAxisX")
  public open var curScaleAxisX: Vector

  @JsName("CurScaleAxisY")
  public open var curScaleAxisY: Vector

  @JsName("InitialTransform")
  public open var initialTransform: Transform

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoPlaneScaleParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoPlaneScaleParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoPlaneScaleParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoPlaneScaleParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoPlaneScaleParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoPlaneScaleParameterSource
  }
}

public open external class PhysicsDataSource(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PhysicsDataSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PhysicsDataSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PhysicsDataSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PhysicsDataSource

    @JsName("C")
    public fun copy(other: UObject): PhysicsDataSource

    @JsName("C")
    public fun copy(other: Any): PhysicsDataSource
  }
}

public open external class PlanePositionGizmoBuilder(
  outer: UObject,
) : InteractiveGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlanePositionGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlanePositionGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlanePositionGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlanePositionGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): PlanePositionGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): PlanePositionGizmoBuilder
  }
}

public open external class PlanePositionGizmo(
  outer: UObject,
) : InteractiveGizmo {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("ParameterSource")
  public open var parameterSource: Any

  @JsName("HitTarget")
  public open var hitTarget: Any

  @JsName("StateTarget")
  public open var stateTarget: Any

  @JsName("MouseBehavior")
  public open var mouseBehavior: ClickDragInputBehavior

  @JsName("bEnableSignedAxis")
  public open var enableSignedAxis: Boolean

  @JsName("bFlipX")
  public open var flipX: Boolean

  @JsName("bFlipY")
  public open var flipY: Boolean

  @JsName("bInInteraction")
  public open var inInteraction: Boolean

  @JsName("InteractionOrigin")
  public open var interactionOrigin: Vector

  @JsName("InteractionNormal")
  public open var interactionNormal: Vector

  @JsName("InteractionAxisX")
  public open var interactionAxisX: Vector

  @JsName("InteractionAxisY")
  public open var interactionAxisY: Vector

  @JsName("InteractionStartPoint")
  public open var interactionStartPoint: Vector

  @JsName("InteractionCurPoint")
  public open var interactionCurPoint: Vector

  @JsName("InteractionStartParameter")
  public open var interactionStartParameter: Vector2d

  @JsName("InteractionCurParameter")
  public open var interactionCurParameter: Vector2d

  @JsName("ParameterSigns")
  public open var parameterSigns: Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlanePositionGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlanePositionGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlanePositionGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlanePositionGizmo

    @JsName("C")
    public fun copy(other: UObject): PlanePositionGizmo

    @JsName("C")
    public fun copy(other: Any): PlanePositionGizmo
  }
}

public open external class PrimitiveComponentBackedTarget(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PrimitiveComponentBackedTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PrimitiveComponentBackedTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PrimitiveComponentBackedTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PrimitiveComponentBackedTarget

    @JsName("C")
    public fun copy(other: UObject): PrimitiveComponentBackedTarget

    @JsName("C")
    public fun copy(other: Any): PrimitiveComponentBackedTarget
  }
}

public open external class PrimitiveComponentToolTarget(
  outer: UObject,
) : ToolTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PrimitiveComponentToolTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PrimitiveComponentToolTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PrimitiveComponentToolTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PrimitiveComponentToolTarget

    @JsName("C")
    public fun copy(other: UObject): PrimitiveComponentToolTarget

    @JsName("C")
    public fun copy(other: Any): PrimitiveComponentToolTarget
  }
}

public open external class PrimitiveComponentToolTargetFactory(
  outer: UObject,
) : ToolTargetFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PrimitiveComponentToolTargetFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PrimitiveComponentToolTargetFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PrimitiveComponentToolTargetFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PrimitiveComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: UObject): PrimitiveComponentToolTargetFactory

    @JsName("C")
    public fun copy(other: Any): PrimitiveComponentToolTargetFactory
  }
}

public open external class RepositionableTransformGizmoBuilder(
  outer: UObject,
) : CombinedTransformGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RepositionableTransformGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RepositionableTransformGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RepositionableTransformGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RepositionableTransformGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): RepositionableTransformGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): RepositionableTransformGizmoBuilder
  }
}

public open external class RepositionableTransformGizmo(
  outer: UObject,
) : CombinedTransformGizmo {
  @JsName("RepositionStateTarget")
  public open var repositionStateTarget: GizmoTransformChangeStateTarget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RepositionableTransformGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RepositionableTransformGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RepositionableTransformGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RepositionableTransformGizmo

    @JsName("C")
    public fun copy(other: UObject): RepositionableTransformGizmo

    @JsName("C")
    public fun copy(other: Any): RepositionableTransformGizmo
  }
}

public open external class ScalableSphereGizmoBuilder(
  outer: UObject,
) : InteractiveGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScalableSphereGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScalableSphereGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScalableSphereGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScalableSphereGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): ScalableSphereGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): ScalableSphereGizmoBuilder
  }
}

public open external class ScalableSphereGizmo(
  outer: UObject,
) : InteractiveGizmo {
  @JsName("HitErrorThreshold")
  public open var hitErrorThreshold: Number

  @JsName("TransactionDescription")
  public open var transactionDescription: String

  @JsName("Radius")
  public open var radius: Number

  @JsName("bIsHovering")
  public open var isHovering: Boolean

  @JsName("bIsDragging")
  public open var isDragging: Boolean

  @JsName("ActiveTarget")
  public open var activeTarget: TransformProxy

  @JsName("ActiveAxis")
  public open var activeAxis: Vector

  @JsName("DragStartWorldPosition")
  public open var dragStartWorldPosition: Vector

  @JsName("DragCurrentPositionProjected")
  public open var dragCurrentPositionProjected: Vector

  @JsName("InteractionStartParameter")
  public open var interactionStartParameter: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScalableSphereGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScalableSphereGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScalableSphereGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScalableSphereGizmo

    @JsName("C")
    public fun copy(other: UObject): ScalableSphereGizmo

    @JsName("C")
    public fun copy(other: Any): ScalableSphereGizmo
  }
}

public open external class ScalableSphereGizmoInputBehavior(
  outer: UObject,
) : AnyButtonInputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScalableSphereGizmoInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScalableSphereGizmoInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScalableSphereGizmoInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScalableSphereGizmoInputBehavior

    @JsName("C")
    public fun copy(other: UObject): ScalableSphereGizmoInputBehavior

    @JsName("C")
    public fun copy(other: Any): ScalableSphereGizmoInputBehavior
  }
}

public open external class SceneSnappingManager(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SceneSnappingManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SceneSnappingManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SceneSnappingManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SceneSnappingManager

    @JsName("C")
    public fun copy(other: UObject): SceneSnappingManager

    @JsName("C")
    public fun copy(other: Any): SceneSnappingManager
  }
}

public open external class SelectionSet(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SelectionSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SelectionSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SelectionSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SelectionSet

    @JsName("C")
    public fun copy(other: UObject): SelectionSet

    @JsName("C")
    public fun copy(other: Any): SelectionSet
  }
}

public open external class MeshSelectionSet(
  outer: UObject,
) : SelectionSet {
  @JsName("Vertices")
  public open var vertices: Array<Number>

  @JsName("Edges")
  public open var edges: Array<Number>

  @JsName("Faces")
  public open var faces: Array<Number>

  @JsName("Groups")
  public open var groups: Array<Number>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshSelectionSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshSelectionSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshSelectionSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshSelectionSet

    @JsName("C")
    public fun copy(other: UObject): MeshSelectionSet

    @JsName("C")
    public fun copy(other: Any): MeshSelectionSet
  }
}

public open external class SingleClickInputBehavior(
  outer: UObject,
) : AnyButtonInputBehavior {
  @JsName("HitTestOnRelease")
  public open var hitTestOnRelease: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleClickInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleClickInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleClickInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleClickInputBehavior

    @JsName("C")
    public fun copy(other: UObject): SingleClickInputBehavior

    @JsName("C")
    public fun copy(other: Any): SingleClickInputBehavior
  }
}

public open external class LocalSingleClickInputBehavior(
  outer: UObject,
) : SingleClickInputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalSingleClickInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalSingleClickInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalSingleClickInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalSingleClickInputBehavior

    @JsName("C")
    public fun copy(other: UObject): LocalSingleClickInputBehavior

    @JsName("C")
    public fun copy(other: Any): LocalSingleClickInputBehavior
  }
}

public open external class SingleClickOrDragInputBehavior(
  outer: UObject,
) : AnyButtonInputBehavior {
  @JsName("bBeginDragIfClickTargetNotHit")
  public open var beginDragIfClickTargetNotHit: Boolean

  @JsName("ClickDistanceThreshold")
  public open var clickDistanceThreshold: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleClickOrDragInputBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleClickOrDragInputBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleClickOrDragInputBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleClickOrDragInputBehavior

    @JsName("C")
    public fun copy(other: UObject): SingleClickOrDragInputBehavior

    @JsName("C")
    public fun copy(other: Any): SingleClickOrDragInputBehavior
  }
}

public open external class SingleClickToolBuilder(
  outer: UObject,
) : InteractiveToolBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleClickToolBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleClickToolBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleClickToolBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleClickToolBuilder

    @JsName("C")
    public fun copy(other: UObject): SingleClickToolBuilder

    @JsName("C")
    public fun copy(other: Any): SingleClickToolBuilder
  }
}

public open external class SingleClickTool(
  outer: UObject,
) : InteractiveTool {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleClickTool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleClickTool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleClickTool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleClickTool

    @JsName("C")
    public fun copy(other: UObject): SingleClickTool

    @JsName("C")
    public fun copy(other: Any): SingleClickTool
  }
}

public open external class SingleKeyCaptureBehavior(
  outer: UObject,
) : InputBehavior {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SingleKeyCaptureBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SingleKeyCaptureBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SingleKeyCaptureBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SingleKeyCaptureBehavior

    @JsName("C")
    public fun copy(other: UObject): SingleKeyCaptureBehavior

    @JsName("C")
    public fun copy(other: Any): SingleKeyCaptureBehavior
  }
}

public open external class SkeletalMeshBackedTarget(
  outer: UObject,
) : AssetBackedTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkeletalMeshBackedTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkeletalMeshBackedTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkeletalMeshBackedTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkeletalMeshBackedTarget

    @JsName("C")
    public fun copy(other: UObject): SkeletalMeshBackedTarget

    @JsName("C")
    public fun copy(other: Any): SkeletalMeshBackedTarget
  }
}

public open external class GizmoNilStateTarget(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoNilStateTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoNilStateTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoNilStateTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoNilStateTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoNilStateTarget

    @JsName("C")
    public fun copy(other: Any): GizmoNilStateTarget
  }
}

public open external class GizmoLambdaStateTarget(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoLambdaStateTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoLambdaStateTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoLambdaStateTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoLambdaStateTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoLambdaStateTarget

    @JsName("C")
    public fun copy(other: Any): GizmoLambdaStateTarget
  }
}

public open external class GizmoObjectModifyStateTarget(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoObjectModifyStateTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoObjectModifyStateTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoObjectModifyStateTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoObjectModifyStateTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoObjectModifyStateTarget

    @JsName("C")
    public fun copy(other: Any): GizmoObjectModifyStateTarget
  }
}

public open external class StaticMeshBackedTarget(
  outer: UObject,
) : AssetBackedTarget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshBackedTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshBackedTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshBackedTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshBackedTarget

    @JsName("C")
    public fun copy(other: UObject): StaticMeshBackedTarget

    @JsName("C")
    public fun copy(other: Any): StaticMeshBackedTarget
  }
}

public open external class CombinedTransformGizmoContextObject(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CombinedTransformGizmoContextObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CombinedTransformGizmoContextObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CombinedTransformGizmoContextObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CombinedTransformGizmoContextObject

    @JsName("C")
    public fun copy(other: UObject): CombinedTransformGizmoContextObject

    @JsName("C")
    public fun copy(other: Any): CombinedTransformGizmoContextObject
  }
}

public open external class GizmoBaseTransformSource(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoBaseTransformSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoBaseTransformSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoBaseTransformSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoBaseTransformSource

    @JsName("C")
    public fun copy(other: UObject): GizmoBaseTransformSource

    @JsName("C")
    public fun copy(other: Any): GizmoBaseTransformSource
  }
}

public open external class GizmoComponentWorldTransformSource(
  outer: UObject,
) : GizmoBaseTransformSource {
  @JsName("Component")
  public open var component: SceneComponent

  @JsName("bModifyComponentOnTransform")
  public open var modifyComponentOnTransform: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoComponentWorldTransformSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoComponentWorldTransformSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoComponentWorldTransformSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoComponentWorldTransformSource

    @JsName("C")
    public fun copy(other: UObject): GizmoComponentWorldTransformSource

    @JsName("C")
    public fun copy(other: Any): GizmoComponentWorldTransformSource
  }
}

public open external class GizmoScaledTransformSource(
  outer: UObject,
) : GizmoBaseTransformSource {
  @JsName("ChildTransformSource")
  public open var childTransformSource: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoScaledTransformSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoScaledTransformSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoScaledTransformSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoScaledTransformSource

    @JsName("C")
    public fun copy(other: UObject): GizmoScaledTransformSource

    @JsName("C")
    public fun copy(other: Any): GizmoScaledTransformSource
  }
}

public open external class GizmoTransformProxyTransformSource(
  outer: UObject,
) : GizmoBaseTransformSource {
  @JsName("Proxy")
  public open var proxy: TransformProxy

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoTransformProxyTransformSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoTransformProxyTransformSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoTransformProxyTransformSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoTransformProxyTransformSource

    @JsName("C")
    public fun copy(other: UObject): GizmoTransformProxyTransformSource

    @JsName("C")
    public fun copy(other: Any): GizmoTransformProxyTransformSource
  }
}

public open external class GizmoScaledAndUnscaledTransformSources(
  outer: UObject,
) : GizmoBaseTransformSource {
  @JsName("ScaledTransformSource")
  public open var scaledTransformSource: Any

  @JsName("UnscaledTransformSource")
  public open var unscaledTransformSource: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoScaledAndUnscaledTransformSources

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoScaledAndUnscaledTransformSources

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoScaledAndUnscaledTransformSources

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoScaledAndUnscaledTransformSources

    @JsName("C")
    public fun copy(other: UObject): GizmoScaledAndUnscaledTransformSources

    @JsName("C")
    public fun copy(other: Any): GizmoScaledAndUnscaledTransformSources
  }
}

public open external class GizmoEditorAxisSource(
  outer: UObject,
) : UObject {
  @JsName("AxisIndex")
  public open var axisIndex: Number

  @JsName("bLocalAxes")
  public open var localAxes: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoEditorAxisSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoEditorAxisSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoEditorAxisSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoEditorAxisSource

    @JsName("C")
    public fun copy(other: UObject): GizmoEditorAxisSource

    @JsName("C")
    public fun copy(other: Any): GizmoEditorAxisSource
  }
}

public open external class EditorInteractiveGizmoConditionalBuilder(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorInteractiveGizmoConditionalBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorInteractiveGizmoConditionalBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorInteractiveGizmoConditionalBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorInteractiveGizmoConditionalBuilder

    @JsName("C")
    public fun copy(other: UObject): EditorInteractiveGizmoConditionalBuilder

    @JsName("C")
    public fun copy(other: Any): EditorInteractiveGizmoConditionalBuilder
  }
}

public open external class EditorInteractiveGizmoRegistry(
  outer: UObject,
) : UObject {
  @JsName("GizmoCategoryMap")
  public open var gizmoCategoryMap: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorInteractiveGizmoRegistry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorInteractiveGizmoRegistry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorInteractiveGizmoRegistry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorInteractiveGizmoRegistry

    @JsName("C")
    public fun copy(other: UObject): EditorInteractiveGizmoRegistry

    @JsName("C")
    public fun copy(other: Any): EditorInteractiveGizmoRegistry
  }
}

public open external class ActiveEditorGizmo {
  @JsName("Gizmo")
  public open var gizmo: InteractiveGizmo

  public open fun clone(): ActiveEditorGizmo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActiveEditorGizmo

    @JsName("C")
    public fun copy(other: Any): ActiveEditorGizmo
  }
}

public open external class EditorInteractiveGizmoManager(
  outer: UObject,
) : InteractiveGizmoManager {
  @JsName("Registry")
  public open var registry: EditorInteractiveGizmoRegistry

  @JsName("ActiveEditorGizmos")
  public open var activeEditorGizmos: Array<ActiveEditorGizmo>

  @JsName("CachedGizmoMap")
  public open var cachedGizmoMap: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorInteractiveGizmoManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorInteractiveGizmoManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorInteractiveGizmoManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorInteractiveGizmoManager

    @JsName("C")
    public fun copy(other: UObject): EditorInteractiveGizmoManager

    @JsName("C")
    public fun copy(other: Any): EditorInteractiveGizmoManager
  }
}

public open external class EditorGizmoRegistryCategoryEntry(
  outer: UObject,
) : UObject {
  @JsName("GizmoTypes")
  public open var gizmoTypes: Array<InteractiveGizmoBuilder>

  @JsName("CategoryName")
  public open var categoryName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorGizmoRegistryCategoryEntry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorGizmoRegistryCategoryEntry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorGizmoRegistryCategoryEntry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorGizmoRegistryCategoryEntry

    @JsName("C")
    public fun copy(other: UObject): EditorGizmoRegistryCategoryEntry

    @JsName("C")
    public fun copy(other: Any): EditorGizmoRegistryCategoryEntry
  }
}

@JsName("EditorGizmoRegistryCategoryEntry_ConditionalSelection")
public open external class EditorGizmoRegistryCategoryEntryConditionalSelection(
  outer: UObject,
) : EditorGizmoRegistryCategoryEntry {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorGizmoRegistryCategoryEntryConditionalSelection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        EditorGizmoRegistryCategoryEntryConditionalSelection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorGizmoRegistryCategoryEntryConditionalSelection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorGizmoRegistryCategoryEntryConditionalSelection

    @JsName("C")
    public fun copy(other: UObject): EditorGizmoRegistryCategoryEntryConditionalSelection

    @JsName("C")
    public fun copy(other: Any): EditorGizmoRegistryCategoryEntryConditionalSelection
  }
}

@JsName("EditorGizmoRegistryCategoryEntry_Primary")
public open external class EditorGizmoRegistryCategoryEntryPrimary(
  outer: UObject,
) : EditorGizmoRegistryCategoryEntryConditionalSelection {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorGizmoRegistryCategoryEntryPrimary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorGizmoRegistryCategoryEntryPrimary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorGizmoRegistryCategoryEntryPrimary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorGizmoRegistryCategoryEntryPrimary

    @JsName("C")
    public fun copy(other: UObject): EditorGizmoRegistryCategoryEntryPrimary

    @JsName("C")
    public fun copy(other: Any): EditorGizmoRegistryCategoryEntryPrimary
  }
}

@JsName("EditorGizmoRegistryCategoryEntry_Accessory")
public open external class EditorGizmoRegistryCategoryEntryAccessory(
  outer: UObject,
) : EditorGizmoRegistryCategoryEntryConditionalSelection {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorGizmoRegistryCategoryEntryAccessory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorGizmoRegistryCategoryEntryAccessory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorGizmoRegistryCategoryEntryAccessory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorGizmoRegistryCategoryEntryAccessory

    @JsName("C")
    public fun copy(other: UObject): EditorGizmoRegistryCategoryEntryAccessory

    @JsName("C")
    public fun copy(other: Any): EditorGizmoRegistryCategoryEntryAccessory
  }
}

public open external class EditorInteractiveGizmoSelectionBuilder(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorInteractiveGizmoSelectionBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorInteractiveGizmoSelectionBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorInteractiveGizmoSelectionBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorInteractiveGizmoSelectionBuilder

    @JsName("C")
    public fun copy(other: UObject): EditorInteractiveGizmoSelectionBuilder

    @JsName("C")
    public fun copy(other: Any): EditorInteractiveGizmoSelectionBuilder
  }
}

public open external class EditorInteractiveGizmoSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("TransformGizmoBuilder")
  public open var transformGizmoBuilder: InteractiveGizmoBuilder

  @JsName("Registry")
  public open var registry: EditorInteractiveGizmoRegistry

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorInteractiveGizmoSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorInteractiveGizmoSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorInteractiveGizmoSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorInteractiveGizmoSubsystem

    @JsName("C")
    public fun copy(other: UObject): EditorInteractiveGizmoSubsystem

    @JsName("C")
    public fun copy(other: Any): EditorInteractiveGizmoSubsystem
  }
}

public open external class GizmoEditorAxisTranslationParameterSource(
  outer: UObject,
) : GizmoBaseFloatParameterSource {
  @JsName("AxisSource")
  public open var axisSource: Any

  @JsName("Parameter")
  public open var parameter: Number

  @JsName("LastChange")
  public open var lastChange: GizmoFloatParameterChange

  @JsName("CurTranslationAxis")
  public open var curTranslationAxis: Vector

  @JsName("CurTranslationOrigin")
  public open var curTranslationOrigin: Vector

  @JsName("LastPivotLocation")
  public open var lastPivotLocation: Vector

  @JsName("LastSnappedLocation")
  public open var lastSnappedLocation: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoEditorAxisTranslationParameterSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoEditorAxisTranslationParameterSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoEditorAxisTranslationParameterSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoEditorAxisTranslationParameterSource

    @JsName("C")
    public fun copy(other: UObject): GizmoEditorAxisTranslationParameterSource

    @JsName("C")
    public fun copy(other: Any): GizmoEditorAxisTranslationParameterSource
  }
}

public open external class EditorTransformGizmoBuilder(
  outer: UObject,
) : InteractiveGizmoBuilder {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorTransformGizmoBuilder

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorTransformGizmoBuilder

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorTransformGizmoBuilder

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorTransformGizmoBuilder

    @JsName("C")
    public fun copy(other: UObject): EditorTransformGizmoBuilder

    @JsName("C")
    public fun copy(other: Any): EditorTransformGizmoBuilder
  }
}

public open external class GizmoBaseObject(
  outer: UObject,
) : UObject {
  @JsName("LocalToWorldTransform")
  public open var localToWorldTransform: Transform

  @JsName("Material")
  public open var material: MaterialInterface

  @JsName("CurrentMaterial")
  public open var currentMaterial: MaterialInterface

  @JsName("GizmoScale")
  public open var gizmoScale: Number

  @JsName("PixelHitDistanceThreshold")
  public open var pixelHitDistanceThreshold: Number

  @JsName("SetWorldLocalState")
  public open fun setWorldLocalState(worldIn: Boolean): Unit

  @JsName("SetVisibility")
  public open fun setVisibility(visibleIn: Boolean): Unit

  @JsName("SetMaterial")
  public open fun setMaterial(inMaterial: MaterialInterface): Unit

  @JsName("SetLocalToWorldTransform")
  public open fun setLocalToWorldTransform(localToWorldTransformIn: Transform): Unit

  @JsName("SetInteractingState")
  public open fun setInteractingState(interactingIn: Boolean): Unit

  @JsName("SetHoverState")
  public open fun setHoverState(hoveringIn: Boolean): Unit

  @JsName("SetGizmoScale")
  public open fun setGizmoScale(inGizmoScale: Number): Unit

  @JsName("SetCurrentMaterial")
  public open fun setCurrentMaterial(inCurrentMaterial: MaterialInterface): Unit

  @JsName("GetWorldLocalState")
  public open fun getWorldLocalState(): Boolean

  @JsName("GetVisibility")
  public open fun getVisibility(): Boolean

  @JsName("GetMaterial")
  public open fun getMaterial(): MaterialInterface

  @JsName("GetLocalToWorldTransform")
  public open fun getLocalToWorldTransform(): Transform

  @JsName("GetInteractingState")
  public open fun getInteractingState(): Boolean

  @JsName("GetHoverState")
  public open fun getHoverState(): Boolean

  @JsName("GetGizmoScale")
  public open fun getGizmoScale(): Number

  @JsName("GetCurrentMaterial")
  public open fun getCurrentMaterial(): MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoBaseObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoBaseObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoBaseObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoBaseObject

    @JsName("C")
    public fun copy(other: UObject): GizmoBaseObject

    @JsName("C")
    public fun copy(other: Any): GizmoBaseObject
  }
}

public open external class GizmoGroupObject(
  outer: UObject,
) : GizmoBaseObject {
  @JsName("Objects")
  public open var objects: Array<GizmoBaseObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoGroupObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoGroupObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoGroupObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoGroupObject

    @JsName("C")
    public fun copy(other: UObject): GizmoGroupObject

    @JsName("C")
    public fun copy(other: Any): GizmoGroupObject
  }
}

public open external class GizmoCylinderObject(
  outer: UObject,
) : GizmoBaseObject {
  @JsName("Direction")
  public open var direction: Vector

  @JsName("Length")
  public open var length: Any

  @JsName("Offset")
  public open var offset: Any

  @JsName("Radius")
  public open var radius: Any

  @JsName("NumSides")
  public open var numSides: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoCylinderObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoCylinderObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoCylinderObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoCylinderObject

    @JsName("C")
    public fun copy(other: UObject): GizmoCylinderObject

    @JsName("C")
    public fun copy(other: Any): GizmoCylinderObject
  }
}

public open external class GizmoConeObject(
  outer: UObject,
) : GizmoBaseObject {
  @JsName("Direction")
  public open var direction: Vector

  @JsName("Height")
  public open var height: Any

  @JsName("Offset")
  public open var offset: Any

  @JsName("Angle")
  public open var angle: Any

  @JsName("NumSides")
  public open var numSides: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoConeObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoConeObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoConeObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoConeObject

    @JsName("C")
    public fun copy(other: UObject): GizmoConeObject

    @JsName("C")
    public fun copy(other: Any): GizmoConeObject
  }
}

public open external class GizmoBoxObject(
  outer: UObject,
) : GizmoBaseObject {
  @JsName("Dimensions")
  public open var dimensions: Vector

  @JsName("UpDirection")
  public open var upDirection: Vector

  @JsName("SideDirection")
  public open var sideDirection: Vector

  @JsName("Offset")
  public open var offset: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoBoxObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoBoxObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoBoxObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoBoxObject

    @JsName("C")
    public fun copy(other: UObject): GizmoBoxObject

    @JsName("C")
    public fun copy(other: Any): GizmoBoxObject
  }
}

public open external class GizmoArrowObject(
  outer: UObject,
) : GizmoBaseObject {
  @JsName("bHasConeHead")
  public open var hasConeHead: Number

  @JsName("Direction")
  public open var direction: Vector

  @JsName("Offset")
  public open var offset: Number

  @JsName("CylinderObject")
  public open var cylinderObject: GizmoCylinderObject

  @JsName("ConeObject")
  public open var coneObject: GizmoConeObject

  @JsName("BoxObject")
  public open var boxObject: GizmoBoxObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoArrowObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoArrowObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoArrowObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoArrowObject

    @JsName("C")
    public fun copy(other: UObject): GizmoArrowObject

    @JsName("C")
    public fun copy(other: Any): GizmoArrowObject
  }
}

public open external class GizmoObjectTransformChangeStateTarget(
  outer: UObject,
) : UObject {
  @JsName("TransactionManager")
  public open var transactionManager: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoObjectTransformChangeStateTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoObjectTransformChangeStateTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoObjectTransformChangeStateTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoObjectTransformChangeStateTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoObjectTransformChangeStateTarget

    @JsName("C")
    public fun copy(other: Any): GizmoObjectTransformChangeStateTarget
  }
}

public open external class EditorTransformGizmo(
  outer: UObject,
) : InteractiveGizmo {
  @JsName("ActiveTarget")
  public open var activeTarget: TransformProxy

  @JsName("bSnapToWorldGrid")
  public open var snapToWorldGrid: Boolean

  @JsName("bGridSizeIsExplicit")
  public open var gridSizeIsExplicit: Boolean

  @JsName("ExplicitGridSize")
  public open var explicitGridSize: Vector

  @JsName("bRotationGridSizeIsExplicit")
  public open var rotationGridSizeIsExplicit: Boolean

  @JsName("ExplicitRotationGridSize")
  public open var explicitRotationGridSize: Rotator

  @JsName("bSnapToWorldRotGrid")
  public open var snapToWorldRotGrid: Boolean

  @JsName("bUseContextCoordinateSystem")
  public open var useContextCoordinateSystem: Boolean

  @JsName("CurrentCoordinateSystem")
  public open var currentCoordinateSystem: String

  @JsName("ActiveObjects")
  public open var activeObjects: Array<GizmoBaseObject>

  @JsName("NonuniformScaleObjects")
  public open var nonuniformScaleObjects: Array<GizmoBaseObject>

  @JsName("ActiveGizmos")
  public open var activeGizmos: Array<InteractiveGizmo>

  @JsName("CameraAxisSource")
  public open var cameraAxisSource: GizmoConstantFrameAxisSource

  @JsName("GizmoGroupObject")
  public open var gizmoGroupObject: GizmoGroupObject

  @JsName("AxisXSource")
  public open var axisXSource: GizmoEditorAxisSource

  @JsName("AxisYSource")
  public open var axisYSource: GizmoEditorAxisSource

  @JsName("AxisZSource")
  public open var axisZSource: GizmoEditorAxisSource

  @JsName("AxisXObject")
  public open var axisXObject: GizmoArrowObject

  @JsName("AxisYObject")
  public open var axisYObject: GizmoArrowObject

  @JsName("AxisZObject")
  public open var axisZObject: GizmoArrowObject

  @JsName("UnitAxisXSource")
  public open var unitAxisXSource: GizmoEditorAxisSource

  @JsName("UnitAxisYSource")
  public open var unitAxisYSource: GizmoEditorAxisSource

  @JsName("UnitAxisZSource")
  public open var unitAxisZSource: GizmoEditorAxisSource

  @JsName("StateTarget")
  public open var stateTarget: GizmoObjectTransformChangeStateTarget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorTransformGizmo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorTransformGizmo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorTransformGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorTransformGizmo

    @JsName("C")
    public fun copy(other: UObject): EditorTransformGizmo

    @JsName("C")
    public fun copy(other: Any): EditorTransformGizmo
  }
}

public open external class EditorInteractiveToolsContext(
  outer: UObject,
) : InteractiveToolsContext {
  @JsName("StandardVertexColorMaterial")
  public open var standardVertexColorMaterial: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorInteractiveToolsContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorInteractiveToolsContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorInteractiveToolsContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorInteractiveToolsContext

    @JsName("C")
    public fun copy(other: UObject): EditorInteractiveToolsContext

    @JsName("C")
    public fun copy(other: Any): EditorInteractiveToolsContext
  }
}

public open external class EdModeInteractiveToolsContext(
  outer: UObject,
) : EditorInteractiveToolsContext {
  @JsName("ParentModeManagerToolsContext")
  public open var parentModeManagerToolsContext: ModeManagerInteractiveToolsContext

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdModeInteractiveToolsContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdModeInteractiveToolsContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdModeInteractiveToolsContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdModeInteractiveToolsContext

    @JsName("C")
    public fun copy(other: UObject): EdModeInteractiveToolsContext

    @JsName("C")
    public fun copy(other: Any): EdModeInteractiveToolsContext
  }
}

public open external class ModeManagerInteractiveToolsContext(
  outer: UObject,
) : EditorInteractiveToolsContext {
  @JsName("EdModeToolsContexts")
  public open var edModeToolsContexts: Array<EdModeInteractiveToolsContext>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ModeManagerInteractiveToolsContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ModeManagerInteractiveToolsContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ModeManagerInteractiveToolsContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ModeManagerInteractiveToolsContext

    @JsName("C")
    public fun copy(other: UObject): ModeManagerInteractiveToolsContext

    @JsName("C")
    public fun copy(other: Any): ModeManagerInteractiveToolsContext
  }
}

public open external class GizmoObjectHitTarget(
  outer: UObject,
) : UObject {
  @JsName("GizmoObject")
  public open var gizmoObject: GizmoBaseObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoObjectHitTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoObjectHitTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoObjectHitTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoObjectHitTarget

    @JsName("C")
    public fun copy(other: UObject): GizmoObjectHitTarget

    @JsName("C")
    public fun copy(other: Any): GizmoObjectHitTarget
  }
}

public open external class GizmoObjectWorldTransformSource(
  outer: UObject,
) : GizmoBaseTransformSource {
  @JsName("UObject")
  public open var uObject: GizmoBaseObject

  @JsName("bModifyObjectOnTransform")
  public open var modifyObjectOnTransform: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoObjectWorldTransformSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoObjectWorldTransformSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoObjectWorldTransformSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoObjectWorldTransformSource

    @JsName("C")
    public fun copy(other: UObject): GizmoObjectWorldTransformSource

    @JsName("C")
    public fun copy(other: Any): GizmoObjectWorldTransformSource
  }
}

@JsName("PIEPreviewSettings")
public open external class PiePreviewSettings(
  outer: UObject,
) : UObject {
  @JsName("WindowPosX")
  public open var windowPosX: Number

  @JsName("WindowPosY")
  public open var windowPosY: Number

  @JsName("WindowScalingFactor")
  public open var windowScalingFactor: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PiePreviewSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PiePreviewSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PiePreviewSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PiePreviewSettings

    @JsName("C")
    public fun copy(other: UObject): PiePreviewSettings

    @JsName("C")
    public fun copy(other: Any): PiePreviewSettings
  }
}

@JsName("EMovieSceneCaptureProtocolState")
public external object MovieSceneCaptureProtocolState {
  public var Idle: String

  public var Initialized: String

  public var Capturing: String

  public var Finalizing: String

  @JsName("EMovieSceneCaptureProtocolState_MAX")
  public var Max: String
}

public open external class MovieSceneCaptureProtocolBase(
  outer: UObject,
) : UObject {
  @JsName("State")
  public open var state: String

  @JsName("IsCapturing")
  public open fun isCapturing(): Boolean

  @JsName("GetState")
  public open fun getState(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCaptureProtocolBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCaptureProtocolBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCaptureProtocolBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCaptureProtocolBase

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCaptureProtocolBase

    @JsName("C")
    public fun copy(other: Any): MovieSceneCaptureProtocolBase
  }
}

public open external class MovieSceneAudioCaptureProtocolBase(
  outer: UObject,
) : MovieSceneCaptureProtocolBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneAudioCaptureProtocolBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneAudioCaptureProtocolBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneAudioCaptureProtocolBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneAudioCaptureProtocolBase

    @JsName("C")
    public fun copy(other: UObject): MovieSceneAudioCaptureProtocolBase

    @JsName("C")
    public fun copy(other: Any): MovieSceneAudioCaptureProtocolBase
  }
}

public open external class NullAudioCaptureProtocol(
  outer: UObject,
) : MovieSceneAudioCaptureProtocolBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NullAudioCaptureProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NullAudioCaptureProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NullAudioCaptureProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NullAudioCaptureProtocol

    @JsName("C")
    public fun copy(other: UObject): NullAudioCaptureProtocol

    @JsName("C")
    public fun copy(other: Any): NullAudioCaptureProtocol
  }
}

public open external class MasterAudioSubmixCaptureProtocol(
  outer: UObject,
) : MovieSceneAudioCaptureProtocolBase {
  @JsName("Filename")
  public open var filename: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MasterAudioSubmixCaptureProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MasterAudioSubmixCaptureProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MasterAudioSubmixCaptureProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MasterAudioSubmixCaptureProtocol

    @JsName("C")
    public fun copy(other: UObject): MasterAudioSubmixCaptureProtocol

    @JsName("C")
    public fun copy(other: Any): MasterAudioSubmixCaptureProtocol
  }
}

public open external class MovieSceneImageCaptureProtocolBase(
  outer: UObject,
) : MovieSceneCaptureProtocolBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneImageCaptureProtocolBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneImageCaptureProtocolBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneImageCaptureProtocolBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneImageCaptureProtocolBase

    @JsName("C")
    public fun copy(other: UObject): MovieSceneImageCaptureProtocolBase

    @JsName("C")
    public fun copy(other: Any): MovieSceneImageCaptureProtocolBase
  }
}

public open external class CompositionGraphCapturePasses {
  @JsName("Value")
  public open var value: Array<String>

  public open fun clone(): CompositionGraphCapturePasses

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CompositionGraphCapturePasses

    @JsName("C")
    public fun copy(other: Any): CompositionGraphCapturePasses
  }
}

@JsName("EHDRCaptureGamut")
public external object HDRCaptureGamut {
  @JsName("HCGM_Rec709")
  public var Rec709: String

  @JsName("HCGM_P3DCI")
  public var P3dci: String

  @JsName("HCGM_Rec2020")
  public var Rec2020: String

  @JsName("HCGM_ACES")
  public var ACES: String

  @JsName("HCGM_ACEScg")
  public var AceScg: String

  @JsName("HCGM_Linear")
  public var Linear: String

  @JsName("HCGM_MAX")
  public var Max: String
}

public open external class CompositionGraphCaptureProtocol(
  outer: UObject,
) : MovieSceneImageCaptureProtocolBase {
  @JsName("IncludeRenderPasses")
  public open var includeRenderPasses: CompositionGraphCapturePasses

  @JsName("bCaptureFramesInHDR")
  public open var captureFramesInHdr: Boolean

  @JsName("HDRCompressionQuality")
  public open var hdrCompressionQuality: Number

  @JsName("CaptureGamut")
  public open var captureGamut: String

  @JsName("PostProcessingMaterial")
  public open var postProcessingMaterial: SoftObjectPath

  @JsName("bDisableScreenPercentage")
  public open var disableScreenPercentage: Boolean

  @JsName("PostProcessingMaterialPtr")
  public open var postProcessingMaterialPtr: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CompositionGraphCaptureProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CompositionGraphCaptureProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CompositionGraphCaptureProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CompositionGraphCaptureProtocol

    @JsName("C")
    public fun copy(other: UObject): CompositionGraphCaptureProtocol

    @JsName("C")
    public fun copy(other: Any): CompositionGraphCaptureProtocol
  }
}

public open external class FrameGrabberProtocol(
  outer: UObject,
) : MovieSceneImageCaptureProtocolBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FrameGrabberProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FrameGrabberProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FrameGrabberProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FrameGrabberProtocol

    @JsName("C")
    public fun copy(other: UObject): FrameGrabberProtocol

    @JsName("C")
    public fun copy(other: Any): FrameGrabberProtocol
  }
}

public open external class ImageSequenceProtocol(
  outer: UObject,
) : FrameGrabberProtocol {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImageSequenceProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImageSequenceProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImageSequenceProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImageSequenceProtocol

    @JsName("C")
    public fun copy(other: UObject): ImageSequenceProtocol

    @JsName("C")
    public fun copy(other: Any): ImageSequenceProtocol
  }
}

public open external class CompressedImageSequenceProtocol(
  outer: UObject,
) : ImageSequenceProtocol {
  @JsName("CompressionQuality")
  public open var compressionQuality: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CompressedImageSequenceProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CompressedImageSequenceProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CompressedImageSequenceProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CompressedImageSequenceProtocol

    @JsName("C")
    public fun copy(other: UObject): CompressedImageSequenceProtocol

    @JsName("C")
    public fun copy(other: Any): CompressedImageSequenceProtocol
  }
}

@JsName("ImageSequenceProtocol_BMP")
public open external class ImageSequenceProtocolBmp(
  outer: UObject,
) : ImageSequenceProtocol {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImageSequenceProtocolBmp

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImageSequenceProtocolBmp

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImageSequenceProtocolBmp

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImageSequenceProtocolBmp

    @JsName("C")
    public fun copy(other: UObject): ImageSequenceProtocolBmp

    @JsName("C")
    public fun copy(other: Any): ImageSequenceProtocolBmp
  }
}

@JsName("ImageSequenceProtocol_PNG")
public open external class ImageSequenceProtocolPng(
  outer: UObject,
) : CompressedImageSequenceProtocol {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImageSequenceProtocolPng

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImageSequenceProtocolPng

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImageSequenceProtocolPng

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImageSequenceProtocolPng

    @JsName("C")
    public fun copy(other: UObject): ImageSequenceProtocolPng

    @JsName("C")
    public fun copy(other: Any): ImageSequenceProtocolPng
  }
}

@JsName("ImageSequenceProtocol_JPG")
public open external class ImageSequenceProtocolJpg(
  outer: UObject,
) : CompressedImageSequenceProtocol {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImageSequenceProtocolJpg

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImageSequenceProtocolJpg

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImageSequenceProtocolJpg

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImageSequenceProtocolJpg

    @JsName("C")
    public fun copy(other: UObject): ImageSequenceProtocolJpg

    @JsName("C")
    public fun copy(other: Any): ImageSequenceProtocolJpg
  }
}

@JsName("ImageSequenceProtocol_EXR")
public open external class ImageSequenceProtocolExr(
  outer: UObject,
) : ImageSequenceProtocol {
  @JsName("bCompressed")
  public open var compressed: Boolean

  @JsName("CaptureGamut")
  public open var captureGamut: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ImageSequenceProtocolExr

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ImageSequenceProtocolExr

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ImageSequenceProtocolExr

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ImageSequenceProtocolExr

    @JsName("C")
    public fun copy(other: UObject): ImageSequenceProtocolExr

    @JsName("C")
    public fun copy(other: Any): ImageSequenceProtocolExr
  }
}

public open external class MovieSceneCaptureInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCaptureInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCaptureInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCaptureInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCaptureInterface

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCaptureInterface

    @JsName("C")
    public fun copy(other: Any): MovieSceneCaptureInterface
  }
}

public open external class CaptureResolution {
  @JsName("ResX")
  public open var resX: Number

  @JsName("ResY")
  public open var resY: Number

  public open fun clone(): CaptureResolution

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CaptureResolution

    @JsName("C")
    public fun copy(other: Any): CaptureResolution
  }
}

public open external class MovieSceneCaptureSettings {
  @JsName("OutputDirectory")
  public open var outputDirectory: DirectoryPath

  @JsName("GameModeOverride")
  public open var gameModeOverride: UnrealEngineClass

  @JsName("OutputFormat")
  public open var outputFormat: String

  @JsName("bOverwriteExisting")
  public open var overwriteExisting: Boolean

  @JsName("bUseRelativeFrameNumbers")
  public open var useRelativeFrameNumbers: Boolean

  @JsName("HandleFrames")
  public open var handleFrames: Number

  @JsName("MovieExtension")
  public open var movieExtension: String

  @JsName("ZeroPadFrameNumbers")
  public open var zeroPadFrameNumbers: Number

  @JsName("FrameRate")
  public open var frameRate: FrameRate

  @JsName("bUseCustomFrameRate")
  public open var useCustomFrameRate: Boolean

  @JsName("CustomFrameRate")
  public open var customFrameRate: FrameRate

  @JsName("Resolution")
  public open var resolution: CaptureResolution

  @JsName("bEnableTextureStreaming")
  public open var enableTextureStreaming: Boolean

  @JsName("bCinematicEngineScalability")
  public open var cinematicEngineScalability: Boolean

  @JsName("bCinematicMode")
  public open var cinematicMode: Boolean

  @JsName("bAllowMovement")
  public open var allowMovement: Boolean

  @JsName("bAllowTurning")
  public open var allowTurning: Boolean

  @JsName("bShowPlayer")
  public open var showPlayer: Boolean

  @JsName("bShowHUD")
  public open var showHud: Boolean

  @JsName("bUsePathTracer")
  public open var usePathTracer: Boolean

  @JsName("PathTracerSamplePerPixel")
  public open var pathTracerSamplePerPixel: Number

  public open fun clone(): MovieSceneCaptureSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneCaptureSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneCaptureSettings
  }
}

public open external class MovieSceneCapture(
  outer: UObject,
) : UObject {
  @JsName("ImageCaptureProtocolType")
  public open var imageCaptureProtocolType: SoftClassPath

  @JsName("AudioCaptureProtocolType")
  public open var audioCaptureProtocolType: SoftClassPath

  @JsName("ImageCaptureProtocol")
  public open var imageCaptureProtocol: MovieSceneImageCaptureProtocolBase

  @JsName("AudioCaptureProtocol")
  public open var audioCaptureProtocol: MovieSceneAudioCaptureProtocolBase

  @JsName("Settings")
  public open var settings: MovieSceneCaptureSettings

  @JsName("bUseSeparateProcess")
  public open var useSeparateProcess: Boolean

  @JsName("bCloseEditorWhenCaptureStarts")
  public open var closeEditorWhenCaptureStarts: Boolean

  @JsName("AdditionalCommandLineArguments")
  public open var additionalCommandLineArguments: String

  @JsName("InheritedCommandLineArguments")
  public open var inheritedCommandLineArguments: String

  @JsName("SetImageCaptureProtocolType")
  public open fun setImageCaptureProtocolType(protocolType: UnrealEngineClass): Unit

  @JsName("SetAudioCaptureProtocolType")
  public open fun setAudioCaptureProtocolType(protocolType: UnrealEngineClass): Unit

  @JsName("GetImageCaptureProtocol")
  public open fun getImageCaptureProtocol(): MovieSceneCaptureProtocolBase

  @JsName("GetAudioCaptureProtocol")
  public open fun getAudioCaptureProtocol(): MovieSceneCaptureProtocolBase

  @JsName("RenderMovie")
  public open
      fun renderMovie(onFinishedCallback: UnrealEngineDelegate<(bSuccess: Boolean) -> Unit>):
      Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCapture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCapture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCapture

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCapture

    @JsName("C")
    public fun copy(other: Any): MovieSceneCapture

    @JsName("RenderMovie")
    public fun renderMovie(inCaptureSettings: MovieSceneCapture,
        onFinishedCallback: UnrealEngineDelegate<(bSuccess: Boolean) -> Unit>): Boolean
  }
}

public open external class LevelCapture(
  outer: UObject,
) : MovieSceneCapture {
  @JsName("bAutoStartCapture")
  public open var autoStartCapture: Boolean

  @JsName("PrerequisiteActorId")
  public open var prerequisiteActorId: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelCapture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelCapture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelCapture

    @JsName("C")
    public fun copy(other: UObject): LevelCapture

    @JsName("C")
    public fun copy(other: Any): LevelCapture
  }
}

public open external class MovieSceneCaptureEnvironment(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCaptureEnvironment

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCaptureEnvironment

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCaptureEnvironment

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCaptureEnvironment

    @JsName("IsCaptureInProgress")
    public fun isCaptureInProgress(): Boolean

    @JsName("GetCaptureFrameNumber")
    public fun getCaptureFrameNumber(): Number

    @JsName("GetCaptureElapsedTime")
    public fun getCaptureElapsedTime(): Number

    @JsName("FindImageCaptureProtocol")
    public fun findImageCaptureProtocol(): MovieSceneImageCaptureProtocolBase

    @JsName("FindAudioCaptureProtocol")
    public fun findAudioCaptureProtocol(): MovieSceneAudioCaptureProtocolBase

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCaptureEnvironment

    @JsName("C")
    public fun copy(other: Any): MovieSceneCaptureEnvironment
  }
}

@JsName("CapturedPixelsID")
public open external class CapturedPixelsId {
  @JsName("Identifiers")
  public open var identifiers: Any

  public open fun clone(): CapturedPixelsId

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CapturedPixelsId

    @JsName("C")
    public fun copy(other: Any): CapturedPixelsId
  }
}

public open external class CapturedPixels {
  public open fun clone(): CapturedPixels

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CapturedPixels

    @JsName("C")
    public fun copy(other: Any): CapturedPixels
  }
}

public open external class FrameMetrics {
  @JsName("TotalElapsedTime")
  public open var totalElapsedTime: Number

  @JsName("FrameDelta")
  public open var frameDelta: Number

  @JsName("FrameNumber")
  public open var frameNumber: Number

  @JsName("NumDroppedFrames")
  public open var numDroppedFrames: Number

  public open fun clone(): FrameMetrics

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FrameMetrics

    @JsName("C")
    public fun copy(other: Any): FrameMetrics
  }
}

public open external class UserDefinedCaptureProtocol(
  outer: UObject,
) : MovieSceneImageCaptureProtocolBase {
  @JsName("World")
  public open var world: World

  @JsName("StopCapturingFinalPixels")
  public open fun stopCapturingFinalPixels(): Unit

  @JsName("StartCapturingFinalPixels")
  public open fun startCapturingFinalPixels(streamId: CapturedPixelsId): Unit

  @JsName("ResolveBuffer")
  public open fun resolveBuffer(buffer: Texture, bufferId: CapturedPixelsId): Unit

  @JsName("OnWarmUp")
  public open fun onWarmUp(): Unit

  @JsName("OnTick")
  public open fun onTick(): Unit

  @JsName("OnStartCapture")
  public open fun onStartCapture(): Unit

  @JsName("OnSetup")
  public open fun onSetup(): Boolean

  @JsName("OnPreTick")
  public open fun onPreTick(): Unit

  @JsName("OnPixelsReceived")
  public open fun onPixelsReceived(
    pixels: CapturedPixels,
    ID: CapturedPixelsId,
    frameMetrics: FrameMetrics,
  ): Unit

  @JsName("OnPauseCapture")
  public open fun onPauseCapture(): Unit

  @JsName("OnFinalize")
  public open fun onFinalize(): Unit

  @JsName("OnCaptureFrame")
  public open fun onCaptureFrame(): Unit

  @JsName("OnCanFinalize")
  public open fun onCanFinalize(): Boolean

  @JsName("OnBeginFinalize")
  public open fun onBeginFinalize(): Unit

  @JsName("GetCurrentFrameMetrics")
  public open fun getCurrentFrameMetrics(): FrameMetrics

  @JsName("GenerateFilename")
  public open fun generateFilename(inFrameMetrics: FrameMetrics): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserDefinedCaptureProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserDefinedCaptureProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserDefinedCaptureProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserDefinedCaptureProtocol

    @JsName("C")
    public fun copy(other: UObject): UserDefinedCaptureProtocol

    @JsName("C")
    public fun copy(other: Any): UserDefinedCaptureProtocol
  }
}

public open external class UserDefinedImageCaptureProtocol(
  outer: UObject,
) : UserDefinedCaptureProtocol {
  @JsName("Format")
  public open var format: String

  @JsName("bEnableCompression")
  public open var enableCompression: Boolean

  @JsName("CompressionQuality")
  public open var compressionQuality: Number

  @JsName("WriteImageToDisk")
  public open fun writeImageToDisk(
    pixelData: CapturedPixels,
    streamId: CapturedPixelsId,
    frameMetrics: FrameMetrics,
    copyImageData: Boolean,
  ): Unit

  @JsName("GenerateFilenameForCurrentFrame")
  public open fun generateFilenameForCurrentFrame(): String

  @JsName("GenerateFilenameForBuffer")
  public open fun generateFilenameForBuffer(buffer: Texture, streamId: CapturedPixelsId): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserDefinedImageCaptureProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserDefinedImageCaptureProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserDefinedImageCaptureProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserDefinedImageCaptureProtocol

    @JsName("C")
    public fun copy(other: UObject): UserDefinedImageCaptureProtocol

    @JsName("C")
    public fun copy(other: Any): UserDefinedImageCaptureProtocol
  }
}

public open external class VideoCaptureProtocol(
  outer: UObject,
) : FrameGrabberProtocol {
  @JsName("bUseCompression")
  public open var useCompression: Boolean

  @JsName("CompressionQuality")
  public open var compressionQuality: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VideoCaptureProtocol

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VideoCaptureProtocol

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VideoCaptureProtocol

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VideoCaptureProtocol

    @JsName("C")
    public fun copy(other: UObject): VideoCaptureProtocol

    @JsName("C")
    public fun copy(other: Any): VideoCaptureProtocol
  }
}

public open external class SequenceRecordingBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequenceRecordingBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequenceRecordingBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequenceRecordingBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequenceRecordingBase

    @JsName("C")
    public fun copy(other: UObject): SequenceRecordingBase

    @JsName("C")
    public fun copy(other: Any): SequenceRecordingBase
  }
}

public open external class ActorRecordingSettings {
  @JsName("Settings")
  public open var settings: Array<UObject>

  public open fun clone(): ActorRecordingSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ActorRecordingSettings

    @JsName("C")
    public fun copy(other: Any): ActorRecordingSettings
  }
}

public open external class AnimationRecordingSettings {
  @JsName("bRecordInWorldSpace")
  public open var recordInWorldSpace: Boolean

  @JsName("bRemoveRootAnimation")
  public open var removeRootAnimation: Boolean

  @JsName("bAutoSaveAsset")
  public open var autoSaveAsset: Boolean

  @JsName("SampleFrameRate")
  public open var sampleFrameRate: FrameRate

  @JsName("Length")
  public open var length: Number

  @JsName("InterpMode")
  public open var interpMode: String

  @JsName("TangentMode")
  public open var tangentMode: String

  @JsName("bRecordTransforms")
  public open var recordTransforms: Boolean

  @JsName("bRecordMorphTargets")
  public open var recordMorphTargets: Boolean

  @JsName("bRecordAttributeCurves")
  public open var recordAttributeCurves: Boolean

  @JsName("bRecordMaterialCurves")
  public open var recordMaterialCurves: Boolean

  public open fun clone(): AnimationRecordingSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimationRecordingSettings

    @JsName("C")
    public fun copy(other: Any): AnimationRecordingSettings
  }
}

public open external class ActorRecording(
  outer: UObject,
) : SequenceRecordingBase {
  @JsName("ActorSettings")
  public open var actorSettings: ActorRecordingSettings

  @JsName("bActive")
  public open var active: Boolean

  @JsName("bCreateLevelSequence")
  public open var createLevelSequence: Boolean

  @JsName("TargetLevelSequence")
  public open var targetLevelSequence: LevelSequence

  @JsName("TargetName")
  public open var targetName: String

  @JsName("TakeNumber")
  public open var takeNumber: Any

  @JsName("bSpecifyTargetAnimation")
  public open var specifyTargetAnimation: Boolean

  @JsName("TargetAnimation")
  public open var targetAnimation: AnimSequence

  @JsName("AnimationSettings")
  public open var animationSettings: AnimationRecordingSettings

  @JsName("bRecordToPossessable")
  public open var recordToPossessable: Boolean

  @JsName("ActorToRecord")
  public open var actorToRecord: Actor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorRecording

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorRecording

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorRecording

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorRecording

    @JsName("C")
    public fun copy(other: UObject): ActorRecording

    @JsName("C")
    public fun copy(other: Any): ActorRecording
  }
}

public open external class AnimationRecordingParameters(
  outer: UObject,
) : UObject {
  @JsName("SampleFrameRate")
  public open var sampleFrameRate: FrameRate

  @JsName("bEndAfterDuration")
  public open var endAfterDuration: Boolean

  @JsName("MaximumDurationSeconds")
  public open var maximumDurationSeconds: Number

  @JsName("SampleRate")
  public open var sampleRate: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationRecordingParameters

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationRecordingParameters

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationRecordingParameters

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationRecordingParameters

    @JsName("C")
    public fun copy(other: UObject): AnimationRecordingParameters

    @JsName("C")
    public fun copy(other: Any): AnimationRecordingParameters
  }
}

@JsName("MovieScene3DTransformSectionRecorderSettings")
public open external class MovieScene3dTransformSectionRecorderSettings(
  outer: UObject,
) : UObject {
  @JsName("bRecordTransforms")
  public open var recordTransforms: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dTransformSectionRecorderSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        MovieScene3dTransformSectionRecorderSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dTransformSectionRecorderSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dTransformSectionRecorderSettings

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dTransformSectionRecorderSettings

    @JsName("C")
    public fun copy(other: Any): MovieScene3dTransformSectionRecorderSettings
  }
}

public open external class SequenceRecorderActorGroup(
  outer: UObject,
) : UObject {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("SequenceName")
  public open var sequenceName: String

  @JsName("SequenceRecordingBasePath")
  public open var sequenceRecordingBasePath: DirectoryPath

  @JsName("bSpecifyTargetLevelSequence")
  public open var specifyTargetLevelSequence: Boolean

  @JsName("TargetLevelSequence")
  public open var targetLevelSequence: LevelSequence

  @JsName("bDuplicateTargetLevelSequence")
  public open var duplicateTargetLevelSequence: Boolean

  @JsName("bRecordTargetLevelSequenceLength")
  public open var recordTargetLevelSequenceLength: Boolean

  @JsName("RecordedActors")
  public open var recordedActors: Array<ActorRecording>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequenceRecorderActorGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequenceRecorderActorGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequenceRecorderActorGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequenceRecorderActorGroup

    @JsName("C")
    public fun copy(other: UObject): SequenceRecorderActorGroup

    @JsName("C")
    public fun copy(other: Any): SequenceRecorderActorGroup
  }
}

public open external class SequenceRecorderGroup(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("ActorGroups")
  public open var actorGroups: Array<SequenceRecorderActorGroup>

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequenceRecorderGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequenceRecorderGroup

    @JsName("C")
    public fun copy(other: UObject): SequenceRecorderGroup

    @JsName("C")
    public fun copy(other: Any): SequenceRecorderGroup
  }
}

public open external class BlueprintFunctionLibrary(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintFunctionLibrary

    @JsName("C")
    public fun copy(other: UObject): BlueprintFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): BlueprintFunctionLibrary
  }
}

public open external class SequenceRecorderBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequenceRecorderBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequenceRecorderBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequenceRecorderBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequenceRecorderBlueprintLibrary

    @JsName("StopRecordingSequence")
    public fun stopRecordingSequence(): Unit

    @JsName("StartRecordingSequence")
    public fun startRecordingSequence(actorsToRecord: Array<Actor>): Unit

    @JsName("IsRecordingSequence")
    public fun isRecordingSequence(): Boolean

    @JsName("C")
    public fun copy(other: UObject): SequenceRecorderBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): SequenceRecorderBlueprintLibrary
  }
}

@JsName("EAudioRecordingMode")
public external object AudioRecordingMode {
  public var None: String

  public var AudioTrack: String

  @JsName("EAudioRecordingMode_MAX")
  public var Max: String
}

public open external class SequenceRecorderActorFilter {
  @JsName("ActorClassesToRecord")
  public open var actorClassesToRecord: Array<UnrealEngineClass>

  public open fun clone(): SequenceRecorderActorFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SequenceRecorderActorFilter

    @JsName("C")
    public fun copy(other: Any): SequenceRecorderActorFilter
  }
}

public open external class PropertiesToRecordForClass {
  @JsName("Class")
  public open var `class`: UnrealEngineClass

  @JsName("Properties")
  public open var properties: Array<String>

  public open fun clone(): PropertiesToRecordForClass

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertiesToRecordForClass

    @JsName("C")
    public fun copy(other: Any): PropertiesToRecordForClass
  }
}

public open external class PropertiesToRecordForActorClass {
  @JsName("Class")
  public open var `class`: UnrealEngineClass

  @JsName("Properties")
  public open var properties: Array<String>

  public open fun clone(): PropertiesToRecordForActorClass

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertiesToRecordForActorClass

    @JsName("C")
    public fun copy(other: Any): PropertiesToRecordForActorClass
  }
}

public open external class SettingsForActorClass {
  @JsName("Class")
  public open var `class`: UnrealEngineClass

  @JsName("bRecordToPossessable")
  public open var recordToPossessable: Boolean

  public open fun clone(): SettingsForActorClass

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SettingsForActorClass

    @JsName("C")
    public fun copy(other: Any): SettingsForActorClass
  }
}

public open external class SequenceRecorderSettings(
  outer: UObject,
) : UObject {
  @JsName("bCreateLevelSequence")
  public open var createLevelSequence: Boolean

  @JsName("bImmersiveMode")
  public open var immersiveMode: Boolean

  @JsName("SequenceLength")
  public open var sequenceLength: Number

  @JsName("RecordingDelay")
  public open var recordingDelay: Number

  @JsName("bAllowLooping")
  public open var allowLooping: Boolean

  @JsName("GlobalTimeDilation")
  public open var globalTimeDilation: Number

  @JsName("bIgnoreTimeDilation")
  public open var ignoreTimeDilation: Boolean

  @JsName("AnimationSubDirectory")
  public open var animationSubDirectory: String

  @JsName("RecordAudio")
  public open var recordAudio: String

  @JsName("AudioGain")
  public open var audioGain: Number

  @JsName("bSplitAudioChannelsIntoSeparateTracks")
  public open var splitAudioChannelsIntoSeparateTracks: Boolean

  @JsName("bReplaceRecordedAudio")
  public open var replaceRecordedAudio: Boolean

  @JsName("AudioTrackName")
  public open var audioTrackName: String

  @JsName("AudioSubDirectory")
  public open var audioSubDirectory: String

  @JsName("bRecordNearbySpawnedActors")
  public open var recordNearbySpawnedActors: Boolean

  @JsName("NearbyActorRecordingProximity")
  public open var nearbyActorRecordingProximity: Number

  @JsName("bRecordWorldSettingsActor")
  public open var recordWorldSettingsActor: Boolean

  @JsName("bReduceKeys")
  public open var reduceKeys: Boolean

  @JsName("bAutoSaveAsset")
  public open var autoSaveAsset: Boolean

  @JsName("ActorFilter")
  public open var actorFilter: SequenceRecorderActorFilter

  @JsName("LevelSequenceActorsToTrigger")
  public open var levelSequenceActorsToTrigger: Array<Any>

  @JsName("DefaultAnimationSettings")
  public open var defaultAnimationSettings: AnimationRecordingSettings

  @JsName("bRecordSequencerSpawnedActors")
  public open var recordSequencerSpawnedActors: Boolean

  @JsName("ClassesAndPropertiesToRecord")
  public open var classesAndPropertiesToRecord: Array<PropertiesToRecordForClass>

  @JsName("ActorsAndPropertiesToRecord")
  public open var actorsAndPropertiesToRecord: Array<PropertiesToRecordForActorClass>

  @JsName("PerActorSettings")
  public open var perActorSettings: Array<SettingsForActorClass>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequenceRecorderSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequenceRecorderSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequenceRecorderSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequenceRecorderSettings

    @JsName("C")
    public fun copy(other: UObject): SequenceRecorderSettings

    @JsName("C")
    public fun copy(other: Any): SequenceRecorderSettings
  }
}

public open external class LevelSequenceBurnInInitSettings(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceBurnInInitSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceBurnInInitSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceBurnInInitSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceBurnInInitSettings

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceBurnInInitSettings

    @JsName("C")
    public fun copy(other: Any): LevelSequenceBurnInInitSettings
  }
}

public open external class LevelSequenceBurnInOptions(
  outer: UObject,
) : UObject {
  @JsName("bUseBurnIn")
  public open var useBurnIn: Boolean

  @JsName("BurnInClass")
  public open var burnInClass: SoftClassPath

  @JsName("Settings")
  public open var settings: LevelSequenceBurnInInitSettings

  @JsName("SetBurnIn")
  public open fun setBurnIn(inBurnInClass: SoftClassPath): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelSequenceBurnInOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelSequenceBurnInOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelSequenceBurnInOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelSequenceBurnInOptions

    @JsName("C")
    public fun copy(other: UObject): LevelSequenceBurnInOptions

    @JsName("C")
    public fun copy(other: Any): LevelSequenceBurnInOptions
  }
}

public open external class AutomatedLevelSequenceCapture(
  outer: UObject,
) : MovieSceneCapture {
  @JsName("LevelSequenceAsset")
  public open var levelSequenceAsset: SoftObjectPath

  @JsName("ShotName")
  public open var shotName: String

  @JsName("bUseCustomStartFrame")
  public open var useCustomStartFrame: Boolean

  @JsName("CustomStartFrame")
  public open var customStartFrame: FrameNumber

  @JsName("bUseCustomEndFrame")
  public open var useCustomEndFrame: Boolean

  @JsName("CustomEndFrame")
  public open var customEndFrame: FrameNumber

  @JsName("WarmUpFrameCount")
  public open var warmUpFrameCount: Number

  @JsName("DelayBeforeWarmUp")
  public open var delayBeforeWarmUp: Number

  @JsName("DelayBeforeShotWarmUp")
  public open var delayBeforeShotWarmUp: Number

  @JsName("DelayEveryFrame")
  public open var delayEveryFrame: Number

  @JsName("BurnInOptions")
  public open var burnInOptions: LevelSequenceBurnInOptions

  @JsName("bWriteEditDecisionList")
  public open var writeEditDecisionList: Boolean

  @JsName("bWriteFinalCutProXML")
  public open var writeFinalCutProXml: Boolean

  @JsName("LevelSequenceActor")
  public open var levelSequenceActor: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AutomatedLevelSequenceCapture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AutomatedLevelSequenceCapture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AutomatedLevelSequenceCapture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AutomatedLevelSequenceCapture

    @JsName("C")
    public fun copy(other: UObject): AutomatedLevelSequenceCapture

    @JsName("C")
    public fun copy(other: Any): AutomatedLevelSequenceCapture
  }
}

public open external class BoolChannelKeyProxy(
  outer: UObject,
) : UObject {
  @JsName("Time")
  public open var time: FrameNumber

  @JsName("bValue")
  public open var value: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoolChannelKeyProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoolChannelKeyProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoolChannelKeyProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoolChannelKeyProxy

    @JsName("C")
    public fun copy(other: UObject): BoolChannelKeyProxy

    @JsName("C")
    public fun copy(other: Any): BoolChannelKeyProxy
  }
}

public open external class MovieSceneDoubleValue {
  @JsName("Value")
  public open var value: Any

  @JsName("Tangent")
  public open var tangent: MovieSceneTangentData

  @JsName("InterpMode")
  public open var interpMode: String

  @JsName("TangentMode")
  public open var tangentMode: String

  @JsName("PaddingByte")
  public open var paddingByte: Number

  public open fun clone(): MovieSceneDoubleValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoubleValue

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoubleValue
  }
}

public open external class DoubleChannelKeyProxy(
  outer: UObject,
) : UObject {
  @JsName("Time")
  public open var time: FrameNumber

  @JsName("Value")
  public open var value: MovieSceneDoubleValue

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DoubleChannelKeyProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DoubleChannelKeyProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DoubleChannelKeyProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DoubleChannelKeyProxy

    @JsName("C")
    public fun copy(other: UObject): DoubleChannelKeyProxy

    @JsName("C")
    public fun copy(other: Any): DoubleChannelKeyProxy
  }
}

public open external class FloatChannelKeyProxy(
  outer: UObject,
) : UObject {
  @JsName("Time")
  public open var time: FrameNumber

  @JsName("Value")
  public open var value: MovieSceneFloatValue

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FloatChannelKeyProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FloatChannelKeyProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FloatChannelKeyProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FloatChannelKeyProxy

    @JsName("C")
    public fun copy(other: UObject): FloatChannelKeyProxy

    @JsName("C")
    public fun copy(other: Any): FloatChannelKeyProxy
  }
}

public open external class IntegerChannelKeyProxy(
  outer: UObject,
) : UObject {
  @JsName("Time")
  public open var time: FrameNumber

  @JsName("Value")
  public open var value: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): IntegerChannelKeyProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): IntegerChannelKeyProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): IntegerChannelKeyProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): IntegerChannelKeyProxy

    @JsName("C")
    public fun copy(other: UObject): IntegerChannelKeyProxy

    @JsName("C")
    public fun copy(other: Any): IntegerChannelKeyProxy
  }
}

@JsName("K2Node_GetSequenceBinding")
public open external class K2NodeGetSequenceBinding(
  outer: UObject,
) : K2Node {
  @JsName("SourceSequence")
  public open var sourceSequence: SoftObjectPath

  @JsName("Binding")
  public open var binding: MovieSceneObjectBindingId

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetSequenceBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetSequenceBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetSequenceBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetSequenceBinding

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetSequenceBinding

    @JsName("C")
    public fun copy(other: Any): K2NodeGetSequenceBinding
  }
}

public open external class MovieSceneEventBlueprintExtension(
  outer: UObject,
) : BlueprintExtension {
  @JsName("EventSections")
  public open var eventSections: Array<Any>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEventBlueprintExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEventBlueprintExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEventBlueprintExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEventBlueprintExtension

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEventBlueprintExtension

    @JsName("C")
    public fun copy(other: Any): MovieSceneEventBlueprintExtension
  }
}

public open external class MovieSceneToolsPropertyTrackSettings {
  @JsName("ComponentName")
  public open var componentName: String

  @JsName("PropertyName")
  public open var propertyName: String

  public open fun clone(): MovieSceneToolsPropertyTrackSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneToolsPropertyTrackSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneToolsPropertyTrackSettings
  }
}

@JsName("EMovieSceneToolsPropertyTrackType")
public external object MovieSceneToolsPropertyTrackType {
  public var FloatTrack: String

  public var DoubleTrack: String

  @JsName("EMovieSceneToolsPropertyTrackType_MAX")
  public var Max: String
}

public open external class MovieSceneToolsFbxSettings {
  @JsName("FbxPropertyName")
  public open var fbxPropertyName: String

  @JsName("PropertyPath")
  public open var propertyPath: MovieSceneToolsPropertyTrackSettings

  @JsName("PropertyType")
  public open var propertyType: String

  public open fun clone(): MovieSceneToolsFbxSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneToolsFbxSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneToolsFbxSettings
  }
}

public open external class MovieSceneToolsProjectSettings(
  outer: UObject,
) : UObject {
  @JsName("DefaultStartTime")
  public open var defaultStartTime: Number

  @JsName("DefaultDuration")
  public open var defaultDuration: Number

  @JsName("ShotDirectory")
  public open var shotDirectory: String

  @JsName("ShotPrefix")
  public open var shotPrefix: String

  @JsName("FirstShotNumber")
  public open var firstShotNumber: Any

  @JsName("ShotIncrement")
  public open var shotIncrement: Any

  @JsName("ShotNumDigits")
  public open var shotNumDigits: Any

  @JsName("TakeNumDigits")
  public open var takeNumDigits: Any

  @JsName("FirstTakeNumber")
  public open var firstTakeNumber: Any

  @JsName("TakeSeparator")
  public open var takeSeparator: String

  @JsName("SubSequenceSeparator")
  public open var subSequenceSeparator: String

  @JsName("FbxSettings")
  public open var fbxSettings: Array<MovieSceneToolsFbxSettings>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneToolsProjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneToolsProjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneToolsProjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneToolsProjectSettings

    @JsName("C")
    public fun copy(other: UObject): MovieSceneToolsProjectSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneToolsProjectSettings
  }
}

@JsName("EThumbnailQuality")
public external object ThumbnailQuality {
  public var Draft: String

  public var Normal: String

  public var Best: String

  @JsName("EThumbnailQuality_MAX")
  public var Max: String
}

public open external class MovieSceneUserThumbnailSettings(
  outer: UObject,
) : UObject {
  @JsName("bDrawThumbnails")
  public open var drawThumbnails: Boolean

  @JsName("bDrawSingleThumbnails")
  public open var drawSingleThumbnails: Boolean

  @JsName("ThumbnailSize")
  public open var thumbnailSize: IntPoint

  @JsName("Quality")
  public open var quality: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneUserThumbnailSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneUserThumbnailSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneUserThumbnailSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneUserThumbnailSettings

    @JsName("C")
    public fun copy(other: UObject): MovieSceneUserThumbnailSettings

    @JsName("C")
    public fun copy(other: Any): MovieSceneUserThumbnailSettings
  }
}

public open external class InterchangeAssetImportData(
  outer: UObject,
) : AssetImportData {
  @JsName("NodeContainer")
  public open var nodeContainer: InterchangeBaseNodeContainer

  @JsName("NodeUniqueID")
  public open var nodeUniqueId: String

  @JsName("Pipelines")
  public open var pipelines: Array<InterchangePipelineBase>

  @JsName("ScriptGetFirstFilename")
  public open fun scriptGetFirstFilename(): String

  @JsName("ScriptExtractFilenames")
  public open fun scriptExtractFilenames(): Array<String>

  @JsName("ScriptExtractDisplayLabels")
  public open fun scriptExtractDisplayLabels(): Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeAssetImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeAssetImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeAssetImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeAssetImportData

    @JsName("C")
    public fun copy(other: UObject): InterchangeAssetImportData

    @JsName("C")
    public fun copy(other: Any): InterchangeAssetImportData
  }
}

public open external class ImportAssetParameters {
  @JsName("ReimportAsset")
  public open var reimportAsset: UObject

  @JsName("bIsAutomated")
  public open var isAutomated: Boolean

  @JsName("OverridePipelines")
  public open var overridePipelines: Array<InterchangePipelineBase>

  @JsName("OnAssetDone")
  public open var onAssetDone: UnrealEngineDelegate<(UObject: UObject) -> Unit>

  @JsName("OnAssetsImportDone")
  public open var onAssetsImportDone: UnrealEngineDelegate<(Objects: Array<UObject>) -> Unit>

  @JsName("OnSceneObjectDone")
  public open var onSceneObjectDone: UnrealEngineDelegate<(UObject: UObject) -> Unit>

  @JsName("OnSceneImportDone")
  public open var onSceneImportDone: UnrealEngineDelegate<(Objects: Array<UObject>) -> Unit>

  public open fun clone(): ImportAssetParameters

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ImportAssetParameters

    @JsName("C")
    public fun copy(other: Any): ImportAssetParameters
  }
}

public open external class InterchangeManager(
  outer: UObject,
) : UObject {
  @JsName("RegisteredTranslatorsClass")
  public open var registeredTranslatorsClass: Any

  @JsName("RegisteredFactoryClasses")
  public open var registeredFactoryClasses: Any

  @JsName("RegisteredWriters")
  public open var registeredWriters: Any

  @JsName("TextureOnlyTranslatorClass")
  public open var textureOnlyTranslatorClass: Any

  @JsName("ImportScene")
  public open fun importScene(
    contentPath: String,
    sourceData: InterchangeSourceData,
    importAssetParameters: ImportAssetParameters,
  ): Boolean

  @JsName("ImportAsset")
  public open fun importAsset(
    contentPath: String,
    sourceData: InterchangeSourceData,
    importAssetParameters: ImportAssetParameters,
  ): Boolean

  @JsName("GetRegisteredFactoryClass")
  public open fun getRegisteredFactoryClass(classToMake: UnrealEngineClass): UnrealEngineClass

  @JsName("ExportScene")
  public open fun exportScene(world: UObject, isAutomated: Boolean): Boolean

  @JsName("ExportAsset")
  public open fun exportAsset(asset: UObject, isAutomated: Boolean): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeManager

    @JsName("GetInterchangeManagerScripted")
    public fun getInterchangeManagerScripted(): InterchangeManager

    @JsName("CreateSourceData")
    public fun createSourceData(inFilename: String): InterchangeSourceData

    @JsName("C")
    public fun copy(other: UObject): InterchangeManager

    @JsName("C")
    public fun copy(other: Any): InterchangeManager
  }
}

@JsName("EInterchangePipelineConfigurationDialogResult")
public external object InterchangePipelineConfigurationDialogResult {
  public var Cancel: String

  public var Import: String

  public var ImportAll: String

  @JsName("EInterchangePipelineConfigurationDialogResult_MAX")
  public var Max: String
}

public open external class InterchangePipelineConfigurationBase(
  outer: UObject,
) : UObject {
  @JsName("ScriptedShowPipelineConfigurationDialog")
  public open fun scriptedShowPipelineConfigurationDialog(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangePipelineConfigurationBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangePipelineConfigurationBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangePipelineConfigurationBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangePipelineConfigurationBase

    @JsName("C")
    public fun copy(other: UObject): InterchangePipelineConfigurationBase

    @JsName("C")
    public fun copy(other: Any): InterchangePipelineConfigurationBase
  }
}

public open external class InterchangeProjectSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("PipelineStacks")
  public open var pipelineStacks: Any

  @JsName("DefaultPipelineStack")
  public open var defaultPipelineStack: String

  @JsName("PipelineConfigurationDialogClass")
  public open var pipelineConfigurationDialogClass: Class

  @JsName("bShowPipelineStacksConfigurationDialog")
  public open var showPipelineStacksConfigurationDialog: Boolean

  @JsName("bUseInterchangeWhenImportingIntoLevel")
  public open var useInterchangeWhenImportingIntoLevel: Boolean

  @JsName("DefaultScenePipelineStack")
  public open var defaultScenePipelineStack: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterchangeProjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterchangeProjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterchangeProjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterchangeProjectSettings

    @JsName("C")
    public fun copy(other: UObject): InterchangeProjectSettings

    @JsName("C")
    public fun copy(other: Any): InterchangeProjectSettings
  }
}

public open external class AdvancedCopyCustomization(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AdvancedCopyCustomization

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AdvancedCopyCustomization

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AdvancedCopyCustomization

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AdvancedCopyCustomization

    @JsName("C")
    public fun copy(other: UObject): AdvancedCopyCustomization

    @JsName("C")
    public fun copy(other: Any): AdvancedCopyCustomization
  }
}

public open external class AssetToolsImpl(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetToolsImpl

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetToolsImpl

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetToolsImpl

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetToolsImpl

    @JsName("C")
    public fun copy(other: UObject): AssetToolsImpl

    @JsName("C")
    public fun copy(other: Any): AssetToolsImpl
  }
}

public open external class AdvancedCopyMap {
  @JsName("ClassToCopy")
  public open var classToCopy: SoftClassPath

  @JsName("AdvancedCopyCustomization")
  public open var advancedCopyCustomization: SoftClassPath

  public open fun clone(): AdvancedCopyMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AdvancedCopyMap

    @JsName("C")
    public fun copy(other: Any): AdvancedCopyMap
  }
}

public open external class AssetToolsSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("AdvancedCopyCustomizations")
  public open var advancedCopyCustomizations: Array<AdvancedCopyMap>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetToolsSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetToolsSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetToolsSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetToolsSettings

    @JsName("C")
    public fun copy(other: UObject): AssetToolsSettings

    @JsName("C")
    public fun copy(other: Any): AssetToolsSettings
  }
}

public open external class AssetRenameData {
  @JsName("Asset")
  public open var asset: Any

  @JsName("NewPackagePath")
  public open var newPackagePath: String

  @JsName("NewName")
  public open var newName: String

  @JsName("OldObjectPath")
  public open var oldObjectPath: SoftObjectPath

  @JsName("NewObjectPath")
  public open var newObjectPath: SoftObjectPath

  @JsName("bOnlyFixSoftReferences")
  public open var onlyFixSoftReferences: Boolean

  public open fun clone(): AssetRenameData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AssetRenameData

    @JsName("C")
    public fun copy(other: Any): AssetRenameData
  }
}

@JsName("EAssetRenameResult")
public external object AssetRenameResult {
  public var Failure: String

  public var Success: String

  public var Pending: String

  @JsName("EAssetRenameResult_MAX")
  public var Max: String
}

public open external class AutomatedAssetImportData(
  outer: UObject,
) : UObject {
  @JsName("GroupName")
  public open var groupName: String

  @JsName("Filenames")
  public open var filenames: Array<String>

  @JsName("DestinationPath")
  public open var destinationPath: String

  @JsName("FactoryName")
  public open var factoryName: String

  @JsName("bReplaceExisting")
  public open var replaceExisting: Boolean

  @JsName("bSkipReadOnly")
  public open var skipReadOnly: Boolean

  @JsName("Factory")
  public open var factory: Factory

  @JsName("LevelToLoad")
  public open var levelToLoad: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AutomatedAssetImportData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AutomatedAssetImportData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AutomatedAssetImportData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AutomatedAssetImportData

    @JsName("C")
    public fun copy(other: UObject): AutomatedAssetImportData

    @JsName("C")
    public fun copy(other: Any): AutomatedAssetImportData
  }
}

public open external class Factory(
  outer: UObject,
) : UObject {
  @JsName("bCreateNew")
  public open var createNew: Boolean

  @JsName("SupportedClass")
  public open var supportedClass: UnrealEngineClass

  @JsName("ContextClass")
  public open var contextClass: UnrealEngineClass

  @JsName("Formats")
  public open var formats: Array<String>

  @JsName("bEditAfterNew")
  public open var editAfterNew: Boolean

  @JsName("bEditorImport")
  public open var editorImport: Boolean

  @JsName("bText")
  public open var text: Boolean

  @JsName("ImportPriority")
  public open var importPriority: Number

  @JsName("AutomatedImportData")
  public open var automatedImportData: AutomatedAssetImportData

  @JsName("AssetImportTask")
  public open var assetImportTask: AssetImportTask

  @JsName("OverwriteYesOrNoToAllState")
  public open var overwriteYesOrNoToAllState: Number

  @JsName("ScriptFactoryCreateFile")
  public open fun scriptFactoryCreateFile(inTask: AssetImportTask): Boolean

  @JsName("ScriptFactoryCanImport")
  public open fun scriptFactoryCanImport(filename: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Factory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Factory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Factory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Factory

    @JsName("C")
    public fun copy(other: UObject): Factory

    @JsName("C")
    public fun copy(other: Any): Factory
  }
}

public open external class AssetImportTask(
  outer: UObject,
) : UObject {
  @JsName("Filename")
  public open var filename: String

  @JsName("DestinationPath")
  public open var destinationPath: String

  @JsName("DestinationName")
  public open var destinationName: String

  @JsName("bReplaceExisting")
  public open var replaceExisting: Boolean

  @JsName("bReplaceExistingSettings")
  public open var replaceExistingSettings: Boolean

  @JsName("bAutomated")
  public open var automated: Boolean

  @JsName("bSave")
  public open var save: Boolean

  @JsName("Factory")
  public open var factory: Factory

  @JsName("Options")
  public open var options: UObject

  @JsName("ImportedObjectPaths")
  public open var importedObjectPaths: Array<String>

  @JsName("Result")
  public open var result: Array<UObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetImportTask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetImportTask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetImportTask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetImportTask

    @JsName("C")
    public fun copy(other: UObject): AssetImportTask

    @JsName("C")
    public fun copy(other: Any): AssetImportTask
  }
}

@JsName("T$601")
public external interface ReferencingObjectsProvider {
  @JsName("ReferencingObjects")
  public var referencingObjects: Array<UObject>
}

@JsName("T$602")
public external interface Object602 {
  @JsName("OutPackageName")
  public var outPackageName: String

  @JsName("OutAssetName")
  public var outAssetName: String
}

public open external class AssetTools(
  outer: UObject,
) : Interface {
  @JsName("RenameReferencingSoftObjectPaths")
  public open fun renameReferencingSoftObjectPaths(packagesToCheck: Array<Package>,
      assetRedirectorMap: Any): Unit

  @JsName("RenameAssetsWithDialog")
  public open fun renameAssetsWithDialog(assetsAndNames: Array<AssetRenameData>,
      autoCheckout: Boolean): String

  @JsName("RenameAssets")
  public open fun renameAssets(assetsAndNames: Array<AssetRenameData>): Boolean

  @JsName("OpenEditorForAssets")
  public open fun openEditorForAssets(assets: Array<UObject>): Unit

  @JsName("ImportAssetTasks")
  public open fun importAssetTasks(importTasks: Array<AssetImportTask>): Unit

  @JsName("ImportAssetsWithDialog")
  public open fun importAssetsWithDialog(destinationPath: String): Array<UObject>

  @JsName("ImportAssetsAutomated")
  public open fun importAssetsAutomated(importData: AutomatedAssetImportData): Array<UObject>

  @JsName("FindSoftReferencesToObject")
  public open fun findSoftReferencesToObject(targetObject: SoftObjectPath,
      referencingObjects: Array<UObject>): ReferencingObjectsProvider

  @JsName("ExportAssetsWithDialog")
  public open fun exportAssetsWithDialog(assetsToExport: Array<String>,
      promptForIndividualFilenames: Boolean): Unit

  @JsName("ExportAssets")
  public open fun exportAssets(assetsToExport: Array<String>, exportPath: String): Unit

  @JsName("DuplicateAssetWithDialogAndTitle")
  public open fun duplicateAssetWithDialogAndTitle(
    assetName: String,
    packagePath: String,
    originalObject: UObject,
    dialogTitle: String,
  ): UObject

  @JsName("DuplicateAssetWithDialog")
  public open fun duplicateAssetWithDialog(
    assetName: String,
    packagePath: String,
    originalObject: UObject,
  ): UObject

  @JsName("DuplicateAsset")
  public open fun duplicateAsset(
    assetName: String,
    packagePath: String,
    originalObject: UObject,
  ): UObject

  @JsName("CreateUniqueAssetName")
  public open fun createUniqueAssetName(
    inBasePackageName: String,
    inSuffix: String,
    outPackageName: String,
    outAssetName: String,
  ): Object602

  @JsName("CreateAssetWithDialog")
  public open fun createAssetWithDialog(
    assetName: String,
    packagePath: String,
    assetClass: UnrealEngineClass,
    factory: Factory,
    callingContext: String,
    callConfigureProperties: Boolean,
  ): UObject

  @JsName("CreateAsset")
  public open fun createAsset(
    assetName: String,
    packagePath: String,
    assetClass: UnrealEngineClass,
    factory: Factory,
    callingContext: String,
  ): UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetTools

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetTools

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetTools

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetTools

    @JsName("C")
    public fun copy(other: UObject): AssetTools

    @JsName("C")
    public fun copy(other: Any): AssetTools
  }
}

public open external class AssetToolsHelpers(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetToolsHelpers

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetToolsHelpers

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetToolsHelpers

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetToolsHelpers

    @JsName("C")
    public fun copy(other: UObject): AssetToolsHelpers

    @JsName("C")
    public fun copy(other: Any): AssetToolsHelpers
  }
}

public open external class ContentBrowserFrontEndFilterExtension(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserFrontEndFilterExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserFrontEndFilterExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserFrontEndFilterExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserFrontEndFilterExtension

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserFrontEndFilterExtension

    @JsName("C")
    public fun copy(other: Any): ContentBrowserFrontEndFilterExtension
  }
}

public open external class ContentBrowserAssetContextMenuContext(
  outer: UObject,
) : UObject {
  @JsName("SelectedObjects")
  public open var selectedObjects: Array<Any>

  @JsName("CommonClass")
  public open var commonClass: UnrealEngineClass

  @JsName("bCanBeModified")
  public open var canBeModified: Boolean

  @JsName("GetSelectedObjects")
  public open fun getSelectedObjects(): Array<UObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserAssetContextMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserAssetContextMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserAssetContextMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserAssetContextMenuContext

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserAssetContextMenuContext

    @JsName("C")
    public fun copy(other: Any): ContentBrowserAssetContextMenuContext
  }
}

public open external class ContentBrowserAssetViewContextMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserAssetViewContextMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserAssetViewContextMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserAssetViewContextMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserAssetViewContextMenuContext

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserAssetViewContextMenuContext

    @JsName("C")
    public fun copy(other: Any): ContentBrowserAssetViewContextMenuContext
  }
}

public open external class ContentBrowserMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserMenuContext

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserMenuContext

    @JsName("C")
    public fun copy(other: Any): ContentBrowserMenuContext
  }
}

public open external class ContentBrowserFolderContext(
  outer: UObject,
) : ContentBrowserMenuContext {
  @JsName("bCanBeModified")
  public open var canBeModified: Boolean

  @JsName("bNoFolderOnDisk")
  public open var noFolderOnDisk: Boolean

  @JsName("NumAssetPaths")
  public open var numAssetPaths: Number

  @JsName("NumClassPaths")
  public open var numClassPaths: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserFolderContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserFolderContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserFolderContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserFolderContext

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserFolderContext

    @JsName("C")
    public fun copy(other: Any): ContentBrowserFolderContext
  }
}

public open external class ContentBrowserFilterListContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserFilterListContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserFilterListContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserFilterListContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserFilterListContext

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserFilterListContext

    @JsName("C")
    public fun copy(other: Any): ContentBrowserFilterListContext
  }
}

public open external class ContentBrowserAddNewContextMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserAddNewContextMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserAddNewContextMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserAddNewContextMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserAddNewContextMenuContext

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserAddNewContextMenuContext

    @JsName("C")
    public fun copy(other: Any): ContentBrowserAddNewContextMenuContext
  }
}

public open external class ContentBrowserToolbarMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserToolbarMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserToolbarMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserToolbarMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserToolbarMenuContext

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserToolbarMenuContext

    @JsName("C")
    public fun copy(other: Any): ContentBrowserToolbarMenuContext
  }
}

public open external class TextFilterKeyValueHandler(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextFilterKeyValueHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextFilterKeyValueHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextFilterKeyValueHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextFilterKeyValueHandler

    @JsName("C")
    public fun copy(other: UObject): TextFilterKeyValueHandler

    @JsName("C")
    public fun copy(other: Any): TextFilterKeyValueHandler
  }
}

public open external class TextFilterKeyValueHandlerEntry {
  @JsName("Key")
  public open var key: String

  @JsName("HandlerClass")
  public open var handlerClass: Class

  public open fun clone(): TextFilterKeyValueHandlerEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TextFilterKeyValueHandlerEntry

    @JsName("C")
    public fun copy(other: Any): TextFilterKeyValueHandlerEntry
  }
}

public open external class TextFilterKeyValueHandlers(
  outer: UObject,
) : UObject {
  @JsName("TextFilterKeyValueHandlers")
  public open var textFilterKeyValueHandlers: Array<TextFilterKeyValueHandlerEntry>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextFilterKeyValueHandlers

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextFilterKeyValueHandlers

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextFilterKeyValueHandlers

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextFilterKeyValueHandlers

    @JsName("C")
    public fun copy(other: UObject): TextFilterKeyValueHandlers

    @JsName("C")
    public fun copy(other: Any): TextFilterKeyValueHandlers
  }
}

public open external class TextFilterValueHandler(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextFilterValueHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextFilterValueHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextFilterValueHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextFilterValueHandler

    @JsName("C")
    public fun copy(other: UObject): TextFilterValueHandler

    @JsName("C")
    public fun copy(other: Any): TextFilterValueHandler
  }
}

public open external class TextFilterValueHandlers(
  outer: UObject,
) : UObject {
  @JsName("TextFilterValueHandlers")
  public open var textFilterValueHandlers: Array<Class>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextFilterValueHandlers

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextFilterValueHandlers

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextFilterValueHandlers

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextFilterValueHandlers

    @JsName("C")
    public fun copy(other: UObject): TextFilterValueHandlers

    @JsName("C")
    public fun copy(other: Any): TextFilterValueHandlers
  }
}

public open external class MotionTrailToolOptions(
  outer: UObject,
) : UObject {
  @JsName("bShowTrails")
  public open var showTrails: Boolean

  @JsName("TrailColor")
  public open var trailColor: LinearColor

  @JsName("bShowFullTrail")
  public open var showFullTrail: Boolean

  @JsName("TrailThickness")
  public open var trailThickness: Number

  @JsName("FramesBefore")
  public open var framesBefore: Number

  @JsName("FramesAfter")
  public open var framesAfter: Number

  @JsName("EvalsPerFrame")
  public open var evalsPerFrame: Number

  @JsName("bShowKeys")
  public open var showKeys: Boolean

  @JsName("bShowFrameNumber")
  public open var showFrameNumber: Boolean

  @JsName("KeyColor")
  public open var keyColor: LinearColor

  @JsName("KeySize")
  public open var keySize: Any

  @JsName("bShowMarks")
  public open var showMarks: Boolean

  @JsName("MarkColor")
  public open var markColor: LinearColor

  @JsName("MarkSize")
  public open var markSize: Any

  @JsName("bLockMarksToFrames")
  public open var lockMarksToFrames: Boolean

  @JsName("SecondsPerMark")
  public open var secondsPerMark: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MotionTrailToolOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MotionTrailToolOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MotionTrailToolOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MotionTrailToolOptions

    @JsName("C")
    public fun copy(other: UObject): MotionTrailToolOptions

    @JsName("C")
    public fun copy(other: Any): MotionTrailToolOptions
  }
}

public open external class MovieSceneCopyableBinding(
  outer: UObject,
) : UObject {
  @JsName("SpawnableObjectTemplate")
  public open var spawnableObjectTemplate: UObject

  @JsName("Tracks")
  public open var tracks: Array<MovieSceneTrack>

  @JsName("Binding")
  public open var binding: MovieSceneBinding

  @JsName("Spawnable")
  public open var spawnable: MovieSceneSpawnable

  @JsName("Possessable")
  public open var possessable: MovieScenePossessable

  @JsName("FolderPath")
  public open var folderPath: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCopyableBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCopyableBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCopyableBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCopyableBinding

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCopyableBinding

    @JsName("C")
    public fun copy(other: Any): MovieSceneCopyableBinding
  }
}

public open external class MovieSceneCopyableTrack(
  outer: UObject,
) : UObject {
  @JsName("Track")
  public open var track: MovieSceneTrack

  @JsName("bIsAMasterTrack")
  public open var isAMasterTrack: Boolean

  @JsName("bIsACameraCutTrack")
  public open var isACameraCutTrack: Boolean

  @JsName("FolderPath")
  public open var folderPath: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneCopyableTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneCopyableTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneCopyableTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneCopyableTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneCopyableTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneCopyableTrack
  }
}

public open external class Exporter(
  outer: UObject,
) : UObject {
  @JsName("SupportedClass")
  public open var supportedClass: UnrealEngineClass

  @JsName("ExportRootScope")
  public open var exportRootScope: UObject

  @JsName("FormatExtension")
  public open var formatExtension: Array<String>

  @JsName("FormatDescription")
  public open var formatDescription: Array<String>

  @JsName("PreferredFormatIndex")
  public open var preferredFormatIndex: Number

  @JsName("TextIndent")
  public open var textIndent: Number

  @JsName("bText")
  public open var text: Boolean

  @JsName("bSelectedOnly")
  public open var selectedOnly: Boolean

  @JsName("bForceFileOperations")
  public open var forceFileOperations: Boolean

  @JsName("ExportTask")
  public open var exportTask: AssetExportTask

  @JsName("ScriptRunAssetExportTask")
  public open fun scriptRunAssetExportTask(task: AssetExportTask): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Exporter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Exporter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Exporter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Exporter

    @JsName("RunAssetExportTasks")
    public fun runAssetExportTasks(exportTasks: Array<AssetExportTask>): Boolean

    @JsName("RunAssetExportTask")
    public fun runAssetExportTask(task: AssetExportTask): Boolean

    @JsName("C")
    public fun copy(other: UObject): Exporter

    @JsName("C")
    public fun copy(other: Any): Exporter
  }
}

public open external class AssetExportTask(
  outer: UObject,
) : UObject {
  @JsName("UObject")
  public open var uObject: UObject

  @JsName("Exporter")
  public open var exporter: Exporter

  @JsName("Filename")
  public open var filename: String

  @JsName("bSelected")
  public open var selected: Boolean

  @JsName("bReplaceIdentical")
  public open var replaceIdentical: Boolean

  @JsName("bPrompt")
  public open var prompt: Boolean

  @JsName("bAutomated")
  public open var automated: Boolean

  @JsName("bUseFileArchive")
  public open var useFileArchive: Boolean

  @JsName("bWriteEmptyFiles")
  public open var writeEmptyFiles: Boolean

  @JsName("IgnoreObjectList")
  public open var ignoreObjectList: Array<UObject>

  @JsName("Options")
  public open var options: UObject

  @JsName("Errors")
  public open var errors: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetExportTask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetExportTask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetExportTask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetExportTask

    @JsName("C")
    public fun copy(other: UObject): AssetExportTask

    @JsName("C")
    public fun copy(other: Any): AssetExportTask
  }
}

public open external class SequencerExportTask(
  outer: UObject,
) : AssetExportTask {
  @JsName("SequencerContext")
  public open var sequencerContext: UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerExportTask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerExportTask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerExportTask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerExportTask

    @JsName("C")
    public fun copy(other: UObject): SequencerExportTask

    @JsName("C")
    public fun copy(other: Any): SequencerExportTask
  }
}

public open external class MovieSceneDoubleChannel : MovieSceneChannel {
  @JsName("PreInfinityExtrap")
  public open var preInfinityExtrap: String

  @JsName("PostInfinityExtrap")
  public open var postInfinityExtrap: String

  @JsName("Times")
  public open var times: Array<FrameNumber>

  @JsName("Values")
  public open var values: Array<MovieSceneDoubleValue>

  @JsName("DefaultValue")
  public open var defaultValue: Any

  @JsName("bHasDefaultValue")
  public open var hasDefaultValue: Boolean

  @JsName("KeyHandles")
  public open var keyHandles: MovieSceneKeyHandleMap

  @JsName("TickResolution")
  public open var tickResolution: FrameRate

  @JsName("bShowCurve")
  public open var showCurve: Boolean

  public override fun clone(): MovieSceneDoubleChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieSceneDoubleChannel

    @JsName("C")
    public fun copy(other: Any): MovieSceneDoubleChannel
  }
}

@JsName("EShow3DTrajectory")
public external object Show3DTrajectory {
  @JsName("EST_OnlyWhenSelected")
  public var OnlyWhenSelected: String

  @JsName("EST_Always")
  public var Always: String

  @JsName("EST_Never")
  public var Never: String

  @JsName("EST_MAX")
  public var Max: String
}

@JsName("MovieScene3DTransformSection")
public open external class MovieScene3dTransformSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("TransformMask")
  public open var transformMask: MovieSceneTransformMask

  @JsName("Translation")
  public open var translation: MovieSceneDoubleChannel

  @JsName("Rotation")
  public open var rotation: MovieSceneDoubleChannel

  @JsName("Scale")
  public open var scale: MovieSceneDoubleChannel

  @JsName("ManualWeight")
  public open var manualWeight: MovieSceneFloatChannel

  @JsName("bUseQuaternionInterpolation")
  public open var useQuaternionInterpolation: Boolean

  @JsName("Show3DTrajectory")
  public open var show3dTrajectory: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene3dTransformSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene3dTransformSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene3dTransformSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene3dTransformSection

    @JsName("C")
    public fun copy(other: UObject): MovieScene3dTransformSection

    @JsName("C")
    public fun copy(other: Any): MovieScene3dTransformSection
  }
}

public open external class SequencerKeyActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("KeyMeshComponent")
  public open var keyMeshComponent: StaticMeshComponent

  @JsName("AssociatedActor")
  public open var associatedActor: Actor

  @JsName("TrackSection")
  public open var trackSection: MovieScene3dTransformSection

  @JsName("KeyTime")
  public open var keyTime: Number

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerKeyActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerKeyActor

    @JsName("C")
    public fun copy(other: UObject): SequencerKeyActor

    @JsName("C")
    public fun copy(other: Any): SequencerKeyActor
  }
}

public open external class MovieSceneKeyStructType(
  outer: UObject,
) : ScriptStruct {
  @JsName("SourceTimesProperty")
  public open var sourceTimesProperty: Any

  @JsName("SourceValuesProperty")
  public open var sourceValuesProperty: Any

  @JsName("DestTimeProperty")
  public open var destTimeProperty: Any

  @JsName("DestValueProperty")
  public open var destValueProperty: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneKeyStructType

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneKeyStructType

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneKeyStructType

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneKeyStructType

    @JsName("C")
    public fun copy(other: UObject): MovieSceneKeyStructType

    @JsName("C")
    public fun copy(other: Any): MovieSceneKeyStructType
  }
}

public open external class SequencerMeshTrail(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerMeshTrail

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerMeshTrail

    @JsName("C")
    public fun copy(other: UObject): SequencerMeshTrail

    @JsName("C")
    public fun copy(other: Any): SequencerMeshTrail
  }
}

public open external class SequencerSettingsContainer(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerSettingsContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerSettingsContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerSettingsContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerSettingsContainer

    @JsName("C")
    public fun copy(other: UObject): SequencerSettingsContainer

    @JsName("C")
    public fun copy(other: Any): SequencerSettingsContainer
  }
}

@JsName("EAutoChangeMode")
public external object AutoChangeMode {
  public var AutoKey: String

  public var AutoTrack: String

  public var All: String

  public var None: String

  @JsName("EAutoChangeMode_MAX")
  public var Max: String
}

@JsName("EAllowEditsMode")
public external object AllowEditsMode {
  @JsName("AllEdits")
  public var Edits: String

  @JsName("AllowSequencerEditsOnly")
  public var OwSequencerEditsOnly: String

  @JsName("AllowLevelEditsOnly")
  public var OwLevelEditsOnly: String

  @JsName("EAllowEditsMode_MAX")
  public var Max: String
}

@JsName("EKeyGroupMode")
public external object KeyGroupMode {
  @JsName("KeyChanged")
  public var Changed: String

  @JsName("KeyGroup")
  public var Group: String

  @JsName("KeyAll")
  public var All: String

  @JsName("EKeyGroupMode_MAX")
  public var Max: String
}

@JsName("EMovieSceneKeyInterpolation")
public external object MovieSceneKeyInterpolation {
  public var Auto: String

  public var User: String

  public var Break: String

  public var Linear: String

  public var Constant: String

  @JsName("EMovieSceneKeyInterpolation_MAX")
  public var Max: String
}

@JsName("ESequencerSpawnPosition")
public external object SequencerSpawnPosition {
  @JsName("SSP_Origin")
  public var Origin: String

  @JsName("SSP_PlaceInFrontOfCamera")
  public var PlaceInFrontOfCamera: String

  @JsName("SSP_MAX")
  public var Max: String
}

@JsName("ESequencerZoomPosition")
public external object SequencerZoomPosition {
  @JsName("SZP_CurrentTime")
  public var CurrentTime: String

  @JsName("SZP_MousePosition")
  public var MousePosition: String

  @JsName("SZP_MAX")
  public var Max: String
}

@JsName("ESequencerLoopMode")
public external object SequencerLoopMode {
  @JsName("SLM_NoLoop")
  public var NoLoop: String

  @JsName("SLM_Loop")
  public var Loop: String

  @JsName("SLM_LoopSelectionRange")
  public var LoopSelectionRange: String

  @JsName("SLM_MAX")
  public var Max: String
}

@JsName("EFrameNumberDisplayFormats")
public external object FrameNumberDisplayFormats {
  public var NonDropFrameTimecode: String

  public var DropFrameTimecode: String

  public var Seconds: String

  public var Frames: String

  @JsName("MAX_Count")
  public var MaxCount: String

  @JsName("EFrameNumberDisplayFormats_MAX")
  public var Max: String
}

public open external class SequencerSettings(
  outer: UObject,
) : UObject {
  @JsName("AutoChangeMode")
  public open var autoChangeMode: String

  @JsName("AllowEditsMode")
  public open var allowEditsMode: String

  @JsName("KeyGroupMode")
  public open var keyGroupMode: String

  @JsName("KeyInterpolation")
  public open var keyInterpolation: String

  @JsName("bAutoSetTrackDefaults")
  public open var autoSetTrackDefaults: Boolean

  @JsName("SpawnPosition")
  public open var spawnPosition: String

  @JsName("bCreateSpawnableCameras")
  public open var createSpawnableCameras: Boolean

  @JsName("bShowRangeSlider")
  public open var showRangeSlider: Boolean

  @JsName("bIsSnapEnabled")
  public open var isSnapEnabled: Boolean

  @JsName("bSnapKeyTimesToInterval")
  public open var snapKeyTimesToInterval: Boolean

  @JsName("bSnapKeyTimesToKeys")
  public open var snapKeyTimesToKeys: Boolean

  @JsName("bSnapSectionTimesToInterval")
  public open var snapSectionTimesToInterval: Boolean

  @JsName("bSnapSectionTimesToSections")
  public open var snapSectionTimesToSections: Boolean

  @JsName("bSnapKeysAndSectionsToPlayRange")
  public open var snapKeysAndSectionsToPlayRange: Boolean

  @JsName("bSnapPlayTimeToKeys")
  public open var snapPlayTimeToKeys: Boolean

  @JsName("bSnapPlayTimeToSections")
  public open var snapPlayTimeToSections: Boolean

  @JsName("bSnapPlayTimeToMarkers")
  public open var snapPlayTimeToMarkers: Boolean

  @JsName("bSnapPlayTimeToInterval")
  public open var snapPlayTimeToInterval: Boolean

  @JsName("bSnapPlayTimeToPressedKey")
  public open var snapPlayTimeToPressedKey: Boolean

  @JsName("bSnapPlayTimeToDraggedKey")
  public open var snapPlayTimeToDraggedKey: Boolean

  @JsName("bSnapCurveValueToInterval")
  public open var snapCurveValueToInterval: Boolean

  @JsName("bShowSelectedNodesOnly")
  public open var showSelectedNodesOnly: Boolean

  @JsName("bRewindOnRecord")
  public open var rewindOnRecord: Boolean

  @JsName("ZoomPosition")
  public open var zoomPosition: String

  @JsName("bAutoScrollEnabled")
  public open var autoScrollEnabled: Boolean

  @JsName("bLinkCurveEditorTimeRange")
  public open var linkCurveEditorTimeRange: Boolean

  @JsName("bSynchronizeCurveEditorSelection")
  public open var synchronizeCurveEditorSelection: Boolean

  @JsName("bIsolateCurveEditorToSelection")
  public open var isolateCurveEditorToSelection: Boolean

  @JsName("LoopMode")
  public open var loopMode: String

  @JsName("bKeepCursorInPlayRangeWhileScrubbing")
  public open var keepCursorInPlayRangeWhileScrubbing: Boolean

  @JsName("bKeepPlayRangeInSectionBounds")
  public open var keepPlayRangeInSectionBounds: Boolean

  @JsName("ZeroPadFrames")
  public open var zeroPadFrames: Number

  @JsName("JumpFrameIncrement")
  public open var jumpFrameIncrement: FrameNumber

  @JsName("bShowCombinedKeyframes")
  public open var showCombinedKeyframes: Boolean

  @JsName("bInfiniteKeyAreas")
  public open var infiniteKeyAreas: Boolean

  @JsName("bShowChannelColors")
  public open var showChannelColors: Boolean

  @JsName("KeyAreaCurveExtents")
  public open var keyAreaCurveExtents: String

  @JsName("KeyAreaHeightWithCurves")
  public open var keyAreaHeightWithCurves: Number

  @JsName("ReduceKeysTolerance")
  public open var reduceKeysTolerance: Number

  @JsName("bDeleteKeysWhenTrimming")
  public open var deleteKeysWhenTrimming: Boolean

  @JsName("bDisableSectionsAfterBaking")
  public open var disableSectionsAfterBaking: Boolean

  @JsName("bCleanPlaybackMode")
  public open var cleanPlaybackMode: Boolean

  @JsName("bActivateRealtimeViewports")
  public open var activateRealtimeViewports: Boolean

  @JsName("bEvaluateSubSequencesInIsolation")
  public open var evaluateSubSequencesInIsolation: Boolean

  @JsName("bRerunConstructionScripts")
  public open var rerunConstructionScripts: Boolean

  @JsName("bShowDebugVisualization")
  public open var showDebugVisualization: Boolean

  @JsName("bVisualizePreAndPostRoll")
  public open var visualizePreAndPostRoll: Boolean

  @JsName("bCompileDirectorOnEvaluate")
  public open var compileDirectorOnEvaluate: Boolean

  @JsName("TrajectoryPathCap")
  public open var trajectoryPathCap: Any

  @JsName("FrameNumberDisplayFormat")
  public open var frameNumberDisplayFormat: String

  @JsName("MovieRendererName")
  public open var movieRendererName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerSettings

    @JsName("C")
    public fun copy(other: UObject): SequencerSettings

    @JsName("C")
    public fun copy(other: Any): SequencerSettings
  }
}

public open external class SequencerTrackFilterExtension(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SequencerTrackFilterExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SequencerTrackFilterExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SequencerTrackFilterExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SequencerTrackFilterExtension

    @JsName("C")
    public fun copy(other: UObject): SequencerTrackFilterExtension

    @JsName("C")
    public fun copy(other: Any): SequencerTrackFilterExtension
  }
}

public open external class SoundNode(
  outer: UObject,
) : UObject {
  @JsName("ChildNodes")
  public open var childNodes: Array<SoundNode>

  @JsName("GraphNode")
  public open var graphNode: EdGraphNode

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundNode

    @JsName("C")
    public fun copy(other: UObject): SoundNode

    @JsName("C")
    public fun copy(other: Any): SoundNode
  }
}

public open external class SoundCue(
  outer: UObject,
) : SoundBase {
  @JsName("bPrimeOnLoad")
  public open var primeOnLoad: Boolean

  @JsName("FirstNode")
  public open var firstNode: SoundNode

  @JsName("VolumeMultiplier")
  public open var volumeMultiplier: Number

  @JsName("PitchMultiplier")
  public open var pitchMultiplier: Number

  @JsName("AttenuationOverrides")
  public open var attenuationOverrides: SoundAttenuationSettings

  @JsName("AllNodes")
  public open var allNodes: Array<SoundNode>

  @JsName("SoundCueGraph")
  public open var soundCueGraph: EdGraph

  @JsName("SubtitlePriority")
  public open var subtitlePriority: Number

  @JsName("bOverrideAttenuation")
  public open var overrideAttenuation: Boolean

  @JsName("bExcludeFromRandomNodeBranchCulling")
  public open var excludeFromRandomNodeBranchCulling: Boolean

  @JsName("CookedQualityIndex")
  public open var cookedQualityIndex: Number

  @JsName("bHasPlayWhenSilent")
  public open var hasPlayWhenSilent: Boolean

  @JsName("PrimeSoundCueForPlayback")
  public open fun primeSoundCueForPlayback(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SoundCue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SoundCue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SoundCue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SoundCue

    @JsName("C")
    public fun copy(other: UObject): SoundCue

    @JsName("C")
    public fun copy(other: Any): SoundCue

    @JsName("PrimeSoundCueForPlayback")
    public fun primeSoundCueForPlayback(soundCue: SoundCue): Unit
  }
}

@JsName("VREditorAssetContainer")
public open external class VrEditorAssetContainer(
  outer: UObject,
) : DataAsset {
  @JsName("DockableWindowCloseSound")
  public open var dockableWindowCloseSound: SoundBase

  @JsName("DockableWindowOpenSound")
  public open var dockableWindowOpenSound: SoundBase

  @JsName("DockableWindowDropSound")
  public open var dockableWindowDropSound: SoundBase

  @JsName("DockableWindowDragSound")
  public open var dockableWindowDragSound: SoundBase

  @JsName("DropFromContentBrowserSound")
  public open var dropFromContentBrowserSound: SoundBase

  @JsName("RadialMenuOpenSound")
  public open var radialMenuOpenSound: SoundBase

  @JsName("RadialMenuCloseSound")
  public open var radialMenuCloseSound: SoundBase

  @JsName("TeleportSound")
  public open var teleportSound: SoundBase

  @JsName("ButtonPressSound")
  public open var buttonPressSound: SoundCue

  @JsName("AutoScaleSound")
  public open var autoScaleSound: SoundBase

  @JsName("GenericHMDMesh")
  public open var genericHmdMesh: StaticMesh

  @JsName("PlaneMesh")
  public open var planeMesh: StaticMesh

  @JsName("CylinderMesh")
  public open var cylinderMesh: StaticMesh

  @JsName("LaserPointerStartMesh")
  public open var laserPointerStartMesh: StaticMesh

  @JsName("LaserPointerMesh")
  public open var laserPointerMesh: StaticMesh

  @JsName("LaserPointerEndMesh")
  public open var laserPointerEndMesh: StaticMesh

  @JsName("LaserPointerHoverMesh")
  public open var laserPointerHoverMesh: StaticMesh

  @JsName("VivePreControllerMesh")
  public open var vivePreControllerMesh: StaticMesh

  @JsName("OculusControllerMesh")
  public open var oculusControllerMesh: StaticMesh

  @JsName("GenericControllerMesh")
  public open var genericControllerMesh: StaticMesh

  @JsName("TeleportRootMesh")
  public open var teleportRootMesh: StaticMesh

  @JsName("WindowMesh")
  public open var windowMesh: StaticMesh

  @JsName("WindowSelectionBarMesh")
  public open var windowSelectionBarMesh: StaticMesh

  @JsName("WindowCloseButtonMesh")
  public open var windowCloseButtonMesh: StaticMesh

  @JsName("RadialMenuMainMesh")
  public open var radialMenuMainMesh: StaticMesh

  @JsName("RadialMenuPointerMesh")
  public open var radialMenuPointerMesh: StaticMesh

  @JsName("PointerCursorMesh")
  public open var pointerCursorMesh: StaticMesh

  @JsName("LineSegmentCylinderMesh")
  public open var lineSegmentCylinderMesh: StaticMesh

  @JsName("JointSphereMesh")
  public open var jointSphereMesh: StaticMesh

  @JsName("DockingButtonMesh")
  public open var dockingButtonMesh: StaticMesh

  @JsName("GridMaterial")
  public open var gridMaterial: MaterialInterface

  @JsName("LaserPointerMaterial")
  public open var laserPointerMaterial: MaterialInterface

  @JsName("LaserPointerTranslucentMaterial")
  public open var laserPointerTranslucentMaterial: MaterialInterface

  @JsName("WorldMovementPostProcessMaterial")
  public open var worldMovementPostProcessMaterial: Material

  @JsName("TextMaterial")
  public open var textMaterial: MaterialInterface

  @JsName("VivePreControllerMaterial")
  public open var vivePreControllerMaterial: MaterialInterface

  @JsName("OculusControllerMaterial")
  public open var oculusControllerMaterial: MaterialInterface

  @JsName("TeleportMaterial")
  public open var teleportMaterial: MaterialInterface

  @JsName("WindowMaterial")
  public open var windowMaterial: MaterialInterface

  @JsName("WindowTranslucentMaterial")
  public open var windowTranslucentMaterial: MaterialInterface

  @JsName("LineMaterial")
  public open var lineMaterial: Material

  @JsName("TranslucentTextMaterial")
  public open var translucentTextMaterial: MaterialInterface

  @JsName("TextFont")
  public open var textFont: Font

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorAssetContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorAssetContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorAssetContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorAssetContainer

    @JsName("C")
    public fun copy(other: UObject): VrEditorAssetContainer

    @JsName("C")
    public fun copy(other: Any): VrEditorAssetContainer
  }
}

public open external class EditorWorldExtensionActorData {
  @JsName("Actor")
  public open var actor: Actor

  @JsName("bValidForPIE")
  public open var validForPie: Boolean

  public open fun clone(): EditorWorldExtensionActorData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorWorldExtensionActorData

    @JsName("C")
    public fun copy(other: Any): EditorWorldExtensionActorData
  }
}

public open external class EditorWorldExtension(
  outer: UObject,
) : UObject {
  @JsName("ExtensionActors")
  public open var extensionActors: Array<EditorWorldExtensionActorData>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorWorldExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorWorldExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorWorldExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorWorldExtension

    @JsName("C")
    public fun copy(other: UObject): EditorWorldExtension

    @JsName("C")
    public fun copy(other: Any): EditorWorldExtension
  }
}

public open external class PostProcessComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("Settings")
  public open var settings: PostProcessSettings

  @JsName("Priority")
  public open var priority: Number

  @JsName("BlendRadius")
  public open var blendRadius: Number

  @JsName("BlendWeight")
  public open var blendWeight: Number

  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("bUnbound")
  public open var unbound: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PostProcessComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PostProcessComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PostProcessComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PostProcessComponent

    @JsName("C")
    public fun copy(other: UObject): PostProcessComponent

    @JsName("C")
    public fun copy(other: Any): PostProcessComponent
  }
}

@JsName("VREditorAvatarActor")
public open external class VrEditorAvatarActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("HeadMeshComponent")
  public open var headMeshComponent: StaticMeshComponent

  @JsName("WorldMovementGridMeshComponent")
  public open var worldMovementGridMeshComponent: StaticMeshComponent

  @JsName("WorldMovementGridMID")
  public open var worldMovementGridMid: MaterialInstanceDynamic

  @JsName("WorldMovementGridOpacity")
  public open var worldMovementGridOpacity: Number

  @JsName("bIsDrawingWorldMovementPostProcess")
  public open var isDrawingWorldMovementPostProcess: Boolean

  @JsName("WorldMovementPostProcessMaterial")
  public open var worldMovementPostProcessMaterial: MaterialInstanceDynamic

  @JsName("ScaleProgressMeshComponent")
  public open var scaleProgressMeshComponent: StaticMeshComponent

  @JsName("CurrentScaleProgressMeshComponent")
  public open var currentScaleProgressMeshComponent: StaticMeshComponent

  @JsName("UserScaleIndicatorText")
  public open var userScaleIndicatorText: TextRenderComponent

  @JsName("FixedUserScaleMID")
  public open var fixedUserScaleMid: MaterialInstanceDynamic

  @JsName("TranslucentFixedUserScaleMID")
  public open var translucentFixedUserScaleMid: MaterialInstanceDynamic

  @JsName("CurrentUserScaleMID")
  public open var currentUserScaleMid: MaterialInstanceDynamic

  @JsName("TranslucentCurrentUserScaleMID")
  public open var translucentCurrentUserScaleMid: MaterialInstanceDynamic

  @JsName("PostProcessComponent")
  public open var postProcessComponent: PostProcessComponent

  @JsName("VRMode")
  public open var vrMode: VrEditorMode

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorAvatarActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorAvatarActor

    @JsName("C")
    public fun copy(other: UObject): VrEditorAvatarActor

    @JsName("C")
    public fun copy(other: Any): VrEditorAvatarActor
  }
}

@JsName("VREditorBaseActor")
public open external class VrEditorBaseActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("VRMode")
  public open var vrMode: VrEditorMode

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorBaseActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorBaseActor

    @JsName("C")
    public fun copy(other: UObject): VrEditorBaseActor

    @JsName("C")
    public fun copy(other: Any): VrEditorBaseActor
  }
}

@JsName("VREditorFloatingUICreationContext")
public open external class VrEditorFloatingUiCreationContext {
  @JsName("WidgetClass")
  public open var widgetClass: UnrealEngineClass

  @JsName("PanelID")
  public open var panelId: String

  @JsName("ParentActor")
  public open var parentActor: Actor

  @JsName("PanelSpawnOffset")
  public open var panelSpawnOffset: Transform

  @JsName("PanelSize")
  public open var panelSize: Vector2d

  @JsName("PanelMesh")
  public open var panelMesh: StaticMesh

  @JsName("EditorUISize")
  public open var editorUiSize: Number

  @JsName("bHideWindowHandles")
  public open var hideWindowHandles: Boolean

  @JsName("bMaskOutWidgetBackground")
  public open var maskOutWidgetBackground: Boolean

  @JsName("bNoCloseButton")
  public open var noCloseButton: Boolean

  public open fun clone(): VrEditorFloatingUiCreationContext

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VrEditorFloatingUiCreationContext

    @JsName("C")
    public fun copy(other: Any): VrEditorFloatingUiCreationContext
  }
}

@JsName("EWidgetSpace")
public external object WidgetSpace {
  public var World: String

  public var Screen: String

  @JsName("EWidgetSpace_MAX")
  public var Max: String
}

@JsName("EWidgetTimingPolicy")
public external object WidgetTimingPolicy {
  public var RealTime: String

  public var GameTime: String

  @JsName("EWidgetTimingPolicy_MAX")
  public var Max: String
}

@JsName("EWindowVisibility")
public external object WindowVisibility {
  public var Visible: String

  public var SelfHitTestInvisible: String

  @JsName("EWindowVisibility_MAX")
  public var Max: String
}

@JsName("EWidgetBlendMode")
public external object WidgetBlendMode {
  public var Opaque: String

  public var Masked: String

  public var Transparent: String

  @JsName("EWidgetBlendMode_MAX")
  public var Max: String
}

@JsName("EWidgetGeometryMode")
public external object WidgetGeometryMode {
  public var Plane: String

  public var Cylinder: String

  @JsName("EWidgetGeometryMode_MAX")
  public var Max: String
}

@JsName("ETickMode")
public external object TickMode {
  public var Disabled: String

  public var Enabled: String

  public var Automatic: String

  @JsName("ETickMode_MAX")
  public var Max: String
}

public open external class WidgetComponent(
  outer: UObject,
) : MeshComponent {
  @JsName("Space")
  public open var space: String

  @JsName("TimingPolicy")
  public open var timingPolicy: String

  @JsName("WidgetClass")
  public open var widgetClass: UnrealEngineClass

  @JsName("DrawSize")
  public open var drawSize: IntPoint

  @JsName("bManuallyRedraw")
  public open var manuallyRedraw: Boolean

  @JsName("bRedrawRequested")
  public open var redrawRequested: Boolean

  @JsName("RedrawTime")
  public open var redrawTime: Number

  @JsName("CurrentDrawSize")
  public open var currentDrawSize: IntPoint

  @JsName("bDrawAtDesiredSize")
  public open var drawAtDesiredSize: Boolean

  @JsName("Pivot")
  public open var pivot: Vector2d

  @JsName("bReceiveHardwareInput")
  public open var receiveHardwareInput: Boolean

  @JsName("bWindowFocusable")
  public open var windowFocusable: Boolean

  @JsName("WindowVisibility")
  public open var windowVisibility: String

  @JsName("bApplyGammaCorrection")
  public open var applyGammaCorrection: Boolean

  @JsName("OwnerPlayer")
  public open var ownerPlayer: LocalPlayer

  @JsName("BackgroundColor")
  public open var backgroundColor: LinearColor

  @JsName("TintColorAndOpacity")
  public open var tintColorAndOpacity: LinearColor

  @JsName("OpacityFromTexture")
  public open var opacityFromTexture: Number

  @JsName("BlendMode")
  public open var blendMode: String

  @JsName("bIsTwoSided")
  public open var isTwoSided: Boolean

  @JsName("TickWhenOffscreen")
  public open var tickWhenOffscreen: Boolean

  @JsName("BodySetup")
  public open var bodySetup: BodySetup

  @JsName("TranslucentMaterial")
  public open var translucentMaterial: MaterialInterface

  @JsName("TranslucentMaterial_OneSided")
  public open var translucentMaterialOneSided: MaterialInterface

  @JsName("OpaqueMaterial")
  public open var opaqueMaterial: MaterialInterface

  @JsName("OpaqueMaterial_OneSided")
  public open var opaqueMaterialOneSided: MaterialInterface

  @JsName("MaskedMaterial")
  public open var maskedMaterial: MaterialInterface

  @JsName("MaskedMaterial_OneSided")
  public open var maskedMaterialOneSided: MaterialInterface

  @JsName("RenderTarget")
  public open var renderTarget: TextureRenderTarget2d

  @JsName("MaterialInstance")
  public open var materialInstance: MaterialInstanceDynamic

  @JsName("bAddedToScreen")
  public open var addedToScreen: Boolean

  @JsName("bEditTimeUsable")
  public open var editTimeUsable: Boolean

  @JsName("SharedLayerName")
  public open var sharedLayerName: String

  @JsName("LayerZOrder")
  public open var layerZOrder: Number

  @JsName("GeometryMode")
  public open var geometryMode: String

  @JsName("CylinderArcAngle")
  public open var cylinderArcAngle: Number

  @JsName("TickMode")
  public open var tickMode: String

  @JsName("Widget")
  public open var widget: UserWidget

  @JsName("SetWindowVisibility")
  public open fun setWindowVisibility(inVisibility: String): Unit

  @JsName("SetWindowFocusable")
  public open fun setWindowFocusable(inWindowFocusable: Boolean): Unit

  @JsName("SetWidgetSpace")
  public open fun setWidgetSpace(newSpace: String): Unit

  @JsName("SetWidget")
  public open fun setWidget(widget: UserWidget): Unit

  @JsName("SetTwoSided")
  public open fun setTwoSided(wantTwoSided: Boolean): Unit

  @JsName("SetTintColorAndOpacity")
  public open fun setTintColorAndOpacity(newTintColorAndOpacity: LinearColor): Unit

  @JsName("SetTickWhenOffscreen")
  public open fun setTickWhenOffscreen(wantTickWhenOffscreen: Boolean): Unit

  @JsName("SetTickMode")
  public open fun setTickMode(inTickMode: String): Unit

  @JsName("SetRedrawTime")
  public open fun setRedrawTime(inRedrawTime: Number): Unit

  @JsName("SetPivot")
  public open fun setPivot(inPivot: Vector2d): Unit

  @JsName("SetOwnerPlayer")
  public open fun setOwnerPlayer(localPlayer: LocalPlayer): Unit

  @JsName("SetManuallyRedraw")
  public open fun setManuallyRedraw(useManualRedraw: Boolean): Unit

  @JsName("SetGeometryMode")
  public open fun setGeometryMode(inGeometryMode: String): Unit

  @JsName("SetDrawSize")
  public open fun setDrawSize(size: Vector2d): Unit

  @JsName("SetDrawAtDesiredSize")
  public open fun setDrawAtDesiredSize(inDrawAtDesiredSize: Boolean): Unit

  @JsName("SetCylinderArcAngle")
  public open fun setCylinderArcAngle(inCylinderArcAngle: Number): Unit

  @JsName("SetBackgroundColor")
  public open fun setBackgroundColor(newBackgroundColor: LinearColor): Unit

  @JsName("RequestRenderUpdate")
  public open fun requestRenderUpdate(): Unit

  @JsName("RequestRedraw")
  public open fun requestRedraw(): Unit

  @JsName("IsWidgetVisible")
  public open fun isWidgetVisible(): Boolean

  @JsName("GetWindowVisiblility")
  public open fun getWindowVisiblility(): String

  @JsName("GetWindowFocusable")
  public open fun getWindowFocusable(): Boolean

  @JsName("GetWidgetSpace")
  public open fun getWidgetSpace(): String

  @JsName("GetWidget")
  public open fun getWidget(): UserWidget

  @JsName("GetUserWidgetObject")
  public open fun getUserWidgetObject(): UserWidget

  @JsName("GetTwoSided")
  public open fun getTwoSided(): Boolean

  @JsName("GetTickWhenOffscreen")
  public open fun getTickWhenOffscreen(): Boolean

  @JsName("GetRenderTarget")
  public open fun getRenderTarget(): TextureRenderTarget2d

  @JsName("GetRedrawTime")
  public open fun getRedrawTime(): Number

  @JsName("GetPivot")
  public open fun getPivot(): Vector2d

  @JsName("GetOwnerPlayer")
  public open fun getOwnerPlayer(): LocalPlayer

  @JsName("GetMaterialInstance")
  public open fun getMaterialInstance(): MaterialInstanceDynamic

  @JsName("GetManuallyRedraw")
  public open fun getManuallyRedraw(): Boolean

  @JsName("GetGeometryMode")
  public open fun getGeometryMode(): String

  @JsName("GetDrawSize")
  public open fun getDrawSize(): Vector2d

  @JsName("GetDrawAtDesiredSize")
  public open fun getDrawAtDesiredSize(): Boolean

  @JsName("GetCylinderArcAngle")
  public open fun getCylinderArcAngle(): Number

  @JsName("GetCurrentDrawSize")
  public open fun getCurrentDrawSize(): Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetComponent

    @JsName("C")
    public fun copy(other: UObject): WidgetComponent

    @JsName("C")
    public fun copy(other: Any): WidgetComponent
  }
}

@JsName("EVREditorWidgetDrawingPolicy")
public external object VREditorWidgetDrawingPolicy {
  public var Always: String

  public var Hovering: String

  @JsName("EVREditorWidgetDrawingPolicy_MAX")
  public var Max: String
}

@JsName("VREditorWidgetComponent")
public open external class VrEditorWidgetComponent(
  outer: UObject,
) : WidgetComponent {
  @JsName("DrawingPolicy")
  public open var drawingPolicy: String

  @JsName("bIsHovering")
  public open var isHovering: Boolean

  @JsName("bHasEverDrawn")
  public open var hasEverDrawn: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorWidgetComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorWidgetComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorWidgetComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorWidgetComponent

    @JsName("C")
    public fun copy(other: UObject): VrEditorWidgetComponent

    @JsName("C")
    public fun copy(other: Any): VrEditorWidgetComponent
  }
}

@JsName("VREditorFloatingUI")
public open external class VrEditorFloatingUi(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : VrEditorBaseActor {
  @JsName("CreationContext")
  public open var creationContext: VrEditorFloatingUiCreationContext

  @JsName("UserWidget")
  public open var userWidget: UserWidget

  @JsName("WidgetComponent")
  public open var widgetComponent: VrEditorWidgetComponent

  @JsName("WindowMeshComponent")
  public open var windowMeshComponent: StaticMeshComponent

  @JsName("UserWidgetClass")
  public open var userWidgetClass: UnrealEngineClass

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorFloatingUi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorFloatingUi

    @JsName("C")
    public fun copy(other: UObject): VrEditorFloatingUi

    @JsName("C")
    public fun copy(other: Any): VrEditorFloatingUi
  }
}

@JsName("VREditorRadialFloatingUI")
public open external class VrEditorRadialFloatingUi(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : VrEditorBaseActor {
  @JsName("WidgetComponents")
  public open var widgetComponents: Array<VrEditorWidgetComponent>

  @JsName("WindowMeshComponent")
  public open var windowMeshComponent: StaticMeshComponent

  @JsName("ArrowMeshComponent")
  public open var arrowMeshComponent: StaticMeshComponent

  @JsName("CentralWidgetComponent")
  public open var centralWidgetComponent: VrEditorWidgetComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorRadialFloatingUi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorRadialFloatingUi

    @JsName("C")
    public fun copy(other: UObject): VrEditorRadialFloatingUi

    @JsName("C")
    public fun copy(other: Any): VrEditorRadialFloatingUi
  }
}

public open external class ViewportDragOperation(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewportDragOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewportDragOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewportDragOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewportDragOperation

    @JsName("C")
    public fun copy(other: UObject): ViewportDragOperation

    @JsName("C")
    public fun copy(other: Any): ViewportDragOperation
  }
}

public open external class ViewportDragOperationComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("DragOperation")
  public open var dragOperation: ViewportDragOperation

  @JsName("DragOperationSubclass")
  public open var dragOperationSubclass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewportDragOperationComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewportDragOperationComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewportDragOperationComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewportDragOperationComponent

    @JsName("C")
    public fun copy(other: UObject): ViewportDragOperationComponent

    @JsName("C")
    public fun copy(other: Any): ViewportDragOperationComponent
  }
}

@JsName("VREditorDockableWindow")
public open external class VrEditorDockableWindow(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : VrEditorFloatingUi {
  @JsName("DockButtonMeshComponent")
  public open var dockButtonMeshComponent: StaticMeshComponent

  @JsName("SelectionBarMeshComponent")
  public open var selectionBarMeshComponent: StaticMeshComponent

  @JsName("CloseButtonMeshComponent")
  public open var closeButtonMeshComponent: StaticMeshComponent

  @JsName("DockButtonMID")
  public open var dockButtonMid: MaterialInstanceDynamic

  @JsName("SelectionBarMID")
  public open var selectionBarMid: MaterialInstanceDynamic

  @JsName("SelectionBarTranslucentMID")
  public open var selectionBarTranslucentMid: MaterialInstanceDynamic

  @JsName("CloseButtonMID")
  public open var closeButtonMid: MaterialInstanceDynamic

  @JsName("CloseButtonTranslucentMID")
  public open var closeButtonTranslucentMid: MaterialInstanceDynamic

  @JsName("DragOperationComponent")
  public open var dragOperationComponent: ViewportDragOperationComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorDockableWindow

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorDockableWindow

    @JsName("C")
    public fun copy(other: UObject): VrEditorDockableWindow

    @JsName("C")
    public fun copy(other: Any): VrEditorDockableWindow
  }
}

public open external class ViewportTransformer(
  outer: UObject,
) : UObject {
  @JsName("ViewportWorldInteraction")
  public open var viewportWorldInteraction: ViewportWorldInteraction

  @JsName("Shutdown")
  public open fun shutdown(): Unit

  @JsName("ShouldCenterTransformGizmoPivot")
  public open fun shouldCenterTransformGizmoPivot(): Boolean

  @JsName("OnStopDragging")
  public open fun onStopDragging(interactor: ViewportInteractor): Unit

  @JsName("OnStartDragging")
  public open fun onStartDragging(interactor: ViewportInteractor): Unit

  @JsName("Init")
  public open fun init(initViewportWorldInteraction: ViewportWorldInteraction): Unit

  @JsName("CanAlignToActors")
  public open fun canAlignToActors(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewportTransformer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewportTransformer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewportTransformer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewportTransformer

    @JsName("C")
    public fun copy(other: UObject): ViewportTransformer

    @JsName("C")
    public fun copy(other: Any): ViewportTransformer
  }
}

public open external class GizmoHandle {
  public open fun clone(): GizmoHandle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GizmoHandle

    @JsName("C")
    public fun copy(other: Any): GizmoHandle
  }
}

public open external class GizmoHandleGroup(
  outer: UObject,
) : SceneComponent {
  @JsName("GizmoMaterial")
  public open var gizmoMaterial: MaterialInterface

  @JsName("TranslucentGizmoMaterial")
  public open var translucentGizmoMaterial: MaterialInterface

  @JsName("Handles")
  public open var handles: Array<GizmoHandle>

  @JsName("OwningTransformGizmoActor")
  public open var owningTransformGizmoActor: BaseTransformGizmo

  @JsName("DragOperationComponent")
  public open var dragOperationComponent: ViewportDragOperationComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoHandleGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoHandleGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoHandleGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoHandleGroup

    @JsName("C")
    public fun copy(other: UObject): GizmoHandleGroup

    @JsName("C")
    public fun copy(other: Any): GizmoHandleGroup
  }
}

public open external class BaseTransformGizmo(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("SceneComponent")
  public open var sceneComponent: SceneComponent

  @JsName("AllHandleGroups")
  public open var allHandleGroups: Array<GizmoHandleGroup>

  @JsName("WorldInteraction")
  public open var worldInteraction: ViewportWorldInteraction

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BaseTransformGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BaseTransformGizmo

    @JsName("C")
    public fun copy(other: UObject): BaseTransformGizmo

    @JsName("C")
    public fun copy(other: Any): BaseTransformGizmo
  }
}

public open external class MouseCursorInteractor(
  outer: UObject,
) : ViewportInteractor {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MouseCursorInteractor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MouseCursorInteractor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MouseCursorInteractor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MouseCursorInteractor

    @JsName("C")
    public fun copy(other: UObject): MouseCursorInteractor

    @JsName("C")
    public fun copy(other: Any): MouseCursorInteractor
  }
}

public open external class ViewportInteractionAssetContainer(
  outer: UObject,
) : DataAsset {
  @JsName("GizmoHandleSelectedSound")
  public open var gizmoHandleSelectedSound: SoundBase

  @JsName("GizmoHandleDropSound")
  public open var gizmoHandleDropSound: SoundBase

  @JsName("SelectionChangeSound")
  public open var selectionChangeSound: SoundBase

  @JsName("SelectionDropSound")
  public open var selectionDropSound: SoundBase

  @JsName("SelectionStartDragSound")
  public open var selectionStartDragSound: SoundBase

  @JsName("GridSnapSound")
  public open var gridSnapSound: SoundBase

  @JsName("ActorSnapSound")
  public open var actorSnapSound: SoundBase

  @JsName("UndoSound")
  public open var undoSound: SoundBase

  @JsName("RedoSound")
  public open var redoSound: SoundBase

  @JsName("GridMesh")
  public open var gridMesh: StaticMesh

  @JsName("TranslationHandleMesh")
  public open var translationHandleMesh: StaticMesh

  @JsName("UniformScaleHandleMesh")
  public open var uniformScaleHandleMesh: StaticMesh

  @JsName("ScaleHandleMesh")
  public open var scaleHandleMesh: StaticMesh

  @JsName("PlaneTranslationHandleMesh")
  public open var planeTranslationHandleMesh: StaticMesh

  @JsName("RotationHandleMesh")
  public open var rotationHandleMesh: StaticMesh

  @JsName("RotationHandleSelectedMesh")
  public open var rotationHandleSelectedMesh: StaticMesh

  @JsName("StartRotationIndicatorMesh")
  public open var startRotationIndicatorMesh: StaticMesh

  @JsName("CurrentRotationIndicatorMesh")
  public open var currentRotationIndicatorMesh: StaticMesh

  @JsName("FreeRotationHandleMesh")
  public open var freeRotationHandleMesh: StaticMesh

  @JsName("GridMaterial")
  public open var gridMaterial: MaterialInterface

  @JsName("TransformGizmoMaterial")
  public open var transformGizmoMaterial: MaterialInterface

  @JsName("TranslucentTransformGizmoMaterial")
  public open var translucentTransformGizmoMaterial: MaterialInterface

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewportInteractionAssetContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewportInteractionAssetContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewportInteractionAssetContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewportInteractionAssetContainer

    @JsName("C")
    public fun copy(other: UObject): ViewportInteractionAssetContainer

    @JsName("C")
    public fun copy(other: Any): ViewportInteractionAssetContainer
  }
}

public open external class ViewportWorldInteraction(
  outer: UObject,
) : EditorWorldExtension {
  @JsName("Interactors")
  public open var interactors: Array<ViewportInteractor>

  @JsName("ViewportTransformer")
  public open var viewportTransformer: ViewportTransformer

  @JsName("TransformGizmoActor")
  public open var transformGizmoActor: BaseTransformGizmo

  @JsName("SnapGridActor")
  public open var snapGridActor: Actor

  @JsName("SnapGridMeshComponent")
  public open var snapGridMeshComponent: StaticMeshComponent

  @JsName("SnapGridMID")
  public open var snapGridMid: MaterialInstanceDynamic

  @JsName("DefaultMouseCursorInteractor")
  public open var defaultMouseCursorInteractor: MouseCursorInteractor

  @JsName("ActorsToExcludeFromHitTest")
  public open var actorsToExcludeFromHitTest: Array<Any>

  @JsName("AssetContainer")
  public open var assetContainer: ViewportInteractionAssetContainer

  @JsName("SetWorldToMetersScale")
  public open fun setWorldToMetersScale(newWorldToMetersScale: Number,
      compensateRoomWorldScale: Boolean): Unit

  @JsName("SetRoomTransformForNextFrame")
  public open fun setRoomTransformForNextFrame(newRoomTransform: Transform): Unit

  @JsName("SetHeadTransform")
  public open fun setHeadTransform(newHeadTransform: Transform): Unit

  @JsName("RemoveInteractor")
  public open fun removeInteractor(interactor: ViewportInteractor): Unit

  @JsName("GetWorldScaleFactor")
  public open fun getWorldScaleFactor(): Number

  @JsName("GetTransformGizmoActor")
  public open fun getTransformGizmoActor(): BaseTransformGizmo

  @JsName("GetRoomTransform")
  public open fun getRoomTransform(): Transform

  @JsName("GetRoomSpaceHeadTransform")
  public open fun getRoomSpaceHeadTransform(): Transform

  @JsName("GetInteractors")
  public open fun getInteractors(): Array<ViewportInteractor>

  @JsName("GetHeadTransform")
  public open fun getHeadTransform(): Transform

  @JsName("AddInteractor")
  public open fun addInteractor(interactor: ViewportInteractor): Unit

  @JsName("AddActorToExcludeFromHitTests")
  public open fun addActorToExcludeFromHitTests(actorToExcludeFromHitTests: Actor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewportWorldInteraction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewportWorldInteraction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewportWorldInteraction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewportWorldInteraction

    @JsName("C")
    public fun copy(other: UObject): ViewportWorldInteraction

    @JsName("C")
    public fun copy(other: Any): ViewportWorldInteraction
  }
}

@JsName("EHitResultGizmoFilterMode")
public external object HitResultGizmoFilterMode {
  public var All: String

  public var NoGizmos: String

  public var GizmosOnly: String

  @JsName("EHitResultGizmoFilterMode_MAX")
  public var Max: String
}

@JsName("EViewportInteractionDraggingMode")
public external object ViewportInteractionDraggingMode {
  public var Nothing: String

  public var TransformablesWithGizmo: String

  public var TransformablesAtLaserImpact: String

  public var AssistingDrag: String

  public var TransformablesFreely: String

  public var World: String

  public var Interactable: String

  public var Material: String

  @JsName("EViewportInteractionDraggingMode_MAX")
  public var Max: String
}

public open external class ViewportActionKeyInput {
  @JsName("ActionType")
  public open var actionType: String

  @JsName("Event")
  public open var event: String

  @JsName("bIsInputCaptured")
  public open var isInputCaptured: Boolean

  public open fun clone(): ViewportActionKeyInput

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ViewportActionKeyInput

    @JsName("C")
    public fun copy(other: Any): ViewportActionKeyInput
  }
}

@JsName("T$603")
public external interface OutWasHandledProvider {
  @JsName("bOutWasHandled")
  public var outWasHandled: Boolean
}

@JsName("T$604")
public external interface Object604 {
  @JsName("OutHandTransform")
  public var outHandTransform: Transform

  @JsName("OutForwardVector")
  public var outForwardVector: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$605")
public external interface Object605 {
  @JsName("LaserPointerStart")
  public var laserPointerStart: Vector

  @JsName("LaserPointerEnd")
  public var laserPointerEnd: Vector

  @JsName("$")
  public var value: Boolean
}

public open external class ViewportInteractor(
  outer: UObject,
) : UObject {
  @JsName("KeyToActionMap")
  public open var keyToActionMap: Any

  @JsName("WorldInteraction")
  public open var worldInteraction: ViewportWorldInteraction

  @JsName("OtherInteractor")
  public open var otherInteractor: ViewportInteractor

  @JsName("Tick")
  public open fun tick(deltaTime: Number): Unit

  @JsName("Shutdown")
  public open fun shutdown(): Unit

  @JsName("SetHitResultGizmoFilterMode")
  public open fun setHitResultGizmoFilterMode(newFilter: String): Unit

  @JsName("SetDraggingMode")
  public open fun setDraggingMode(newDraggingMode: String): Unit

  @JsName("SetCanCarry")
  public open fun setCanCarry(inCanCarry: Boolean): Unit

  @JsName("IsHoveringOverGizmo")
  public open fun isHoveringOverGizmo(): Boolean

  @JsName("HandleInputKey_BP")
  public open fun handleInputKeyBp(
    action: ViewportActionKeyInput,
    key: Key,
    event: String,
    outWasHandled: Boolean,
  ): OutWasHandledProvider

  @JsName("HandleInputAxis_BP")
  public open fun handleInputAxisBp(
    action: ViewportActionKeyInput,
    key: Key,
    delta: Number,
    deltaTime: Number,
    outWasHandled: Boolean,
  ): OutWasHandledProvider

  @JsName("GetWorldInteraction")
  public open fun getWorldInteraction(): ViewportWorldInteraction

  @JsName("GetTransformAndForwardVector")
  public open fun getTransformAndForwardVector(outHandTransform: Transform,
      outForwardVector: Vector): Object604

  @JsName("GetTransform")
  public open fun getTransform(): Transform

  @JsName("GetRoomSpaceTransform")
  public open fun getRoomSpaceTransform(): Transform

  @JsName("GetOtherInteractor")
  public open fun getOtherInteractor(): ViewportInteractor

  @JsName("GetLastTransform")
  public open fun getLastTransform(): Transform

  @JsName("GetLastRoomSpaceTransform")
  public open fun getLastRoomSpaceTransform(): Transform

  @JsName("GetLaserPointer")
  public open fun getLaserPointer(
    laserPointerStart: Vector,
    laserPointerEnd: Vector,
    evenIfBlocked: Boolean,
    laserLengthOverride: Number,
  ): Object605

  @JsName("GetHoverLocation")
  public open fun getHoverLocation(): Vector

  @JsName("GetHitResultGizmoFilterMode")
  public open fun getHitResultGizmoFilterMode(): String

  @JsName("GetDraggingMode")
  public open fun getDraggingMode(): String

  @JsName("CanCarry")
  public open fun canCarry(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewportInteractor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewportInteractor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewportInteractor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewportInteractor

    @JsName("C")
    public fun copy(other: UObject): ViewportInteractor

    @JsName("C")
    public fun copy(other: Any): ViewportInteractor
  }
}

@JsName("T$606")
public external interface Object606 {
  @JsName("bValueFound")
  public var valueFound: Boolean

  @JsName("$")
  public var value: Number
}

@JsName("T$607")
public external interface Object607 {
  @JsName("bValueFound")
  public var valueFound: Boolean

  @JsName("$")
  public var value: Vector
}

public open external class MotionControllerComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("PlayerIndex")
  public open var playerIndex: Number

  @JsName("Hand")
  public open var hand: String

  @JsName("MotionSource")
  public open var motionSource: String

  @JsName("bDisableLowLatencyUpdate")
  public open var disableLowLatencyUpdate: Boolean

  @JsName("CurrentTrackingStatus")
  public open var currentTrackingStatus: String

  @JsName("bDisplayDeviceModel")
  public open var displayDeviceModel: Boolean

  @JsName("DisplayModelSource")
  public open var displayModelSource: String

  @JsName("CustomDisplayMesh")
  public open var customDisplayMesh: StaticMesh

  @JsName("DisplayMeshMaterialOverrides")
  public open var displayMeshMaterialOverrides: Array<MaterialInterface>

  @JsName("DisplayComponent")
  public open var displayComponent: PrimitiveComponent

  @JsName("SetTrackingSource")
  public open fun setTrackingSource(newSource: String): Unit

  @JsName("SetTrackingMotionSource")
  public open fun setTrackingMotionSource(newSource: String): Unit

  @JsName("SetShowDeviceModel")
  public open fun setShowDeviceModel(showControllerModel: Boolean): Unit

  @JsName("SetDisplayModelSource")
  public open fun setDisplayModelSource(newDisplayModelSource: String): Unit

  @JsName("SetCustomDisplayMesh")
  public open fun setCustomDisplayMesh(newDisplayMesh: StaticMesh): Unit

  @JsName("SetAssociatedPlayerIndex")
  public open fun setAssociatedPlayerIndex(newPlayer: Number): Unit

  @JsName("OnMotionControllerUpdated")
  public open fun onMotionControllerUpdated(): Unit

  @JsName("IsTracked")
  public open fun isTracked(): Boolean

  @JsName("GetTrackingSource")
  public open fun getTrackingSource(): String

  @JsName("GetParameterValue")
  public open fun getParameterValue(inName: String, valueFound: Boolean): Object606

  @JsName("GetHandJointPosition")
  public open fun getHandJointPosition(jointIndex: Number, valueFound: Boolean): Object607

  @JsName("DisableMotionTrackingForComponent")
  public open fun disableMotionTrackingForComponent(): Unit

  @JsName("EnableMotionTrackingForComponent")
  public open fun enableMotionTrackingForComponent(): Boolean

  @JsName("IsMotionTrackingEnabledForComponent")
  public open fun isMotionTrackingEnabledForComponent(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MotionControllerComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MotionControllerComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MotionControllerComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MotionControllerComponent

    @JsName("C")
    public fun copy(other: UObject): MotionControllerComponent

    @JsName("C")
    public fun copy(other: Any): MotionControllerComponent

    @JsName("DisableMotionTrackingForComponent")
    public
        fun disableMotionTrackingForComponent(motionControllerComponent: MotionControllerComponent):
        Unit

    @JsName("EnableMotionTrackingForComponent")
    public
        fun enableMotionTrackingForComponent(motionControllerComponent: MotionControllerComponent):
        Boolean

    @JsName("IsMotionTrackingEnabledForComponent")
    public
        fun isMotionTrackingEnabledForComponent(motionControllerComponent: MotionControllerComponent):
        Boolean
  }
}

public open external class InterpCurvePointQuat {
  @JsName("InVal")
  public open var inVal: Number

  @JsName("OutVal")
  public open var outVal: Quat

  @JsName("ArriveTangent")
  public open var arriveTangent: Quat

  @JsName("LeaveTangent")
  public open var leaveTangent: Quat

  @JsName("InterpMode")
  public open var interpMode: String

  public open fun clone(): InterpCurvePointQuat

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurvePointQuat

    @JsName("C")
    public fun copy(other: Any): InterpCurvePointQuat
  }
}

public open external class InterpCurveQuat {
  @JsName("Points")
  public open var points: Array<InterpCurvePointQuat>

  @JsName("bIsLooped")
  public open var isLooped: Boolean

  @JsName("LoopKeyOffset")
  public open var loopKeyOffset: Number

  public open fun clone(): InterpCurveQuat

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurveQuat

    @JsName("C")
    public fun copy(other: Any): InterpCurveQuat
  }
}

public open external class InterpCurvePointFloat {
  @JsName("InVal")
  public open var inVal: Number

  @JsName("OutVal")
  public open var outVal: Number

  @JsName("ArriveTangent")
  public open var arriveTangent: Number

  @JsName("LeaveTangent")
  public open var leaveTangent: Number

  @JsName("InterpMode")
  public open var interpMode: String

  public open fun clone(): InterpCurvePointFloat

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurvePointFloat

    @JsName("C")
    public fun copy(other: Any): InterpCurvePointFloat
  }
}

public open external class InterpCurveFloat {
  @JsName("Points")
  public open var points: Array<InterpCurvePointFloat>

  @JsName("bIsLooped")
  public open var isLooped: Boolean

  @JsName("LoopKeyOffset")
  public open var loopKeyOffset: Number

  public open fun clone(): InterpCurveFloat

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpCurveFloat

    @JsName("C")
    public fun copy(other: Any): InterpCurveFloat
  }
}

public open external class SplineMetadata(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplineMetadata

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplineMetadata

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplineMetadata

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplineMetadata

    @JsName("C")
    public fun copy(other: UObject): SplineMetadata

    @JsName("C")
    public fun copy(other: Any): SplineMetadata
  }
}

public open external class SplineCurves {
  public open var position: InterpCurveVector

  @JsName("Rotation")
  public open var rotation: InterpCurveQuat

  @JsName("Scale")
  public open var scale: InterpCurveVector

  @JsName("ReparamTable")
  public open var reparamTable: InterpCurveFloat

  @JsName("MetaData")
  public open var metaData: SplineMetadata

  @JsName("Version")
  public open var version: Any

  public open fun clone(): SplineCurves

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SplineCurves

    @JsName("C")
    public fun copy(other: Any): SplineCurves
  }
}

@JsName("ESplineCoordinateSpace")
public external object SplineCoordinateSpace {
  public var Local: String

  public var World: String

  @JsName("ESplineCoordinateSpace_MAX")
  public var Max: String
}

@JsName("ESplinePointType")
public external object SplinePointType {
  public var Linear: String

  public var Curve: String

  public var Constant: String

  public var CurveClamped: String

  public var CurveCustomTangent: String

  @JsName("ESplinePointType_MAX")
  public var Max: String
}

public open external class SplinePoint {
  @JsName("InputKey")
  public open var inputKey: Number

  public open var position: Vector

  @JsName("ArriveTangent")
  public open var arriveTangent: Vector

  @JsName("LeaveTangent")
  public open var leaveTangent: Vector

  @JsName("Rotation")
  public open var rotation: Rotator

  @JsName("Scale")
  public open var scale: Vector

  @JsName("Type")
  public open var type: String

  public open fun clone(): SplinePoint

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SplinePoint

    @JsName("C")
    public fun copy(other: Any): SplinePoint
  }
}

@JsName("T$608")
public external interface Object608 {
  @JsName("Location")
  public var location: Vector

  @JsName("Tangent")
  public var tangent: Vector
}

@JsName("T$609")
public external interface Object609 {
  @JsName("LocalLocation")
  public var localLocation: Vector

  @JsName("LocalTangent")
  public var localTangent: Vector
}

@JsName("T$610")
public external interface Object610 {
  @JsName("OutPoints")
  public var outPoints: Array<Vector>

  @JsName("$")
  public var value: Boolean
}

public open external class SplineComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("SplineCurves")
  public open var splineCurves: SplineCurves

  @JsName("SplineInfo")
  public open var splineInfo: InterpCurveVector

  @JsName("SplineRotInfo")
  public open var splineRotInfo: InterpCurveQuat

  @JsName("SplineScaleInfo")
  public open var splineScaleInfo: InterpCurveVector

  @JsName("SplineReparamTable")
  public open var splineReparamTable: InterpCurveFloat

  @JsName("bAllowSplineEditingPerInstance")
  public open var allowSplineEditingPerInstance: Boolean

  @JsName("ReparamStepsPerSegment")
  public open var reparamStepsPerSegment: Number

  @JsName("Duration")
  public open var duration: Number

  @JsName("bStationaryEndpoints")
  public open var stationaryEndpoints: Boolean

  @JsName("bSplineHasBeenEdited")
  public open var splineHasBeenEdited: Boolean

  @JsName("bModifiedByConstructionScript")
  public open var modifiedByConstructionScript: Boolean

  @JsName("bInputSplinePointsToConstructionScript")
  public open var inputSplinePointsToConstructionScript: Boolean

  @JsName("bDrawDebug")
  public open var drawDebug: Boolean

  @JsName("bClosedLoop")
  public open var closedLoop: Boolean

  @JsName("bLoopPositionOverride")
  public open var loopPositionOverride: Boolean

  @JsName("LoopPosition")
  public open var loopPosition: Number

  @JsName("DefaultUpVector")
  public open var defaultUpVector: Vector

  @JsName("EditorUnselectedSplineSegmentColor")
  public open var editorUnselectedSplineSegmentColor: LinearColor

  @JsName("EditorSelectedSplineSegmentColor")
  public open var editorSelectedSplineSegmentColor: LinearColor

  @JsName("EditorTangentColor")
  public open var editorTangentColor: LinearColor

  @JsName("bAllowDiscontinuousSpline")
  public open var allowDiscontinuousSpline: Boolean

  @JsName("bShouldVisualizeScale")
  public open var shouldVisualizeScale: Boolean

  @JsName("ScaleVisualizationWidth")
  public open var scaleVisualizationWidth: Number

  @JsName("UpdateSpline")
  public open fun updateSpline(): Unit

  @JsName("SetWorldLocationAtSplinePoint")
  public open fun setWorldLocationAtSplinePoint(pointIndex: Number, inLocation: Vector): Unit

  @JsName("SetUpVectorAtSplinePoint")
  public open fun setUpVectorAtSplinePoint(
    pointIndex: Number,
    inUpVector: Vector,
    coordinateSpace: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetUnselectedSplineSegmentColor")
  public open fun setUnselectedSplineSegmentColor(segmentColor: LinearColor): Unit

  @JsName("SetTangentsAtSplinePoint")
  public open fun setTangentsAtSplinePoint(
    pointIndex: Number,
    inArriveTangent: Vector,
    inLeaveTangent: Vector,
    coordinateSpace: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetTangentColor")
  public open fun setTangentColor(tangentColor: LinearColor): Unit

  @JsName("SetTangentAtSplinePoint")
  public open fun setTangentAtSplinePoint(
    pointIndex: Number,
    inTangent: Vector,
    coordinateSpace: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetSplineWorldPoints")
  public open fun setSplineWorldPoints(points: Array<Vector>): Unit

  @JsName("SetSplinePointType")
  public open fun setSplinePointType(
    pointIndex: Number,
    type: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetSplinePoints")
  public open fun setSplinePoints(
    points: Array<Vector>,
    coordinateSpace: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetSplineLocalPoints")
  public open fun setSplineLocalPoints(points: Array<Vector>): Unit

  @JsName("SetSelectedSplineSegmentColor")
  public open fun setSelectedSplineSegmentColor(segmentColor: LinearColor): Unit

  @JsName("SetScaleAtSplinePoint")
  public open fun setScaleAtSplinePoint(
    pointIndex: Number,
    inScaleVector: Vector,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetRotationAtSplinePoint")
  public open fun setRotationAtSplinePoint(
    pointIndex: Number,
    inRotation: Rotator,
    coordinateSpace: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetLocationAtSplinePoint")
  public open fun setLocationAtSplinePoint(
    pointIndex: Number,
    inLocation: Vector,
    coordinateSpace: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetDrawDebug")
  public open fun setDrawDebug(show: Boolean): Unit

  @JsName("SetDefaultUpVector")
  public open fun setDefaultUpVector(upVector: Vector, coordinateSpace: String): Unit

  @JsName("SetClosedLoopAtPosition")
  public open fun setClosedLoopAtPosition(
    inClosedLoop: Boolean,
    key: Number,
    updateSpline: Boolean,
  ): Unit

  @JsName("SetClosedLoop")
  public open fun setClosedLoop(inClosedLoop: Boolean, updateSpline: Boolean): Unit

  @JsName("RemoveSplinePoint")
  public open fun removeSplinePoint(index: Number, updateSpline: Boolean): Unit

  @JsName("IsClosedLoop")
  public open fun isClosedLoop(): Boolean

  @JsName("GetWorldTangentAtDistanceAlongSpline")
  public open fun getWorldTangentAtDistanceAlongSpline(distance: Number): Vector

  @JsName("GetWorldRotationAtTime")
  public open fun getWorldRotationAtTime(time: Number, useConstantVelocity: Boolean): Rotator

  @JsName("GetWorldRotationAtDistanceAlongSpline")
  public open fun getWorldRotationAtDistanceAlongSpline(distance: Number): Rotator

  @JsName("GetWorldLocationAtTime")
  public open fun getWorldLocationAtTime(time: Number, useConstantVelocity: Boolean): Vector

  @JsName("GetWorldLocationAtSplinePoint")
  public open fun getWorldLocationAtSplinePoint(pointIndex: Number): Vector

  @JsName("GetWorldLocationAtDistanceAlongSpline")
  public open fun getWorldLocationAtDistanceAlongSpline(distance: Number): Vector

  @JsName("GetWorldDirectionAtTime")
  public open fun getWorldDirectionAtTime(time: Number, useConstantVelocity: Boolean): Vector

  @JsName("GetWorldDirectionAtDistanceAlongSpline")
  public open fun getWorldDirectionAtDistanceAlongSpline(distance: Number): Vector

  @JsName("GetVectorPropertyAtSplinePoint")
  public open fun getVectorPropertyAtSplinePoint(index: Number, propertyName: String): Vector

  @JsName("GetVectorPropertyAtSplineInputKey")
  public open fun getVectorPropertyAtSplineInputKey(inKey: Number, propertyName: String): Vector

  @JsName("GetUpVectorAtTime")
  public open fun getUpVectorAtTime(
    time: Number,
    coordinateSpace: String,
    useConstantVelocity: Boolean,
  ): Vector

  @JsName("GetUpVectorAtSplinePoint")
  public open fun getUpVectorAtSplinePoint(pointIndex: Number, coordinateSpace: String): Vector

  @JsName("GetUpVectorAtSplineInputKey")
  public open fun getUpVectorAtSplineInputKey(inKey: Number, coordinateSpace: String): Vector

  @JsName("GetUpVectorAtDistanceAlongSpline")
  public open fun getUpVectorAtDistanceAlongSpline(distance: Number, coordinateSpace: String):
      Vector

  @JsName("GetTransformAtTime")
  public open fun getTransformAtTime(
    time: Number,
    coordinateSpace: String,
    useConstantVelocity: Boolean,
    useScale: Boolean,
  ): Transform

  @JsName("GetTransformAtSplinePoint")
  public open fun getTransformAtSplinePoint(
    pointIndex: Number,
    coordinateSpace: String,
    useScale: Boolean,
  ): Transform

  @JsName("GetTransformAtSplineInputKey")
  public open fun getTransformAtSplineInputKey(
    inKey: Number,
    coordinateSpace: String,
    useScale: Boolean,
  ): Transform

  @JsName("GetTransformAtDistanceAlongSpline")
  public open fun getTransformAtDistanceAlongSpline(
    distance: Number,
    coordinateSpace: String,
    useScale: Boolean,
  ): Transform

  @JsName("GetTangentAtTime")
  public open fun getTangentAtTime(
    time: Number,
    coordinateSpace: String,
    useConstantVelocity: Boolean,
  ): Vector

  @JsName("GetTangentAtSplinePoint")
  public open fun getTangentAtSplinePoint(pointIndex: Number, coordinateSpace: String): Vector

  @JsName("GetTangentAtSplineInputKey")
  public open fun getTangentAtSplineInputKey(inKey: Number, coordinateSpace: String): Vector

  @JsName("GetTangentAtDistanceAlongSpline")
  public open fun getTangentAtDistanceAlongSpline(distance: Number, coordinateSpace: String): Vector

  @JsName("GetSplinePointType")
  public open fun getSplinePointType(pointIndex: Number): String

  @JsName("GetSplineLength")
  public open fun getSplineLength(): Number

  @JsName("GetScaleAtTime")
  public open fun getScaleAtTime(time: Number, useConstantVelocity: Boolean): Vector

  @JsName("GetScaleAtSplinePoint")
  public open fun getScaleAtSplinePoint(pointIndex: Number): Vector

  @JsName("GetScaleAtSplineInputKey")
  public open fun getScaleAtSplineInputKey(inKey: Number): Vector

  @JsName("GetScaleAtDistanceAlongSpline")
  public open fun getScaleAtDistanceAlongSpline(distance: Number): Vector

  @JsName("GetRotationAtTime")
  public open fun getRotationAtTime(
    time: Number,
    coordinateSpace: String,
    useConstantVelocity: Boolean,
  ): Rotator

  @JsName("GetRotationAtSplinePoint")
  public open fun getRotationAtSplinePoint(pointIndex: Number, coordinateSpace: String): Rotator

  @JsName("GetRotationAtSplineInputKey")
  public open fun getRotationAtSplineInputKey(inKey: Number, coordinateSpace: String): Rotator

  @JsName("GetRotationAtDistanceAlongSpline")
  public open fun getRotationAtDistanceAlongSpline(distance: Number, coordinateSpace: String):
      Rotator

  @JsName("GetRollAtTime")
  public open fun getRollAtTime(
    time: Number,
    coordinateSpace: String,
    useConstantVelocity: Boolean,
  ): Number

  @JsName("GetRollAtSplinePoint")
  public open fun getRollAtSplinePoint(pointIndex: Number, coordinateSpace: String): Number

  @JsName("GetRollAtSplineInputKey")
  public open fun getRollAtSplineInputKey(inKey: Number, coordinateSpace: String): Number

  @JsName("GetRollAtDistanceAlongSpline")
  public open fun getRollAtDistanceAlongSpline(distance: Number, coordinateSpace: String): Number

  @JsName("GetRightVectorAtTime")
  public open fun getRightVectorAtTime(
    time: Number,
    coordinateSpace: String,
    useConstantVelocity: Boolean,
  ): Vector

  @JsName("GetRightVectorAtSplinePoint")
  public open fun getRightVectorAtSplinePoint(pointIndex: Number, coordinateSpace: String): Vector

  @JsName("GetRightVectorAtSplineInputKey")
  public open fun getRightVectorAtSplineInputKey(inKey: Number, coordinateSpace: String): Vector

  @JsName("GetRightVectorAtDistanceAlongSpline")
  public open fun getRightVectorAtDistanceAlongSpline(distance: Number, coordinateSpace: String):
      Vector

  @JsName("GetNumberOfSplineSegments")
  public open fun getNumberOfSplineSegments(): Number

  @JsName("GetNumberOfSplinePoints")
  public open fun getNumberOfSplinePoints(): Number

  @JsName("GetLocationAtTime")
  public open fun getLocationAtTime(
    time: Number,
    coordinateSpace: String,
    useConstantVelocity: Boolean,
  ): Vector

  @JsName("GetLocationAtSplinePoint")
  public open fun getLocationAtSplinePoint(pointIndex: Number, coordinateSpace: String): Vector

  @JsName("GetLocationAtSplineInputKey")
  public open fun getLocationAtSplineInputKey(inKey: Number, coordinateSpace: String): Vector

  @JsName("GetLocationAtDistanceAlongSpline")
  public open fun getLocationAtDistanceAlongSpline(distance: Number, coordinateSpace: String):
      Vector

  @JsName("GetLocationAndTangentAtSplinePoint")
  public open fun getLocationAndTangentAtSplinePoint(
    pointIndex: Number,
    location: Vector,
    tangent: Vector,
    coordinateSpace: String,
  ): Object608

  @JsName("GetLocalLocationAndTangentAtSplinePoint")
  public open fun getLocalLocationAndTangentAtSplinePoint(
    pointIndex: Number,
    localLocation: Vector,
    localTangent: Vector,
  ): Object609

  @JsName("GetLeaveTangentAtSplinePoint")
  public open fun getLeaveTangentAtSplinePoint(pointIndex: Number, coordinateSpace: String): Vector

  @JsName("GetInputKeyAtDistanceAlongSpline")
  public open fun getInputKeyAtDistanceAlongSpline(distance: Number): Number

  @JsName("GetFloatPropertyAtSplinePoint")
  public open fun getFloatPropertyAtSplinePoint(index: Number, propertyName: String): Number

  @JsName("GetFloatPropertyAtSplineInputKey")
  public open fun getFloatPropertyAtSplineInputKey(inKey: Number, propertyName: String): Number

  @JsName("GetDistanceAlongSplineAtSplinePoint")
  public open fun getDistanceAlongSplineAtSplinePoint(pointIndex: Number): Number

  @JsName("GetDistanceAlongSplineAtSplineInputKey")
  public open fun getDistanceAlongSplineAtSplineInputKey(inKey: Number): Number

  @JsName("GetDirectionAtTime")
  public open fun getDirectionAtTime(
    time: Number,
    coordinateSpace: String,
    useConstantVelocity: Boolean,
  ): Vector

  @JsName("GetDirectionAtSplinePoint")
  public open fun getDirectionAtSplinePoint(pointIndex: Number, coordinateSpace: String): Vector

  @JsName("GetDirectionAtSplineInputKey")
  public open fun getDirectionAtSplineInputKey(inKey: Number, coordinateSpace: String): Vector

  @JsName("GetDirectionAtDistanceAlongSpline")
  public open fun getDirectionAtDistanceAlongSpline(distance: Number, coordinateSpace: String):
      Vector

  @JsName("GetDefaultUpVector")
  public open fun getDefaultUpVector(coordinateSpace: String): Vector

  @JsName("GetArriveTangentAtSplinePoint")
  public open fun getArriveTangentAtSplinePoint(pointIndex: Number, coordinateSpace: String): Vector

  @JsName("FindUpVectorClosestToWorldLocation")
  public open fun findUpVectorClosestToWorldLocation(worldLocation: Vector,
      coordinateSpace: String): Vector

  @JsName("FindTransformClosestToWorldLocation")
  public open fun findTransformClosestToWorldLocation(
    worldLocation: Vector,
    coordinateSpace: String,
    useScale: Boolean,
  ): Transform

  @JsName("FindTangentClosestToWorldLocation")
  public open fun findTangentClosestToWorldLocation(worldLocation: Vector, coordinateSpace: String):
      Vector

  @JsName("FindScaleClosestToWorldLocation")
  public open fun findScaleClosestToWorldLocation(worldLocation: Vector): Vector

  @JsName("FindRotationClosestToWorldLocation")
  public open fun findRotationClosestToWorldLocation(worldLocation: Vector,
      coordinateSpace: String): Rotator

  @JsName("FindRollClosestToWorldLocation")
  public open fun findRollClosestToWorldLocation(worldLocation: Vector, coordinateSpace: String):
      Number

  @JsName("FindRightVectorClosestToWorldLocation")
  public open fun findRightVectorClosestToWorldLocation(worldLocation: Vector,
      coordinateSpace: String): Vector

  @JsName("FindLocationClosestToWorldLocation")
  public open fun findLocationClosestToWorldLocation(worldLocation: Vector,
      coordinateSpace: String): Vector

  @JsName("FindInputKeyClosestToWorldLocation")
  public open fun findInputKeyClosestToWorldLocation(worldLocation: Vector): Number

  @JsName("FindDirectionClosestToWorldLocation")
  public open fun findDirectionClosestToWorldLocation(worldLocation: Vector,
      coordinateSpace: String): Vector

  @JsName("DivideSplineIntoPolylineRecursive")
  public open fun divideSplineIntoPolylineRecursive(
    startDistanceAlongSpline: Number,
    endDistanceAlongSpline: Number,
    coordinateSpace: String,
    maxSquareDistanceFromSpline: Number,
    outPoints: Array<Vector>,
  ): Object610

  @JsName("ConvertSplineToPolyLine")
  public open fun convertSplineToPolyLine(
    coordinateSpace: String,
    maxSquareDistanceFromSpline: Number,
    outPoints: Array<Vector>,
  ): Object610

  @JsName("ConvertSplineSegmentToPolyLine")
  public open fun convertSplineSegmentToPolyLine(
    splinePointStartIndex: Number,
    coordinateSpace: String,
    maxSquareDistanceFromSpline: Number,
    outPoints: Array<Vector>,
  ): Object610

  @JsName("ClearSplinePoints")
  public open fun clearSplinePoints(updateSpline: Boolean): Unit

  @JsName("AddSplineWorldPoint")
  public open fun addSplineWorldPoint(position: Vector): Unit

  @JsName("AddSplinePointAtIndex")
  public open fun addSplinePointAtIndex(
    position: Vector,
    index: Number,
    coordinateSpace: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("AddSplinePoint")
  public open fun addSplinePoint(
    position: Vector,
    coordinateSpace: String,
    updateSpline: Boolean,
  ): Unit

  @JsName("AddSplineLocalPoint")
  public open fun addSplineLocalPoint(position: Vector): Unit

  @JsName("AddPoints")
  public open fun addPoints(points: Array<SplinePoint>, updateSpline: Boolean): Unit

  @JsName("AddPoint")
  public open fun addPoint(point: SplinePoint, updateSpline: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplineComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplineComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplineComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplineComponent

    @JsName("C")
    public fun copy(other: UObject): SplineComponent

    @JsName("C")
    public fun copy(other: Any): SplineComponent
  }
}

public open external class SplineMeshParams {
  @JsName("StartPos")
  public open var startPos: Vector

  @JsName("StartTangent")
  public open var startTangent: Vector

  @JsName("StartScale")
  public open var startScale: Vector2d

  @JsName("StartRoll")
  public open var startRoll: Number

  @JsName("StartOffset")
  public open var startOffset: Vector2d

  @JsName("EndPos")
  public open var endPos: Vector

  @JsName("EndScale")
  public open var endScale: Vector2d

  @JsName("EndTangent")
  public open var endTangent: Vector

  @JsName("EndRoll")
  public open var endRoll: Number

  @JsName("EndOffset")
  public open var endOffset: Vector2d

  public open fun clone(): SplineMeshParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SplineMeshParams

    @JsName("C")
    public fun copy(other: Any): SplineMeshParams
  }
}

@JsName("ESplineMeshAxis")
public external object SplineMeshAxis {
  @JsName("X")
  public var x: String

  @JsName("Y")
  public var y: String

  @JsName("Z")
  public var z: String

  @JsName("ESplineMeshAxis_MAX")
  public var Max: String
}

public open external class SplineMeshComponent(
  outer: UObject,
) : StaticMeshComponent {
  @JsName("SplineParams")
  public open var splineParams: SplineMeshParams

  @JsName("SplineUpDir")
  public open var splineUpDir: Vector

  @JsName("SplineBoundaryMin")
  public open var splineBoundaryMin: Number

  @JsName("CachedMeshBodySetupGuid")
  public open var cachedMeshBodySetupGuid: Guid

  @JsName("BodySetup")
  public open var bodySetup: BodySetup

  @JsName("SplineBoundaryMax")
  public open var splineBoundaryMax: Number

  @JsName("bAllowSplineEditingPerInstance")
  public open var allowSplineEditingPerInstance: Boolean

  @JsName("bSmoothInterpRollScale")
  public open var smoothInterpRollScale: Boolean

  @JsName("bMeshDirty")
  public open var meshDirty: Boolean

  @JsName("ForwardAxis")
  public open var forwardAxis: String

  @JsName("VirtualTextureMainPassMaxDrawDistance")
  public open var virtualTextureMainPassMaxDrawDistance: Number

  @JsName("bSelected")
  public open var selected: Boolean

  @JsName("UpdateMesh")
  public open fun updateMesh(): Unit

  @JsName("SetStartTangent")
  public open fun setStartTangent(startTangent: Vector, updateMesh: Boolean): Unit

  @JsName("SetStartScale")
  public open fun setStartScale(startScale: Vector2d, updateMesh: Boolean): Unit

  @JsName("SetStartRoll")
  public open fun setStartRoll(startRoll: Number, updateMesh: Boolean): Unit

  @JsName("SetStartPosition")
  public open fun setStartPosition(startPos: Vector, updateMesh: Boolean): Unit

  @JsName("SetStartOffset")
  public open fun setStartOffset(startOffset: Vector2d, updateMesh: Boolean): Unit

  @JsName("SetStartAndEnd")
  public open fun setStartAndEnd(
    startPos: Vector,
    startTangent: Vector,
    endPos: Vector,
    endTangent: Vector,
    updateMesh: Boolean,
  ): Unit

  @JsName("SetSplineUpDir")
  public open fun setSplineUpDir(inSplineUpDir: Vector, updateMesh: Boolean): Unit

  @JsName("SetForwardAxis")
  public open fun setForwardAxis(inForwardAxis: String, updateMesh: Boolean): Unit

  @JsName("SetEndTangent")
  public open fun setEndTangent(endTangent: Vector, updateMesh: Boolean): Unit

  @JsName("SetEndScale")
  public open fun setEndScale(endScale: Vector2d, updateMesh: Boolean): Unit

  @JsName("SetEndRoll")
  public open fun setEndRoll(endRoll: Number, updateMesh: Boolean): Unit

  @JsName("SetEndPosition")
  public open fun setEndPosition(endPos: Vector, updateMesh: Boolean): Unit

  @JsName("SetEndOffset")
  public open fun setEndOffset(endOffset: Vector2d, updateMesh: Boolean): Unit

  @JsName("SetBoundaryMin")
  public open fun setBoundaryMin(inBoundaryMin: Number, updateMesh: Boolean): Unit

  @JsName("SetBoundaryMax")
  public open fun setBoundaryMax(inBoundaryMax: Number, updateMesh: Boolean): Unit

  @JsName("GetStartTangent")
  public open fun getStartTangent(): Vector

  @JsName("GetStartScale")
  public open fun getStartScale(): Vector2d

  @JsName("GetStartRoll")
  public open fun getStartRoll(): Number

  @JsName("GetStartPosition")
  public open fun getStartPosition(): Vector

  @JsName("GetStartOffset")
  public open fun getStartOffset(): Vector2d

  @JsName("GetSplineUpDir")
  public open fun getSplineUpDir(): Vector

  @JsName("GetForwardAxis")
  public open fun getForwardAxis(): String

  @JsName("GetEndTangent")
  public open fun getEndTangent(): Vector

  @JsName("GetEndScale")
  public open fun getEndScale(): Vector2d

  @JsName("GetEndRoll")
  public open fun getEndRoll(): Number

  @JsName("GetEndPosition")
  public open fun getEndPosition(): Vector

  @JsName("GetEndOffset")
  public open fun getEndOffset(): Vector2d

  @JsName("GetBoundaryMin")
  public open fun getBoundaryMin(): Number

  @JsName("GetBoundaryMax")
  public open fun getBoundaryMax(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplineMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplineMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplineMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplineMeshComponent

    @JsName("C")
    public fun copy(other: UObject): SplineMeshComponent

    @JsName("C")
    public fun copy(other: Any): SplineMeshComponent
  }
}

@JsName("ECastRayTracedShadow")
public external object CastRayTracedShadow {
  public var Disabled: String

  public var UseProjectSetting: String

  public var Enabled: String

  @JsName("ECastRayTracedShadow_MAX")
  public var Max: String
}

public open external class LightComponentBase(
  outer: UObject,
) : SceneComponent {
  @JsName("LightGuid")
  public open var lightGuid: Guid

  @JsName("Brightness")
  public open var brightness: Number

  @JsName("Intensity")
  public open var intensity: Number

  @JsName("LightColor")
  public open var lightColor: Color

  @JsName("bAffectsWorld")
  public open var affectsWorld: Boolean

  @JsName("CastShadows")
  public open var castShadows: Boolean

  @JsName("CastStaticShadows")
  public open var castStaticShadows: Boolean

  @JsName("CastDynamicShadows")
  public open var castDynamicShadows: Boolean

  @JsName("bAffectTranslucentLighting")
  public open var affectTranslucentLighting: Boolean

  @JsName("bTransmission")
  public open var transmission: Boolean

  @JsName("bCastVolumetricShadow")
  public open var castVolumetricShadow: Boolean

  @JsName("bCastDeepShadow")
  public open var castDeepShadow: Boolean

  @JsName("bCastRaytracedShadow")
  public open var isCastRaytracedShadow: Boolean

  @JsName("CastRaytracedShadow")
  public open var castRaytracedShadow: String

  @JsName("bAffectReflection")
  public open var affectReflection: Boolean

  @JsName("bAffectGlobalIllumination")
  public open var affectGlobalIllumination: Boolean

  @JsName("DeepShadowLayerDistribution")
  public open var deepShadowLayerDistribution: Number

  @JsName("IndirectLightingIntensity")
  public open var indirectLightingIntensity: Number

  @JsName("VolumetricScatteringIntensity")
  public open var volumetricScatteringIntensity: Number

  @JsName("SamplesPerPixel")
  public open var samplesPerPixel: Number

  @JsName("StaticEditorTexture")
  public open var staticEditorTexture: Texture2d

  @JsName("StaticEditorTextureScale")
  public open var staticEditorTextureScale: Number

  @JsName("DynamicEditorTexture")
  public open var dynamicEditorTexture: Texture2d

  @JsName("DynamicEditorTextureScale")
  public open var dynamicEditorTextureScale: Number

  @JsName("SetSamplesPerPixel")
  public open fun setSamplesPerPixel(newValue: Number): Unit

  @JsName("SetCastVolumetricShadow")
  public open fun setCastVolumetricShadow(newValue: Boolean): Unit

  @JsName("SetCastShadows")
  public open fun setCastShadows(newValue: Boolean): Unit

  @JsName("SetCastRaytracedShadows")
  public open fun setCastRaytracedShadows(newValue: String): Unit

  @JsName("SetCastRaytracedShadow")
  public open fun setCastRaytracedShadow(newValue: Boolean): Unit

  @JsName("SetCastDeepShadow")
  public open fun setCastDeepShadow(newValue: Boolean): Unit

  @JsName("SetAffectReflection")
  public open fun setAffectReflection(newValue: Boolean): Unit

  @JsName("SetAffectGlobalIllumination")
  public open fun setAffectGlobalIllumination(newValue: Boolean): Unit

  @JsName("GetLightColor")
  public open fun getLightColor(): LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightComponentBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightComponentBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightComponentBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightComponentBase

    @JsName("C")
    public fun copy(other: UObject): LightComponentBase

    @JsName("C")
    public fun copy(other: Any): LightComponentBase
  }
}

public open external class TextureLightProfile(
  outer: UObject,
) : Texture2d {
  @JsName("Brightness")
  public open var brightness: Number

  @JsName("TextureMultiplier")
  public open var textureMultiplier: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureLightProfile

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureLightProfile

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureLightProfile

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureLightProfile

    @JsName("C")
    public fun copy(other: UObject): TextureLightProfile

    @JsName("C")
    public fun copy(other: Any): TextureLightProfile
  }
}

public open external class LightComponent(
  outer: UObject,
) : LightComponentBase {
  @JsName("Temperature")
  public open var temperature: Number

  @JsName("MaxDrawDistance")
  public open var maxDrawDistance: Number

  @JsName("MaxDistanceFadeRange")
  public open var maxDistanceFadeRange: Number

  @JsName("bUseTemperature")
  public open var useTemperature: Boolean

  @JsName("ShadowMapChannel")
  public open var shadowMapChannel: Number

  @JsName("MinRoughness")
  public open var minRoughness: Number

  @JsName("SpecularScale")
  public open var specularScale: Number

  @JsName("ShadowResolutionScale")
  public open var shadowResolutionScale: Number

  @JsName("ShadowBias")
  public open var shadowBias: Number

  @JsName("ShadowSlopeBias")
  public open var shadowSlopeBias: Number

  @JsName("ShadowSharpen")
  public open var shadowSharpen: Number

  @JsName("ContactShadowLength")
  public open var contactShadowLength: Number

  @JsName("ContactShadowLengthInWS")
  public open var contactShadowLengthInWs: Boolean

  @JsName("InverseSquaredFalloff")
  public open var inverseSquaredFalloff: Boolean

  @JsName("CastTranslucentShadows")
  public open var castTranslucentShadows: Boolean

  @JsName("bCastShadowsFromCinematicObjectsOnly")
  public open var castShadowsFromCinematicObjectsOnly: Boolean

  @JsName("bAffectDynamicIndirectLighting")
  public open var affectDynamicIndirectLighting: Boolean

  @JsName("bForceCachedShadowsForMovablePrimitives")
  public open var forceCachedShadowsForMovablePrimitives: Boolean

  @JsName("LightingChannels")
  public open var lightingChannels: LightingChannels

  @JsName("LightFunctionMaterial")
  public open var lightFunctionMaterial: MaterialInterface

  @JsName("LightFunctionScale")
  public open var lightFunctionScale: Vector

  @JsName("IESTexture")
  public open var iesTexture: TextureLightProfile

  @JsName("bUseIESBrightness")
  public open var useIesBrightness: Boolean

  @JsName("IESBrightnessScale")
  public open var iesBrightnessScale: Number

  @JsName("LightFunctionFadeDistance")
  public open var lightFunctionFadeDistance: Number

  @JsName("DisabledBrightness")
  public open var disabledBrightness: Number

  @JsName("bEnableLightShaftBloom")
  public open var enableLightShaftBloom: Boolean

  @JsName("BloomScale")
  public open var bloomScale: Number

  @JsName("BloomThreshold")
  public open var bloomThreshold: Number

  @JsName("BloomMaxBrightness")
  public open var bloomMaxBrightness: Number

  @JsName("BloomTint")
  public open var bloomTint: Color

  @JsName("bUseRayTracedDistanceFieldShadows")
  public open var useRayTracedDistanceFieldShadows: Boolean

  @JsName("RayStartOffsetDepthScale")
  public open var rayStartOffsetDepthScale: Number

  @JsName("SetVolumetricScatteringIntensity")
  public open fun setVolumetricScatteringIntensity(newIntensity: Number): Unit

  @JsName("SetUseTemperature")
  public open fun setUseTemperature(newValue: Boolean): Unit

  @JsName("SetUseIESBrightness")
  public open fun setUseIesBrightness(newValue: Boolean): Unit

  @JsName("SetTransmission")
  public open fun setTransmission(newValue: Boolean): Unit

  @JsName("SetTemperature")
  public open fun setTemperature(newTemperature: Number): Unit

  @JsName("SetSpecularScale")
  public open fun setSpecularScale(newValue: Number): Unit

  @JsName("SetShadowSlopeBias")
  public open fun setShadowSlopeBias(newValue: Number): Unit

  @JsName("SetShadowBias")
  public open fun setShadowBias(newValue: Number): Unit

  @JsName("SetLightingChannels")
  public open fun setLightingChannels(
    channel0: Boolean,
    channel1: Boolean,
    channel2: Boolean,
  ): Unit

  @JsName("SetLightFunctionScale")
  public open fun setLightFunctionScale(newLightFunctionScale: Vector): Unit

  @JsName("SetLightFunctionMaterial")
  public open fun setLightFunctionMaterial(newLightFunctionMaterial: MaterialInterface): Unit

  @JsName("SetLightFunctionFadeDistance")
  public open fun setLightFunctionFadeDistance(newLightFunctionFadeDistance: Number): Unit

  @JsName("SetLightFunctionDisabledBrightness")
  public open fun setLightFunctionDisabledBrightness(newValue: Number): Unit

  @JsName("SetLightColor")
  public open fun setLightColor(newLightColor: LinearColor, SRGB: Boolean): Unit

  @JsName("SetIntensity")
  public open fun setIntensity(newIntensity: Number): Unit

  @JsName("SetIndirectLightingIntensity")
  public open fun setIndirectLightingIntensity(newIntensity: Number): Unit

  @JsName("SetIESTexture")
  public open fun setIesTexture(newValue: TextureLightProfile): Unit

  @JsName("SetIESBrightnessScale")
  public open fun setIesBrightnessScale(newValue: Number): Unit

  @JsName("SetForceCachedShadowsForMovablePrimitives")
  public open fun setForceCachedShadowsForMovablePrimitives(newValue: Boolean): Unit

  @JsName("SetEnableLightShaftBloom")
  public open fun setEnableLightShaftBloom(newValue: Boolean): Unit

  @JsName("SetBloomTint")
  public open fun setBloomTint(newValue: Color): Unit

  @JsName("SetBloomThreshold")
  public open fun setBloomThreshold(newValue: Number): Unit

  @JsName("SetBloomScale")
  public open fun setBloomScale(newValue: Number): Unit

  @JsName("SetBloomMaxBrightness")
  public open fun setBloomMaxBrightness(newValue: Number): Unit

  @JsName("SetAffectTranslucentLighting")
  public open fun setAffectTranslucentLighting(newValue: Boolean): Unit

  @JsName("SetAffectDynamicIndirectLighting")
  public open fun setAffectDynamicIndirectLighting(newValue: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightComponent

    @JsName("C")
    public fun copy(other: UObject): LightComponent

    @JsName("C")
    public fun copy(other: Any): LightComponent
  }
}

@JsName("ELightUnits")
public external object LightUnits {
  public var Unitless: String

  public var Candelas: String

  public var Lumens: String

  @JsName("ELightUnits_MAX")
  public var Max: String
}

public open external class LightmassLightSettings {
  @JsName("IndirectLightingSaturation")
  public open var indirectLightingSaturation: Number

  @JsName("ShadowExponent")
  public open var shadowExponent: Number

  @JsName("bUseAreaShadowsForStationaryLight")
  public open var useAreaShadowsForStationaryLight: Boolean

  public open fun clone(): LightmassLightSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassLightSettings

    @JsName("C")
    public fun copy(other: Any): LightmassLightSettings
  }
}

public open external class LightmassPointLightSettings : LightmassLightSettings {
  public override fun clone(): LightmassPointLightSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LightmassPointLightSettings

    @JsName("C")
    public fun copy(other: Any): LightmassPointLightSettings
  }
}

public open external class LocalLightComponent(
  outer: UObject,
) : LightComponent {
  @JsName("IntensityUnits")
  public open var intensityUnits: String

  @JsName("Radius")
  public open var radius: Number

  @JsName("AttenuationRadius")
  public open var attenuationRadius: Number

  @JsName("LightmassSettings")
  public open var lightmassSettings: LightmassPointLightSettings

  @JsName("SetIntensityUnits")
  public open fun setIntensityUnits(newIntensityUnits: String): Unit

  @JsName("SetAttenuationRadius")
  public open fun setAttenuationRadius(newRadius: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalLightComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalLightComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalLightComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalLightComponent

    @JsName("GetUnitsConversionFactor")
    public fun getUnitsConversionFactor(
      srcUnits: String,
      targetUnits: String,
      cosHalfConeAngle: Number,
    ): Number

    @JsName("C")
    public fun copy(other: UObject): LocalLightComponent

    @JsName("C")
    public fun copy(other: Any): LocalLightComponent
  }
}

public open external class PointLightComponent(
  outer: UObject,
) : LocalLightComponent {
  @JsName("bUseInverseSquaredFalloff")
  public open var useInverseSquaredFalloff: Boolean

  @JsName("LightFalloffExponent")
  public open var lightFalloffExponent: Number

  @JsName("SourceRadius")
  public open var sourceRadius: Number

  @JsName("SoftSourceRadius")
  public open var softSourceRadius: Number

  @JsName("SourceLength")
  public open var sourceLength: Number

  @JsName("SetSourceRadius")
  public open fun setSourceRadius(newValue: Number): Unit

  @JsName("SetSourceLength")
  public open fun setSourceLength(newValue: Number): Unit

  @JsName("SetSoftSourceRadius")
  public open fun setSoftSourceRadius(newValue: Number): Unit

  @JsName("SetLightFalloffExponent")
  public open fun setLightFalloffExponent(newLightFalloffExponent: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PointLightComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PointLightComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PointLightComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PointLightComponent

    @JsName("C")
    public fun copy(other: UObject): PointLightComponent

    @JsName("C")
    public fun copy(other: Any): PointLightComponent
  }
}

@JsName("EControllerType")
public external object ControllerType {
  public var Laser: String

  public var AssistingLaser: String

  public var UI: String

  public var Navigation: String

  public var Unknown: String

  @JsName("EControllerType_MAX")
  public var Max: String
}

@JsName("VREditorTeleporter")
public open external class VrEditorTeleporter(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("VRMode")
  public open var vrMode: VrEditorMode

  @JsName("TeleportDirectionMeshComponent")
  public open var teleportDirectionMeshComponent: StaticMeshComponent

  @JsName("HMDMeshComponent")
  public open var hmdMeshComponent: StaticMeshComponent

  @JsName("LeftMotionControllerMeshComponent")
  public open var leftMotionControllerMeshComponent: StaticMeshComponent

  @JsName("RightMotionControllerMeshComponent")
  public open var rightMotionControllerMeshComponent: StaticMeshComponent

  @JsName("TeleportMID")
  public open var teleportMid: MaterialInstanceDynamic

  @JsName("InteractorTryingTeleport")
  public open var interactorTryingTeleport: ViewportInteractor

  @JsName("TeleportDone")
  public open fun teleportDone(): Unit

  @JsName("StopAiming")
  public open fun stopAiming(): Unit

  @JsName("StartTeleport")
  public open fun startTeleport(): Unit

  @JsName("StartAiming")
  public open fun startAiming(interactor: ViewportInteractor): Unit

  @JsName("Shutdown")
  public open fun shutdown(): Unit

  @JsName("SetVisibility")
  public open fun setVisibility(visible: Boolean): Unit

  @JsName("SetColor")
  public open fun setColor(color: LinearColor): Unit

  @JsName("IsTeleporting")
  public open fun isTeleporting(): Boolean

  @JsName("IsAiming")
  public open fun isAiming(): Boolean

  @JsName("Init")
  public open fun init(inMode: VrEditorMode): Unit

  @JsName("GetVRMode")
  public open fun getVrMode(): VrEditorMode

  @JsName("GetSlideDelta")
  public open fun getSlideDelta(interactor: VrEditorInteractor, axis: Boolean): Number

  @JsName("GetInteractorTryingTeleport")
  public open fun getInteractorTryingTeleport(): ViewportInteractor

  @JsName("DoTeleport")
  public open fun doTeleport(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorTeleporter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorTeleporter

    @JsName("C")
    public fun copy(other: UObject): VrEditorTeleporter

    @JsName("C")
    public fun copy(other: Any): VrEditorTeleporter
  }
}

@JsName("VREditorInteractor")
public open external class VrEditorInteractor(
  outer: UObject,
) : ViewportInteractor {
  @JsName("bIsUndoRedoSwipeEnabled")
  public open var isUndoRedoSwipeEnabled: Boolean

  @JsName("MotionControllerComponent")
  public open var motionControllerComponent: MotionControllerComponent

  @JsName("HandMeshComponent")
  public open var handMeshComponent: StaticMeshComponent

  @JsName("LaserSplineComponent")
  public open var laserSplineComponent: SplineComponent

  @JsName("LaserSplineMeshComponents")
  public open var laserSplineMeshComponents: Array<SplineMeshComponent>

  @JsName("LaserPointerMID")
  public open var laserPointerMid: MaterialInstanceDynamic

  @JsName("TranslucentLaserPointerMID")
  public open var translucentLaserPointerMid: MaterialInstanceDynamic

  @JsName("HoverMeshComponent")
  public open var hoverMeshComponent: StaticMeshComponent

  @JsName("HoverPointLightComponent")
  public open var hoverPointLightComponent: PointLightComponent

  @JsName("HandMeshMID")
  public open var handMeshMid: MaterialInstanceDynamic

  @JsName("OwningAvatar")
  public open var owningAvatar: Actor

  @JsName("ControllerType")
  public open var controllerType: String

  @JsName("OverrideControllerType")
  public open var overrideControllerType: String

  @JsName("ControllerMotionSource")
  public open var controllerMotionSource: String

  @JsName("VRMode")
  public open var vrMode: VrEditorMode

  @JsName("TryOverrideControllerType")
  public open fun tryOverrideControllerType(inControllerType: String): Boolean

  @JsName("SetupComponent")
  public open fun setupComponent(owningActor: Actor): Unit

  @JsName("SetForceShowLaser")
  public open fun setForceShowLaser(inForceShow: Boolean): Unit

  @JsName("SetForceLaserColor")
  public open fun setForceLaserColor(inColor: LinearColor): Unit

  @JsName("SetControllerType")
  public open fun setControllerType(inControllerType: String): Unit

  @JsName("SetControllerHandSide")
  public open fun setControllerHandSide(inControllerHandSide: String): Unit

  @JsName("ReplaceHandMeshComponent")
  public open fun replaceHandMeshComponent(newMesh: StaticMesh): Unit

  @JsName("IsTouchingTrackpad")
  public open fun isTouchingTrackpad(): Boolean

  @JsName("IsHoveringOverUI")
  public open fun isHoveringOverUi(): Boolean

  @JsName("IsClickingOnUI")
  public open fun isClickingOnUi(): Boolean

  @JsName("Init")
  public open fun init(inVrMode: VrEditorMode): Unit

  @JsName("GetTrackpadPosition")
  public open fun getTrackpadPosition(): Vector2d

  @JsName("GetTeleportActor")
  public open fun getTeleportActor(): VrEditorTeleporter

  @JsName("GetSlideDelta")
  public open fun getSlideDelta(): Number

  @JsName("GetSelectAndMoveTriggerValue")
  public open fun getSelectAndMoveTriggerValue(): Number

  @JsName("GetMotionControllerComponent")
  public open fun getMotionControllerComponent(): MotionControllerComponent

  @JsName("GetLastTrackpadPosition")
  public open fun getLastTrackpadPosition(): Vector2d

  @JsName("GetLaserStart")
  public open fun getLaserStart(): Vector

  @JsName("GetLaserEnd")
  public open fun getLaserEnd(): Vector

  @JsName("GetHMDDeviceType")
  public open fun getHmdDeviceType(): String

  @JsName("GetControllerType")
  public open fun getControllerType(): String

  @JsName("GetControllerSide")
  public open fun getControllerSide(): String

  @JsName("GetControllerHandSide")
  public open fun getControllerHandSide(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorInteractor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorInteractor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorInteractor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorInteractor

    @JsName("C")
    public fun copy(other: UObject): VrEditorInteractor

    @JsName("C")
    public fun copy(other: Any): VrEditorInteractor
  }
}

@JsName("VRButton")
public open external class VrButton {
  @JsName("ButtonWidget")
  public open var buttonWidget: VrEditorWidgetComponent

  public open fun clone(): VrButton

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VrButton

    @JsName("C")
    public fun copy(other: Any): VrButton
  }
}

@JsName("VRRadialMenuHandler")
public open external class VrRadialMenuHandler(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrRadialMenuHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrRadialMenuHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrRadialMenuHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrRadialMenuHandler

    @JsName("C")
    public fun copy(other: UObject): VrRadialMenuHandler

    @JsName("C")
    public fun copy(other: Any): VrRadialMenuHandler
  }
}

@JsName("VREditorUISystem")
public open external class VrEditorUiSystem(
  outer: UObject,
) : UObject {
  @JsName("VRMode")
  public open var vrMode: VrEditorMode

  @JsName("FloatingUIs")
  public open var floatingUIs: Any

  @JsName("PreviewWindowInfo")
  public open var previewWindowInfo: Any

  @JsName("InfoDisplayPanel")
  public open var infoDisplayPanel: VrEditorFloatingUi

  @JsName("QuickRadialMenu")
  public open var quickRadialMenu: VrEditorRadialFloatingUi

  @JsName("DraggingUI")
  public open var draggingUi: VrEditorDockableWindow

  @JsName("ColorPickerUI")
  public open var colorPickerUi: VrEditorDockableWindow

  @JsName("LaserInteractor")
  public open var laserInteractor: VrEditorInteractor

  @JsName("UIInteractor")
  public open var uiInteractor: VrEditorInteractor

  @JsName("VRButtons")
  public open var vrButtons: Array<VrButton>

  @JsName("RadialMenuHandler")
  public open var radialMenuHandler: VrRadialMenuHandler

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorUiSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorUiSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorUiSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorUiSystem

    @JsName("C")
    public fun copy(other: UObject): VrEditorUiSystem

    @JsName("C")
    public fun copy(other: Any): VrEditorUiSystem
  }
}

@JsName("VREditorPlacement")
public open external class VrEditorPlacement(
  outer: UObject,
) : UObject {
  @JsName("VRMode")
  public open var vrMode: VrEditorMode

  @JsName("ViewportWorldInteraction")
  public open var viewportWorldInteraction: ViewportWorldInteraction

  @JsName("FloatingUIAssetDraggedFrom")
  public open var floatingUiAssetDraggedFrom: WidgetComponent

  @JsName("PlacingMaterialOrTextureAsset")
  public open var placingMaterialOrTextureAsset: UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorPlacement

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorPlacement

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorPlacement

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorPlacement

    @JsName("C")
    public fun copy(other: UObject): VrEditorPlacement

    @JsName("C")
    public fun copy(other: Any): VrEditorPlacement
  }
}

@JsName("VREditorMode")
public open external class VrEditorMode(
  outer: UObject,
) : EditorWorldExtension {
  @JsName("AvatarActor")
  public open var avatarActor: VrEditorAvatarActor

  @JsName("UISystem")
  public open var uiSystem: VrEditorUiSystem

  @JsName("TeleportActor")
  public open var teleportActor: VrEditorTeleporter

  @JsName("AutoScalerSystem")
  public open var autoScalerSystem: VrEditorAutoScaler

  @JsName("WorldInteraction")
  public open var worldInteraction: ViewportWorldInteraction

  @JsName("PlacementSystem")
  public open var placementSystem: VrEditorPlacement

  @JsName("Interactors")
  public open var interactors: Array<VrEditorInteractor>

  @JsName("AssetContainer")
  public open var assetContainer: VrEditorAssetContainer

  @JsName("GetWorldScaleFactor")
  public open fun getWorldScaleFactor(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorMode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorMode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorMode

    @JsName("C")
    public fun copy(other: UObject): VrEditorMode

    @JsName("C")
    public fun copy(other: Any): VrEditorMode
  }
}

@JsName("VREditorAutoScaler")
public open external class VrEditorAutoScaler(
  outer: UObject,
) : UObject {
  @JsName("VRMode")
  public open var vrMode: VrEditorMode

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorAutoScaler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorAutoScaler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorAutoScaler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorAutoScaler

    @JsName("C")
    public fun copy(other: UObject): VrEditorAutoScaler

    @JsName("C")
    public fun copy(other: Any): VrEditorAutoScaler
  }
}

@JsName("VREditorBaseUserWidget")
public open external class VrEditorBaseUserWidget(
  outer: UObject,
) : UserWidget {
  @JsName("Owner")
  public open var owner: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorBaseUserWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorBaseUserWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorBaseUserWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorBaseUserWidget

    @JsName("C")
    public fun copy(other: UObject): VrEditorBaseUserWidget

    @JsName("C")
    public fun copy(other: Any): VrEditorBaseUserWidget
  }
}

@JsName("VREditorCameraWidgetComponent")
public open external class VrEditorCameraWidgetComponent(
  outer: UObject,
) : VrEditorWidgetComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrEditorCameraWidgetComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrEditorCameraWidgetComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorCameraWidgetComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorCameraWidgetComponent

    @JsName("C")
    public fun copy(other: UObject): VrEditorCameraWidgetComponent

    @JsName("C")
    public fun copy(other: Any): VrEditorCameraWidgetComponent
  }
}

@JsName("VREditorDockableCameraWindow")
public open external class VrEditorDockableCameraWindow(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : VrEditorDockableWindow {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorDockableCameraWindow

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorDockableCameraWindow

    @JsName("C")
    public fun copy(other: UObject): VrEditorDockableCameraWindow

    @JsName("C")
    public fun copy(other: Any): VrEditorDockableCameraWindow
  }
}

public open external class DockableWindowDragOperation(
  outer: UObject,
) : ViewportDragOperation {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DockableWindowDragOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DockableWindowDragOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DockableWindowDragOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DockableWindowDragOperation

    @JsName("C")
    public fun copy(other: UObject): DockableWindowDragOperation

    @JsName("C")
    public fun copy(other: Any): DockableWindowDragOperation
  }
}

@JsName("VREditorFloatingCameraUI")
public open external class VrEditorFloatingCameraUi(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : VrEditorFloatingUi {
  @JsName("OffsetFromCamera")
  public open var offsetFromCamera: Vector

  @JsName("LinkedActor")
  public open var linkedActor: Any

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrEditorFloatingCameraUi

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrEditorFloatingCameraUi

    @JsName("C")
    public fun copy(other: UObject): VrEditorFloatingCameraUi

    @JsName("C")
    public fun copy(other: Any): VrEditorFloatingCameraUi
  }
}

public open external class FloatingText(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("SceneComponent")
  public open var sceneComponent: SceneComponent

  @JsName("FirstLineComponent")
  public open var firstLineComponent: StaticMeshComponent

  @JsName("JointSphereComponent")
  public open var jointSphereComponent: StaticMeshComponent

  @JsName("SecondLineComponent")
  public open var secondLineComponent: StaticMeshComponent

  @JsName("TextComponent")
  public open var textComponent: TextRenderComponent

  @JsName("MaskedTextMaterial")
  public open var maskedTextMaterial: MaterialInterface

  @JsName("TranslucentTextMaterial")
  public open var translucentTextMaterial: MaterialInterface

  @JsName("LineMaterial")
  public open var lineMaterial: MaterialInterface

  @JsName("LineMaterialMID")
  public open var lineMaterialMid: MaterialInstanceDynamic

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FloatingText

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FloatingText

    @JsName("C")
    public fun copy(other: UObject): FloatingText

    @JsName("C")
    public fun copy(other: Any): FloatingText
  }
}

@JsName("VISettings")
public open external class ViSettings(
  outer: UObject,
) : UObject {
  @JsName("bScaleWorldFromFloor")
  public open var scaleWorldFromFloor: Boolean

  @JsName("bScaleWorldWithDynamicPivot")
  public open var scaleWorldWithDynamicPivot: Boolean

  @JsName("bAllowSimultaneousWorldScalingAndRotation")
  public open var allowSimultaneousWorldScalingAndRotation: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViSettings

    @JsName("C")
    public fun copy(other: UObject): ViSettings

    @JsName("C")
    public fun copy(other: Any): ViSettings
  }
}

@JsName("EInteractorHand")
public external object InteractorHand {
  public var Right: String

  public var Left: String

  @JsName("EInteractorHand_MAX")
  public var Max: String
}

@JsName("VRModeSettings")
public open external class VrModeSettings(
  outer: UObject,
) : ViSettings {
  @JsName("bEnableAutoVREditMode")
  public open var enableAutoVrEditMode: Boolean

  @JsName("bAutokeySequences")
  public open var autokeySequences: Boolean

  @JsName("InteractorHand")
  public open var interactorHand: String

  @JsName("bShowWorldMovementGrid")
  public open var showWorldMovementGrid: Boolean

  @JsName("bShowWorldMovementPostProcess")
  public open var showWorldMovementPostProcess: Boolean

  @JsName("bShowWorldScaleProgressBar")
  public open var showWorldScaleProgressBar: Boolean

  @JsName("UIBrightness")
  public open var uiBrightness: Number

  @JsName("GizmoScale")
  public open var gizmoScale: Number

  @JsName("DoubleClickTime")
  public open var doubleClickTime: Number

  @JsName("TriggerPressedThreshold_Vive")
  public open var triggerPressedThresholdVive: Number

  @JsName("TriggerPressedThreshold_Rift")
  public open var triggerPressedThresholdRift: Number

  @JsName("InteractorClass")
  public open var interactorClass: Class

  @JsName("TeleporterClass")
  public open var teleporterClass: Class

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrModeSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrModeSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrModeSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrModeSettings

    @JsName("C")
    public fun copy(other: UObject): VrModeSettings

    @JsName("C")
    public fun copy(other: Any): VrModeSettings
  }
}

@JsName("EGizmoHandleTypes")
public external object GizmoHandleTypes {
  public var All: String

  public var Translate: String

  public var Rotate: String

  public var Scale: String

  @JsName("EGizmoHandleTypes_MAX")
  public var Max: String
}

@JsName("VRScoutingInteractor")
public open external class VrScoutingInteractor(
  outer: UObject,
) : VrEditorInteractor {
  @JsName("FlyingIndicatorComponent")
  public open var flyingIndicatorComponent: StaticMeshComponent

  @JsName("SetGizmoMode")
  public open fun setGizmoMode(inGizmoMode: String): Unit

  @JsName("GetGizmoMode")
  public open fun getGizmoMode(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrScoutingInteractor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrScoutingInteractor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrScoutingInteractor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrScoutingInteractor

    @JsName("GetSelectedActors")
    public fun getSelectedActors(): Array<Actor>

    @JsName("C")
    public fun copy(other: UObject): VrScoutingInteractor

    @JsName("C")
    public fun copy(other: Any): VrScoutingInteractor
  }
}

public open external class RuntimeVirtualTextureFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RuntimeVirtualTextureFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RuntimeVirtualTextureFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RuntimeVirtualTextureFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RuntimeVirtualTextureFactory

    @JsName("C")
    public fun copy(other: UObject): RuntimeVirtualTextureFactory

    @JsName("C")
    public fun copy(other: Any): RuntimeVirtualTextureFactory
  }
}

public open external class ThumbnailRenderer(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): ThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): ThumbnailRenderer
  }
}

public open external class DefaultSizedThumbnailRenderer(
  outer: UObject,
) : ThumbnailRenderer {
  @JsName("DefaultSizeX")
  public open var defaultSizeX: Number

  @JsName("DefaultSizeY")
  public open var defaultSizeY: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DefaultSizedThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DefaultSizedThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DefaultSizedThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DefaultSizedThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): DefaultSizedThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): DefaultSizedThumbnailRenderer
  }
}

public open external class RuntimeVirtualTextureThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RuntimeVirtualTextureThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RuntimeVirtualTextureThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RuntimeVirtualTextureThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RuntimeVirtualTextureThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): RuntimeVirtualTextureThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): RuntimeVirtualTextureThumbnailRenderer
  }
}

public open external class VirtualTextureBuilderFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VirtualTextureBuilderFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VirtualTextureBuilderFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VirtualTextureBuilderFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VirtualTextureBuilderFactory

    @JsName("C")
    public fun copy(other: UObject): VirtualTextureBuilderFactory

    @JsName("C")
    public fun copy(other: Any): VirtualTextureBuilderFactory
  }
}

public open external class TextureThumbnailRenderer(
  outer: UObject,
) : ThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): TextureThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): TextureThumbnailRenderer
  }
}

public open external class VirtualTextureBuilderThumbnailRenderer(
  outer: UObject,
) : TextureThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VirtualTextureBuilderThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VirtualTextureBuilderThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VirtualTextureBuilderThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VirtualTextureBuilderThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): VirtualTextureBuilderThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): VirtualTextureBuilderThumbnailRenderer
  }
}

public open external class MeshReconstructorBase(
  outer: UObject,
) : UObject {
  @JsName("StopReconstruction")
  public open fun stopReconstruction(): Unit

  @JsName("StartReconstruction")
  public open fun startReconstruction(): Unit

  @JsName("PauseReconstruction")
  public open fun pauseReconstruction(): Unit

  @JsName("IsReconstructionStarted")
  public open fun isReconstructionStarted(): Boolean

  @JsName("IsReconstructionPaused")
  public open fun isReconstructionPaused(): Boolean

  @JsName("DisconnectMRMesh")
  public open fun disconnectMrMesh(): Unit

  @JsName("ConnectMRMesh")
  public open fun connectMrMesh(mesh: MrMeshComponent): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MeshReconstructorBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MeshReconstructorBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MeshReconstructorBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MeshReconstructorBase

    @JsName("C")
    public fun copy(other: UObject): MeshReconstructorBase

    @JsName("C")
    public fun copy(other: Any): MeshReconstructorBase
  }
}

@JsName("EMeshTrackerVertexColorMode")
public external object MeshTrackerVertexColorMode {
  public var None: String

  public var Confidence: String

  public var Block: String

  @JsName("EMeshTrackerVertexColorMode_MAX")
  public var Max: String
}

public open external class MockDataMeshTrackerComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("OnMeshTrackerUpdated")
  public open var onMeshTrackerUpdated: UnrealEngineMulticastDelegate<(
    index: Number,
    Vertices: Array<Vector>,
    Triangles: Array<Number>,
    Normals: Array<Vector>,
    Confidence: Array<Number>,
  ) -> Unit>

  @JsName("ScanWorld")
  public open var scanWorld: Boolean

  @JsName("RequestNormals")
  public open var requestNormals: Boolean

  @JsName("RequestVertexConfidence")
  public open var requestVertexConfidence: Boolean

  @JsName("VertexColorMode")
  public open var vertexColorMode: String

  @JsName("BlockVertexColors")
  public open var blockVertexColors: Array<Color>

  @JsName("VertexColorFromConfidenceZero")
  public open var vertexColorFromConfidenceZero: LinearColor

  @JsName("VertexColorFromConfidenceOne")
  public open var vertexColorFromConfidenceOne: LinearColor

  @JsName("UpdateInterval")
  public open var updateInterval: Number

  @JsName("MRMesh")
  public open var mrMesh: MrMeshComponent

  @JsName("DisconnectMRMesh")
  public open fun disconnectMrMesh(inMrMeshPtr: MrMeshComponent): Unit

  @JsName("ConnectMRMesh")
  public open fun connectMrMesh(inMrMeshPtr: MrMeshComponent): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MockDataMeshTrackerComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MockDataMeshTrackerComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MockDataMeshTrackerComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MockDataMeshTrackerComponent

    @JsName("C")
    public fun copy(other: UObject): MockDataMeshTrackerComponent

    @JsName("C")
    public fun copy(other: Any): MockDataMeshTrackerComponent
  }
}

@JsName("ARComponent")
public open external class ArComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("NativeID")
  public open var nativeId: Guid

  @JsName("bUseDefaultReplication")
  public open var useDefaultReplication: Boolean

  @JsName("DefaultMeshMaterial")
  public open var defaultMeshMaterial: MaterialInterface

  @JsName("DefaultWireframeMeshMaterial")
  public open var defaultWireframeMeshMaterial: MaterialInterface

  @JsName("MRMeshComponent")
  public open var mrMeshComponent: MrMeshComponent

  @JsName("MyTrackedGeometry")
  public open var myTrackedGeometry: ArTrackedGeometry

  @JsName("UpdateVisualization")
  public open fun updateVisualization(): Unit

  @JsName("SetNativeID")
  public open fun setNativeId(nativeId: Guid): Unit

  @JsName("ReceiveRemove")
  public open fun receiveRemove(): Unit

  @JsName("OnRep_Payload")
  public open fun onRepPayload(): Unit

  @JsName("GetMRMesh")
  public open fun getMrMesh(): MrMeshComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArComponent

    @JsName("C")
    public fun copy(other: UObject): ArComponent

    @JsName("C")
    public fun copy(other: Any): ArComponent
  }
}

@JsName("ARActor")
public open external class ArActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("AddARComponent")
  public open fun addArComponent(inComponentClass: UnrealEngineClass, nativeId: Guid): ArComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArActor

    @JsName("C")
    public fun copy(other: UObject): ArActor

    @JsName("C")
    public fun copy(other: Any): ArActor
  }
}

@JsName("EARCaptureType")
public external object ARCaptureType {
  public var Camera: String

  @JsName("QRCode")
  public var QrCode: String

  public var SpatialMapping: String

  public var SceneUnderstanding: String

  public var HandMesh: String

  @JsName("EARCaptureType_MAX")
  public var Max: String
}

@JsName("EARWorldAlignment")
public external object ARWorldAlignment {
  public var Gravity: String

  public var GravityAndHeading: String

  public var Camera: String

  @JsName("EARWorldAlignment_MAX")
  public var Max: String
}

@JsName("EARSessionType")
public external object ARSessionType {
  public var None: String

  public var Orientation: String

  public var World: String

  public var Face: String

  public var Image: String

  public var ObjectScanning: String

  public var PoseTracking: String

  public var GeoTracking: String

  @JsName("EARSessionType_MAX")
  public var Max: String
}

@JsName("EARPlaneDetectionMode")
public external object ARPlaneDetectionMode {
  public var None: String

  public var HorizontalPlaneDetection: String

  public var VerticalPlaneDetection: String

  @JsName("EARPlaneDetectionMode_MAX")
  public var Max: String
}

@JsName("EARLightEstimationMode")
public external object ARLightEstimationMode {
  public var None: String

  public var AmbientLightEstimate: String

  public var DirectionalLightEstimate: String

  @JsName("EARLightEstimationMode_MAX")
  public var Max: String
}

@JsName("EARFrameSyncMode")
public external object ARFrameSyncMode {
  @JsName("SyncTickWithCameraImage")
  public var CameraImage: String

  @JsName("SyncTickWithoutCameraImage")
  public var OutCameraImage: String

  @JsName("EARFrameSyncMode_MAX")
  public var Max: String
}

@JsName("EARCandidateImageOrientation")
public external object ARCandidateImageOrientation {
  public var Landscape: String

  public var Portrait: String

  @JsName("EARCandidateImageOrientation_MAX")
  public var Max: String
}

@JsName("ARCandidateImage")
public open external class ArCandidateImage(
  outer: UObject,
) : DataAsset {
  @JsName("CandidateTexture")
  public open var candidateTexture: Texture2d

  @JsName("FriendlyName")
  public open var friendlyName: String

  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  @JsName("Orientation")
  public open var orientation: String

  @JsName("GetPhysicalWidth")
  public open fun getPhysicalWidth(): Number

  @JsName("GetPhysicalHeight")
  public open fun getPhysicalHeight(): Number

  @JsName("GetOrientation")
  public open fun getOrientation(): String

  @JsName("GetFriendlyName")
  public open fun getFriendlyName(): String

  @JsName("GetCandidateTexture")
  public open fun getCandidateTexture(): Texture2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArCandidateImage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArCandidateImage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArCandidateImage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArCandidateImage

    @JsName("C")
    public fun copy(other: UObject): ArCandidateImage

    @JsName("C")
    public fun copy(other: Any): ArCandidateImage
  }
}

@JsName("EAREnvironmentCaptureProbeType")
public external object AREnvironmentCaptureProbeType {
  public var None: String

  public var Manual: String

  public var Automatic: String

  @JsName("EAREnvironmentCaptureProbeType_MAX")
  public var Max: String
}

@JsName("ARCandidateObject")
public open external class ArCandidateObject(
  outer: UObject,
) : DataAsset {
  @JsName("CandidateObjectData")
  public open var candidateObjectData: Array<Number>

  @JsName("FriendlyName")
  public open var friendlyName: String

  @JsName("BoundingBox")
  public open var boundingBox: Box

  @JsName("SetFriendlyName")
  public open fun setFriendlyName(newName: String): Unit

  @JsName("SetCandidateObjectData")
  public open fun setCandidateObjectData(inCandidateObject: Array<Number>): Unit

  @JsName("SetBoundingBox")
  public open fun setBoundingBox(inBoundingBox: Box): Unit

  @JsName("GetFriendlyName")
  public open fun getFriendlyName(): String

  @JsName("GetCandidateObjectData")
  public open fun getCandidateObjectData(): Array<Number>

  @JsName("GetBoundingBox")
  public open fun getBoundingBox(): Box

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArCandidateObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArCandidateObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArCandidateObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArCandidateObject

    @JsName("C")
    public fun copy(other: UObject): ArCandidateObject

    @JsName("C")
    public fun copy(other: Any): ArCandidateObject
  }
}

@JsName("ARVideoFormat")
public open external class ArVideoFormat {
  public open var FPS: Number

  @JsName("Width")
  public open var width: Number

  @JsName("Height")
  public open var height: Number

  public open fun clone(): ArVideoFormat

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArVideoFormat

    @JsName("C")
    public fun copy(other: Any): ArVideoFormat
  }
}

@JsName("EARFaceTrackingDirection")
public external object ARFaceTrackingDirection {
  @JsName("FaceRelative")
  public var Relative: String

  @JsName("FaceMirrored")
  public var Mirrored: String

  @JsName("EARFaceTrackingDirection_MAX")
  public var Max: String
}

@JsName("EARFaceTrackingUpdate")
public external object ARFaceTrackingUpdate {
  @JsName("CurvesAndGeo")
  public var AndGeo: String

  @JsName("CurvesOnly")
  public var Only: String

  @JsName("EARFaceTrackingUpdate_MAX")
  public var Max: String
}

@JsName("EARSessionTrackingFeature")
public external object ARSessionTrackingFeature {
  public var None: String

  @JsName("PoseDetection2D")
  public var PoseDetection2d: String

  public var PersonSegmentation: String

  public var PersonSegmentationWithDepth: String

  public var SceneDepth: String

  public var SmoothedSceneDepth: String

  @JsName("EARSessionTrackingFeature_MAX")
  public var Max: String
}

@JsName("EARSceneReconstruction")
public external object ARSceneReconstruction {
  public var None: String

  public var MeshOnly: String

  public var MeshWithClassification: String

  @JsName("EARSceneReconstruction_MAX")
  public var Max: String
}

@JsName("ARSessionPayload")
public open external class ArSessionPayload {
  @JsName("ConfigFlags")
  public open var configFlags: Number

  @JsName("DefaultMeshMaterial")
  public open var defaultMeshMaterial: MaterialInterface

  @JsName("DefaultWireframeMeshMaterial")
  public open var defaultWireframeMeshMaterial: MaterialInterface

  public open fun clone(): ArSessionPayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArSessionPayload

    @JsName("C")
    public fun copy(other: Any): ArSessionPayload
  }
}

@JsName("ARPlaneUpdatePayload")
public open external class ArPlaneUpdatePayload {
  @JsName("SessionPayload")
  public open var sessionPayload: ArSessionPayload

  @JsName("WorldTransform")
  public open var worldTransform: Transform

  @JsName("Center")
  public open var center: Vector

  @JsName("Extents")
  public open var extents: Vector

  @JsName("BoundaryVertices")
  public open var boundaryVertices: Array<Vector>

  @JsName("ObjectClassification")
  public open var objectClassification: String

  public open fun clone(): ArPlaneUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArPlaneUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArPlaneUpdatePayload
  }
}

@JsName("EPlaneComponentDebugMode")
public external object PlaneComponentDebugMode {
  public var None: String

  public var ShowNetworkRole: String

  public var ShowClassification: String

  @JsName("EPlaneComponentDebugMode_MAX")
  public var Max: String
}

@JsName("ARPlaneComponent")
public open external class ArPlaneComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArPlaneUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArPlaneUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArPlaneUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArPlaneUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArPlaneComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArPlaneComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArPlaneComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArPlaneComponent

    @JsName("SetPlaneComponentDebugMode")
    public fun setPlaneComponentDebugMode(newDebugMode: String): Unit

    @JsName("SetObjectClassificationDebugColors")
    public fun setObjectClassificationDebugColors(inColors: Any): Unit

    @JsName("GetObjectClassificationDebugColors")
    public fun getObjectClassificationDebugColors(): Any

    @JsName("C")
    public fun copy(other: UObject): ArPlaneComponent

    @JsName("C")
    public fun copy(other: Any): ArPlaneComponent
  }
}

@JsName("ARPointUpdatePayload")
public open external class ArPointUpdatePayload {
  public open fun clone(): ArPointUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArPointUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArPointUpdatePayload
  }
}

@JsName("ARPointComponent")
public open external class ArPointComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArPointUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArPointUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArPointUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArPointUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArPointComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArPointComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArPointComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArPointComponent

    @JsName("C")
    public fun copy(other: UObject): ArPointComponent

    @JsName("C")
    public fun copy(other: Any): ArPointComponent
  }
}

@JsName("EARFaceTransformMixing")
public external object ARFaceTransformMixing {
  public var ComponentOnly: String

  public var ComponentLocationTrackedRotation: String

  public var ComponentWithTracked: String

  public var TrackingOnly: String

  @JsName("EARFaceTransformMixing_MAX")
  public var Max: String
}

@JsName("ARFaceUpdatePayload")
public open external class ArFaceUpdatePayload {
  @JsName("SessionPayload")
  public open var sessionPayload: ArSessionPayload

  @JsName("LeftEyePosition")
  public open var leftEyePosition: Vector

  @JsName("RightEyePosition")
  public open var rightEyePosition: Vector

  @JsName("LookAtTarget")
  public open var lookAtTarget: Vector

  public open fun clone(): ArFaceUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArFaceUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArFaceUpdatePayload
  }
}

@JsName("EFaceComponentDebugMode")
public external object FaceComponentDebugMode {
  public var None: String

  public var ShowEyeVectors: String

  public var ShowFaceMesh: String

  @JsName("EFaceComponentDebugMode_MAX")
  public var Max: String
}

@JsName("ARFaceComponent")
public open external class ArFaceComponent(
  outer: UObject,
) : ArComponent {
  @JsName("TransformSetting")
  public open var transformSetting: String

  @JsName("bUpdateVertexNormal")
  public open var updateVertexNormal: Boolean

  @JsName("bFaceOutOfScreen")
  public open var faceOutOfScreen: Boolean

  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArFaceUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArFaceUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArFaceUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArFaceUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArFaceComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArFaceComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArFaceComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArFaceComponent

    @JsName("SetFaceComponentDebugMode")
    public fun setFaceComponentDebugMode(newDebugMode: String): Unit

    @JsName("C")
    public fun copy(other: UObject): ArFaceComponent

    @JsName("C")
    public fun copy(other: Any): ArFaceComponent
  }
}

@JsName("ARImageUpdatePayload")
public open external class ArImageUpdatePayload {
  @JsName("SessionPayload")
  public open var sessionPayload: ArSessionPayload

  @JsName("WorldTransform")
  public open var worldTransform: Transform

  @JsName("DetectedImage")
  public open var detectedImage: ArCandidateImage

  @JsName("EstimatedSize")
  public open var estimatedSize: Vector2d

  public open fun clone(): ArImageUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArImageUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArImageUpdatePayload
  }
}

@JsName("EImageComponentDebugMode")
public external object ImageComponentDebugMode {
  public var None: String

  public var ShowDetectedImage: String

  @JsName("EImageComponentDebugMode_MAX")
  public var Max: String
}

@JsName("ARImageComponent")
public open external class ArImageComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArImageUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArImageUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArImageUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArImageUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArImageComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArImageComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArImageComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArImageComponent

    @JsName("SetImageComponentDebugMode")
    public fun setImageComponentDebugMode(newDebugMode: String): Unit

    @JsName("C")
    public fun copy(other: UObject): ArImageComponent

    @JsName("C")
    public fun copy(other: Any): ArImageComponent
  }
}

@JsName("ARQRCodeUpdatePayload")
public open external class ArqrCodeUpdatePayload {
  @JsName("SessionPayload")
  public open var sessionPayload: ArSessionPayload

  @JsName("WorldTransform")
  public open var worldTransform: Transform

  @JsName("Extents")
  public open var extents: Vector

  @JsName("QRCode")
  public open var qrCode: String

  public open fun clone(): ArqrCodeUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArqrCodeUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArqrCodeUpdatePayload
  }
}

@JsName("EQRCodeComponentDebugMode")
public external object QRCodeComponentDebugMode {
  public var None: String

  @JsName("ShowQRCode")
  public var ShowQrCode: String

  @JsName("EQRCodeComponentDebugMode_MAX")
  public var Max: String
}

@JsName("ARQRCodeComponent")
public open external class ArqrCodeComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArqrCodeUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArqrCodeUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArqrCodeUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArqrCodeUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArqrCodeComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArqrCodeComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArqrCodeComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArqrCodeComponent

    @JsName("SetQRCodeComponentDebugMode")
    public fun setQrCodeComponentDebugMode(newDebugMode: String): Unit

    @JsName("C")
    public fun copy(other: UObject): ArqrCodeComponent

    @JsName("C")
    public fun copy(other: Any): ArqrCodeComponent
  }
}

@JsName("ARPoseUpdatePayload")
public open external class ArPoseUpdatePayload {
  @JsName("WorldTransform")
  public open var worldTransform: Transform

  @JsName("JointTransforms")
  public open var jointTransforms: Array<Transform>

  public open fun clone(): ArPoseUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArPoseUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArPoseUpdatePayload
  }
}

@JsName("EPoseComponentDebugMode")
public external object PoseComponentDebugMode {
  public var None: String

  public var ShowSkeleton: String

  @JsName("EPoseComponentDebugMode_MAX")
  public var Max: String
}

@JsName("ARPoseComponent")
public open external class ArPoseComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArPoseUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArPoseUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArPoseUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArPoseUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArPoseComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArPoseComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArPoseComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArPoseComponent

    @JsName("SetPoseComponentDebugMode")
    public fun setPoseComponentDebugMode(newDebugMode: String): Unit

    @JsName("C")
    public fun copy(other: UObject): ArPoseComponent

    @JsName("C")
    public fun copy(other: Any): ArPoseComponent
  }
}

@JsName("AREnvironmentProbeUpdatePayload")
public open external class ArEnvironmentProbeUpdatePayload {
  @JsName("WorldTransform")
  public open var worldTransform: Transform

  public open fun clone(): ArEnvironmentProbeUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArEnvironmentProbeUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArEnvironmentProbeUpdatePayload
  }
}

@JsName("AREnvironmentProbeComponent")
public open external class ArEnvironmentProbeComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArEnvironmentProbeUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArEnvironmentProbeUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArEnvironmentProbeUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArEnvironmentProbeUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArEnvironmentProbeComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArEnvironmentProbeComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArEnvironmentProbeComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArEnvironmentProbeComponent

    @JsName("C")
    public fun copy(other: UObject): ArEnvironmentProbeComponent

    @JsName("C")
    public fun copy(other: Any): ArEnvironmentProbeComponent
  }
}

@JsName("ARObjectUpdatePayload")
public open external class ArObjectUpdatePayload {
  @JsName("WorldTransform")
  public open var worldTransform: Transform

  public open fun clone(): ArObjectUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArObjectUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArObjectUpdatePayload
  }
}

@JsName("ARObjectComponent")
public open external class ArObjectComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArObjectUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArObjectUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArObjectUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArObjectUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArObjectComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArObjectComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArObjectComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArObjectComponent

    @JsName("C")
    public fun copy(other: UObject): ArObjectComponent

    @JsName("C")
    public fun copy(other: Any): ArObjectComponent
  }
}

@JsName("ARMeshUpdatePayload")
public open external class ArMeshUpdatePayload {
  @JsName("SessionPayload")
  public open var sessionPayload: ArSessionPayload

  @JsName("WorldTransform")
  public open var worldTransform: Transform

  @JsName("ObjectClassification")
  public open var objectClassification: String

  public open fun clone(): ArMeshUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArMeshUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArMeshUpdatePayload
  }
}

@JsName("ARMeshComponent")
public open external class ArMeshComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArMeshUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArMeshUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArMeshUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArMeshUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArMeshComponent

    @JsName("C")
    public fun copy(other: UObject): ArMeshComponent

    @JsName("C")
    public fun copy(other: Any): ArMeshComponent
  }
}

@JsName("EARAltitudeSource")
public external object ARAltitudeSource {
  public var Precise: String

  public var Coarse: String

  public var UserDefined: String

  public var Unknown: String

  @JsName("EARAltitudeSource_MAX")
  public var Max: String
}

@JsName("ARGeoAnchorUpdatePayload")
public open external class ArGeoAnchorUpdatePayload {
  @JsName("SessionPayload")
  public open var sessionPayload: ArSessionPayload

  @JsName("WorldTransform")
  public open var worldTransform: Transform

  @JsName("Longitude")
  public open var longitude: Number

  @JsName("Latitude")
  public open var latitude: Number

  @JsName("AltitudeMeters")
  public open var altitudeMeters: Number

  @JsName("AltitudeSource")
  public open var altitudeSource: String

  @JsName("AnchorName")
  public open var anchorName: String

  public open fun clone(): ArGeoAnchorUpdatePayload

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArGeoAnchorUpdatePayload

    @JsName("C")
    public fun copy(other: Any): ArGeoAnchorUpdatePayload
  }
}

@JsName("EGeoAnchorComponentDebugMode")
public external object GeoAnchorComponentDebugMode {
  public var None: String

  public var ShowGeoData: String

  @JsName("EGeoAnchorComponentDebugMode_MAX")
  public var Max: String
}

@JsName("ARGeoAnchorComponent")
public open external class ArGeoAnchorComponent(
  outer: UObject,
) : ArComponent {
  @JsName("ReplicatedPayload")
  public open var replicatedPayload: ArGeoAnchorUpdatePayload

  @JsName("ServerUpdatePayload")
  public open fun serverUpdatePayload(newPayload: ArGeoAnchorUpdatePayload): Unit

  @JsName("ReceiveUpdate")
  public open fun receiveUpdate(payload: ArGeoAnchorUpdatePayload): Unit

  @JsName("ReceiveAdd")
  public open fun receiveAdd(payload: ArGeoAnchorUpdatePayload): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArGeoAnchorComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArGeoAnchorComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArGeoAnchorComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArGeoAnchorComponent

    @JsName("SetGeoAnchorComponentDebugMode")
    public fun setGeoAnchorComponentDebugMode(newDebugMode: String): Unit

    @JsName("C")
    public fun copy(other: UObject): ArGeoAnchorComponent

    @JsName("C")
    public fun copy(other: Any): ArGeoAnchorComponent
  }
}

@JsName("ARSessionConfig")
public open external class ArSessionConfig(
  outer: UObject,
) : DataAsset {
  @JsName("bGenerateMeshDataFromTrackedGeometry")
  public open var generateMeshDataFromTrackedGeometry: Boolean

  @JsName("bGenerateCollisionForMeshData")
  public open var generateCollisionForMeshData: Boolean

  @JsName("bGenerateNavMeshForMeshData")
  public open var generateNavMeshForMeshData: Boolean

  @JsName("bUseMeshDataForOcclusion")
  public open var useMeshDataForOcclusion: Boolean

  @JsName("bRenderMeshDataInWireframe")
  public open var renderMeshDataInWireframe: Boolean

  @JsName("bTrackSceneObjects")
  public open var trackSceneObjects: Boolean

  @JsName("bUsePersonSegmentationForOcclusion")
  public open var usePersonSegmentationForOcclusion: Boolean

  @JsName("bUseSceneDepthForOcclusion")
  public open var useSceneDepthForOcclusion: Boolean

  @JsName("bUseAutomaticImageScaleEstimation")
  public open var useAutomaticImageScaleEstimation: Boolean

  @JsName("bUseStandardOnboardingUX")
  public open var useStandardOnboardingUx: Boolean

  @JsName("WorldAlignment")
  public open var worldAlignment: String

  @JsName("SessionType")
  public open var sessionType: String

  @JsName("PlaneDetectionMode")
  public open var planeDetectionMode: String

  @JsName("bHorizontalPlaneDetection")
  public open var horizontalPlaneDetection: Boolean

  @JsName("bVerticalPlaneDetection")
  public open var verticalPlaneDetection: Boolean

  @JsName("bEnableAutoFocus")
  public open var enableAutoFocus: Boolean

  @JsName("LightEstimationMode")
  public open var lightEstimationMode: String

  @JsName("FrameSyncMode")
  public open var frameSyncMode: String

  @JsName("bEnableAutomaticCameraOverlay")
  public open var enableAutomaticCameraOverlay: Boolean

  @JsName("bEnableAutomaticCameraTracking")
  public open var enableAutomaticCameraTracking: Boolean

  @JsName("bResetCameraTracking")
  public open var resetCameraTracking: Boolean

  @JsName("bResetTrackedObjects")
  public open var resetTrackedObjects: Boolean

  @JsName("CandidateImages")
  public open var candidateImages: Array<ArCandidateImage>

  @JsName("MaxNumSimultaneousImagesTracked")
  public open var maxNumSimultaneousImagesTracked: Number

  @JsName("EnvironmentCaptureProbeType")
  public open var environmentCaptureProbeType: String

  @JsName("WorldMapData")
  public open var worldMapData: Array<Number>

  @JsName("CandidateObjects")
  public open var candidateObjects: Array<ArCandidateObject>

  @JsName("DesiredVideoFormat")
  public open var desiredVideoFormat: ArVideoFormat

  @JsName("bUseOptimalVideoFormat")
  public open var useOptimalVideoFormat: Boolean

  @JsName("FaceTrackingDirection")
  public open var faceTrackingDirection: String

  @JsName("FaceTrackingUpdate")
  public open var faceTrackingUpdate: String

  @JsName("MaxNumberOfTrackedFaces")
  public open var maxNumberOfTrackedFaces: Number

  @JsName("SerializedARCandidateImageDatabase")
  public open var serializedArCandidateImageDatabase: Array<Number>

  @JsName("EnabledSessionTrackingFeature")
  public open var enabledSessionTrackingFeature: String

  @JsName("SceneReconstructionMethod")
  public open var sceneReconstructionMethod: String

  @JsName("PlaneComponentClass")
  public open var planeComponentClass: UnrealEngineClass

  @JsName("PointComponentClass")
  public open var pointComponentClass: UnrealEngineClass

  @JsName("FaceComponentClass")
  public open var faceComponentClass: UnrealEngineClass

  @JsName("ImageComponentClass")
  public open var imageComponentClass: UnrealEngineClass

  @JsName("QRCodeComponentClass")
  public open var qrCodeComponentClass: UnrealEngineClass

  @JsName("PoseComponentClass")
  public open var poseComponentClass: UnrealEngineClass

  @JsName("EnvironmentProbeComponentClass")
  public open var environmentProbeComponentClass: UnrealEngineClass

  @JsName("ObjectComponentClass")
  public open var objectComponentClass: UnrealEngineClass

  @JsName("MeshComponentClass")
  public open var meshComponentClass: UnrealEngineClass

  @JsName("GeoAnchorComponentClass")
  public open var geoAnchorComponentClass: UnrealEngineClass

  @JsName("DefaultMeshMaterial")
  public open var defaultMeshMaterial: MaterialInterface

  @JsName("DefaultWireframeMeshMaterial")
  public open var defaultWireframeMeshMaterial: MaterialInterface

  @JsName("ShouldResetTrackedObjects")
  public open fun shouldResetTrackedObjects(): Boolean

  @JsName("ShouldResetCameraTracking")
  public open fun shouldResetCameraTracking(): Boolean

  @JsName("ShouldRenderCameraOverlay")
  public open fun shouldRenderCameraOverlay(): Boolean

  @JsName("ShouldEnableCameraTracking")
  public open fun shouldEnableCameraTracking(): Boolean

  @JsName("ShouldEnableAutoFocus")
  public open fun shouldEnableAutoFocus(): Boolean

  @JsName("SetWorldMapData")
  public open fun setWorldMapData(worldMapData: Array<Number>): Unit

  @JsName("SetSessionTrackingFeatureToEnable")
  public open fun setSessionTrackingFeatureToEnable(inSessionTrackingFeature: String): Unit

  @JsName("SetSceneReconstructionMethod")
  public open fun setSceneReconstructionMethod(inSceneReconstructionMethod: String): Unit

  @JsName("SetResetTrackedObjects")
  public open fun setResetTrackedObjects(newValue: Boolean): Unit

  @JsName("SetResetCameraTracking")
  public open fun setResetCameraTracking(newValue: Boolean): Unit

  @JsName("SetFaceTrackingUpdate")
  public open fun setFaceTrackingUpdate(inUpdate: String): Unit

  @JsName("SetFaceTrackingDirection")
  public open fun setFaceTrackingDirection(inDirection: String): Unit

  @JsName("SetEnableAutoFocus")
  public open fun setEnableAutoFocus(newValue: Boolean): Unit

  @JsName("SetDesiredVideoFormat")
  public open fun setDesiredVideoFormat(newFormat: ArVideoFormat): Unit

  @JsName("SetCandidateObjectList")
  public open fun setCandidateObjectList(inCandidateObjects: Array<ArCandidateObject>): Unit

  @JsName("GetWorldMapData")
  public open fun getWorldMapData(): Array<Number>

  @JsName("GetWorldAlignment")
  public open fun getWorldAlignment(): String

  @JsName("GetSessionType")
  public open fun getSessionType(): String

  @JsName("GetSceneReconstructionMethod")
  public open fun getSceneReconstructionMethod(): String

  @JsName("GetPlaneDetectionMode")
  public open fun getPlaneDetectionMode(): String

  @JsName("GetMaxNumSimultaneousImagesTracked")
  public open fun getMaxNumSimultaneousImagesTracked(): Number

  @JsName("GetLightEstimationMode")
  public open fun getLightEstimationMode(): String

  @JsName("GetFrameSyncMode")
  public open fun getFrameSyncMode(): String

  @JsName("GetFaceTrackingUpdate")
  public open fun getFaceTrackingUpdate(): String

  @JsName("GetFaceTrackingDirection")
  public open fun getFaceTrackingDirection(): String

  @JsName("GetEnvironmentCaptureProbeType")
  public open fun getEnvironmentCaptureProbeType(): String

  @JsName("GetEnabledSessionTrackingFeature")
  public open fun getEnabledSessionTrackingFeature(): String

  @JsName("GetDesiredVideoFormat")
  public open fun getDesiredVideoFormat(): ArVideoFormat

  @JsName("GetCandidateObjectList")
  public open fun getCandidateObjectList(): Array<ArCandidateObject>

  @JsName("GetCandidateImageList")
  public open fun getCandidateImageList(): Array<ArCandidateImage>

  @JsName("AddCandidateObject")
  public open fun addCandidateObject(candidateObject: ArCandidateObject): Unit

  @JsName("AddCandidateImage")
  public open fun addCandidateImage(newCandidateImage: ArCandidateImage): Unit

  @JsName("AddRuntimeCandidateImage")
  public open fun addRuntimeCandidateImage(
    candidateTexture: Texture2d,
    friendlyName: String,
    physicalWidth: Number,
  ): ArCandidateImage

  @JsName("StartARSession")
  public open fun startArSession(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArSessionConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArSessionConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArSessionConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArSessionConfig

    @JsName("C")
    public fun copy(other: UObject): ArSessionConfig

    @JsName("C")
    public fun copy(other: Any): ArSessionConfig

    @JsName("AddRuntimeCandidateImage")
    public fun addRuntimeCandidateImage(
      sessionConfig: ArSessionConfig,
      candidateTexture: Texture2d,
      friendlyName: String,
      physicalWidth: Number,
    ): ArCandidateImage

    @JsName("StartARSession")
    public fun startArSession(sessionConfig: ArSessionConfig): Unit
  }
}

@JsName("EARWorldMappingState")
public external object ARWorldMappingState {
  public var NotAvailable: String

  public var StillMappingNotRelocalizable: String

  public var StillMappingRelocalizable: String

  public var Mapped: String

  @JsName("EARWorldMappingState_MAX")
  public var Max: String
}

@JsName("EARTrackingQualityReason")
public external object ARTrackingQualityReason {
  public var None: String

  public var Initializing: String

  public var Relocalizing: String

  public var ExcessiveMotion: String

  public var InsufficientFeatures: String

  public var InsufficientLight: String

  public var BadState: String

  @JsName("EARTrackingQualityReason_MAX")
  public var Max: String
}

@JsName("EARTrackingQuality")
public external object ARTrackingQuality {
  public var NotTracking: String

  public var OrientationOnly: String

  public var OrientationAndPosition: String

  @JsName("EARTrackingQuality_MAX")
  public var Max: String
}

@JsName("EARTextureType")
public external object ARTextureType {
  public var Unknown: String

  public var CameraImage: String

  public var CameraDepth: String

  public var EnvironmentCapture: String

  public var PersonSegmentationImage: String

  public var PersonSegmentationDepth: String

  public var SceneDepthMap: String

  public var SceneDepthConfidenceMap: String

  @JsName("EARTextureType_MAX")
  public var Max: String
}

@JsName("ARTexture")
public open external class ArTexture(
  outer: UObject,
) : Texture {
  @JsName("TextureType")
  public open var textureType: String

  @JsName("Timestamp")
  public open var timestamp: Number

  @JsName("ExternalTextureGuid")
  public open var externalTextureGuid: Guid

  @JsName("Size")
  public open var size: Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTexture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTexture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTexture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTexture

    @JsName("C")
    public fun copy(other: UObject): ArTexture

    @JsName("C")
    public fun copy(other: Any): ArTexture
  }
}

@JsName("ARLightEstimate")
public open external class ArLightEstimate(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArLightEstimate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArLightEstimate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArLightEstimate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArLightEstimate

    @JsName("C")
    public fun copy(other: UObject): ArLightEstimate

    @JsName("C")
    public fun copy(other: Any): ArLightEstimate
  }
}

@JsName("T$613")
public external interface Object613 {
  @JsName("OutCameraIntrinsics")
  public var outCameraIntrinsics: ArCameraIntrinsics

  @JsName("$")
  public var value: Boolean
}

@JsName("ARCameraIntrinsics")
public open external class ArCameraIntrinsics {
  @JsName("ImageResolution")
  public open var imageResolution: IntPoint

  @JsName("FocalLength")
  public open var focalLength: Vector2d

  @JsName("PrincipalPoint")
  public open var principalPoint: Vector2d

  public open fun clone(): ArCameraIntrinsics

  @JsName("GetCameraIntrinsics")
  public open fun getCameraIntrinsics(): Object613

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArCameraIntrinsics

    @JsName("C")
    public fun copy(other: Any): ArCameraIntrinsics

    @JsName("GetCameraIntrinsics")
    public fun getCameraIntrinsics(outCameraIntrinsics: ArCameraIntrinsics): Object613
  }
}

@JsName("ARTextureCameraImage")
public open external class ArTextureCameraImage(
  outer: UObject,
) : ArTexture {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTextureCameraImage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTextureCameraImage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTextureCameraImage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTextureCameraImage

    @JsName("C")
    public fun copy(other: UObject): ArTextureCameraImage

    @JsName("C")
    public fun copy(other: Any): ArTextureCameraImage
  }
}

@JsName("EARDepthQuality")
public external object ARDepthQuality {
  public var Unkown: String

  public var Low: String

  public var High: String

  @JsName("EARDepthQuality_MAX")
  public var Max: String
}

@JsName("EARDepthAccuracy")
public external object ARDepthAccuracy {
  public var Unkown: String

  public var Approximate: String

  public var Accurate: String

  @JsName("EARDepthAccuracy_MAX")
  public var Max: String
}

@JsName("ARTextureCameraDepth")
public open external class ArTextureCameraDepth(
  outer: UObject,
) : ArTexture {
  @JsName("DepthQuality")
  public open var depthQuality: String

  @JsName("DepthAccuracy")
  public open var depthAccuracy: String

  @JsName("bIsTemporallySmoothed")
  public open var isTemporallySmoothed: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTextureCameraDepth

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTextureCameraDepth

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTextureCameraDepth

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTextureCameraDepth

    @JsName("C")
    public fun copy(other: UObject): ArTextureCameraDepth

    @JsName("C")
    public fun copy(other: Any): ArTextureCameraDepth
  }
}

@JsName("EARSessionStatus")
public external object ARSessionStatusEnum {
  public var NotStarted: String

  public var Running: String

  public var NotSupported: String

  public var FatalError: String

  public var PermissionNotGranted: String

  public var UnsupportedConfiguration: String

  public var Other: String

  @JsName("EARSessionStatus_MAX")
  public var Max: String
}

@JsName("ARSessionStatus")
public open external class ArSessionStatus {
  @JsName("AdditionalInfo")
  public open var additionalInfo: String

  @JsName("Status")
  public open var status: String

  public open fun clone(): ArSessionStatus

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArSessionStatus

    @JsName("C")
    public fun copy(other: Any): ArSessionStatus

    @JsName("GetARSessionStatus")
    public fun getArSessionStatus(): ArSessionStatus
  }
}

@JsName("ARSkeletonDefinition")
public open external class ArSkeletonDefinition {
  @JsName("NumJoints")
  public open var numJoints: Number

  @JsName("JointNames")
  public open var jointNames: Array<String>

  @JsName("ParentIndices")
  public open var parentIndices: Array<Number>

  public open fun clone(): ArSkeletonDefinition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArSkeletonDefinition

    @JsName("C")
    public fun copy(other: Any): ArSkeletonDefinition
  }
}

@JsName("EARJointTransformSpace")
public external object ARJointTransformSpace {
  public var Model: String

  public var ParentJoint: String

  @JsName("EARJointTransformSpace_MAX")
  public var Max: String
}

@JsName("ARPose3D")
public open external class ArPose3d {
  @JsName("SkeletonDefinition")
  public open var skeletonDefinition: ArSkeletonDefinition

  @JsName("JointTransforms")
  public open var jointTransforms: Array<Transform>

  @JsName("IsJointTracked")
  public open var isJointTracked: Array<Boolean>

  @JsName("JointTransformSpace")
  public open var jointTransformSpace: String

  public open fun clone(): ArPose3d

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArPose3d

    @JsName("C")
    public fun copy(other: Any): ArPose3d
  }
}

@JsName("ARTrackedPose")
public open external class ArTrackedPose(
  outer: UObject,
) : ArTrackedGeometry {
  @JsName("TrackedPose")
  public open var trackedPose: ArPose3d

  @JsName("GetTrackedPoseData")
  public open fun getTrackedPoseData(): ArPose3d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTrackedPose

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTrackedPose

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTrackedPose

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTrackedPose

    @JsName("C")
    public fun copy(other: UObject): ArTrackedPose

    @JsName("C")
    public fun copy(other: Any): ArTrackedPose
  }
}

@JsName("ARTrackedPoint")
public open external class ArTrackedPoint(
  outer: UObject,
) : ArTrackedGeometry {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTrackedPoint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTrackedPoint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTrackedPoint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTrackedPoint

    @JsName("C")
    public fun copy(other: UObject): ArTrackedPoint

    @JsName("C")
    public fun copy(other: Any): ArTrackedPoint
  }
}

@JsName("EARPlaneOrientation")
public external object ARPlaneOrientation {
  public var Horizontal: String

  public var Vertical: String

  public var Diagonal: String

  @JsName("EARPlaneOrientation_MAX")
  public var Max: String
}

@JsName("ARPlaneGeometry")
public open external class ArPlaneGeometry(
  outer: UObject,
) : ArTrackedGeometry {
  @JsName("Orientation")
  public open var orientation: String

  @JsName("Center")
  public open var center: Vector

  @JsName("Extent")
  public open var extent: Vector

  @JsName("BoundaryPolygon")
  public open var boundaryPolygon: Array<Vector>

  @JsName("SubsumedBy")
  public open var subsumedBy: ArPlaneGeometry

  @JsName("GetSubsumedBy")
  public open fun getSubsumedBy(): ArPlaneGeometry

  @JsName("GetOrientation")
  public open fun getOrientation(): String

  @JsName("GetExtent")
  public open fun getExtent(): Vector

  @JsName("GetCenter")
  public open fun getCenter(): Vector

  @JsName("GetBoundaryPolygonInLocalSpace")
  public open fun getBoundaryPolygonInLocalSpace(): Array<Vector>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArPlaneGeometry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArPlaneGeometry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArPlaneGeometry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArPlaneGeometry

    @JsName("C")
    public fun copy(other: UObject): ArPlaneGeometry

    @JsName("C")
    public fun copy(other: Any): ArPlaneGeometry
  }
}

@JsName("ARTrackedImage")
public open external class ArTrackedImage(
  outer: UObject,
) : ArTrackedGeometry {
  @JsName("DetectedImage")
  public open var detectedImage: ArCandidateImage

  @JsName("EstimatedSize")
  public open var estimatedSize: Vector2d

  @JsName("GetEstimateSize")
  public open fun getEstimateSize(): Vector2d

  @JsName("GetDetectedImage")
  public open fun getDetectedImage(): ArCandidateImage

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTrackedImage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTrackedImage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTrackedImage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTrackedImage

    @JsName("C")
    public fun copy(other: UObject): ArTrackedImage

    @JsName("C")
    public fun copy(other: Any): ArTrackedImage
  }
}

@JsName("AREnvironmentCaptureProbeTexture")
public open external class ArEnvironmentCaptureProbeTexture(
  outer: UObject,
) : TextureCube {
  @JsName("TextureType")
  public open var textureType: String

  @JsName("Timestamp")
  public open var timestamp: Number

  @JsName("ExternalTextureGuid")
  public open var externalTextureGuid: Guid

  @JsName("Size")
  public open var size: Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArEnvironmentCaptureProbeTexture

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArEnvironmentCaptureProbeTexture

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArEnvironmentCaptureProbeTexture

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArEnvironmentCaptureProbeTexture

    @JsName("C")
    public fun copy(other: UObject): ArEnvironmentCaptureProbeTexture

    @JsName("C")
    public fun copy(other: Any): ArEnvironmentCaptureProbeTexture
  }
}

@JsName("AREnvironmentCaptureProbe")
public open external class ArEnvironmentCaptureProbe(
  outer: UObject,
) : ArTrackedGeometry {
  @JsName("Extent")
  public open var extent: Vector

  @JsName("EnvironmentCaptureTexture")
  public open var environmentCaptureTexture: ArEnvironmentCaptureProbeTexture

  @JsName("GetExtent")
  public open fun getExtent(): Vector

  @JsName("GetEnvironmentCaptureTexture")
  public open fun getEnvironmentCaptureTexture(): ArEnvironmentCaptureProbeTexture

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArEnvironmentCaptureProbe

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArEnvironmentCaptureProbe

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArEnvironmentCaptureProbe

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArEnvironmentCaptureProbe

    @JsName("C")
    public fun copy(other: UObject): ArEnvironmentCaptureProbe

    @JsName("C")
    public fun copy(other: Any): ArEnvironmentCaptureProbe
  }
}

@JsName("ARPose2D")
public open external class ArPose2d {
  @JsName("SkeletonDefinition")
  public open var skeletonDefinition: ArSkeletonDefinition

  @JsName("JointLocations")
  public open var jointLocations: Array<Vector2d>

  @JsName("IsJointTracked")
  public open var isJointTracked: Array<Boolean>

  public open fun clone(): ArPose2d

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ArPose2d

    @JsName("C")
    public fun copy(other: Any): ArPose2d
  }
}

@JsName("T$614")
public external interface ClosestIntersectionProvider {
  @JsName("ClosestIntersection")
  public var closestIntersection: Vector
}

@JsName("ARBlueprintLibrary")
public open external class ArBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArBlueprintLibrary

    @JsName("UnpinComponent")
    public fun unpinComponent(componentToUnpin: SceneComponent): Unit

    @JsName("ToggleARCapture")
    public fun toggleArCapture(onOff: Boolean, captureType: String): Boolean

    @JsName("StopARSession")
    public fun stopArSession(): Unit

    @JsName("StartARSession")
    public fun startArSession(sessionConfig: ArSessionConfig): Unit

    @JsName("SetEnabledXRCamera")
    public fun setEnabledXrCamera(onOff: Boolean): Unit

    @JsName("SetARWorldScale")
    public fun setArWorldScale(inWorldScale: Number): Unit

    @JsName("SetARWorldOriginLocationAndRotation")
    public fun setArWorldOriginLocationAndRotation(
      originLocation: Vector,
      originRotation: Rotator,
      isTransformInWorldSpace: Boolean,
      maintainUpDirection: Boolean,
    ): Unit

    @JsName("SetAlignmentTransform")
    public fun setAlignmentTransform(inAlignmentTransform: Transform): Unit

    @JsName("SaveARPinToLocalStore")
    public fun saveArPinToLocalStore(inSaveName: String, inPin: ArPin): Boolean

    @JsName("ResizeXRCamera")
    public fun resizeXrCamera(inSize: IntPoint): IntPoint

    @JsName("RemovePin")
    public fun removePin(pinToRemove: ArPin): Unit

    @JsName("RemoveARPinFromLocalStore")
    public fun removeArPinFromLocalStore(inSaveName: String): Unit

    @JsName("RemoveAllARPinsFromLocalStore")
    public fun removeAllArPinsFromLocalStore(): Unit

    @JsName("PinComponentToTraceResult")
    public fun pinComponentToTraceResult(
      componentToPin: SceneComponent,
      traceResult: ArTraceResult,
      debugName: String,
    ): ArPin

    @JsName("PinComponentToARPin")
    public fun pinComponentToArPin(componentToPin: SceneComponent, pin: ArPin): Boolean

    @JsName("PinComponent")
    public fun pinComponent(
      componentToPin: SceneComponent,
      pinToWorldTransform: Transform,
      trackedGeometry: ArTrackedGeometry,
      debugName: String,
    ): ArPin

    @JsName("PauseARSession")
    public fun pauseArSession(): Unit

    @JsName("LoadARPinsFromLocalStore")
    public fun loadArPinsFromLocalStore(): Any

    @JsName("LineTraceTrackedObjects3D")
    public fun lineTraceTrackedObjects3d(
      start: Vector,
      end: Vector,
      testFeaturePoints: Boolean,
      testGroundPlane: Boolean,
      testPlaneExtents: Boolean,
      testPlaneBoundaryPolygon: Boolean,
    ): Array<ArTraceResult>

    @JsName("LineTraceTrackedObjects")
    public fun lineTraceTrackedObjects(
      screenCoord: Vector2d,
      testFeaturePoints: Boolean,
      testGroundPlane: Boolean,
      testPlaneExtents: Boolean,
      testPlaneBoundaryPolygon: Boolean,
    ): Array<ArTraceResult>

    @JsName("IsSessionTypeSupported")
    public fun isSessionTypeSupported(sessionType: String): Boolean

    @JsName("IsSessionTrackingFeatureSupported")
    public fun isSessionTrackingFeatureSupported(sessionType: String,
        sessionTrackingFeature: String): Boolean

    @JsName("IsSceneReconstructionSupported")
    public fun isSceneReconstructionSupported(sessionType: String,
        sceneReconstructionMethod: String): Boolean

    @JsName("IsARSupported")
    public fun isArSupported(): Boolean

    @JsName("IsARPinLocalStoreSupported")
    public fun isArPinLocalStoreSupported(): Boolean

    @JsName("IsARPinLocalStoreReady")
    public fun isArPinLocalStoreReady(): Boolean

    @JsName("GetWorldMappingStatus")
    public fun getWorldMappingStatus(): String

    @JsName("GetTrackingQualityReason")
    public fun getTrackingQualityReason(): String

    @JsName("GetTrackingQuality")
    public fun getTrackingQuality(): String

    @JsName("GetSupportedVideoFormats")
    public fun getSupportedVideoFormats(sessionType: String): Array<ArVideoFormat>

    @JsName("GetSessionConfig")
    public fun getSessionConfig(): ArSessionConfig

    @JsName("GetPointCloud")
    public fun getPointCloud(): Array<Vector>

    @JsName("GetPersonSegmentationImage")
    public fun getPersonSegmentationImage(): ArTexture

    @JsName("GetPersonSegmentationDepthImage")
    public fun getPersonSegmentationDepthImage(): ArTexture

    @JsName("GetObjectClassificationAtLocation")
    public fun getObjectClassificationAtLocation(
      inWorldLocation: Vector,
      outClassification: String,
      outClassificationLocation: Vector,
      maxLocationDiff: Number,
    ): Object558

    @JsName("GetNumberOfTrackedFacesSupported")
    public fun getNumberOfTrackedFacesSupported(): Number

    @JsName("GetCurrentLightEstimate")
    public fun getCurrentLightEstimate(): ArLightEstimate

    @JsName("GetCameraIntrinsics")
    public fun getCameraIntrinsics(outCameraIntrinsics: ArCameraIntrinsics): Object613

    @JsName("GetCameraImage")
    public fun getCameraImage(): ArTextureCameraImage

    @JsName("GetCameraDepth")
    public fun getCameraDepth(): ArTextureCameraDepth

    @JsName("GetARWorldScale")
    public fun getArWorldScale(): Number

    @JsName("GetARTexture")
    public fun getArTexture(textureType: String): ArTexture

    @JsName("GetARSessionStatus")
    public fun getArSessionStatus(): ArSessionStatus

    @JsName("GetAllTrackedPoses")
    public fun getAllTrackedPoses(): Array<ArTrackedPose>

    @JsName("GetAllTrackedPoints")
    public fun getAllTrackedPoints(): Array<ArTrackedPoint>

    @JsName("GetAllTrackedPlanes")
    public fun getAllTrackedPlanes(): Array<ArPlaneGeometry>

    @JsName("GetAllTrackedImages")
    public fun getAllTrackedImages(): Array<ArTrackedImage>

    @JsName("GetAllTrackedEnvironmentCaptureProbes")
    public fun getAllTrackedEnvironmentCaptureProbes(): Array<ArEnvironmentCaptureProbe>

    @JsName("GetAllTracked2DPoses")
    public fun getAllTracked2dPoses(): Array<ArPose2d>

    @JsName("GetAllPins")
    public fun getAllPins(): Array<ArPin>

    @JsName("GetAllGeometriesByClass")
    public fun getAllGeometriesByClass(geometryClass: UnrealEngineClass): Array<ArTrackedGeometry>

    @JsName("GetAllGeometries")
    public fun getAllGeometries(): Array<ArTrackedGeometry>

    @JsName("GetAlignmentTransform")
    public fun getAlignmentTransform(): Transform

    @JsName("FindTrackedPointsByName")
    public fun findTrackedPointsByName(pointName: String): Array<ArTrackedPoint>

    @JsName("DebugDrawTrackedGeometry")
    public fun debugDrawTrackedGeometry(
      trackedGeometry: ArTrackedGeometry,
      worldContextObject: UObject,
      color: LinearColor,
      outlineThickness: Number,
      persistForSeconds: Number,
    ): Unit

    @JsName("DebugDrawPin")
    public fun debugDrawPin(
      arPin: ArPin,
      worldContextObject: UObject,
      color: LinearColor,
      scale: Number,
      persistForSeconds: Number,
    ): Unit

    @JsName("CalculateClosestIntersection")
    public fun calculateClosestIntersection(
      startPoints: Array<Vector>,
      endPoints: Array<Vector>,
      closestIntersection: Vector,
    ): ClosestIntersectionProvider

    @JsName("CalculateAlignmentTransform")
    public fun calculateAlignmentTransform(
      transformInFirstCoordinateSystem: Transform,
      transformInSecondCoordinateSystem: Transform,
      alignmentTransform: Transform,
    ): AlignmentTransformProvider

    @JsName("AddTrackedPointWithName")
    public fun addTrackedPointWithName(
      worldTransform: Transform,
      pointName: String,
      deletePointsWithSameName: Boolean,
    ): Boolean

    @JsName("AddRuntimeCandidateImage")
    public fun addRuntimeCandidateImage(
      sessionConfig: ArSessionConfig,
      candidateTexture: Texture2d,
      friendlyName: String,
      physicalWidth: Number,
    ): ArCandidateImage

    @JsName("AddManualEnvironmentCaptureProbe")
    public fun addManualEnvironmentCaptureProbe(location: Vector, extent: Vector): Boolean

    @JsName("C")
    public fun copy(other: UObject): ArBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): ArBlueprintLibrary
  }
}

@JsName("ARTraceResultLibrary")
public open external class ArTraceResultLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTraceResultLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTraceResultLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTraceResultLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTraceResultLibrary

    @JsName("GetTrackedGeometry")
    public fun getTrackedGeometry(traceResult: ArTraceResult): ArTrackedGeometry

    @JsName("GetTraceChannel")
    public fun getTraceChannel(traceResult: ArTraceResult): String

    @JsName("GetLocalTransform")
    public fun getLocalTransform(traceResult: ArTraceResult): Transform

    @JsName("GetLocalToWorldTransform")
    public fun getLocalToWorldTransform(traceResult: ArTraceResult): Transform

    @JsName("GetLocalToTrackingTransform")
    public fun getLocalToTrackingTransform(traceResult: ArTraceResult): Transform

    @JsName("GetDistanceFromCamera")
    public fun getDistanceFromCamera(traceResult: ArTraceResult): Number

    @JsName("C")
    public fun copy(other: UObject): ArTraceResultLibrary

    @JsName("C")
    public fun copy(other: Any): ArTraceResultLibrary
  }
}

public open external class BlueprintAsyncActionBase(
  outer: UObject,
) : UObject {
  @JsName("Activate")
  public open fun activate(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintAsyncActionBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintAsyncActionBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintAsyncActionBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintAsyncActionBase

    @JsName("C")
    public fun copy(other: UObject): BlueprintAsyncActionBase

    @JsName("C")
    public fun copy(other: Any): BlueprintAsyncActionBase
  }
}

@JsName("ARBaseAsyncTaskBlueprintProxy")
public open external class ArBaseAsyncTaskBlueprintProxy(
  outer: UObject,
) : BlueprintAsyncActionBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArBaseAsyncTaskBlueprintProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArBaseAsyncTaskBlueprintProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArBaseAsyncTaskBlueprintProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArBaseAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: UObject): ArBaseAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: Any): ArBaseAsyncTaskBlueprintProxy
  }
}

@JsName("ARSaveWorldAsyncTaskBlueprintProxy")
public open external class ArSaveWorldAsyncTaskBlueprintProxy(
  outer: UObject,
) : ArBaseAsyncTaskBlueprintProxy {
  @JsName("OnSuccess")
  public open var onSuccess: UnrealEngineMulticastDelegate<(SavedWorld: Array<Number>) -> Unit>

  @JsName("OnFailed")
  public open var onFailed: UnrealEngineMulticastDelegate<(SavedWorld: Array<Number>) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArSaveWorldAsyncTaskBlueprintProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArSaveWorldAsyncTaskBlueprintProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArSaveWorldAsyncTaskBlueprintProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArSaveWorldAsyncTaskBlueprintProxy

    @JsName("ARSaveWorld")
    public fun arSaveWorld(worldContextObject: UObject): ArSaveWorldAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: UObject): ArSaveWorldAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: Any): ArSaveWorldAsyncTaskBlueprintProxy
  }
}

@JsName("ARGetCandidateObjectAsyncTaskBlueprintProxy")
public open external class ArGetCandidateObjectAsyncTaskBlueprintProxy(
  outer: UObject,
) : ArBaseAsyncTaskBlueprintProxy {
  @JsName("OnSuccess")
  public open var onSuccess: UnrealEngineMulticastDelegate<(SavedObject: ArCandidateObject) -> Unit>

  @JsName("OnFailed")
  public open var onFailed: UnrealEngineMulticastDelegate<(SavedObject: ArCandidateObject) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArGetCandidateObjectAsyncTaskBlueprintProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        ArGetCandidateObjectAsyncTaskBlueprintProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArGetCandidateObjectAsyncTaskBlueprintProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArGetCandidateObjectAsyncTaskBlueprintProxy

    @JsName("ARGetCandidateObject")
    public fun arGetCandidateObject(
      worldContextObject: UObject,
      location: Vector,
      extent: Vector,
    ): ArGetCandidateObjectAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: UObject): ArGetCandidateObjectAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: Any): ArGetCandidateObjectAsyncTaskBlueprintProxy
  }
}

@JsName("EARServicePermissionRequestResult")
public external object ARServicePermissionRequestResult {
  public var Granted: String

  public var Denied: String

  @JsName("EARServicePermissionRequestResult_MAX")
  public var Max: String
}

@JsName("EARServiceInstallRequestResult")
public external object ARServiceInstallRequestResult {
  public var Installed: String

  public var DeviceNotCompatible: String

  public var UserDeclinedInstallation: String

  public var FatalError: String

  @JsName("EARServiceInstallRequestResult_MAX")
  public var Max: String
}

@JsName("EARServiceAvailability")
public external object ARServiceAvailability {
  public var UnknownError: String

  public var UnknownChecking: String

  public var UnknownTimedOut: String

  public var UnsupportedDeviceNotCapable: String

  public var SupportedNotInstalled: String

  public var SupportedVersionTooOld: String

  public var SupportedInstalled: String

  @JsName("EARServiceAvailability_MAX")
  public var Max: String
}

@JsName("T$615")
public external interface OutPermissionResultProvider {
  @JsName("OutPermissionResult")
  public var outPermissionResult: String
}

@JsName("T$616")
public external interface OutInstallResultProvider {
  @JsName("OutInstallResult")
  public var outInstallResult: String
}

@JsName("T$617")
public external interface OutAvailabilityProvider {
  @JsName("OutAvailability")
  public var outAvailability: String
}

@JsName("ARDependencyHandler")
public open external class ArDependencyHandler(
  outer: UObject,
) : UObject {
  @JsName("StartARSessionLatent")
  public open fun startArSessionLatent(
    worldContextObject: UObject,
    sessionConfig: ArSessionConfig,
    latentInfo: LatentActionInfo,
  ): Unit

  @JsName("RequestARSessionPermission")
  public open fun requestArSessionPermission(
    worldContextObject: UObject,
    sessionConfig: ArSessionConfig,
    latentInfo: LatentActionInfo,
    outPermissionResult: String,
  ): OutPermissionResultProvider

  @JsName("InstallARService")
  public open fun installArService(
    worldContextObject: UObject,
    latentInfo: LatentActionInfo,
    outInstallResult: String,
  ): OutInstallResultProvider

  @JsName("CheckARServiceAvailability")
  public open fun checkArServiceAvailability(
    worldContextObject: UObject,
    latentInfo: LatentActionInfo,
    outAvailability: String,
  ): OutAvailabilityProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArDependencyHandler

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArDependencyHandler

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArDependencyHandler

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArDependencyHandler

    @JsName("GetARDependencyHandler")
    public fun getArDependencyHandler(): ArDependencyHandler

    @JsName("C")
    public fun copy(other: UObject): ArDependencyHandler

    @JsName("C")
    public fun copy(other: Any): ArDependencyHandler
  }
}

@JsName("EARGeoTrackingStateReason")
public external object ARGeoTrackingStateReason {
  public var None: String

  public var NotAvailableAtLocation: String

  public var NeedLocationPermissions: String

  public var DevicePointedTooLow: String

  public var WorldTrackingUnstable: String

  public var WaitingForLocation: String

  public var GeoDataNotLoaded: String

  public var VisualLocalizationFailed: String

  public var WaitingForAvailabilityCheck: String

  @JsName("EARGeoTrackingStateReason_MAX")
  public var Max: String
}

@JsName("EARGeoTrackingState")
public external object ARGeoTrackingState {
  public var Initializing: String

  public var Localized: String

  public var Localizing: String

  public var NotAvailable: String

  @JsName("EARGeoTrackingState_MAX")
  public var Max: String
}

@JsName("EARGeoTrackingAccuracy")
public external object ARGeoTrackingAccuracy {
  public var Undetermined: String

  public var Low: String

  public var Medium: String

  public var High: String

  @JsName("EARGeoTrackingAccuracy_MAX")
  public var Max: String
}

@JsName("ARGeoTrackingSupport")
public open external class ArGeoTrackingSupport(
  outer: UObject,
) : UObject {
  @JsName("GetGeoTrackingStateReason")
  public open fun getGeoTrackingStateReason(): String

  @JsName("GetGeoTrackingState")
  public open fun getGeoTrackingState(): String

  @JsName("GetGeoTrackingAccuracy")
  public open fun getGeoTrackingAccuracy(): String

  @JsName("AddGeoAnchorAtLocationWithAltitude")
  public open fun addGeoAnchorAtLocationWithAltitude(
    longitude: Number,
    latitude: Number,
    altitudeMeters: Number,
    optionalAnchorName: String,
  ): Boolean

  @JsName("AddGeoAnchorAtLocation")
  public open fun addGeoAnchorAtLocation(
    longitude: Number,
    latitude: Number,
    optionalAnchorName: String,
  ): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArGeoTrackingSupport

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArGeoTrackingSupport

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArGeoTrackingSupport

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArGeoTrackingSupport

    @JsName("GetGeoTrackingSupport")
    public fun getGeoTrackingSupport(): ArGeoTrackingSupport

    @JsName("C")
    public fun copy(other: UObject): ArGeoTrackingSupport

    @JsName("C")
    public fun copy(other: Any): ArGeoTrackingSupport
  }
}

public open external class CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy(
  outer: UObject,
) : ArBaseAsyncTaskBlueprintProxy {
  @JsName("OnSuccess")
  public open var onSuccess: UnrealEngineMulticastDelegate<(bIsAvailable: Boolean,
      Error: String) -> Unit>

  @JsName("OnFailed")
  public open var onFailed: UnrealEngineMulticastDelegate<(bIsAvailable: Boolean,
      Error: String) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy

    @JsName("CheckGeoTrackingAvailabilityAtLocation")
    public fun checkGeoTrackingAvailabilityAtLocation(
      worldContextObject: UObject,
      longitude: Number,
      latitude: Number,
    ): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy

    @JsName("CheckGeoTrackingAvailability")
    public fun checkGeoTrackingAvailability(worldContextObject: UObject):
        CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: UObject): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: Any): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy
  }
}

public open external class GetGeoLocationAsyncTaskBlueprintProxy(
  outer: UObject,
) : ArBaseAsyncTaskBlueprintProxy {
  @JsName("OnSuccess")
  public open var onSuccess: UnrealEngineMulticastDelegate<(
    Longitude: Number,
    Latitude: Number,
    Altitude: Number,
    Error: String,
  ) -> Unit>

  @JsName("OnFailed")
  public open var onFailed: UnrealEngineMulticastDelegate<(
    Longitude: Number,
    Latitude: Number,
    Altitude: Number,
    Error: String,
  ) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GetGeoLocationAsyncTaskBlueprintProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GetGeoLocationAsyncTaskBlueprintProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GetGeoLocationAsyncTaskBlueprintProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GetGeoLocationAsyncTaskBlueprintProxy

    @JsName("GetGeoLocationAtWorldPosition")
    public fun getGeoLocationAtWorldPosition(worldContextObject: UObject, worldPosition: Vector):
        GetGeoLocationAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: UObject): GetGeoLocationAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: Any): GetGeoLocationAsyncTaskBlueprintProxy
  }
}

@JsName("ARLifeCycleComponent")
public open external class ArLifeCycleComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("OnARActorSpawnedDelegate")
  public open var onArActorSpawnedDelegate: UnrealEngineMulticastDelegate<(
    ComponentClass: UnrealEngineClass,
    NativeID: Guid,
    SpawnedActor: ArActor,
  ) -> Unit>

  @JsName("OnARActorToBeDestroyedDelegate")
  public open var onArActorToBeDestroyedDelegate:
      UnrealEngineMulticastDelegate<(Actor: ArActor) -> Unit>

  @JsName("ServerSpawnARActor")
  public open fun serverSpawnArActor(componentClass: UnrealEngineClass, nativeId: Guid): Unit

  @JsName("ServerDestroyARActor")
  public open fun serverDestroyArActor(actor: ArActor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArLifeCycleComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArLifeCycleComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArLifeCycleComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArLifeCycleComponent

    @JsName("C")
    public fun copy(other: UObject): ArLifeCycleComponent

    @JsName("C")
    public fun copy(other: Any): ArLifeCycleComponent
  }
}

@JsName("ARBasicLightEstimate")
public open external class ArBasicLightEstimate(
  outer: UObject,
) : ArLightEstimate {
  @JsName("AmbientIntensityLumens")
  public open var ambientIntensityLumens: Number

  @JsName("AmbientColorTemperatureKelvin")
  public open var ambientColorTemperatureKelvin: Number

  @JsName("AmbientColor")
  public open var ambientColor: LinearColor

  @JsName("GetAmbientIntensityLumens")
  public open fun getAmbientIntensityLumens(): Number

  @JsName("GetAmbientColorTemperatureKelvin")
  public open fun getAmbientColorTemperatureKelvin(): Number

  @JsName("GetAmbientColor")
  public open fun getAmbientColor(): LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArBasicLightEstimate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArBasicLightEstimate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArBasicLightEstimate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArBasicLightEstimate

    @JsName("C")
    public fun copy(other: UObject): ArBasicLightEstimate

    @JsName("C")
    public fun copy(other: Any): ArBasicLightEstimate
  }
}

@JsName("AROriginActor")
public open external class ArOriginActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArOriginActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArOriginActor

    @JsName("C")
    public fun copy(other: UObject): ArOriginActor

    @JsName("C")
    public fun copy(other: Any): ArOriginActor
  }
}

public open external class GameMode(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : GameModeBase {
  @JsName("MatchState")
  public open var matchState: String

  @JsName("bDelayedStart")
  public open var delayedStart: Boolean

  @JsName("NumSpectators")
  public open var numSpectators: Number

  @JsName("NumPlayers")
  public open var numPlayers: Number

  @JsName("NumBots")
  public open var numBots: Number

  @JsName("MinRespawnDelay")
  public open var minRespawnDelay: Number

  @JsName("NumTravellingPlayers")
  public open var numTravellingPlayers: Number

  @JsName("EngineMessageClass")
  public open var engineMessageClass: UnrealEngineClass

  @JsName("InactivePlayerArray")
  public open var inactivePlayerArray: Array<PlayerState>

  @JsName("InactivePlayerStateLifeSpan")
  public open var inactivePlayerStateLifeSpan: Number

  @JsName("MaxInactivePlayers")
  public open var maxInactivePlayers: Number

  @JsName("bHandleDedicatedServerReplays")
  public open var handleDedicatedServerReplays: Boolean

  @JsName("StartMatch")
  public open fun startMatch(): Unit

  @JsName("Say")
  public open fun say(msg: String): Unit

  @JsName("RestartGame")
  public open fun restartGame(): Unit

  @JsName("ReadyToStartMatch")
  public open fun readyToStartMatch(): Boolean

  @JsName("ReadyToEndMatch")
  public open fun readyToEndMatch(): Boolean

  @JsName("K2_OnSetMatchState")
  public open fun k2OnSetMatchState(newState: String): Unit

  @JsName("IsMatchInProgress")
  public open fun isMatchInProgress(): Boolean

  @JsName("GetMatchState")
  public open fun getMatchState(): String

  @JsName("EndMatch")
  public open fun endMatch(): Unit

  @JsName("AbortMatch")
  public open fun abortMatch(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameMode

    @JsName("C")
    public fun copy(other: UObject): GameMode

    @JsName("C")
    public fun copy(other: Any): GameMode
  }
}

public open external class GameState(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : GameStateBase {
  @JsName("MatchState")
  public open var matchState: String

  @JsName("PreviousMatchState")
  public open var previousMatchState: String

  @JsName("ElapsedTime")
  public open var elapsedTime: Number

  @JsName("OnRep_MatchState")
  public open fun onRepMatchState(): Unit

  @JsName("OnRep_ElapsedTime")
  public open fun onRepElapsedTime(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameState

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameState

    @JsName("C")
    public fun copy(other: UObject): GameState

    @JsName("C")
    public fun copy(other: Any): GameState
  }
}

@JsName("ARSharedWorldGameState")
public open external class ArSharedWorldGameState(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : GameState {
  @JsName("PreviewImageData")
  public open var previewImageData: Array<Number>

  @JsName("ARWorldData")
  public open var arWorldData: Array<Number>

  @JsName("PreviewImageBytesTotal")
  public open var previewImageBytesTotal: Number

  @JsName("ARWorldBytesTotal")
  public open var arWorldBytesTotal: Number

  @JsName("PreviewImageBytesDelivered")
  public open var previewImageBytesDelivered: Number

  @JsName("ARWorldBytesDelivered")
  public open var arWorldBytesDelivered: Number

  @JsName("K2_OnARWorldMapIsReady")
  public open fun k2OnArWorldMapIsReady(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArSharedWorldGameState

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArSharedWorldGameState

    @JsName("C")
    public fun copy(other: UObject): ArSharedWorldGameState

    @JsName("C")
    public fun copy(other: Any): ArSharedWorldGameState
  }
}

@JsName("ARSharedWorldGameMode")
public open external class ArSharedWorldGameMode(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : GameMode {
  @JsName("BufferSizePerChunk")
  public open var bufferSizePerChunk: Number

  @JsName("SetPreviewImageData")
  public open fun setPreviewImageData(imageData: Array<Number>): Unit

  @JsName("SetARWorldSharingIsReady")
  public open fun setArWorldSharingIsReady(): Unit

  @JsName("SetARSharedWorldData")
  public open fun setArSharedWorldData(arWorldData: Array<Number>): Unit

  @JsName("GetARSharedWorldGameState")
  public open fun getArSharedWorldGameState(): ArSharedWorldGameState

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArSharedWorldGameMode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArSharedWorldGameMode

    @JsName("C")
    public fun copy(other: UObject): ArSharedWorldGameMode

    @JsName("C")
    public fun copy(other: Any): ArSharedWorldGameMode
  }
}

@JsName("ARSharedWorldPlayerController")
public open external class ArSharedWorldPlayerController(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : PlayerController {
  @JsName("ServerMarkReadyForReceiving")
  public open fun serverMarkReadyForReceiving(): Unit

  @JsName("ClientUpdatePreviewImageData")
  public open fun clientUpdatePreviewImageData(offset: Number, buffer: Array<Number>): Unit

  @JsName("ClientUpdateARWorldData")
  public open fun clientUpdateArWorldData(offset: Number, buffer: Array<Number>): Unit

  @JsName("ClientInitSharedWorld")
  public open fun clientInitSharedWorld(previewImageSize: Number, arWorldDataSize: Number): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArSharedWorldPlayerController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArSharedWorldPlayerController

    @JsName("C")
    public fun copy(other: UObject): ArSharedWorldPlayerController

    @JsName("C")
    public fun copy(other: Any): ArSharedWorldPlayerController
  }
}

@JsName("ESkyLightSourceType")
public external object SkyLightSourceType {
  @JsName("SLS_CapturedScene")
  public var CapturedScene: String

  @JsName("SLS_SpecifiedCubemap")
  public var SpecifiedCubemap: String

  @JsName("SLS_MAX")
  public var Max: String
}

@JsName("EOcclusionCombineMode")
public external object OcclusionCombineMode {
  @JsName("OCM_Minimum")
  public var MMinimum: String

  @JsName("OCM_Multiply")
  public var MMultiply: String

  @JsName("OCM_MAX")
  public var Mmax: String
}

public open external class SkyLightComponent(
  outer: UObject,
) : LightComponentBase {
  @JsName("bRealTimeCapture")
  public open var realTimeCapture: Boolean

  @JsName("SourceType")
  public open var sourceType: String

  @JsName("Cubemap")
  public open var cubemap: TextureCube

  @JsName("SourceCubemapAngle")
  public open var sourceCubemapAngle: Number

  @JsName("CubemapResolution")
  public open var cubemapResolution: Number

  @JsName("SkyDistanceThreshold")
  public open var skyDistanceThreshold: Number

  @JsName("bCaptureEmissiveOnly")
  public open var captureEmissiveOnly: Boolean

  @JsName("bLowerHemisphereIsBlack")
  public open var lowerHemisphereIsBlack: Boolean

  @JsName("LowerHemisphereColor")
  public open var lowerHemisphereColor: LinearColor

  @JsName("OcclusionMaxDistance")
  public open var occlusionMaxDistance: Number

  @JsName("Contrast")
  public open var contrast: Number

  @JsName("OcclusionExponent")
  public open var occlusionExponent: Number

  @JsName("MinOcclusion")
  public open var minOcclusion: Number

  @JsName("OcclusionTint")
  public open var occlusionTint: Color

  @JsName("bCloudAmbientOcclusion")
  public open var cloudAmbientOcclusion: Boolean

  @JsName("CloudAmbientOcclusionStrength")
  public open var cloudAmbientOcclusionStrength: Number

  @JsName("CloudAmbientOcclusionExtent")
  public open var cloudAmbientOcclusionExtent: Number

  @JsName("CloudAmbientOcclusionMapResolutionScale")
  public open var cloudAmbientOcclusionMapResolutionScale: Number

  @JsName("CloudAmbientOcclusionApertureScale")
  public open var cloudAmbientOcclusionApertureScale: Number

  @JsName("OcclusionCombineMode")
  public open var occlusionCombineMode: String

  @JsName("BlendDestinationCubemap")
  public open var blendDestinationCubemap: TextureCube

  @JsName("SetVolumetricScatteringIntensity")
  public open fun setVolumetricScatteringIntensity(newIntensity: Number): Unit

  @JsName("SetOcclusionTint")
  public open fun setOcclusionTint(inTint: Color): Unit

  @JsName("SetOcclusionExponent")
  public open fun setOcclusionExponent(inOcclusionExponent: Number): Unit

  @JsName("SetOcclusionContrast")
  public open fun setOcclusionContrast(inOcclusionContrast: Number): Unit

  @JsName("SetMinOcclusion")
  public open fun setMinOcclusion(inMinOcclusion: Number): Unit

  @JsName("SetLowerHemisphereColor")
  public open fun setLowerHemisphereColor(inLowerHemisphereColor: LinearColor): Unit

  @JsName("SetLightColor")
  public open fun setLightColor(newLightColor: LinearColor): Unit

  @JsName("SetIntensity")
  public open fun setIntensity(newIntensity: Number): Unit

  @JsName("SetIndirectLightingIntensity")
  public open fun setIndirectLightingIntensity(newIntensity: Number): Unit

  @JsName("SetCubemapBlend")
  public open fun setCubemapBlend(
    sourceCubemap: TextureCube,
    destinationCubemap: TextureCube,
    inBlendFraction: Number,
  ): Unit

  @JsName("SetCubemap")
  public open fun setCubemap(newCubemap: TextureCube): Unit

  @JsName("RecaptureSky")
  public open fun recaptureSky(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SkyLightComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SkyLightComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkyLightComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkyLightComponent

    @JsName("C")
    public fun copy(other: UObject): SkyLightComponent

    @JsName("C")
    public fun copy(other: Any): SkyLightComponent
  }
}

public open external class SkyLight(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Info {
  @JsName("LightComponent")
  public open var lightComponent: SkyLightComponent

  @JsName("bEnabled")
  public open var enabled: Boolean

  @JsName("OnRep_bEnabled")
  public open fun onRepbEnabled(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SkyLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SkyLight

    @JsName("C")
    public fun copy(other: UObject): SkyLight

    @JsName("C")
    public fun copy(other: Any): SkyLight
  }
}

@JsName("ARSkyLight")
public open external class ArSkyLight(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : SkyLight {
  @JsName("CaptureProbe")
  public open var captureProbe: ArEnvironmentCaptureProbe

  @JsName("SetEnvironmentCaptureProbe")
  public open fun setEnvironmentCaptureProbe(inCaptureProbe: ArEnvironmentCaptureProbe): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArSkyLight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArSkyLight

    @JsName("C")
    public fun copy(other: UObject): ArSkyLight

    @JsName("C")
    public fun copy(other: Any): ArSkyLight
  }
}

@JsName("ARTraceResultDummy")
public open external class ArTraceResultDummy(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTraceResultDummy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTraceResultDummy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTraceResultDummy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTraceResultDummy

    @JsName("C")
    public fun copy(other: UObject): ArTraceResultDummy

    @JsName("C")
    public fun copy(other: Any): ArTraceResultDummy
  }
}

@JsName("ARTrackedQRCode")
public open external class ArTrackedQrCode(
  outer: UObject,
) : ArTrackedImage {
  @JsName("QRCode")
  public open var qrCode: String

  @JsName("Version")
  public open var version: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTrackedQrCode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTrackedQrCode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTrackedQrCode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTrackedQrCode

    @JsName("C")
    public fun copy(other: UObject): ArTrackedQrCode

    @JsName("C")
    public fun copy(other: Any): ArTrackedQrCode
  }
}

@JsName("EAREye")
public external object AREye {
  public var LeftEye: String

  public var RightEye: String

  @JsName("EAREye_MAX")
  public var Max: String
}

@JsName("EARFaceBlendShape")
public external object ARFaceBlendShape {
  public var EyeBlinkLeft: String

  public var EyeLookDownLeft: String

  public var EyeLookInLeft: String

  public var EyeLookOutLeft: String

  public var EyeLookUpLeft: String

  public var EyeSquintLeft: String

  public var EyeWideLeft: String

  public var EyeBlinkRight: String

  public var EyeLookDownRight: String

  public var EyeLookInRight: String

  public var EyeLookOutRight: String

  public var EyeLookUpRight: String

  public var EyeSquintRight: String

  public var EyeWideRight: String

  public var JawForward: String

  public var JawLeft: String

  public var JawRight: String

  public var JawOpen: String

  public var MouthClose: String

  public var MouthFunnel: String

  public var MouthPucker: String

  public var MouthLeft: String

  public var MouthRight: String

  public var MouthSmileLeft: String

  public var MouthSmileRight: String

  public var MouthFrownLeft: String

  public var MouthFrownRight: String

  public var MouthDimpleLeft: String

  public var MouthDimpleRight: String

  public var MouthStretchLeft: String

  public var MouthStretchRight: String

  public var MouthRollLower: String

  public var MouthRollUpper: String

  public var MouthShrugLower: String

  public var MouthShrugUpper: String

  public var MouthPressLeft: String

  public var MouthPressRight: String

  public var MouthLowerDownLeft: String

  public var MouthLowerDownRight: String

  public var MouthUpperUpLeft: String

  public var MouthUpperUpRight: String

  public var BrowDownLeft: String

  public var BrowDownRight: String

  public var BrowInnerUp: String

  public var BrowOuterUpLeft: String

  public var BrowOuterUpRight: String

  public var CheekPuff: String

  public var CheekSquintLeft: String

  public var CheekSquintRight: String

  public var NoseSneerLeft: String

  public var NoseSneerRight: String

  public var TongueOut: String

  public var HeadYaw: String

  public var HeadPitch: String

  public var HeadRoll: String

  public var LeftEyeYaw: String

  public var LeftEyePitch: String

  public var LeftEyeRoll: String

  public var RightEyeYaw: String

  public var RightEyePitch: String

  public var RightEyeRoll: String

  public var MAX: String
}

@JsName("ARFaceGeometry")
public open external class ArFaceGeometry(
  outer: UObject,
) : ArTrackedGeometry {
  @JsName("LookAtTarget")
  public open var lookAtTarget: Vector

  @JsName("bIsTracked")
  public open var isTracked: Boolean

  @JsName("BlendShapes")
  public open var blendShapes: Any

  @JsName("LeftEyeTransform")
  public open var leftEyeTransform: Transform

  @JsName("RightEyeTransform")
  public open var rightEyeTransform: Transform

  @JsName("GetWorldSpaceEyeTransform")
  public open fun getWorldSpaceEyeTransform(eye: String): Transform

  @JsName("GetLocalSpaceEyeTransform")
  public open fun getLocalSpaceEyeTransform(eye: String): Transform

  @JsName("GetBlendShapeValue")
  public open fun getBlendShapeValue(blendShape: String): Number

  @JsName("GetBlendShapes")
  public open fun getBlendShapes(): Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArFaceGeometry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArFaceGeometry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArFaceGeometry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArFaceGeometry

    @JsName("C")
    public fun copy(other: UObject): ArFaceGeometry

    @JsName("C")
    public fun copy(other: Any): ArFaceGeometry
  }
}

@JsName("ARTrackedObject")
public open external class ArTrackedObject(
  outer: UObject,
) : ArTrackedGeometry {
  @JsName("DetectedObject")
  public open var detectedObject: ArCandidateObject

  @JsName("GetDetectedObject")
  public open fun getDetectedObject(): ArCandidateObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTrackedObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTrackedObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTrackedObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTrackedObject

    @JsName("C")
    public fun copy(other: UObject): ArTrackedObject

    @JsName("C")
    public fun copy(other: Any): ArTrackedObject
  }
}

@JsName("ARMeshGeometry")
public open external class ArMeshGeometry(
  outer: UObject,
) : ArTrackedGeometry {
  @JsName("GetObjectClassificationAtLocation")
  public open fun getObjectClassificationAtLocation(
    inWorldLocation: Vector,
    outClassification: String,
    outClassificationLocation: Vector,
    maxLocationDiff: Number,
  ): Object558

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArMeshGeometry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArMeshGeometry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArMeshGeometry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArMeshGeometry

    @JsName("C")
    public fun copy(other: UObject): ArMeshGeometry

    @JsName("C")
    public fun copy(other: Any): ArMeshGeometry
  }
}

@JsName("ARGeoAnchor")
public open external class ArGeoAnchor(
  outer: UObject,
) : ArTrackedGeometry {
  @JsName("GetLongitude")
  public open fun getLongitude(): Number

  @JsName("GetLatitude")
  public open fun getLatitude(): Number

  @JsName("GetAltitudeSource")
  public open fun getAltitudeSource(): String

  @JsName("GetAltitudeMeters")
  public open fun getAltitudeMeters(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArGeoAnchor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArGeoAnchor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArGeoAnchor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArGeoAnchor

    @JsName("C")
    public fun copy(other: UObject): ArGeoAnchor

    @JsName("C")
    public fun copy(other: Any): ArGeoAnchor
  }
}

@JsName("ARTrackableNotifyComponent")
public open external class ArTrackableNotifyComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("OnAddTrackedGeometry")
  public open var onAddTrackedGeometry:
      UnrealEngineMulticastDelegate<(TrackedGeometry: ArTrackedGeometry) -> Unit>

  @JsName("OnUpdateTrackedGeometry")
  public open var onUpdateTrackedGeometry:
      UnrealEngineMulticastDelegate<(TrackedGeometry: ArTrackedGeometry) -> Unit>

  @JsName("OnRemoveTrackedGeometry")
  public open var onRemoveTrackedGeometry:
      UnrealEngineMulticastDelegate<(TrackedGeometry: ArTrackedGeometry) -> Unit>

  @JsName("OnAddTrackedPlane")
  public open var onAddTrackedPlane:
      UnrealEngineMulticastDelegate<(TrackedPlane: ArPlaneGeometry) -> Unit>

  @JsName("OnUpdateTrackedPlane")
  public open var onUpdateTrackedPlane:
      UnrealEngineMulticastDelegate<(TrackedPlane: ArPlaneGeometry) -> Unit>

  @JsName("OnRemoveTrackedPlane")
  public open var onRemoveTrackedPlane:
      UnrealEngineMulticastDelegate<(TrackedPlane: ArPlaneGeometry) -> Unit>

  @JsName("OnAddTrackedPoint")
  public open var onAddTrackedPoint:
      UnrealEngineMulticastDelegate<(TrackedPoint: ArTrackedPoint) -> Unit>

  @JsName("OnUpdateTrackedPoint")
  public open var onUpdateTrackedPoint:
      UnrealEngineMulticastDelegate<(TrackedPoint: ArTrackedPoint) -> Unit>

  @JsName("OnRemoveTrackedPoint")
  public open var onRemoveTrackedPoint:
      UnrealEngineMulticastDelegate<(TrackedPoint: ArTrackedPoint) -> Unit>

  @JsName("OnAddTrackedImage")
  public open var onAddTrackedImage:
      UnrealEngineMulticastDelegate<(TrackedImage: ArTrackedImage) -> Unit>

  @JsName("OnUpdateTrackedImage")
  public open var onUpdateTrackedImage:
      UnrealEngineMulticastDelegate<(TrackedImage: ArTrackedImage) -> Unit>

  @JsName("OnRemoveTrackedImage")
  public open var onRemoveTrackedImage:
      UnrealEngineMulticastDelegate<(TrackedImage: ArTrackedImage) -> Unit>

  @JsName("OnAddTrackedFace")
  public open var onAddTrackedFace:
      UnrealEngineMulticastDelegate<(TrackedFace: ArFaceGeometry) -> Unit>

  @JsName("OnUpdateTrackedFace")
  public open var onUpdateTrackedFace:
      UnrealEngineMulticastDelegate<(TrackedFace: ArFaceGeometry) -> Unit>

  @JsName("OnRemoveTrackedFace")
  public open var onRemoveTrackedFace:
      UnrealEngineMulticastDelegate<(TrackedFace: ArFaceGeometry) -> Unit>

  @JsName("OnAddTrackedEnvProbe")
  public open var onAddTrackedEnvProbe:
      UnrealEngineMulticastDelegate<(TrackedEnvProbe: ArEnvironmentCaptureProbe) -> Unit>

  @JsName("OnUpdateTrackedEnvProbe")
  public open var onUpdateTrackedEnvProbe:
      UnrealEngineMulticastDelegate<(TrackedEnvProbe: ArEnvironmentCaptureProbe) -> Unit>

  @JsName("OnRemoveTrackedEnvProbe")
  public open var onRemoveTrackedEnvProbe:
      UnrealEngineMulticastDelegate<(TrackedEnvProbe: ArEnvironmentCaptureProbe) -> Unit>

  @JsName("OnAddTrackedObject")
  public open var onAddTrackedObject:
      UnrealEngineMulticastDelegate<(TrackedObject: ArTrackedObject) -> Unit>

  @JsName("OnUpdateTrackedObject")
  public open var onUpdateTrackedObject:
      UnrealEngineMulticastDelegate<(TrackedObject: ArTrackedObject) -> Unit>

  @JsName("OnRemoveTrackedObject")
  public open var onRemoveTrackedObject:
      UnrealEngineMulticastDelegate<(TrackedObject: ArTrackedObject) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTrackableNotifyComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTrackableNotifyComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTrackableNotifyComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTrackableNotifyComponent

    @JsName("C")
    public fun copy(other: UObject): ArTrackableNotifyComponent

    @JsName("C")
    public fun copy(other: Any): ArTrackableNotifyComponent
  }
}

@JsName("ARTypesDummyClass")
public open external class ArTypesDummyClass(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArTypesDummyClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArTypesDummyClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArTypesDummyClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArTypesDummyClass

    @JsName("C")
    public fun copy(other: UObject): ArTypesDummyClass

    @JsName("C")
    public fun copy(other: Any): ArTypesDummyClass
  }
}

@JsName("ESpectatorScreenMode")
public external object SpectatorScreenMode {
  public var Disabled: String

  public var SingleEyeLetterboxed: String

  public var Undistorted: String

  public var Distorted: String

  public var SingleEye: String

  public var SingleEyeCroppedToFill: String

  public var Texture: String

  public var TexturePlusEye: String

  @JsName("ESpectatorScreenMode_MAX")
  public var Max: String
}

@JsName("EOrientPositionSelector")
public external object OrientPositionSelector {
  public var Orientation: String

  public var Position: String

  public var OrientationAndPosition: String

  @JsName("EOrientPositionSelector_MAX")
  public var Max: String
}

@JsName("EHMDWornState")
public external object HMDWornState {
  public var Unknown: String

  public var Worn: String

  public var NotWorn: String

  @JsName("EHMDWornState_MAX")
  public var Max: String
}

@JsName("EXRTrackedDeviceType")
public external object ExrTrackedDeviceType {
  @JsName("HeadMountedDisplay")
  public var headMountedDisplay: String

  @JsName("Controller")
  public var controller: String

  @JsName("TrackingReference")
  public var trackingReference: String

  @JsName("Other")
  public var other: String

  @JsName("Invalid")
  public var invalid: String

  @JsName("Any")
  public var any: String

  @JsName("EXRTrackedDeviceType_MAX")
  public var exrTrackedDeviceTypeMax: String
}

@JsName("EXRDeviceConnectionResult")
public external object ExrDeviceConnectionResult {
  @JsName("NoTrackingSystem")
  public var noTrackingSystem: String

  @JsName("FeatureNotSupported")
  public var featureNotSupported: String

  @JsName("NoValidViewport")
  public var noValidViewport: String

  @JsName("MiscFailure")
  public var miscFailure: String

  @JsName("Success")
  public var success: String

  @JsName("EXRDeviceConnectionResult_MAX")
  public var exrDeviceConnectionResultMax: String
}

@JsName("ESpatialInputGestureAxis")
public external object SpatialInputGestureAxis {
  public var None: String

  public var Manipulation: String

  public var Navigation: String

  public var NavigationRails: String

  @JsName("ESpatialInputGestureAxis_MAX")
  public var Max: String
}

@JsName("XRGestureConfig")
public open external class XrGestureConfig {
  @JsName("bTap")
  public open var tap: Boolean

  @JsName("bHold")
  public open var hold: Boolean

  @JsName("AxisGesture")
  public open var axisGesture: String

  @JsName("bNavigationAxisX")
  public open var navigationAxisX: Boolean

  @JsName("bNavigationAxisY")
  public open var navigationAxisY: Boolean

  @JsName("bNavigationAxisZ")
  public open var navigationAxisZ: Boolean

  public open fun clone(): XrGestureConfig

  @JsName("ConfigureGestures")
  public open fun configureGestures(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): XrGestureConfig

    @JsName("C")
    public fun copy(other: Any): XrGestureConfig

    @JsName("ConfigureGestures")
    public fun configureGestures(gestureConfig: XrGestureConfig): Boolean
  }
}

@JsName("T$618")
public external interface Object618 {
  @JsName("bUseFocus")
  public var useFocus: Boolean

  @JsName("bHasFocus")
  public var hasFocus: Boolean
}

public open external class HeadMountedDisplayFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HeadMountedDisplayFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HeadMountedDisplayFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HeadMountedDisplayFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HeadMountedDisplayFunctionLibrary

    @JsName("UpdateExternalTrackingHMDPosition")
    public fun updateExternalTrackingHmdPosition(externalTrackingTransform: Transform): Unit

    @JsName("SetWorldToMetersScale")
    public fun setWorldToMetersScale(worldContext: UObject, newScale: Number): Unit

    @JsName("SetTrackingOrigin")
    public fun setTrackingOrigin(origin: String): Unit

    @JsName("SetSpectatorScreenTexture")
    public fun setSpectatorScreenTexture(inTexture: Texture): Unit

    @JsName("SetSpectatorScreenModeTexturePlusEyeLayout")
    public fun setSpectatorScreenModeTexturePlusEyeLayout(
      eyeRectMin: Vector2d,
      eyeRectMax: Vector2d,
      textureRectMin: Vector2d,
      textureRectMax: Vector2d,
      drawEyeFirst: Boolean,
      clearBlack: Boolean,
      useAlpha: Boolean,
    ): Unit

    @JsName("SetSpectatorScreenMode")
    public fun setSpectatorScreenMode(mode: String): Unit

    @JsName("SetClippingPlanes")
    public fun setClippingPlanes(near: Number, far: Number): Unit

    @JsName("ResetOrientationAndPosition")
    public fun resetOrientationAndPosition(yaw: Number, options: String): Unit

    @JsName("IsSpectatorScreenModeControllable")
    public fun isSpectatorScreenModeControllable(): Boolean

    @JsName("IsInLowPersistenceMode")
    public fun isInLowPersistenceMode(): Boolean

    @JsName("IsHeadMountedDisplayEnabled")
    public fun isHeadMountedDisplayEnabled(): Boolean

    @JsName("IsHeadMountedDisplayConnected")
    public fun isHeadMountedDisplayConnected(): Boolean

    @JsName("IsDeviceTracking")
    public fun isDeviceTracking(xrDeviceId: XrDeviceId): Boolean

    @JsName("HasValidTrackingPosition")
    public fun hasValidTrackingPosition(): Boolean

    @JsName("GetXRSystemFlags")
    public fun getXrSystemFlags(): Number

    @JsName("GetWorldToMetersScale")
    public fun getWorldToMetersScale(worldContext: UObject): Number

    @JsName("GetVRFocusState")
    public fun getVrFocusState(useFocus: Boolean, hasFocus: Boolean): Object618

    @JsName("GetVersionString")
    public fun getVersionString(): String

    @JsName("GetTrackingToWorldTransform")
    public fun getTrackingToWorldTransform(worldContext: UObject): Transform

    @JsName("GetTrackingSensorParameters")
    public fun getTrackingSensorParameters(
      origin: Vector,
      rotation: Rotator,
      leftFov: Number,
      rightFov: Number,
      topFov: Number,
      bottomFov: Number,
      distance: Number,
      nearPlane: Number,
      farPlane: Number,
      isActive: Boolean,
      index: Number,
    ): Object557

    @JsName("GetTrackingOrigin")
    public fun getTrackingOrigin(): String

    @JsName("GetScreenPercentage")
    public fun getScreenPercentage(): Number

    @JsName("GetPositionalTrackingCameraParameters")
    public fun getPositionalTrackingCameraParameters(
      cameraOrigin: Vector,
      cameraRotation: Rotator,
      HFOV: Number,
      VFOV: Number,
      cameraDistance: Number,
      nearPlane: Number,
      farPlane: Number,
    ): Object556

    @JsName("GetPlayAreaBounds")
    public fun getPlayAreaBounds(origin: String): Vector2d

    @JsName("GetPixelDensity")
    public fun getPixelDensity(): Number

    @JsName("GetOrientationAndPosition")
    public fun getOrientationAndPosition(deviceRotation: Rotator, devicePosition: Vector):
        OrientationAndPositionProvider

    @JsName("GetNumOfTrackingSensors")
    public fun getNumOfTrackingSensors(): Number

    @JsName("GetMotionControllerData")
    public fun getMotionControllerData(
      worldContext: UObject,
      hand: String,
      motionControllerData: XrMotionControllerData,
    ): MotionControllerDataProvider

    @JsName("GetHMDWornState")
    public fun getHmdWornState(): String

    @JsName("GetHMDDeviceName")
    public fun getHmdDeviceName(): String

    @JsName("GetHMDData")
    public fun getHmdData(worldContext: UObject, hmdData: XrhmdData): HmdDataProvider

    @JsName("GetDeviceWorldPose")
    public fun getDeviceWorldPose(
      worldContext: UObject,
      xrDeviceId: XrDeviceId,
      isTracked: Boolean,
      orientation: Rotator,
      hasPositionalTracking: Boolean,
      position: Vector,
    ): Object312

    @JsName("GetDevicePose")
    public fun getDevicePose(
      xrDeviceId: XrDeviceId,
      isTracked: Boolean,
      orientation: Rotator,
      hasPositionalTracking: Boolean,
      position: Vector,
    ): Object312

    @JsName("GetControllerTransformForTime")
    public fun getControllerTransformForTime(
      worldContext: UObject,
      controllerIndex: Number,
      motionSource: String,
      time: Timespan,
      timeWasUsed: Boolean,
      orientation: Rotator,
      position: Vector,
      providedLinearVelocity: Boolean,
      linearVelocity: Vector,
      providedAngularVelocity: Boolean,
      angularVelocityRadPerSec: Vector,
      providedLinearAcceleration: Boolean,
      linearAcceleration: Vector,
    ): Object365

    @JsName("EnumerateTrackedDevices")
    public fun enumerateTrackedDevices(systemId: String, deviceType: String): Array<XrDeviceId>

    @JsName("EnableLowPersistenceMode")
    public fun enableLowPersistenceMode(enable: Boolean): Unit

    @JsName("EnableHMD")
    public fun enableHmd(enable: Boolean): Boolean

    @JsName("DisconnectRemoteXRDevice")
    public fun disconnectRemoteXrDevice(): Unit

    @JsName("ConnectRemoteXRDevice")
    public fun connectRemoteXrDevice(ipAddress: String, bitRate: Number): String

    @JsName("ConfigureGestures")
    public fun configureGestures(gestureConfig: XrGestureConfig): Boolean

    @JsName("ClearXRTimedInputActionDelegate")
    public fun clearXrTimedInputActionDelegate(actionPath: String): Unit

    @JsName("CalibrateExternalTrackingToHMD")
    public fun calibrateExternalTrackingToHmd(externalTrackingTransform: Transform): Unit

    @JsName("BreakKey")
    public fun breakKey(
      inKey: Key,
      interactionProfile: String,
      hand: String,
      motionSource: String,
      indentifier: String,
      component: String,
    ): Object253

    @JsName("C")
    public fun copy(other: UObject): HeadMountedDisplayFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): HeadMountedDisplayFunctionLibrary
  }
}

@JsName("EHandKeypoint")
public external object HandKeypoint {
  public var Palm: String

  public var Wrist: String

  public var ThumbMetacarpal: String

  public var ThumbProximal: String

  public var ThumbDistal: String

  public var ThumbTip: String

  public var IndexMetacarpal: String

  public var IndexProximal: String

  public var IndexIntermediate: String

  public var IndexDistal: String

  public var IndexTip: String

  public var MiddleMetacarpal: String

  public var MiddleProximal: String

  public var MiddleIntermediate: String

  public var MiddleDistal: String

  public var MiddleTip: String

  public var RingMetacarpal: String

  public var RingProximal: String

  public var RingIntermediate: String

  public var RingDistal: String

  public var RingTip: String

  public var LittleMetacarpal: String

  public var LittleProximal: String

  public var LittleIntermediate: String

  public var LittleDistal: String

  public var LittleTip: String

  @JsName("EHandKeypoint_MAX")
  public var Max: String
}

public open external class HandKeypointConversion(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HandKeypointConversion

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HandKeypointConversion

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HandKeypointConversion

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HandKeypointConversion

    @JsName("Conv_HandKeypointToInt32")
    public fun convertHandKeypointToInt32(input: String): Number

    @JsName("C")
    public fun copy(other: UObject): HandKeypointConversion

    @JsName("C")
    public fun copy(other: Any): HandKeypointConversion
  }
}

public open external class MotionTrackedDeviceFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MotionTrackedDeviceFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MotionTrackedDeviceFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MotionTrackedDeviceFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MotionTrackedDeviceFunctionLibrary

    @JsName("SetIsControllerMotionTrackingEnabledByDefault")
    public fun setIsControllerMotionTrackingEnabledByDefault(enable: Boolean): Unit

    @JsName("IsMotionTrackingEnabledForSource")
    public fun isMotionTrackingEnabledForSource(playerIndex: Number, sourceName: String): Boolean

    @JsName("IsMotionTrackingEnabledForDevice")
    public fun isMotionTrackingEnabledForDevice(playerIndex: Number, hand: String): Boolean

    @JsName("IsMotionTrackingEnabledForComponent")
    public
        fun isMotionTrackingEnabledForComponent(motionControllerComponent: MotionControllerComponent):
        Boolean

    @JsName("IsMotionTrackedDeviceCountManagementNecessary")
    public fun isMotionTrackedDeviceCountManagementNecessary(): Boolean

    @JsName("IsMotionSourceTracking")
    public fun isMotionSourceTracking(playerIndex: Number, sourceName: String): Boolean

    @JsName("GetMotionTrackingEnabledControllerCount")
    public fun getMotionTrackingEnabledControllerCount(): Number

    @JsName("GetMaximumMotionTrackedControllerCount")
    public fun getMaximumMotionTrackedControllerCount(): Number

    @JsName("GetActiveTrackingSystemName")
    public fun getActiveTrackingSystemName(): String

    @JsName("EnumerateMotionSources")
    public fun enumerateMotionSources(): Array<String>

    @JsName("EnableMotionTrackingOfSource")
    public fun enableMotionTrackingOfSource(playerIndex: Number, sourceName: String): Boolean

    @JsName("EnableMotionTrackingOfDevice")
    public fun enableMotionTrackingOfDevice(playerIndex: Number, hand: String): Boolean

    @JsName("EnableMotionTrackingForComponent")
    public
        fun enableMotionTrackingForComponent(motionControllerComponent: MotionControllerComponent):
        Boolean

    @JsName("DisableMotionTrackingOfSource")
    public fun disableMotionTrackingOfSource(playerIndex: Number, sourceName: String): Unit

    @JsName("DisableMotionTrackingOfDevice")
    public fun disableMotionTrackingOfDevice(playerIndex: Number, hand: String): Unit

    @JsName("DisableMotionTrackingOfControllersForPlayer")
    public fun disableMotionTrackingOfControllersForPlayer(playerIndex: Number): Unit

    @JsName("DisableMotionTrackingOfAllControllers")
    public fun disableMotionTrackingOfAllControllers(): Unit

    @JsName("DisableMotionTrackingForComponent")
    public
        fun disableMotionTrackingForComponent(motionControllerComponent: MotionControllerComponent):
        Unit

    @JsName("C")
    public fun copy(other: UObject): MotionTrackedDeviceFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): MotionTrackedDeviceFunctionLibrary
  }
}

@JsName("VRNotificationsComponent")
public open external class VrNotificationsComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate")
  public open var hmdTrackingInitializingAndNeedsHmdToBeTrackedDelegate:
      UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("HMDTrackingInitializedDelegate")
  public open var hmdTrackingInitializedDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("HMDRecenteredDelegate")
  public open var hmdRecenteredDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("HMDLostDelegate")
  public open var hmdLostDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("HMDReconnectedDelegate")
  public open var hmdReconnectedDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("HMDConnectCanceledDelegate")
  public open var hmdConnectCanceledDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("HMDPutOnHeadDelegate")
  public open var hmdPutOnHeadDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("HMDRemovedFromHeadDelegate")
  public open var hmdRemovedFromHeadDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("VRControllerRecenteredDelegate")
  public open var vrControllerRecenteredDelegate: UnrealEngineMulticastDelegate<() -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VrNotificationsComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VrNotificationsComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VrNotificationsComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VrNotificationsComponent

    @JsName("C")
    public fun copy(other: UObject): VrNotificationsComponent

    @JsName("C")
    public fun copy(other: Any): VrNotificationsComponent
  }
}

@JsName("XRAssetFunctionLibrary")
public open external class XrAssetFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): XrAssetFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): XrAssetFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): XrAssetFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): XrAssetFunctionLibrary

    @JsName("AddNamedDeviceVisualizationComponentBlocking")
    public fun addNamedDeviceVisualizationComponentBlocking(
      target: Actor,
      systemName: String,
      deviceName: String,
      manualAttachment: Boolean,
      relativeTransform: Transform,
      xrDeviceId: XrDeviceId,
    ): Object566

    @JsName("AddDeviceVisualizationComponentBlocking")
    public fun addDeviceVisualizationComponentBlocking(
      target: Actor,
      xrDeviceId: XrDeviceId,
      manualAttachment: Boolean,
      relativeTransform: Transform,
    ): PrimitiveComponent

    @JsName("C")
    public fun copy(other: UObject): XrAssetFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): XrAssetFunctionLibrary
  }
}

@JsName("T$619")
public external interface Object619 {
  @JsName("XRDeviceId")
  public var xrDeviceId: XrDeviceId

  @JsName("NewComponent")
  public var newComponent: PrimitiveComponent

  @JsName("$")
  public var value: AsyncTaskLoadXrDeviceVisComponent
}

@JsName("T$620")
public external interface Object620 {
  @JsName("NewComponent")
  public var newComponent: PrimitiveComponent

  @JsName("$")
  public var value: AsyncTaskLoadXrDeviceVisComponent
}

@JsName("AsyncTask_LoadXRDeviceVisComponent")
public open external class AsyncTaskLoadXrDeviceVisComponent(
  outer: UObject,
) : BlueprintAsyncActionBase {
  @JsName("OnModelLoaded")
  public open var onModelLoaded:
      UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) -> Unit>

  @JsName("OnLoadFailure")
  public open var onLoadFailure:
      UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) -> Unit>

  @JsName("SpawnedComponent")
  public open var spawnedComponent: PrimitiveComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncTaskLoadXrDeviceVisComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncTaskLoadXrDeviceVisComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncTaskLoadXrDeviceVisComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncTaskLoadXrDeviceVisComponent

    @JsName("AddNamedDeviceVisualizationComponentAsync")
    public fun addNamedDeviceVisualizationComponentAsync(
      target: Actor,
      systemName: String,
      deviceName: String,
      manualAttachment: Boolean,
      relativeTransform: Transform,
      xrDeviceId: XrDeviceId,
      newComponent: PrimitiveComponent,
    ): Object619

    @JsName("AddDeviceVisualizationComponentAsync")
    public fun addDeviceVisualizationComponentAsync(
      target: Actor,
      xrDeviceId: XrDeviceId,
      manualAttachment: Boolean,
      relativeTransform: Transform,
      newComponent: PrimitiveComponent,
    ): Object620

    @JsName("C")
    public fun copy(other: UObject): AsyncTaskLoadXrDeviceVisComponent

    @JsName("C")
    public fun copy(other: Any): AsyncTaskLoadXrDeviceVisComponent
  }
}

@JsName("XRLoadingScreenFunctionLibrary")
public open external class XrLoadingScreenFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): XrLoadingScreenFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): XrLoadingScreenFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): XrLoadingScreenFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): XrLoadingScreenFunctionLibrary

    @JsName("ShowLoadingScreen")
    public fun showLoadingScreen(): Unit

    @JsName("SetLoadingScreen")
    public fun setLoadingScreen(
      texture: Texture,
      scale: Vector2d,
      offset: Vector,
      showLoadingMovie: Boolean,
      showOnSet: Boolean,
    ): Unit

    @JsName("HideLoadingScreen")
    public fun hideLoadingScreen(): Unit

    @JsName("ClearLoadingScreenSplashes")
    public fun clearLoadingScreenSplashes(): Unit

    @JsName("AddLoadingScreenSplash")
    public fun addLoadingScreenSplash(
      texture: Texture,
      translation: Vector,
      rotation: Rotator,
      size: Vector2d,
      deltaRotation: Rotator,
      clearBeforeAdd: Boolean,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): XrLoadingScreenFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): XrLoadingScreenFunctionLibrary
  }
}

public open external class ActorTransformer(
  outer: UObject,
) : ViewportTransformer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorTransformer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorTransformer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorTransformer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorTransformer

    @JsName("C")
    public fun copy(other: UObject): ActorTransformer

    @JsName("C")
    public fun copy(other: Any): ActorTransformer
  }
}

public open external class ViewportInteractableInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ViewportInteractableInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ViewportInteractableInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ViewportInteractableInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ViewportInteractableInterface

    @JsName("C")
    public fun copy(other: UObject): ViewportInteractableInterface

    @JsName("C")
    public fun copy(other: Any): ViewportInteractableInterface
  }
}

public open external class TranslationDragOperation(
  outer: UObject,
) : ViewportDragOperation {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TranslationDragOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TranslationDragOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TranslationDragOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TranslationDragOperation

    @JsName("C")
    public fun copy(other: UObject): TranslationDragOperation

    @JsName("C")
    public fun copy(other: Any): TranslationDragOperation
  }
}

public open external class PlaneTranslationDragOperation(
  outer: UObject,
) : ViewportDragOperation {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlaneTranslationDragOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlaneTranslationDragOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlaneTranslationDragOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlaneTranslationDragOperation

    @JsName("C")
    public fun copy(other: UObject): PlaneTranslationDragOperation

    @JsName("C")
    public fun copy(other: Any): PlaneTranslationDragOperation
  }
}

public open external class RotateOnAngleDragOperation(
  outer: UObject,
) : ViewportDragOperation {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RotateOnAngleDragOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RotateOnAngleDragOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RotateOnAngleDragOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RotateOnAngleDragOperation

    @JsName("C")
    public fun copy(other: UObject): RotateOnAngleDragOperation

    @JsName("C")
    public fun copy(other: Any): RotateOnAngleDragOperation
  }
}

public open external class ScaleDragOperation(
  outer: UObject,
) : ViewportDragOperation {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScaleDragOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScaleDragOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScaleDragOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScaleDragOperation

    @JsName("C")
    public fun copy(other: UObject): ScaleDragOperation

    @JsName("C")
    public fun copy(other: Any): ScaleDragOperation
  }
}

public open external class UniformScaleDragOperation(
  outer: UObject,
) : ViewportDragOperation {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UniformScaleDragOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UniformScaleDragOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UniformScaleDragOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UniformScaleDragOperation

    @JsName("C")
    public fun copy(other: UObject): UniformScaleDragOperation

    @JsName("C")
    public fun copy(other: Any): UniformScaleDragOperation
  }
}

public open external class AxisGizmoHandleGroup(
  outer: UObject,
) : GizmoHandleGroup {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AxisGizmoHandleGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AxisGizmoHandleGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AxisGizmoHandleGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AxisGizmoHandleGroup

    @JsName("C")
    public fun copy(other: UObject): AxisGizmoHandleGroup

    @JsName("C")
    public fun copy(other: Any): AxisGizmoHandleGroup
  }
}

public open external class GizmoHandleMeshComponent(
  outer: UObject,
) : StaticMeshComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GizmoHandleMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GizmoHandleMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GizmoHandleMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GizmoHandleMeshComponent

    @JsName("C")
    public fun copy(other: UObject): GizmoHandleMeshComponent

    @JsName("C")
    public fun copy(other: Any): GizmoHandleMeshComponent
  }
}

public open external class UniformScaleGizmoHandleGroup(
  outer: UObject,
) : GizmoHandleGroup {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UniformScaleGizmoHandleGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UniformScaleGizmoHandleGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UniformScaleGizmoHandleGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UniformScaleGizmoHandleGroup

    @JsName("C")
    public fun copy(other: UObject): UniformScaleGizmoHandleGroup

    @JsName("C")
    public fun copy(other: Any): UniformScaleGizmoHandleGroup
  }
}

public open external class PivotTranslationGizmoHandleGroup(
  outer: UObject,
) : AxisGizmoHandleGroup {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PivotTranslationGizmoHandleGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PivotTranslationGizmoHandleGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PivotTranslationGizmoHandleGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PivotTranslationGizmoHandleGroup

    @JsName("C")
    public fun copy(other: UObject): PivotTranslationGizmoHandleGroup

    @JsName("C")
    public fun copy(other: Any): PivotTranslationGizmoHandleGroup
  }
}

public open external class PivotScaleGizmoHandleGroup(
  outer: UObject,
) : AxisGizmoHandleGroup {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PivotScaleGizmoHandleGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PivotScaleGizmoHandleGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PivotScaleGizmoHandleGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PivotScaleGizmoHandleGroup

    @JsName("C")
    public fun copy(other: UObject): PivotScaleGizmoHandleGroup

    @JsName("C")
    public fun copy(other: Any): PivotScaleGizmoHandleGroup
  }
}

public open external class PivotPlaneTranslationGizmoHandleGroup(
  outer: UObject,
) : AxisGizmoHandleGroup {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PivotPlaneTranslationGizmoHandleGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PivotPlaneTranslationGizmoHandleGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PivotPlaneTranslationGizmoHandleGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PivotPlaneTranslationGizmoHandleGroup

    @JsName("C")
    public fun copy(other: UObject): PivotPlaneTranslationGizmoHandleGroup

    @JsName("C")
    public fun copy(other: Any): PivotPlaneTranslationGizmoHandleGroup
  }
}

public open external class PivotRotationGizmoHandleGroup(
  outer: UObject,
) : AxisGizmoHandleGroup {
  @JsName("RootFullRotationHandleComponent")
  public open var rootFullRotationHandleComponent: SceneComponent

  @JsName("FullRotationHandleMeshComponent")
  public open var fullRotationHandleMeshComponent: GizmoHandleMeshComponent

  @JsName("StartRotationIndicatorMeshComponent")
  public open var startRotationIndicatorMeshComponent: GizmoHandleMeshComponent

  @JsName("RootStartRotationIdicatorComponent")
  public open var rootStartRotationIdicatorComponent: SceneComponent

  @JsName("DeltaRotationIndicatorMeshComponent")
  public open var deltaRotationIndicatorMeshComponent: GizmoHandleMeshComponent

  @JsName("RootDeltaRotationIndicatorComponent")
  public open var rootDeltaRotationIndicatorComponent: SceneComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PivotRotationGizmoHandleGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PivotRotationGizmoHandleGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PivotRotationGizmoHandleGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PivotRotationGizmoHandleGroup

    @JsName("C")
    public fun copy(other: UObject): PivotRotationGizmoHandleGroup

    @JsName("C")
    public fun copy(other: Any): PivotRotationGizmoHandleGroup
  }
}

public open external class StretchGizmoHandleGroup(
  outer: UObject,
) : GizmoHandleGroup {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StretchGizmoHandleGroup

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StretchGizmoHandleGroup

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StretchGizmoHandleGroup

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StretchGizmoHandleGroup

    @JsName("C")
    public fun copy(other: UObject): StretchGizmoHandleGroup

    @JsName("C")
    public fun copy(other: Any): StretchGizmoHandleGroup
  }
}

public open external class PivotTransformGizmo(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : BaseTransformGizmo {
  @JsName("UniformScaleGizmoHandleGroup")
  public open var uniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup

  @JsName("TranslationGizmoHandleGroup")
  public open var translationGizmoHandleGroup: PivotTranslationGizmoHandleGroup

  @JsName("ScaleGizmoHandleGroup")
  public open var scaleGizmoHandleGroup: PivotScaleGizmoHandleGroup

  @JsName("PlaneTranslationGizmoHandleGroup")
  public open var planeTranslationGizmoHandleGroup: PivotPlaneTranslationGizmoHandleGroup

  @JsName("RotationGizmoHandleGroup")
  public open var rotationGizmoHandleGroup: PivotRotationGizmoHandleGroup

  @JsName("StretchGizmoHandleGroup")
  public open var stretchGizmoHandleGroup: StretchGizmoHandleGroup

  @JsName("LastDraggingHandle")
  public open var lastDraggingHandle: ActorComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PivotTransformGizmo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PivotTransformGizmo

    @JsName("C")
    public fun copy(other: UObject): PivotTransformGizmo

    @JsName("C")
    public fun copy(other: Any): PivotTransformGizmo
  }
}

public open external class StretchGizmoHandleDragOperation(
  outer: UObject,
) : ViewportDragOperation {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StretchGizmoHandleDragOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StretchGizmoHandleDragOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StretchGizmoHandleDragOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StretchGizmoHandleDragOperation

    @JsName("C")
    public fun copy(other: UObject): StretchGizmoHandleDragOperation

    @JsName("C")
    public fun copy(other: Any): StretchGizmoHandleDragOperation
  }
}

@JsName("ELocalizationTargetConflictStatus")
public external object LocalizationTargetConflictStatus {
  public var Unknown: String

  public var ConflictsPresent: String

  public var Clear: String

  @JsName("ELocalizationTargetConflictStatus_MAX")
  public var Max: String
}

@JsName("ELocalizationGatherPathRoot")
public external object LocalizationGatherPathRoot {
  public var Auto: String

  public var Engine: String

  public var Project: String

  @JsName("ELocalizationGatherPathRoot_MAX")
  public var Max: String
}

public open external class GatherTextSearchDirectory {
  @JsName("PathRoot")
  public open var pathRoot: String

  @JsName("Path")
  public open var path: String

  public open fun clone(): GatherTextSearchDirectory

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GatherTextSearchDirectory

    @JsName("C")
    public fun copy(other: Any): GatherTextSearchDirectory
  }
}

public open external class GatherTextExcludePath {
  @JsName("PathRoot")
  public open var pathRoot: String

  @JsName("Pattern")
  public open var pattern: String

  public open fun clone(): GatherTextExcludePath

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GatherTextExcludePath

    @JsName("C")
    public fun copy(other: Any): GatherTextExcludePath
  }
}

public open external class GatherTextFileExtension {
  @JsName("Pattern")
  public open var pattern: String

  public open fun clone(): GatherTextFileExtension

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GatherTextFileExtension

    @JsName("C")
    public fun copy(other: Any): GatherTextFileExtension
  }
}

public open external class GatherTextFromTextFilesConfiguration {
  @JsName("IsEnabled")
  public open var isEnabled: Boolean

  @JsName("SearchDirectories")
  public open var searchDirectories: Array<GatherTextSearchDirectory>

  @JsName("ExcludePathWildcards")
  public open var excludePathWildcards: Array<GatherTextExcludePath>

  @JsName("FileExtensions")
  public open var fileExtensions: Array<GatherTextFileExtension>

  @JsName("ShouldGatherFromEditorOnlyData")
  public open var shouldGatherFromEditorOnlyData: Boolean

  public open fun clone(): GatherTextFromTextFilesConfiguration

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GatherTextFromTextFilesConfiguration

    @JsName("C")
    public fun copy(other: Any): GatherTextFromTextFilesConfiguration
  }
}

public open external class GatherTextIncludePath {
  @JsName("PathRoot")
  public open var pathRoot: String

  @JsName("Pattern")
  public open var pattern: String

  public open fun clone(): GatherTextIncludePath

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GatherTextIncludePath

    @JsName("C")
    public fun copy(other: Any): GatherTextIncludePath
  }
}

public open external class GatherTextFromPackagesConfiguration {
  @JsName("IsEnabled")
  public open var isEnabled: Boolean

  @JsName("IncludePathWildcards")
  public open var includePathWildcards: Array<GatherTextIncludePath>

  @JsName("ExcludePathWildcards")
  public open var excludePathWildcards: Array<GatherTextExcludePath>

  @JsName("FileExtensions")
  public open var fileExtensions: Array<GatherTextFileExtension>

  @JsName("Collections")
  public open var collections: Array<String>

  @JsName("ExcludeClasses")
  public open var excludeClasses: Array<SoftClassPath>

  @JsName("ShouldExcludeDerivedClasses")
  public open var shouldExcludeDerivedClasses: Boolean

  @JsName("ShouldGatherFromEditorOnlyData")
  public open var shouldGatherFromEditorOnlyData: Boolean

  @JsName("SkipGatherCache")
  public open var skipGatherCache: Boolean

  public open fun clone(): GatherTextFromPackagesConfiguration

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GatherTextFromPackagesConfiguration

    @JsName("C")
    public fun copy(other: Any): GatherTextFromPackagesConfiguration
  }
}

public open external class MetaDataKeyName {
  @JsName("Name")
  public open var name: String

  public open fun clone(): MetaDataKeyName

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MetaDataKeyName

    @JsName("C")
    public fun copy(other: Any): MetaDataKeyName
  }
}

public open external class MetaDataTextKeyPattern {
  @JsName("Pattern")
  public open var pattern: String

  public open fun clone(): MetaDataTextKeyPattern

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MetaDataTextKeyPattern

    @JsName("C")
    public fun copy(other: Any): MetaDataTextKeyPattern
  }
}

public open external class MetaDataKeyGatherSpecification {
  @JsName("MetaDataKey")
  public open var metaDataKey: MetaDataKeyName

  @JsName("TextNamespace")
  public open var textNamespace: String

  @JsName("TextKeyPattern")
  public open var textKeyPattern: MetaDataTextKeyPattern

  public open fun clone(): MetaDataKeyGatherSpecification

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MetaDataKeyGatherSpecification

    @JsName("C")
    public fun copy(other: Any): MetaDataKeyGatherSpecification
  }
}

public open external class GatherTextFromMetaDataConfiguration {
  @JsName("IsEnabled")
  public open var isEnabled: Boolean

  @JsName("IncludePathWildcards")
  public open var includePathWildcards: Array<GatherTextIncludePath>

  @JsName("ExcludePathWildcards")
  public open var excludePathWildcards: Array<GatherTextExcludePath>

  @JsName("KeySpecifications")
  public open var keySpecifications: Array<MetaDataKeyGatherSpecification>

  @JsName("ShouldGatherFromEditorOnlyData")
  public open var shouldGatherFromEditorOnlyData: Boolean

  public open fun clone(): GatherTextFromMetaDataConfiguration

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GatherTextFromMetaDataConfiguration

    @JsName("C")
    public fun copy(other: Any): GatherTextFromMetaDataConfiguration
  }
}

@JsName("ELocalizedTextCollapseMode")
public external object LocalizedTextCollapseMode {
  @JsName("IdenticalTextIdAndSource")
  public var TextIdAndSource: String

  @JsName("IdenticalPackageIdTextIdAndSource")
  public var PackageIdTextIdAndSource: String

  @JsName("IdenticalNamespaceAndSource")
  public var NamespaceAndSource: String

  @JsName("ELocalizedTextCollapseMode_MAX")
  public var Max: String
}

@JsName("EPortableObjectFormat")
public external object PortableObjectFormat {
  public var Unreal: String

  public var Crowdin: String

  @JsName("EPortableObjectFormat_MAX")
  public var Max: String
}

public open external class LocalizationExportingSettings {
  @JsName("CollapseMode")
  public open var collapseMode: String

  @JsName("POFormat")
  public open var poFormat: String

  @JsName("ShouldPersistCommentsOnExport")
  public open var shouldPersistCommentsOnExport: Boolean

  @JsName("ShouldAddSourceLocationsAsComments")
  public open var shouldAddSourceLocationsAsComments: Boolean

  public open fun clone(): LocalizationExportingSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LocalizationExportingSettings

    @JsName("C")
    public fun copy(other: Any): LocalizationExportingSettings
  }
}

public open external class LocalizationCompilationSettings {
  @JsName("SkipSourceCheck")
  public open var skipSourceCheck: Boolean

  @JsName("ValidateFormatPatterns")
  public open var validateFormatPatterns: Boolean

  @JsName("ValidateSafeWhitespace")
  public open var validateSafeWhitespace: Boolean

  public open fun clone(): LocalizationCompilationSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LocalizationCompilationSettings

    @JsName("C")
    public fun copy(other: Any): LocalizationCompilationSettings
  }
}

public open external class LocalizationImportDialogueSettings {
  @JsName("RawAudioPath")
  public open var rawAudioPath: DirectoryPath

  @JsName("ImportedDialogueFolder")
  public open var importedDialogueFolder: String

  @JsName("bImportNativeAsSource")
  public open var importNativeAsSource: Boolean

  public open fun clone(): LocalizationImportDialogueSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LocalizationImportDialogueSettings

    @JsName("C")
    public fun copy(other: Any): LocalizationImportDialogueSettings
  }
}

public open external class CultureStatistics {
  @JsName("CultureName")
  public open var cultureName: String

  @JsName("WordCount")
  public open var wordCount: Any

  public open fun clone(): CultureStatistics

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CultureStatistics

    @JsName("C")
    public fun copy(other: Any): CultureStatistics
  }
}

public open external class LocalizationTargetSettings {
  @JsName("Name")
  public open var name: String

  @JsName("Guid")
  public open var guid: Guid

  @JsName("ConflictStatus")
  public open var conflictStatus: String

  @JsName("TargetDependencies")
  public open var targetDependencies: Array<Guid>

  @JsName("AdditionalManifestDependencies")
  public open var additionalManifestDependencies: Array<FilePath>

  @JsName("RequiredModuleNames")
  public open var requiredModuleNames: Array<String>

  @JsName("GatherFromTextFiles")
  public open var gatherFromTextFiles: GatherTextFromTextFilesConfiguration

  @JsName("GatherFromPackages")
  public open var gatherFromPackages: GatherTextFromPackagesConfiguration

  @JsName("GatherFromMetaData")
  public open var gatherFromMetaData: GatherTextFromMetaDataConfiguration

  @JsName("ExportSettings")
  public open var exportSettings: LocalizationExportingSettings

  @JsName("CompileSettings")
  public open var compileSettings: LocalizationCompilationSettings

  @JsName("ImportDialogueSettings")
  public open var importDialogueSettings: LocalizationImportDialogueSettings

  @JsName("NativeCultureIndex")
  public open var nativeCultureIndex: Number

  @JsName("SupportedCulturesStatistics")
  public open var supportedCulturesStatistics: Array<CultureStatistics>

  public open fun clone(): LocalizationTargetSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LocalizationTargetSettings

    @JsName("C")
    public fun copy(other: Any): LocalizationTargetSettings
  }
}

public open external class LocalizationTarget(
  outer: UObject,
) : UObject {
  @JsName("Settings")
  public open var settings: LocalizationTargetSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalizationTarget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalizationTarget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalizationTarget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalizationTarget

    @JsName("C")
    public fun copy(other: UObject): LocalizationTarget

    @JsName("C")
    public fun copy(other: Any): LocalizationTarget
  }
}

public open external class LocalizationTargetSet(
  outer: UObject,
) : UObject {
  @JsName("TargetObjects")
  public open var targetObjects: Array<LocalizationTarget>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalizationTargetSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalizationTargetSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalizationTargetSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalizationTargetSet

    @JsName("C")
    public fun copy(other: UObject): LocalizationTargetSet

    @JsName("C")
    public fun copy(other: Any): LocalizationTargetSet
  }
}

public open external class LocalizationSettings(
  outer: UObject,
) : UObject {
  @JsName("EngineTargetSet")
  public open var engineTargetSet: LocalizationTargetSet

  @JsName("EngineTargetsSettings")
  public open var engineTargetsSettings: Array<LocalizationTargetSettings>

  @JsName("GameTargetSet")
  public open var gameTargetSet: LocalizationTargetSet

  @JsName("GameTargetsSettings")
  public open var gameTargetsSettings: Array<LocalizationTargetSettings>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalizationSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalizationSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalizationSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalizationSettings

    @JsName("C")
    public fun copy(other: UObject): LocalizationSettings

    @JsName("C")
    public fun copy(other: Any): LocalizationSettings
  }
}

public open external class InternationalizationExportSettings(
  outer: UObject,
) : UObject {
  @JsName("CulturesToGenerate")
  public open var culturesToGenerate: Array<String>

  @JsName("CommandletClass")
  public open var commandletClass: String

  @JsName("SourcePath")
  public open var sourcePath: String

  @JsName("DestinationPath")
  public open var destinationPath: String

  @JsName("PortableObjectName")
  public open var portableObjectName: String

  @JsName("ManifestName")
  public open var manifestName: String

  @JsName("ArchiveName")
  public open var archiveName: String

  @JsName("bExportLoc")
  public open var exportLoc: Boolean

  @JsName("bImportLoc")
  public open var importLoc: Boolean

  @JsName("bUseCultureDirectory")
  public open var useCultureDirectory: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InternationalizationExportSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InternationalizationExportSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InternationalizationExportSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InternationalizationExportSettings

    @JsName("C")
    public fun copy(other: UObject): InternationalizationExportSettings

    @JsName("C")
    public fun copy(other: Any): InternationalizationExportSettings
  }
}

public open external class TranslationPickerSettings(
  outer: UObject,
) : UObject {
  @JsName("bSubmitTranslationPickerChangesToLocalizationService")
  public open var submitTranslationPickerChangesToLocalizationService: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TranslationPickerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TranslationPickerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TranslationPickerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TranslationPickerSettings

    @JsName("C")
    public fun copy(other: UObject): TranslationPickerSettings

    @JsName("C")
    public fun copy(other: Any): TranslationPickerSettings
  }
}

@JsName("T$621")
public external interface Object621 {
  @JsName("Year")
  public var year: Number

  @JsName("Month")
  public var month: Number

  @JsName("Day")
  public var day: Number

  @JsName("Hour")
  public var hour: Number

  @JsName("Minute")
  public var minute: Number

  @JsName("Second")
  public var second: Number

  @JsName("Millisecond")
  public var millisecond: Number
}

public open external class DateTime {
  public open fun clone(): DateTime

  @JsName("AsDate_DateTime")
  public open fun asDateDateTime(): String

  @JsName("AsDateTime_DateTime")
  public open fun asDateTimeDateTime(): String

  @JsName("AsTime_DateTime")
  public open fun asTimeDateTime(): String

  @JsName("AsTimeZoneDate_DateTime")
  public open fun asTimeZoneDateDateTime(inTimeZone: String): String

  @JsName("AsTimeZoneDateTime_DateTime")
  public open fun asTimeZoneDateTimeDateTime(inTimeZone: String): String

  @JsName("AsTimeZoneTime_DateTime")
  public open fun asTimeZoneTimeDateTime(inTimeZone: String): String

  @JsName("Add_DateTimeDateTime")
  public open fun addDateTimeDateTime(b: DateTime): DateTime

  @JsName("Add_DateTimeTimespan")
  public open fun addDateTimeTimespan(b: Timespan): DateTime

  @JsName("BreakDateTime")
  public open fun breakDateTime(
    year: Number,
    month: Number,
    day: Number,
    hour: Number,
    minute: Number,
    second: Number,
    millisecond: Number,
  ): Object621

  @JsName("EqualEqual_DateTimeDateTime")
  public open fun equalEqualDateTimeDateTime(b: DateTime): Boolean

  @JsName("GetDate")
  public open fun getDate(): DateTime

  @JsName("GetDay")
  public open fun getDay(): Number

  @JsName("GetDayOfYear")
  public open fun getDayOfYear(): Number

  @JsName("GetHour")
  public open fun getHour(): Number

  @JsName("GetHour12")
  public open fun getHour12(): Number

  @JsName("GetMillisecond")
  public open fun getMillisecond(): Number

  @JsName("GetMinute")
  public open fun getMinute(): Number

  @JsName("GetMonth")
  public open fun getMonth(): Number

  @JsName("GetSecond")
  public open fun getSecond(): Number

  @JsName("GetTimeOfDay")
  public open fun getTimeOfDay(): Timespan

  @JsName("GetYear")
  public open fun getYear(): Number

  @JsName("Greater_DateTimeDateTime")
  public open fun greaterDateTimeDateTime(b: DateTime): Boolean

  @JsName("GreaterEqual_DateTimeDateTime")
  public open fun greaterEqualDateTimeDateTime(b: DateTime): Boolean

  @JsName("IsAfternoon")
  public open fun isAfternoon(): Boolean

  @JsName("IsMorning")
  public open fun isMorning(): Boolean

  @JsName("Less_DateTimeDateTime")
  public open fun lessDateTimeDateTime(b: DateTime): Boolean

  @JsName("LessEqual_DateTimeDateTime")
  public open fun lessEqualDateTimeDateTime(b: DateTime): Boolean

  @JsName("NotEqual_DateTimeDateTime")
  public open fun notEqualDateTimeDateTime(b: DateTime): Boolean

  @JsName("Subtract_DateTimeDateTime")
  public open fun subtractDateTimeDateTime(b: DateTime): Timespan

  @JsName("Subtract_DateTimeTimespan")
  public open fun subtractDateTimeTimespan(b: Timespan): DateTime

  @JsName("ScheduleLocalNotificationAtTime")
  public open fun scheduleLocalNotificationAtTime(
    localTime: Boolean,
    title: String,
    body: String,
    action: String,
    activationEvent: String,
  ): Number

  @JsName("ScheduleLocalNotificationBadgeAtTime")
  public open fun scheduleLocalNotificationBadgeAtTime(localTime: Boolean, activationEvent: String):
      Number

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DateTime

    @JsName("C")
    public fun copy(other: Any): DateTime

    @JsName("AsDate_DateTime")
    public fun asDateDateTime(inDateTime: DateTime): String

    @JsName("AsDateTime_DateTime")
    public fun asDateTimeDateTime(`in`: DateTime): String

    @JsName("AsTime_DateTime")
    public fun asTimeDateTime(`in`: DateTime): String

    @JsName("AsTimeZoneDate_DateTime")
    public fun asTimeZoneDateDateTime(inDateTime: DateTime, inTimeZone: String): String

    @JsName("AsTimeZoneDateTime_DateTime")
    public fun asTimeZoneDateTimeDateTime(inDateTime: DateTime, inTimeZone: String): String

    @JsName("AsTimeZoneTime_DateTime")
    public fun asTimeZoneTimeDateTime(inDateTime: DateTime, inTimeZone: String): String

    @JsName("Add_DateTimeDateTime")
    public fun addDateTimeDateTime(a: DateTime, b: DateTime): DateTime

    @JsName("Add_DateTimeTimespan")
    public fun addDateTimeTimespan(a: DateTime, b: Timespan): DateTime

    @JsName("BreakDateTime")
    public fun breakDateTime(
      inDateTime: DateTime,
      year: Number,
      month: Number,
      day: Number,
      hour: Number,
      minute: Number,
      second: Number,
      millisecond: Number,
    ): Object621

    @JsName("EqualEqual_DateTimeDateTime")
    public fun equalEqualDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("GetDate")
    public fun getDate(a: DateTime): DateTime

    @JsName("GetDay")
    public fun getDay(a: DateTime): Number

    @JsName("GetDayOfYear")
    public fun getDayOfYear(a: DateTime): Number

    @JsName("GetHour")
    public fun getHour(a: DateTime): Number

    @JsName("GetHour12")
    public fun getHour12(a: DateTime): Number

    @JsName("GetMillisecond")
    public fun getMillisecond(a: DateTime): Number

    @JsName("GetMinute")
    public fun getMinute(a: DateTime): Number

    @JsName("GetMonth")
    public fun getMonth(a: DateTime): Number

    @JsName("GetSecond")
    public fun getSecond(a: DateTime): Number

    @JsName("GetTimeOfDay")
    public fun getTimeOfDay(a: DateTime): Timespan

    @JsName("GetYear")
    public fun getYear(a: DateTime): Number

    @JsName("Greater_DateTimeDateTime")
    public fun greaterDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("GreaterEqual_DateTimeDateTime")
    public fun greaterEqualDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("IsAfternoon")
    public fun isAfternoon(a: DateTime): Boolean

    @JsName("IsMorning")
    public fun isMorning(a: DateTime): Boolean

    @JsName("Less_DateTimeDateTime")
    public fun lessDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("LessEqual_DateTimeDateTime")
    public fun lessEqualDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("NotEqual_DateTimeDateTime")
    public fun notEqualDateTimeDateTime(a: DateTime, b: DateTime): Boolean

    @JsName("Subtract_DateTimeDateTime")
    public fun subtractDateTimeDateTime(a: DateTime, b: DateTime): Timespan

    @JsName("Subtract_DateTimeTimespan")
    public fun subtractDateTimeTimespan(a: DateTime, b: Timespan): DateTime

    @JsName("ScheduleLocalNotificationAtTime")
    public fun scheduleLocalNotificationAtTime(
      fireDateTime: DateTime,
      localTime: Boolean,
      title: String,
      body: String,
      action: String,
      activationEvent: String,
    ): Number

    @JsName("ScheduleLocalNotificationBadgeAtTime")
    public fun scheduleLocalNotificationBadgeAtTime(
      fireDateTime: DateTime,
      localTime: Boolean,
      activationEvent: String,
    ): Number

    @JsName("DateTimeMaxValue")
    public fun dateTimeMaxValue(): DateTime

    @JsName("DateTimeMinValue")
    public fun dateTimeMinValue(): DateTime

    @JsName("MakeDateTime")
    public fun makeDateTime(
      year: Number,
      month: Number,
      day: Number,
      hour: Number,
      minute: Number,
      second: Number,
      millisecond: Number,
    ): DateTime

    @JsName("Now")
    public fun now(): DateTime

    @JsName("Today")
    public fun today(): DateTime

    @JsName("UtcNow")
    public fun utcNow(): DateTime
  }
}

public open external class TranslationChange {
  @JsName("Version")
  public open var version: String

  @JsName("DateAndTime")
  public open var dateAndTime: DateTime

  @JsName("Source")
  public open var source: String

  @JsName("Translation")
  public open var translation: String

  public open fun clone(): TranslationChange

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TranslationChange

    @JsName("C")
    public fun copy(other: Any): TranslationChange
  }
}

public open external class TranslationContextInfo {
  @JsName("Key")
  public open var key: String

  @JsName("Context")
  public open var context: String

  @JsName("Changes")
  public open var changes: Array<TranslationChange>

  public open fun clone(): TranslationContextInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TranslationContextInfo

    @JsName("C")
    public fun copy(other: Any): TranslationContextInfo
  }
}

public open external class TranslationUnit(
  outer: UObject,
) : UObject {
  @JsName("Namespace")
  public open var namespace: String

  @JsName("Key")
  public open var key: String

  @JsName("Source")
  public open var source: String

  @JsName("Translation")
  public open var translation: String

  @JsName("Contexts")
  public open var contexts: Array<TranslationContextInfo>

  @JsName("HasBeenReviewed")
  public open var hasBeenReviewed: Boolean

  @JsName("TranslationBeforeImport")
  public open var translationBeforeImport: String

  @JsName("LocresPath")
  public open var locresPath: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TranslationUnit

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TranslationUnit

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TranslationUnit

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TranslationUnit

    @JsName("C")
    public fun copy(other: UObject): TranslationUnit

    @JsName("C")
    public fun copy(other: Any): TranslationUnit
  }
}

public open external class StatusBarSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StatusBarSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StatusBarSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StatusBarSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StatusBarSubsystem

    @JsName("C")
    public fun copy(other: UObject): StatusBarSubsystem

    @JsName("C")
    public fun copy(other: Any): StatusBarSubsystem
  }
}

public open external class LevelEditorMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditorMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditorMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditorMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditorMenuContext

    @JsName("C")
    public fun copy(other: UObject): LevelEditorMenuContext

    @JsName("C")
    public fun copy(other: Any): LevelEditorMenuContext
  }
}

@JsName("ELevelEditorMenuContext")
public external object LevelEditorMenuContextEnum {
  public var Viewport: String

  public var SceneOutliner: String

  public var MainMenu: String

  @JsName("ELevelEditorMenuContext_MAX")
  public var Max: String
}

public open external class LevelEditorContextMenuContext(
  outer: UObject,
) : UObject {
  @JsName("ContextType")
  public open var contextType: String

  @JsName("CurrentSelection")
  public open var currentSelection: TypedElementSelectionSet

  @JsName("CursorWorldLocation")
  public open var cursorWorldLocation: Vector

  @JsName("SelectedComponents")
  public open var selectedComponents: Array<ActorComponent>

  @JsName("HitProxyActor")
  public open var hitProxyActor: Actor

  @JsName("GetScriptHitProxyElement")
  public open fun getScriptHitProxyElement(): ScriptTypedElementHandle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditorContextMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditorContextMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditorContextMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditorContextMenuContext

    @JsName("C")
    public fun copy(other: UObject): LevelEditorContextMenuContext

    @JsName("C")
    public fun copy(other: Any): LevelEditorContextMenuContext
  }
}

public open external class LevelViewportToolBarContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelViewportToolBarContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelViewportToolBarContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelViewportToolBarContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelViewportToolBarContext

    @JsName("C")
    public fun copy(other: UObject): LevelViewportToolBarContext

    @JsName("C")
    public fun copy(other: Any): LevelViewportToolBarContext
  }
}

public open external class QuickActionMenuContext(
  outer: UObject,
) : UObject {
  @JsName("CurrentSelection")
  public open var currentSelection: TypedElementSelectionSet

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): QuickActionMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): QuickActionMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): QuickActionMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): QuickActionMenuContext

    @JsName("C")
    public fun copy(other: UObject): QuickActionMenuContext

    @JsName("C")
    public fun copy(other: Any): QuickActionMenuContext
  }
}

public open external class LevelEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("SetCurrentLevelByName")
  public open fun setCurrentLevelByName(levelName: String): Boolean

  @JsName("SetAllowsCinematicControl")
  public open fun setAllowsCinematicControl(allow: Boolean, viewportConfigKey: String): Unit

  @JsName("SaveCurrentLevel")
  public open fun saveCurrentLevel(): Boolean

  @JsName("SaveAllDirtyLevels")
  public open fun saveAllDirtyLevels(): Boolean

  @JsName("PilotLevelActor")
  public open fun pilotLevelActor(actorToPilot: Actor, viewportConfigKey: String): Unit

  @JsName("NewLevelFromTemplate")
  public open fun newLevelFromTemplate(assetPath: String, templateAssetPath: String): Boolean

  @JsName("NewLevel")
  public open fun newLevel(assetPath: String): Boolean

  @JsName("LoadLevel")
  public open fun loadLevel(assetPath: String): Boolean

  @JsName("IsInPlayInEditor")
  public open fun isInPlayInEditor(): Boolean

  @JsName("GetViewportConfigKeys")
  public open fun getViewportConfigKeys(): Array<String>

  @JsName("GetSelectionSet")
  public open fun getSelectionSet(): TypedElementSelectionSet

  @JsName("GetCurrentLevel")
  public open fun getCurrentLevel(): Level

  @JsName("GetAllowsCinematicControl")
  public open fun getAllowsCinematicControl(viewportConfigKey: String): Boolean

  @JsName("GetActiveViewportConfigKey")
  public open fun getActiveViewportConfigKey(): String

  @JsName("EjectPilotLevelActor")
  public open fun ejectPilotLevelActor(viewportConfigKey: String): Unit

  @JsName("EditorSetGameView")
  public open fun editorSetGameView(gameView: Boolean, viewportConfigKey: String): Unit

  @JsName("EditorRequestEndPlay")
  public open fun editorRequestEndPlay(): Unit

  @JsName("EditorPlaySimulate")
  public open fun editorPlaySimulate(): Unit

  @JsName("EditorInvalidateViewports")
  public open fun editorInvalidateViewports(): Unit

  @JsName("EditorGetGameView")
  public open fun editorGetGameView(viewportConfigKey: String): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): LevelEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): LevelEditorSubsystem
  }
}

public open external class LightEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): LightEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): LightEditorSubsystem
  }
}

@JsName("AssetEditorUISubsystem")
public open external class AssetEditorUiSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetEditorUiSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetEditorUiSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetEditorUiSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetEditorUiSubsystem

    @JsName("C")
    public fun copy(other: UObject): AssetEditorUiSubsystem

    @JsName("C")
    public fun copy(other: Any): AssetEditorUiSubsystem
  }
}

@JsName("LevelEditorUISubsystem")
public open external class LevelEditorUiSubsystem(
  outer: UObject,
) : AssetEditorUiSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LevelEditorUiSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LevelEditorUiSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LevelEditorUiSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LevelEditorUiSubsystem

    @JsName("C")
    public fun copy(other: UObject): LevelEditorUiSubsystem

    @JsName("C")
    public fun copy(other: Any): LevelEditorUiSubsystem
  }
}

public open external class Manipulator(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("AssociatedComponent")
  public open var associatedComponent: SceneComponent

  @JsName("StaticMeshComponent")
  public open var staticMeshComponent: StaticMeshComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Manipulator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Manipulator

    @JsName("C")
    public fun copy(other: UObject): Manipulator

    @JsName("C")
    public fun copy(other: Any): Manipulator
  }
}

public open external class PropertyNameAndIndex {
  @JsName("Name")
  public open var name: String

  public open var index: Number

  public open fun clone(): PropertyNameAndIndex

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyNameAndIndex

    @JsName("C")
    public fun copy(other: Any): PropertyNameAndIndex
  }
}

public open external class ComponentPropertyPath {
  @JsName("ParentOwningActor")
  public open var parentOwningActor: Any

  @JsName("LastResortComponentPtr")
  public open var lastResortComponentPtr: Any

  @JsName("PropertyChain")
  public open var propertyChain: Array<PropertyNameAndIndex>

  public open fun clone(): ComponentPropertyPath

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ComponentPropertyPath

    @JsName("C")
    public fun copy(other: Any): ComponentPropertyPath
  }
}

@JsName("ESelectedTangentHandle")
public external object SelectedTangentHandle {
  public var None: String

  public var Leave: String

  public var Arrive: String

  @JsName("ESelectedTangentHandle_MAX")
  public var Max: String
}

public open external class SplineComponentVisualizerSelectionState(
  outer: UObject,
) : UObject {
  @JsName("SplinePropertyPath")
  public open var splinePropertyPath: ComponentPropertyPath

  @JsName("SelectedKeys")
  public open var selectedKeys: Any

  @JsName("LastKeyIndexSelected")
  public open var lastKeyIndexSelected: Number

  @JsName("SelectedSegmentIndex")
  public open var selectedSegmentIndex: Number

  @JsName("SelectedTangentHandle")
  public open var selectedTangentHandle: Number

  @JsName("SelectedTangentHandleType")
  public open var selectedTangentHandleType: String

  @JsName("SelectedSplinePosition")
  public open var selectedSplinePosition: Vector

  @JsName("CachedRotation")
  public open var cachedRotation: Quat

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplineComponentVisualizerSelectionState

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplineComponentVisualizerSelectionState

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplineComponentVisualizerSelectionState

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplineComponentVisualizerSelectionState

    @JsName("C")
    public fun copy(other: UObject): SplineComponentVisualizerSelectionState

    @JsName("C")
    public fun copy(other: Any): SplineComponentVisualizerSelectionState
  }
}

@JsName("EShapeAddMode")
public external object ShapeAddMode {
  public var AppendAfter: String

  public var AppendBefore: String

  public var InsertAfter: String

  public var InsertBefore: String

  @JsName("EShapeAddMode_MAX")
  public var Max: String
}

public open external class SplineGeneratorBase(
  outer: UObject,
) : UObject {
  @JsName("ShapeAddMode")
  public open var shapeAddMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplineGeneratorBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplineGeneratorBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplineGeneratorBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplineGeneratorBase

    @JsName("C")
    public fun copy(other: UObject): SplineGeneratorBase

    @JsName("C")
    public fun copy(other: Any): SplineGeneratorBase
  }
}

public open external class CircleSplineGenerator(
  outer: UObject,
) : SplineGeneratorBase {
  @JsName("NumberOfPoints")
  public open var numberOfPoints: Number

  @JsName("Radius")
  public open var radius: Number

  @JsName("bReverseDir")
  public open var reverseDir: Boolean

  @JsName("bKeepFirstKeyTangent")
  public open var keepFirstKeyTangent: Boolean

  @JsName("bBranchRight")
  public open var branchRight: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CircleSplineGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CircleSplineGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CircleSplineGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CircleSplineGenerator

    @JsName("C")
    public fun copy(other: UObject): CircleSplineGenerator

    @JsName("C")
    public fun copy(other: Any): CircleSplineGenerator
  }
}

public open external class ArcSplineGenerator(
  outer: UObject,
) : SplineGeneratorBase {
  @JsName("NumberOfPoints")
  public open var numberOfPoints: Number

  @JsName("Radius")
  public open var radius: Number

  @JsName("Degrees")
  public open var degrees: Number

  @JsName("bReverseDir")
  public open var reverseDir: Boolean

  @JsName("bKeepFirstKeyTangent")
  public open var keepFirstKeyTangent: Boolean

  @JsName("bBranchRight")
  public open var branchRight: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ArcSplineGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ArcSplineGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ArcSplineGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ArcSplineGenerator

    @JsName("C")
    public fun copy(other: UObject): ArcSplineGenerator

    @JsName("C")
    public fun copy(other: Any): ArcSplineGenerator
  }
}

public open external class SquareSplineGenerator(
  outer: UObject,
) : SplineGeneratorBase {
  @JsName("Length")
  public open var length: Number

  @JsName("bBranchRight")
  public open var branchRight: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SquareSplineGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SquareSplineGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SquareSplineGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SquareSplineGenerator

    @JsName("C")
    public fun copy(other: UObject): SquareSplineGenerator

    @JsName("C")
    public fun copy(other: Any): SquareSplineGenerator
  }
}

public open external class EllipseSplineGenerator(
  outer: UObject,
) : SplineGeneratorBase {
  @JsName("NumberOfPoints")
  public open var numberOfPoints: Number

  @JsName("Length")
  public open var length: Number

  @JsName("Width")
  public open var width: Number

  @JsName("bReverseDir")
  public open var reverseDir: Boolean

  @JsName("bKeepFirstKeyTangent")
  public open var keepFirstKeyTangent: Boolean

  @JsName("bBranchRight")
  public open var branchRight: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EllipseSplineGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EllipseSplineGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EllipseSplineGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EllipseSplineGenerator

    @JsName("C")
    public fun copy(other: UObject): EllipseSplineGenerator

    @JsName("C")
    public fun copy(other: Any): EllipseSplineGenerator
  }
}

public open external class RectangleSplineGenerator(
  outer: UObject,
) : SplineGeneratorBase {
  @JsName("Length")
  public open var length: Number

  @JsName("Width")
  public open var width: Number

  @JsName("bBranchRight")
  public open var branchRight: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RectangleSplineGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RectangleSplineGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RectangleSplineGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RectangleSplineGenerator

    @JsName("C")
    public fun copy(other: UObject): RectangleSplineGenerator

    @JsName("C")
    public fun copy(other: Any): RectangleSplineGenerator
  }
}

public open external class LineSplineGenerator(
  outer: UObject,
) : SplineGeneratorBase {
  @JsName("NumberOfPoints")
  public open var numberOfPoints: Number

  @JsName("Length")
  public open var length: Number

  @JsName("bEnableUpToNextPoint")
  public open var enableUpToNextPoint: Boolean

  @JsName("bUpToNextPoint")
  public open var upToNextPoint: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LineSplineGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LineSplineGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LineSplineGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LineSplineGenerator

    @JsName("C")
    public fun copy(other: UObject): LineSplineGenerator

    @JsName("C")
    public fun copy(other: Any): LineSplineGenerator
  }
}

public open external class GameplayTaskOwnerInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTaskOwnerInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTaskOwnerInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTaskOwnerInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTaskOwnerInterface

    @JsName("C")
    public fun copy(other: UObject): GameplayTaskOwnerInterface

    @JsName("C")
    public fun copy(other: Any): GameplayTaskOwnerInterface
  }
}

@JsName("GameplayTask_ClaimResource")
public open external class GameplayTaskClaimResource(
  outer: UObject,
) : GameplayTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTaskClaimResource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTaskClaimResource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTaskClaimResource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTaskClaimResource

    @JsName("C")
    public fun copy(other: UObject): GameplayTaskClaimResource

    @JsName("C")
    public fun copy(other: Any): GameplayTaskClaimResource
  }
}

@JsName("T$622")
public external interface Object622 {
  @JsName("SpawnedActor")
  public var spawnedActor: Actor

  @JsName("$")
  public var value: Boolean
}

@JsName("GameplayTask_SpawnActor")
public open external class GameplayTaskSpawnActor(
  outer: UObject,
) : GameplayTask {
  @JsName("Success")
  public open var success: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) -> Unit>

  @JsName("DidNotSpawn")
  public open var didNotSpawn: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) -> Unit>

  @JsName("ClassToSpawn")
  public open var classToSpawn: UnrealEngineClass

  @JsName("FinishSpawningActor")
  public open fun finishSpawningActor(worldContextObject: UObject, spawnedActor: Actor): Unit

  @JsName("BeginSpawningActor")
  public open fun beginSpawningActor(worldContextObject: UObject, spawnedActor: Actor): Object622

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTaskSpawnActor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTaskSpawnActor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTaskSpawnActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTaskSpawnActor

    @JsName("C")
    public fun copy(other: UObject): GameplayTaskSpawnActor

    @JsName("C")
    public fun copy(other: Any): GameplayTaskSpawnActor
  }
}

@JsName("GameplayTask_TimeLimitedExecution")
public open external class GameplayTaskTimeLimitedExecution(
  outer: UObject,
) : GameplayTask {
  @JsName("OnFinished")
  public open var onFinished: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnTimeExpired")
  public open var onTimeExpired: UnrealEngineMulticastDelegate<() -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTaskTimeLimitedExecution

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTaskTimeLimitedExecution

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTaskTimeLimitedExecution

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTaskTimeLimitedExecution

    @JsName("C")
    public fun copy(other: UObject): GameplayTaskTimeLimitedExecution

    @JsName("C")
    public fun copy(other: Any): GameplayTaskTimeLimitedExecution
  }
}

@JsName("GameplayTask_WaitDelay")
public open external class GameplayTaskWaitDelay(
  outer: UObject,
) : GameplayTask {
  @JsName("OnFinish")
  public open var onFinish: UnrealEngineMulticastDelegate<() -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTaskWaitDelay

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTaskWaitDelay

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTaskWaitDelay

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTaskWaitDelay

    @JsName("C")
    public fun copy(other: UObject): GameplayTaskWaitDelay

    @JsName("C")
    public fun copy(other: Any): GameplayTaskWaitDelay
  }
}

public open external class BlueprintGameplayTagLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintGameplayTagLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintGameplayTagLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintGameplayTagLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintGameplayTagLibrary

    @JsName("RemoveGameplayTag")
    public fun removeGameplayTag(tagContainer: GameplayTagContainer, tag: GameplayTag): Object308

    @JsName("NotEqual_TagTag")
    public fun notEqualTagTag(a: GameplayTag, b: String): Boolean

    @JsName("NotEqual_TagContainerTagContainer")
    public fun notEqualTagContainerTagContainer(a: GameplayTagContainer, b: String): Boolean

    @JsName("NotEqual_GameplayTagContainer")
    public fun notEqualGameplayTagContainer(a: GameplayTagContainer, b: GameplayTagContainer):
        Boolean

    @JsName("NotEqual_GameplayTag")
    public fun notEqualGameplayTag(a: GameplayTag, b: GameplayTag): Boolean

    @JsName("MatchesTag")
    public fun matchesTag(
      tagOne: GameplayTag,
      tagTwo: GameplayTag,
      exactMatch: Boolean,
    ): Boolean

    @JsName("MatchesAnyTags")
    public fun matchesAnyTags(
      tagOne: GameplayTag,
      otherContainer: GameplayTagContainer,
      exactMatch: Boolean,
    ): Boolean

    @JsName("MakeLiteralGameplayTagContainer")
    public fun makeLiteralGameplayTagContainer(value: GameplayTagContainer): GameplayTagContainer

    @JsName("MakeLiteralGameplayTag")
    public fun makeLiteralGameplayTag(value: GameplayTag): GameplayTag

    @JsName("MakeGameplayTagQuery")
    public fun makeGameplayTagQuery(tagQuery: GameplayTagQuery): GameplayTagQuery

    @JsName("MakeGameplayTagContainerFromTag")
    public fun makeGameplayTagContainerFromTag(singleTag: GameplayTag): GameplayTagContainer

    @JsName("MakeGameplayTagContainerFromArray")
    public fun makeGameplayTagContainerFromArray(gameplayTags: Array<GameplayTag>):
        GameplayTagContainer

    @JsName("IsTagQueryEmpty")
    public fun isTagQueryEmpty(tagQuery: GameplayTagQuery): Boolean

    @JsName("IsGameplayTagValid")
    public fun isGameplayTagValid(gameplayTag: GameplayTag): Boolean

    @JsName("HasTag")
    public fun hasTag(
      tagContainer: GameplayTagContainer,
      tag: GameplayTag,
      exactMatch: Boolean,
    ): Boolean

    @JsName("HasAnyTags")
    public fun hasAnyTags(
      tagContainer: GameplayTagContainer,
      otherContainer: GameplayTagContainer,
      exactMatch: Boolean,
    ): Boolean

    @JsName("HasAllTags")
    public fun hasAllTags(
      tagContainer: GameplayTagContainer,
      otherContainer: GameplayTagContainer,
      exactMatch: Boolean,
    ): Boolean

    @JsName("GetTagName")
    public fun getTagName(gameplayTag: GameplayTag): String

    @JsName("GetNumGameplayTagsInContainer")
    public fun getNumGameplayTagsInContainer(tagContainer: GameplayTagContainer): Number

    @JsName("GetDebugStringFromGameplayTagContainer")
    public fun getDebugStringFromGameplayTagContainer(tagContainer: GameplayTagContainer): String

    @JsName("GetDebugStringFromGameplayTag")
    public fun getDebugStringFromGameplayTag(gameplayTag: GameplayTag): String

    @JsName("GetAllActorsOfClassMatchingTagQuery")
    public fun getAllActorsOfClassMatchingTagQuery(
      worldContextObject: UObject,
      actorClass: UnrealEngineClass,
      gameplayTagQuery: GameplayTagQuery,
      outActors: Array<Actor>,
    ): OutActorsProvider

    @JsName("EqualEqual_GameplayTagContainer")
    public fun equalEqualGameplayTagContainer(a: GameplayTagContainer, b: GameplayTagContainer):
        Boolean

    @JsName("EqualEqual_GameplayTag")
    public fun equalEqualGameplayTag(a: GameplayTag, b: GameplayTag): Boolean

    @JsName("DoesContainerMatchTagQuery")
    public fun doesContainerMatchTagQuery(tagContainer: GameplayTagContainer,
        tagQuery: GameplayTagQuery): Boolean

    @JsName("BreakGameplayTagContainer")
    public fun breakGameplayTagContainer(gameplayTagContainer: GameplayTagContainer,
        gameplayTags: Array<GameplayTag>): GameplayTagsProvider

    @JsName("AppendGameplayTagContainers")
    public fun appendGameplayTagContainers(inOutTagContainer: GameplayTagContainer,
        inTagContainer: GameplayTagContainer): InOutTagContainerProvider

    @JsName("AddGameplayTag")
    public fun addGameplayTag(tagContainer: GameplayTagContainer, tag: GameplayTag):
        TagContainerProvider

    @JsName("C")
    public fun copy(other: UObject): BlueprintGameplayTagLibrary

    @JsName("C")
    public fun copy(other: Any): BlueprintGameplayTagLibrary
  }
}

public open external class GameplayTagAssetInterface(
  outer: UObject,
) : Interface {
  @JsName("HasMatchingGameplayTag")
  public open fun hasMatchingGameplayTag(tagToCheck: GameplayTag): Boolean

  @JsName("HasAnyMatchingGameplayTags")
  public open fun hasAnyMatchingGameplayTags(tagContainer: GameplayTagContainer): Boolean

  @JsName("HasAllMatchingGameplayTags")
  public open fun hasAllMatchingGameplayTags(tagContainer: GameplayTagContainer): Boolean

  @JsName("GetOwnedGameplayTags")
  public open fun getOwnedGameplayTags(tagContainer: GameplayTagContainer): TagContainerProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTagAssetInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTagAssetInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTagAssetInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTagAssetInterface

    @JsName("C")
    public fun copy(other: UObject): GameplayTagAssetInterface

    @JsName("C")
    public fun copy(other: Any): GameplayTagAssetInterface
  }
}

public open external class EditableGameplayTagQueryExpression(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableGameplayTagQueryExpression

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditableGameplayTagQueryExpression

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableGameplayTagQueryExpression

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableGameplayTagQueryExpression

    @JsName("C")
    public fun copy(other: UObject): EditableGameplayTagQueryExpression

    @JsName("C")
    public fun copy(other: Any): EditableGameplayTagQueryExpression
  }
}

public open external class EditableGameplayTagQuery(
  outer: UObject,
) : UObject {
  @JsName("UserDescription")
  public open var userDescription: String

  @JsName("RootExpression")
  public open var rootExpression: EditableGameplayTagQueryExpression

  @JsName("TagQueryExportText_Helper")
  public open var tagQueryExportTextHelper: GameplayTagQuery

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableGameplayTagQuery

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditableGameplayTagQuery

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableGameplayTagQuery

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableGameplayTagQuery

    @JsName("C")
    public fun copy(other: UObject): EditableGameplayTagQuery

    @JsName("C")
    public fun copy(other: Any): EditableGameplayTagQuery
  }
}

@JsName("EditableGameplayTagQueryExpression_AnyTagsMatch")
public open external class EditableGameplayTagQueryExpressionAnyTagsMatch(
  outer: UObject,
) : EditableGameplayTagQueryExpression {
  @JsName("Tags")
  public open var tags: GameplayTagContainer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableGameplayTagQueryExpressionAnyTagsMatch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        EditableGameplayTagQueryExpressionAnyTagsMatch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableGameplayTagQueryExpressionAnyTagsMatch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableGameplayTagQueryExpressionAnyTagsMatch

    @JsName("C")
    public fun copy(other: UObject): EditableGameplayTagQueryExpressionAnyTagsMatch

    @JsName("C")
    public fun copy(other: Any): EditableGameplayTagQueryExpressionAnyTagsMatch
  }
}

@JsName("EditableGameplayTagQueryExpression_AllTagsMatch")
public open external class EditableGameplayTagQueryExpressionAllTagsMatch(
  outer: UObject,
) : EditableGameplayTagQueryExpression {
  @JsName("Tags")
  public open var tags: GameplayTagContainer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableGameplayTagQueryExpressionAllTagsMatch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        EditableGameplayTagQueryExpressionAllTagsMatch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableGameplayTagQueryExpressionAllTagsMatch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableGameplayTagQueryExpressionAllTagsMatch

    @JsName("C")
    public fun copy(other: UObject): EditableGameplayTagQueryExpressionAllTagsMatch

    @JsName("C")
    public fun copy(other: Any): EditableGameplayTagQueryExpressionAllTagsMatch
  }
}

@JsName("EditableGameplayTagQueryExpression_NoTagsMatch")
public open external class EditableGameplayTagQueryExpressionNoTagsMatch(
  outer: UObject,
) : EditableGameplayTagQueryExpression {
  @JsName("Tags")
  public open var tags: GameplayTagContainer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableGameplayTagQueryExpressionNoTagsMatch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        EditableGameplayTagQueryExpressionNoTagsMatch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableGameplayTagQueryExpressionNoTagsMatch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableGameplayTagQueryExpressionNoTagsMatch

    @JsName("C")
    public fun copy(other: UObject): EditableGameplayTagQueryExpressionNoTagsMatch

    @JsName("C")
    public fun copy(other: Any): EditableGameplayTagQueryExpressionNoTagsMatch
  }
}

@JsName("EditableGameplayTagQueryExpression_AnyExprMatch")
public open external class EditableGameplayTagQueryExpressionAnyExprMatch(
  outer: UObject,
) : EditableGameplayTagQueryExpression {
  @JsName("Expressions")
  public open var expressions: Array<EditableGameplayTagQueryExpression>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableGameplayTagQueryExpressionAnyExprMatch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        EditableGameplayTagQueryExpressionAnyExprMatch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableGameplayTagQueryExpressionAnyExprMatch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableGameplayTagQueryExpressionAnyExprMatch

    @JsName("C")
    public fun copy(other: UObject): EditableGameplayTagQueryExpressionAnyExprMatch

    @JsName("C")
    public fun copy(other: Any): EditableGameplayTagQueryExpressionAnyExprMatch
  }
}

@JsName("EditableGameplayTagQueryExpression_AllExprMatch")
public open external class EditableGameplayTagQueryExpressionAllExprMatch(
  outer: UObject,
) : EditableGameplayTagQueryExpression {
  @JsName("Expressions")
  public open var expressions: Array<EditableGameplayTagQueryExpression>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableGameplayTagQueryExpressionAllExprMatch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        EditableGameplayTagQueryExpressionAllExprMatch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableGameplayTagQueryExpressionAllExprMatch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableGameplayTagQueryExpressionAllExprMatch

    @JsName("C")
    public fun copy(other: UObject): EditableGameplayTagQueryExpressionAllExprMatch

    @JsName("C")
    public fun copy(other: Any): EditableGameplayTagQueryExpressionAllExprMatch
  }
}

@JsName("EditableGameplayTagQueryExpression_NoExprMatch")
public open external class EditableGameplayTagQueryExpressionNoExprMatch(
  outer: UObject,
) : EditableGameplayTagQueryExpression {
  @JsName("Expressions")
  public open var expressions: Array<EditableGameplayTagQueryExpression>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableGameplayTagQueryExpressionNoExprMatch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        EditableGameplayTagQueryExpressionNoExprMatch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableGameplayTagQueryExpressionNoExprMatch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableGameplayTagQueryExpressionNoExprMatch

    @JsName("C")
    public fun copy(other: UObject): EditableGameplayTagQueryExpressionNoExprMatch

    @JsName("C")
    public fun copy(other: Any): EditableGameplayTagQueryExpressionNoExprMatch
  }
}

public open external class GameplayTagsManager(
  outer: UObject,
) : UObject {
  @JsName("TagSources")
  public open var tagSources: Any

  @JsName("GameplayTagTables")
  public open var gameplayTagTables: Array<DataTable>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTagsManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTagsManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTagsManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTagsManager

    @JsName("C")
    public fun copy(other: UObject): GameplayTagsManager

    @JsName("C")
    public fun copy(other: Any): GameplayTagsManager
  }
}

public open external class GameplayTagTableRow : TableRowBase {
  @JsName("Tag")
  public open var tag: String

  @JsName("DevComment")
  public open var devComment: String

  public override fun clone(): GameplayTagTableRow

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayTagTableRow

    @JsName("C")
    public fun copy(other: Any): GameplayTagTableRow
  }
}

public open external class GameplayTagsList(
  outer: UObject,
) : UObject {
  @JsName("ConfigFileName")
  public open var configFileName: String

  @JsName("GameplayTagList")
  public open var gameplayTagList: Array<GameplayTagTableRow>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTagsList

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTagsList

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTagsList

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTagsList

    @JsName("C")
    public fun copy(other: UObject): GameplayTagsList

    @JsName("C")
    public fun copy(other: Any): GameplayTagsList
  }
}

public open external class RestrictedGameplayTagTableRow : GameplayTagTableRow {
  @JsName("bAllowNonRestrictedChildren")
  public open var allowNonRestrictedChildren: Boolean

  public override fun clone(): RestrictedGameplayTagTableRow

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RestrictedGameplayTagTableRow

    @JsName("C")
    public fun copy(other: Any): RestrictedGameplayTagTableRow
  }
}

public open external class RestrictedGameplayTagsList(
  outer: UObject,
) : UObject {
  @JsName("ConfigFileName")
  public open var configFileName: String

  @JsName("RestrictedGameplayTagList")
  public open var restrictedGameplayTagList: Array<RestrictedGameplayTagTableRow>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RestrictedGameplayTagsList

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RestrictedGameplayTagsList

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RestrictedGameplayTagsList

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RestrictedGameplayTagsList

    @JsName("C")
    public fun copy(other: UObject): RestrictedGameplayTagsList

    @JsName("C")
    public fun copy(other: Any): RestrictedGameplayTagsList
  }
}

public open external class GameplayTagCategoryRemap {
  @JsName("BaseCategory")
  public open var baseCategory: String

  @JsName("RemapCategories")
  public open var remapCategories: Array<String>

  public open fun clone(): GameplayTagCategoryRemap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayTagCategoryRemap

    @JsName("C")
    public fun copy(other: Any): GameplayTagCategoryRemap
  }
}

public open external class GameplayTagRedirect {
  @JsName("OldTagName")
  public open var oldTagName: String

  @JsName("NewTagName")
  public open var newTagName: String

  public open fun clone(): GameplayTagRedirect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayTagRedirect

    @JsName("C")
    public fun copy(other: Any): GameplayTagRedirect
  }
}

public open external class RestrictedConfigInfo {
  @JsName("RestrictedConfigName")
  public open var restrictedConfigName: String

  @JsName("Owners")
  public open var owners: Array<String>

  public open fun clone(): RestrictedConfigInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RestrictedConfigInfo

    @JsName("C")
    public fun copy(other: Any): RestrictedConfigInfo
  }
}

public open external class GameplayTagsSettings(
  outer: UObject,
) : GameplayTagsList {
  @JsName("ImportTagsFromConfig")
  public open var importTagsFromConfig: Boolean

  @JsName("WarnOnInvalidTags")
  public open var warnOnInvalidTags: Boolean

  @JsName("ClearInvalidTags")
  public open var clearInvalidTags: Boolean

  @JsName("FastReplication")
  public open var fastReplication: Boolean

  @JsName("InvalidTagCharacters")
  public open var invalidTagCharacters: String

  @JsName("CategoryRemapping")
  public open var categoryRemapping: Array<GameplayTagCategoryRemap>

  @JsName("GameplayTagTableList")
  public open var gameplayTagTableList: Array<SoftObjectPath>

  @JsName("GameplayTagRedirects")
  public open var gameplayTagRedirects: Array<GameplayTagRedirect>

  @JsName("CommonlyReplicatedTags")
  public open var commonlyReplicatedTags: Array<String>

  @JsName("NumBitsForContainerSize")
  public open var numBitsForContainerSize: Number

  @JsName("NetIndexFirstBitSegment")
  public open var netIndexFirstBitSegment: Number

  @JsName("RestrictedConfigFiles")
  public open var restrictedConfigFiles: Array<RestrictedConfigInfo>

  @JsName("RestrictedTagList")
  public open var restrictedTagList: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTagsSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTagsSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTagsSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTagsSettings

    @JsName("C")
    public fun copy(other: UObject): GameplayTagsSettings

    @JsName("C")
    public fun copy(other: Any): GameplayTagsSettings
  }
}

public open external class GameplayTagsDeveloperSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("DeveloperConfigName")
  public open var developerConfigName: String

  @JsName("FavoriteTagSource")
  public open var favoriteTagSource: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayTagsDeveloperSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayTagsDeveloperSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayTagsDeveloperSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayTagsDeveloperSettings

    @JsName("C")
    public fun copy(other: UObject): GameplayTagsDeveloperSettings

    @JsName("C")
    public fun copy(other: Any): GameplayTagsDeveloperSettings
  }
}

public open external class GameplayDebuggerNetPack {
  public open fun clone(): GameplayDebuggerNetPack

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerNetPack

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerNetPack
  }
}

public open external class GameplayDebuggerDebugActor {
  @JsName("ActorName")
  public open var actorName: String

  @JsName("SyncCounter")
  public open var syncCounter: Number

  public open fun clone(): GameplayDebuggerDebugActor

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerDebugActor

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerDebugActor
  }
}

public open external class GameplayDebuggerVisLogSync {
  @JsName("DeviceIDs")
  public open var deviceIDs: String

  public open fun clone(): GameplayDebuggerVisLogSync

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerVisLogSync

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerVisLogSync
  }
}

public open external class DebugDrawComponent(
  outer: UObject,
) : PrimitiveComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DebugDrawComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DebugDrawComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DebugDrawComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DebugDrawComponent

    @JsName("C")
    public fun copy(other: UObject): DebugDrawComponent

    @JsName("C")
    public fun copy(other: Any): DebugDrawComponent
  }
}

public open external class GameplayDebuggerRenderingComponent(
  outer: UObject,
) : DebugDrawComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayDebuggerRenderingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayDebuggerRenderingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayDebuggerRenderingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayDebuggerRenderingComponent

    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerRenderingComponent

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerRenderingComponent
  }
}

public open external class GameplayDebuggerCategoryReplicator(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("OwnerPC")
  public open var ownerPc: PlayerController

  @JsName("bIsEnabled")
  public open var isEnabled: Boolean

  @JsName("ReplicatedData")
  public open var replicatedData: GameplayDebuggerNetPack

  @JsName("DebugActor")
  public open var debugActor: GameplayDebuggerDebugActor

  @JsName("VisLogSync")
  public open var visLogSync: GameplayDebuggerVisLogSync

  @JsName("RenderingComp")
  public open var renderingComp: GameplayDebuggerRenderingComponent

  @JsName("ServerSetViewPoint")
  public open fun serverSetViewPoint(inViewLocation: Vector, inViewDirection: Vector): Unit

  @JsName("ServerSetEnabled")
  public open fun serverSetEnabled(enable: Boolean): Unit

  @JsName("ServerSetDebugActor")
  public open fun serverSetDebugActor(actor: Actor, selectInEditor: Boolean): Unit

  @JsName("ServerSetCategoryEnabled")
  public open fun serverSetCategoryEnabled(categoryId: Number, enable: Boolean): Unit

  @JsName("ServerSendExtensionInputEvent")
  public open fun serverSendExtensionInputEvent(extensionId: Number, handlerId: Number): Unit

  @JsName("ServerSendCategoryInputEvent")
  public open fun serverSendCategoryInputEvent(categoryId: Number, handlerId: Number): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayDebuggerCategoryReplicator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayDebuggerCategoryReplicator

    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerCategoryReplicator

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerCategoryReplicator
  }
}

@JsName("EGameplayDebuggerOverrideMode")
public external object GameplayDebuggerOverrideMode {
  public var Enable: String

  public var Disable: String

  public var UseDefault: String

  @JsName("EGameplayDebuggerOverrideMode_MAX")
  public var Max: String
}

public open external class GameplayDebuggerInputConfig {
  @JsName("ConfigName")
  public open var configName: String

  @JsName("Key")
  public open var key: Key

  @JsName("bModShift")
  public open var modShift: Boolean

  @JsName("bModCtrl")
  public open var modCtrl: Boolean

  @JsName("bModAlt")
  public open var modAlt: Boolean

  @JsName("bModCmd")
  public open var modCmd: Boolean

  public open fun clone(): GameplayDebuggerInputConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerInputConfig

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerInputConfig
  }
}

public open external class GameplayDebuggerCategoryConfig {
  @JsName("CategoryName")
  public open var categoryName: String

  @JsName("SlotIdx")
  public open var slotIdx: Number

  @JsName("ActiveInGame")
  public open var activeInGame: String

  @JsName("ActiveInSimulate")
  public open var activeInSimulate: String

  @JsName("Hidden")
  public open var hidden: String

  @JsName("bOverrideSlotIdx")
  public open var overrideSlotIdx: Boolean

  @JsName("InputHandlers")
  public open var inputHandlers: Array<GameplayDebuggerInputConfig>

  public open fun clone(): GameplayDebuggerCategoryConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerCategoryConfig

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerCategoryConfig
  }
}

public open external class GameplayDebuggerExtensionConfig {
  @JsName("ExtensionName")
  public open var extensionName: String

  @JsName("UseExtension")
  public open var useExtension: String

  @JsName("InputHandlers")
  public open var inputHandlers: Array<GameplayDebuggerInputConfig>

  public open fun clone(): GameplayDebuggerExtensionConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerExtensionConfig

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerExtensionConfig
  }
}

public open external class GameplayDebuggerConfig(
  outer: UObject,
) : UObject {
  @JsName("ActivationKey")
  public open var activationKey: Key

  @JsName("CategoryRowNextKey")
  public open var categoryRowNextKey: Key

  @JsName("CategoryRowPrevKey")
  public open var categoryRowPrevKey: Key

  @JsName("CategorySlot0")
  public open var categorySlot0: Key

  @JsName("CategorySlot1")
  public open var categorySlot1: Key

  @JsName("CategorySlot2")
  public open var categorySlot2: Key

  @JsName("CategorySlot3")
  public open var categorySlot3: Key

  @JsName("CategorySlot4")
  public open var categorySlot4: Key

  @JsName("CategorySlot5")
  public open var categorySlot5: Key

  @JsName("CategorySlot6")
  public open var categorySlot6: Key

  @JsName("CategorySlot7")
  public open var categorySlot7: Key

  @JsName("CategorySlot8")
  public open var categorySlot8: Key

  @JsName("CategorySlot9")
  public open var categorySlot9: Key

  @JsName("DebugCanvasPaddingLeft")
  public open var debugCanvasPaddingLeft: Number

  @JsName("DebugCanvasPaddingRight")
  public open var debugCanvasPaddingRight: Number

  @JsName("DebugCanvasPaddingTop")
  public open var debugCanvasPaddingTop: Number

  @JsName("DebugCanvasPaddingBottom")
  public open var debugCanvasPaddingBottom: Number

  @JsName("bDebugCanvasEnableTextShadow")
  public open var debugCanvasEnableTextShadow: Boolean

  @JsName("Categories")
  public open var categories: Array<GameplayDebuggerCategoryConfig>

  @JsName("Extensions")
  public open var extensions: Array<GameplayDebuggerExtensionConfig>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayDebuggerConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayDebuggerConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayDebuggerConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayDebuggerConfig

    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerConfig

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerConfig
  }
}

public open external class GameplayDebuggerUserSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bEnableGameplayDebuggerInEditor")
  public open var enableGameplayDebuggerInEditor: Boolean

  @JsName("MaxViewDistance")
  public open var maxViewDistance: Number

  @JsName("MaxViewAngle")
  public open var maxViewAngle: Number

  @JsName("FontSize")
  public open var fontSize: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayDebuggerUserSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayDebuggerUserSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayDebuggerUserSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayDebuggerUserSettings

    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerUserSettings

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerUserSettings
  }
}

public open external class GameplayDebuggerPlayerData {
  @JsName("Controller")
  public open var controller: GameplayDebuggerLocalController

  @JsName("InputComponent")
  public open var inputComponent: InputComponent

  @JsName("Replicator")
  public open var replicator: GameplayDebuggerCategoryReplicator

  public open fun clone(): GameplayDebuggerPlayerData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerPlayerData

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerPlayerData
  }
}

public open external class GameplayDebuggerPlayerManager(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("PlayerData")
  public open var playerData: Array<GameplayDebuggerPlayerData>

  @JsName("PendingRegistrations")
  public open var pendingRegistrations: Array<GameplayDebuggerCategoryReplicator>

  @JsName("EditorWorldData")
  public open var editorWorldData: GameplayDebuggerPlayerData

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayDebuggerPlayerManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayDebuggerPlayerManager

    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerPlayerManager

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerPlayerManager
  }
}

public open external class GameplayDebuggerLocalController(
  outer: UObject,
) : UObject {
  @JsName("CachedReplicator")
  public open var cachedReplicator: GameplayDebuggerCategoryReplicator

  @JsName("CachedPlayerManager")
  public open var cachedPlayerManager: GameplayDebuggerPlayerManager

  @JsName("DebugActorCandidate")
  public open var debugActorCandidate: Actor

  @JsName("HUDFont")
  public open var hudFont: Font

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GameplayDebuggerLocalController

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GameplayDebuggerLocalController

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GameplayDebuggerLocalController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GameplayDebuggerLocalController

    @JsName("C")
    public fun copy(other: UObject): GameplayDebuggerLocalController

    @JsName("C")
    public fun copy(other: Any): GameplayDebuggerLocalController
  }
}

@JsName("AIBlueprintHelperLibrary")
public open external class AiBlueprintHelperLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiBlueprintHelperLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiBlueprintHelperLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiBlueprintHelperLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiBlueprintHelperLibrary

    @JsName("UnlockAIResourcesWithAnimation")
    public fun unlockAiResourcesWithAnimation(
      animInstance: AnimInstance,
      unlockMovement: Boolean,
      unlockAiLogic: Boolean,
    ): Unit

    @JsName("SpawnAIFromClass")
    public fun spawnAiFromClass(
      worldContextObject: UObject,
      pawnClass: UnrealEngineClass,
      behaviorTree: BehaviorTree,
      location: Vector,
      rotation: Rotator,
      noCollisionFail: Boolean,
      owner: Actor,
    ): Pawn

    @JsName("SimpleMoveToLocation")
    public fun simpleMoveToLocation(controller: Controller, goal: Vector): Unit

    @JsName("SimpleMoveToActor")
    public fun simpleMoveToActor(controller: Controller, goal: Actor): Unit

    @JsName("SendAIMessage")
    public fun sendAiMessage(
      target: Pawn,
      message: String,
      messageSource: UObject,
      success: Boolean,
    ): Unit

    @JsName("LockAIResourcesWithAnimation")
    public fun lockAiResourcesWithAnimation(
      animInstance: AnimInstance,
      lockMovement: Boolean,
      lockAiLogic: Boolean,
    ): Unit

    @JsName("IsValidAIRotation")
    public fun isValidAiRotation(rotation: Rotator): Boolean

    @JsName("IsValidAILocation")
    public fun isValidAiLocation(location: Vector): Boolean

    @JsName("IsValidAIDirection")
    public fun isValidAiDirection(directionVector: Vector): Boolean

    @JsName("GetNextNavLinkIndex")
    public fun getNextNavLinkIndex(controller: Controller): Number

    @JsName("GetCurrentPathPoints")
    public fun getCurrentPathPoints(controller: Controller): Array<Vector>

    @JsName("GetCurrentPathIndex")
    public fun getCurrentPathIndex(controller: Controller): Number

    @JsName("GetCurrentPath")
    public fun getCurrentPath(controller: Controller): NavigationPath

    @JsName("GetBlackboard")
    public fun getBlackboard(target: Actor): BlackboardComponent

    @JsName("GetAIController")
    public fun getAiController(controlledActor: Actor): AiController

    @JsName("CreateMoveToProxyObject")
    public fun createMoveToProxyObject(
      worldContextObject: UObject,
      pawn: Pawn,
      destination: Vector,
      targetActor: Actor,
      acceptanceRadius: Number,
      stopOnOverlap: Boolean,
    ): AiAsyncTaskBlueprintProxy

    @JsName("C")
    public fun copy(other: UObject): AiBlueprintHelperLibrary

    @JsName("C")
    public fun copy(other: Any): AiBlueprintHelperLibrary
  }
}

@JsName("AIDataProvider_QueryParams")
public open external class AiDataProviderQueryParams(
  outer: UObject,
) : AiDataProvider {
  @JsName("ParamName")
  public open var paramName: String

  @JsName("FloatValue")
  public open var floatValue: Number

  @JsName("IntValue")
  public open var intValue: Number

  @JsName("BoolValue")
  public open var boolValue: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiDataProviderQueryParams

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiDataProviderQueryParams

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiDataProviderQueryParams

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiDataProviderQueryParams

    @JsName("C")
    public fun copy(other: UObject): AiDataProviderQueryParams

    @JsName("C")
    public fun copy(other: Any): AiDataProviderQueryParams
  }
}

@JsName("AIDataProvider_Random")
public open external class AiDataProviderRandom(
  outer: UObject,
) : AiDataProviderQueryParams {
  @JsName("Min")
  public open var min: Number

  @JsName("Max")
  public open var max: Number

  @JsName("bInteger")
  public open var integer: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiDataProviderRandom

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiDataProviderRandom

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiDataProviderRandom

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiDataProviderRandom

    @JsName("C")
    public fun copy(other: UObject): AiDataProviderRandom

    @JsName("C")
    public fun copy(other: Any): AiDataProviderRandom
  }
}

@JsName("AIPerceptionListenerInterface")
public open external class AiPerceptionListenerInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiPerceptionListenerInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiPerceptionListenerInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiPerceptionListenerInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiPerceptionListenerInterface

    @JsName("C")
    public fun copy(other: UObject): AiPerceptionListenerInterface

    @JsName("C")
    public fun copy(other: Any): AiPerceptionListenerInterface
  }
}

@JsName("AIPerceptionStimuliSourceComponent")
public open external class AiPerceptionStimuliSourceComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("bAutoRegisterAsSource")
  public open var autoRegisterAsSource: Boolean

  @JsName("RegisterAsSourceForSenses")
  public open var registerAsSourceForSenses: Array<UnrealEngineClass>

  @JsName("UnregisterFromSense")
  public open fun unregisterFromSense(senseClass: UnrealEngineClass): Unit

  @JsName("UnregisterFromPerceptionSystem")
  public open fun unregisterFromPerceptionSystem(): Unit

  @JsName("RegisterWithPerceptionSystem")
  public open fun registerWithPerceptionSystem(): Unit

  @JsName("RegisterForSense")
  public open fun registerForSense(senseClass: UnrealEngineClass): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiPerceptionStimuliSourceComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiPerceptionStimuliSourceComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiPerceptionStimuliSourceComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiPerceptionStimuliSourceComponent

    @JsName("C")
    public fun copy(other: UObject): AiPerceptionStimuliSourceComponent

    @JsName("C")
    public fun copy(other: Any): AiPerceptionStimuliSourceComponent
  }
}

@JsName("AIResourceInterface")
public open external class AiResourceInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiResourceInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiResourceInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiResourceInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiResourceInterface

    @JsName("C")
    public fun copy(other: UObject): AiResourceInterface

    @JsName("C")
    public fun copy(other: Any): AiResourceInterface
  }
}

@JsName("AIResource_Movement")
public open external class AiResourceMovement(
  outer: UObject,
) : GameplayTaskResource {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiResourceMovement

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiResourceMovement

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiResourceMovement

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiResourceMovement

    @JsName("C")
    public fun copy(other: UObject): AiResourceMovement

    @JsName("C")
    public fun copy(other: Any): AiResourceMovement
  }
}

@JsName("AIResource_Logic")
public open external class AiResourceLogic(
  outer: UObject,
) : GameplayTaskResource {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiResourceLogic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiResourceLogic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiResourceLogic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiResourceLogic

    @JsName("C")
    public fun copy(other: UObject): AiResourceLogic

    @JsName("C")
    public fun copy(other: Any): AiResourceLogic
  }
}

@JsName("EUserDefinedStructureStatus")
public external object UserDefinedStructureStatus {
  @JsName("UDSS_UpToDate")
  public var UpToDate: String

  @JsName("UDSS_Dirty")
  public var Dirty: String

  @JsName("UDSS_Error")
  public var Error: String

  @JsName("UDSS_Duplicate")
  public var Duplicate: String

  @JsName("UDSS_MAX")
  public var Max: String
}

public open external class UserDefinedStruct(
  outer: UObject,
) : ScriptStruct {
  @JsName("PrimaryStruct")
  public open var primaryStruct: Any

  @JsName("ErrorMessage")
  public open var errorMessage: String

  @JsName("EditorData")
  public open var editorData: UObject

  @JsName("Status")
  public open var status: String

  @JsName("Guid")
  public open var guid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserDefinedStruct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserDefinedStruct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserDefinedStruct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserDefinedStruct

    @JsName("C")
    public fun copy(other: UObject): UserDefinedStruct

    @JsName("C")
    public fun copy(other: Any): UserDefinedStruct
  }
}

@JsName("AISenseBlueprintListener")
public open external class AiSenseBlueprintListener(
  outer: UObject,
) : UserDefinedStruct {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseBlueprintListener

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseBlueprintListener

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseBlueprintListener

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseBlueprintListener

    @JsName("C")
    public fun copy(other: UObject): AiSenseBlueprintListener

    @JsName("C")
    public fun copy(other: Any): AiSenseBlueprintListener
  }
}

@JsName("T$625")
public external interface ListenerComponentsProvider {
  @JsName("ListenerComponents")
  public var listenerComponents: Array<AiPerceptionComponent>
}

@JsName("T$626")
public external interface ListenerActorsProvider {
  @JsName("ListenerActors")
  public var listenerActors: Array<Actor>
}

@JsName("AISense_Blueprint")
public open external class AiSenseBlueprint(
  outer: UObject,
) : AiSense {
  @JsName("ListenerDataType")
  public open var listenerDataType: UnrealEngineClass

  @JsName("ListenerContainer")
  public open var listenerContainer: Array<AiPerceptionComponent>

  @JsName("UnprocessedEvents")
  public open var unprocessedEvents: Array<AiSenseEvent>

  @JsName("OnUpdate")
  public open fun onUpdate(eventsToProcess: Array<AiSenseEvent>): Number

  @JsName("OnListenerUpdated")
  public open fun onListenerUpdated(actorListener: Actor,
      perceptionComponent: AiPerceptionComponent): Unit

  @JsName("OnListenerUnregistered")
  public open fun onListenerUnregistered(actorListener: Actor,
      perceptionComponent: AiPerceptionComponent): Unit

  @JsName("OnListenerRegistered")
  public open fun onListenerRegistered(actorListener: Actor,
      perceptionComponent: AiPerceptionComponent): Unit

  @JsName("K2_OnNewPawn")
  public open fun k2OnNewPawn(newPawn: Pawn): Unit

  @JsName("GetAllListenerComponents")
  public open fun getAllListenerComponents(listenerComponents: Array<AiPerceptionComponent>):
      ListenerComponentsProvider

  @JsName("GetAllListenerActors")
  public open fun getAllListenerActors(listenerActors: Array<Actor>): ListenerActorsProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseBlueprint

    @JsName("C")
    public fun copy(other: UObject): AiSenseBlueprint

    @JsName("C")
    public fun copy(other: Any): AiSenseBlueprint
  }
}

@JsName("AISenseConfig_Blueprint")
public open external class AiSenseConfigBlueprint(
  outer: UObject,
) : AiSenseConfig {
  @JsName("Implementation")
  public open var implementation: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseConfigBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseConfigBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseConfigBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseConfigBlueprint

    @JsName("C")
    public fun copy(other: UObject): AiSenseConfigBlueprint

    @JsName("C")
    public fun copy(other: Any): AiSenseConfigBlueprint
  }
}

@JsName("AIDamageEvent")
public open external class AiDamageEvent {
  @JsName("Amount")
  public open var amount: Number

  @JsName("Location")
  public open var location: Vector

  @JsName("HitLocation")
  public open var hitLocation: Vector

  @JsName("DamagedActor")
  public open var damagedActor: Actor

  @JsName("Instigator")
  public open var instigator: Actor

  @JsName("Tag")
  public open var tag: String

  public open fun clone(): AiDamageEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiDamageEvent

    @JsName("C")
    public fun copy(other: Any): AiDamageEvent
  }
}

@JsName("AISense_Damage")
public open external class AiSenseDamage(
  outer: UObject,
) : AiSense {
  @JsName("RegisteredEvents")
  public open var registeredEvents: Array<AiDamageEvent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseDamage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseDamage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseDamage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseDamage

    @JsName("ReportDamageEvent")
    public fun reportDamageEvent(
      worldContextObject: UObject,
      damagedActor: Actor,
      instigator: Actor,
      damageAmount: Number,
      eventLocation: Vector,
      hitLocation: Vector,
      tag: String,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): AiSenseDamage

    @JsName("C")
    public fun copy(other: Any): AiSenseDamage
  }
}

@JsName("AISenseConfig_Damage")
public open external class AiSenseConfigDamage(
  outer: UObject,
) : AiSenseConfig {
  @JsName("Implementation")
  public open var implementation: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseConfigDamage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseConfigDamage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseConfigDamage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseConfigDamage

    @JsName("C")
    public fun copy(other: UObject): AiSenseConfigDamage

    @JsName("C")
    public fun copy(other: Any): AiSenseConfigDamage
  }
}

@JsName("AINoiseEvent")
public open external class AiNoiseEvent {
  @JsName("NoiseLocation")
  public open var noiseLocation: Vector

  @JsName("Loudness")
  public open var loudness: Number

  @JsName("MaxRange")
  public open var maxRange: Number

  @JsName("Instigator")
  public open var instigator: Actor

  @JsName("Tag")
  public open var tag: String

  public open fun clone(): AiNoiseEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiNoiseEvent

    @JsName("C")
    public fun copy(other: Any): AiNoiseEvent
  }
}

@JsName("AISense_Hearing")
public open external class AiSenseHearing(
  outer: UObject,
) : AiSense {
  @JsName("NoiseEvents")
  public open var noiseEvents: Array<AiNoiseEvent>

  @JsName("SpeedOfSoundSq")
  public open var speedOfSoundSq: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseHearing

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseHearing

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseHearing

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseHearing

    @JsName("ReportNoiseEvent")
    public fun reportNoiseEvent(
      worldContextObject: UObject,
      noiseLocation: Vector,
      loudness: Number,
      instigator: Actor,
      maxRange: Number,
      tag: String,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): AiSenseHearing

    @JsName("C")
    public fun copy(other: Any): AiSenseHearing
  }
}

@JsName("AISenseAffiliationFilter")
public open external class AiSenseAffiliationFilter {
  @JsName("bDetectEnemies")
  public open var detectEnemies: Boolean

  @JsName("bDetectNeutrals")
  public open var detectNeutrals: Boolean

  @JsName("bDetectFriendlies")
  public open var detectFriendlies: Boolean

  public open fun clone(): AiSenseAffiliationFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiSenseAffiliationFilter

    @JsName("C")
    public fun copy(other: Any): AiSenseAffiliationFilter
  }
}

@JsName("AISenseConfig_Hearing")
public open external class AiSenseConfigHearing(
  outer: UObject,
) : AiSenseConfig {
  @JsName("Implementation")
  public open var implementation: UnrealEngineClass

  @JsName("HearingRange")
  public open var hearingRange: Number

  @JsName("LoSHearingRange")
  public open var loSHearingRange: Number

  @JsName("bUseLoSHearing")
  public open var useLoSHearing: Boolean

  @JsName("DetectionByAffiliation")
  public open var detectionByAffiliation: AiSenseAffiliationFilter

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseConfigHearing

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseConfigHearing

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseConfigHearing

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseConfigHearing

    @JsName("C")
    public fun copy(other: UObject): AiSenseConfigHearing

    @JsName("C")
    public fun copy(other: Any): AiSenseConfigHearing
  }
}

@JsName("AISenseConfig_Prediction")
public open external class AiSenseConfigPrediction(
  outer: UObject,
) : AiSenseConfig {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseConfigPrediction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseConfigPrediction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseConfigPrediction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseConfigPrediction

    @JsName("C")
    public fun copy(other: UObject): AiSenseConfigPrediction

    @JsName("C")
    public fun copy(other: Any): AiSenseConfigPrediction
  }
}

@JsName("AISense_Sight")
public open external class AiSenseSight(
  outer: UObject,
) : AiSense {
  @JsName("MaxTracesPerTick")
  public open var maxTracesPerTick: Number

  @JsName("MinQueriesPerTimeSliceCheck")
  public open var minQueriesPerTimeSliceCheck: Number

  @JsName("MaxTimeSlicePerTick")
  public open var maxTimeSlicePerTick: Any

  @JsName("HighImportanceQueryDistanceThreshold")
  public open var highImportanceQueryDistanceThreshold: Number

  @JsName("MaxQueryImportance")
  public open var maxQueryImportance: Number

  @JsName("SightLimitQueryImportance")
  public open var sightLimitQueryImportance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseSight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseSight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseSight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseSight

    @JsName("C")
    public fun copy(other: UObject): AiSenseSight

    @JsName("C")
    public fun copy(other: Any): AiSenseSight
  }
}

@JsName("AISenseConfig_Sight")
public open external class AiSenseConfigSight(
  outer: UObject,
) : AiSenseConfig {
  @JsName("Implementation")
  public open var implementation: UnrealEngineClass

  @JsName("SightRadius")
  public open var sightRadius: Number

  @JsName("LoseSightRadius")
  public open var loseSightRadius: Number

  @JsName("PeripheralVisionAngleDegrees")
  public open var peripheralVisionAngleDegrees: Number

  @JsName("DetectionByAffiliation")
  public open var detectionByAffiliation: AiSenseAffiliationFilter

  @JsName("AutoSuccessRangeFromLastSeenLocation")
  public open var autoSuccessRangeFromLastSeenLocation: Number

  @JsName("PointOfViewBackwardOffset")
  public open var pointOfViewBackwardOffset: Number

  @JsName("NearClippingRadius")
  public open var nearClippingRadius: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseConfigSight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseConfigSight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseConfigSight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseConfigSight

    @JsName("C")
    public fun copy(other: UObject): AiSenseConfigSight

    @JsName("C")
    public fun copy(other: Any): AiSenseConfigSight
  }
}

@JsName("AISenseConfig_Team")
public open external class AiSenseConfigTeam(
  outer: UObject,
) : AiSenseConfig {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseConfigTeam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseConfigTeam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseConfigTeam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseConfigTeam

    @JsName("C")
    public fun copy(other: UObject): AiSenseConfigTeam

    @JsName("C")
    public fun copy(other: Any): AiSenseConfigTeam
  }
}

@JsName("AISenseConfig_Touch")
public open external class AiSenseConfigTouch(
  outer: UObject,
) : AiSenseConfig {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseConfigTouch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseConfigTouch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseConfigTouch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseConfigTouch

    @JsName("C")
    public fun copy(other: UObject): AiSenseConfigTouch

    @JsName("C")
    public fun copy(other: Any): AiSenseConfigTouch
  }
}

@JsName("AISenseEvent_Damage")
public open external class AiSenseEventDamage(
  outer: UObject,
) : AiSenseEvent {
  @JsName("Event")
  public open var event: AiDamageEvent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseEventDamage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseEventDamage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseEventDamage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseEventDamage

    @JsName("C")
    public fun copy(other: UObject): AiSenseEventDamage

    @JsName("C")
    public fun copy(other: Any): AiSenseEventDamage
  }
}

@JsName("AISenseEvent_Hearing")
public open external class AiSenseEventHearing(
  outer: UObject,
) : AiSenseEvent {
  @JsName("Event")
  public open var event: AiNoiseEvent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseEventHearing

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseEventHearing

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseEventHearing

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseEventHearing

    @JsName("C")
    public fun copy(other: UObject): AiSenseEventHearing

    @JsName("C")
    public fun copy(other: Any): AiSenseEventHearing
  }
}

@JsName("AIPredictionEvent")
public open external class AiPredictionEvent {
  @JsName("Requestor")
  public open var requestor: Actor

  @JsName("PredictedActor")
  public open var predictedActor: Actor

  public open fun clone(): AiPredictionEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiPredictionEvent

    @JsName("C")
    public fun copy(other: Any): AiPredictionEvent
  }
}

@JsName("AISense_Prediction")
public open external class AiSensePrediction(
  outer: UObject,
) : AiSense {
  @JsName("RegisteredEvents")
  public open var registeredEvents: Array<AiPredictionEvent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSensePrediction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSensePrediction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSensePrediction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSensePrediction

    @JsName("RequestPawnPredictionEvent")
    public fun requestPawnPredictionEvent(
      requestor: Pawn,
      predictedActor: Actor,
      predictionTime: Number,
    ): Unit

    @JsName("RequestControllerPredictionEvent")
    public fun requestControllerPredictionEvent(
      requestor: AiController,
      predictedActor: Actor,
      predictionTime: Number,
    ): Unit

    @JsName("C")
    public fun copy(other: UObject): AiSensePrediction

    @JsName("C")
    public fun copy(other: Any): AiSensePrediction
  }
}

@JsName("AITeamStimulusEvent")
public open external class AiTeamStimulusEvent {
  @JsName("Broadcaster")
  public open var broadcaster: Actor

  @JsName("Enemy")
  public open var enemy: Actor

  public open fun clone(): AiTeamStimulusEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiTeamStimulusEvent

    @JsName("C")
    public fun copy(other: Any): AiTeamStimulusEvent
  }
}

@JsName("AISense_Team")
public open external class AiSenseTeam(
  outer: UObject,
) : AiSense {
  @JsName("RegisteredEvents")
  public open var registeredEvents: Array<AiTeamStimulusEvent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseTeam

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseTeam

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseTeam

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseTeam

    @JsName("C")
    public fun copy(other: UObject): AiSenseTeam

    @JsName("C")
    public fun copy(other: Any): AiSenseTeam
  }
}

@JsName("AITouchEvent")
public open external class AiTouchEvent {
  @JsName("TouchReceiver")
  public open var touchReceiver: Actor

  @JsName("OtherActor")
  public open var otherActor: Actor

  public open fun clone(): AiTouchEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiTouchEvent

    @JsName("C")
    public fun copy(other: Any): AiTouchEvent
  }
}

@JsName("AISense_Touch")
public open external class AiSenseTouch(
  outer: UObject,
) : AiSense {
  @JsName("RegisteredEvents")
  public open var registeredEvents: Array<AiTouchEvent>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSenseTouch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSenseTouch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSenseTouch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSenseTouch

    @JsName("C")
    public fun copy(other: UObject): AiSenseTouch

    @JsName("C")
    public fun copy(other: Any): AiSenseTouch
  }
}

@JsName("AISightTargetInterface")
public open external class AiSightTargetInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiSightTargetInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiSightTargetInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiSightTargetInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiSightTargetInterface

    @JsName("C")
    public fun copy(other: UObject): AiSightTargetInterface

    @JsName("C")
    public fun copy(other: Any): AiSightTargetInterface
  }
}

@JsName("AITask")
public open external class AiTask(
  outer: UObject,
) : GameplayTask {
  @JsName("OwnerController")
  public open var ownerController: AiController

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiTask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiTask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiTask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiTask

    @JsName("C")
    public fun copy(other: UObject): AiTask

    @JsName("C")
    public fun copy(other: Any): AiTask
  }
}

@JsName("AITask_LockLogic")
public open external class AiTaskLockLogic(
  outer: UObject,
) : AiTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiTaskLockLogic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiTaskLockLogic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiTaskLockLogic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiTaskLockLogic

    @JsName("C")
    public fun copy(other: UObject): AiTaskLockLogic

    @JsName("C")
    public fun copy(other: Any): AiTaskLockLogic
  }
}

@JsName("AIMoveRequest")
public open external class AiMoveRequest {
  @JsName("GoalActor")
  public open var goalActor: Actor

  public open fun clone(): AiMoveRequest

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiMoveRequest

    @JsName("C")
    public fun copy(other: Any): AiMoveRequest
  }
}

@JsName("EAIOptionFlag")
public external object AIOptionFlag {
  public var Default: String

  public var Enable: String

  public var Disable: String

  public var MAX: String
}

@JsName("AITask_MoveTo")
public open external class AiTaskMoveTo(
  outer: UObject,
) : AiTask {
  @JsName("OnRequestFailed")
  public open var onRequestFailed: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnMoveFinished")
  public open var onMoveFinished: UnrealEngineMulticastDelegate<(Result: String,
      AIController: AiController) -> Unit>

  @JsName("MoveRequest")
  public open var moveRequest: AiMoveRequest

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiTaskMoveTo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiTaskMoveTo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiTaskMoveTo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiTaskMoveTo

    @JsName("AIMoveTo")
    public fun aiMoveTo(
      controller: AiController,
      goalLocation: Vector,
      goalActor: Actor,
      acceptanceRadius: Number,
      stopOnOverlap: String,
      acceptPartialPath: String,
      usePathfinding: Boolean,
      lockAiLogic: Boolean,
      useContinuosGoalTracking: Boolean,
      projectGoalOnNavigation: String,
    ): AiTaskMoveTo

    @JsName("C")
    public fun copy(other: UObject): AiTaskMoveTo

    @JsName("C")
    public fun copy(other: Any): AiTaskMoveTo
  }
}

@JsName("AITask_RunEQS")
public open external class AiTaskRunEqs(
  outer: UObject,
) : AiTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AiTaskRunEqs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AiTaskRunEqs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AiTaskRunEqs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AiTaskRunEqs

    @JsName("RunEQS")
    public fun runEqs(controller: AiController, queryTemplate: EnvQuery): AiTaskRunEqs

    @JsName("C")
    public fun copy(other: UObject): AiTaskRunEqs

    @JsName("C")
    public fun copy(other: Any): AiTaskRunEqs
  }
}

public open external class BehaviorTreeTypes(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BehaviorTreeTypes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BehaviorTreeTypes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BehaviorTreeTypes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BehaviorTreeTypes

    @JsName("C")
    public fun copy(other: UObject): BehaviorTreeTypes

    @JsName("C")
    public fun copy(other: Any): BehaviorTreeTypes
  }
}

public open external class BlackboardAssetProvider(
  outer: UObject,
) : Interface {
  @JsName("GetBlackboardAsset")
  public open fun getBlackboardAsset(): BlackboardData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardAssetProvider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardAssetProvider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardAssetProvider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardAssetProvider

    @JsName("C")
    public fun copy(other: UObject): BlackboardAssetProvider

    @JsName("C")
    public fun copy(other: Any): BlackboardAssetProvider
  }
}

@JsName("BlackboardKeyType_Bool")
public open external class BlackboardKeyTypeBool(
  outer: UObject,
) : BlackboardKeyType {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeBool

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeBool

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeBool

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeBool

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeBool

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeBool
  }
}

@JsName("BlackboardKeyType_Class")
public open external class BlackboardKeyTypeClass(
  outer: UObject,
) : BlackboardKeyType {
  @JsName("BaseClass")
  public open var baseClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeClass

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeClass

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeClass
  }
}

@JsName("BlackboardKeyType_Enum")
public open external class BlackboardKeyTypeEnum(
  outer: UObject,
) : BlackboardKeyType {
  @JsName("EnumType")
  public open var enumType: Enum

  @JsName("EnumName")
  public open var enumName: String

  @JsName("bIsEnumNameValid")
  public open var isEnumNameValid: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeEnum

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeEnum

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeEnum

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeEnum

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeEnum

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeEnum
  }
}

@JsName("BlackboardKeyType_Float")
public open external class BlackboardKeyTypeFloat(
  outer: UObject,
) : BlackboardKeyType {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeFloat

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeFloat

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeFloat

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeFloat

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeFloat

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeFloat
  }
}

@JsName("BlackboardKeyType_Int")
public open external class BlackboardKeyTypeInt(
  outer: UObject,
) : BlackboardKeyType {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeInt

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeInt

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeInt

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeInt

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeInt

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeInt
  }
}

@JsName("BlackboardKeyType_Name")
public open external class BlackboardKeyTypeName(
  outer: UObject,
) : BlackboardKeyType {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeName

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeName

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeName

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeName

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeName

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeName
  }
}

@JsName("BlackboardKeyType_NativeEnum")
public open external class BlackboardKeyTypeNativeEnum(
  outer: UObject,
) : BlackboardKeyType {
  @JsName("EnumName")
  public open var enumName: String

  @JsName("EnumType")
  public open var enumType: Enum

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeNativeEnum

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeNativeEnum

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeNativeEnum

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeNativeEnum

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeNativeEnum

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeNativeEnum
  }
}

@JsName("BlackboardKeyType_Object")
public open external class BlackboardKeyTypeObject(
  outer: UObject,
) : BlackboardKeyType {
  @JsName("BaseClass")
  public open var baseClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeObject

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeObject

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeObject
  }
}

@JsName("BlackboardKeyType_Rotator")
public open external class BlackboardKeyTypeRotator(
  outer: UObject,
) : BlackboardKeyType {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeRotator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeRotator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeRotator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeRotator

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeRotator

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeRotator
  }
}

@JsName("BlackboardKeyType_String")
public open external class BlackboardKeyTypeString(
  outer: UObject,
) : BlackboardKeyType {
  @JsName("StringValue")
  public open var stringValue: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeString

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeString

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeString

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeString

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeString

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeString
  }
}

@JsName("BlackboardKeyType_Vector")
public open external class BlackboardKeyTypeVector(
  outer: UObject,
) : BlackboardKeyType {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlackboardKeyTypeVector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlackboardKeyTypeVector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlackboardKeyTypeVector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlackboardKeyTypeVector

    @JsName("C")
    public fun copy(other: UObject): BlackboardKeyTypeVector

    @JsName("C")
    public fun copy(other: Any): BlackboardKeyTypeVector
  }
}

@JsName("BTComposite_Selector")
public open external class BtCompositeSelector(
  outer: UObject,
) : BtCompositeNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtCompositeSelector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtCompositeSelector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtCompositeSelector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtCompositeSelector

    @JsName("C")
    public fun copy(other: UObject): BtCompositeSelector

    @JsName("C")
    public fun copy(other: Any): BtCompositeSelector
  }
}

@JsName("BTComposite_Sequence")
public open external class BtCompositeSequence(
  outer: UObject,
) : BtCompositeNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtCompositeSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtCompositeSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtCompositeSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtCompositeSequence

    @JsName("C")
    public fun copy(other: UObject): BtCompositeSequence

    @JsName("C")
    public fun copy(other: Any): BtCompositeSequence
  }
}

@JsName("EBTParallelMode")
public external object BTParallelMode {
  public var AbortBackground: String

  public var WaitForBackground: String

  @JsName("EBTParallelMode_MAX")
  public var Max: String
}

@JsName("BTComposite_SimpleParallel")
public open external class BtCompositeSimpleParallel(
  outer: UObject,
) : BtCompositeNode {
  @JsName("FinishMode")
  public open var finishMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtCompositeSimpleParallel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtCompositeSimpleParallel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtCompositeSimpleParallel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtCompositeSimpleParallel

    @JsName("C")
    public fun copy(other: UObject): BtCompositeSimpleParallel

    @JsName("C")
    public fun copy(other: Any): BtCompositeSimpleParallel
  }
}

@JsName("BTDecorator_BlackboardBase")
public open external class BtDecoratorBlackboardBase(
  outer: UObject,
) : BtDecorator {
  @JsName("BlackboardKey")
  public open var blackboardKey: BlackboardKeySelector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorBlackboardBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorBlackboardBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorBlackboardBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorBlackboardBase

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorBlackboardBase

    @JsName("C")
    public fun copy(other: Any): BtDecoratorBlackboardBase
  }
}

@JsName("EBTBlackboardRestart")
public external object BTBlackboardRestart {
  public var ValueChange: String

  public var ResultChange: String

  @JsName("EBTBlackboardRestart_MAX")
  public var Max: String
}

@JsName("EBasicKeyOperation")
public external object BasicKeyOperation {
  public var Set: String

  public var NotSet: String

  @JsName("EBasicKeyOperation_MAX")
  public var Max: String
}

@JsName("EArithmeticKeyOperation")
public external object ArithmeticKeyOperation {
  public var Equal: String

  public var NotEqual: String

  public var Less: String

  public var LessOrEqual: String

  public var Greater: String

  public var GreaterOrEqual: String

  @JsName("EArithmeticKeyOperation_MAX")
  public var Max: String
}

@JsName("ETextKeyOperation")
public external object TextKeyOperation {
  public var Equal: String

  public var NotEqual: String

  public var Contain: String

  public var NotContain: String

  @JsName("ETextKeyOperation_MAX")
  public var Max: String
}

@JsName("BTDecorator_Blackboard")
public open external class BtDecoratorBlackboard(
  outer: UObject,
) : BtDecoratorBlackboardBase {
  @JsName("IntValue")
  public open var intValue: Number

  @JsName("FloatValue")
  public open var floatValue: Number

  @JsName("StringValue")
  public open var stringValue: String

  @JsName("CachedDescription")
  public open var cachedDescription: String

  @JsName("OperationType")
  public open var operationType: Number

  @JsName("NotifyObserver")
  public open var notifyObserver: String

  @JsName("BasicOperation")
  public open var basicOperation: String

  @JsName("ArithmeticOperation")
  public open var arithmeticOperation: String

  @JsName("TextOperation")
  public open var textOperation: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorBlackboard

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorBlackboard

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorBlackboard

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorBlackboard

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorBlackboard

    @JsName("C")
    public fun copy(other: Any): BtDecoratorBlackboard
  }
}

@JsName("EBTNodeResult")
public external object BTNodeResult {
  public var Succeeded: String

  public var Failed: String

  public var Aborted: String

  public var InProgress: String

  @JsName("EBTNodeResult_MAX")
  public var Max: String
}

@JsName("BTDecorator_BlueprintBase")
public open external class BtDecoratorBlueprintBase(
  outer: UObject,
) : BtDecorator {
  @JsName("AIOwner")
  public open var aiOwner: AiController

  @JsName("ActorOwner")
  public open var actorOwner: Actor

  @JsName("ObservedKeyNames")
  public open var observedKeyNames: Array<String>

  @JsName("CustomDescription")
  public open var customDescription: String

  @JsName("bShowPropertyDetails")
  public open var showPropertyDetails: Boolean

  @JsName("bCheckConditionOnlyBlackBoardChanges")
  public open var checkConditionOnlyBlackBoardChanges: Boolean

  @JsName("bIsObservingBB")
  public open var isObservingBb: Boolean

  @JsName("ReceiveTickAI")
  public open fun receiveTickAi(
    ownerController: AiController,
    controlledPawn: Pawn,
    deltaSeconds: Number,
  ): Unit

  @JsName("ReceiveTick")
  public open fun receiveTick(ownerActor: Actor, deltaSeconds: Number): Unit

  @JsName("ReceiveObserverDeactivatedAI")
  public open fun receiveObserverDeactivatedAi(ownerController: AiController, controlledPawn: Pawn):
      Unit

  @JsName("ReceiveObserverDeactivated")
  public open fun receiveObserverDeactivated(ownerActor: Actor): Unit

  @JsName("ReceiveObserverActivatedAI")
  public open fun receiveObserverActivatedAi(ownerController: AiController, controlledPawn: Pawn):
      Unit

  @JsName("ReceiveObserverActivated")
  public open fun receiveObserverActivated(ownerActor: Actor): Unit

  @JsName("ReceiveExecutionStartAI")
  public open fun receiveExecutionStartAi(ownerController: AiController, controlledPawn: Pawn): Unit

  @JsName("ReceiveExecutionStart")
  public open fun receiveExecutionStart(ownerActor: Actor): Unit

  @JsName("ReceiveExecutionFinishAI")
  public open fun receiveExecutionFinishAi(
    ownerController: AiController,
    controlledPawn: Pawn,
    nodeResult: String,
  ): Unit

  @JsName("ReceiveExecutionFinish")
  public open fun receiveExecutionFinish(ownerActor: Actor, nodeResult: String): Unit

  @JsName("PerformConditionCheckAI")
  public open fun performConditionCheckAi(ownerController: AiController, controlledPawn: Pawn):
      Boolean

  @JsName("PerformConditionCheck")
  public open fun performConditionCheck(ownerActor: Actor): Boolean

  @JsName("IsDecoratorObserverActive")
  public open fun isDecoratorObserverActive(): Boolean

  @JsName("IsDecoratorExecutionActive")
  public open fun isDecoratorExecutionActive(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorBlueprintBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorBlueprintBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorBlueprintBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorBlueprintBase

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorBlueprintBase

    @JsName("C")
    public fun copy(other: Any): BtDecoratorBlueprintBase
  }
}

@JsName("EGameplayContainerMatchType")
public external object GameplayContainerMatchType {
  public var Any: String

  public var All: String

  @JsName("EGameplayContainerMatchType_MAX")
  public var Max: String
}

@JsName("BTDecorator_CheckGameplayTagsOnActor")
public open external class BtDecoratorCheckGameplayTagsOnActor(
  outer: UObject,
) : BtDecorator {
  @JsName("ActorToCheck")
  public open var actorToCheck: BlackboardKeySelector

  @JsName("TagsToMatch")
  public open var tagsToMatch: String

  @JsName("GameplayTags")
  public open var gameplayTags: GameplayTagContainer

  @JsName("CachedDescription")
  public open var cachedDescription: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorCheckGameplayTagsOnActor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorCheckGameplayTagsOnActor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorCheckGameplayTagsOnActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorCheckGameplayTagsOnActor

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorCheckGameplayTagsOnActor

    @JsName("C")
    public fun copy(other: Any): BtDecoratorCheckGameplayTagsOnActor
  }
}

@JsName("EBlackBoardEntryComparison")
public external object BlackBoardEntryComparison {
  public var Equal: String

  public var NotEqual: String

  @JsName("EBlackBoardEntryComparison_MAX")
  public var Max: String
}

@JsName("BTDecorator_CompareBBEntries")
public open external class BtDecoratorCompareBbEntries(
  outer: UObject,
) : BtDecorator {
  @JsName("Operator")
  public open var operator: String

  @JsName("BlackboardKeyA")
  public open var blackboardKeyA: BlackboardKeySelector

  @JsName("BlackboardKeyB")
  public open var blackboardKeyB: BlackboardKeySelector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorCompareBbEntries

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorCompareBbEntries

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorCompareBbEntries

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorCompareBbEntries

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorCompareBbEntries

    @JsName("C")
    public fun copy(other: Any): BtDecoratorCompareBbEntries
  }
}

@JsName("BTDecorator_ConditionalLoop")
public open external class BtDecoratorConditionalLoop(
  outer: UObject,
) : BtDecoratorBlackboard {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorConditionalLoop

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorConditionalLoop

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorConditionalLoop

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorConditionalLoop

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorConditionalLoop

    @JsName("C")
    public fun copy(other: Any): BtDecoratorConditionalLoop
  }
}

@JsName("BTDecorator_ConeCheck")
public open external class BtDecoratorConeCheck(
  outer: UObject,
) : BtDecorator {
  @JsName("ConeHalfAngle")
  public open var coneHalfAngle: Number

  @JsName("ConeOrigin")
  public open var coneOrigin: BlackboardKeySelector

  @JsName("ConeDirection")
  public open var coneDirection: BlackboardKeySelector

  @JsName("Observed")
  public open var observed: BlackboardKeySelector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorConeCheck

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorConeCheck

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorConeCheck

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorConeCheck

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorConeCheck

    @JsName("C")
    public fun copy(other: Any): BtDecoratorConeCheck
  }
}

@JsName("BTDecorator_Cooldown")
public open external class BtDecoratorCooldown(
  outer: UObject,
) : BtDecorator {
  @JsName("CoolDownTime")
  public open var coolDownTime: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorCooldown

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorCooldown

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorCooldown

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorCooldown

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorCooldown

    @JsName("C")
    public fun copy(other: Any): BtDecoratorCooldown
  }
}

@JsName("EPathExistanceQueryType")
public external object PathExistanceQueryType {
  @JsName("NavmeshRaycast2D")
  public var NavmeshRaycast2d: String

  public var HierarchicalQuery: String

  public var RegularPathFinding: String

  @JsName("EPathExistanceQueryType_MAX")
  public var Max: String
}

@JsName("BTDecorator_DoesPathExist")
public open external class BtDecoratorDoesPathExist(
  outer: UObject,
) : BtDecorator {
  @JsName("BlackboardKeyA")
  public open var blackboardKeyA: BlackboardKeySelector

  @JsName("BlackboardKeyB")
  public open var blackboardKeyB: BlackboardKeySelector

  @JsName("bUseSelf")
  public open var useSelf: Boolean

  @JsName("PathQueryType")
  public open var pathQueryType: String

  @JsName("FilterClass")
  public open var filterClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorDoesPathExist

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorDoesPathExist

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorDoesPathExist

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorDoesPathExist

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorDoesPathExist

    @JsName("C")
    public fun copy(other: Any): BtDecoratorDoesPathExist
  }
}

@JsName("BTDecorator_ForceSuccess")
public open external class BtDecoratorForceSuccess(
  outer: UObject,
) : BtDecorator {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorForceSuccess

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorForceSuccess

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorForceSuccess

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorForceSuccess

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorForceSuccess

    @JsName("C")
    public fun copy(other: Any): BtDecoratorForceSuccess
  }
}

@JsName("FAIDistanceType")
public external object FaiDistanceType {
  @JsName("Distance3D")
  public var distance3d: String

  @JsName("Distance2D")
  public var distance2d: String

  @JsName("DistanceZ")
  public var distanceZ: String

  public var MAX: String
}

@JsName("BTDecorator_IsAtLocation")
public open external class BtDecoratorIsAtLocation(
  outer: UObject,
) : BtDecoratorBlackboardBase {
  @JsName("AcceptableRadius")
  public open var acceptableRadius: Number

  @JsName("ParametrizedAcceptableRadius")
  public open var parametrizedAcceptableRadius: AiDataProviderFloatValue

  @JsName("GeometricDistanceType")
  public open var geometricDistanceType: String

  @JsName("bUseParametrizedRadius")
  public open var useParametrizedRadius: Boolean

  @JsName("bUseNavAgentGoalLocation")
  public open var useNavAgentGoalLocation: Boolean

  @JsName("bPathFindingBasedTest")
  public open var pathFindingBasedTest: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorIsAtLocation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorIsAtLocation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorIsAtLocation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorIsAtLocation

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorIsAtLocation

    @JsName("C")
    public fun copy(other: Any): BtDecoratorIsAtLocation
  }
}

@JsName("BTDecorator_IsBBEntryOfClass")
public open external class BtDecoratorIsBbEntryOfClass(
  outer: UObject,
) : BtDecoratorBlackboardBase {
  @JsName("TestClass")
  public open var testClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorIsBbEntryOfClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorIsBbEntryOfClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorIsBbEntryOfClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorIsBbEntryOfClass

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorIsBbEntryOfClass

    @JsName("C")
    public fun copy(other: Any): BtDecoratorIsBbEntryOfClass
  }
}

@JsName("BTDecorator_KeepInCone")
public open external class BtDecoratorKeepInCone(
  outer: UObject,
) : BtDecorator {
  @JsName("ConeHalfAngle")
  public open var coneHalfAngle: Number

  @JsName("ConeOrigin")
  public open var coneOrigin: BlackboardKeySelector

  @JsName("Observed")
  public open var observed: BlackboardKeySelector

  @JsName("bUseSelfAsOrigin")
  public open var useSelfAsOrigin: Boolean

  @JsName("bUseSelfAsObserved")
  public open var useSelfAsObserved: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorKeepInCone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorKeepInCone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorKeepInCone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorKeepInCone

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorKeepInCone

    @JsName("C")
    public fun copy(other: Any): BtDecoratorKeepInCone
  }
}

@JsName("BTDecorator_Loop")
public open external class BtDecoratorLoop(
  outer: UObject,
) : BtDecorator {
  @JsName("NumLoops")
  public open var numLoops: Number

  @JsName("bInfiniteLoop")
  public open var infiniteLoop: Boolean

  @JsName("InfiniteLoopTimeoutTime")
  public open var infiniteLoopTimeoutTime: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorLoop

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorLoop

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorLoop

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorLoop

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorLoop

    @JsName("C")
    public fun copy(other: Any): BtDecoratorLoop
  }
}

@JsName("BTDecorator_ReachedMoveGoal")
public open external class BtDecoratorReachedMoveGoal(
  outer: UObject,
) : BtDecorator {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorReachedMoveGoal

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorReachedMoveGoal

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorReachedMoveGoal

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorReachedMoveGoal

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorReachedMoveGoal

    @JsName("C")
    public fun copy(other: Any): BtDecoratorReachedMoveGoal
  }
}

@JsName("BTDecorator_SetTagCooldown")
public open external class BtDecoratorSetTagCooldown(
  outer: UObject,
) : BtDecorator {
  @JsName("CooldownTag")
  public open var cooldownTag: GameplayTag

  @JsName("CooldownDuration")
  public open var cooldownDuration: Number

  @JsName("bAddToExistingDuration")
  public open var addToExistingDuration: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorSetTagCooldown

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorSetTagCooldown

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorSetTagCooldown

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorSetTagCooldown

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorSetTagCooldown

    @JsName("C")
    public fun copy(other: Any): BtDecoratorSetTagCooldown
  }
}

@JsName("BTDecorator_TagCooldown")
public open external class BtDecoratorTagCooldown(
  outer: UObject,
) : BtDecorator {
  @JsName("CooldownTag")
  public open var cooldownTag: GameplayTag

  @JsName("CooldownDuration")
  public open var cooldownDuration: Number

  @JsName("bAddToExistingDuration")
  public open var addToExistingDuration: Boolean

  @JsName("bActivatesCooldown")
  public open var activatesCooldown: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorTagCooldown

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorTagCooldown

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorTagCooldown

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorTagCooldown

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorTagCooldown

    @JsName("C")
    public fun copy(other: Any): BtDecoratorTagCooldown
  }
}

@JsName("BTDecorator_TimeLimit")
public open external class BtDecoratorTimeLimit(
  outer: UObject,
) : BtDecorator {
  @JsName("TimeLimit")
  public open var timeLimit: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtDecoratorTimeLimit

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtDecoratorTimeLimit

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtDecoratorTimeLimit

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtDecoratorTimeLimit

    @JsName("C")
    public fun copy(other: UObject): BtDecoratorTimeLimit

    @JsName("C")
    public fun copy(other: Any): BtDecoratorTimeLimit
  }
}

@JsName("BTFunctionLibrary")
public open external class BtFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtFunctionLibrary

    @JsName("StopUsingExternalEvent")
    public fun stopUsingExternalEvent(nodeOwner: BtNode): Unit

    @JsName("StartUsingExternalEvent")
    public fun startUsingExternalEvent(nodeOwner: BtNode, owningActor: Actor): Unit

    @JsName("SetBlackboardValueAsVector")
    public fun setBlackboardValueAsVector(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Vector,
    ): Unit

    @JsName("SetBlackboardValueAsString")
    public fun setBlackboardValueAsString(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: String,
    ): Unit

    @JsName("SetBlackboardValueAsRotator")
    public fun setBlackboardValueAsRotator(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Rotator,
    ): Unit

    @JsName("SetBlackboardValueAsObject")
    public fun setBlackboardValueAsObject(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: UObject,
    ): Unit

    @JsName("SetBlackboardValueAsName")
    public fun setBlackboardValueAsName(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: String,
    ): Unit

    @JsName("SetBlackboardValueAsInt")
    public fun setBlackboardValueAsInt(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Number,
    ): Unit

    @JsName("SetBlackboardValueAsFloat")
    public fun setBlackboardValueAsFloat(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Number,
    ): Unit

    @JsName("SetBlackboardValueAsEnum")
    public fun setBlackboardValueAsEnum(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Number,
    ): Unit

    @JsName("SetBlackboardValueAsClass")
    public fun setBlackboardValueAsClass(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: UnrealEngineClass,
    ): Unit

    @JsName("SetBlackboardValueAsBool")
    public fun setBlackboardValueAsBool(
      nodeOwner: BtNode,
      key: BlackboardKeySelector,
      value: Boolean,
    ): Unit

    @JsName("GetOwnersBlackboard")
    public fun getOwnersBlackboard(nodeOwner: BtNode): BlackboardComponent

    @JsName("GetOwnerComponent")
    public fun getOwnerComponent(nodeOwner: BtNode): BehaviorTreeComponent

    @JsName("GetBlackboardValueAsVector")
    public fun getBlackboardValueAsVector(nodeOwner: BtNode, key: BlackboardKeySelector): Vector

    @JsName("GetBlackboardValueAsString")
    public fun getBlackboardValueAsString(nodeOwner: BtNode, key: BlackboardKeySelector): String

    @JsName("GetBlackboardValueAsRotator")
    public fun getBlackboardValueAsRotator(nodeOwner: BtNode, key: BlackboardKeySelector): Rotator

    @JsName("GetBlackboardValueAsObject")
    public fun getBlackboardValueAsObject(nodeOwner: BtNode, key: BlackboardKeySelector): UObject

    @JsName("GetBlackboardValueAsName")
    public fun getBlackboardValueAsName(nodeOwner: BtNode, key: BlackboardKeySelector): String

    @JsName("GetBlackboardValueAsInt")
    public fun getBlackboardValueAsInt(nodeOwner: BtNode, key: BlackboardKeySelector): Number

    @JsName("GetBlackboardValueAsFloat")
    public fun getBlackboardValueAsFloat(nodeOwner: BtNode, key: BlackboardKeySelector): Number

    @JsName("GetBlackboardValueAsEnum")
    public fun getBlackboardValueAsEnum(nodeOwner: BtNode, key: BlackboardKeySelector): Number

    @JsName("GetBlackboardValueAsClass")
    public fun getBlackboardValueAsClass(nodeOwner: BtNode, key: BlackboardKeySelector):
        UnrealEngineClass

    @JsName("GetBlackboardValueAsBool")
    public fun getBlackboardValueAsBool(nodeOwner: BtNode, key: BlackboardKeySelector): Boolean

    @JsName("GetBlackboardValueAsActor")
    public fun getBlackboardValueAsActor(nodeOwner: BtNode, key: BlackboardKeySelector): Actor

    @JsName("ClearBlackboardValueAsVector")
    public fun clearBlackboardValueAsVector(nodeOwner: BtNode, key: BlackboardKeySelector): Unit

    @JsName("ClearBlackboardValue")
    public fun clearBlackboardValue(nodeOwner: BtNode, key: BlackboardKeySelector): Unit

    @JsName("C")
    public fun copy(other: UObject): BtFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): BtFunctionLibrary
  }
}

@JsName("BTService_BlackboardBase")
public open external class BtServiceBlackboardBase(
  outer: UObject,
) : BtService {
  @JsName("BlackboardKey")
  public open var blackboardKey: BlackboardKeySelector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtServiceBlackboardBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtServiceBlackboardBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtServiceBlackboardBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtServiceBlackboardBase

    @JsName("C")
    public fun copy(other: UObject): BtServiceBlackboardBase

    @JsName("C")
    public fun copy(other: Any): BtServiceBlackboardBase
  }
}

@JsName("BTService_BlueprintBase")
public open external class BtServiceBlueprintBase(
  outer: UObject,
) : BtService {
  @JsName("AIOwner")
  public open var aiOwner: AiController

  @JsName("ActorOwner")
  public open var actorOwner: Actor

  @JsName("CustomDescription")
  public open var customDescription: String

  @JsName("bShowPropertyDetails")
  public open var showPropertyDetails: Boolean

  @JsName("bShowEventDetails")
  public open var showEventDetails: Boolean

  @JsName("ReceiveTickAI")
  public open fun receiveTickAi(
    ownerController: AiController,
    controlledPawn: Pawn,
    deltaSeconds: Number,
  ): Unit

  @JsName("ReceiveTick")
  public open fun receiveTick(ownerActor: Actor, deltaSeconds: Number): Unit

  @JsName("ReceiveSearchStartAI")
  public open fun receiveSearchStartAi(ownerController: AiController, controlledPawn: Pawn): Unit

  @JsName("ReceiveSearchStart")
  public open fun receiveSearchStart(ownerActor: Actor): Unit

  @JsName("ReceiveDeactivationAI")
  public open fun receiveDeactivationAi(ownerController: AiController, controlledPawn: Pawn): Unit

  @JsName("ReceiveDeactivation")
  public open fun receiveDeactivation(ownerActor: Actor): Unit

  @JsName("ReceiveActivationAI")
  public open fun receiveActivationAi(ownerController: AiController, controlledPawn: Pawn): Unit

  @JsName("ReceiveActivation")
  public open fun receiveActivation(ownerActor: Actor): Unit

  @JsName("IsServiceActive")
  public open fun isServiceActive(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtServiceBlueprintBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtServiceBlueprintBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtServiceBlueprintBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtServiceBlueprintBase

    @JsName("C")
    public fun copy(other: UObject): BtServiceBlueprintBase

    @JsName("C")
    public fun copy(other: Any): BtServiceBlueprintBase
  }
}

@JsName("BTService_DefaultFocus")
public open external class BtServiceDefaultFocus(
  outer: UObject,
) : BtServiceBlackboardBase {
  @JsName("FocusPriority")
  public open var focusPriority: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtServiceDefaultFocus

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtServiceDefaultFocus

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtServiceDefaultFocus

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtServiceDefaultFocus

    @JsName("C")
    public fun copy(other: UObject): BtServiceDefaultFocus

    @JsName("C")
    public fun copy(other: Any): BtServiceDefaultFocus
  }
}

@JsName("EAIParamType")
public external object AIParamType {
  public var Float: String

  public var Int: String

  public var Bool: String

  public var MAX: String
}

@JsName("AIDynamicParam")
public open external class AiDynamicParam {
  @JsName("ParamName")
  public open var paramName: String

  @JsName("ParamType")
  public open var paramType: String

  @JsName("Value")
  public open var value: Number

  @JsName("BBKey")
  public open var bbKey: BlackboardKeySelector

  public open fun clone(): AiDynamicParam

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiDynamicParam

    @JsName("C")
    public fun copy(other: Any): AiDynamicParam
  }
}

@JsName("EQSParametrizedQueryExecutionRequest")
public open external class EqsParametrizedQueryExecutionRequest {
  @JsName("QueryTemplate")
  public open var queryTemplate: EnvQuery

  @JsName("QueryConfig")
  public open var queryConfig: Array<AiDynamicParam>

  @JsName("EQSQueryBlackboardKey")
  public open var eqsQueryBlackboardKey: BlackboardKeySelector

  @JsName("RunMode")
  public open var runMode: String

  @JsName("bUseBBKeyForQueryTemplate")
  public open var useBbKeyForQueryTemplate: Boolean

  public open fun clone(): EqsParametrizedQueryExecutionRequest

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EqsParametrizedQueryExecutionRequest

    @JsName("C")
    public fun copy(other: Any): EqsParametrizedQueryExecutionRequest
  }
}

@JsName("BTService_RunEQS")
public open external class BtServiceRunEqs(
  outer: UObject,
) : BtServiceBlackboardBase {
  @JsName("EQSRequest")
  public open var eqsRequest: EqsParametrizedQueryExecutionRequest

  @JsName("bUpdateBBOnFail")
  public open var updateBbOnFail: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtServiceRunEqs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtServiceRunEqs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtServiceRunEqs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtServiceRunEqs

    @JsName("C")
    public fun copy(other: UObject): BtServiceRunEqs

    @JsName("C")
    public fun copy(other: Any): BtServiceRunEqs
  }
}

@JsName("BTTask_BlackboardBase")
public open external class BtTaskBlackboardBase(
  outer: UObject,
) : BtTaskNode {
  @JsName("BlackboardKey")
  public open var blackboardKey: BlackboardKeySelector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskBlackboardBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskBlackboardBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskBlackboardBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskBlackboardBase

    @JsName("C")
    public fun copy(other: UObject): BtTaskBlackboardBase

    @JsName("C")
    public fun copy(other: Any): BtTaskBlackboardBase
  }
}

public open external class IntervalCountdown {
  @JsName("Interval")
  public open var interval: Number

  public open fun clone(): IntervalCountdown

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): IntervalCountdown

    @JsName("C")
    public fun copy(other: Any): IntervalCountdown
  }
}

@JsName("BTTask_BlueprintBase")
public open external class BtTaskBlueprintBase(
  outer: UObject,
) : BtTaskNode {
  @JsName("AIOwner")
  public open var aiOwner: AiController

  @JsName("ActorOwner")
  public open var actorOwner: Actor

  @JsName("TickInterval")
  public open var tickInterval: IntervalCountdown

  @JsName("CustomDescription")
  public open var customDescription: String

  @JsName("bShowPropertyDetails")
  public open var showPropertyDetails: Boolean

  @JsName("SetFinishOnMessageWithId")
  public open fun setFinishOnMessageWithId(messageName: String, requestId: Number): Unit

  @JsName("SetFinishOnMessage")
  public open fun setFinishOnMessage(messageName: String): Unit

  @JsName("ReceiveTickAI")
  public open fun receiveTickAi(
    ownerController: AiController,
    controlledPawn: Pawn,
    deltaSeconds: Number,
  ): Unit

  @JsName("ReceiveTick")
  public open fun receiveTick(ownerActor: Actor, deltaSeconds: Number): Unit

  @JsName("ReceiveExecuteAI")
  public open fun receiveExecuteAi(ownerController: AiController, controlledPawn: Pawn): Unit

  @JsName("ReceiveExecute")
  public open fun receiveExecute(ownerActor: Actor): Unit

  @JsName("ReceiveAbortAI")
  public open fun receiveAbortAi(ownerController: AiController, controlledPawn: Pawn): Unit

  @JsName("ReceiveAbort")
  public open fun receiveAbort(ownerActor: Actor): Unit

  @JsName("IsTaskExecuting")
  public open fun isTaskExecuting(): Boolean

  @JsName("IsTaskAborting")
  public open fun isTaskAborting(): Boolean

  @JsName("FinishExecute")
  public open fun finishExecute(success: Boolean): Unit

  @JsName("FinishAbort")
  public open fun finishAbort(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskBlueprintBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskBlueprintBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskBlueprintBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskBlueprintBase

    @JsName("C")
    public fun copy(other: UObject): BtTaskBlueprintBase

    @JsName("C")
    public fun copy(other: Any): BtTaskBlueprintBase
  }
}

@JsName("BTTask_FinishWithResult")
public open external class BtTaskFinishWithResult(
  outer: UObject,
) : BtTaskNode {
  @JsName("Result")
  public open var result: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskFinishWithResult

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskFinishWithResult

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskFinishWithResult

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskFinishWithResult

    @JsName("C")
    public fun copy(other: UObject): BtTaskFinishWithResult

    @JsName("C")
    public fun copy(other: Any): BtTaskFinishWithResult
  }
}

@JsName("BTTask_GameplayTaskBase")
public open external class BtTaskGameplayTaskBase(
  outer: UObject,
) : BtTaskNode {
  @JsName("bWaitForGameplayTask")
  public open var waitForGameplayTask: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskGameplayTaskBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskGameplayTaskBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskGameplayTaskBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskGameplayTaskBase

    @JsName("C")
    public fun copy(other: UObject): BtTaskGameplayTaskBase

    @JsName("C")
    public fun copy(other: Any): BtTaskGameplayTaskBase
  }
}

@JsName("BTTask_MakeNoise")
public open external class BtTaskMakeNoise(
  outer: UObject,
) : BtTaskNode {
  @JsName("Loudnes")
  public open var loudnes: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskMakeNoise

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskMakeNoise

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskMakeNoise

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskMakeNoise

    @JsName("C")
    public fun copy(other: UObject): BtTaskMakeNoise

    @JsName("C")
    public fun copy(other: Any): BtTaskMakeNoise
  }
}

@JsName("BTTask_MoveTo")
public open external class BtTaskMoveTo(
  outer: UObject,
) : BtTaskBlackboardBase {
  @JsName("AcceptableRadius")
  public open var acceptableRadius: Number

  @JsName("FilterClass")
  public open var filterClass: UnrealEngineClass

  @JsName("ObservedBlackboardValueTolerance")
  public open var observedBlackboardValueTolerance: Number

  @JsName("bObserveBlackboardValue")
  public open var observeBlackboardValue: Boolean

  @JsName("bAllowStrafe")
  public open var allowStrafe: Boolean

  @JsName("bAllowPartialPath")
  public open var allowPartialPath: Boolean

  @JsName("bTrackMovingGoal")
  public open var trackMovingGoal: Boolean

  @JsName("bProjectGoalLocation")
  public open var projectGoalLocation: Boolean

  @JsName("bReachTestIncludesAgentRadius")
  public open var reachTestIncludesAgentRadius: Boolean

  @JsName("bReachTestIncludesGoalRadius")
  public open var reachTestIncludesGoalRadius: Boolean

  @JsName("bStopOnOverlap")
  public open var stopOnOverlap: Boolean

  @JsName("bStopOnOverlapNeedsUpdate")
  public open var stopOnOverlapNeedsUpdate: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskMoveTo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskMoveTo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskMoveTo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskMoveTo

    @JsName("C")
    public fun copy(other: UObject): BtTaskMoveTo

    @JsName("C")
    public fun copy(other: Any): BtTaskMoveTo
  }
}

@JsName("BTTask_MoveDirectlyToward")
public open external class BtTaskMoveDirectlyToward(
  outer: UObject,
) : BtTaskMoveTo {
  @JsName("bDisablePathUpdateOnGoalLocationChange")
  public open var disablePathUpdateOnGoalLocationChange: Boolean

  @JsName("bProjectVectorGoalToNavigation")
  public open var projectVectorGoalToNavigation: Boolean

  @JsName("bUpdatedDeprecatedProperties")
  public open var updatedDeprecatedProperties: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskMoveDirectlyToward

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskMoveDirectlyToward

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskMoveDirectlyToward

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskMoveDirectlyToward

    @JsName("C")
    public fun copy(other: UObject): BtTaskMoveDirectlyToward

    @JsName("C")
    public fun copy(other: Any): BtTaskMoveDirectlyToward
  }
}

@JsName("BTTask_PawnActionBase")
public open external class BtTaskPawnActionBase(
  outer: UObject,
) : BtTaskNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskPawnActionBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskPawnActionBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskPawnActionBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskPawnActionBase

    @JsName("C")
    public fun copy(other: UObject): BtTaskPawnActionBase

    @JsName("C")
    public fun copy(other: Any): BtTaskPawnActionBase
  }
}

@JsName("BTTask_PlayAnimation")
public open external class BtTaskPlayAnimation(
  outer: UObject,
) : BtTaskNode {
  @JsName("AnimationToPlay")
  public open var animationToPlay: AnimationAsset

  @JsName("bLooping")
  public open var looping: Boolean

  @JsName("bNonBlocking")
  public open var nonBlocking: Boolean

  @JsName("MyOwnerComp")
  public open var myOwnerComp: BehaviorTreeComponent

  @JsName("CachedSkelMesh")
  public open var cachedSkelMesh: SkeletalMeshComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskPlayAnimation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskPlayAnimation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskPlayAnimation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskPlayAnimation

    @JsName("C")
    public fun copy(other: UObject): BtTaskPlayAnimation

    @JsName("C")
    public fun copy(other: Any): BtTaskPlayAnimation
  }
}

@JsName("BTTask_PlaySound")
public open external class BtTaskPlaySound(
  outer: UObject,
) : BtTaskNode {
  @JsName("SoundToPlay")
  public open var soundToPlay: SoundCue

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskPlaySound

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskPlaySound

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskPlaySound

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskPlaySound

    @JsName("C")
    public fun copy(other: UObject): BtTaskPlaySound

    @JsName("C")
    public fun copy(other: Any): BtTaskPlaySound
  }
}

@JsName("BTTask_PushPawnAction")
public open external class BtTaskPushPawnAction(
  outer: UObject,
) : BtTaskPawnActionBase {
  @JsName("Action")
  public open var action: PawnAction

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskPushPawnAction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskPushPawnAction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskPushPawnAction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskPushPawnAction

    @JsName("C")
    public fun copy(other: UObject): BtTaskPushPawnAction

    @JsName("C")
    public fun copy(other: Any): BtTaskPushPawnAction
  }
}

@JsName("BTTask_RotateToFaceBBEntry")
public open external class BtTaskRotateToFaceBbEntry(
  outer: UObject,
) : BtTaskBlackboardBase {
  @JsName("Precision")
  public open var precision: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskRotateToFaceBbEntry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskRotateToFaceBbEntry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskRotateToFaceBbEntry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskRotateToFaceBbEntry

    @JsName("C")
    public fun copy(other: UObject): BtTaskRotateToFaceBbEntry

    @JsName("C")
    public fun copy(other: Any): BtTaskRotateToFaceBbEntry
  }
}

@JsName("BTTask_RunBehavior")
public open external class BtTaskRunBehavior(
  outer: UObject,
) : BtTaskNode {
  @JsName("BehaviorAsset")
  public open var behaviorAsset: BehaviorTree

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskRunBehavior

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskRunBehavior

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskRunBehavior

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskRunBehavior

    @JsName("C")
    public fun copy(other: UObject): BtTaskRunBehavior

    @JsName("C")
    public fun copy(other: Any): BtTaskRunBehavior
  }
}

@JsName("BTTask_RunBehaviorDynamic")
public open external class BtTaskRunBehaviorDynamic(
  outer: UObject,
) : BtTaskNode {
  @JsName("InjectionTag")
  public open var injectionTag: GameplayTag

  @JsName("DefaultBehaviorAsset")
  public open var defaultBehaviorAsset: BehaviorTree

  @JsName("BehaviorAsset")
  public open var behaviorAsset: BehaviorTree

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskRunBehaviorDynamic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskRunBehaviorDynamic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskRunBehaviorDynamic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskRunBehaviorDynamic

    @JsName("C")
    public fun copy(other: UObject): BtTaskRunBehaviorDynamic

    @JsName("C")
    public fun copy(other: Any): BtTaskRunBehaviorDynamic
  }
}

public open external class EnvNamedValue {
  @JsName("ParamName")
  public open var paramName: String

  @JsName("ParamType")
  public open var paramType: String

  @JsName("Value")
  public open var value: Number

  public open fun clone(): EnvNamedValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EnvNamedValue

    @JsName("C")
    public fun copy(other: Any): EnvNamedValue
  }
}

@JsName("BTTask_RunEQSQuery")
public open external class BtTaskRunEqsQuery(
  outer: UObject,
) : BtTaskBlackboardBase {
  @JsName("QueryTemplate")
  public open var queryTemplate: EnvQuery

  @JsName("QueryParams")
  public open var queryParams: Array<EnvNamedValue>

  @JsName("QueryConfig")
  public open var queryConfig: Array<AiDynamicParam>

  @JsName("RunMode")
  public open var runMode: String

  @JsName("EQSQueryBlackboardKey")
  public open var eqsQueryBlackboardKey: BlackboardKeySelector

  @JsName("bUseBBKey")
  public open var useBbKey: Boolean

  @JsName("EQSRequest")
  public open var eqsRequest: EqsParametrizedQueryExecutionRequest

  @JsName("bUpdateBBOnFail")
  public open var updateBbOnFail: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskRunEqsQuery

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskRunEqsQuery

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskRunEqsQuery

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskRunEqsQuery

    @JsName("C")
    public fun copy(other: UObject): BtTaskRunEqsQuery

    @JsName("C")
    public fun copy(other: Any): BtTaskRunEqsQuery
  }
}

@JsName("BTTask_SetTagCooldown")
public open external class BtTaskSetTagCooldown(
  outer: UObject,
) : BtTaskNode {
  @JsName("CooldownTag")
  public open var cooldownTag: GameplayTag

  @JsName("bAddToExistingDuration")
  public open var addToExistingDuration: Boolean

  @JsName("CooldownDuration")
  public open var cooldownDuration: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskSetTagCooldown

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskSetTagCooldown

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskSetTagCooldown

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskSetTagCooldown

    @JsName("C")
    public fun copy(other: UObject): BtTaskSetTagCooldown

    @JsName("C")
    public fun copy(other: Any): BtTaskSetTagCooldown
  }
}

@JsName("BTTask_Wait")
public open external class BtTaskWait(
  outer: UObject,
) : BtTaskNode {
  @JsName("WaitTime")
  public open var waitTime: Number

  @JsName("RandomDeviation")
  public open var randomDeviation: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskWait

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskWait

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskWait

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskWait

    @JsName("C")
    public fun copy(other: UObject): BtTaskWait

    @JsName("C")
    public fun copy(other: Any): BtTaskWait
  }
}

@JsName("BTTask_WaitBlackboardTime")
public open external class BtTaskWaitBlackboardTime(
  outer: UObject,
) : BtTaskWait {
  @JsName("BlackboardKey")
  public open var blackboardKey: BlackboardKeySelector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BtTaskWaitBlackboardTime

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BtTaskWaitBlackboardTime

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BtTaskWaitBlackboardTime

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BtTaskWaitBlackboardTime

    @JsName("C")
    public fun copy(other: UObject): BtTaskWaitBlackboardTime

    @JsName("C")
    public fun copy(other: Any): BtTaskWaitBlackboardTime
  }
}

public open external class CrowdAgentInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CrowdAgentInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CrowdAgentInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CrowdAgentInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CrowdAgentInterface

    @JsName("C")
    public fun copy(other: UObject): CrowdAgentInterface

    @JsName("C")
    public fun copy(other: Any): CrowdAgentInterface
  }
}

public open external class CrowdFollowingComponent(
  outer: UObject,
) : PathFollowingComponent {
  @JsName("CrowdAgentMoveDirection")
  public open var crowdAgentMoveDirection: Vector

  @JsName("CharacterMovement")
  public open var characterMovement: CharacterMovementComponent

  @JsName("AvoidanceGroup")
  public open var avoidanceGroup: NavAvoidanceMask

  @JsName("GroupsToAvoid")
  public open var groupsToAvoid: NavAvoidanceMask

  @JsName("GroupsToIgnore")
  public open var groupsToIgnore: NavAvoidanceMask

  @JsName("SuspendCrowdSteering")
  public open fun suspendCrowdSteering(suspend: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CrowdFollowingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CrowdFollowingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CrowdFollowingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CrowdFollowingComponent

    @JsName("C")
    public fun copy(other: UObject): CrowdFollowingComponent

    @JsName("C")
    public fun copy(other: Any): CrowdFollowingComponent
  }
}

public open external class CrowdManagerBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CrowdManagerBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CrowdManagerBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CrowdManagerBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CrowdManagerBase

    @JsName("C")
    public fun copy(other: UObject): CrowdManagerBase

    @JsName("C")
    public fun copy(other: Any): CrowdManagerBase
  }
}

public open external class CrowdAvoidanceConfig {
  @JsName("VelocityBias")
  public open var velocityBias: Number

  @JsName("DesiredVelocityWeight")
  public open var desiredVelocityWeight: Number

  @JsName("CurrentVelocityWeight")
  public open var currentVelocityWeight: Number

  @JsName("SideBiasWeight")
  public open var sideBiasWeight: Number

  @JsName("ImpactTimeWeight")
  public open var impactTimeWeight: Number

  @JsName("ImpactTimeRange")
  public open var impactTimeRange: Number

  @JsName("CustomPatternIdx")
  public open var customPatternIdx: Number

  @JsName("AdaptiveDivisions")
  public open var adaptiveDivisions: Number

  @JsName("AdaptiveRings")
  public open var adaptiveRings: Number

  @JsName("AdaptiveDepth")
  public open var adaptiveDepth: Number

  public open fun clone(): CrowdAvoidanceConfig

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CrowdAvoidanceConfig

    @JsName("C")
    public fun copy(other: Any): CrowdAvoidanceConfig
  }
}

public open external class CrowdAvoidanceSamplingPattern {
  @JsName("Angles")
  public open var angles: Array<Number>

  @JsName("Radii")
  public open var radii: Array<Number>

  public open fun clone(): CrowdAvoidanceSamplingPattern

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CrowdAvoidanceSamplingPattern

    @JsName("C")
    public fun copy(other: Any): CrowdAvoidanceSamplingPattern
  }
}

public open external class CrowdManager(
  outer: UObject,
) : CrowdManagerBase {
  @JsName("MyNavData")
  public open var myNavData: NavigationData

  @JsName("AvoidanceConfig")
  public open var avoidanceConfig: Array<CrowdAvoidanceConfig>

  @JsName("SamplingPatterns")
  public open var samplingPatterns: Array<CrowdAvoidanceSamplingPattern>

  @JsName("MaxAgents")
  public open var maxAgents: Number

  @JsName("MaxAgentRadius")
  public open var maxAgentRadius: Number

  @JsName("MaxAvoidedAgents")
  public open var maxAvoidedAgents: Number

  @JsName("MaxAvoidedWalls")
  public open var maxAvoidedWalls: Number

  @JsName("NavmeshCheckInterval")
  public open var navmeshCheckInterval: Number

  @JsName("PathOptimizationInterval")
  public open var pathOptimizationInterval: Number

  @JsName("SeparationDirClamp")
  public open var separationDirClamp: Number

  @JsName("PathOffsetRadiusMultiplier")
  public open var pathOffsetRadiusMultiplier: Number

  @JsName("bResolveCollisions")
  public open var resolveCollisions: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CrowdManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CrowdManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CrowdManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CrowdManager

    @JsName("C")
    public fun copy(other: UObject): CrowdManager

    @JsName("C")
    public fun copy(other: Any): CrowdManager
  }
}

@JsName("DetourCrowdAIController")
public open external class DetourCrowdAiController(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : AiController {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DetourCrowdAiController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DetourCrowdAiController

    @JsName("C")
    public fun copy(other: UObject): DetourCrowdAiController

    @JsName("C")
    public fun copy(other: Any): DetourCrowdAiController
  }
}

@JsName("T$627")
public external interface ResultingLocationProvider {
  @JsName("ResultingLocation")
  public var resultingLocation: Vector
}

@JsName("T$628")
public external interface ResultingActorProvider {
  @JsName("ResultingActor")
  public var resultingActor: Actor
}

@JsName("T$629")
public external interface ResultingLocationSetProvider {
  @JsName("ResultingLocationSet")
  public var resultingLocationSet: Array<Vector>
}

@JsName("T$630")
public external interface ResultingActorsSetProvider {
  @JsName("ResultingActorsSet")
  public var resultingActorsSet: Array<Actor>
}

@JsName("EnvQueryContext_BlueprintBase")
public open external class EnvQueryContextBlueprintBase(
  outer: UObject,
) : EnvQueryContext {
  @JsName("ProvideSingleLocation")
  public open fun provideSingleLocation(
    querierObject: UObject,
    querierActor: Actor,
    resultingLocation: Vector,
  ): ResultingLocationProvider

  @JsName("ProvideSingleActor")
  public open fun provideSingleActor(
    querierObject: UObject,
    querierActor: Actor,
    resultingActor: Actor,
  ): ResultingActorProvider

  @JsName("ProvideLocationsSet")
  public open fun provideLocationsSet(
    querierObject: UObject,
    querierActor: Actor,
    resultingLocationSet: Array<Vector>,
  ): ResultingLocationSetProvider

  @JsName("ProvideActorsSet")
  public open fun provideActorsSet(
    querierObject: UObject,
    querierActor: Actor,
    resultingActorsSet: Array<Actor>,
  ): ResultingActorsSetProvider

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryContextBlueprintBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryContextBlueprintBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryContextBlueprintBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryContextBlueprintBase

    @JsName("C")
    public fun copy(other: UObject): EnvQueryContextBlueprintBase

    @JsName("C")
    public fun copy(other: Any): EnvQueryContextBlueprintBase
  }
}

@JsName("EnvQueryContext_Item")
public open external class EnvQueryContextItem(
  outer: UObject,
) : EnvQueryContext {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryContextItem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryContextItem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryContextItem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryContextItem

    @JsName("C")
    public fun copy(other: UObject): EnvQueryContextItem

    @JsName("C")
    public fun copy(other: Any): EnvQueryContextItem
  }
}

@JsName("EnvQueryContext_Querier")
public open external class EnvQueryContextQuerier(
  outer: UObject,
) : EnvQueryContext {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryContextQuerier

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryContextQuerier

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryContextQuerier

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryContextQuerier

    @JsName("C")
    public fun copy(other: UObject): EnvQueryContextQuerier

    @JsName("C")
    public fun copy(other: Any): EnvQueryContextQuerier
  }
}

public open external class EnvQueryDebugHelpers(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryDebugHelpers

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryDebugHelpers

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryDebugHelpers

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryDebugHelpers

    @JsName("C")
    public fun copy(other: UObject): EnvQueryDebugHelpers

    @JsName("C")
    public fun copy(other: Any): EnvQueryDebugHelpers
  }
}

@JsName("EnvQueryGenerator_ActorsOfClass")
public open external class EnvQueryGeneratorActorsOfClass(
  outer: UObject,
) : EnvQueryGenerator {
  @JsName("SearchedActorClass")
  public open var searchedActorClass: UnrealEngineClass

  @JsName("GenerateOnlyActorsInRadius")
  public open var generateOnlyActorsInRadius: AiDataProviderBoolValue

  @JsName("SearchRadius")
  public open var searchRadius: AiDataProviderFloatValue

  @JsName("SearchCenter")
  public open var searchCenter: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorActorsOfClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorActorsOfClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorActorsOfClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorActorsOfClass

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorActorsOfClass

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorActorsOfClass
  }
}

@JsName("EnvQueryGenerator_BlueprintBase")
public open external class EnvQueryGeneratorBlueprintBase(
  outer: UObject,
) : EnvQueryGenerator {
  @JsName("GeneratorsActionDescription")
  public open var generatorsActionDescription: String

  @JsName("Context")
  public open var context: UnrealEngineClass

  @JsName("GeneratedItemType")
  public open var generatedItemType: UnrealEngineClass

  @JsName("GetQuerier")
  public open fun getQuerier(): UObject

  @JsName("DoItemGeneration")
  public open fun doItemGeneration(contextLocations: Array<Vector>): Unit

  @JsName("AddGeneratedVector")
  public open fun addGeneratedVector(generatedVector: Vector): Unit

  @JsName("AddGeneratedActor")
  public open fun addGeneratedActor(generatedActor: Actor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorBlueprintBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorBlueprintBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorBlueprintBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorBlueprintBase

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorBlueprintBase

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorBlueprintBase
  }
}

@JsName("EnvQueryGenerator_Composite")
public open external class EnvQueryGeneratorComposite(
  outer: UObject,
) : EnvQueryGenerator {
  @JsName("Generators")
  public open var generators: Array<EnvQueryGenerator>

  @JsName("bAllowDifferentItemTypes")
  public open var allowDifferentItemTypes: Boolean

  @JsName("bHasMatchingItemType")
  public open var hasMatchingItemType: Boolean

  @JsName("ForcedItemType")
  public open var forcedItemType: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorComposite

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorComposite

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorComposite

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorComposite

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorComposite

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorComposite
  }
}

@JsName("EEnvTraceShape")
public external object EnvTraceShape {
  public var Line: String

  public var Box: String

  public var Sphere: String

  public var Capsule: String

  @JsName("EEnvTraceShape_MAX")
  public var Max: String
}

@JsName("EEnvQueryTrace")
public external object EnvQueryTrace {
  public var None: String

  public var Navigation: String

  public var GeometryByChannel: String

  public var GeometryByProfile: String

  public var NavigationOverLedges: String

  @JsName("EEnvQueryTrace_MAX")
  public var Max: String
}

public open external class EnvTraceData {
  @JsName("VersionNum")
  public open var versionNum: Number

  @JsName("NavigationFilter")
  public open var navigationFilter: UnrealEngineClass

  @JsName("ProjectDown")
  public open var projectDown: Number

  @JsName("ProjectUp")
  public open var projectUp: Number

  @JsName("ExtentX")
  public open var extentX: Number

  @JsName("ExtentY")
  public open var extentY: Number

  @JsName("ExtentZ")
  public open var extentZ: Number

  @JsName("PostProjectionVerticalOffset")
  public open var postProjectionVerticalOffset: Number

  @JsName("TraceChannel")
  public open var traceChannel: String

  @JsName("SerializedChannel")
  public open var serializedChannel: String

  @JsName("TraceProfileName")
  public open var traceProfileName: String

  @JsName("TraceShape")
  public open var traceShape: String

  @JsName("TraceMode")
  public open var traceMode: String

  @JsName("bTraceComplex")
  public open var traceComplex: Boolean

  @JsName("bOnlyBlockingHits")
  public open var onlyBlockingHits: Boolean

  @JsName("bCanTraceOnNavMesh")
  public open var canTraceOnNavMesh: Boolean

  @JsName("bCanTraceOnGeometry")
  public open var canTraceOnGeometry: Boolean

  @JsName("bCanDisableTrace")
  public open var canDisableTrace: Boolean

  @JsName("bCanProjectDown")
  public open var canProjectDown: Boolean

  public open fun clone(): EnvTraceData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EnvTraceData

    @JsName("C")
    public fun copy(other: Any): EnvTraceData
  }
}

@JsName("EnvQueryGenerator_ProjectedPoints")
public open external class EnvQueryGeneratorProjectedPoints(
  outer: UObject,
) : EnvQueryGenerator {
  @JsName("ProjectionData")
  public open var projectionData: EnvTraceData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorProjectedPoints

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorProjectedPoints

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorProjectedPoints

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorProjectedPoints

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorProjectedPoints

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorProjectedPoints
  }
}

@JsName("EnvQueryGenerator_Cone")
public open external class EnvQueryGeneratorCone(
  outer: UObject,
) : EnvQueryGeneratorProjectedPoints {
  @JsName("AlignedPointsDistance")
  public open var alignedPointsDistance: AiDataProviderFloatValue

  @JsName("ConeDegrees")
  public open var coneDegrees: AiDataProviderFloatValue

  @JsName("AngleStep")
  public open var angleStep: AiDataProviderFloatValue

  @JsName("Range")
  public open var range: AiDataProviderFloatValue

  @JsName("CenterActor")
  public open var centerActor: UnrealEngineClass

  @JsName("bIncludeContextLocation")
  public open var includeContextLocation: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorCone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorCone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorCone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorCone

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorCone

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorCone
  }
}

@JsName("EnvQueryGenerator_CurrentLocation")
public open external class EnvQueryGeneratorCurrentLocation(
  outer: UObject,
) : EnvQueryGenerator {
  @JsName("QueryContext")
  public open var queryContext: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorCurrentLocation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorCurrentLocation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorCurrentLocation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorCurrentLocation

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorCurrentLocation

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorCurrentLocation
  }
}

@JsName("AIDataProviderIntValue")
public open external class AiDataProviderIntValue : AiDataProviderTypedValue {
  @JsName("DefaultValue")
  public open var defaultValue: Number

  public override fun clone(): AiDataProviderIntValue

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AiDataProviderIntValue

    @JsName("C")
    public fun copy(other: Any): AiDataProviderIntValue
  }
}

@JsName("EEnvDirection")
public external object EnvDirectionEnum {
  public var TwoPoints: String

  public var Rotation: String

  @JsName("EEnvDirection_MAX")
  public var Max: String
}

public open external class EnvDirection {
  @JsName("LineFrom")
  public open var lineFrom: UnrealEngineClass

  @JsName("LineTo")
  public open var lineTo: UnrealEngineClass

  @JsName("Rotation")
  public open var rotation: UnrealEngineClass

  @JsName("DirMode")
  public open var dirMode: String

  public open fun clone(): EnvDirection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EnvDirection

    @JsName("C")
    public fun copy(other: Any): EnvDirection
  }
}

@JsName("EnvQueryGenerator_Donut")
public open external class EnvQueryGeneratorDonut(
  outer: UObject,
) : EnvQueryGeneratorProjectedPoints {
  @JsName("InnerRadius")
  public open var innerRadius: AiDataProviderFloatValue

  @JsName("OuterRadius")
  public open var outerRadius: AiDataProviderFloatValue

  @JsName("NumberOfRings")
  public open var numberOfRings: AiDataProviderIntValue

  @JsName("PointsPerRing")
  public open var pointsPerRing: AiDataProviderIntValue

  @JsName("ArcDirection")
  public open var arcDirection: EnvDirection

  @JsName("ArcAngle")
  public open var arcAngle: AiDataProviderFloatValue

  @JsName("bUseSpiralPattern")
  public open var useSpiralPattern: Boolean

  @JsName("Center")
  public open var center: UnrealEngineClass

  @JsName("bDefineArc")
  public open var defineArc: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorDonut

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorDonut

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorDonut

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorDonut

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorDonut

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorDonut
  }
}

@JsName("EPointOnCircleSpacingMethod")
public external object PointOnCircleSpacingMethod {
  @JsName("BySpaceBetween")
  public var SpaceBetween: String

  @JsName("ByNumberOfPoints")
  public var NumberOfPoints: String

  @JsName("EPointOnCircleSpacingMethod_MAX")
  public var Max: String
}

@JsName("EnvQueryGenerator_OnCircle")
public open external class EnvQueryGeneratorOnCircle(
  outer: UObject,
) : EnvQueryGeneratorProjectedPoints {
  @JsName("CircleRadius")
  public open var circleRadius: AiDataProviderFloatValue

  @JsName("SpaceBetween")
  public open var spaceBetween: AiDataProviderFloatValue

  @JsName("NumberOfPoints")
  public open var numberOfPoints: AiDataProviderIntValue

  @JsName("PointOnCircleSpacingMethod")
  public open var pointOnCircleSpacingMethod: String

  @JsName("ArcDirection")
  public open var arcDirection: EnvDirection

  @JsName("ArcAngle")
  public open var arcAngle: AiDataProviderFloatValue

  @JsName("AngleRadians")
  public open var angleRadians: Number

  @JsName("CircleCenter")
  public open var circleCenter: UnrealEngineClass

  @JsName("bIgnoreAnyContextActorsWhenGeneratingCircle")
  public open var ignoreAnyContextActorsWhenGeneratingCircle: Boolean

  @JsName("CircleCenterZOffset")
  public open var circleCenterZOffset: AiDataProviderFloatValue

  @JsName("TraceData")
  public open var traceData: EnvTraceData

  @JsName("bDefineArc")
  public open var defineArc: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorOnCircle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorOnCircle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorOnCircle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorOnCircle

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorOnCircle

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorOnCircle
  }
}

@JsName("EnvQueryGenerator_SimpleGrid")
public open external class EnvQueryGeneratorSimpleGrid(
  outer: UObject,
) : EnvQueryGeneratorProjectedPoints {
  @JsName("GridSize")
  public open var gridSize: AiDataProviderFloatValue

  @JsName("SpaceBetween")
  public open var spaceBetween: AiDataProviderFloatValue

  @JsName("GenerateAround")
  public open var generateAround: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorSimpleGrid

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorSimpleGrid

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorSimpleGrid

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorSimpleGrid

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorSimpleGrid

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorSimpleGrid
  }
}

@JsName("EnvQueryGenerator_PathingGrid")
public open external class EnvQueryGeneratorPathingGrid(
  outer: UObject,
) : EnvQueryGeneratorSimpleGrid {
  @JsName("PathToItem")
  public open var pathToItem: AiDataProviderBoolValue

  @JsName("NavigationFilter")
  public open var navigationFilter: UnrealEngineClass

  @JsName("ScanRangeMultiplier")
  public open var scanRangeMultiplier: AiDataProviderFloatValue

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorPathingGrid

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorPathingGrid

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorPathingGrid

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorPathingGrid

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorPathingGrid

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorPathingGrid
  }
}

@JsName("EnvQueryGenerator_PerceivedActors")
public open external class EnvQueryGeneratorPerceivedActors(
  outer: UObject,
) : EnvQueryGenerator {
  @JsName("AllowedActorClass")
  public open var allowedActorClass: UnrealEngineClass

  @JsName("SearchRadius")
  public open var searchRadius: AiDataProviderFloatValue

  @JsName("ListenerContext")
  public open var listenerContext: UnrealEngineClass

  @JsName("SenseToUse")
  public open var senseToUse: UnrealEngineClass

  @JsName("bIncludeKnownActors")
  public open var includeKnownActors: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryGeneratorPerceivedActors

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryGeneratorPerceivedActors

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryGeneratorPerceivedActors

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryGeneratorPerceivedActors

    @JsName("C")
    public fun copy(other: UObject): EnvQueryGeneratorPerceivedActors

    @JsName("C")
    public fun copy(other: Any): EnvQueryGeneratorPerceivedActors
  }
}

@JsName("EnvQueryItemType_VectorBase")
public open external class EnvQueryItemTypeVectorBase(
  outer: UObject,
) : EnvQueryItemType {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryItemTypeVectorBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryItemTypeVectorBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryItemTypeVectorBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryItemTypeVectorBase

    @JsName("C")
    public fun copy(other: UObject): EnvQueryItemTypeVectorBase

    @JsName("C")
    public fun copy(other: Any): EnvQueryItemTypeVectorBase
  }
}

@JsName("EnvQueryItemType_ActorBase")
public open external class EnvQueryItemTypeActorBase(
  outer: UObject,
) : EnvQueryItemTypeVectorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryItemTypeActorBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryItemTypeActorBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryItemTypeActorBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryItemTypeActorBase

    @JsName("C")
    public fun copy(other: UObject): EnvQueryItemTypeActorBase

    @JsName("C")
    public fun copy(other: Any): EnvQueryItemTypeActorBase
  }
}

@JsName("EnvQueryItemType_Actor")
public open external class EnvQueryItemTypeActor(
  outer: UObject,
) : EnvQueryItemTypeActorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryItemTypeActor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryItemTypeActor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryItemTypeActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryItemTypeActor

    @JsName("C")
    public fun copy(other: UObject): EnvQueryItemTypeActor

    @JsName("C")
    public fun copy(other: Any): EnvQueryItemTypeActor
  }
}

@JsName("EnvQueryItemType_Direction")
public open external class EnvQueryItemTypeDirection(
  outer: UObject,
) : EnvQueryItemTypeVectorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryItemTypeDirection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryItemTypeDirection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryItemTypeDirection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryItemTypeDirection

    @JsName("C")
    public fun copy(other: UObject): EnvQueryItemTypeDirection

    @JsName("C")
    public fun copy(other: Any): EnvQueryItemTypeDirection
  }
}

@JsName("EnvQueryItemType_Point")
public open external class EnvQueryItemTypePoint(
  outer: UObject,
) : EnvQueryItemTypeVectorBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryItemTypePoint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryItemTypePoint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryItemTypePoint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryItemTypePoint

    @JsName("C")
    public fun copy(other: UObject): EnvQueryItemTypePoint

    @JsName("C")
    public fun copy(other: Any): EnvQueryItemTypePoint
  }
}

@JsName("EEnvTestDistance")
public external object EnvTestDistance {
  @JsName("Distance3D")
  public var ThreeD: String

  @JsName("Distance2D")
  public var TwoD: String

  @JsName("DistanceZ")
  public var z: String

  @JsName("DistanceAbsoluteZ")
  public var AbsoluteZ: String

  @JsName("EEnvTestDistance_MAX")
  public var Max: String
}

@JsName("EnvQueryTest_Distance")
public open external class EnvQueryTestDistance(
  outer: UObject,
) : EnvQueryTest {
  @JsName("TestMode")
  public open var testMode: String

  @JsName("DistanceTo")
  public open var distanceTo: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestDistance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestDistance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestDistance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestDistance

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestDistance

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestDistance
  }
}

@JsName("EEnvTestDot")
public external object EnvTestDot {
  @JsName("Dot3D")
  public var ThreeD: String

  @JsName("Dot2D")
  public var TwoD: String

  @JsName("EEnvTestDot_MAX")
  public var Max: String
}

@JsName("EnvQueryTest_Dot")
public open external class EnvQueryTestDot(
  outer: UObject,
) : EnvQueryTest {
  @JsName("LineA")
  public open var lineA: EnvDirection

  @JsName("LineB")
  public open var lineB: EnvDirection

  @JsName("TestMode")
  public open var testMode: String

  @JsName("bAbsoluteValue")
  public open var absoluteValue: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestDot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestDot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestDot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestDot

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestDot

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestDot
  }
}

@JsName("EnvQueryTest_GameplayTags")
public open external class EnvQueryTestGameplayTags(
  outer: UObject,
) : EnvQueryTest {
  @JsName("TagQueryToMatch")
  public open var tagQueryToMatch: GameplayTagQuery

  @JsName("bRejectIncompatibleItems")
  public open var rejectIncompatibleItems: Boolean

  @JsName("bUpdatedToUseQuery")
  public open var updatedToUseQuery: Boolean

  @JsName("TagsToMatch")
  public open var tagsToMatch: String

  @JsName("GameplayTags")
  public open var gameplayTags: GameplayTagContainer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestGameplayTags

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestGameplayTags

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestGameplayTags

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestGameplayTags

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestGameplayTags

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestGameplayTags
  }
}

@JsName("EEnvOverlapShape")
public external object EnvOverlapShape {
  public var Box: String

  public var Sphere: String

  public var Capsule: String

  @JsName("EEnvOverlapShape_MAX")
  public var Max: String
}

public open external class EnvOverlapData {
  @JsName("ExtentX")
  public open var extentX: Number

  @JsName("ExtentY")
  public open var extentY: Number

  @JsName("ExtentZ")
  public open var extentZ: Number

  @JsName("ShapeOffset")
  public open var shapeOffset: Vector

  @JsName("OverlapChannel")
  public open var overlapChannel: String

  @JsName("OverlapShape")
  public open var overlapShape: String

  @JsName("bOnlyBlockingHits")
  public open var onlyBlockingHits: Boolean

  @JsName("bOverlapComplex")
  public open var overlapComplex: Boolean

  @JsName("bSkipOverlapQuerier")
  public open var skipOverlapQuerier: Boolean

  public open fun clone(): EnvOverlapData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EnvOverlapData

    @JsName("C")
    public fun copy(other: Any): EnvOverlapData
  }
}

@JsName("EnvQueryTest_Overlap")
public open external class EnvQueryTestOverlap(
  outer: UObject,
) : EnvQueryTest {
  @JsName("OverlapData")
  public open var overlapData: EnvOverlapData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestOverlap

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestOverlap

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestOverlap

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestOverlap

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestOverlap

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestOverlap
  }
}

@JsName("EEnvTestPathfinding")
public external object EnvTestPathfinding {
  @JsName("PathExist")
  public var Exist: String

  @JsName("PathCost")
  public var Cost: String

  @JsName("PathLength")
  public var Length: String

  @JsName("EEnvTestPathfinding_MAX")
  public var Max: String
}

@JsName("EnvQueryTest_Pathfinding")
public open external class EnvQueryTestPathfinding(
  outer: UObject,
) : EnvQueryTest {
  @JsName("TestMode")
  public open var testMode: String

  @JsName("Context")
  public open var context: UnrealEngineClass

  @JsName("PathFromContext")
  public open var pathFromContext: AiDataProviderBoolValue

  @JsName("SkipUnreachable")
  public open var skipUnreachable: AiDataProviderBoolValue

  @JsName("FilterClass")
  public open var filterClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestPathfinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestPathfinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestPathfinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestPathfinding

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestPathfinding

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestPathfinding
  }
}

@JsName("EnvQueryTest_PathfindingBatch")
public open external class EnvQueryTestPathfindingBatch(
  outer: UObject,
) : EnvQueryTestPathfinding {
  @JsName("ScanRangeMultiplier")
  public open var scanRangeMultiplier: AiDataProviderFloatValue

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestPathfindingBatch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestPathfindingBatch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestPathfindingBatch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestPathfindingBatch

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestPathfindingBatch

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestPathfindingBatch
  }
}

@JsName("EnvQueryTest_Project")
public open external class EnvQueryTestProject(
  outer: UObject,
) : EnvQueryTest {
  @JsName("ProjectionData")
  public open var projectionData: EnvTraceData

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestProject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestProject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestProject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestProject

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestProject

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestProject
  }
}

@JsName("EnvQueryTest_Random")
public open external class EnvQueryTestRandom(
  outer: UObject,
) : EnvQueryTest {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestRandom

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestRandom

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestRandom

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestRandom

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestRandom

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestRandom
  }
}

@JsName("EnvQueryTest_Trace")
public open external class EnvQueryTestTrace(
  outer: UObject,
) : EnvQueryTest {
  @JsName("TraceData")
  public open var traceData: EnvTraceData

  @JsName("TraceFromContext")
  public open var traceFromContext: AiDataProviderBoolValue

  @JsName("ItemHeightOffset")
  public open var itemHeightOffset: AiDataProviderFloatValue

  @JsName("ContextHeightOffset")
  public open var contextHeightOffset: AiDataProviderFloatValue

  @JsName("Context")
  public open var context: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestTrace

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestTrace

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestTrace

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestTrace

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestTrace

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestTrace
  }
}

@JsName("EnvQueryTest_Volume")
public open external class EnvQueryTestVolume(
  outer: UObject,
) : EnvQueryTest {
  @JsName("VolumeContext")
  public open var volumeContext: UnrealEngineClass

  @JsName("VolumeClass")
  public open var volumeClass: UnrealEngineClass

  @JsName("bDoComplexVolumeTest")
  public open var doComplexVolumeTest: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTestVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTestVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTestVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTestVolume

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTestVolume

    @JsName("C")
    public fun copy(other: Any): EnvQueryTestVolume
  }
}

public open external class EnvQueryTypes(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EnvQueryTypes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EnvQueryTypes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EnvQueryTypes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EnvQueryTypes

    @JsName("C")
    public fun copy(other: UObject): EnvQueryTypes

    @JsName("C")
    public fun copy(other: Any): EnvQueryTypes
  }
}

@JsName("EQSQueryResultSourceInterface")
public open external class EqsQueryResultSourceInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EqsQueryResultSourceInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EqsQueryResultSourceInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EqsQueryResultSourceInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EqsQueryResultSourceInterface

    @JsName("C")
    public fun copy(other: UObject): EqsQueryResultSourceInterface

    @JsName("C")
    public fun copy(other: Any): EqsQueryResultSourceInterface
  }
}

@JsName("EQSRenderingComponent")
public open external class EqsRenderingComponent(
  outer: UObject,
) : DebugDrawComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EqsRenderingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EqsRenderingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EqsRenderingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EqsRenderingComponent

    @JsName("C")
    public fun copy(other: UObject): EqsRenderingComponent

    @JsName("C")
    public fun copy(other: Any): EqsRenderingComponent
  }
}

@JsName("EEnvQueryHightlightMode")
public external object EnvQueryHightlightMode {
  public var All: String

  public var Best5Pct: String

  public var Best25Pct: String

  @JsName("EEnvQueryHightlightMode_MAX")
  public var Max: String
}

@JsName("EQSTestingPawn")
public open external class EqsTestingPawn(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Character {
  @JsName("QueryTemplate")
  public open var queryTemplate: EnvQuery

  @JsName("QueryParams")
  public open var queryParams: Array<EnvNamedValue>

  @JsName("QueryConfig")
  public open var queryConfig: Array<AiDynamicParam>

  @JsName("TimeLimitPerStep")
  public open var timeLimitPerStep: Number

  @JsName("StepToDebugDraw")
  public open var stepToDebugDraw: Number

  @JsName("HighlightMode")
  public open var highlightMode: String

  @JsName("bDrawLabels")
  public open var drawLabels: Boolean

  @JsName("bDrawFailedItems")
  public open var drawFailedItems: Boolean

  @JsName("bReRunQueryOnlyOnFinishedMove")
  public open var reRunQueryOnlyOnFinishedMove: Boolean

  @JsName("bShouldBeVisibleInGame")
  public open var shouldBeVisibleInGame: Boolean

  @JsName("bTickDuringGame")
  public open var tickDuringGame: Boolean

  @JsName("QueryingMode")
  public open var queryingMode: String

  @JsName("NavAgentProperties")
  public open var navAgentProperties: NavAgentProperties

  @JsName("EdRenderComp")
  public open var edRenderComp: EqsRenderingComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EqsTestingPawn

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EqsTestingPawn

    @JsName("C")
    public fun copy(other: UObject): EqsTestingPawn

    @JsName("C")
    public fun copy(other: Any): EqsTestingPawn
  }
}

public open external class GenericTeamAgentInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GenericTeamAgentInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GenericTeamAgentInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GenericTeamAgentInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GenericTeamAgentInterface

    @JsName("C")
    public fun copy(other: UObject): GenericTeamAgentInterface

    @JsName("C")
    public fun copy(other: Any): GenericTeamAgentInterface
  }
}

@JsName("GridPathAIController")
public open external class GridPathAiController(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : AiController {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GridPathAiController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GridPathAiController

    @JsName("C")
    public fun copy(other: UObject): GridPathAiController

    @JsName("C")
    public fun copy(other: Any): GridPathAiController
  }
}

public open external class GridPathFollowingComponent(
  outer: UObject,
) : PathFollowingComponent {
  @JsName("GridManager")
  public open var gridManager: NavLocalGridManager

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GridPathFollowingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GridPathFollowingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GridPathFollowingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GridPathFollowingComponent

    @JsName("C")
    public fun copy(other: UObject): GridPathFollowingComponent

    @JsName("C")
    public fun copy(other: Any): GridPathFollowingComponent
  }
}

@JsName("NavFilter_AIControllerDefault")
public open external class NavFilterAiControllerDefault(
  outer: UObject,
) : NavigationQueryFilter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavFilterAiControllerDefault

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavFilterAiControllerDefault

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavFilterAiControllerDefault

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavFilterAiControllerDefault

    @JsName("C")
    public fun copy(other: UObject): NavFilterAiControllerDefault

    @JsName("C")
    public fun copy(other: Any): NavFilterAiControllerDefault
  }
}

@JsName("ENavLinkDirection")
public external object NavLinkDirection {
  public var BothWays: String

  public var LeftToRight: String

  public var RightToLeft: String

  @JsName("ENavLinkDirection_MAX")
  public var Max: String
}

public open external class NavigationLinkBase {
  @JsName("LeftProjectHeight")
  public open var leftProjectHeight: Number

  @JsName("MaxFallDownLength")
  public open var maxFallDownLength: Number

  @JsName("SnapRadius")
  public open var snapRadius: Number

  @JsName("SnapHeight")
  public open var snapHeight: Number

  @JsName("SupportedAgents")
  public open var supportedAgents: NavAgentSelector

  @JsName("bSupportsAgent0")
  public open var supportsAgent0: Boolean

  @JsName("bSupportsAgent1")
  public open var supportsAgent1: Boolean

  @JsName("bSupportsAgent2")
  public open var supportsAgent2: Boolean

  @JsName("bSupportsAgent3")
  public open var supportsAgent3: Boolean

  @JsName("bSupportsAgent4")
  public open var supportsAgent4: Boolean

  @JsName("bSupportsAgent5")
  public open var supportsAgent5: Boolean

  @JsName("bSupportsAgent6")
  public open var supportsAgent6: Boolean

  @JsName("bSupportsAgent7")
  public open var supportsAgent7: Boolean

  @JsName("bSupportsAgent8")
  public open var supportsAgent8: Boolean

  @JsName("bSupportsAgent9")
  public open var supportsAgent9: Boolean

  @JsName("bSupportsAgent10")
  public open var supportsAgent10: Boolean

  @JsName("bSupportsAgent11")
  public open var supportsAgent11: Boolean

  @JsName("bSupportsAgent12")
  public open var supportsAgent12: Boolean

  @JsName("bSupportsAgent13")
  public open var supportsAgent13: Boolean

  @JsName("bSupportsAgent14")
  public open var supportsAgent14: Boolean

  @JsName("bSupportsAgent15")
  public open var supportsAgent15: Boolean

  @JsName("Description")
  public open var description: String

  @JsName("Direction")
  public open var direction: String

  @JsName("bUseSnapHeight")
  public open var useSnapHeight: Boolean

  @JsName("bSnapToCheapestArea")
  public open var snapToCheapestArea: Boolean

  @JsName("bCustomFlag0")
  public open var customFlag0: Boolean

  @JsName("bCustomFlag1")
  public open var customFlag1: Boolean

  @JsName("bCustomFlag2")
  public open var customFlag2: Boolean

  @JsName("bCustomFlag3")
  public open var customFlag3: Boolean

  @JsName("bCustomFlag4")
  public open var customFlag4: Boolean

  @JsName("bCustomFlag5")
  public open var customFlag5: Boolean

  @JsName("bCustomFlag6")
  public open var customFlag6: Boolean

  @JsName("bCustomFlag7")
  public open var customFlag7: Boolean

  @JsName("AreaClass")
  public open var areaClass: UnrealEngineClass

  public open fun clone(): NavigationLinkBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavigationLinkBase

    @JsName("C")
    public fun copy(other: Any): NavigationLinkBase
  }
}

public open external class NavigationLink : NavigationLinkBase {
  @JsName("Left")
  public open var left: Vector

  @JsName("Right")
  public open var right: Vector

  public override fun clone(): NavigationLink

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavigationLink

    @JsName("C")
    public fun copy(other: Any): NavigationLink
  }
}

public open external class NavigationSegmentLink : NavigationLinkBase {
  @JsName("LeftStart")
  public open var leftStart: Vector

  @JsName("LeftEnd")
  public open var leftEnd: Vector

  @JsName("RightStart")
  public open var rightStart: Vector

  @JsName("RightEnd")
  public open var rightEnd: Vector

  public override fun clone(): NavigationSegmentLink

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavigationSegmentLink

    @JsName("C")
    public fun copy(other: Any): NavigationSegmentLink
  }
}

public open external class NavRelevantComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("bAttachToOwnersRoot")
  public open var attachToOwnersRoot: Boolean

  @JsName("CachedNavParent")
  public open var cachedNavParent: UObject

  @JsName("SetNavigationRelevancy")
  public open fun setNavigationRelevancy(relevant: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavRelevantComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavRelevantComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavRelevantComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavRelevantComponent

    @JsName("C")
    public fun copy(other: UObject): NavRelevantComponent

    @JsName("C")
    public fun copy(other: Any): NavRelevantComponent
  }
}

public open external class NavLinkCustomComponent(
  outer: UObject,
) : NavRelevantComponent {
  @JsName("NavLinkUserId")
  public open var navLinkUserId: Any

  @JsName("EnabledAreaClass")
  public open var enabledAreaClass: UnrealEngineClass

  @JsName("DisabledAreaClass")
  public open var disabledAreaClass: UnrealEngineClass

  @JsName("SupportedAgents")
  public open var supportedAgents: NavAgentSelector

  @JsName("LinkRelativeStart")
  public open var linkRelativeStart: Vector

  @JsName("LinkRelativeEnd")
  public open var linkRelativeEnd: Vector

  @JsName("LinkDirection")
  public open var linkDirection: String

  @JsName("bLinkEnabled")
  public open var linkEnabled: Boolean

  @JsName("bNotifyWhenEnabled")
  public open var notifyWhenEnabled: Boolean

  @JsName("bNotifyWhenDisabled")
  public open var notifyWhenDisabled: Boolean

  @JsName("bCreateBoxObstacle")
  public open var createBoxObstacle: Boolean

  @JsName("ObstacleOffset")
  public open var obstacleOffset: Vector

  @JsName("ObstacleExtent")
  public open var obstacleExtent: Vector

  @JsName("ObstacleAreaClass")
  public open var obstacleAreaClass: UnrealEngineClass

  @JsName("BroadcastRadius")
  public open var broadcastRadius: Number

  @JsName("BroadcastInterval")
  public open var broadcastInterval: Number

  @JsName("BroadcastChannel")
  public open var broadcastChannel: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavLinkCustomComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavLinkCustomComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLinkCustomComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLinkCustomComponent

    @JsName("C")
    public fun copy(other: UObject): NavLinkCustomComponent

    @JsName("C")
    public fun copy(other: Any): NavLinkCustomComponent
  }
}

public open external class NavLinkRenderingComponent(
  outer: UObject,
) : PrimitiveComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavLinkRenderingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavLinkRenderingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLinkRenderingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLinkRenderingComponent

    @JsName("C")
    public fun copy(other: UObject): NavLinkRenderingComponent

    @JsName("C")
    public fun copy(other: Any): NavLinkRenderingComponent
  }
}

public open external class NavLinkProxy(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("PointLinks")
  public open var pointLinks: Array<NavigationLink>

  @JsName("SegmentLinks")
  public open var segmentLinks: Array<NavigationSegmentLink>

  @JsName("SmartLinkComp")
  public open var smartLinkComp: NavLinkCustomComponent

  @JsName("bSmartLinkIsRelevant")
  public open var smartLinkIsRelevant: Boolean

  @JsName("EdRenderComp")
  public open var edRenderComp: NavLinkRenderingComponent

  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  @JsName("OnSmartLinkReached")
  public open var onSmartLinkReached: UnrealEngineMulticastDelegate<(MovingActor: Actor,
      DestinationPoint: Vector) -> Unit>

  @JsName("SetSmartLinkEnabled")
  public open fun setSmartLinkEnabled(enabled: Boolean): Unit

  @JsName("ResumePathFollowing")
  public open fun resumePathFollowing(agent: Actor): Unit

  @JsName("ReceiveSmartLinkReached")
  public open fun receiveSmartLinkReached(agent: Actor, destination: Vector): Unit

  @JsName("IsSmartLinkEnabled")
  public open fun isSmartLinkEnabled(): Boolean

  @JsName("HasMovingAgents")
  public open fun hasMovingAgents(): Boolean

  @JsName("CopyEndPointsFromSimpleLinkToSmartLink")
  public open fun copyEndPointsFromSimpleLinkToSmartLink(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLinkProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLinkProxy

    @JsName("C")
    public fun copy(other: UObject): NavLinkProxy

    @JsName("C")
    public fun copy(other: Any): NavLinkProxy
  }
}

public open external class PathFollowingManager(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PathFollowingManager

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PathFollowingManager

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PathFollowingManager

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PathFollowingManager

    @JsName("C")
    public fun copy(other: UObject): PathFollowingManager

    @JsName("C")
    public fun copy(other: Any): PathFollowingManager
  }
}

@JsName("PawnAction_BlueprintBase")
public open external class PawnActionBlueprintBase(
  outer: UObject,
) : PawnAction {
  @JsName("ActionTick")
  public open fun actionTick(controlledPawn: Pawn, deltaSeconds: Number): Unit

  @JsName("ActionStart")
  public open fun actionStart(controlledPawn: Pawn): Unit

  @JsName("ActionResume")
  public open fun actionResume(controlledPawn: Pawn): Unit

  @JsName("ActionPause")
  public open fun actionPause(controlledPawn: Pawn): Unit

  @JsName("ActionFinished")
  public open fun actionFinished(controlledPawn: Pawn, withResult: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnActionBlueprintBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnActionBlueprintBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnActionBlueprintBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnActionBlueprintBase

    @JsName("C")
    public fun copy(other: UObject): PawnActionBlueprintBase

    @JsName("C")
    public fun copy(other: Any): PawnActionBlueprintBase
  }
}

@JsName("PawnAction_Move")
public open external class PawnActionMove(
  outer: UObject,
) : PawnAction {
  @JsName("GoalActor")
  public open var goalActor: Actor

  @JsName("GoalLocation")
  public open var goalLocation: Vector

  @JsName("AcceptableRadius")
  public open var acceptableRadius: Number

  @JsName("FilterClass")
  public open var filterClass: UnrealEngineClass

  @JsName("bAllowStrafe")
  public open var allowStrafe: Boolean

  @JsName("bFinishOnOverlap")
  public open var finishOnOverlap: Boolean

  @JsName("bUsePathfinding")
  public open var usePathfinding: Boolean

  @JsName("bAllowPartialPath")
  public open var allowPartialPath: Boolean

  @JsName("bProjectGoalToNavigation")
  public open var projectGoalToNavigation: Boolean

  @JsName("bUpdatePathToGoal")
  public open var updatePathToGoal: Boolean

  @JsName("bAbortChildActionOnPathChange")
  public open var abortChildActionOnPathChange: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnActionMove

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnActionMove

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnActionMove

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnActionMove

    @JsName("C")
    public fun copy(other: UObject): PawnActionMove

    @JsName("C")
    public fun copy(other: Any): PawnActionMove
  }
}

@JsName("EPawnActionFailHandling")
public external object PawnActionFailHandling {
  public var RequireSuccess: String

  public var IgnoreFailure: String

  @JsName("EPawnActionFailHandling_MAX")
  public var Max: String
}

@JsName("PawnAction_Repeat")
public open external class PawnActionRepeat(
  outer: UObject,
) : PawnAction {
  @JsName("ActionToRepeat")
  public open var actionToRepeat: PawnAction

  @JsName("RecentActionCopy")
  public open var recentActionCopy: PawnAction

  @JsName("ChildFailureHandlingMode")
  public open var childFailureHandlingMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnActionRepeat

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnActionRepeat

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnActionRepeat

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnActionRepeat

    @JsName("C")
    public fun copy(other: UObject): PawnActionRepeat

    @JsName("C")
    public fun copy(other: Any): PawnActionRepeat
  }
}

@JsName("PawnAction_Sequence")
public open external class PawnActionSequence(
  outer: UObject,
) : PawnAction {
  @JsName("ActionSequence")
  public open var actionSequence: Array<PawnAction>

  @JsName("ChildFailureHandlingMode")
  public open var childFailureHandlingMode: String

  @JsName("RecentActionCopy")
  public open var recentActionCopy: PawnAction

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnActionSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnActionSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnActionSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnActionSequence

    @JsName("C")
    public fun copy(other: UObject): PawnActionSequence

    @JsName("C")
    public fun copy(other: Any): PawnActionSequence
  }
}

@JsName("PawnAction_Wait")
public open external class PawnActionWait(
  outer: UObject,
) : PawnAction {
  @JsName("TimeToWait")
  public open var timeToWait: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnActionWait

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnActionWait

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnActionWait

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnActionWait

    @JsName("C")
    public fun copy(other: UObject): PawnActionWait

    @JsName("C")
    public fun copy(other: Any): PawnActionWait
  }
}

public open external class PawnSensingComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("HearingThreshold")
  public open var hearingThreshold: Number

  @JsName("LOSHearingThreshold")
  public open var losHearingThreshold: Number

  @JsName("SightRadius")
  public open var sightRadius: Number

  @JsName("SensingInterval")
  public open var sensingInterval: Number

  @JsName("HearingMaxSoundAge")
  public open var hearingMaxSoundAge: Number

  @JsName("bEnableSensingUpdates")
  public open var enableSensingUpdates: Boolean

  @JsName("bOnlySensePlayers")
  public open var onlySensePlayers: Boolean

  @JsName("bSeePawns")
  public open var seePawns: Boolean

  @JsName("bHearNoises")
  public open var hearNoises: Boolean

  @JsName("OnSeePawn")
  public open var onSeePawn: UnrealEngineMulticastDelegate<(Pawn: Pawn) -> Unit>

  @JsName("OnHearNoise")
  public open var onHearNoise: UnrealEngineMulticastDelegate<(
    Instigator: Pawn,
    Location: Vector,
    Volume: Number,
  ) -> Unit>

  @JsName("PeripheralVisionAngle")
  public open var peripheralVisionAngle: Number

  @JsName("PeripheralVisionCosine")
  public open var peripheralVisionCosine: Number

  @JsName("SetSensingUpdatesEnabled")
  public open fun setSensingUpdatesEnabled(enabled: Boolean): Unit

  @JsName("SetSensingInterval")
  public open fun setSensingInterval(newSensingInterval: Number): Unit

  @JsName("SetPeripheralVisionAngle")
  public open fun setPeripheralVisionAngle(newPeripheralVisionAngle: Number): Unit

  @JsName("GetPeripheralVisionCosine")
  public open fun getPeripheralVisionCosine(): Number

  @JsName("GetPeripheralVisionAngle")
  public open fun getPeripheralVisionAngle(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PawnSensingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PawnSensingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PawnSensingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PawnSensingComponent

    @JsName("C")
    public fun copy(other: UObject): PawnSensingComponent

    @JsName("C")
    public fun copy(other: Any): PawnSensingComponent
  }
}

public open external class VisualLoggerExtension(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VisualLoggerExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VisualLoggerExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VisualLoggerExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VisualLoggerExtension

    @JsName("C")
    public fun copy(other: UObject): VisualLoggerExtension

    @JsName("C")
    public fun copy(other: Any): VisualLoggerExtension
  }
}

public open external class AbstractNavData(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : NavigationData {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AbstractNavData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AbstractNavData

    @JsName("C")
    public fun copy(other: UObject): AbstractNavData

    @JsName("C")
    public fun copy(other: Any): AbstractNavData
  }
}

public open external class NavAreaMeta(
  outer: UObject,
) : NavArea {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavAreaMeta

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavAreaMeta

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavAreaMeta

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavAreaMeta

    @JsName("C")
    public fun copy(other: UObject): NavAreaMeta

    @JsName("C")
    public fun copy(other: Any): NavAreaMeta
  }
}

@JsName("NavAreaMeta_SwitchByAgent")
public open external class NavAreaMetaSwitchByAgent(
  outer: UObject,
) : NavAreaMeta {
  @JsName("Agent0Area")
  public open var agent0Area: UnrealEngineClass

  @JsName("Agent1Area")
  public open var agent1Area: UnrealEngineClass

  @JsName("Agent2Area")
  public open var agent2Area: UnrealEngineClass

  @JsName("Agent3Area")
  public open var agent3Area: UnrealEngineClass

  @JsName("Agent4Area")
  public open var agent4Area: UnrealEngineClass

  @JsName("Agent5Area")
  public open var agent5Area: UnrealEngineClass

  @JsName("Agent6Area")
  public open var agent6Area: UnrealEngineClass

  @JsName("Agent7Area")
  public open var agent7Area: UnrealEngineClass

  @JsName("Agent8Area")
  public open var agent8Area: UnrealEngineClass

  @JsName("Agent9Area")
  public open var agent9Area: UnrealEngineClass

  @JsName("Agent10Area")
  public open var agent10Area: UnrealEngineClass

  @JsName("Agent11Area")
  public open var agent11Area: UnrealEngineClass

  @JsName("Agent12Area")
  public open var agent12Area: UnrealEngineClass

  @JsName("Agent13Area")
  public open var agent13Area: UnrealEngineClass

  @JsName("Agent14Area")
  public open var agent14Area: UnrealEngineClass

  @JsName("Agent15Area")
  public open var agent15Area: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavAreaMetaSwitchByAgent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavAreaMetaSwitchByAgent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavAreaMetaSwitchByAgent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavAreaMetaSwitchByAgent

    @JsName("C")
    public fun copy(other: UObject): NavAreaMetaSwitchByAgent

    @JsName("C")
    public fun copy(other: Any): NavAreaMetaSwitchByAgent
  }
}

@JsName("NavArea_Default")
public open external class NavAreaDefault(
  outer: UObject,
) : NavArea {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavAreaDefault

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavAreaDefault

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavAreaDefault

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavAreaDefault

    @JsName("C")
    public fun copy(other: UObject): NavAreaDefault

    @JsName("C")
    public fun copy(other: Any): NavAreaDefault
  }
}

@JsName("NavArea_LowHeight")
public open external class NavAreaLowHeight(
  outer: UObject,
) : NavArea {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavAreaLowHeight

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavAreaLowHeight

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavAreaLowHeight

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavAreaLowHeight

    @JsName("C")
    public fun copy(other: UObject): NavAreaLowHeight

    @JsName("C")
    public fun copy(other: Any): NavAreaLowHeight
  }
}

@JsName("NavArea_Null")
public open external class NavAreaNull(
  outer: UObject,
) : NavArea {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavAreaNull

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavAreaNull

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavAreaNull

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavAreaNull

    @JsName("C")
    public fun copy(other: UObject): NavAreaNull

    @JsName("C")
    public fun copy(other: Any): NavAreaNull
  }
}

@JsName("NavArea_Obstacle")
public open external class NavAreaObstacle(
  outer: UObject,
) : NavArea {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavAreaObstacle

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavAreaObstacle

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavAreaObstacle

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavAreaObstacle

    @JsName("C")
    public fun copy(other: UObject): NavAreaObstacle

    @JsName("C")
    public fun copy(other: Any): NavAreaObstacle
  }
}

public open external class NavCollisionCylinder {
  @JsName("Offset")
  public open var offset: Vector

  @JsName("Radius")
  public open var radius: Number

  @JsName("Height")
  public open var height: Number

  public open fun clone(): NavCollisionCylinder

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavCollisionCylinder

    @JsName("C")
    public fun copy(other: Any): NavCollisionCylinder
  }
}

public open external class NavCollisionBox {
  @JsName("Offset")
  public open var offset: Vector

  @JsName("Extent")
  public open var extent: Vector

  public open fun clone(): NavCollisionBox

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavCollisionBox

    @JsName("C")
    public fun copy(other: Any): NavCollisionBox
  }
}

public open external class NavCollision(
  outer: UObject,
) : NavCollisionBase {
  @JsName("CylinderCollision")
  public open var cylinderCollision: Array<NavCollisionCylinder>

  @JsName("BoxCollision")
  public open var boxCollision: Array<NavCollisionBox>

  @JsName("AreaClass")
  public open var areaClass: UnrealEngineClass

  @JsName("bGatherConvexGeometry")
  public open var gatherConvexGeometry: Boolean

  @JsName("bCreateOnClient")
  public open var createOnClient: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavCollision

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavCollision

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavCollision

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavCollision

    @JsName("C")
    public fun copy(other: UObject): NavCollision

    @JsName("C")
    public fun copy(other: Any): NavCollision
  }
}

public open external class NavigationGraph(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : NavigationData {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationGraph

    @JsName("C")
    public fun copy(other: UObject): NavigationGraph

    @JsName("C")
    public fun copy(other: Any): NavigationGraph
  }
}

public open external class NavigationGraphNode(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationGraphNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationGraphNode

    @JsName("C")
    public fun copy(other: UObject): NavigationGraphNode

    @JsName("C")
    public fun copy(other: Any): NavigationGraphNode
  }
}

public open external class NavGraphNode {
  @JsName("Owner")
  public open var owner: UObject

  public open fun clone(): NavGraphNode

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavGraphNode

    @JsName("C")
    public fun copy(other: Any): NavGraphNode
  }
}

public open external class NavigationGraphNodeComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("UNode")
  public open var uNode: NavGraphNode

  @JsName("NextNodeComponent")
  public open var nextNodeComponent: NavigationGraphNodeComponent

  @JsName("PrevNodeComponent")
  public open var prevNodeComponent: NavigationGraphNodeComponent

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationGraphNodeComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationGraphNodeComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationGraphNodeComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationGraphNodeComponent

    @JsName("C")
    public fun copy(other: UObject): NavigationGraphNodeComponent

    @JsName("C")
    public fun copy(other: Any): NavigationGraphNodeComponent
  }
}

public open external class NavigationInvokerComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("TileGenerationRadius")
  public open var tileGenerationRadius: Number

  @JsName("TileRemovalRadius")
  public open var tileRemovalRadius: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationInvokerComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationInvokerComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationInvokerComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationInvokerComponent

    @JsName("C")
    public fun copy(other: UObject): NavigationInvokerComponent

    @JsName("C")
    public fun copy(other: Any): NavigationInvokerComponent
  }
}

public open external class NavigationPathGenerator(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationPathGenerator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationPathGenerator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationPathGenerator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationPathGenerator

    @JsName("C")
    public fun copy(other: UObject): NavigationPathGenerator

    @JsName("C")
    public fun copy(other: Any): NavigationPathGenerator
  }
}

@JsName("ENavDataGatheringModeConfig")
public external object NavDataGatheringModeConfig {
  public var Invalid: String

  public var Instant: String

  public var Lazy: String

  @JsName("ENavDataGatheringModeConfig_MAX")
  public var Max: String
}

public external object FNavigationSystemRunMode {
  @JsName("InvalidMode")
  public var invalidMode: String

  @JsName("GameMode")
  public var gameMode: String

  @JsName("EditorMode")
  public var editorMode: String

  @JsName("SimulationMode")
  public var simulationMode: String

  @JsName("PIEMode")
  public var pieMode: String

  @JsName("InferFromWorldMode")
  public var inferFromWorldMode: String

  @JsName("FNavigationSystemRunMode_MAX")
  public var fNavigationSystemRunModeMax: String
}

public open external class NavMeshBoundsVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("SupportedAgents")
  public open var supportedAgents: NavAgentSelector

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavMeshBoundsVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavMeshBoundsVolume

    @JsName("C")
    public fun copy(other: UObject): NavMeshBoundsVolume

    @JsName("C")
    public fun copy(other: Any): NavMeshBoundsVolume
  }
}

@JsName("ENavigationQueryResult")
public external object NavigationQueryResult {
  public var Invalid: String

  public var Error: String

  public var Fail: String

  public var Success: String

  @JsName("ENavigationQueryResult_MAX")
  public var Max: String
}

@JsName("T$631")
public external interface Object631 {
  @JsName("HitLocation")
  public var hitLocation: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$632")
public external interface Object632 {
  @JsName("ProjectedLocation")
  public var projectedLocation: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$633")
public external interface Object633 {
  @JsName("RandomLocation")
  public var randomLocation: Vector

  @JsName("$")
  public var value: Boolean
}

@JsName("T$634")
public external interface Object634 {
  @JsName("PathLength")
  public var pathLength: Number

  @JsName("$")
  public var value: String
}

@JsName("T$635")
public external interface Object635 {
  @JsName("PathCost")
  public var pathCost: Number

  @JsName("$")
  public var value: String
}

public open external class NavigationSystemV1(
  outer: UObject,
) : NavigationSystemBase {
  @JsName("MainNavData")
  public open var mainNavData: NavigationData

  @JsName("AbstractNavData")
  public open var abstractNavData: NavigationData

  @JsName("DefaultAgentName")
  public open var defaultAgentName: String

  @JsName("CrowdManagerClass")
  public open var crowdManagerClass: Class

  @JsName("bAutoCreateNavigationData")
  public open var autoCreateNavigationData: Boolean

  @JsName("bSpawnNavDataInNavBoundsLevel")
  public open var spawnNavDataInNavBoundsLevel: Boolean

  @JsName("bAllowClientSideNavigation")
  public open var allowClientSideNavigation: Boolean

  @JsName("bShouldDiscardSubLevelNavData")
  public open var shouldDiscardSubLevelNavData: Boolean

  @JsName("bTickWhilePaused")
  public open var tickWhilePaused: Boolean

  @JsName("bSupportRebuilding")
  public open var supportRebuilding: Boolean

  @JsName("bInitialBuildingLocked")
  public open var initialBuildingLocked: Boolean

  @JsName("bSkipAgentHeightCheckWhenPickingNavData")
  public open var skipAgentHeightCheckWhenPickingNavData: Boolean

  @JsName("bGenerateNavigationOnlyAroundNavigationInvokers")
  public open var generateNavigationOnlyAroundNavigationInvokers: Boolean

  @JsName("ActiveTilesUpdateInterval")
  public open var activeTilesUpdateInterval: Number

  @JsName("DataGatheringMode")
  public open var dataGatheringMode: String

  @JsName("DirtyAreaWarningSizeThreshold")
  public open var dirtyAreaWarningSizeThreshold: Number

  @JsName("GatheringNavModifiersWarningLimitTime")
  public open var gatheringNavModifiersWarningLimitTime: Number

  @JsName("SupportedAgents")
  public open var supportedAgents: Array<NavDataConfig>

  @JsName("SupportedAgentsMask")
  public open var supportedAgentsMask: NavAgentSelector

  @JsName("BuildBounds")
  public open var buildBounds: Box

  @JsName("NavDataSet")
  public open var navDataSet: Array<NavigationData>

  @JsName("NavDataRegistrationQueue")
  public open var navDataRegistrationQueue: Array<NavigationData>

  @JsName("OnNavDataRegisteredEvent")
  public open var onNavDataRegisteredEvent:
      UnrealEngineMulticastDelegate<(NavData: NavigationData) -> Unit>

  @JsName("OnNavigationGenerationFinishedDelegate")
  public open var onNavigationGenerationFinishedDelegate:
      UnrealEngineMulticastDelegate<(NavData: NavigationData) -> Unit>

  @JsName("OperationMode")
  public open var operationMode: String

  @JsName("DirtyAreasUpdateFreq")
  public open var dirtyAreasUpdateFreq: Number

  @JsName("UnregisterNavigationInvoker")
  public open fun unregisterNavigationInvoker(invoker: Actor): Unit

  @JsName("SetMaxSimultaneousTileGenerationJobsCount")
  public open fun setMaxSimultaneousTileGenerationJobsCount(maxNumberOfJobs: Number): Unit

  @JsName("SetGeometryGatheringMode")
  public open fun setGeometryGatheringMode(newMode: String): Unit

  @JsName("ResetMaxSimultaneousTileGenerationJobsCount")
  public open fun resetMaxSimultaneousTileGenerationJobsCount(): Unit

  @JsName("RegisterNavigationInvoker")
  public open fun registerNavigationInvoker(
    invoker: Actor,
    tileGenerationRadius: Number,
    tileRemovalRadius: Number,
  ): Unit

  @JsName("OnNavigationBoundsUpdated")
  public open fun onNavigationBoundsUpdated(navVolume: NavMeshBoundsVolume): Unit

  @JsName("K2_ReplaceAreaInOctreeData")
  public open fun k2ReplaceAreaInOctreeData(
    uObject: UObject,
    oldArea: UnrealEngineClass,
    newArea: UnrealEngineClass,
  ): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationSystemV1

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationSystemV1

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationSystemV1

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationSystemV1

    @JsName("SimpleMoveToLocation")
    public fun simpleMoveToLocation(controller: Controller, goal: Vector): Unit

    @JsName("SimpleMoveToActor")
    public fun simpleMoveToActor(controller: Controller, goal: Actor): Unit

    @JsName("ProjectPointToNavigation")
    public fun projectPointToNavigation(
      worldContextObject: UObject,
      point: Vector,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
      queryExtent: Vector,
    ): Vector

    @JsName("NavigationRaycast")
    public fun navigationRaycast(
      worldContextObject: UObject,
      rayStart: Vector,
      rayEnd: Vector,
      hitLocation: Vector,
      filterClass: UnrealEngineClass,
      querier: Controller,
    ): Object631

    @JsName("K2_ProjectPointToNavigation")
    public fun k2ProjectPointToNavigation(
      worldContextObject: UObject,
      point: Vector,
      projectedLocation: Vector,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
      queryExtent: Vector,
    ): Object632

    @JsName("K2_GetRandomReachablePointInRadius")
    public fun k2GetRandomReachablePointInRadius(
      worldContextObject: UObject,
      origin: Vector,
      randomLocation: Vector,
      radius: Number,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
    ): Object633

    @JsName("K2_GetRandomPointInNavigableRadius")
    public fun k2GetRandomPointInNavigableRadius(
      worldContextObject: UObject,
      origin: Vector,
      randomLocation: Vector,
      radius: Number,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
    ): Object633

    @JsName("K2_GetRandomLocationInNavigableRadius")
    public fun k2GetRandomLocationInNavigableRadius(
      worldContextObject: UObject,
      origin: Vector,
      randomLocation: Vector,
      radius: Number,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
    ): Object633

    @JsName("IsNavigationBeingBuiltOrLocked")
    public fun isNavigationBeingBuiltOrLocked(worldContextObject: UObject): Boolean

    @JsName("IsNavigationBeingBuilt")
    public fun isNavigationBeingBuilt(worldContextObject: UObject): Boolean

    @JsName("GetRandomReachablePointInRadius")
    public fun getRandomReachablePointInRadius(
      worldContextObject: UObject,
      origin: Vector,
      radius: Number,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
    ): Vector

    @JsName("GetRandomPointInNavigableRadius")
    public fun getRandomPointInNavigableRadius(
      worldContextObject: UObject,
      origin: Vector,
      radius: Number,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
    ): Vector

    @JsName("GetPathLength")
    public fun getPathLength(
      worldContextObject: UObject,
      pathStart: Vector,
      pathEnd: Vector,
      pathLength: Number,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
    ): Object634

    @JsName("GetPathCost")
    public fun getPathCost(
      worldContextObject: UObject,
      pathStart: Vector,
      pathEnd: Vector,
      pathCost: Number,
      navData: NavigationData,
      filterClass: UnrealEngineClass,
    ): Object635

    @JsName("GetNavigationSystem")
    public fun getNavigationSystem(worldContextObject: UObject): NavigationSystemV1

    @JsName("FindPathToLocationSynchronously")
    public fun findPathToLocationSynchronously(
      worldContextObject: UObject,
      pathStart: Vector,
      pathEnd: Vector,
      pathfindingContext: Actor,
      filterClass: UnrealEngineClass,
    ): NavigationPath

    @JsName("FindPathToActorSynchronously")
    public fun findPathToActorSynchronously(
      worldContextObject: UObject,
      pathStart: Vector,
      goalActor: Actor,
      tetherDistance: Number,
      pathfindingContext: Actor,
      filterClass: UnrealEngineClass,
    ): NavigationPath

    @JsName("C")
    public fun copy(other: UObject): NavigationSystemV1

    @JsName("C")
    public fun copy(other: Any): NavigationSystemV1
  }
}

public open external class NavigationSystemModuleConfig(
  outer: UObject,
) : NavigationSystemConfig {
  @JsName("bStrictlyStatic")
  public open var strictlyStatic: Boolean

  @JsName("bCreateOnClient")
  public open var createOnClient: Boolean

  @JsName("bAutoSpawnMissingNavData")
  public open var autoSpawnMissingNavData: Boolean

  @JsName("bSpawnNavDataInNavBoundsLevel")
  public open var spawnNavDataInNavBoundsLevel: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavigationSystemModuleConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavigationSystemModuleConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationSystemModuleConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationSystemModuleConfig

    @JsName("C")
    public fun copy(other: UObject): NavigationSystemModuleConfig

    @JsName("C")
    public fun copy(other: Any): NavigationSystemModuleConfig
  }
}

public open external class NavTestRenderingComponent(
  outer: UObject,
) : DebugDrawComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavTestRenderingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavTestRenderingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavTestRenderingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavTestRenderingComponent

    @JsName("C")
    public fun copy(other: UObject): NavTestRenderingComponent

    @JsName("C")
    public fun copy(other: Any): NavTestRenderingComponent
  }
}

@JsName("ENavCostDisplay")
public external object NavCostDisplay {
  public var TotalCost: String

  public var HeuristicOnly: String

  public var RealCostOnly: String

  @JsName("ENavCostDisplay_MAX")
  public var Max: String
}

public open external class NavigationTestingActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("CapsuleComponent")
  public open var capsuleComponent: CapsuleComponent

  @JsName("EdRenderComp")
  public open var edRenderComp: NavTestRenderingComponent

  @JsName("InvokerComponent")
  public open var invokerComponent: NavigationInvokerComponent

  @JsName("bActAsNavigationInvoker")
  public open var actAsNavigationInvoker: Boolean

  @JsName("NavAgentProps")
  public open var navAgentProps: NavAgentProperties

  @JsName("QueryingExtent")
  public open var queryingExtent: Vector

  @JsName("MyNavData")
  public open var myNavData: NavigationData

  @JsName("ProjectedLocation")
  public open var projectedLocation: Vector

  @JsName("bProjectedLocationValid")
  public open var projectedLocationValid: Boolean

  @JsName("bSearchStart")
  public open var searchStart: Boolean

  @JsName("CostLimitFactor")
  public open var costLimitFactor: Number

  @JsName("MinimumCostLimit")
  public open var minimumCostLimit: Number

  @JsName("bBacktracking")
  public open var backtracking: Boolean

  @JsName("bUseHierarchicalPathfinding")
  public open var useHierarchicalPathfinding: Boolean

  @JsName("bGatherDetailedInfo")
  public open var gatherDetailedInfo: Boolean

  @JsName("bDrawDistanceToWall")
  public open var drawDistanceToWall: Boolean

  @JsName("bShowNodePool")
  public open var showNodePool: Boolean

  @JsName("bShowBestPath")
  public open var showBestPath: Boolean

  @JsName("bShowDiffWithPreviousStep")
  public open var showDiffWithPreviousStep: Boolean

  @JsName("bShouldBeVisibleInGame")
  public open var shouldBeVisibleInGame: Boolean

  @JsName("CostDisplayMode")
  public open var costDisplayMode: String

  @JsName("TextCanvasOffset")
  public open var textCanvasOffset: Vector2d

  @JsName("bPathExist")
  public open var pathExist: Boolean

  @JsName("bPathIsPartial")
  public open var pathIsPartial: Boolean

  @JsName("bPathSearchOutOfNodes")
  public open var pathSearchOutOfNodes: Boolean

  @JsName("PathfindingTime")
  public open var pathfindingTime: Number

  @JsName("PathCost")
  public open var pathCost: Number

  @JsName("PathfindingSteps")
  public open var pathfindingSteps: Number

  @JsName("OtherActor")
  public open var otherActor: NavigationTestingActor

  @JsName("FilterClass")
  public open var filterClass: UnrealEngineClass

  @JsName("ShowStepIndex")
  public open var showStepIndex: Number

  @JsName("OffsetFromCornersDistance")
  public open var offsetFromCornersDistance: Number

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavigationTestingActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavigationTestingActor

    @JsName("C")
    public fun copy(other: UObject): NavigationTestingActor

    @JsName("C")
    public fun copy(other: Any): NavigationTestingActor
  }
}

public open external class NavLinkComponent(
  outer: UObject,
) : PrimitiveComponent {
  @JsName("Links")
  public open var links: Array<NavigationLink>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavLinkComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavLinkComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLinkComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLinkComponent

    @JsName("C")
    public fun copy(other: UObject): NavLinkComponent

    @JsName("C")
    public fun copy(other: Any): NavLinkComponent
  }
}

public open external class NavLinkCustomInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavLinkCustomInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavLinkCustomInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLinkCustomInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLinkCustomInterface

    @JsName("C")
    public fun copy(other: UObject): NavLinkCustomInterface

    @JsName("C")
    public fun copy(other: Any): NavLinkCustomInterface
  }
}

public open external class NavLinkHostInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavLinkHostInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavLinkHostInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLinkHostInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLinkHostInterface

    @JsName("C")
    public fun copy(other: UObject): NavLinkHostInterface

    @JsName("C")
    public fun copy(other: Any): NavLinkHostInterface
  }
}

public open external class NavLinkDefinition(
  outer: UObject,
) : UObject {
  @JsName("Links")
  public open var links: Array<NavigationLink>

  @JsName("SegmentLinks")
  public open var segmentLinks: Array<NavigationSegmentLink>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavLinkDefinition

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavLinkDefinition

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLinkDefinition

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLinkDefinition

    @JsName("C")
    public fun copy(other: UObject): NavLinkDefinition

    @JsName("C")
    public fun copy(other: Any): NavLinkDefinition
  }
}

public open external class NavLinkTrivial(
  outer: UObject,
) : NavLinkDefinition {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavLinkTrivial

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavLinkTrivial

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavLinkTrivial

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavLinkTrivial

    @JsName("C")
    public fun copy(other: UObject): NavLinkTrivial

    @JsName("C")
    public fun copy(other: Any): NavLinkTrivial
  }
}

public open external class NavMeshRenderingComponent(
  outer: UObject,
) : DebugDrawComponent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavMeshRenderingComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavMeshRenderingComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavMeshRenderingComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavMeshRenderingComponent

    @JsName("C")
    public fun copy(other: UObject): NavMeshRenderingComponent

    @JsName("C")
    public fun copy(other: Any): NavMeshRenderingComponent
  }
}

public open external class NavModifierComponent(
  outer: UObject,
) : NavRelevantComponent {
  @JsName("AreaClass")
  public open var areaClass: UnrealEngineClass

  @JsName("FailsafeExtent")
  public open var failsafeExtent: Vector

  @JsName("bIncludeAgentHeight")
  public open var includeAgentHeight: Boolean

  @JsName("SetAreaClass")
  public open fun setAreaClass(newAreaClass: UnrealEngineClass): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavModifierComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavModifierComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavModifierComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavModifierComponent

    @JsName("C")
    public fun copy(other: UObject): NavModifierComponent

    @JsName("C")
    public fun copy(other: Any): NavModifierComponent
  }
}

public open external class NavModifierVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("AreaClass")
  public open var areaClass: UnrealEngineClass

  @JsName("bMaskFillCollisionUnderneathForNavmesh")
  public open var maskFillCollisionUnderneathForNavmesh: Boolean

  @JsName("SetAreaClass")
  public open fun setAreaClass(newAreaClass: UnrealEngineClass): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavModifierVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavModifierVolume

    @JsName("C")
    public fun copy(other: UObject): NavModifierVolume

    @JsName("C")
    public fun copy(other: Any): NavModifierVolume
  }
}

public open external class NavNodeInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NavNodeInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NavNodeInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavNodeInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavNodeInterface

    @JsName("C")
    public fun copy(other: UObject): NavNodeInterface

    @JsName("C")
    public fun copy(other: Any): NavNodeInterface
  }
}

@JsName("ENavSystemOverridePolicy")
public external object NavSystemOverridePolicy {
  public var Override: String

  public var Append: String

  public var Skip: String

  @JsName("ENavSystemOverridePolicy_MAX")
  public var Max: String
}

public open external class NavSystemConfigOverride(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  @JsName("NavigationSystemConfig")
  public open var navigationSystemConfig: NavigationSystemConfig

  @JsName("OverridePolicy")
  public open var overridePolicy: String

  @JsName("bLoadOnClient")
  public open var loadOnClient: Boolean

  @JsName("ApplyChanges")
  public open fun applyChanges(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NavSystemConfigOverride

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NavSystemConfigOverride

    @JsName("C")
    public fun copy(other: UObject): NavSystemConfigOverride

    @JsName("C")
    public fun copy(other: Any): NavSystemConfigOverride
  }
}

@JsName("RecastFilter_UseDefaultArea")
public open external class RecastFilterUseDefaultArea(
  outer: UObject,
) : NavigationQueryFilter {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RecastFilterUseDefaultArea

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RecastFilterUseDefaultArea

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RecastFilterUseDefaultArea

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RecastFilterUseDefaultArea

    @JsName("C")
    public fun copy(other: UObject): RecastFilterUseDefaultArea

    @JsName("C")
    public fun copy(other: Any): RecastFilterUseDefaultArea
  }
}

public open external class RecastNavMeshDataChunk(
  outer: UObject,
) : NavigationDataChunk {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RecastNavMeshDataChunk

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RecastNavMeshDataChunk

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RecastNavMeshDataChunk

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RecastNavMeshDataChunk

    @JsName("C")
    public fun copy(other: UObject): RecastNavMeshDataChunk

    @JsName("C")
    public fun copy(other: Any): RecastNavMeshDataChunk
  }
}

@JsName("ETimezoneSetting")
public external object TimezoneSetting {
  public var InternationalDateLineWest: String

  public var CoordinatedUniversalTimeNeg11: String

  public var Samoa: String

  public var Hawaii: String

  public var Alaska: String

  @JsName("PacificTime_USCAN")
  public var PacificTimeUscan: String

  public var BajaCalifornia: String

  @JsName("MountainTime_USCAN")
  public var MountainTimeUscan: String

  @JsName("Chihuahua_LaPaz_Mazatlan")
  public var ChihuahuaLaPazMazatlan: String

  public var Arizona: String

  public var Saskatchewan: String

  public var CentralAmerica: String

  @JsName("CentralTime_USCAN")
  public var CentralTimeUscan: String

  @JsName("Guadalajara_MexicoCity_Monterrey")
  public var GuadalajaraMexicoCityMonterrey: String

  @JsName("EasternTime_USCAN")
  public var EasternTimeUscan: String

  @JsName("Bogota_Lima_Quito")
  public var BogotaLimaQuito: String

  @JsName("Indiana_US")
  public var IndianaUs: String

  public var Caracas: String

  @JsName("AtlanticTime_Canada")
  public var AtlanticTimeCanada: String

  public var Cuiaba: String

  public var Santiago: String

  @JsName("Georgetown_LaPaz_Manaus_SanJuan")
  public var GeorgetownLaPazManausSanJuan: String

  public var Asuncion: String

  public var Newfoundland: String

  public var Brasilia: String

  public var Greenland: String

  public var Montevideo: String

  @JsName("Cayenne_Fortaleza")
  public var CayenneFortaleza: String

  public var BuenosAires: String

  public var MidAtlantic: String

  public var CoordinatedUniversalTimeNeg02: String

  public var Azores: String

  public var CaboVerdeIs: String

  @JsName("Dublin_Edinburgh_Lisbon_London")
  public var DublinEdinburghLisbonLondon: String

  @JsName("Monrovia_Reykjavik")
  public var MonroviaReykjavik: String

  public var Casablanca: String

  public var UTC: String

  @JsName("Belgrade_Bratislava_Budapest_Ljubljana_Prague")
  public var BelgradeBratislavaBudapestLjubljanaPrague: String

  @JsName("Sarajevo_Skopje_Warsaw_Zagreb")
  public var SarajevoSkopjeWarsawZagreb: String

  @JsName("Brussels_Copenhagen_Madrid_Paris")
  public var BrusselsCopenhagenMadridParis: String

  public var WestCentralAfrica: String

  @JsName("Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna")
  public var AmsterdamBerlinBernRomeStockholmVienna: String

  public var Windhoek: String

  public var Minsk: String

  public var Cairo: String

  @JsName("Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius")
  public var HelsinkiKyivRigaSofiaTallinnVilnius: String

  @JsName("Athens_Bucharest")
  public var AthensBucharest: String

  public var Jerusalem: String

  public var Amman: String

  public var Beirut: String

  @JsName("Harare_Pretoria")
  public var HararePretoria: String

  public var Damascus: String

  public var Istanbul: String

  @JsName("Kuwait_Riyadh")
  public var KuwaitRiyadh: String

  public var Baghdad: String

  public var Nairobi: String

  public var Kaliningrad: String

  public var Tehran: String

  @JsName("Moscow_StPetersburg_Volgograd")
  public var MoscowStPetersburgVolgograd: String

  @JsName("AbuDhabi_Muscat")
  public var AbuDhabiMuscat: String

  public var Baku: String

  public var Yerevan: String

  public var Tbilisi: String

  public var PortLouis: String

  public var Kabul: String

  public var Tashkent: String

  @JsName("Islamabad_Karachi")
  public var IslamabadKarachi: String

  @JsName("Chennai_Kolkata_Mumbai_NewDelhi")
  public var ChennaiKolkataMumbaiNewDelhi: String

  public var SriJayawardenepura: String

  public var Kathmandu: String

  public var Ekaterinburg: String

  public var Astana: String

  public var Dhaka: String

  @JsName("Yangon_Rangoon")
  public var YangonRangoon: String

  public var Novosibirsk: String

  @JsName("Bangkok_Hanoi_Jakarta")
  public var BangkokHanoiJakarta: String

  public var Krasnoyarsk: String

  @JsName("Beijing_Chongqing_HongKong_Urumqi")
  public var BeijingChongqingHongKongUrumqi: String

  @JsName("KualaLumpur_Singapore")
  public var KualaLumpurSingapore: String

  public var Taipei: String

  public var Perth: String

  public var Ulaanbaatar: String

  public var Irkutsk: String

  public var Seoul: String

  @JsName("Osaka_Sapporo_Tokyo")
  public var OsakaSapporoTokyo: String

  public var Darwin: String

  public var Adelaide: String

  public var Yakutsk: String

  @JsName("Canberra_Melbourne_Sydney")
  public var CanberraMelbourneSydney: String

  public var Brisbane: String

  public var Hobart: String

  @JsName("Guam_PortMoresby")
  public var GuamPortMoresby: String

  public var Vladivostok: String

  @JsName("SolomonIs_NewCaledonia")
  public var SolomonIsNewCaledonia: String

  public var Magadan: String

  public var Fiji: String

  @JsName("Auckland_Wellington")
  public var AucklandWellington: String

  public var CoordinatedUniversalTime12: String

  public var Nukualofa: String

  public var LocalTime: String

  @JsName("ETimezoneSetting_MAX")
  public var Max: String
}

public open external class InternationalizationSettingsModel(
  outer: UObject,
) : UObject {
  @JsName("DisplayTimezone")
  public open var displayTimezone: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InternationalizationSettingsModel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InternationalizationSettingsModel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InternationalizationSettingsModel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InternationalizationSettingsModel

    @JsName("C")
    public fun copy(other: UObject): InternationalizationSettingsModel

    @JsName("C")
    public fun copy(other: Any): InternationalizationSettingsModel
  }
}

public open external class SplineMetadataDetailsFactoryBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SplineMetadataDetailsFactoryBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SplineMetadataDetailsFactoryBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SplineMetadataDetailsFactoryBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SplineMetadataDetailsFactoryBase

    @JsName("C")
    public fun copy(other: UObject): SplineMetadataDetailsFactoryBase

    @JsName("C")
    public fun copy(other: Any): SplineMetadataDetailsFactoryBase
  }
}

public open external class ActorFactory(
  outer: UObject,
) : UObject {
  @JsName("DisplayName")
  public open var displayName: String

  @JsName("MenuPriority")
  public open var menuPriority: Number

  @JsName("NewActorClassName")
  public open var newActorClassName: String

  @JsName("NewActorClass")
  public open var newActorClass: UnrealEngineClass

  @JsName("bShowInEditorQuickMenu")
  public open var showInEditorQuickMenu: Boolean

  @JsName("bUseSurfaceOrientation")
  public open var useSurfaceOrientation: Boolean

  @JsName("bUsePlacementExtent")
  public open var usePlacementExtent: Boolean

  @JsName("SpawnPositionOffset")
  public open var spawnPositionOffset: Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactory

    @JsName("C")
    public fun copy(other: UObject): ActorFactory

    @JsName("C")
    public fun copy(other: Any): ActorFactory
  }
}

public open external class ActorFactoryVolume(
  outer: UObject,
) : ActorFactory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryVolume

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryVolume

    @JsName("C")
    public fun copy(other: Any): ActorFactoryVolume
  }
}

public open external class ActorFactoryBoxVolume(
  outer: UObject,
) : ActorFactoryVolume {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryBoxVolume

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryBoxVolume

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryBoxVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryBoxVolume

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryBoxVolume

    @JsName("C")
    public fun copy(other: Any): ActorFactoryBoxVolume
  }
}

public open external class ActorFactoryProceduralFoliage(
  outer: UObject,
) : ActorFactoryBoxVolume {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorFactoryProceduralFoliage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorFactoryProceduralFoliage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorFactoryProceduralFoliage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorFactoryProceduralFoliage

    @JsName("C")
    public fun copy(other: UObject): ActorFactoryProceduralFoliage

    @JsName("C")
    public fun copy(other: Any): ActorFactoryProceduralFoliage
  }
}

@JsName("FoliageType_InstancedStaticMeshFactory")
public open external class FoliageTypeInstancedStaticMeshFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageTypeInstancedStaticMeshFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageTypeInstancedStaticMeshFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageTypeInstancedStaticMeshFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageTypeInstancedStaticMeshFactory

    @JsName("C")
    public fun copy(other: UObject): FoliageTypeInstancedStaticMeshFactory

    @JsName("C")
    public fun copy(other: Any): FoliageTypeInstancedStaticMeshFactory
  }
}

@JsName("FoliageType_ActorFactory")
public open external class FoliageTypeActorFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageTypeActorFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageTypeActorFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageTypeActorFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageTypeActorFactory

    @JsName("C")
    public fun copy(other: UObject): FoliageTypeActorFactory

    @JsName("C")
    public fun copy(other: Any): FoliageTypeActorFactory
  }
}

public open external class BlueprintThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): BlueprintThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): BlueprintThumbnailRenderer
  }
}

@JsName("FoliageType_ActorThumbnailRenderer")
public open external class FoliageTypeActorThumbnailRenderer(
  outer: UObject,
) : BlueprintThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageTypeActorThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageTypeActorThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageTypeActorThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageTypeActorThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): FoliageTypeActorThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): FoliageTypeActorThumbnailRenderer
  }
}

@JsName("FoliageType_ISMThumbnailRenderer")
public open external class FoliageTypeIsmThumbnailRenderer(
  outer: UObject,
) : DefaultSizedThumbnailRenderer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageTypeIsmThumbnailRenderer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageTypeIsmThumbnailRenderer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageTypeIsmThumbnailRenderer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageTypeIsmThumbnailRenderer

    @JsName("C")
    public fun copy(other: UObject): FoliageTypeIsmThumbnailRenderer

    @JsName("C")
    public fun copy(other: Any): FoliageTypeIsmThumbnailRenderer
  }
}

public open external class LandscapeGrassTypeFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LandscapeGrassTypeFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LandscapeGrassTypeFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LandscapeGrassTypeFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LandscapeGrassTypeFactory

    @JsName("C")
    public fun copy(other: UObject): LandscapeGrassTypeFactory

    @JsName("C")
    public fun copy(other: Any): LandscapeGrassTypeFactory
  }
}

@JsName("EFoliageScaling")
public external object FoliageScaling {
  public var Uniform: String

  public var Free: String

  @JsName("LockXY")
  public var LockXy: String

  @JsName("LockXZ")
  public var LockXz: String

  @JsName("LockYZ")
  public var LockYz: String

  @JsName("EFoliageScaling_MAX")
  public var Max: String
}

public open external class FloatInterval {
  @JsName("Min")
  public open var min: Number

  @JsName("Max")
  public open var max: Number

  public open fun clone(): FloatInterval

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FloatInterval

    @JsName("C")
    public fun copy(other: Any): FloatInterval
  }
}

public open external class FoliageVertexColorChannelMask {
  @JsName("UseMask")
  public open var useMask: Boolean

  @JsName("MaskThreshold")
  public open var maskThreshold: Number

  @JsName("InvertMask")
  public open var invertMask: Boolean

  public open fun clone(): FoliageVertexColorChannelMask

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FoliageVertexColorChannelMask

    @JsName("C")
    public fun copy(other: Any): FoliageVertexColorChannelMask
  }
}

public external object FoliageVertexColorMask {
  @JsName("FOLIAGEVERTEXCOLORMASK_Disabled")
  public var foliagevertexcolormaskDisabled: String

  @JsName("FOLIAGEVERTEXCOLORMASK_Red")
  public var foliagevertexcolormaskRed: String

  @JsName("FOLIAGEVERTEXCOLORMASK_Green")
  public var foliagevertexcolormaskGreen: String

  @JsName("FOLIAGEVERTEXCOLORMASK_Blue")
  public var foliagevertexcolormaskBlue: String

  @JsName("FOLIAGEVERTEXCOLORMASK_Alpha")
  public var foliagevertexcolormaskAlpha: String

  @JsName("FOLIAGEVERTEXCOLORMASK_MAX")
  public var foliagevertexcolormaskmax: String
}

public open external class Int32Interval {
  @JsName("Min")
  public open var min: Number

  @JsName("Max")
  public open var max: Number

  public open fun clone(): Int32Interval

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): Int32Interval

    @JsName("C")
    public fun copy(other: Any): Int32Interval
  }
}

public open external class FoliageDensityFalloff {
  @JsName("bUseFalloffCurve")
  public open var useFalloffCurve: Boolean

  @JsName("FalloffCurve")
  public open var falloffCurve: RuntimeFloatCurve

  public open fun clone(): FoliageDensityFalloff

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FoliageDensityFalloff

    @JsName("C")
    public fun copy(other: Any): FoliageDensityFalloff
  }
}

public open external class FoliageType(
  outer: UObject,
) : UObject {
  @JsName("UpdateGuid")
  public open var updateGuid: Guid

  @JsName("Density")
  public open var density: Number

  @JsName("DensityAdjustmentFactor")
  public open var densityAdjustmentFactor: Number

  @JsName("Radius")
  public open var radius: Number

  @JsName("bSingleInstanceModeOverrideRadius")
  public open var singleInstanceModeOverrideRadius: Boolean

  @JsName("SingleInstanceModeRadius")
  public open var singleInstanceModeRadius: Number

  @JsName("Scaling")
  public open var scaling: String

  @JsName("ScaleX")
  public open var scaleX: FloatInterval

  @JsName("ScaleY")
  public open var scaleY: FloatInterval

  @JsName("ScaleZ")
  public open var scaleZ: FloatInterval

  @JsName("VertexColorMaskByChannel")
  public open var vertexColorMaskByChannel: FoliageVertexColorChannelMask

  @JsName("VertexColorMask")
  public open var vertexColorMask: String

  @JsName("VertexColorMaskThreshold")
  public open var vertexColorMaskThreshold: Number

  @JsName("VertexColorMaskInvert")
  public open var vertexColorMaskInvert: Boolean

  @JsName("ZOffset")
  public open var zOffset: FloatInterval

  @JsName("AlignToNormal")
  public open var alignToNormal: Boolean

  @JsName("AverageNormal")
  public open var averageNormal: Boolean

  @JsName("AverageNormalSingleComponent")
  public open var averageNormalSingleComponent: Boolean

  @JsName("AlignMaxAngle")
  public open var alignMaxAngle: Number

  @JsName("RandomYaw")
  public open var randomYaw: Boolean

  @JsName("RandomPitchAngle")
  public open var randomPitchAngle: Number

  @JsName("GroundSlopeAngle")
  public open var groundSlopeAngle: FloatInterval

  @JsName("Height")
  public open var height: FloatInterval

  @JsName("LandscapeLayers")
  public open var landscapeLayers: Array<String>

  @JsName("MinimumLayerWeight")
  public open var minimumLayerWeight: Number

  @JsName("ExclusionLandscapeLayers")
  public open var exclusionLandscapeLayers: Array<String>

  @JsName("MinimumExclusionLayerWeight")
  public open var minimumExclusionLayerWeight: Number

  @JsName("LandscapeLayer")
  public open var landscapeLayer: String

  @JsName("CollisionWithWorld")
  public open var collisionWithWorld: Boolean

  @JsName("CollisionScale")
  public open var collisionScale: Vector

  @JsName("AverageNormalSampleCount")
  public open var averageNormalSampleCount: Number

  @JsName("MeshBounds")
  public open var meshBounds: BoxSphereBounds

  @JsName("LowBoundOriginRadius")
  public open var lowBoundOriginRadius: Vector

  @JsName("Mobility")
  public open var mobility: String

  @JsName("CullDistance")
  public open var cullDistance: Int32Interval

  @JsName("bEnableStaticLighting")
  public open var enableStaticLighting: Boolean

  @JsName("CastShadow")
  public open var castShadow: Boolean

  @JsName("bAffectDynamicIndirectLighting")
  public open var affectDynamicIndirectLighting: Boolean

  @JsName("bAffectDistanceFieldLighting")
  public open var affectDistanceFieldLighting: Boolean

  @JsName("bCastDynamicShadow")
  public open var castDynamicShadow: Boolean

  @JsName("bCastStaticShadow")
  public open var castStaticShadow: Boolean

  @JsName("bCastContactShadow")
  public open var castContactShadow: Boolean

  @JsName("bCastShadowAsTwoSided")
  public open var castShadowAsTwoSided: Boolean

  @JsName("bReceivesDecals")
  public open var receivesDecals: Boolean

  @JsName("bOverrideLightMapRes")
  public open var overrideLightMapRes: Boolean

  @JsName("OverriddenLightMapRes")
  public open var overriddenLightMapRes: Number

  @JsName("LightmapType")
  public open var lightmapType: String

  @JsName("bUseAsOccluder")
  public open var useAsOccluder: Boolean

  @JsName("bVisibleInRayTracing")
  public open var visibleInRayTracing: Boolean

  @JsName("bEvaluateWorldPositionOffset")
  public open var evaluateWorldPositionOffset: Boolean

  @JsName("BodyInstance")
  public open var bodyInstance: BodyInstance

  @JsName("CustomNavigableGeometry")
  public open var customNavigableGeometry: String

  @JsName("LightingChannels")
  public open var lightingChannels: LightingChannels

  @JsName("bRenderCustomDepth")
  public open var renderCustomDepth: Boolean

  @JsName("CustomDepthStencilWriteMask")
  public open var customDepthStencilWriteMask: String

  @JsName("CustomDepthStencilValue")
  public open var customDepthStencilValue: Number

  @JsName("TranslucencySortPriority")
  public open var translucencySortPriority: Number

  @JsName("HiddenEditorViews")
  public open var hiddenEditorViews: Any

  @JsName("IsSelected")
  public open var isSelected: Boolean

  @JsName("CollisionRadius")
  public open var collisionRadius: Number

  @JsName("ShadeRadius")
  public open var shadeRadius: Number

  @JsName("NumSteps")
  public open var numSteps: Number

  @JsName("InitialSeedDensity")
  public open var initialSeedDensity: Number

  @JsName("AverageSpreadDistance")
  public open var averageSpreadDistance: Number

  @JsName("SpreadVariance")
  public open var spreadVariance: Number

  @JsName("SeedsPerStep")
  public open var seedsPerStep: Number

  @JsName("DistributionSeed")
  public open var distributionSeed: Number

  @JsName("MaxInitialSeedOffset")
  public open var maxInitialSeedOffset: Number

  @JsName("bCanGrowInShade")
  public open var canGrowInShade: Boolean

  @JsName("bSpawnsInShade")
  public open var spawnsInShade: Boolean

  @JsName("MaxInitialAge")
  public open var maxInitialAge: Number

  @JsName("MaxAge")
  public open var maxAge: Number

  @JsName("OverlapPriority")
  public open var overlapPriority: Number

  @JsName("ProceduralScale")
  public open var proceduralScale: FloatInterval

  @JsName("ScaleCurve")
  public open var scaleCurve: RuntimeFloatCurve

  @JsName("DensityFalloff")
  public open var densityFalloff: FoliageDensityFalloff

  @JsName("ChangeCount")
  public open var changeCount: Number

  @JsName("ReapplyDensity")
  public open var reapplyDensity: Boolean

  @JsName("ReapplyRadius")
  public open var reapplyRadius: Boolean

  @JsName("ReapplyAlignToNormal")
  public open var reapplyAlignToNormal: Boolean

  @JsName("ReapplyRandomYaw")
  public open var reapplyRandomYaw: Boolean

  @JsName("ReapplyScaling")
  public open var reapplyScaling: Boolean

  @JsName("ReapplyScaleX")
  public open var reapplyScaleX: Boolean

  @JsName("ReapplyScaleY")
  public open var reapplyScaleY: Boolean

  @JsName("ReapplyScaleZ")
  public open var reapplyScaleZ: Boolean

  @JsName("ReapplyRandomPitchAngle")
  public open var reapplyRandomPitchAngle: Boolean

  @JsName("ReapplyGroundSlope")
  public open var reapplyGroundSlope: Boolean

  @JsName("ReapplyHeight")
  public open var reapplyHeight: Boolean

  @JsName("ReapplyLandscapeLayers")
  public open var reapplyLandscapeLayers: Boolean

  @JsName("ReapplyZOffset")
  public open var reapplyZOffset: Boolean

  @JsName("ReapplyCollisionWithWorld")
  public open var reapplyCollisionWithWorld: Boolean

  @JsName("ReapplyVertexColorMask")
  public open var reapplyVertexColorMask: Boolean

  @JsName("bEnableDensityScaling")
  public open var enableDensityScaling: Boolean

  @JsName("bEnableDiscardOnLoad")
  public open var enableDiscardOnLoad: Boolean

  @JsName("RuntimeVirtualTextures")
  public open var runtimeVirtualTextures: Array<RuntimeVirtualTexture>

  @JsName("VirtualTextureCullMips")
  public open var virtualTextureCullMips: Number

  @JsName("VirtualTextureRenderPassType")
  public open var virtualTextureRenderPassType: String

  @JsName("bIncludeInHLOD")
  public open var includeInHlod: Boolean

  @JsName("ScaleMinX")
  public open var scaleMinX: Number

  @JsName("ScaleMinY")
  public open var scaleMinY: Number

  @JsName("ScaleMinZ")
  public open var scaleMinZ: Number

  @JsName("ScaleMaxX")
  public open var scaleMaxX: Number

  @JsName("ScaleMaxY")
  public open var scaleMaxY: Number

  @JsName("ScaleMaxZ")
  public open var scaleMaxZ: Number

  @JsName("HeightMin")
  public open var heightMin: Number

  @JsName("HeightMax")
  public open var heightMax: Number

  @JsName("ZOffsetMin")
  public open var zOffsetMin: Number

  @JsName("ZOffsetMax")
  public open var zOffsetMax: Number

  @JsName("StartCullDistance")
  public open var startCullDistance: Number

  @JsName("EndCullDistance")
  public open var endCullDistance: Number

  @JsName("UniformScale")
  public open var uniformScale: Boolean

  @JsName("LockScaleX")
  public open var lockScaleX: Boolean

  @JsName("LockScaleY")
  public open var lockScaleY: Boolean

  @JsName("LockScaleZ")
  public open var lockScaleZ: Boolean

  @JsName("GroundSlope")
  public open var groundSlope: Number

  @JsName("MinGroundSlope")
  public open var minGroundSlope: Number

  @JsName("MinScale")
  public open var minScale: Number

  @JsName("MaxScale")
  public open var maxScale: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageType

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageType

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageType

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageType

    @JsName("C")
    public fun copy(other: UObject): FoliageType

    @JsName("C")
    public fun copy(other: Any): FoliageType
  }
}

public open external class InstancedStaticMeshInstanceData {
  @JsName("Transform")
  public open var transform: Matrix

  public open fun clone(): InstancedStaticMeshInstanceData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InstancedStaticMeshInstanceData

    @JsName("C")
    public fun copy(other: Any): InstancedStaticMeshInstanceData
  }
}

public open external class InstancedStaticMeshRandomSeed {
  @JsName("StartInstanceIndex")
  public open var startInstanceIndex: Number

  @JsName("RandomSeed")
  public open var randomSeed: Number

  public open fun clone(): InstancedStaticMeshRandomSeed

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InstancedStaticMeshRandomSeed

    @JsName("C")
    public fun copy(other: Any): InstancedStaticMeshRandomSeed
  }
}

public open external class InstancedStaticMeshMappingInfo {
  public open fun clone(): InstancedStaticMeshMappingInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InstancedStaticMeshMappingInfo

    @JsName("C")
    public fun copy(other: Any): InstancedStaticMeshMappingInfo
  }
}

@JsName("T$636")
public external interface Object636 {
  @JsName("OutInstanceTransform")
  public var outInstanceTransform: Transform

  @JsName("$")
  public var value: Boolean
}

public open external class InstancedStaticMeshComponent(
  outer: UObject,
) : StaticMeshComponent {
  @JsName("PerInstanceSMData")
  public open var perInstanceSmData: Array<InstancedStaticMeshInstanceData>

  @JsName("PerInstancePrevTransform")
  public open var perInstancePrevTransform: Array<Matrix>

  @JsName("NumCustomDataFloats")
  public open var numCustomDataFloats: Number

  @JsName("PerInstanceSMCustomData")
  public open var perInstanceSmCustomData: Array<Number>

  @JsName("InstancingRandomSeed")
  public open var instancingRandomSeed: Number

  @JsName("AdditionalRandomSeeds")
  public open var additionalRandomSeeds: Array<InstancedStaticMeshRandomSeed>

  @JsName("InstanceStartCullDistance")
  public open var instanceStartCullDistance: Number

  @JsName("InstanceEndCullDistance")
  public open var instanceEndCullDistance: Number

  @JsName("InstanceReorderTable")
  public open var instanceReorderTable: Array<Number>

  @JsName("NumPendingLightmaps")
  public open var numPendingLightmaps: Number

  @JsName("CachedMappings")
  public open var cachedMappings: Array<InstancedStaticMeshMappingInfo>

  @JsName("UpdateInstanceTransform")
  public open fun updateInstanceTransform(
    instanceIndex: Number,
    newInstanceTransform: Transform,
    worldSpace: Boolean,
    markRenderStateDirty: Boolean,
    teleport: Boolean,
  ): Boolean

  @JsName("SetCustomDataValue")
  public open fun setCustomDataValue(
    instanceIndex: Number,
    customDataIndex: Number,
    customDataValue: Number,
    markRenderStateDirty: Boolean,
  ): Boolean

  @JsName("SetCullDistances")
  public open fun setCullDistances(startCullDistance: Number, endCullDistance: Number): Unit

  @JsName("RemoveInstances")
  public open fun removeInstances(instancesToRemove: Array<Number>): Boolean

  @JsName("RemoveInstance")
  public open fun removeInstance(instanceIndex: Number): Boolean

  @JsName("IsValidInstance")
  public open fun isValidInstance(instanceIndex: Number): Boolean

  @JsName("GetInstanceTransform")
  public open fun getInstanceTransform(
    instanceIndex: Number,
    outInstanceTransform: Transform,
    worldSpace: Boolean,
  ): Object636

  @JsName("GetInstancesOverlappingSphere")
  public open fun getInstancesOverlappingSphere(
    center: Vector,
    radius: Number,
    sphereInWorldSpace: Boolean,
  ): Array<Number>

  @JsName("GetInstancesOverlappingBox")
  public open fun getInstancesOverlappingBox(box: Box, boxInWorldSpace: Boolean): Array<Number>

  @JsName("GetInstanceCount")
  public open fun getInstanceCount(): Number

  @JsName("ClearInstances")
  public open fun clearInstances(): Unit

  @JsName("BatchUpdateInstancesTransforms")
  public open fun batchUpdateInstancesTransforms(
    startInstanceIndex: Number,
    newInstancesTransforms: Array<Transform>,
    worldSpace: Boolean,
    markRenderStateDirty: Boolean,
    teleport: Boolean,
  ): Boolean

  @JsName("BatchUpdateInstancesTransform")
  public open fun batchUpdateInstancesTransform(
    startInstanceIndex: Number,
    numInstances: Number,
    newInstancesTransform: Transform,
    worldSpace: Boolean,
    markRenderStateDirty: Boolean,
    teleport: Boolean,
  ): Boolean

  @JsName("AddInstanceWorldSpace")
  public open fun addInstanceWorldSpace(worldTransform: Transform): Number

  @JsName("AddInstances")
  public open fun addInstances(
    instanceTransforms: Array<Transform>,
    shouldReturnIndices: Boolean,
    worldSpace: Boolean,
  ): Array<Number>

  @JsName("AddInstance")
  public open fun addInstance(instanceTransform: Transform, worldSpace: Boolean): Number

  @JsName("K2_AcquireEditorSMInstanceElementHandle")
  public open fun k2AcquireEditorSmInstanceElementHandle(instanceIndex: Number,
      allowCreate: Boolean): ScriptTypedElementHandle

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InstancedStaticMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InstancedStaticMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InstancedStaticMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InstancedStaticMeshComponent

    @JsName("C")
    public fun copy(other: UObject): InstancedStaticMeshComponent

    @JsName("C")
    public fun copy(other: Any): InstancedStaticMeshComponent

    @JsName("K2_AcquireEditorSMInstanceElementHandle")
    public fun k2AcquireEditorSmInstanceElementHandle(
      ismComponent: InstancedStaticMeshComponent,
      instanceIndex: Number,
      allowCreate: Boolean,
    ): ScriptTypedElementHandle
  }
}

public open external class HierarchicalInstancedStaticMeshComponent(
  outer: UObject,
) : InstancedStaticMeshComponent {
  @JsName("bUseTranslatedInstanceSpace")
  public open var useTranslatedInstanceSpace: Boolean

  @JsName("TranslatedInstanceSpaceOrigin")
  public open var translatedInstanceSpaceOrigin: Vector

  @JsName("SortedInstances")
  public open var sortedInstances: Array<Number>

  @JsName("NumBuiltInstances")
  public open var numBuiltInstances: Number

  @JsName("BuiltInstanceBounds")
  public open var builtInstanceBounds: Box

  @JsName("UnbuiltInstanceBounds")
  public open var unbuiltInstanceBounds: Box

  @JsName("UnbuiltInstanceBoundsList")
  public open var unbuiltInstanceBoundsList: Array<Box>

  @JsName("bEnableDensityScaling")
  public open var enableDensityScaling: Boolean

  @JsName("OcclusionLayerNumNodes")
  public open var occlusionLayerNumNodes: Number

  @JsName("CacheMeshExtendedBounds")
  public open var cacheMeshExtendedBounds: BoxSphereBounds

  @JsName("bDisableCollision")
  public open var disableCollision: Boolean

  @JsName("InstanceCountToRender")
  public open var instanceCountToRender: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HierarchicalInstancedStaticMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HierarchicalInstancedStaticMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HierarchicalInstancedStaticMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HierarchicalInstancedStaticMeshComponent

    @JsName("C")
    public fun copy(other: UObject): HierarchicalInstancedStaticMeshComponent

    @JsName("C")
    public fun copy(other: Any): HierarchicalInstancedStaticMeshComponent
  }
}

public open external class FoliageInstancedStaticMeshComponent(
  outer: UObject,
) : HierarchicalInstancedStaticMeshComponent {
  @JsName("OnInstanceTakePointDamage")
  public open var onInstanceTakePointDamage: UnrealEngineMulticastDelegate<(
    InstanceIndex: Number,
    Damage: Number,
    InstigatedBy: Controller,
    HitLocation: Vector,
    ShotFromDirection: Vector,
    DamageType: DamageType,
    DamageCauser: Actor,
  ) -> Unit>

  @JsName("OnInstanceTakeRadialDamage")
  public open var onInstanceTakeRadialDamage: UnrealEngineMulticastDelegate<(
    Instances: Array<Number>,
    Damages: Array<Number>,
    InstigatedBy: Controller,
    Origin: Vector,
    MaxRadius: Number,
    DamageType: DamageType,
    DamageCauser: Actor,
  ) -> Unit>

  @JsName("bEnableDiscardOnLoad")
  public open var enableDiscardOnLoad: Boolean

  @JsName("FoliageHiddenEditorViews")
  public open var foliageHiddenEditorViews: Any

  @JsName("GenerationGuid")
  public open var generationGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageInstancedStaticMeshComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageInstancedStaticMeshComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageInstancedStaticMeshComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageInstancedStaticMeshComponent

    @JsName("C")
    public fun copy(other: UObject): FoliageInstancedStaticMeshComponent

    @JsName("C")
    public fun copy(other: Any): FoliageInstancedStaticMeshComponent
  }
}

@JsName("FoliageType_InstancedStaticMesh")
public open external class FoliageTypeInstancedStaticMesh(
  outer: UObject,
) : FoliageType {
  @JsName("Mesh")
  public open var mesh: StaticMesh

  @JsName("OverrideMaterials")
  public open var overrideMaterials: Array<MaterialInterface>

  @JsName("ComponentClass")
  public open var componentClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FoliageTypeInstancedStaticMesh

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FoliageTypeInstancedStaticMesh

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FoliageTypeInstancedStaticMesh

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FoliageTypeInstancedStaticMesh

    @JsName("C")
    public fun copy(other: UObject): FoliageTypeInstancedStaticMesh

    @JsName("C")
    public fun copy(other: Any): FoliageTypeInstancedStaticMesh
  }
}

public open external class FoliageTypeObject {
  @JsName("FoliageTypeObject")
  public open var foliageTypeObject: UObject

  @JsName("TypeInstance")
  public open var typeInstance: FoliageType

  @JsName("bIsAsset")
  public open var isAsset: Boolean

  @JsName("Type")
  public open var type: UnrealEngineClass

  public open fun clone(): FoliageTypeObject

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FoliageTypeObject

    @JsName("C")
    public fun copy(other: Any): FoliageTypeObject
  }
}

public open external class ProceduralFoliageSpawner(
  outer: UObject,
) : UObject {
  @JsName("RandomSeed")
  public open var randomSeed: Number

  @JsName("TileSize")
  public open var tileSize: Number

  @JsName("NumUniqueTiles")
  public open var numUniqueTiles: Number

  @JsName("MinimumQuadTreeSize")
  public open var minimumQuadTreeSize: Number

  @JsName("FoliageTypes")
  public open var foliageTypes: Array<FoliageTypeObject>

  @JsName("Simulate")
  public open fun simulate(numSteps: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralFoliageSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralFoliageSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralFoliageSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralFoliageSpawner

    @JsName("C")
    public fun copy(other: UObject): ProceduralFoliageSpawner

    @JsName("C")
    public fun copy(other: Any): ProceduralFoliageSpawner
  }
}

public open external class ProceduralFoliageComponent(
  outer: UObject,
) : ActorComponent {
  @JsName("FoliageSpawner")
  public open var foliageSpawner: ProceduralFoliageSpawner

  @JsName("TileOverlap")
  public open var tileOverlap: Number

  @JsName("bAllowLandscape")
  public open var allowLandscape: Boolean

  @JsName("bAllowBSP")
  public open var allowBsp: Boolean

  @JsName("bAllowStaticMesh")
  public open var allowStaticMesh: Boolean

  @JsName("bAllowTranslucent")
  public open var allowTranslucent: Boolean

  @JsName("bAllowFoliage")
  public open var allowFoliage: Boolean

  @JsName("bShowDebugTiles")
  public open var showDebugTiles: Boolean

  @JsName("DataLayer")
  public open var dataLayer: ActorDataLayer

  @JsName("SpawningVolume")
  public open var spawningVolume: Volume

  @JsName("ProceduralGuid")
  public open var proceduralGuid: Guid

  @JsName("LastSimulationDataLayer")
  public open var lastSimulationDataLayer: ActorDataLayer

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralFoliageComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralFoliageComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralFoliageComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralFoliageComponent

    @JsName("C")
    public fun copy(other: UObject): ProceduralFoliageComponent

    @JsName("C")
    public fun copy(other: Any): ProceduralFoliageComponent
  }
}

public open external class ProceduralFoliageVolume(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Volume {
  @JsName("ProceduralComponent")
  public open var proceduralComponent: ProceduralFoliageComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralFoliageVolume

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralFoliageVolume

    @JsName("C")
    public fun copy(other: UObject): ProceduralFoliageVolume

    @JsName("C")
    public fun copy(other: Any): ProceduralFoliageVolume
  }
}

public open external class ProceduralFoliageEditorLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralFoliageEditorLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralFoliageEditorLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralFoliageEditorLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralFoliageEditorLibrary

    @JsName("ResimulateProceduralFoliageVolumes")
    public
        fun resimulateProceduralFoliageVolumes(proceduralFoliageVolumes: Array<ProceduralFoliageVolume>):
        Unit

    @JsName("ResimulateProceduralFoliageComponents")
    public
        fun resimulateProceduralFoliageComponents(proceduralFoliageComponents: Array<ProceduralFoliageComponent>):
        Unit

    @JsName("ClearProceduralFoliageVolumes")
    public
        fun clearProceduralFoliageVolumes(proceduralFoliageVolumes: Array<ProceduralFoliageVolume>):
        Unit

    @JsName("ClearProceduralFoliageComponents")
    public
        fun clearProceduralFoliageComponents(proceduralFoliageComponents: Array<ProceduralFoliageComponent>):
        Unit

    @JsName("C")
    public fun copy(other: UObject): ProceduralFoliageEditorLibrary

    @JsName("C")
    public fun copy(other: Any): ProceduralFoliageEditorLibrary
  }
}

public open external class ProceduralFoliageSpawnerFactory(
  outer: UObject,
) : Factory {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProceduralFoliageSpawnerFactory

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProceduralFoliageSpawnerFactory

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProceduralFoliageSpawnerFactory

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProceduralFoliageSpawnerFactory

    @JsName("C")
    public fun copy(other: UObject): ProceduralFoliageSpawnerFactory

    @JsName("C")
    public fun copy(other: Any): ProceduralFoliageSpawnerFactory
  }
}

public open external class CookerStats(
  outer: UObject,
) : UObject {
  @JsName("Assets")
  public open var assets: Array<Any>

  @JsName("SizeBefore")
  public open var sizeBefore: Number

  @JsName("SizeAfter")
  public open var sizeAfter: Number

  @JsName("Path")
  public open var path: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CookerStats

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CookerStats

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CookerStats

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CookerStats

    @JsName("C")
    public fun copy(other: UObject): CookerStats

    @JsName("C")
    public fun copy(other: Any): CookerStats
  }
}

public open external class LightingBuildInfo(
  outer: UObject,
) : UObject {
  @JsName("UObject")
  public open var uObject: Any

  @JsName("LightingTime")
  public open var lightingTime: Number

  @JsName("UnmappedTexelsPercentage")
  public open var unmappedTexelsPercentage: Number

  @JsName("UnmappedTexelsMemory")
  public open var unmappedTexelsMemory: Number

  @JsName("TotalTexelMemory")
  public open var totalTexelMemory: Number

  @JsName("LevelName")
  public open var levelName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LightingBuildInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LightingBuildInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LightingBuildInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LightingBuildInfo

    @JsName("C")
    public fun copy(other: UObject): LightingBuildInfo

    @JsName("C")
    public fun copy(other: Any): LightingBuildInfo
  }
}

public open external class PrimitiveStats(
  outer: UObject,
) : UObject {
  @JsName("UObject")
  public open var uObject: Any

  @JsName("Actors")
  public open var actors: Array<Any>

  @JsName("Type")
  public open var type: String

  @JsName("Count")
  public open var count: Number

  @JsName("Sections")
  public open var sections: Number

  @JsName("HWInstances")
  public open var hwInstances: Number

  @JsName("InstSections")
  public open var instSections: Number

  @JsName("Triangles")
  public open var triangles: Number

  @JsName("InstTriangles")
  public open var instTriangles: Number

  @JsName("ResourceSize")
  public open var resourceSize: Number

  @JsName("VertexColorMem")
  public open var vertexColorMem: Number

  @JsName("InstVertexColorMem")
  public open var instVertexColorMem: Number

  @JsName("LightsLM")
  public open var lightsLm: Number

  @JsName("LightsOther")
  public open var lightsOther: Number

  @JsName("LightsTotal")
  public open var lightsTotal: Number

  @JsName("ObjLightCost")
  public open var objLightCost: Number

  @JsName("LightMapData")
  public open var lightMapData: Number

  @JsName("LMSMResolution")
  public open var lmsmResolution: Number

  @JsName("RadiusMin")
  public open var radiusMin: Number

  @JsName("RadiusMax")
  public open var radiusMax: Number

  @JsName("RadiusAvg")
  public open var radiusAvg: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PrimitiveStats

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PrimitiveStats

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PrimitiveStats

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PrimitiveStats

    @JsName("C")
    public fun copy(other: UObject): PrimitiveStats

    @JsName("C")
    public fun copy(other: Any): PrimitiveStats
  }
}

public open external class ShaderCookerStats(
  outer: UObject,
) : UObject {
  @JsName("Name")
  public open var name: String

  @JsName("Platform")
  public open var platform: String

  @JsName("Category")
  public open var category: String

  @JsName("Compiled")
  public open var compiled: Number

  @JsName("Cooked")
  public open var cooked: Number

  @JsName("Permutations")
  public open var permutations: Number

  @JsName("CompileTime")
  public open var compileTime: Number

  @JsName("Path")
  public open var path: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ShaderCookerStats

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ShaderCookerStats

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ShaderCookerStats

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ShaderCookerStats

    @JsName("C")
    public fun copy(other: UObject): ShaderCookerStats

    @JsName("C")
    public fun copy(other: Any): ShaderCookerStats
  }
}

public open external class StaticMeshLightingInfo(
  outer: UObject,
) : UObject {
  @JsName("StaticMeshActor")
  public open var staticMeshActor: Any

  @JsName("StaticMesh")
  public open var staticMesh: Any

  @JsName("LevelName")
  public open var levelName: String

  @JsName("TextureMapping")
  public open var textureMapping: String

  @JsName("bTextureMapping")
  public open var useTextureMapping: Boolean

  @JsName("bHasLightmapTexCoords")
  public open var hasLightmapTexCoords: Boolean

  @JsName("StaticLightingResolution")
  public open var staticLightingResolution: Number

  @JsName("TextureLightMapMemoryUsage")
  public open var textureLightMapMemoryUsage: Number

  @JsName("VertexLightMapMemoryUsage")
  public open var vertexLightMapMemoryUsage: Number

  @JsName("LightMapLightCount")
  public open var lightMapLightCount: Number

  @JsName("TextureShadowMapMemoryUsage")
  public open var textureShadowMapMemoryUsage: Number

  @JsName("VertexShadowMapMemoryUsage")
  public open var vertexShadowMapMemoryUsage: Number

  @JsName("ShadowMapLightCount")
  public open var shadowMapLightCount: Number

  @JsName("LightmapTextureNames")
  public open var lightmapTextureNames: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): StaticMeshLightingInfo

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): StaticMeshLightingInfo

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): StaticMeshLightingInfo

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): StaticMeshLightingInfo

    @JsName("C")
    public fun copy(other: UObject): StaticMeshLightingInfo

    @JsName("C")
    public fun copy(other: Any): StaticMeshLightingInfo
  }
}

public open external class TextureStats(
  outer: UObject,
) : UObject {
  @JsName("Texture")
  public open var texture: Any

  @JsName("Actors")
  public open var actors: Array<Any>

  @JsName("Type")
  public open var type: String

  @JsName("Virtual")
  public open var virtual: String

  @JsName("MaxDim")
  public open var maxDim: Vector2d

  @JsName("CurrentDim")
  public open var currentDim: Vector2d

  @JsName("Format")
  public open var format: String

  @JsName("Group")
  public open var group: String

  @JsName("LODBias")
  public open var lodBias: Number

  @JsName("CurrentKB")
  public open var currentKb: Number

  @JsName("FullyLoadedKB")
  public open var fullyLoadedKb: Number

  @JsName("NumUses")
  public open var numUses: Number

  @JsName("LastTimeRendered")
  public open var lastTimeRendered: Number

  @JsName("Path")
  public open var path: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureStats

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureStats

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureStats

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureStats

    @JsName("C")
    public fun copy(other: UObject): TextureStats

    @JsName("C")
    public fun copy(other: Any): TextureStats
  }
}

public open external class TextureImportSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("AutoVTSize")
  public open var autoVtSize: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextureImportSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextureImportSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextureImportSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextureImportSettings

    @JsName("C")
    public fun copy(other: UObject): TextureImportSettings

    @JsName("C")
    public fun copy(other: Any): TextureImportSettings
  }
}

public open external class ClothConfigCommon(
  outer: UObject,
) : ClothConfigBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothConfigCommon

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothConfigCommon

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothConfigCommon

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothConfigCommon

    @JsName("C")
    public fun copy(other: UObject): ClothConfigCommon

    @JsName("C")
    public fun copy(other: Any): ClothConfigCommon
  }
}

public open external class ClothSharedConfigCommon(
  outer: UObject,
) : ClothConfigCommon {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothSharedConfigCommon

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothSharedConfigCommon

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothSharedConfigCommon

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothSharedConfigCommon

    @JsName("C")
    public fun copy(other: UObject): ClothSharedConfigCommon

    @JsName("C")
    public fun copy(other: Any): ClothSharedConfigCommon
  }
}

public open external class ClothingAssetCustomData(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothingAssetCustomData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothingAssetCustomData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothingAssetCustomData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothingAssetCustomData

    @JsName("C")
    public fun copy(other: UObject): ClothingAssetCustomData

    @JsName("C")
    public fun copy(other: Any): ClothingAssetCustomData
  }
}

public open external class ClothTetherData {
  public open fun clone(): ClothTetherData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothTetherData

    @JsName("C")
    public fun copy(other: Any): ClothTetherData
  }
}

public open external class ClothPhysicalMeshData {
  @JsName("Vertices")
  public open var vertices: Array<Vector3f>

  @JsName("Normals")
  public open var normals: Array<Vector3f>

  @JsName("VertexColors")
  public open var vertexColors: Array<Color>

  @JsName("Indices")
  public open var indices: Array<Any>

  @JsName("WeightMaps")
  public open var weightMaps: Any

  @JsName("InverseMasses")
  public open var inverseMasses: Array<Number>

  @JsName("BoneData")
  public open var boneData: Array<ClothVertBoneData>

  @JsName("SelfCollisionIndices")
  public open var selfCollisionIndices: Array<Any>

  @JsName("EuclideanTethers")
  public open var euclideanTethers: ClothTetherData

  @JsName("GeodesicTethers")
  public open var geodesicTethers: ClothTetherData

  @JsName("MaxBoneWeights")
  public open var maxBoneWeights: Number

  @JsName("NumFixedVerts")
  public open var numFixedVerts: Number

  @JsName("MaxDistances")
  public open var maxDistances: Array<Number>

  @JsName("BackstopDistances")
  public open var backstopDistances: Array<Number>

  @JsName("BackstopRadiuses")
  public open var backstopRadiuses: Array<Number>

  @JsName("AnimDriveMultipliers")
  public open var animDriveMultipliers: Array<Number>

  public open fun clone(): ClothPhysicalMeshData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothPhysicalMeshData

    @JsName("C")
    public fun copy(other: Any): ClothPhysicalMeshData
  }
}

@JsName("ClothCollisionPrim_Sphere")
public open external class ClothCollisionPrimSphere {
  @JsName("BoneIndex")
  public open var boneIndex: Number

  @JsName("Radius")
  public open var radius: Number

  @JsName("LocalPosition")
  public open var localPosition: Vector

  public open fun clone(): ClothCollisionPrimSphere

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothCollisionPrimSphere

    @JsName("C")
    public fun copy(other: Any): ClothCollisionPrimSphere
  }
}

@JsName("ClothCollisionPrim_SphereConnection")
public open external class ClothCollisionPrimSphereConnection {
  @JsName("SphereIndices")
  public open var sphereIndices: Number

  public open fun clone(): ClothCollisionPrimSphereConnection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothCollisionPrimSphereConnection

    @JsName("C")
    public fun copy(other: Any): ClothCollisionPrimSphereConnection
  }
}

@JsName("ClothCollisionPrim_ConvexFace")
public open external class ClothCollisionPrimConvexFace {
  @JsName("Plane")
  public open var plane: Plane

  @JsName("Indices")
  public open var indices: Array<Number>

  public open fun clone(): ClothCollisionPrimConvexFace

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothCollisionPrimConvexFace

    @JsName("C")
    public fun copy(other: Any): ClothCollisionPrimConvexFace
  }
}

@JsName("ClothCollisionPrim_Convex")
public open external class ClothCollisionPrimConvex {
  @JsName("Planes")
  public open var planes: Array<Plane>

  @JsName("Faces")
  public open var faces: Array<ClothCollisionPrimConvexFace>

  @JsName("SurfacePoints")
  public open var surfacePoints: Array<Vector>

  @JsName("BoneIndex")
  public open var boneIndex: Number

  public open fun clone(): ClothCollisionPrimConvex

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothCollisionPrimConvex

    @JsName("C")
    public fun copy(other: Any): ClothCollisionPrimConvex
  }
}

@JsName("ClothCollisionPrim_Box")
public open external class ClothCollisionPrimBox {
  @JsName("LocalPosition")
  public open var localPosition: Vector

  @JsName("LocalRotation")
  public open var localRotation: Quat

  @JsName("HalfExtents")
  public open var halfExtents: Vector

  @JsName("BoneIndex")
  public open var boneIndex: Number

  public open fun clone(): ClothCollisionPrimBox

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothCollisionPrimBox

    @JsName("C")
    public fun copy(other: Any): ClothCollisionPrimBox
  }
}

public open external class ClothCollisionData {
  @JsName("Spheres")
  public open var spheres: Array<ClothCollisionPrimSphere>

  @JsName("SphereConnections")
  public open var sphereConnections: Array<ClothCollisionPrimSphereConnection>

  @JsName("Convexes")
  public open var convexes: Array<ClothCollisionPrimConvex>

  @JsName("Boxes")
  public open var boxes: Array<ClothCollisionPrimBox>

  public open fun clone(): ClothCollisionData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothCollisionData

    @JsName("C")
    public fun copy(other: Any): ClothCollisionData
  }
}

public open external class PointWeightMap {
  @JsName("Values")
  public open var values: Array<Number>

  @JsName("Name")
  public open var name: String

  @JsName("CurrentTarget")
  public open var currentTarget: Number

  @JsName("bEnabled")
  public open var enabled: Boolean

  public open fun clone(): PointWeightMap

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PointWeightMap

    @JsName("C")
    public fun copy(other: Any): PointWeightMap
  }
}

@JsName("ClothLODDataCommon_Legacy")
public open external class ClothLodDataCommonLegacy(
  outer: UObject,
) : UObject {
  @JsName("PhysicalMeshData")
  public open var physicalMeshData: ClothPhysicalMeshDataBaseLegacy

  @JsName("ClothPhysicalMeshData")
  public open var clothPhysicalMeshData: ClothPhysicalMeshData

  @JsName("CollisionData")
  public open var collisionData: ClothCollisionData

  @JsName("ParameterMasks")
  public open var parameterMasks: Array<PointWeightMap>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothLodDataCommonLegacy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothLodDataCommonLegacy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothLodDataCommonLegacy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothLodDataCommonLegacy

    @JsName("C")
    public fun copy(other: UObject): ClothLodDataCommonLegacy

    @JsName("C")
    public fun copy(other: Any): ClothLodDataCommonLegacy
  }
}

@JsName("EWeightMapTargetCommon")
public external object WeightMapTargetCommon {
  public var None: String

  public var MaxDistance: String

  public var BackstopDistance: String

  public var BackstopRadius: String

  public var AnimDriveStiffness: String

  @JsName("AnimDriveDamping_DEPRECATED")
  public var AnimDriveDampingDeprecated: String

  @JsName("EWeightMapTargetCommon_MAX")
  public var Max: String
}

@JsName("ClothParameterMask_Legacy")
public open external class ClothParameterMaskLegacy {
  @JsName("MaskName")
  public open var maskName: String

  @JsName("CurrentTarget")
  public open var currentTarget: String

  @JsName("MaxValue")
  public open var maxValue: Number

  @JsName("MinValue")
  public open var minValue: Number

  @JsName("Values")
  public open var values: Array<Number>

  @JsName("bEnabled")
  public open var enabled: Boolean

  public open fun clone(): ClothParameterMaskLegacy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothParameterMaskLegacy

    @JsName("C")
    public fun copy(other: Any): ClothParameterMaskLegacy
  }
}

@JsName("ClothLODDataCommon")
public open external class ClothLodDataCommon {
  @JsName("PhysicalMeshData")
  public open var physicalMeshData: ClothPhysicalMeshData

  @JsName("CollisionData")
  public open var collisionData: ClothCollisionData

  @JsName("bUseMultipleInfluences")
  public open var useMultipleInfluences: Boolean

  @JsName("SkinningKernelRadius")
  public open var skinningKernelRadius: Number

  @JsName("bSmoothTransition")
  public open var smoothTransition: Boolean

  @JsName("ParameterMasks")
  public open var parameterMasks: Array<ClothParameterMaskLegacy>

  @JsName("PointWeightMaps")
  public open var pointWeightMaps: Array<PointWeightMap>

  public open fun clone(): ClothLodDataCommon

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothLodDataCommon

    @JsName("C")
    public fun copy(other: Any): ClothLodDataCommon
  }
}

@JsName("EClothingWindMethod_Legacy")
public external object ClothingWindMethod_Legacy {
  public var Legacy: String

  public var Accurate: String

  @JsName("EClothingWindMethod_MAX")
  public var EClothingWindMethodMax: String
}

@JsName("ClothConstraintSetup_Legacy")
public open external class ClothConstraintSetupLegacy {
  @JsName("Stiffness")
  public open var stiffness: Number

  @JsName("StiffnessMultiplier")
  public open var stiffnessMultiplier: Number

  @JsName("StretchLimit")
  public open var stretchLimit: Number

  @JsName("CompressionLimit")
  public open var compressionLimit: Number

  public open fun clone(): ClothConstraintSetupLegacy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothConstraintSetupLegacy

    @JsName("C")
    public fun copy(other: Any): ClothConstraintSetupLegacy
  }
}

@JsName("ClothConfig_Legacy")
public open external class ClothConfigLegacy {
  @JsName("WindMethod")
  public open var windMethod: String

  @JsName("VerticalConstraintConfig")
  public open var verticalConstraintConfig: ClothConstraintSetupLegacy

  @JsName("HorizontalConstraintConfig")
  public open var horizontalConstraintConfig: ClothConstraintSetupLegacy

  @JsName("BendConstraintConfig")
  public open var bendConstraintConfig: ClothConstraintSetupLegacy

  @JsName("ShearConstraintConfig")
  public open var shearConstraintConfig: ClothConstraintSetupLegacy

  @JsName("SelfCollisionRadius")
  public open var selfCollisionRadius: Number

  @JsName("SelfCollisionStiffness")
  public open var selfCollisionStiffness: Number

  @JsName("SelfCollisionCullScale")
  public open var selfCollisionCullScale: Number

  @JsName("Damping")
  public open var damping: Vector

  @JsName("Friction")
  public open var friction: Number

  @JsName("WindDragCoefficient")
  public open var windDragCoefficient: Number

  @JsName("WindLiftCoefficient")
  public open var windLiftCoefficient: Number

  @JsName("LinearDrag")
  public open var linearDrag: Vector

  @JsName("AngularDrag")
  public open var angularDrag: Vector

  @JsName("LinearInertiaScale")
  public open var linearInertiaScale: Vector

  @JsName("AngularInertiaScale")
  public open var angularInertiaScale: Vector

  @JsName("CentrifugalInertiaScale")
  public open var centrifugalInertiaScale: Vector

  @JsName("SolverFrequency")
  public open var solverFrequency: Number

  @JsName("StiffnessFrequency")
  public open var stiffnessFrequency: Number

  @JsName("GravityScale")
  public open var gravityScale: Number

  @JsName("GravityOverride")
  public open var gravityOverride: Vector

  @JsName("bUseGravityOverride")
  public open var useGravityOverride: Boolean

  @JsName("TetherStiffness")
  public open var tetherStiffness: Number

  @JsName("TetherLimit")
  public open var tetherLimit: Number

  @JsName("CollisionThickness")
  public open var collisionThickness: Number

  @JsName("AnimDriveSpringStiffness")
  public open var animDriveSpringStiffness: Number

  @JsName("AnimDriveDamperStiffness")
  public open var animDriveDamperStiffness: Number

  public open fun clone(): ClothConfigLegacy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ClothConfigLegacy

    @JsName("C")
    public fun copy(other: Any): ClothConfigLegacy
  }
}

public open external class ClothingAssetCommon(
  outer: UObject,
) : ClothingAssetBase {
  @JsName("PhysicsAsset")
  public open var physicsAsset: PhysicsAsset

  @JsName("ClothConfigs")
  public open var clothConfigs: Any

  @JsName("ClothSharedSimConfig")
  public open var clothSharedSimConfig: ClothConfigBase

  @JsName("ClothSimConfig")
  public open var clothSimConfig: ClothConfigBase

  @JsName("ChaosClothSimConfig")
  public open var chaosClothSimConfig: ClothConfigBase

  @JsName("ClothLODData")
  public open var clothLodData: Array<ClothLodDataCommonLegacy>

  @JsName("LODData")
  public open var lodData: Array<ClothLodDataCommon>

  @JsName("LodMap")
  public open var lodMap: Array<Number>

  @JsName("UsedBoneNames")
  public open var usedBoneNames: Array<String>

  @JsName("UsedBoneIndices")
  public open var usedBoneIndices: Array<Number>

  @JsName("ReferenceBoneIndex")
  public open var referenceBoneIndex: Number

  @JsName("CustomData")
  public open var customData: ClothingAssetCustomData

  @JsName("ClothConfig")
  public open var clothConfig: ClothConfigLegacy

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClothingAssetCommon

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClothingAssetCommon

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClothingAssetCommon

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClothingAssetCommon

    @JsName("C")
    public fun copy(other: UObject): ClothingAssetCommon

    @JsName("C")
    public fun copy(other: Any): ClothingAssetCommon
  }
}

public open external class PreviewSceneProfile {
  @JsName("ProfileName")
  public open var profileName: String

  @JsName("bSharedProfile")
  public open var sharedProfile: Boolean

  @JsName("bUseSkyLighting")
  public open var useSkyLighting: Boolean

  @JsName("DirectionalLightIntensity")
  public open var directionalLightIntensity: Number

  @JsName("DirectionalLightColor")
  public open var directionalLightColor: LinearColor

  @JsName("SkyLightIntensity")
  public open var skyLightIntensity: Number

  @JsName("bRotateLightingRig")
  public open var rotateLightingRig: Boolean

  @JsName("bShowEnvironment")
  public open var showEnvironment: Boolean

  @JsName("bShowFloor")
  public open var showFloor: Boolean

  @JsName("EnvironmentColor")
  public open var environmentColor: LinearColor

  @JsName("EnvironmentIntensity")
  public open var environmentIntensity: Number

  @JsName("EnvironmentCubeMap")
  public open var environmentCubeMap: TextureCube

  @JsName("EnvironmentCubeMapPath")
  public open var environmentCubeMapPath: String

  @JsName("bPostProcessingEnabled")
  public open var postProcessingEnabled: Boolean

  @JsName("PostProcessingSettings")
  public open var postProcessingSettings: PostProcessSettings

  @JsName("LightingRigRotation")
  public open var lightingRigRotation: Number

  @JsName("RotationSpeed")
  public open var rotationSpeed: Number

  @JsName("DirectionalLightRotation")
  public open var directionalLightRotation: Rotator

  public open fun clone(): PreviewSceneProfile

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PreviewSceneProfile

    @JsName("C")
    public fun copy(other: Any): PreviewSceneProfile
  }
}

public open external class LocalProfiles(
  outer: UObject,
) : UObject {
  @JsName("Profiles")
  public open var profiles: Array<PreviewSceneProfile>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): LocalProfiles

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): LocalProfiles

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): LocalProfiles

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): LocalProfiles

    @JsName("C")
    public fun copy(other: UObject): LocalProfiles

    @JsName("C")
    public fun copy(other: Any): LocalProfiles
  }
}

public open external class SharedProfiles(
  outer: UObject,
) : UObject {
  @JsName("Profiles")
  public open var profiles: Array<PreviewSceneProfile>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SharedProfiles

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SharedProfiles

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SharedProfiles

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SharedProfiles

    @JsName("C")
    public fun copy(other: UObject): SharedProfiles

    @JsName("C")
    public fun copy(other: Any): SharedProfiles
  }
}

public open external class AssetViewerSettings(
  outer: UObject,
) : UObject {
  @JsName("Profiles")
  public open var profiles: Array<PreviewSceneProfile>

  @JsName("bFakeConfigValue_HACK")
  public open var fakeConfigValueHack: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetViewerSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetViewerSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetViewerSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetViewerSettings

    @JsName("C")
    public fun copy(other: UObject): AssetViewerSettings

    @JsName("C")
    public fun copy(other: Any): AssetViewerSettings
  }
}

public open external class PropertyEntry {
  @JsName("Property")
  public open var property: String

  @JsName("bUseCustomSize")
  public open var useCustomSize: Boolean

  @JsName("CustomSize")
  public open var customSize: IntPoint

  @JsName("bUseConstantValue")
  public open var useConstantValue: Boolean

  @JsName("ConstantValue")
  public open var constantValue: Number

  public open fun clone(): PropertyEntry

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyEntry

    @JsName("C")
    public fun copy(other: Any): PropertyEntry
  }
}

public open external class MaterialOptions(
  outer: UObject,
) : UObject {
  @JsName("Properties")
  public open var properties: Array<PropertyEntry>

  @JsName("TextureSize")
  public open var textureSize: IntPoint

  @JsName("LODIndices")
  public open var lodIndices: Array<Number>

  @JsName("bUseMeshData")
  public open var useMeshData: Boolean

  @JsName("bUseSpecificUVIndex")
  public open var useSpecificUvIndex: Boolean

  @JsName("TextureCoordinateIndex")
  public open var textureCoordinateIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialOptions

    @JsName("C")
    public fun copy(other: UObject): MaterialOptions

    @JsName("C")
    public fun copy(other: Any): MaterialOptions
  }
}

public open external class AssetBakeOptions(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetBakeOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetBakeOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetBakeOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetBakeOptions

    @JsName("C")
    public fun copy(other: UObject): AssetBakeOptions

    @JsName("C")
    public fun copy(other: Any): AssetBakeOptions
  }
}

@JsName("EMaterialBakeMethod")
public external object MaterialBakeMethod {
  public var IndividualMaterial: String

  public var AtlasMaterial: String

  public var BinnedMaterial: String

  @JsName("EMaterialBakeMethod_MAX")
  public var Max: String
}

public open external class MaterialMergeOptions(
  outer: UObject,
) : UObject {
  @JsName("Method")
  public open var method: String

  @JsName("BlendMode")
  public open var blendMode: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialMergeOptions

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialMergeOptions

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialMergeOptions

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialMergeOptions

    @JsName("C")
    public fun copy(other: UObject): MaterialMergeOptions

    @JsName("C")
    public fun copy(other: Any): MaterialMergeOptions
  }
}

public open external class MaterialInstanceConstant(
  outer: UObject,
) : MaterialInstance {
  @JsName("ParameterStateId")
  public open var parameterStateId: Guid

  @JsName("PhysMaterialMask")
  public open var physMaterialMask: PhysicalMaterialMask

  @JsName("K2_GetVectorParameterValue")
  public open fun k2GetVectorParameterValue(parameterName: String): LinearColor

  @JsName("K2_GetTextureParameterValue")
  public open fun k2GetTextureParameterValue(parameterName: String): Texture

  @JsName("K2_GetScalarParameterValue")
  public open fun k2GetScalarParameterValue(parameterName: String): Number

  @JsName("ClearAllMaterialInstanceParameters")
  public open fun clearAllMaterialInstanceParameters(): Unit

  @JsName("GetMaterialInstanceRuntimeVirtualTextureParameterValue")
  public open fun getMaterialInstanceRuntimeVirtualTextureParameterValue(parameterName: String,
      association: String): RuntimeVirtualTexture

  @JsName("GetMaterialInstanceScalarParameterValue")
  public open fun getMaterialInstanceScalarParameterValue(parameterName: String,
      association: String): Number

  @JsName("GetMaterialInstanceStaticSwitchParameterValue")
  public open fun getMaterialInstanceStaticSwitchParameterValue(parameterName: String,
      association: String): Boolean

  @JsName("GetMaterialInstanceTextureParameterValue")
  public open fun getMaterialInstanceTextureParameterValue(parameterName: String,
      association: String): Texture

  @JsName("GetMaterialInstanceVectorParameterValue")
  public open fun getMaterialInstanceVectorParameterValue(parameterName: String,
      association: String): LinearColor

  @JsName("SetMaterialInstanceParent")
  public open fun setMaterialInstanceParent(newParent: MaterialInterface): Unit

  @JsName("SetMaterialInstanceRuntimeVirtualTextureParameterValue")
  public open fun setMaterialInstanceRuntimeVirtualTextureParameterValue(
    parameterName: String,
    value: RuntimeVirtualTexture,
    association: String,
  ): Boolean

  @JsName("SetMaterialInstanceScalarParameterValue")
  public open fun setMaterialInstanceScalarParameterValue(
    parameterName: String,
    value: Number,
    association: String,
  ): Boolean

  @JsName("SetMaterialInstanceStaticSwitchParameterValue")
  public open fun setMaterialInstanceStaticSwitchParameterValue(
    parameterName: String,
    value: Boolean,
    association: String,
  ): Boolean

  @JsName("SetMaterialInstanceTextureParameterValue")
  public open fun setMaterialInstanceTextureParameterValue(
    parameterName: String,
    value: Texture,
    association: String,
  ): Boolean

  @JsName("SetMaterialInstanceVectorParameterValue")
  public open fun setMaterialInstanceVectorParameterValue(
    parameterName: String,
    value: LinearColor,
    association: String,
  ): Boolean

  @JsName("UpdateMaterialInstance")
  public open fun updateMaterialInstance(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialInstanceConstant

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialInstanceConstant

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialInstanceConstant

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialInstanceConstant

    @JsName("C")
    public fun copy(other: UObject): MaterialInstanceConstant

    @JsName("C")
    public fun copy(other: Any): MaterialInstanceConstant

    @JsName("ClearAllMaterialInstanceParameters")
    public fun clearAllMaterialInstanceParameters(instance: MaterialInstanceConstant): Unit

    @JsName("GetMaterialInstanceRuntimeVirtualTextureParameterValue")
    public fun getMaterialInstanceRuntimeVirtualTextureParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): RuntimeVirtualTexture

    @JsName("GetMaterialInstanceScalarParameterValue")
    public fun getMaterialInstanceScalarParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): Number

    @JsName("GetMaterialInstanceStaticSwitchParameterValue")
    public fun getMaterialInstanceStaticSwitchParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): Boolean

    @JsName("GetMaterialInstanceTextureParameterValue")
    public fun getMaterialInstanceTextureParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): Texture

    @JsName("GetMaterialInstanceVectorParameterValue")
    public fun getMaterialInstanceVectorParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): LinearColor

    @JsName("SetMaterialInstanceParent")
    public fun setMaterialInstanceParent(instance: MaterialInstanceConstant,
        newParent: MaterialInterface): Unit

    @JsName("SetMaterialInstanceRuntimeVirtualTextureParameterValue")
    public fun setMaterialInstanceRuntimeVirtualTextureParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: RuntimeVirtualTexture,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceScalarParameterValue")
    public fun setMaterialInstanceScalarParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: Number,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceStaticSwitchParameterValue")
    public fun setMaterialInstanceStaticSwitchParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: Boolean,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceTextureParameterValue")
    public fun setMaterialInstanceTextureParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: Texture,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceVectorParameterValue")
    public fun setMaterialInstanceVectorParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: LinearColor,
      association: String,
    ): Boolean

    @JsName("UpdateMaterialInstance")
    public fun updateMaterialInstance(instance: MaterialInstanceConstant): Unit
  }
}

public open external class MaterialEditingLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialEditingLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialEditingLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialEditingLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialEditingLibrary

    @JsName("UpdateMaterialInstance")
    public fun updateMaterialInstance(instance: MaterialInstanceConstant): Unit

    @JsName("UpdateMaterialFunction")
    public fun updateMaterialFunction(materialFunction: MaterialFunctionInterface,
        previewMaterial: Material): Unit

    @JsName("SetMaterialUsage")
    public fun setMaterialUsage(
      material: Material,
      usage: String,
      needsRecompile: Boolean,
    ): Object28

    @JsName("SetMaterialInstanceVectorParameterValue")
    public fun setMaterialInstanceVectorParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: LinearColor,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceTextureParameterValue")
    public fun setMaterialInstanceTextureParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: Texture,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceStaticSwitchParameterValue")
    public fun setMaterialInstanceStaticSwitchParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: Boolean,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceScalarParameterValue")
    public fun setMaterialInstanceScalarParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: Number,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceRuntimeVirtualTextureParameterValue")
    public fun setMaterialInstanceRuntimeVirtualTextureParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      value: RuntimeVirtualTexture,
      association: String,
    ): Boolean

    @JsName("SetMaterialInstanceParent")
    public fun setMaterialInstanceParent(instance: MaterialInstanceConstant,
        newParent: MaterialInterface): Unit

    @JsName("RecompileMaterial")
    public fun recompileMaterial(material: Material): Unit

    @JsName("LayoutMaterialFunctionExpressions")
    public fun layoutMaterialFunctionExpressions(materialFunction: MaterialFunction): Unit

    @JsName("LayoutMaterialExpressions")
    public fun layoutMaterialExpressions(material: Material): Unit

    @JsName("HasMaterialUsage")
    public fun hasMaterialUsage(material: Material, usage: String): Boolean

    @JsName("GetVectorParameterSource")
    public fun getVectorParameterSource(
      material: MaterialInterface,
      parameterName: String,
      parameterSource: SoftObjectPath,
    ): Object34

    @JsName("GetVectorParameterNames")
    public fun getVectorParameterNames(material: MaterialInterface, parameterNames: Array<String>):
        ParameterNamesProvider

    @JsName("GetUsedTextures")
    public fun getUsedTextures(material: Material): Array<Texture>

    @JsName("GetTextureParameterSource")
    public fun getTextureParameterSource(
      material: MaterialInterface,
      parameterName: String,
      parameterSource: SoftObjectPath,
    ): Object34

    @JsName("GetTextureParameterNames")
    public fun getTextureParameterNames(material: MaterialInterface, parameterNames: Array<String>):
        ParameterNamesProvider

    @JsName("GetStatistics")
    public fun getStatistics(material: MaterialInterface): MaterialStatistics

    @JsName("GetStaticSwitchParameterSource")
    public fun getStaticSwitchParameterSource(
      material: MaterialInterface,
      parameterName: String,
      parameterSource: SoftObjectPath,
    ): Object34

    @JsName("GetStaticSwitchParameterNames")
    public fun getStaticSwitchParameterNames(material: MaterialInterface,
        parameterNames: Array<String>): ParameterNamesProvider

    @JsName("GetScalarParameterSource")
    public fun getScalarParameterSource(
      material: MaterialInterface,
      parameterName: String,
      parameterSource: SoftObjectPath,
    ): Object34

    @JsName("GetScalarParameterNames")
    public fun getScalarParameterNames(material: MaterialInterface, parameterNames: Array<String>):
        ParameterNamesProvider

    @JsName("GetNumMaterialExpressionsInFunction")
    public fun getNumMaterialExpressionsInFunction(materialFunction: MaterialFunction): Number

    @JsName("GetNumMaterialExpressions")
    public fun getNumMaterialExpressions(material: Material): Number

    @JsName("GetMaterialSelectedNodes")
    public fun getMaterialSelectedNodes(material: Material): Any

    @JsName("GetMaterialPropertyInputNode")
    public fun getMaterialPropertyInputNode(material: Material, property: String):
        MaterialExpression

    @JsName("GetMaterialInstanceVectorParameterValue")
    public fun getMaterialInstanceVectorParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): LinearColor

    @JsName("GetMaterialInstanceTextureParameterValue")
    public fun getMaterialInstanceTextureParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): Texture

    @JsName("GetMaterialInstanceStaticSwitchParameterValue")
    public fun getMaterialInstanceStaticSwitchParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): Boolean

    @JsName("GetMaterialInstanceScalarParameterValue")
    public fun getMaterialInstanceScalarParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): Number

    @JsName("GetMaterialInstanceRuntimeVirtualTextureParameterValue")
    public fun getMaterialInstanceRuntimeVirtualTextureParameterValue(
      instance: MaterialInstanceConstant,
      parameterName: String,
      association: String,
    ): RuntimeVirtualTexture

    @JsName("GetMaterialDefaultVectorParameterValue")
    public fun getMaterialDefaultVectorParameterValue(material: Material, parameterName: String):
        LinearColor

    @JsName("GetMaterialDefaultTextureParameterValue")
    public fun getMaterialDefaultTextureParameterValue(material: Material, parameterName: String):
        Texture

    @JsName("GetMaterialDefaultStaticSwitchParameterValue")
    public fun getMaterialDefaultStaticSwitchParameterValue(material: Material,
        parameterName: String): Boolean

    @JsName("GetMaterialDefaultScalarParameterValue")
    public fun getMaterialDefaultScalarParameterValue(material: Material, parameterName: String):
        Number

    @JsName("GetInputsForMaterialExpression")
    public fun getInputsForMaterialExpression(material: Material,
        materialExpression: MaterialExpression): Array<MaterialExpression>

    @JsName("GetChildInstances")
    public fun getChildInstances(parent: MaterialInterface, childInstances: Array<AssetData>):
        ChildInstancesProvider

    @JsName("DuplicateMaterialExpression")
    public fun duplicateMaterialExpression(
      material: Material,
      materialFunction: MaterialFunction,
      expression: MaterialExpression,
    ): MaterialExpression

    @JsName("DeleteMaterialExpressionInFunction")
    public fun deleteMaterialExpressionInFunction(materialFunction: MaterialFunction,
        expression: MaterialExpression): Unit

    @JsName("DeleteMaterialExpression")
    public fun deleteMaterialExpression(material: Material, expression: MaterialExpression): Unit

    @JsName("DeleteAllMaterialExpressionsInFunction")
    public fun deleteAllMaterialExpressionsInFunction(materialFunction: MaterialFunction): Unit

    @JsName("DeleteAllMaterialExpressions")
    public fun deleteAllMaterialExpressions(material: Material): Unit

    @JsName("CreateMaterialExpressionInFunction")
    public fun createMaterialExpressionInFunction(
      materialFunction: MaterialFunction,
      expressionClass: UnrealEngineClass,
      nodePosX: Number,
      nodePosY: Number,
    ): MaterialExpression

    @JsName("CreateMaterialExpression")
    public fun createMaterialExpression(
      material: Material,
      expressionClass: UnrealEngineClass,
      nodePosX: Number,
      nodePosY: Number,
    ): MaterialExpression

    @JsName("ConnectMaterialProperty")
    public fun connectMaterialProperty(
      fromExpression: MaterialExpression,
      fromOutputName: String,
      property: String,
    ): Boolean

    @JsName("ConnectMaterialExpressions")
    public fun connectMaterialExpressions(
      fromExpression: MaterialExpression,
      fromOutputName: String,
      toExpression: MaterialExpression,
      toInputName: String,
    ): Boolean

    @JsName("ClearAllMaterialInstanceParameters")
    public fun clearAllMaterialInstanceParameters(instance: MaterialInstanceConstant): Unit

    @JsName("C")
    public fun copy(other: UObject): MaterialEditingLibrary

    @JsName("C")
    public fun copy(other: Any): MaterialEditingLibrary
  }
}

public open external class MaterialEditorMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialEditorMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialEditorMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialEditorMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialEditorMenuContext

    @JsName("C")
    public fun copy(other: UObject): MaterialEditorMenuContext

    @JsName("C")
    public fun copy(other: Any): MaterialEditorMenuContext
  }
}

@JsName("EBackgroundType")
public external object BackgroundType {
  public var SolidColor: String

  public var Checkered: String

  @JsName("EBackgroundType_MAX")
  public var Max: String
}

public open external class CheckerboardSettings {
  @JsName("ColorOne")
  public open var colorOne: Color

  @JsName("ColorTwo")
  public open var colorTwo: Color

  @JsName("Size")
  public open var size: Number

  public open fun clone(): CheckerboardSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CheckerboardSettings

    @JsName("C")
    public fun copy(other: Any): CheckerboardSettings
  }
}

public open external class PreviewBackgroundSettings {
  @JsName("bShowBorder")
  public open var showBorder: Boolean

  @JsName("BorderColor")
  public open var borderColor: Color

  @JsName("BackgroundType")
  public open var backgroundType: String

  @JsName("BackgroundColor")
  public open var backgroundColor: Color

  @JsName("Checkerboard")
  public open var checkerboard: CheckerboardSettings

  public open fun clone(): PreviewBackgroundSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PreviewBackgroundSettings

    @JsName("C")
    public fun copy(other: Any): PreviewBackgroundSettings
  }
}

public open external class MaterialEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("MaliOfflineCompilerPath")
  public open var maliOfflineCompilerPath: FilePath

  @JsName("DefaultPreviewWidth")
  public open var defaultPreviewWidth: Number

  @JsName("DefaultPreviewHeight")
  public open var defaultPreviewHeight: Number

  @JsName("PreviewBackground")
  public open var previewBackground: PreviewBackgroundSettings

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MaterialEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MaterialEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MaterialEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MaterialEditorSettings

    @JsName("C")
    public fun copy(other: UObject): MaterialEditorSettings

    @JsName("C")
    public fun copy(other: Any): MaterialEditorSettings
  }
}

public open external class CurveEditorFilterBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorFilterBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorFilterBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorFilterBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorFilterBase

    @JsName("C")
    public fun copy(other: UObject): CurveEditorFilterBase

    @JsName("C")
    public fun copy(other: Any): CurveEditorFilterBase
  }
}

public open external class CurveEditorBakeFilter(
  outer: UObject,
) : CurveEditorFilterBase {
  @JsName("bUseFrameBake")
  public open var useFrameBake: Boolean

  @JsName("BakeIntervalInFrames")
  public open var bakeIntervalInFrames: FrameNumber

  @JsName("BakeIntervalInSeconds")
  public open var bakeIntervalInSeconds: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorBakeFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorBakeFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorBakeFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorBakeFilter

    @JsName("C")
    public fun copy(other: UObject): CurveEditorBakeFilter

    @JsName("C")
    public fun copy(other: Any): CurveEditorBakeFilter
  }
}

public open external class KeyPosition {
  @JsName("InputValue")
  public open var inputValue: Any

  @JsName("OutputValue")
  public open var outputValue: Any

  public open fun clone(): KeyPosition

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KeyPosition

    @JsName("C")
    public fun copy(other: Any): KeyPosition
  }
}

public open external class KeyAttributes {
  @JsName("bHasArriveTangent")
  public open var hasArriveTangent: Boolean

  @JsName("bHasLeaveTangent")
  public open var hasLeaveTangent: Boolean

  @JsName("bHasInterpMode")
  public open var hasInterpMode: Boolean

  @JsName("bHasTangentMode")
  public open var hasTangentMode: Boolean

  @JsName("bHasTangentWeightMode")
  public open var hasTangentWeightMode: Boolean

  @JsName("bHasArriveTangentWeight")
  public open var hasArriveTangentWeight: Boolean

  @JsName("bHasLeaveTangentWeight")
  public open var hasLeaveTangentWeight: Boolean

  @JsName("ArriveTangent")
  public open var arriveTangent: Number

  @JsName("LeaveTangent")
  public open var leaveTangent: Number

  @JsName("InterpMode")
  public open var interpMode: String

  @JsName("TangentMode")
  public open var tangentMode: String

  @JsName("TangentWeightMode")
  public open var tangentWeightMode: String

  @JsName("ArriveTangentWeight")
  public open var arriveTangentWeight: Number

  @JsName("LeaveTangentWeight")
  public open var leaveTangentWeight: Number

  public open fun clone(): KeyAttributes

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): KeyAttributes

    @JsName("C")
    public fun copy(other: Any): KeyAttributes
  }
}

public open external class CurveEditorCopyableCurveKeys(
  outer: UObject,
) : UObject {
  @JsName("KeyPositions")
  public open var keyPositions: Array<KeyPosition>

  @JsName("KeyAttributes")
  public open var keyAttributes: Array<KeyAttributes>

  @JsName("ShortDisplayName")
  public open var shortDisplayName: String

  @JsName("LongDisplayName")
  public open var longDisplayName: String

  @JsName("IntentionName")
  public open var intentionName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorCopyableCurveKeys

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorCopyableCurveKeys

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorCopyableCurveKeys

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorCopyableCurveKeys

    @JsName("C")
    public fun copy(other: UObject): CurveEditorCopyableCurveKeys

    @JsName("C")
    public fun copy(other: Any): CurveEditorCopyableCurveKeys
  }
}

public open external class CurveEditorCopyBuffer(
  outer: UObject,
) : UObject {
  @JsName("Curves")
  public open var curves: Array<CurveEditorCopyableCurveKeys>

  @JsName("TimeOffset")
  public open var timeOffset: Any

  @JsName("bAbsolutePosition")
  public open var absolutePosition: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorCopyBuffer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorCopyBuffer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorCopyBuffer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorCopyBuffer

    @JsName("C")
    public fun copy(other: UObject): CurveEditorCopyBuffer

    @JsName("C")
    public fun copy(other: Any): CurveEditorCopyBuffer
  }
}

public open external class CurveEditorEulerFilter(
  outer: UObject,
) : CurveEditorFilterBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorEulerFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorEulerFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorEulerFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorEulerFilter

    @JsName("C")
    public fun copy(other: UObject): CurveEditorEulerFilter

    @JsName("C")
    public fun copy(other: Any): CurveEditorEulerFilter
  }
}

public open external class CurveEditorKeyProxy(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorKeyProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorKeyProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorKeyProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorKeyProxy

    @JsName("C")
    public fun copy(other: UObject): CurveEditorKeyProxy

    @JsName("C")
    public fun copy(other: Any): CurveEditorKeyProxy
  }
}

public open external class CurveEditorReduceFilter(
  outer: UObject,
) : CurveEditorFilterBase {
  @JsName("Tolerance")
  public open var tolerance: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorReduceFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorReduceFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorReduceFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorReduceFilter

    @JsName("C")
    public fun copy(other: UObject): CurveEditorReduceFilter

    @JsName("C")
    public fun copy(other: Any): CurveEditorReduceFilter
  }
}

@JsName("ECurveEditorTangentVisibility")
public external object CurveEditorTangentVisibility {
  public var AllTangents: String

  public var SelectedKeys: String

  public var NoTangents: String

  @JsName("ECurveEditorTangentVisibility_MAX")
  public var Max: String
}

@JsName("ECurveEditorZoomPosition")
public external object CurveEditorZoomPosition {
  public var CurrentTime: String

  public var MousePosition: String

  @JsName("ECurveEditorZoomPosition_MAX")
  public var Max: String
}

public open external class CustomColorForChannel {
  @JsName("UObject")
  public open var uObject: Class

  @JsName("PropertyName")
  public open var propertyName: String

  @JsName("Color")
  public open var color: LinearColor

  public open fun clone(): CustomColorForChannel

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomColorForChannel

    @JsName("C")
    public fun copy(other: Any): CustomColorForChannel
  }
}

public open external class CustomColorForSpaceSwitch {
  @JsName("ControlName")
  public open var controlName: String

  @JsName("Color")
  public open var color: LinearColor

  public open fun clone(): CustomColorForSpaceSwitch

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CustomColorForSpaceSwitch

    @JsName("C")
    public fun copy(other: Any): CustomColorForSpaceSwitch
  }
}

public open external class CurveEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("bAutoFrameCurveEditor")
  public open var autoFrameCurveEditor: Boolean

  @JsName("FrameInputPadding")
  public open var frameInputPadding: Number

  @JsName("FrameOutputPadding")
  public open var frameOutputPadding: Number

  @JsName("bShowCurveEditorCurveToolTips")
  public open var showCurveEditorCurveToolTips: Boolean

  @JsName("TangentVisibility")
  public open var tangentVisibility: String

  @JsName("ZoomPosition")
  public open var zoomPosition: String

  @JsName("CustomColors")
  public open var customColors: Array<CustomColorForChannel>

  @JsName("ParentSpaceCustomColor")
  public open var parentSpaceCustomColor: LinearColor

  @JsName("WorldSpaceCustomColor")
  public open var worldSpaceCustomColor: LinearColor

  @JsName("ControlSpaceCustomColors")
  public open var controlSpaceCustomColors: Array<CustomColorForSpaceSwitch>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CurveEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CurveEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CurveEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CurveEditorSettings

    @JsName("C")
    public fun copy(other: UObject): CurveEditorSettings

    @JsName("C")
    public fun copy(other: Any): CurveEditorSettings
  }
}

public open external class RichCurveKeyProxy(
  outer: UObject,
) : UObject {
  @JsName("Value")
  public open var value: RichCurveKey

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RichCurveKeyProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RichCurveKeyProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RichCurveKeyProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RichCurveKeyProxy

    @JsName("C")
    public fun copy(other: UObject): RichCurveKeyProxy

    @JsName("C")
    public fun copy(other: Any): RichCurveKeyProxy
  }
}

@JsName("CameraRig_Crane")
public open external class CameraRigCrane(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("CranePitch")
  public open var cranePitch: Number

  @JsName("CraneYaw")
  public open var craneYaw: Number

  @JsName("CraneArmLength")
  public open var craneArmLength: Number

  @JsName("bLockMountPitch")
  public open var lockMountPitch: Boolean

  @JsName("bLockMountYaw")
  public open var lockMountYaw: Boolean

  @JsName("TransformComponent")
  public open var transformComponent: SceneComponent

  @JsName("CraneYawControl")
  public open var craneYawControl: SceneComponent

  @JsName("CranePitchControl")
  public open var cranePitchControl: SceneComponent

  @JsName("CraneCameraMount")
  public open var craneCameraMount: SceneComponent

  @JsName("PreviewMesh_CraneArm")
  public open var previewMeshCraneArm: StaticMeshComponent

  @JsName("PreviewMesh_CraneBase")
  public open var previewMeshCraneBase: StaticMeshComponent

  @JsName("PreviewMesh_CraneMount")
  public open var previewMeshCraneMount: StaticMeshComponent

  @JsName("PreviewMesh_CraneCounterWeight")
  public open var previewMeshCraneCounterWeight: StaticMeshComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraRigCrane

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraRigCrane

    @JsName("C")
    public fun copy(other: UObject): CameraRigCrane

    @JsName("C")
    public fun copy(other: Any): CameraRigCrane
  }
}

@JsName("CameraRig_Rail")
public open external class CameraRigRail(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("CurrentPositionOnRail")
  public open var currentPositionOnRail: Number

  @JsName("bLockOrientationToRail")
  public open var lockOrientationToRail: Boolean

  @JsName("bShowRailVisualization")
  public open var showRailVisualization: Boolean

  @JsName("PreviewMeshScale")
  public open var previewMeshScale: Number

  @JsName("TransformComponent")
  public open var transformComponent: SceneComponent

  @JsName("RailSplineComponent")
  public open var railSplineComponent: SplineComponent

  @JsName("RailCameraMount")
  public open var railCameraMount: SceneComponent

  @JsName("PreviewMesh_Rail")
  public open var previewMeshRail: SplineMeshComponent

  @JsName("PreviewRailMeshSegments")
  public open var previewRailMeshSegments: Array<SplineMeshComponent>

  @JsName("PreviewRailStaticMesh")
  public open var previewRailStaticMesh: StaticMesh

  @JsName("PreviewMesh_Mount")
  public open var previewMeshMount: StaticMeshComponent

  @JsName("GetRailSplineComponent")
  public open fun getRailSplineComponent(): SplineComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CameraRigRail

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CameraRigRail

    @JsName("C")
    public fun copy(other: UObject): CameraRigRail

    @JsName("C")
    public fun copy(other: Any): CameraRigRail
  }
}

public open external class CameraLookatTrackingSettings {
  @JsName("bEnableLookAtTracking")
  public open var enableLookAtTracking: Boolean

  @JsName("bDrawDebugLookAtTrackingPosition")
  public open var drawDebugLookAtTrackingPosition: Boolean

  @JsName("LookAtTrackingInterpSpeed")
  public open var lookAtTrackingInterpSpeed: Number

  @JsName("ActorToTrack")
  public open var actorToTrack: Actor

  @JsName("RelativeOffset")
  public open var relativeOffset: Vector

  @JsName("bAllowRoll")
  public open var allowRoll: Boolean

  public open fun clone(): CameraLookatTrackingSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraLookatTrackingSettings

    @JsName("C")
    public fun copy(other: Any): CameraLookatTrackingSettings
  }
}

public open external class NamedFilmbackPreset {
  @JsName("Name")
  public open var name: String

  @JsName("FilmbackSettings")
  public open var filmbackSettings: CameraFilmbackSettings

  public open fun clone(): NamedFilmbackPreset

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NamedFilmbackPreset

    @JsName("C")
    public fun copy(other: Any): NamedFilmbackPreset
  }
}

public open external class NamedLensPreset {
  @JsName("Name")
  public open var name: String

  @JsName("LensSettings")
  public open var lensSettings: CameraLensSettings

  public open fun clone(): NamedLensPreset

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NamedLensPreset

    @JsName("C")
    public fun copy(other: Any): NamedLensPreset
  }
}

public open external class CineCameraComponent(
  outer: UObject,
) : CameraComponent {
  @JsName("FilmbackSettings")
  public open var filmbackSettings: CameraFilmbackSettings

  @JsName("Filmback")
  public open var filmback: CameraFilmbackSettings

  @JsName("LensSettings")
  public open var lensSettings: CameraLensSettings

  @JsName("FocusSettings")
  public open var focusSettings: CameraFocusSettings

  @JsName("CurrentFocalLength")
  public open var currentFocalLength: Number

  @JsName("CurrentAperture")
  public open var currentAperture: Number

  @JsName("CurrentFocusDistance")
  public open var currentFocusDistance: Number

  @JsName("CurrentHorizontalFOV")
  public open var currentHorizontalFov: Number

  @JsName("FocusPlaneVisualizationMesh")
  public open var focusPlaneVisualizationMesh: StaticMesh

  @JsName("FocusPlaneVisualizationMaterial")
  public open var focusPlaneVisualizationMaterial: Material

  @JsName("DebugFocusPlaneComponent")
  public open var debugFocusPlaneComponent: StaticMeshComponent

  @JsName("DebugFocusPlaneMID")
  public open var debugFocusPlaneMid: MaterialInstanceDynamic

  @JsName("FilmbackPresets")
  public open var filmbackPresets: Array<NamedFilmbackPreset>

  @JsName("LensPresets")
  public open var lensPresets: Array<NamedLensPreset>

  @JsName("DefaultFilmbackPresetName")
  public open var defaultFilmbackPresetName: String

  @JsName("DefaultFilmbackPreset")
  public open var defaultFilmbackPreset: String

  @JsName("DefaultLensPresetName")
  public open var defaultLensPresetName: String

  @JsName("DefaultLensFocalLength")
  public open var defaultLensFocalLength: Number

  @JsName("DefaultLensFStop")
  public open var defaultLensFStop: Number

  @JsName("SetLensPresetByName")
  public open fun setLensPresetByName(inPresetName: String): Unit

  @JsName("SetFilmbackPresetByName")
  public open fun setFilmbackPresetByName(inPresetName: String): Unit

  @JsName("SetCurrentFocalLength")
  public open fun setCurrentFocalLength(inFocalLength: Number): Unit

  @JsName("GetVerticalFieldOfView")
  public open fun getVerticalFieldOfView(): Number

  @JsName("GetLensPresetName")
  public open fun getLensPresetName(): String

  @JsName("GetHorizontalFieldOfView")
  public open fun getHorizontalFieldOfView(): Number

  @JsName("GetFilmbackPresetName")
  public open fun getFilmbackPresetName(): String

  @JsName("GetDefaultFilmbackPresetName")
  public open fun getDefaultFilmbackPresetName(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CineCameraComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CineCameraComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CineCameraComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CineCameraComponent

    @JsName("GetLensPresetsCopy")
    public fun getLensPresetsCopy(): Array<NamedLensPreset>

    @JsName("GetFilmbackPresetsCopy")
    public fun getFilmbackPresetsCopy(): Array<NamedFilmbackPreset>

    @JsName("C")
    public fun copy(other: UObject): CineCameraComponent

    @JsName("C")
    public fun copy(other: Any): CineCameraComponent
  }
}

public open external class CineCameraActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : CameraActor {
  @JsName("LookatTrackingSettings")
  public open var lookatTrackingSettings: CameraLookatTrackingSettings

  @JsName("GetCineCameraComponent")
  public open fun getCineCameraComponent(): CineCameraComponent

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CineCameraActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CineCameraActor

    @JsName("C")
    public fun copy(other: UObject): CineCameraActor

    @JsName("C")
    public fun copy(other: Any): CineCameraActor
  }
}

@JsName("T$642")
public external interface Object642 {
  @JsName("bOutSelectionChanged")
  public var outSelectionChanged: Boolean

  @JsName("bOutActorModified")
  public var outActorModified: Boolean

  @JsName("$")
  public var value: Boolean
}

@JsName("T$643")
public external interface InOutActorsProvider {
  @JsName("InOutActors")
  public var inOutActors: Array<Actor>
}

public open external class DataLayerEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("UpdateAllViewVisibility")
  public open fun updateAllViewVisibility(dataLayerThatChanged: DataLayer): Unit

  @JsName("UpdateAllActorsVisibility")
  public open fun updateAllActorsVisibility(notifySelectionChange: Boolean,
      redrawViewports: Boolean): Boolean

  @JsName("UpdateActorVisibility")
  public open fun updateActorVisibility(
    actor: Actor,
    outSelectionChanged: Boolean,
    outActorModified: Boolean,
    notifySelectionChange: Boolean,
    redrawViewports: Boolean,
  ): Object642

  @JsName("UpdateActorAllViewsVisibility")
  public open fun updateActorAllViewsVisibility(actor: Actor): Unit

  @JsName("ToggleDataLayerVisibility")
  public open fun toggleDataLayerVisibility(dataLayer: DataLayer): Unit

  @JsName("ToggleDataLayersVisibility")
  public open fun toggleDataLayersVisibility(dataLayers: Array<DataLayer>): Unit

  @JsName("ToggleDataLayersIsLoadedInEditor")
  public open fun toggleDataLayersIsLoadedInEditor(dataLayers: Array<DataLayer>,
      isFromUserChange: Boolean): Boolean

  @JsName("ToggleDataLayersIsDynamicallyLoadedInEditor")
  public open fun toggleDataLayersIsDynamicallyLoadedInEditor(dataLayers: Array<DataLayer>,
      isFromUserChange: Boolean): Boolean

  @JsName("ToggleDataLayerIsLoadedInEditor")
  public open fun toggleDataLayerIsLoadedInEditor(dataLayer: DataLayer, isFromUserChange: Boolean):
      Boolean

  @JsName("ToggleDataLayerIsDynamicallyLoadedInEditor")
  public open fun toggleDataLayerIsDynamicallyLoadedInEditor(dataLayer: DataLayer,
      isFromUserChange: Boolean): Boolean

  @JsName("SetParentDataLayer")
  public open fun setParentDataLayer(dataLayer: DataLayer, parentDataLayer: DataLayer): Boolean

  @JsName("SetDataLayerVisibility")
  public open fun setDataLayerVisibility(dataLayer: DataLayer, isVisible: Boolean): Unit

  @JsName("SetDataLayersVisibility")
  public open fun setDataLayersVisibility(dataLayers: Array<DataLayer>, isVisible: Boolean): Unit

  @JsName("SetDataLayersIsLoadedInEditor")
  public open fun setDataLayersIsLoadedInEditor(
    dataLayers: Array<DataLayer>,
    isLoadedInEditor: Boolean,
    isFromUserChange: Boolean,
  ): Boolean

  @JsName("SetDataLayersIsDynamicallyLoadedInEditor")
  public open fun setDataLayersIsDynamicallyLoadedInEditor(
    dataLayers: Array<DataLayer>,
    isLoadedInEditor: Boolean,
    isFromUserChange: Boolean,
  ): Boolean

  @JsName("SetDataLayerIsLoadedInEditor")
  public open fun setDataLayerIsLoadedInEditor(
    dataLayer: DataLayer,
    isLoadedInEditor: Boolean,
    isFromUserChange: Boolean,
  ): Boolean

  @JsName("SetDataLayerIsDynamicallyLoadedInEditor")
  public open fun setDataLayerIsDynamicallyLoadedInEditor(
    dataLayer: DataLayer,
    isLoadedInEditor: Boolean,
    isFromUserChange: Boolean,
  ): Boolean

  @JsName("SelectActorsInDataLayers")
  public open fun selectActorsInDataLayers(
    dataLayers: Array<DataLayer>,
    select: Boolean,
    notify: Boolean,
    selectEvenIfHidden: Boolean,
  ): Boolean

  @JsName("SelectActorsInDataLayer")
  public open fun selectActorsInDataLayer(
    dataLayer: DataLayer,
    select: Boolean,
    notify: Boolean,
    selectEvenIfHidden: Boolean,
  ): Boolean

  @JsName("RenameDataLayer")
  public open fun renameDataLayer(dataLayer: DataLayer, newDataLayerLabel: String): Boolean

  @JsName("RemoveSelectedActorsFromDataLayers")
  public open fun removeSelectedActorsFromDataLayers(dataLayers: Array<DataLayer>): Boolean

  @JsName("RemoveSelectedActorsFromDataLayer")
  public open fun removeSelectedActorsFromDataLayer(dataLayer: DataLayer): Boolean

  @JsName("RemoveActorsFromDataLayers")
  public open fun removeActorsFromDataLayers(actors: Array<Actor>, dataLayers: Array<DataLayer>):
      Boolean

  @JsName("RemoveActorsFromDataLayer")
  public open fun removeActorsFromDataLayer(actors: Array<Actor>, dataLayer: DataLayer): Boolean

  @JsName("RemoveActorsFromAllDataLayers")
  public open fun removeActorsFromAllDataLayers(actors: Array<Actor>): Boolean

  @JsName("RemoveActorFromDataLayers")
  public open fun removeActorFromDataLayers(actor: Actor, dataLayers: Array<DataLayer>): Boolean

  @JsName("RemoveActorFromDataLayer")
  public open fun removeActorFromDataLayer(actor: Actor, dataLayerToRemove: DataLayer): Boolean

  @JsName("RemoveActorFromAllDataLayers")
  public open fun removeActorFromAllDataLayers(actor: Actor): Boolean

  @JsName("MakeAllDataLayersVisible")
  public open fun makeAllDataLayersVisible(): Unit

  @JsName("IsActorValidForDataLayer")
  public open fun isActorValidForDataLayer(actor: Actor): Boolean

  @JsName("GetDataLayerFromLabel")
  public open fun getDataLayerFromLabel(dataLayerLabel: String): DataLayer

  @JsName("GetDataLayer")
  public open fun getDataLayer(actorDataLayer: ActorDataLayer): DataLayer

  @JsName("GetActorsFromDataLayers")
  public open fun getActorsFromDataLayers(dataLayers: Array<DataLayer>): Array<Actor>

  @JsName("GetActorsFromDataLayer")
  public open fun getActorsFromDataLayer(dataLayer: DataLayer): Array<Actor>

  @JsName("DeleteDataLayers")
  public open fun deleteDataLayers(dataLayersToDelete: Array<DataLayer>): Unit

  @JsName("DeleteDataLayer")
  public open fun deleteDataLayer(dataLayerToDelete: DataLayer): Unit

  @JsName("CreateDataLayer")
  public open fun createDataLayer(): DataLayer

  @JsName("AppendActorsFromDataLayers")
  public open fun appendActorsFromDataLayers(dataLayers: Array<DataLayer>,
      inOutActors: Array<Actor>): InOutActorsProvider

  @JsName("AppendActorsFromDataLayer")
  public open fun appendActorsFromDataLayer(dataLayer: DataLayer, inOutActors: Array<Actor>):
      InOutActorsProvider

  @JsName("AddSelectedActorsToDataLayers")
  public open fun addSelectedActorsToDataLayers(dataLayers: Array<DataLayer>): Boolean

  @JsName("AddSelectedActorsToDataLayer")
  public open fun addSelectedActorsToDataLayer(dataLayer: DataLayer): Boolean

  @JsName("AddActorToDataLayers")
  public open fun addActorToDataLayers(actor: Actor, dataLayers: Array<DataLayer>): Boolean

  @JsName("AddActorToDataLayer")
  public open fun addActorToDataLayer(actor: Actor, dataLayer: DataLayer): Boolean

  @JsName("AddActorsToDataLayers")
  public open fun addActorsToDataLayers(actors: Array<Actor>, dataLayers: Array<DataLayer>): Boolean

  @JsName("AddActorsToDataLayer")
  public open fun addActorsToDataLayer(actors: Array<Actor>, dataLayer: DataLayer): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DataLayerEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DataLayerEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DataLayerEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DataLayerEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): DataLayerEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): DataLayerEditorSubsystem
  }
}

@JsName("EHardwareClass")
public external object HardwareClass {
  public var Unspecified: String

  public var Desktop: String

  public var Mobile: String

  @JsName("EHardwareClass_MAX")
  public var Max: String
}

@JsName("EGraphicsPreset")
public external object GraphicsPreset {
  public var Unspecified: String

  public var Maximum: String

  public var Scalable: String

  @JsName("EGraphicsPreset_MAX")
  public var Max: String
}

public open external class HardwareTargetingSettings(
  outer: UObject,
) : UObject {
  @JsName("TargetedHardwareClass")
  public open var targetedHardwareClass: String

  @JsName("AppliedTargetedHardwareClass")
  public open var appliedTargetedHardwareClass: String

  @JsName("DefaultGraphicsPerformance")
  public open var defaultGraphicsPerformance: String

  @JsName("AppliedDefaultGraphicsPerformance")
  public open var appliedDefaultGraphicsPerformance: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HardwareTargetingSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HardwareTargetingSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HardwareTargetingSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HardwareTargetingSettings

    @JsName("C")
    public fun copy(other: UObject): HardwareTargetingSettings

    @JsName("C")
    public fun copy(other: Any): HardwareTargetingSettings
  }
}

public open external class ClassTemplate(
  outer: UObject,
) : UObject {
  @JsName("GeneratedBaseClass")
  public open var generatedBaseClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClassTemplate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClassTemplate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClassTemplate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClassTemplate

    @JsName("C")
    public fun copy(other: UObject): ClassTemplate

    @JsName("C")
    public fun copy(other: Any): ClassTemplate
  }
}

public open external class PluginClassTemplate(
  outer: UObject,
) : ClassTemplate {
  @JsName("PluginName")
  public open var pluginName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PluginClassTemplate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PluginClassTemplate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PluginClassTemplate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PluginClassTemplate

    @JsName("C")
    public fun copy(other: UObject): PluginClassTemplate

    @JsName("C")
    public fun copy(other: Any): PluginClassTemplate
  }
}

public open external class ClassTemplateEditorSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClassTemplateEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClassTemplateEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClassTemplateEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClassTemplateEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): ClassTemplateEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): ClassTemplateEditorSubsystem
  }
}

public open external class LocalizedTemplateString {
  @JsName("Language")
  public open var language: String

  public open var text: String

  public open fun clone(): LocalizedTemplateString

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): LocalizedTemplateString

    @JsName("C")
    public fun copy(other: Any): LocalizedTemplateString
  }
}

public open external class TemplateFolderRename {
  @JsName("From")
  public open var from: String

  @JsName("To")
  public open var to: String

  public open fun clone(): TemplateFolderRename

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TemplateFolderRename

    @JsName("C")
    public fun copy(other: Any): TemplateFolderRename
  }
}

public open external class TemplateReplacement {
  @JsName("Extensions")
  public open var extensions: Array<String>

  @JsName("From")
  public open var from: String

  @JsName("To")
  public open var to: String

  @JsName("bCaseSensitive")
  public open var caseSensitive: Boolean

  public open fun clone(): TemplateReplacement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TemplateReplacement

    @JsName("C")
    public fun copy(other: Any): TemplateReplacement
  }
}

@JsName("ETemplateSetting")
public external object TemplateSetting {
  public var Languages: String

  public var HardwareTarget: String

  public var GraphicsPreset: String

  public var StarterContent: String

  public var XR: String

  public var Raytracing: String

  public var All: String

  @JsName("ETemplateSetting_MAX")
  public var Max: String
}

@JsName("EFeaturePackDetailLevel")
public external object FeaturePackDetailLevel {
  public var Standard: String

  public var High: String

  @JsName("EFeaturePackDetailLevel_MAX")
  public var Max: String
}

public open external class FeaturePackLevelSet {
  @JsName("DetailLevels")
  public open var detailLevels: Array<String>

  @JsName("MountName")
  public open var mountName: String

  public open fun clone(): FeaturePackLevelSet

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FeaturePackLevelSet

    @JsName("C")
    public fun copy(other: Any): FeaturePackLevelSet
  }
}

public open external class TemplateProjectDefs(
  outer: UObject,
) : UObject {
  @JsName("LocalizedDisplayNames")
  public open var localizedDisplayNames: Array<LocalizedTemplateString>

  @JsName("LocalizedDescriptions")
  public open var localizedDescriptions: Array<LocalizedTemplateString>

  @JsName("FoldersToIgnore")
  public open var foldersToIgnore: Array<String>

  @JsName("FilesToIgnore")
  public open var filesToIgnore: Array<String>

  @JsName("FolderRenames")
  public open var folderRenames: Array<TemplateFolderRename>

  @JsName("FilenameReplacements")
  public open var filenameReplacements: Array<TemplateReplacement>

  @JsName("ReplacementsInFiles")
  public open var replacementsInFiles: Array<TemplateReplacement>

  @JsName("SortKey")
  public open var sortKey: String

  @JsName("Categories")
  public open var categories: Array<String>

  @JsName("ClassTypes")
  public open var classTypes: String

  @JsName("AssetTypes")
  public open var assetTypes: String

  @JsName("bAllowProjectCreation")
  public open var allowProjectCreation: Boolean

  @JsName("bIsEnterprise")
  public open var isEnterprise: Boolean

  @JsName("bIsBlank")
  public open var isBlank: Boolean

  @JsName("bThumbnailAsIcon")
  public open var thumbnailAsIcon: Boolean

  @JsName("HiddenSettings")
  public open var hiddenSettings: Array<String>

  @JsName("PacksToInclude")
  public open var packsToInclude: Array<String>

  @JsName("EditDetailLevelPreference")
  public open var editDetailLevelPreference: String

  @JsName("SharedContentPacks")
  public open var sharedContentPacks: Array<FeaturePackLevelSet>

  @JsName("StarterContent")
  public open var starterContent: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TemplateProjectDefs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TemplateProjectDefs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TemplateProjectDefs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TemplateProjectDefs

    @JsName("C")
    public fun copy(other: UObject): TemplateProjectDefs

    @JsName("C")
    public fun copy(other: Any): TemplateProjectDefs
  }
}

public open external class DefaultTemplateProjectDefs(
  outer: UObject,
) : TemplateProjectDefs {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DefaultTemplateProjectDefs

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DefaultTemplateProjectDefs

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DefaultTemplateProjectDefs

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DefaultTemplateProjectDefs

    @JsName("C")
    public fun copy(other: UObject): DefaultTemplateProjectDefs

    @JsName("C")
    public fun copy(other: Any): DefaultTemplateProjectDefs
  }
}

public open external class TemplateCategoryDef {
  @JsName("Key")
  public open var key: String

  @JsName("LocalizedDisplayNames")
  public open var localizedDisplayNames: Array<LocalizedTemplateString>

  @JsName("LocalizedDescriptions")
  public open var localizedDescriptions: Array<LocalizedTemplateString>

  @JsName("Icon")
  public open var icon: String

  @JsName("IsMajorCategory")
  public open var isMajorCategory: Boolean

  public open fun clone(): TemplateCategoryDef

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TemplateCategoryDef

    @JsName("C")
    public fun copy(other: Any): TemplateCategoryDef
  }
}

public open external class TemplateCategories(
  outer: UObject,
) : UObject {
  @JsName("Categories")
  public open var categories: Array<TemplateCategoryDef>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TemplateCategories

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TemplateCategories

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TemplateCategories

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TemplateCategories

    @JsName("C")
    public fun copy(other: UObject): TemplateCategories

    @JsName("C")
    public fun copy(other: Any): TemplateCategories
  }
}

@JsName("T$645")
public external interface OutDataProvider {
  @JsName("OutData")
  public var outData: SubobjectData
}

public open external class SubobjectDataHandle {
  public open fun clone(): SubobjectDataHandle

  @JsName("GetData")
  public open fun getData(outData: SubobjectData): OutDataProvider

  @JsName("IsHandleValid")
  public open fun isHandleValid(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubobjectDataHandle

    @JsName("C")
    public fun copy(other: Any): SubobjectDataHandle

    @JsName("GetData")
    public fun getData(dataHandle: SubobjectDataHandle, outData: SubobjectData): OutDataProvider

    @JsName("IsHandleValid")
    public fun isHandleValid(dataHandle: SubobjectDataHandle): Boolean
  }
}

@JsName("T$646")
public external interface OutHandleProvider {
  @JsName("OutHandle")
  public var outHandle: SubobjectDataHandle
}

public open external class SubobjectData {
  @JsName("WeakObjectPtr")
  public open var weakObjectPtr: Any

  @JsName("Handle")
  public open var handle: SubobjectDataHandle

  @JsName("ParentObjectHandle")
  public open var parentObjectHandle: SubobjectDataHandle

  @JsName("ChildrenHandles")
  public open var childrenHandles: Array<SubobjectDataHandle>

  public open fun clone(): SubobjectData

  @JsName("CanCopy")
  public open fun canCopy(): Boolean

  @JsName("CanDelete")
  public open fun canDelete(): Boolean

  @JsName("CanDuplicate")
  public open fun canDuplicate(): Boolean

  @JsName("CanEdit")
  public open fun canEdit(): Boolean

  @JsName("CanRename")
  public open fun canRename(): Boolean

  @JsName("CanReparent")
  public open fun canReparent(): Boolean

  @JsName("GetHandle")
  public open fun getHandle(outHandle: SubobjectDataHandle): OutHandleProvider

  @JsName("GetObject")
  public open fun getObject(evenIfPendingKill: Boolean): UObject

  @JsName("GetVariableName")
  public open fun getVariableName(): String

  @JsName("IsActor")
  public open fun isActor(): Boolean

  @JsName("IsAttachedTo")
  public open fun isAttachedTo(inHandle: SubobjectDataHandle): Boolean

  @JsName("IsChildActor")
  public open fun isChildActor(): Boolean

  @JsName("IsComponent")
  public open fun isComponent(): Boolean

  @JsName("IsDefaultSceneRoot")
  public open fun isDefaultSceneRoot(): Boolean

  @JsName("IsInheritedComponent")
  public open fun isInheritedComponent(): Boolean

  @JsName("IsInstancedActor")
  public open fun isInstancedActor(): Boolean

  @JsName("IsInstancedComponent")
  public open fun isInstancedComponent(): Boolean

  @JsName("IsNativeComponent")
  public open fun isNativeComponent(): Boolean

  @JsName("IsRootActor")
  public open fun isRootActor(): Boolean

  @JsName("IsRootComponent")
  public open fun isRootComponent(): Boolean

  @JsName("IsSceneComponent")
  public open fun isSceneComponent(): Boolean

  @JsName("IsValid")
  public open fun isValid(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SubobjectData

    @JsName("C")
    public fun copy(other: Any): SubobjectData

    @JsName("CanCopy")
    public fun canCopy(data: SubobjectData): Boolean

    @JsName("CanDelete")
    public fun canDelete(data: SubobjectData): Boolean

    @JsName("CanDuplicate")
    public fun canDuplicate(data: SubobjectData): Boolean

    @JsName("CanEdit")
    public fun canEdit(data: SubobjectData): Boolean

    @JsName("CanRename")
    public fun canRename(data: SubobjectData): Boolean

    @JsName("CanReparent")
    public fun canReparent(data: SubobjectData): Boolean

    @JsName("GetHandle")
    public fun getHandle(data: SubobjectData, outHandle: SubobjectDataHandle): OutHandleProvider

    @JsName("GetObject")
    public fun getObject(data: SubobjectData, evenIfPendingKill: Boolean): UObject

    @JsName("GetVariableName")
    public fun getVariableName(data: SubobjectData): String

    @JsName("IsActor")
    public fun isActor(data: SubobjectData): Boolean

    @JsName("IsAttachedTo")
    public fun isAttachedTo(data: SubobjectData, inHandle: SubobjectDataHandle): Boolean

    @JsName("IsChildActor")
    public fun isChildActor(data: SubobjectData): Boolean

    @JsName("IsComponent")
    public fun isComponent(data: SubobjectData): Boolean

    @JsName("IsDefaultSceneRoot")
    public fun isDefaultSceneRoot(data: SubobjectData): Boolean

    @JsName("IsInheritedComponent")
    public fun isInheritedComponent(data: SubobjectData): Boolean

    @JsName("IsInstancedActor")
    public fun isInstancedActor(data: SubobjectData): Boolean

    @JsName("IsInstancedComponent")
    public fun isInstancedComponent(data: SubobjectData): Boolean

    @JsName("IsNativeComponent")
    public fun isNativeComponent(data: SubobjectData): Boolean

    @JsName("IsRootActor")
    public fun isRootActor(data: SubobjectData): Boolean

    @JsName("IsRootComponent")
    public fun isRootComponent(data: SubobjectData): Boolean

    @JsName("IsSceneComponent")
    public fun isSceneComponent(data: SubobjectData): Boolean

    @JsName("IsValid")
    public fun isValid(data: SubobjectData): Boolean
  }
}

public open external class SubobjectDataBlueprintFunctionLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  @JsName("GetDisplayName")
  public open fun getDisplayName(data: SubobjectData): String

  @JsName("GetBlueprint")
  public open fun getBlueprint(data: SubobjectData): Blueprint

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubobjectDataBlueprintFunctionLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubobjectDataBlueprintFunctionLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubobjectDataBlueprintFunctionLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubobjectDataBlueprintFunctionLibrary

    @JsName("IsValid")
    public fun isValid(data: SubobjectData): Boolean

    @JsName("IsSceneComponent")
    public fun isSceneComponent(data: SubobjectData): Boolean

    @JsName("IsRootComponent")
    public fun isRootComponent(data: SubobjectData): Boolean

    @JsName("IsRootActor")
    public fun isRootActor(data: SubobjectData): Boolean

    @JsName("IsNativeComponent")
    public fun isNativeComponent(data: SubobjectData): Boolean

    @JsName("IsInstancedComponent")
    public fun isInstancedComponent(data: SubobjectData): Boolean

    @JsName("IsInstancedActor")
    public fun isInstancedActor(data: SubobjectData): Boolean

    @JsName("IsInheritedComponent")
    public fun isInheritedComponent(data: SubobjectData): Boolean

    @JsName("IsHandleValid")
    public fun isHandleValid(dataHandle: SubobjectDataHandle): Boolean

    @JsName("IsDefaultSceneRoot")
    public fun isDefaultSceneRoot(data: SubobjectData): Boolean

    @JsName("IsComponent")
    public fun isComponent(data: SubobjectData): Boolean

    @JsName("IsChildActor")
    public fun isChildActor(data: SubobjectData): Boolean

    @JsName("IsAttachedTo")
    public fun isAttachedTo(data: SubobjectData, inHandle: SubobjectDataHandle): Boolean

    @JsName("IsActor")
    public fun isActor(data: SubobjectData): Boolean

    @JsName("GetVariableName")
    public fun getVariableName(data: SubobjectData): String

    @JsName("GetObject")
    public fun getObject(data: SubobjectData, evenIfPendingKill: Boolean): UObject

    @JsName("GetHandle")
    public fun getHandle(data: SubobjectData, outHandle: SubobjectDataHandle): OutHandleProvider

    @JsName("GetData")
    public fun getData(dataHandle: SubobjectDataHandle, outData: SubobjectData): OutDataProvider

    @JsName("CanReparent")
    public fun canReparent(data: SubobjectData): Boolean

    @JsName("CanRename")
    public fun canRename(data: SubobjectData): Boolean

    @JsName("CanEdit")
    public fun canEdit(data: SubobjectData): Boolean

    @JsName("CanDuplicate")
    public fun canDuplicate(data: SubobjectData): Boolean

    @JsName("CanDelete")
    public fun canDelete(data: SubobjectData): Boolean

    @JsName("CanCopy")
    public fun canCopy(data: SubobjectData): Boolean

    @JsName("C")
    public fun copy(other: UObject): SubobjectDataBlueprintFunctionLibrary

    @JsName("C")
    public fun copy(other: Any): SubobjectDataBlueprintFunctionLibrary
  }
}

public open external class ReparentSubobjectParams {
  @JsName("NewParentHandle")
  public open var newParentHandle: SubobjectDataHandle

  @JsName("BlueprintContext")
  public open var blueprintContext: Blueprint

  @JsName("ActorPreviewContext")
  public open var actorPreviewContext: Actor

  public open fun clone(): ReparentSubobjectParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ReparentSubobjectParams

    @JsName("C")
    public fun copy(other: Any): ReparentSubobjectParams
  }
}

public open external class AddNewSubobjectParams {
  @JsName("ParentHandle")
  public open var parentHandle: SubobjectDataHandle

  @JsName("NewClass")
  public open var newClass: UnrealEngineClass

  @JsName("BlueprintContext")
  public open var blueprintContext: Blueprint

  @JsName("bSkipMarkBlueprintModified")
  public open var skipMarkBlueprintModified: Boolean

  @JsName("bConformTransformToParent")
  public open var conformTransformToParent: Boolean

  public open fun clone(): AddNewSubobjectParams

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AddNewSubobjectParams

    @JsName("C")
    public fun copy(other: Any): AddNewSubobjectParams
  }
}

@JsName("T$647")
public external interface OutArrayProvider {
  @JsName("OutArray")
  public var outArray: Array<SubobjectDataHandle>
}

@JsName("T$649")
public external interface Object649 {
  @JsName("OutData")
  public var outData: SubobjectData

  @JsName("$")
  public var value: Boolean
}

@JsName("T$650")
public external interface Object650 {
  @JsName("OutErrorMessage")
  public var outErrorMessage: String

  @JsName("$")
  public var value: Boolean
}

@JsName("T$651")
public external interface Object651 {
  @JsName("FailReason")
  public var failReason: String

  @JsName("$")
  public var value: SubobjectDataHandle
}

public open external class SubobjectDataSubsystem(
  outer: UObject,
) : EngineSubsystem {
  @JsName("ReparentSubobjects")
  public open fun reparentSubobjects(params: ReparentSubobjectParams,
      handlesToMove: Array<SubobjectDataHandle>): Boolean

  @JsName("ReparentSubobject")
  public open fun reparentSubobject(params: ReparentSubobjectParams,
      toReparentHandle: SubobjectDataHandle): Boolean

  @JsName("RenameSubobject")
  public open fun renameSubobject(handle: SubobjectDataHandle, inNewName: String): Boolean

  @JsName("MakeNewSceneRoot")
  public open fun makeNewSceneRoot(
    context: SubobjectDataHandle,
    newSceneRoot: SubobjectDataHandle,
    bpContext: Blueprint,
  ): Boolean

  @JsName("K2_GatherSubobjectDataForInstance")
  public open fun k2GatherSubobjectDataForInstance(context: Actor,
      outArray: Array<SubobjectDataHandle>): OutArrayProvider

  @JsName("K2_GatherSubobjectDataForBlueprint")
  public open fun k2GatherSubobjectDataForBlueprint(context: Blueprint,
      outArray: Array<SubobjectDataHandle>): OutArrayProvider

  @JsName("K2_FindSubobjectDataFromHandle")
  public open fun k2FindSubobjectDataFromHandle(handle: SubobjectDataHandle,
      outData: SubobjectData): Object649

  @JsName("K2_DeleteSubobjectsFromInstance")
  public open fun k2DeleteSubobjectsFromInstance(contextHandle: SubobjectDataHandle,
      subobjectsToDelete: Array<SubobjectDataHandle>): Number

  @JsName("K2_DeleteSubobjectFromInstance")
  public open fun k2DeleteSubobjectFromInstance(contextHandle: SubobjectDataHandle,
      subobjectToDelete: SubobjectDataHandle): Number

  @JsName("IsValidRename")
  public open fun isValidRename(
    handle: SubobjectDataHandle,
    inNewText: String,
    outErrorMessage: String,
  ): Object650

  @JsName("FindHandleForObject")
  public open fun findHandleForObject(
    context: SubobjectDataHandle,
    objectToFind: UObject,
    bpContext: Blueprint,
  ): SubobjectDataHandle

  @JsName("DetachSubobject")
  public open fun detachSubobject(ownerHandle: SubobjectDataHandle,
      childToRemove: SubobjectDataHandle): Boolean

  @JsName("DeleteSubobjects")
  public open fun deleteSubobjects(
    contextHandle: SubobjectDataHandle,
    subobjectsToDelete: Array<SubobjectDataHandle>,
    bpContext: Blueprint,
  ): Number

  @JsName("DeleteSubobject")
  public open fun deleteSubobject(
    contextHandle: SubobjectDataHandle,
    subobjectToDelete: SubobjectDataHandle,
    bpContext: Blueprint,
  ): Number

  @JsName("CopySubobjects")
  public open fun copySubobjects(handles: Array<SubobjectDataHandle>, bpContext: Blueprint): Unit

  @JsName("ChangeSubobjectClass")
  public open fun changeSubobjectClass(handle: SubobjectDataHandle, newClass: UnrealEngineClass):
      Boolean

  @JsName("CanPasteSubobjects")
  public open fun canPasteSubobjects(rootHandle: SubobjectDataHandle, bpContext: Blueprint): Boolean

  @JsName("CanCopySubobjects")
  public open fun canCopySubobjects(handles: Array<SubobjectDataHandle>): Boolean

  @JsName("AttachSubobject")
  public open fun attachSubobject(ownerHandle: SubobjectDataHandle,
      childToAddHandle: SubobjectDataHandle): Boolean

  @JsName("AddNewSubobject")
  public open fun addNewSubobject(params: AddNewSubobjectParams, failReason: String): Object651

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubobjectDataSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubobjectDataSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubobjectDataSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubobjectDataSubsystem

    @JsName("RenameSubobjectMemberVariable")
    public fun renameSubobjectMemberVariable(
      bpContext: Blueprint,
      inHandle: SubobjectDataHandle,
      newName: String,
    ): Unit

    @JsName("CreateNewCPPComponent")
    public fun createNewCppComponent(
      componentClass: UnrealEngineClass,
      newClassPath: String,
      newClassName: String,
    ): UnrealEngineClass

    @JsName("CreateNewBPComponent")
    public fun createNewBpComponent(
      componentClass: UnrealEngineClass,
      newClassPath: String,
      newClassName: String,
    ): UnrealEngineClass

    @JsName("C")
    public fun copy(other: UObject): SubobjectDataSubsystem

    @JsName("C")
    public fun copy(other: Any): SubobjectDataSubsystem
  }
}

public open external class SubobjectEditorMenuContext(
  outer: UObject,
) : UObject {
  @JsName("GetSelectedObjects")
  public open fun getSelectedObjects(): Array<UObject>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubobjectEditorMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubobjectEditorMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubobjectEditorMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubobjectEditorMenuContext

    @JsName("C")
    public fun copy(other: UObject): SubobjectEditorMenuContext

    @JsName("C")
    public fun copy(other: Any): SubobjectEditorMenuContext
  }
}

@JsName("Texture2DDynamic")
public open external class Texture2dDynamic(
  outer: UObject,
) : Texture {
  @JsName("Format")
  public open var format: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Texture2dDynamic

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Texture2dDynamic

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Texture2dDynamic

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Texture2dDynamic

    @JsName("C")
    public fun copy(other: UObject): Texture2dDynamic

    @JsName("C")
    public fun copy(other: Any): Texture2dDynamic
  }
}

public open external class AsyncTaskDownloadImage(
  outer: UObject,
) : BlueprintAsyncActionBase {
  @JsName("OnSuccess")
  public open var onSuccess: UnrealEngineMulticastDelegate<(Texture: Texture2dDynamic) -> Unit>

  @JsName("OnFail")
  public open var onFail: UnrealEngineMulticastDelegate<(Texture: Texture2dDynamic) -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AsyncTaskDownloadImage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AsyncTaskDownloadImage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AsyncTaskDownloadImage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AsyncTaskDownloadImage

    @JsName("DownloadImage")
    public fun downloadImage(URL: String): AsyncTaskDownloadImage

    @JsName("C")
    public fun copy(other: UObject): AsyncTaskDownloadImage

    @JsName("C")
    public fun copy(other: Any): AsyncTaskDownloadImage
  }
}

public open external class ContentWidget(
  outer: UObject,
) : PanelWidget {
  @JsName("SetContent")
  public open fun setContent(content: Widget): PanelSlot

  @JsName("GetContentSlot")
  public open fun getContentSlot(): PanelSlot

  @JsName("GetContent")
  public open fun getContent(): Widget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentWidget

    @JsName("C")
    public fun copy(other: UObject): ContentWidget

    @JsName("C")
    public fun copy(other: Any): ContentWidget
  }
}

public open external class BackgroundBlur(
  outer: UObject,
) : ContentWidget {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("bApplyAlphaToBlur")
  public open var applyAlphaToBlur: Boolean

  @JsName("BlurStrength")
  public open var blurStrength: Number

  @JsName("bOverrideAutoRadiusCalculation")
  public open var overrideAutoRadiusCalculation: Boolean

  @JsName("BlurRadius")
  public open var blurRadius: Number

  @JsName("CornerRadius")
  public open var cornerRadius: Vector4

  @JsName("LowQualityFallbackBrush")
  public open var lowQualityFallbackBrush: SlateBrush

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetLowQualityFallbackBrush")
  public open fun setLowQualityFallbackBrush(inBrush: SlateBrush): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  @JsName("SetCornerRadius")
  public open fun setCornerRadius(inCornerRadius: Vector4): Unit

  @JsName("SetBlurStrength")
  public open fun setBlurStrength(inStrength: Number): Unit

  @JsName("SetBlurRadius")
  public open fun setBlurRadius(inBlurRadius: Number): Unit

  @JsName("SetApplyAlphaToBlur")
  public open fun setApplyAlphaToBlur(inApplyAlphaToBlur: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BackgroundBlur

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BackgroundBlur

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BackgroundBlur

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BackgroundBlur

    @JsName("C")
    public fun copy(other: UObject): BackgroundBlur

    @JsName("C")
    public fun copy(other: Any): BackgroundBlur
  }
}

public open external class BackgroundBlurSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BackgroundBlurSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BackgroundBlurSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BackgroundBlurSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BackgroundBlurSlot

    @JsName("C")
    public fun copy(other: UObject): BackgroundBlurSlot

    @JsName("C")
    public fun copy(other: Any): BackgroundBlurSlot
  }
}

public open external class BoolBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetValue")
  public open fun getValue(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BoolBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BoolBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BoolBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BoolBinding

    @JsName("C")
    public fun copy(other: UObject): BoolBinding

    @JsName("C")
    public fun copy(other: Any): BoolBinding
  }
}

public open external class Border(
  outer: UObject,
) : ContentWidget {
  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("bShowEffectWhenDisabled")
  public open var showEffectWhenDisabled: Boolean

  @JsName("ContentColorAndOpacity")
  public open var contentColorAndOpacity: LinearColor

  @JsName("ContentColorAndOpacityDelegate")
  public open var contentColorAndOpacityDelegate: UnrealEngineDelegate<() -> LinearColor>

  @JsName("Padding")
  public open var padding: Margin

  @JsName("Background")
  public open var background: SlateBrush

  @JsName("BackgroundDelegate")
  public open var backgroundDelegate: UnrealEngineDelegate<() -> SlateBrush>

  @JsName("BrushColor")
  public open var brushColor: LinearColor

  @JsName("BrushColorDelegate")
  public open var brushColorDelegate: UnrealEngineDelegate<() -> LinearColor>

  @JsName("DesiredSizeScale")
  public open var desiredSizeScale: Vector2d

  @JsName("bFlipForRightToLeftFlowDirection")
  public open var flipForRightToLeftFlowDirection: Boolean

  @JsName("OnMouseButtonDownEvent")
  public open var onMouseButtonDownEvent: UnrealEngineDelegate<(MyGeometry: Geometry,
      MouseEvent: UPointerEvent) -> EventReply>

  @JsName("OnMouseButtonUpEvent")
  public open var onMouseButtonUpEvent: UnrealEngineDelegate<(MyGeometry: Geometry,
      MouseEvent: UPointerEvent) -> EventReply>

  @JsName("OnMouseMoveEvent")
  public open var onMouseMoveEvent: UnrealEngineDelegate<(MyGeometry: Geometry,
      MouseEvent: UPointerEvent) -> EventReply>

  @JsName("OnMouseDoubleClickEvent")
  public open var onMouseDoubleClickEvent: UnrealEngineDelegate<(MyGeometry: Geometry,
      MouseEvent: UPointerEvent) -> EventReply>

  @JsName("Brush")
  public open var brush: SlateBrushAsset

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  @JsName("SetDesiredSizeScale")
  public open fun setDesiredSizeScale(inScale: Vector2d): Unit

  @JsName("SetContentColorAndOpacity")
  public open fun setContentColorAndOpacity(inContentColorAndOpacity: LinearColor): Unit

  @JsName("SetBrushFromTexture")
  public open fun setBrushFromTexture(texture: Texture2d): Unit

  @JsName("SetBrushFromMaterial")
  public open fun setBrushFromMaterial(material: MaterialInterface): Unit

  @JsName("SetBrushFromAsset")
  public open fun setBrushFromAsset(asset: SlateBrushAsset): Unit

  @JsName("SetBrushColor")
  public open fun setBrushColor(inBrushColor: LinearColor): Unit

  @JsName("SetBrush")
  public open fun setBrush(inBrush: SlateBrush): Unit

  @JsName("GetDynamicMaterial")
  public open fun getDynamicMaterial(): MaterialInstanceDynamic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Border

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Border

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Border

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Border

    @JsName("C")
    public fun copy(other: UObject): Border

    @JsName("C")
    public fun copy(other: Any): Border
  }
}

public open external class BrushBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetValue")
  public open fun getValue(): SlateBrush

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BrushBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BrushBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BrushBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BrushBinding

    @JsName("C")
    public fun copy(other: UObject): BrushBinding

    @JsName("C")
    public fun copy(other: Any): BrushBinding
  }
}

@JsName("EButtonClickMethod")
public external object ButtonClickMethod {
  public var DownAndUp: String

  public var MouseDown: String

  public var MouseUp: String

  public var PreciseClick: String

  @JsName("EButtonClickMethod_MAX")
  public var Max: String
}

@JsName("EButtonTouchMethod")
public external object ButtonTouchMethod {
  public var DownAndUp: String

  public var Down: String

  public var PreciseTap: String

  @JsName("EButtonTouchMethod_MAX")
  public var Max: String
}

@JsName("EButtonPressMethod")
public external object ButtonPressMethod {
  public var DownAndUp: String

  public var ButtonPress: String

  public var ButtonRelease: String

  @JsName("EButtonPressMethod_MAX")
  public var Max: String
}

public open external class Button(
  outer: UObject,
) : ContentWidget {
  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("WidgetStyle")
  public open var widgetStyle: ButtonStyle

  @JsName("ColorAndOpacity")
  public open var colorAndOpacity: LinearColor

  @JsName("BackgroundColor")
  public open var backgroundColor: LinearColor

  @JsName("ClickMethod")
  public open var clickMethod: String

  @JsName("TouchMethod")
  public open var touchMethod: String

  @JsName("PressMethod")
  public open var pressMethod: String

  @JsName("IsFocusable")
  public open var isFocusable: Boolean

  @JsName("OnClicked")
  public open var onClicked: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnPressed")
  public open var onPressed: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnReleased")
  public open var onReleased: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnHovered")
  public open var onHovered: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnUnhovered")
  public open var onUnhovered: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SetTouchMethod")
  public open fun setTouchMethod(inTouchMethod: String): Unit

  @JsName("SetStyle")
  public open fun setStyle(inStyle: ButtonStyle): Unit

  @JsName("SetPressMethod")
  public open fun setPressMethod(inPressMethod: String): Unit

  @JsName("SetColorAndOpacity")
  public open fun setColorAndOpacity(inColorAndOpacity: LinearColor): Unit

  @JsName("SetClickMethod")
  public open fun setClickMethod(inClickMethod: String): Unit

  @JsName("SetBackgroundColor")
  public open fun setBackgroundColor(inBackgroundColor: LinearColor): Unit

  @JsName("IsPressed")
  public open fun isPressed(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Button

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Button

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Button

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Button

    @JsName("C")
    public fun copy(other: UObject): Button

    @JsName("C")
    public fun copy(other: Any): Button
  }
}

public open external class ButtonSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ButtonSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ButtonSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ButtonSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ButtonSlot

    @JsName("C")
    public fun copy(other: UObject): ButtonSlot

    @JsName("C")
    public fun copy(other: Any): ButtonSlot
  }
}

public open external class CanvasPanel(
  outer: UObject,
) : PanelWidget {
  @JsName("AddChildToCanvas")
  public open fun addChildToCanvas(content: Widget): CanvasPanelSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CanvasPanel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CanvasPanel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CanvasPanel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CanvasPanel

    @JsName("C")
    public fun copy(other: UObject): CanvasPanel

    @JsName("C")
    public fun copy(other: Any): CanvasPanel
  }
}

public open external class CheckBox(
  outer: UObject,
) : ContentWidget {
  @JsName("CheckedState")
  public open var checkedState: String

  @JsName("CheckedStateDelegate")
  public open var checkedStateDelegate: UnrealEngineDelegate<() -> String>

  @JsName("WidgetStyle")
  public open var widgetStyle: CheckBoxStyle

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("UncheckedImage")
  public open var uncheckedImage: SlateBrushAsset

  @JsName("UncheckedHoveredImage")
  public open var uncheckedHoveredImage: SlateBrushAsset

  @JsName("UncheckedPressedImage")
  public open var uncheckedPressedImage: SlateBrushAsset

  @JsName("CheckedImage")
  public open var checkedImage: SlateBrushAsset

  @JsName("CheckedHoveredImage")
  public open var checkedHoveredImage: SlateBrushAsset

  @JsName("CheckedPressedImage")
  public open var checkedPressedImage: SlateBrushAsset

  @JsName("UndeterminedImage")
  public open var undeterminedImage: SlateBrushAsset

  @JsName("UndeterminedHoveredImage")
  public open var undeterminedHoveredImage: SlateBrushAsset

  @JsName("UndeterminedPressedImage")
  public open var undeterminedPressedImage: SlateBrushAsset

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("Padding")
  public open var padding: Margin

  @JsName("BorderBackgroundColor")
  public open var borderBackgroundColor: SlateColor

  @JsName("ClickMethod")
  public open var clickMethod: String

  @JsName("TouchMethod")
  public open var touchMethod: String

  @JsName("PressMethod")
  public open var pressMethod: String

  @JsName("IsFocusable")
  public open var isFocusable: Boolean

  @JsName("OnCheckStateChanged")
  public open var onCheckStateChanged: UnrealEngineMulticastDelegate<(bIsChecked: Boolean) -> Unit>

  @JsName("SetTouchMethod")
  public open fun setTouchMethod(inTouchMethod: String): Unit

  @JsName("SetPressMethod")
  public open fun setPressMethod(inPressMethod: String): Unit

  @JsName("SetIsChecked")
  public open fun setIsChecked(inIsChecked: Boolean): Unit

  @JsName("SetClickMethod")
  public open fun setClickMethod(inClickMethod: String): Unit

  @JsName("SetCheckedState")
  public open fun setCheckedState(inCheckedState: String): Unit

  @JsName("IsPressed")
  public open fun isPressed(): Boolean

  @JsName("IsChecked")
  public open fun isChecked(): Boolean

  @JsName("GetCheckedState")
  public open fun getCheckedState(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CheckBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CheckBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CheckBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CheckBox

    @JsName("C")
    public fun copy(other: UObject): CheckBox

    @JsName("C")
    public fun copy(other: Any): CheckBox
  }
}

public open external class CheckedStateBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetValue")
  public open fun getValue(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CheckedStateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CheckedStateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CheckedStateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CheckedStateBinding

    @JsName("C")
    public fun copy(other: UObject): CheckedStateBinding

    @JsName("C")
    public fun copy(other: Any): CheckedStateBinding
  }
}

public open external class CircularThrobber(
  outer: UObject,
) : Widget {
  @JsName("NumberOfPieces")
  public open var numberOfPieces: Number

  @JsName("Period")
  public open var period: Number

  @JsName("Radius")
  public open var radius: Number

  @JsName("PieceImage")
  public open var pieceImage: SlateBrushAsset

  @JsName("UImage")
  public open var uImage: SlateBrush

  @JsName("bEnableRadius")
  public open var enableRadius: Boolean

  @JsName("SetRadius")
  public open fun setRadius(inRadius: Number): Unit

  @JsName("SetPeriod")
  public open fun setPeriod(inPeriod: Number): Unit

  @JsName("SetNumberOfPieces")
  public open fun setNumberOfPieces(inNumberOfPieces: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): CircularThrobber

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): CircularThrobber

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): CircularThrobber

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): CircularThrobber

    @JsName("C")
    public fun copy(other: UObject): CircularThrobber

    @JsName("C")
    public fun copy(other: Any): CircularThrobber
  }
}

public open external class ColorBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetSlateValue")
  public open fun getSlateValue(): SlateColor

  @JsName("GetLinearValue")
  public open fun getLinearValue(): LinearColor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ColorBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ColorBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ColorBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ColorBinding

    @JsName("C")
    public fun copy(other: UObject): ColorBinding

    @JsName("C")
    public fun copy(other: Any): ColorBinding
  }
}

public open external class ComboBox(
  outer: UObject,
) : Widget {
  @JsName("Items")
  public open var items: Array<UObject>

  @JsName("OnGenerateWidgetEvent")
  public open var onGenerateWidgetEvent: UnrealEngineDelegate<(Item: UObject) -> Widget>

  @JsName("bIsFocusable")
  public open var isFocusable: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComboBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComboBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComboBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComboBox

    @JsName("C")
    public fun copy(other: UObject): ComboBox

    @JsName("C")
    public fun copy(other: Any): ComboBox
  }
}

public open external class TableRowStyle : SlateWidgetStyle {
  @JsName("SelectorFocusedBrush")
  public open var selectorFocusedBrush: SlateBrush

  @JsName("ActiveHoveredBrush")
  public open var activeHoveredBrush: SlateBrush

  @JsName("ActiveBrush")
  public open var activeBrush: SlateBrush

  @JsName("InactiveHoveredBrush")
  public open var inactiveHoveredBrush: SlateBrush

  @JsName("InactiveBrush")
  public open var inactiveBrush: SlateBrush

  @JsName("bUseParentRowBrush")
  public open var useParentRowBrush: Boolean

  @JsName("ParentRowBackgroundBrush")
  public open var parentRowBackgroundBrush: SlateBrush

  @JsName("ParentRowBackgroundHoveredBrush")
  public open var parentRowBackgroundHoveredBrush: SlateBrush

  @JsName("EvenRowBackgroundHoveredBrush")
  public open var evenRowBackgroundHoveredBrush: SlateBrush

  @JsName("EvenRowBackgroundBrush")
  public open var evenRowBackgroundBrush: SlateBrush

  @JsName("OddRowBackgroundHoveredBrush")
  public open var oddRowBackgroundHoveredBrush: SlateBrush

  @JsName("OddRowBackgroundBrush")
  public open var oddRowBackgroundBrush: SlateBrush

  @JsName("TextColor")
  public open var textColor: SlateColor

  @JsName("SelectedTextColor")
  public open var selectedTextColor: SlateColor

  @JsName("DropIndicator_Above")
  public open var dropIndicatorAbove: SlateBrush

  @JsName("DropIndicator_Onto")
  public open var dropIndicatorOnto: SlateBrush

  @JsName("DropIndicator_Below")
  public open var dropIndicatorBelow: SlateBrush

  @JsName("ActiveHighlightedBrush")
  public open var activeHighlightedBrush: SlateBrush

  @JsName("InactiveHighlightedBrush")
  public open var inactiveHighlightedBrush: SlateBrush

  public override fun clone(): TableRowStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TableRowStyle

    @JsName("C")
    public fun copy(other: Any): TableRowStyle
  }
}

@JsName("ESelectInfo")
public external object SelectInfo {
  public var OnKeyPress: String

  public var OnNavigation: String

  public var OnMouseClick: String

  public var Direct: String

  @JsName("ESelectInfo_MAX")
  public var Max: String
}

public open external class ComboBoxKey(
  outer: UObject,
) : Widget {
  @JsName("Options")
  public open var options: Array<String>

  @JsName("SelectedOption")
  public open var selectedOption: String

  @JsName("WidgetStyle")
  public open var widgetStyle: ComboBoxStyle

  @JsName("ItemStyle")
  public open var itemStyle: TableRowStyle

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("ContentPadding")
  public open var contentPadding: Margin

  @JsName("MaxListHeight")
  public open var maxListHeight: Number

  @JsName("bHasDownArrow")
  public open var hasDownArrow: Boolean

  @JsName("bEnableGamepadNavigationMode")
  public open var enableGamepadNavigationMode: Boolean

  @JsName("bIsFocusable")
  public open var isFocusable: Boolean

  @JsName("OnGenerateContentWidget")
  public open var onGenerateContentWidget: UnrealEngineDelegate<(Item: String) -> Widget>

  @JsName("OnGenerateItemWidget")
  public open var onGenerateItemWidget: UnrealEngineDelegate<(Item: String) -> Widget>

  @JsName("OnSelectionChanged")
  public open var onSelectionChanged: UnrealEngineMulticastDelegate<(SelectedItem: String,
      SelectionType: String) -> Unit>

  @JsName("OnOpening")
  public open var onOpening: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SetSelectedOption")
  public open fun setSelectedOption(option: String): Unit

  @JsName("RemoveOption")
  public open fun removeOption(option: String): Boolean

  @JsName("IsOpen")
  public open fun isOpen(): Boolean

  @JsName("GetSelectedOption")
  public open fun getSelectedOption(): String

  @JsName("ClearSelection")
  public open fun clearSelection(): Unit

  @JsName("ClearOptions")
  public open fun clearOptions(): Unit

  @JsName("AddOption")
  public open fun addOption(option: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComboBoxKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComboBoxKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComboBoxKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComboBoxKey

    @JsName("C")
    public fun copy(other: UObject): ComboBoxKey

    @JsName("C")
    public fun copy(other: Any): ComboBoxKey
  }
}

public open external class ComboBoxString(
  outer: UObject,
) : Widget {
  @JsName("DefaultOptions")
  public open var defaultOptions: Array<String>

  @JsName("SelectedOption")
  public open var selectedOption: String

  @JsName("WidgetStyle")
  public open var widgetStyle: ComboBoxStyle

  @JsName("ItemStyle")
  public open var itemStyle: TableRowStyle

  @JsName("ContentPadding")
  public open var contentPadding: Margin

  @JsName("MaxListHeight")
  public open var maxListHeight: Number

  @JsName("HasDownArrow")
  public open var hasDownArrow: Boolean

  @JsName("EnableGamepadNavigationMode")
  public open var enableGamepadNavigationMode: Boolean

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("bIsFocusable")
  public open var isFocusable: Boolean

  @JsName("OnGenerateWidgetEvent")
  public open var onGenerateWidgetEvent: UnrealEngineDelegate<(Item: String) -> Widget>

  @JsName("OnSelectionChanged")
  public open var onSelectionChanged: UnrealEngineMulticastDelegate<(SelectedItem: String,
      SelectionType: String) -> Unit>

  @JsName("OnOpening")
  public open var onOpening: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SetSelectedOption")
  public open fun setSelectedOption(option: String): Unit

  @JsName("SetSelectedIndex")
  public open fun setSelectedIndex(index: Number): Unit

  @JsName("RemoveOption")
  public open fun removeOption(option: String): Boolean

  @JsName("RefreshOptions")
  public open fun refreshOptions(): Unit

  @JsName("IsOpen")
  public open fun isOpen(): Boolean

  @JsName("GetSelectedOption")
  public open fun getSelectedOption(): String

  @JsName("GetSelectedIndex")
  public open fun getSelectedIndex(): Number

  @JsName("GetOptionCount")
  public open fun getOptionCount(): Number

  @JsName("GetOptionAtIndex")
  public open fun getOptionAtIndex(index: Number): String

  @JsName("FindOptionIndex")
  public open fun findOptionIndex(option: String): Number

  @JsName("ClearSelection")
  public open fun clearSelection(): Unit

  @JsName("ClearOptions")
  public open fun clearOptions(): Unit

  @JsName("AddOption")
  public open fun addOption(option: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ComboBoxString

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ComboBoxString

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ComboBoxString

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ComboBoxString

    @JsName("C")
    public fun copy(other: UObject): ComboBoxString

    @JsName("C")
    public fun copy(other: Any): ComboBoxString
  }
}

@JsName("EDynamicBoxType")
public external object DynamicBoxType {
  public var Horizontal: String

  public var Vertical: String

  public var Wrap: String

  public var VerticalWrap: String

  public var Radial: String

  public var Overlay: String

  @JsName("EDynamicBoxType_MAX")
  public var Max: String
}

public open external class RadialBoxSettings {
  @JsName("StartingAngle")
  public open var startingAngle: Number

  @JsName("bDistributeItemsEvenly")
  public open var distributeItemsEvenly: Boolean

  @JsName("AngleBetweenItems")
  public open var angleBetweenItems: Number

  @JsName("SectorCentralAngle")
  public open var sectorCentralAngle: Number

  public open fun clone(): RadialBoxSettings

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): RadialBoxSettings

    @JsName("C")
    public fun copy(other: Any): RadialBoxSettings
  }
}

public open external class UserWidgetPool {
  @JsName("ActiveWidgets")
  public open var activeWidgets: Array<UserWidget>

  @JsName("InactiveWidgets")
  public open var inactiveWidgets: Array<UserWidget>

  public open fun clone(): UserWidgetPool

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): UserWidgetPool

    @JsName("C")
    public fun copy(other: Any): UserWidgetPool
  }
}

public open external class DynamicEntryBoxBase(
  outer: UObject,
) : Widget {
  @JsName("EntryBoxType")
  public open var entryBoxType: String

  @JsName("EntrySpacing")
  public open var entrySpacing: Vector2d

  @JsName("SpacingPattern")
  public open var spacingPattern: Array<Vector2d>

  @JsName("EntrySizeRule")
  public open var entrySizeRule: SlateChildSize

  @JsName("EntryHorizontalAlignment")
  public open var entryHorizontalAlignment: String

  @JsName("EntryVerticalAlignment")
  public open var entryVerticalAlignment: String

  @JsName("MaxElementSize")
  public open var maxElementSize: Number

  @JsName("RadialBoxSettings")
  public open var radialBoxSettings: RadialBoxSettings

  @JsName("EntryWidgetPool")
  public open var entryWidgetPool: UserWidgetPool

  @JsName("SetRadialSettings")
  public open fun setRadialSettings(inSettings: RadialBoxSettings): Unit

  @JsName("SetEntrySpacing")
  public open fun setEntrySpacing(inEntrySpacing: Vector2d): Unit

  @JsName("GetNumEntries")
  public open fun getNumEntries(): Number

  @JsName("GetAllEntries")
  public open fun getAllEntries(): Array<UserWidget>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicEntryBoxBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicEntryBoxBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicEntryBoxBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicEntryBoxBase

    @JsName("C")
    public fun copy(other: UObject): DynamicEntryBoxBase

    @JsName("C")
    public fun copy(other: Any): DynamicEntryBoxBase
  }
}

public open external class DynamicEntryBox(
  outer: UObject,
) : DynamicEntryBoxBase {
  @JsName("NumDesignerPreviewEntries")
  public open var numDesignerPreviewEntries: Number

  @JsName("EntryWidgetClass")
  public open var entryWidgetClass: UnrealEngineClass

  @JsName("Reset")
  public open fun reset(deleteWidgets: Boolean): Unit

  @JsName("RemoveEntry")
  public open fun removeEntry(entryWidget: UserWidget): Unit

  @JsName("BP_CreateEntryOfClass")
  public open fun bpCreateEntryOfClass(entryClass: UnrealEngineClass): UserWidget

  @JsName("BP_CreateEntry")
  public open fun bpCreateEntry(): UserWidget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DynamicEntryBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DynamicEntryBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DynamicEntryBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DynamicEntryBox

    @JsName("C")
    public fun copy(other: UObject): DynamicEntryBox

    @JsName("C")
    public fun copy(other: Any): DynamicEntryBox
  }
}

@JsName("EVirtualKeyboardType")
public external object VirtualKeyboardType {
  public var Default: String

  public var Number: String

  public var Web: String

  public var Email: String

  public var Password: String

  public var AlphaNumeric: String

  @JsName("EVirtualKeyboardType_MAX")
  public var Max: String
}

public open external class VirtualKeyboardOptions {
  @JsName("bEnableAutocorrect")
  public open var enableAutocorrect: Boolean

  public open fun clone(): VirtualKeyboardOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): VirtualKeyboardOptions

    @JsName("C")
    public fun copy(other: Any): VirtualKeyboardOptions
  }
}

@JsName("EVirtualKeyboardTrigger")
public external object VirtualKeyboardTrigger {
  @JsName("OnFocusByPointer")
  public var FocusByPointer: String

  @JsName("OnAllFocusEvents")
  public var AllFocusEvents: String

  @JsName("EVirtualKeyboardTrigger_MAX")
  public var Max: String
}

@JsName("EVirtualKeyboardDismissAction")
public external object VirtualKeyboardDismissAction {
  @JsName("TextChangeOnDismiss")
  public var HangeOnDismiss: String

  @JsName("TextCommitOnAccept")
  public var OmmitOnAccept: String

  @JsName("TextCommitOnDismiss")
  public var OmmitOnDismiss: String

  @JsName("EVirtualKeyboardDismissAction_MAX")
  public var Max: String
}

@JsName("ETextJustify")
public external object TextJustify {
  public var Left: String

  public var Center: String

  public var Right: String

  @JsName("ETextJustify_MAX")
  public var Max: String
}

@JsName("ETextShapingMethod")
public external object TextShapingMethod {
  public var Auto: String

  public var KerningOnly: String

  public var FullShaping: String

  @JsName("ETextShapingMethod_MAX")
  public var Max: String
}

@JsName("ETextFlowDirection")
public external object TextFlowDirection {
  public var Auto: String

  public var LeftToRight: String

  public var RightToLeft: String

  @JsName("ETextFlowDirection_MAX")
  public var Max: String
}

public open external class ShapedTextOptions {
  @JsName("bOverride_TextShapingMethod")
  public open var overrideTextShapingMethod: Boolean

  @JsName("bOverride_TextFlowDirection")
  public open var overrideTextFlowDirection: Boolean

  @JsName("TextShapingMethod")
  public open var textShapingMethod: String

  @JsName("TextFlowDirection")
  public open var textFlowDirection: String

  public open fun clone(): ShapedTextOptions

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ShapedTextOptions

    @JsName("C")
    public fun copy(other: Any): ShapedTextOptions
  }
}

@JsName("ETextCommit")
public external object TextCommit {
  public var Default: String

  public var OnEnter: String

  public var OnUserMovedFocus: String

  public var OnCleared: String

  @JsName("ETextCommit_MAX")
  public var Max: String
}

public open external class EditableText(
  outer: UObject,
) : Widget {
  public open var text: String

  @JsName("TextDelegate")
  public open var textDelegate: UnrealEngineDelegate<() -> String>

  @JsName("HintText")
  public open var hintText: String

  @JsName("HintTextDelegate")
  public open var hintTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("WidgetStyle")
  public open var widgetStyle: EditableTextStyle

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("BackgroundImageSelected")
  public open var backgroundImageSelected: SlateBrushAsset

  @JsName("BackgroundImageComposing")
  public open var backgroundImageComposing: SlateBrushAsset

  @JsName("CaretImage")
  public open var caretImage: SlateBrushAsset

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("ColorAndOpacity")
  public open var colorAndOpacity: SlateColor

  @JsName("IsReadOnly")
  public open var isReadOnly: Boolean

  @JsName("IsPassword")
  public open var isPassword: Boolean

  @JsName("MinimumDesiredWidth")
  public open var minimumDesiredWidth: Number

  @JsName("IsCaretMovedWhenGainFocus")
  public open var isCaretMovedWhenGainFocus: Boolean

  @JsName("SelectAllTextWhenFocused")
  public open var selectAllTextWhenFocused: Boolean

  @JsName("RevertTextOnEscape")
  public open var revertTextOnEscape: Boolean

  @JsName("ClearKeyboardFocusOnCommit")
  public open var clearKeyboardFocusOnCommit: Boolean

  @JsName("SelectAllTextOnCommit")
  public open var selectAllTextOnCommit: Boolean

  @JsName("AllowContextMenu")
  public open var allowContextMenu: Boolean

  @JsName("KeyboardType")
  public open var keyboardType: String

  @JsName("VirtualKeyboardOptions")
  public open var virtualKeyboardOptions: VirtualKeyboardOptions

  @JsName("VirtualKeyboardTrigger")
  public open var virtualKeyboardTrigger: String

  @JsName("VirtualKeyboardDismissAction")
  public open var virtualKeyboardDismissAction: String

  @JsName("Justification")
  public open var justification: String

  @JsName("OverflowPolicy")
  public open var overflowPolicy: String

  @JsName("ShapedTextOptions")
  public open var shapedTextOptions: ShapedTextOptions

  @JsName("OnTextChanged")
  public open var onTextChanged: UnrealEngineMulticastDelegate<(text: String) -> Unit>

  @JsName("OnTextCommitted")
  public open var onTextCommitted: UnrealEngineMulticastDelegate<(text: String,
      CommitMethod: String) -> Unit>

  @JsName("SetTextOverflowPolicy")
  public open fun setTextOverflowPolicy(inOverflowPolicy: String): Unit

  @JsName("SetText")
  public open fun setText(inText: String): Unit

  @JsName("SetJustification")
  public open fun setJustification(inJustification: String): Unit

  @JsName("SetIsReadOnly")
  public open fun setIsReadOnly(inbIsReadyOnly: Boolean): Unit

  @JsName("SetIsPassword")
  public open fun setIsPassword(inbIsPassword: Boolean): Unit

  @JsName("SetHintText")
  public open fun setHintText(inHintText: String): Unit

  @JsName("GetText")
  public open fun getText(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableText

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditableText

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableText

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableText

    @JsName("C")
    public fun copy(other: UObject): EditableText

    @JsName("C")
    public fun copy(other: Any): EditableText
  }
}

public open external class EditableTextBox(
  outer: UObject,
) : Widget {
  public open var text: String

  @JsName("TextDelegate")
  public open var textDelegate: UnrealEngineDelegate<() -> String>

  @JsName("WidgetStyle")
  public open var widgetStyle: EditableTextBoxStyle

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("HintText")
  public open var hintText: String

  @JsName("HintTextDelegate")
  public open var hintTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("ForegroundColor")
  public open var foregroundColor: LinearColor

  @JsName("BackgroundColor")
  public open var backgroundColor: LinearColor

  @JsName("ReadOnlyForegroundColor")
  public open var readOnlyForegroundColor: LinearColor

  @JsName("IsReadOnly")
  public open var isReadOnly: Boolean

  @JsName("IsPassword")
  public open var isPassword: Boolean

  @JsName("MinimumDesiredWidth")
  public open var minimumDesiredWidth: Number

  @JsName("Padding")
  public open var padding: Margin

  @JsName("IsCaretMovedWhenGainFocus")
  public open var isCaretMovedWhenGainFocus: Boolean

  @JsName("SelectAllTextWhenFocused")
  public open var selectAllTextWhenFocused: Boolean

  @JsName("RevertTextOnEscape")
  public open var revertTextOnEscape: Boolean

  @JsName("ClearKeyboardFocusOnCommit")
  public open var clearKeyboardFocusOnCommit: Boolean

  @JsName("SelectAllTextOnCommit")
  public open var selectAllTextOnCommit: Boolean

  @JsName("AllowContextMenu")
  public open var allowContextMenu: Boolean

  @JsName("KeyboardType")
  public open var keyboardType: String

  @JsName("VirtualKeyboardOptions")
  public open var virtualKeyboardOptions: VirtualKeyboardOptions

  @JsName("VirtualKeyboardTrigger")
  public open var virtualKeyboardTrigger: String

  @JsName("VirtualKeyboardDismissAction")
  public open var virtualKeyboardDismissAction: String

  @JsName("Justification")
  public open var justification: String

  @JsName("OverflowPolicy")
  public open var overflowPolicy: String

  @JsName("ShapedTextOptions")
  public open var shapedTextOptions: ShapedTextOptions

  @JsName("OnTextChanged")
  public open var onTextChanged: UnrealEngineMulticastDelegate<(text: String) -> Unit>

  @JsName("OnTextCommitted")
  public open var onTextCommitted: UnrealEngineMulticastDelegate<(text: String,
      CommitMethod: String) -> Unit>

  @JsName("SetTextOverflowPolicy")
  public open fun setTextOverflowPolicy(inOverflowPolicy: String): Unit

  @JsName("SetText")
  public open fun setText(inText: String): Unit

  @JsName("SetJustification")
  public open fun setJustification(inJustification: String): Unit

  @JsName("SetIsReadOnly")
  public open fun setIsReadOnly(readOnly: Boolean): Unit

  @JsName("SetIsPassword")
  public open fun setIsPassword(isPassword: Boolean): Unit

  @JsName("SetHintText")
  public open fun setHintText(inText: String): Unit

  @JsName("SetForegroundColor")
  public open fun setForegroundColor(color: LinearColor): Unit

  @JsName("SetError")
  public open fun setError(inError: String): Unit

  @JsName("HasError")
  public open fun hasError(): Boolean

  @JsName("GetText")
  public open fun getText(): String

  @JsName("ClearError")
  public open fun clearError(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditableTextBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditableTextBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditableTextBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditableTextBox

    @JsName("C")
    public fun copy(other: UObject): EditableTextBox

    @JsName("C")
    public fun copy(other: Any): EditableTextBox
  }
}

public open external class ExpandableAreaStyle : SlateWidgetStyle {
  @JsName("CollapsedImage")
  public open var collapsedImage: SlateBrush

  @JsName("ExpandedImage")
  public open var expandedImage: SlateBrush

  @JsName("RolloutAnimationSeconds")
  public open var rolloutAnimationSeconds: Number

  public override fun clone(): ExpandableAreaStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExpandableAreaStyle

    @JsName("C")
    public fun copy(other: Any): ExpandableAreaStyle
  }
}

public open external class ExpandableArea(
  outer: UObject,
) : Widget {
  @JsName("Style")
  public open var style: ExpandableAreaStyle

  @JsName("BorderBrush")
  public open var borderBrush: SlateBrush

  @JsName("BorderColor")
  public open var borderColor: SlateColor

  @JsName("bIsExpanded")
  public open var isExpanded: Boolean

  @JsName("MaxHeight")
  public open var maxHeight: Number

  @JsName("HeaderPadding")
  public open var headerPadding: Margin

  @JsName("AreaPadding")
  public open var areaPadding: Margin

  @JsName("OnExpansionChanged")
  public open var onExpansionChanged: UnrealEngineMulticastDelegate<(Area: ExpandableArea,
      bIsExpanded: Boolean) -> Unit>

  @JsName("HeaderContent")
  public open var headerContent: Widget

  @JsName("BodyContent")
  public open var bodyContent: Widget

  @JsName("SetIsExpanded_Animated")
  public open fun setIsExpandedAnimated(isExpanded: Boolean): Unit

  @JsName("SetIsExpanded")
  public open fun setIsExpanded(isExpanded: Boolean): Unit

  @JsName("GetIsExpanded")
  public open fun getIsExpanded(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ExpandableArea

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ExpandableArea

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ExpandableArea

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ExpandableArea

    @JsName("C")
    public fun copy(other: UObject): ExpandableArea

    @JsName("C")
    public fun copy(other: Any): ExpandableArea
  }
}

public open external class FloatBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetValue")
  public open fun getValue(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): FloatBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): FloatBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): FloatBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): FloatBinding

    @JsName("C")
    public fun copy(other: UObject): FloatBinding

    @JsName("C")
    public fun copy(other: Any): FloatBinding
  }
}

public open external class GridPanel(
  outer: UObject,
) : PanelWidget {
  @JsName("ColumnFill")
  public open var columnFill: Array<Number>

  @JsName("RowFill")
  public open var rowFill: Array<Number>

  @JsName("SetRowFill")
  public open fun setRowFill(columnIndex: Number, coefficient: Number): Unit

  @JsName("SetColumnFill")
  public open fun setColumnFill(columnIndex: Number, coefficient: Number): Unit

  @JsName("AddChildToGrid")
  public open fun addChildToGrid(
    content: Widget,
    inRow: Number,
    inColumn: Number,
  ): GridSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GridPanel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GridPanel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GridPanel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GridPanel

    @JsName("C")
    public fun copy(other: UObject): GridPanel

    @JsName("C")
    public fun copy(other: Any): GridPanel
  }
}

public open external class HorizontalBox(
  outer: UObject,
) : PanelWidget {
  @JsName("AddChildToHorizontalBox")
  public open fun addChildToHorizontalBox(content: Widget): HorizontalBoxSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): HorizontalBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): HorizontalBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): HorizontalBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): HorizontalBox

    @JsName("C")
    public fun copy(other: UObject): HorizontalBox

    @JsName("C")
    public fun copy(other: Any): HorizontalBox
  }
}

public open external class UImage(
  outer: UObject,
) : Widget {
  @JsName("UImage")
  public open var uImage: SlateBrushAsset

  @JsName("Brush")
  public open var brush: SlateBrush

  @JsName("BrushDelegate")
  public open var brushDelegate: UnrealEngineDelegate<() -> SlateBrush>

  @JsName("ColorAndOpacity")
  public open var colorAndOpacity: LinearColor

  @JsName("ColorAndOpacityDelegate")
  public open var colorAndOpacityDelegate: UnrealEngineDelegate<() -> LinearColor>

  @JsName("bFlipForRightToLeftFlowDirection")
  public open var flipForRightToLeftFlowDirection: Boolean

  @JsName("OnMouseButtonDownEvent")
  public open var onMouseButtonDownEvent: UnrealEngineDelegate<(MyGeometry: Geometry,
      MouseEvent: UPointerEvent) -> EventReply>

  @JsName("SetOpacity")
  public open fun setOpacity(inOpacity: Number): Unit

  @JsName("SetDesiredSizeOverride")
  public open fun setDesiredSizeOverride(desiredSize: Vector2d): Unit

  @JsName("SetColorAndOpacity")
  public open fun setColorAndOpacity(inColorAndOpacity: LinearColor): Unit

  @JsName("SetBrushTintColor")
  public open fun setBrushTintColor(tintColor: SlateColor): Unit

  @JsName("SetBrushResourceObject")
  public open fun setBrushResourceObject(resourceObject: UObject): Unit

  @JsName("SetBrushFromTextureDynamic")
  public open fun setBrushFromTextureDynamic(texture: Texture2dDynamic, matchSize: Boolean): Unit

  @JsName("SetBrushFromTexture")
  public open fun setBrushFromTexture(texture: Texture2d, matchSize: Boolean): Unit

  @JsName("SetBrushFromSoftTexture")
  public open fun setBrushFromSoftTexture(softTexture: Texture2d, matchSize: Boolean): Unit

  @JsName("SetBrushFromSoftMaterial")
  public open fun setBrushFromSoftMaterial(softMaterial: MaterialInterface): Unit

  @JsName("SetBrushFromMaterial")
  public open fun setBrushFromMaterial(material: MaterialInterface): Unit

  @JsName("SetBrushFromAsset")
  public open fun setBrushFromAsset(asset: SlateBrushAsset): Unit

  @JsName("SetBrush")
  public open fun setBrush(inBrush: SlateBrush): Unit

  @JsName("GetDynamicMaterial")
  public open fun getDynamicMaterial(): MaterialInstanceDynamic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UImage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UImage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UImage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UImage

    @JsName("C")
    public fun copy(other: UObject): UImage

    @JsName("C")
    public fun copy(other: Any): UImage
  }
}

public open external class InputChord {
  @JsName("Key")
  public open var key: Key

  @JsName("bShift")
  public open var shift: Boolean

  @JsName("bCtrl")
  public open var ctrl: Boolean

  @JsName("bAlt")
  public open var alt: Boolean

  @JsName("bCmd")
  public open var cmd: Boolean

  public open fun clone(): InputChord

  @JsName("EqualEqual_InputChordInputChord")
  public open fun equalEqualInputChordInputChord(b: InputChord): Boolean

  @JsName("InputChord_GetDisplayName")
  public open fun inputChordGetDisplayName(): String

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InputChord

    @JsName("C")
    public fun copy(other: Any): InputChord

    @JsName("EqualEqual_InputChordInputChord")
    public fun equalEqualInputChordInputChord(a: InputChord, b: InputChord): Boolean

    @JsName("InputChord_GetDisplayName")
    public fun inputChordGetDisplayName(key: InputChord): String
  }
}

public open external class InputKeySelector(
  outer: UObject,
) : Widget {
  @JsName("WidgetStyle")
  public open var widgetStyle: ButtonStyle

  @JsName("TextStyle")
  public open var textStyle: TextBlockStyle

  @JsName("SelectedKey")
  public open var selectedKey: InputChord

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("Margin")
  public open var margin: Margin

  @JsName("ColorAndOpacity")
  public open var colorAndOpacity: LinearColor

  @JsName("KeySelectionText")
  public open var keySelectionText: String

  @JsName("NoKeySpecifiedText")
  public open var noKeySpecifiedText: String

  @JsName("bAllowModifierKeys")
  public open var allowModifierKeys: Boolean

  @JsName("bAllowGamepadKeys")
  public open var allowGamepadKeys: Boolean

  @JsName("EscapeKeys")
  public open var escapeKeys: Array<Key>

  @JsName("OnKeySelected")
  public open var onKeySelected: UnrealEngineMulticastDelegate<(SelectedKey: InputChord) -> Unit>

  @JsName("OnIsSelectingKeyChanged")
  public open var onIsSelectingKeyChanged: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("SetTextBlockVisibility")
  public open fun setTextBlockVisibility(inVisibility: String): Unit

  @JsName("SetSelectedKey")
  public open fun setSelectedKey(inSelectedKey: InputChord): Unit

  @JsName("SetNoKeySpecifiedText")
  public open fun setNoKeySpecifiedText(inNoKeySpecifiedText: String): Unit

  @JsName("SetKeySelectionText")
  public open fun setKeySelectionText(inKeySelectionText: String): Unit

  @JsName("SetEscapeKeys")
  public open fun setEscapeKeys(inKeys: Array<Key>): Unit

  @JsName("SetAllowModifierKeys")
  public open fun setAllowModifierKeys(inAllowModifierKeys: Boolean): Unit

  @JsName("SetAllowGamepadKeys")
  public open fun setAllowGamepadKeys(inAllowGamepadKeys: Boolean): Unit

  @JsName("GetIsSelectingKey")
  public open fun getIsSelectingKey(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InputKeySelector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InputKeySelector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InputKeySelector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InputKeySelector

    @JsName("C")
    public fun copy(other: UObject): InputKeySelector

    @JsName("C")
    public fun copy(other: Any): InputKeySelector
  }
}

public open external class Int32Binding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetValue")
  public open fun getValue(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Int32Binding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Int32Binding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Int32Binding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Int32Binding

    @JsName("C")
    public fun copy(other: UObject): Int32Binding

    @JsName("C")
    public fun copy(other: Any): Int32Binding
  }
}

public open external class InvalidationBox(
  outer: UObject,
) : ContentWidget {
  @JsName("bCanCache")
  public open var canCache: Boolean

  @JsName("CacheRelativeTransforms")
  public open var cacheRelativeTransforms: Boolean

  @JsName("SetCanCache")
  public open fun setCanCache(canCache: Boolean): Unit

  @JsName("InvalidateCache")
  public open fun invalidateCache(): Unit

  @JsName("GetCanCache")
  public open fun getCanCache(): Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InvalidationBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InvalidationBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InvalidationBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InvalidationBox

    @JsName("C")
    public fun copy(other: UObject): InvalidationBox

    @JsName("C")
    public fun copy(other: Any): InvalidationBox
  }
}

public open external class UserListEntry(
  outer: UObject,
) : Interface {
  @JsName("BP_OnItemSelectionChanged")
  public open fun bpOnItemSelectionChanged(isSelected: Boolean): Unit

  @JsName("BP_OnItemExpansionChanged")
  public open fun bpOnItemExpansionChanged(isExpanded: Boolean): Unit

  @JsName("BP_OnEntryReleased")
  public open fun bpOnEntryReleased(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserListEntry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserListEntry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserListEntry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserListEntry

    @JsName("C")
    public fun copy(other: UObject): UserListEntry

    @JsName("C")
    public fun copy(other: Any): UserListEntry
  }
}

public open external class UserListEntryLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserListEntryLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserListEntryLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserListEntryLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserListEntryLibrary

    @JsName("C")
    public fun copy(other: UObject): UserListEntryLibrary

    @JsName("C")
    public fun copy(other: Any): UserListEntryLibrary
  }
}

public open external class UserObjectListEntry(
  outer: UObject,
) : UserListEntry {
  @JsName("OnListItemObjectSet")
  public open fun onListItemObjectSet(listItemObject: UObject): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserObjectListEntry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserObjectListEntry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserObjectListEntry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserObjectListEntry

    @JsName("C")
    public fun copy(other: UObject): UserObjectListEntry

    @JsName("C")
    public fun copy(other: Any): UserObjectListEntry
  }
}

public open external class UserObjectListEntryLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserObjectListEntryLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserObjectListEntryLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserObjectListEntryLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserObjectListEntryLibrary

    @JsName("C")
    public fun copy(other: UObject): UserObjectListEntryLibrary

    @JsName("C")
    public fun copy(other: Any): UserObjectListEntryLibrary
  }
}

public open external class ListViewBase(
  outer: UObject,
) : Widget {
  @JsName("EntryWidgetClass")
  public open var entryWidgetClass: UnrealEngineClass

  @JsName("WheelScrollMultiplier")
  public open var wheelScrollMultiplier: Number

  @JsName("bEnableScrollAnimation")
  public open var enableScrollAnimation: Boolean

  @JsName("AllowOverscroll")
  public open var allowOverscroll: Boolean

  @JsName("bEnableRightClickScrolling")
  public open var enableRightClickScrolling: Boolean

  @JsName("bEnableFixedLineOffset")
  public open var enableFixedLineOffset: Boolean

  @JsName("FixedLineScrollOffset")
  public open var fixedLineScrollOffset: Number

  @JsName("bAllowDragging")
  public open var allowDragging: Boolean

  @JsName("BP_OnEntryGenerated")
  public open var bpOnEntryGenerated: UnrealEngineMulticastDelegate<(Widget: UserWidget) -> Unit>

  @JsName("BP_OnEntryReleased")
  public open var bpOnEntryReleased: UnrealEngineMulticastDelegate<(Widget: UserWidget) -> Unit>

  @JsName("NumDesignerPreviewEntries")
  public open var numDesignerPreviewEntries: Number

  @JsName("EntryWidgetPool")
  public open var entryWidgetPool: UserWidgetPool

  @JsName("SetWheelScrollMultiplier")
  public open fun setWheelScrollMultiplier(newWheelScrollMultiplier: Number): Unit

  @JsName("SetScrollOffset")
  public open fun setScrollOffset(inScrollOffset: Number): Unit

  @JsName("SetScrollbarVisibility")
  public open fun setScrollbarVisibility(inVisibility: String): Unit

  @JsName("ScrollToTop")
  public open fun scrollToTop(): Unit

  @JsName("ScrollToBottom")
  public open fun scrollToBottom(): Unit

  @JsName("RequestRefresh")
  public open fun requestRefresh(): Unit

  @JsName("RegenerateAllEntries")
  public open fun regenerateAllEntries(): Unit

  @JsName("GetScrollOffset")
  public open fun getScrollOffset(): Number

  @JsName("GetDisplayedEntryWidgets")
  public open fun getDisplayedEntryWidgets(): Array<UserWidget>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ListViewBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ListViewBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ListViewBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ListViewBase

    @JsName("C")
    public fun copy(other: UObject): ListViewBase

    @JsName("C")
    public fun copy(other: Any): ListViewBase
  }
}

public open external class TableViewStyle : SlateWidgetStyle {
  @JsName("BackgroundBrush")
  public open var backgroundBrush: SlateBrush

  public override fun clone(): TableViewStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): TableViewStyle

    @JsName("C")
    public fun copy(other: Any): TableViewStyle
  }
}

@JsName("EOrientation")
public external object Orientation {
  @JsName("Orient_Horizontal")
  public var Horizontal: String

  @JsName("Orient_Vertical")
  public var Vertical: String

  @JsName("Orient_MAX")
  public var Max: String
}

@JsName("ESelectionMode")
public external object SelectionMode {
  public var None: String

  public var Single: String

  public var SingleToggle: String

  public var Multi: String

  @JsName("ESelectionMode_MAX")
  public var Max: String
}

@JsName("EConsumeMouseWheel")
public external object ConsumeMouseWheel {
  public var WhenScrollingPossible: String

  public var Always: String

  public var Never: String

  @JsName("EConsumeMouseWheel_MAX")
  public var Max: String
}

@JsName("T$652")
public external interface Object652 {
  @JsName("Items")
  public var items: Array<UObject>

  @JsName("$")
  public var value: Boolean
}

public open external class ListView(
  outer: UObject,
) : ListViewBase {
  @JsName("WidgetStyle")
  public open var widgetStyle: TableViewStyle

  @JsName("ScrollBarStyle")
  public open var scrollBarStyle: ScrollBarStyle

  @JsName("Orientation")
  public open var orientation: String

  @JsName("SelectionMode")
  public open var selectionMode: String

  @JsName("ConsumeMouseWheel")
  public open var consumeMouseWheel: String

  @JsName("bClearSelectionOnClick")
  public open var clearSelectionOnClick: Boolean

  @JsName("bIsFocusable")
  public open var isFocusable: Boolean

  @JsName("EntrySpacing")
  public open var entrySpacing: Number

  @JsName("bReturnFocusToSelection")
  public open var returnFocusToSelection: Boolean

  @JsName("ListItems")
  public open var listItems: Array<UObject>

  @JsName("BP_OnEntryInitialized")
  public open var bpOnEntryInitialized: UnrealEngineMulticastDelegate<(Item: UObject,
      Widget: UserWidget) -> Unit>

  @JsName("BP_OnItemClicked")
  public open var bpOnItemClicked: UnrealEngineMulticastDelegate<(Item: UObject) -> Unit>

  @JsName("BP_OnItemDoubleClicked")
  public open var bpOnItemDoubleClicked: UnrealEngineMulticastDelegate<(Item: UObject) -> Unit>

  @JsName("BP_OnItemIsHoveredChanged")
  public open var bpOnItemIsHoveredChanged: UnrealEngineMulticastDelegate<(Item: UObject,
      bIsHovered: Boolean) -> Unit>

  @JsName("BP_OnItemSelectionChanged")
  public open var bpOnItemSelectionChanged: UnrealEngineMulticastDelegate<(Item: UObject,
      bIsSelected: Boolean) -> Unit>

  @JsName("BP_OnItemScrolledIntoView")
  public open var bpOnItemScrolledIntoView: UnrealEngineMulticastDelegate<(Item: UObject,
      Widget: UserWidget) -> Unit>

  @JsName("SetSelectionMode")
  public open fun setSelectionMode(selectionMode: String): Unit

  @JsName("SetSelectedIndex")
  public open fun setSelectedIndex(index: Number): Unit

  @JsName("ScrollIndexIntoView")
  public open fun scrollIndexIntoView(index: Number): Unit

  @JsName("RemoveItem")
  public open fun removeItem(item: UObject): Unit

  @JsName("OnListItemOuterEndPlayed")
  public open fun onListItemOuterEndPlayed(itemOuter: Actor, endPlayReason: String): Unit

  @JsName("OnListItemEndPlayed")
  public open fun onListItemEndPlayed(item: Actor, endPlayReason: String): Unit

  @JsName("NavigateToIndex")
  public open fun navigateToIndex(index: Number): Unit

  @JsName("IsRefreshPending")
  public open fun isRefreshPending(): Boolean

  @JsName("GetNumItems")
  public open fun getNumItems(): Number

  @JsName("GetListItems")
  public open fun getListItems(): Array<UObject>

  @JsName("GetItemAt")
  public open fun getItemAt(index: Number): UObject

  @JsName("GetIndexForItem")
  public open fun getIndexForItem(item: UObject): Number

  @JsName("ClearListItems")
  public open fun clearListItems(): Unit

  @JsName("BP_SetSelectedItem")
  public open fun bpSetSelectedItem(item: UObject): Unit

  @JsName("BP_SetListItems")
  public open fun bpSetListItems(inListItems: Array<UObject>): Unit

  @JsName("BP_SetItemSelection")
  public open fun bpSetItemSelection(item: UObject, selected: Boolean): Unit

  @JsName("BP_ScrollItemIntoView")
  public open fun bpScrollItemIntoView(item: UObject): Unit

  @JsName("BP_NavigateToItem")
  public open fun bpNavigateToItem(item: UObject): Unit

  @JsName("BP_IsItemVisible")
  public open fun bpIsItemVisible(item: UObject): Boolean

  @JsName("BP_GetSelectedItems")
  public open fun bpGetSelectedItems(items: Array<UObject>): Object652

  @JsName("BP_GetSelectedItem")
  public open fun bpGetSelectedItem(): UObject

  @JsName("BP_GetNumItemsSelected")
  public open fun bpGetNumItemsSelected(): Number

  @JsName("BP_ClearSelection")
  public open fun bpClearSelection(): Unit

  @JsName("BP_CancelScrollIntoView")
  public open fun bpCancelScrollIntoView(): Unit

  @JsName("AddItem")
  public open fun addItem(item: UObject): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ListView

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ListView

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ListView

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ListView

    @JsName("C")
    public fun copy(other: UObject): ListView

    @JsName("C")
    public fun copy(other: Any): ListView
  }
}

public open external class ListViewDesignerPreviewItem(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ListViewDesignerPreviewItem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ListViewDesignerPreviewItem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ListViewDesignerPreviewItem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ListViewDesignerPreviewItem

    @JsName("C")
    public fun copy(other: UObject): ListViewDesignerPreviewItem

    @JsName("C")
    public fun copy(other: Any): ListViewDesignerPreviewItem
  }
}

@JsName("EMenuPlacement")
public external object MenuPlacement {
  @JsName("MenuPlacement_BelowAnchor")
  public var BelowAnchor: String

  @JsName("MenuPlacement_CenteredBelowAnchor")
  public var CenteredBelowAnchor: String

  @JsName("MenuPlacement_BelowRightAnchor")
  public var BelowRightAnchor: String

  @JsName("MenuPlacement_ComboBox")
  public var ComboBox: String

  @JsName("MenuPlacement_ComboBoxRight")
  public var ComboBoxRight: String

  @JsName("MenuPlacement_MenuRight")
  public var MenuRight: String

  @JsName("MenuPlacement_AboveAnchor")
  public var AboveAnchor: String

  @JsName("MenuPlacement_CenteredAboveAnchor")
  public var CenteredAboveAnchor: String

  @JsName("MenuPlacement_AboveRightAnchor")
  public var AboveRightAnchor: String

  @JsName("MenuPlacement_MenuLeft")
  public var MenuLeft: String

  @JsName("MenuPlacement_Center")
  public var Center: String

  @JsName("MenuPlacement_RightLeftCenter")
  public var RightLeftCenter: String

  @JsName("MenuPlacement_MatchBottomLeft")
  public var MatchBottomLeft: String

  @JsName("MenuPlacement_MAX")
  public var Max: String
}

public open external class MenuAnchor(
  outer: UObject,
) : ContentWidget {
  @JsName("MenuClass")
  public open var menuClass: UnrealEngineClass

  @JsName("OnGetMenuContentEvent")
  public open var onGetMenuContentEvent: UnrealEngineDelegate<() -> Widget>

  @JsName("OnGetUserMenuContentEvent")
  public open var onGetUserMenuContentEvent: UnrealEngineDelegate<() -> UserWidget>

  public open var PLACEMENT: String

  @JsName("bFitInWindow")
  public open var fitInWindow: Boolean

  @JsName("ShouldDeferPaintingAfterWindowContent")
  public open var shouldDeferPaintingAfterWindowContent: Boolean

  @JsName("UseApplicationMenuStack")
  public open var useApplicationMenuStack: Boolean

  @JsName("OnMenuOpenChanged")
  public open var onMenuOpenChanged: UnrealEngineMulticastDelegate<(bIsOpen: Boolean) -> Unit>

  @JsName("ToggleOpen")
  public open fun toggleOpen(focusOnOpen: Boolean): Unit

  @JsName("ShouldOpenDueToClick")
  public open fun shouldOpenDueToClick(): Boolean

  @JsName("SetPlacement")
  public open fun setPlacement(inPlacement: String): Unit

  @JsName("Open")
  public open fun open(focusMenu: Boolean): Unit

  @JsName("IsOpen")
  public open fun isOpen(): Boolean

  @JsName("HasOpenSubMenus")
  public open fun hasOpenSubMenus(): Boolean

  @JsName("GetMenuPosition")
  public open fun getMenuPosition(): Vector2d

  @JsName("FitInWindow")
  public open fun fitInWindow(fit: Boolean): Unit

  @JsName("Close")
  public open fun close(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MenuAnchor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MenuAnchor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MenuAnchor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MenuAnchor

    @JsName("C")
    public fun copy(other: UObject): MenuAnchor

    @JsName("C")
    public fun copy(other: Any): MenuAnchor
  }
}

public open external class MouseCursorBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetValue")
  public open fun getValue(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MouseCursorBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MouseCursorBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MouseCursorBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MouseCursorBinding

    @JsName("C")
    public fun copy(other: UObject): MouseCursorBinding

    @JsName("C")
    public fun copy(other: Any): MouseCursorBinding
  }
}

public open external class MovieSceneEntitySystem(
  outer: UObject,
) : UObject {
  @JsName("Linker")
  public open var linker: MovieSceneEntitySystemLinker

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEntitySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEntitySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEntitySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEntitySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEntitySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneEntitySystem
  }
}

public open external class MovieSceneEntityInstantiatorSystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneEntityInstantiatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneEntityInstantiatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneEntityInstantiatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneEntityInstantiatorSystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneEntityInstantiatorSystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneEntityInstantiatorSystem
  }
}

public open external class MovieScenePropertyInstantiatorSystem(
  outer: UObject,
) : MovieSceneEntityInstantiatorSystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePropertyInstantiatorSystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePropertyInstantiatorSystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePropertyInstantiatorSystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePropertyInstantiatorSystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePropertyInstantiatorSystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePropertyInstantiatorSystem
  }
}

public open external class MovieScenePropertySystem(
  outer: UObject,
) : MovieSceneEntitySystem {
  @JsName("InstantiatorSystem")
  public open var instantiatorSystem: MovieScenePropertyInstantiatorSystem

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieScenePropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieScenePropertySystem
  }
}

@JsName("MovieScene2DTransformPropertySystem")
public open external class MovieScene2dTransformPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene2dTransformPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene2dTransformPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene2dTransformPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene2dTransformPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieScene2dTransformPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieScene2dTransformPropertySystem
  }
}

@JsName("MovieScene2DTransformMask")
public open external class MovieScene2dTransformMask {
  public open var mask: Any

  public open fun clone(): MovieScene2dTransformMask

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieScene2dTransformMask

    @JsName("C")
    public fun copy(other: Any): MovieScene2dTransformMask
  }
}

@JsName("MovieScene2DTransformSection")
public open external class MovieScene2dTransformSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("TransformMask")
  public open var transformMask: MovieScene2dTransformMask

  @JsName("Translation")
  public open var translation: MovieSceneFloatChannel

  @JsName("Rotation")
  public open var rotation: MovieSceneFloatChannel

  @JsName("Scale")
  public open var scale: MovieSceneFloatChannel

  @JsName("Shear")
  public open var shear: MovieSceneFloatChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene2dTransformSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene2dTransformSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene2dTransformSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene2dTransformSection

    @JsName("C")
    public fun copy(other: UObject): MovieScene2dTransformSection

    @JsName("C")
    public fun copy(other: Any): MovieScene2dTransformSection
  }
}

public open external class MovieScenePropertyBinding {
  @JsName("PropertyName")
  public open var propertyName: String

  @JsName("PropertyPath")
  public open var propertyPath: String

  @JsName("bCanUseClassLookup")
  public open var canUseClassLookup: Boolean

  public open fun clone(): MovieScenePropertyBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): MovieScenePropertyBinding

    @JsName("C")
    public fun copy(other: Any): MovieScenePropertyBinding
  }
}

public open external class MovieScenePropertyTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("UniqueTrackName")
  public open var uniqueTrackName: String

  @JsName("PropertyName")
  public open var propertyName: String

  @JsName("PropertyPath")
  public open var propertyPath: String

  @JsName("SectionToKey")
  public open var sectionToKey: MovieSceneSection

  @JsName("PropertyBinding")
  public open var propertyBinding: MovieScenePropertyBinding

  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  @JsName("GetPropertyName")
  public open fun getPropertyName(): String

  @JsName("GetPropertyPath")
  public open fun getPropertyPath(): String

  @JsName("GetUniqueTrackName")
  public open fun getUniqueTrackName(): String

  @JsName("SetPropertyNameAndPath")
  public open fun setPropertyNameAndPath(inPropertyName: String, inPropertyPath: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScenePropertyTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScenePropertyTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScenePropertyTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScenePropertyTrack

    @JsName("C")
    public fun copy(other: UObject): MovieScenePropertyTrack

    @JsName("C")
    public fun copy(other: Any): MovieScenePropertyTrack

    @JsName("GetPropertyName")
    public fun getPropertyName(track: MovieScenePropertyTrack): String

    @JsName("GetPropertyPath")
    public fun getPropertyPath(track: MovieScenePropertyTrack): String

    @JsName("GetUniqueTrackName")
    public fun getUniqueTrackName(track: MovieScenePropertyTrack): String

    @JsName("SetPropertyNameAndPath")
    public fun setPropertyNameAndPath(
      track: MovieScenePropertyTrack,
      inPropertyName: String,
      inPropertyPath: String,
    ): Unit
  }
}

@JsName("MovieScene2DTransformTrack")
public open external class MovieScene2dTransformTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieScene2dTransformTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieScene2dTransformTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieScene2dTransformTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieScene2dTransformTrack

    @JsName("C")
    public fun copy(other: UObject): MovieScene2dTransformTrack

    @JsName("C")
    public fun copy(other: Any): MovieScene2dTransformTrack
  }
}

public open external class MovieSceneMarginPropertySystem(
  outer: UObject,
) : MovieScenePropertySystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMarginPropertySystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMarginPropertySystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMarginPropertySystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMarginPropertySystem

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMarginPropertySystem

    @JsName("C")
    public fun copy(other: Any): MovieSceneMarginPropertySystem
  }
}

public open external class MovieSceneMarginSection(
  outer: UObject,
) : MovieSceneSection {
  @JsName("TopCurve")
  public open var topCurve: MovieSceneFloatChannel

  @JsName("LeftCurve")
  public open var leftCurve: MovieSceneFloatChannel

  @JsName("RightCurve")
  public open var rightCurve: MovieSceneFloatChannel

  @JsName("BottomCurve")
  public open var bottomCurve: MovieSceneFloatChannel

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMarginSection

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMarginSection

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMarginSection

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMarginSection

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMarginSection

    @JsName("C")
    public fun copy(other: Any): MovieSceneMarginSection
  }
}

public open external class MovieSceneMarginTrack(
  outer: UObject,
) : MovieScenePropertyTrack {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMarginTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMarginTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMarginTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMarginTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMarginTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneMarginTrack
  }
}

public open external class MovieSceneMaterialTrack(
  outer: UObject,
) : MovieSceneNameableTrack {
  @JsName("Sections")
  public open var sections: Array<MovieSceneSection>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneMaterialTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneMaterialTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneMaterialTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneMaterialTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneMaterialTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneMaterialTrack
  }
}

public open external class MovieSceneWidgetMaterialTrack(
  outer: UObject,
) : MovieSceneMaterialTrack {
  @JsName("BrushPropertyNamePath")
  public open var brushPropertyNamePath: Array<String>

  @JsName("TrackName")
  public open var trackName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MovieSceneWidgetMaterialTrack

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MovieSceneWidgetMaterialTrack

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MovieSceneWidgetMaterialTrack

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MovieSceneWidgetMaterialTrack

    @JsName("C")
    public fun copy(other: UObject): MovieSceneWidgetMaterialTrack

    @JsName("C")
    public fun copy(other: Any): MovieSceneWidgetMaterialTrack
  }
}

@JsName("ETextWrappingPolicy")
public external object TextWrappingPolicy {
  public var DefaultWrapping: String

  public var AllowPerCharacterWrapping: String

  @JsName("ETextWrappingPolicy_MAX")
  public var Max: String
}

public open external class TextLayoutWidget(
  outer: UObject,
) : Widget {
  @JsName("ShapedTextOptions")
  public open var shapedTextOptions: ShapedTextOptions

  @JsName("Justification")
  public open var justification: String

  @JsName("WrappingPolicy")
  public open var wrappingPolicy: String

  @JsName("AutoWrapText")
  public open var autoWrapText: Boolean

  @JsName("WrapTextAt")
  public open var wrapTextAt: Number

  @JsName("Margin")
  public open var margin: Margin

  @JsName("LineHeightPercentage")
  public open var lineHeightPercentage: Number

  @JsName("SetJustification")
  public open fun setJustification(inJustification: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextLayoutWidget

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextLayoutWidget

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextLayoutWidget

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextLayoutWidget

    @JsName("C")
    public fun copy(other: UObject): TextLayoutWidget

    @JsName("C")
    public fun copy(other: Any): TextLayoutWidget
  }
}

public open external class MultiLineEditableText(
  outer: UObject,
) : TextLayoutWidget {
  public open var text: String

  @JsName("HintText")
  public open var hintText: String

  @JsName("HintTextDelegate")
  public open var hintTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("WidgetStyle")
  public open var widgetStyle: TextBlockStyle

  @JsName("bIsReadOnly")
  public open var isReadOnly: Boolean

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("SelectAllTextWhenFocused")
  public open var selectAllTextWhenFocused: Boolean

  @JsName("ClearTextSelectionOnFocusLoss")
  public open var clearTextSelectionOnFocusLoss: Boolean

  @JsName("RevertTextOnEscape")
  public open var revertTextOnEscape: Boolean

  @JsName("ClearKeyboardFocusOnCommit")
  public open var clearKeyboardFocusOnCommit: Boolean

  @JsName("AllowContextMenu")
  public open var allowContextMenu: Boolean

  @JsName("VirtualKeyboardOptions")
  public open var virtualKeyboardOptions: VirtualKeyboardOptions

  @JsName("VirtualKeyboardDismissAction")
  public open var virtualKeyboardDismissAction: String

  @JsName("OnTextChanged")
  public open var onTextChanged: UnrealEngineMulticastDelegate<(text: String) -> Unit>

  @JsName("OnTextCommitted")
  public open var onTextCommitted: UnrealEngineMulticastDelegate<(text: String,
      CommitMethod: String) -> Unit>

  @JsName("SetWidgetStyle")
  public open fun setWidgetStyle(inWidgetStyle: TextBlockStyle): Unit

  @JsName("SetText")
  public open fun setText(inText: String): Unit

  @JsName("SetIsReadOnly")
  public open fun setIsReadOnly(readOnly: Boolean): Unit

  @JsName("SetHintText")
  public open fun setHintText(inHintText: String): Unit

  @JsName("GetText")
  public open fun getText(): String

  @JsName("GetHintText")
  public open fun getHintText(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MultiLineEditableText

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MultiLineEditableText

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MultiLineEditableText

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MultiLineEditableText

    @JsName("C")
    public fun copy(other: UObject): MultiLineEditableText

    @JsName("C")
    public fun copy(other: Any): MultiLineEditableText
  }
}

public open external class MultiLineEditableTextBox(
  outer: UObject,
) : TextLayoutWidget {
  public open var text: String

  @JsName("HintText")
  public open var hintText: String

  @JsName("HintTextDelegate")
  public open var hintTextDelegate: UnrealEngineDelegate<() -> String>

  @JsName("WidgetStyle")
  public open var widgetStyle: EditableTextBoxStyle

  @JsName("TextStyle")
  public open var textStyle: TextBlockStyle

  @JsName("bIsReadOnly")
  public open var isReadOnly: Boolean

  @JsName("AllowContextMenu")
  public open var allowContextMenu: Boolean

  @JsName("VirtualKeyboardOptions")
  public open var virtualKeyboardOptions: VirtualKeyboardOptions

  @JsName("VirtualKeyboardDismissAction")
  public open var virtualKeyboardDismissAction: String

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("ForegroundColor")
  public open var foregroundColor: LinearColor

  @JsName("BackgroundColor")
  public open var backgroundColor: LinearColor

  @JsName("ReadOnlyForegroundColor")
  public open var readOnlyForegroundColor: LinearColor

  @JsName("OnTextChanged")
  public open var onTextChanged: UnrealEngineMulticastDelegate<(text: String) -> Unit>

  @JsName("OnTextCommitted")
  public open var onTextCommitted: UnrealEngineMulticastDelegate<(text: String,
      CommitMethod: String) -> Unit>

  @JsName("SetTextStyle")
  public open fun setTextStyle(inTextStyle: TextBlockStyle): Unit

  @JsName("SetText")
  public open fun setText(inText: String): Unit

  @JsName("SetIsReadOnly")
  public open fun setIsReadOnly(readOnly: Boolean): Unit

  @JsName("SetHintText")
  public open fun setHintText(inHintText: String): Unit

  @JsName("SetForegroundColor")
  public open fun setForegroundColor(color: LinearColor): Unit

  @JsName("SetError")
  public open fun setError(inError: String): Unit

  @JsName("GetText")
  public open fun getText(): String

  @JsName("GetHintText")
  public open fun getHintText(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): MultiLineEditableTextBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): MultiLineEditableTextBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MultiLineEditableTextBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MultiLineEditableTextBox

    @JsName("C")
    public fun copy(other: UObject): MultiLineEditableTextBox

    @JsName("C")
    public fun copy(other: Any): MultiLineEditableTextBox
  }
}

public open external class NamedSlot(
  outer: UObject,
) : ContentWidget {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NamedSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NamedSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NamedSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NamedSlot

    @JsName("C")
    public fun copy(other: UObject): NamedSlot

    @JsName("C")
    public fun copy(other: Any): NamedSlot
  }
}

public open external class NamedSlotInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NamedSlotInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NamedSlotInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NamedSlotInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NamedSlotInterface

    @JsName("C")
    public fun copy(other: UObject): NamedSlotInterface

    @JsName("C")
    public fun copy(other: Any): NamedSlotInterface
  }
}

public open external class NativeWidgetHost(
  outer: UObject,
) : Widget {
  @JsName("SetContent")
  public open fun setContent(slateWidget: JavascriptSlateWidget): Widget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NativeWidgetHost

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NativeWidgetHost

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NativeWidgetHost

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NativeWidgetHost

    @JsName("C")
    public fun copy(other: UObject): NativeWidgetHost

    @JsName("C")
    public fun copy(other: Any): NativeWidgetHost

    @JsName("SetContent")
    public fun setContent(targetWidget: NativeWidgetHost, slateWidget: JavascriptSlateWidget):
        Widget
  }
}

public open external class Overlay(
  outer: UObject,
) : PanelWidget {
  @JsName("AddChildToOverlay")
  public open fun addChildToOverlay(content: Widget): OverlaySlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Overlay

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Overlay

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Overlay

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Overlay

    @JsName("C")
    public fun copy(other: UObject): Overlay

    @JsName("C")
    public fun copy(other: Any): Overlay
  }
}

@JsName("EProgressBarFillType")
public external object ProgressBarFillType {
  public var LeftToRight: String

  public var RightToLeft: String

  public var FillFromCenter: String

  public var FillFromCenterHorizontal: String

  public var FillFromCenterVertical: String

  public var TopToBottom: String

  public var BottomToTop: String

  @JsName("EProgressBarFillType_MAX")
  public var Max: String
}

@JsName("EProgressBarFillStyle")
public external object ProgressBarFillStyle {
  public var Mask: String

  public var Scale: String

  @JsName("EProgressBarFillStyle_MAX")
  public var Max: String
}

public open external class ProgressBar(
  outer: UObject,
) : Widget {
  @JsName("WidgetStyle")
  public open var widgetStyle: ProgressBarStyle

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("BackgroundImage")
  public open var backgroundImage: SlateBrushAsset

  @JsName("FillImage")
  public open var fillImage: SlateBrushAsset

  @JsName("MarqueeImage")
  public open var marqueeImage: SlateBrushAsset

  @JsName("Percent")
  public open var percent: Number

  @JsName("BarFillType")
  public open var barFillType: String

  @JsName("BarFillStyle")
  public open var barFillStyle: String

  @JsName("bIsMarquee")
  public open var isMarquee: Boolean

  @JsName("BorderPadding")
  public open var borderPadding: Vector2d

  @JsName("PercentDelegate")
  public open var percentDelegate: UnrealEngineDelegate<() -> Number>

  @JsName("FillColorAndOpacity")
  public open var fillColorAndOpacity: LinearColor

  @JsName("FillColorAndOpacityDelegate")
  public open var fillColorAndOpacityDelegate: UnrealEngineDelegate<() -> LinearColor>

  @JsName("SetPercent")
  public open fun setPercent(inPercent: Number): Unit

  @JsName("SetIsMarquee")
  public open fun setIsMarquee(inbIsMarquee: Boolean): Unit

  @JsName("SetFillColorAndOpacity")
  public open fun setFillColorAndOpacity(inColor: LinearColor): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ProgressBar

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ProgressBar

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ProgressBar

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ProgressBar

    @JsName("C")
    public fun copy(other: UObject): ProgressBar

    @JsName("C")
    public fun copy(other: Any): ProgressBar
  }
}

public open external class RetainerBox(
  outer: UObject,
) : ContentWidget {
  @JsName("bRetainRender")
  public open var retainRender: Boolean

  @JsName("RenderOnInvalidation")
  public open var renderOnInvalidation: Boolean

  @JsName("RenderOnPhase")
  public open var renderOnPhase: Boolean

  @JsName("Phase")
  public open var phase: Number

  @JsName("PhaseCount")
  public open var phaseCount: Number

  @JsName("EffectMaterial")
  public open var effectMaterial: MaterialInterface

  @JsName("TextureParameter")
  public open var textureParameter: String

  @JsName("SetTextureParameter")
  public open fun setTextureParameter(textureParameter: String): Unit

  @JsName("SetRetainRendering")
  public open fun setRetainRendering(inRetainRendering: Boolean): Unit

  @JsName("SetRenderingPhase")
  public open fun setRenderingPhase(renderPhase: Number, totalPhases: Number): Unit

  @JsName("SetEffectMaterial")
  public open fun setEffectMaterial(effectMaterial: MaterialInterface): Unit

  @JsName("RequestRender")
  public open fun requestRender(): Unit

  @JsName("GetEffectMaterial")
  public open fun getEffectMaterial(): MaterialInstanceDynamic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RetainerBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RetainerBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RetainerBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RetainerBox

    @JsName("C")
    public fun copy(other: UObject): RetainerBox

    @JsName("C")
    public fun copy(other: Any): RetainerBox
  }
}

public open external class RichTextBlockDecorator(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RichTextBlockDecorator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RichTextBlockDecorator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RichTextBlockDecorator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RichTextBlockDecorator

    @JsName("C")
    public fun copy(other: UObject): RichTextBlockDecorator

    @JsName("C")
    public fun copy(other: Any): RichTextBlockDecorator
  }
}

@JsName("T$653")
public external interface InStrikeBrushProvider {
  @JsName("InStrikeBrush")
  public var inStrikeBrush: SlateBrush
}

public open external class RichTextBlock(
  outer: UObject,
) : TextLayoutWidget {
  public open var text: String

  @JsName("TextStyleSet")
  public open var textStyleSet: DataTable

  @JsName("DecoratorClasses")
  public open var decoratorClasses: Array<UnrealEngineClass>

  @JsName("bOverrideDefaultStyle")
  public open var overrideDefaultStyle: Boolean

  @JsName("DefaultTextStyleOverride")
  public open var defaultTextStyleOverride: TextBlockStyle

  @JsName("MinDesiredWidth")
  public open var minDesiredWidth: Number

  @JsName("TextTransformPolicy")
  public open var textTransformPolicy: String

  @JsName("TextOverflowPolicy")
  public open var textOverflowPolicy: String

  @JsName("DefaultTextStyle")
  public open var defaultTextStyle: TextBlockStyle

  @JsName("InstanceDecorators")
  public open var instanceDecorators: Array<RichTextBlockDecorator>

  @JsName("SetTextTransformPolicy")
  public open fun setTextTransformPolicy(inTransformPolicy: String): Unit

  @JsName("SetTextStyleSet")
  public open fun setTextStyleSet(newTextStyleSet: DataTable): Unit

  @JsName("SetTextOverflowPolicy")
  public open fun setTextOverflowPolicy(inOverflowPolicy: String): Unit

  @JsName("SetText")
  public open fun setText(inText: String): Unit

  @JsName("SetMinDesiredWidth")
  public open fun setMinDesiredWidth(inMinDesiredWidth: Number): Unit

  @JsName("SetDefaultTextStyle")
  public open fun setDefaultTextStyle(inDefaultTextStyle: TextBlockStyle): Unit

  @JsName("SetDefaultStrikeBrush")
  public open fun setDefaultStrikeBrush(inStrikeBrush: SlateBrush): InStrikeBrushProvider

  @JsName("SetDefaultShadowOffset")
  public open fun setDefaultShadowOffset(inShadowOffset: Vector2d): Unit

  @JsName("SetDefaultShadowColorAndOpacity")
  public open fun setDefaultShadowColorAndOpacity(inShadowColorAndOpacity: LinearColor): Unit

  @JsName("SetDefaultFont")
  public open fun setDefaultFont(inFontInfo: SlateFontInfo): Unit

  @JsName("SetDefaultColorAndOpacity")
  public open fun setDefaultColorAndOpacity(inColorAndOpacity: SlateColor): Unit

  @JsName("SetAutoWrapText")
  public open fun setAutoWrapText(inAutoTextWrap: Boolean): Unit

  @JsName("RefreshTextLayout")
  public open fun refreshTextLayout(): Unit

  @JsName("GetText")
  public open fun getText(): String

  @JsName("GetDefaultDynamicMaterial")
  public open fun getDefaultDynamicMaterial(): MaterialInstanceDynamic

  @JsName("GetDecoratorByClass")
  public open fun getDecoratorByClass(decoratorClass: UnrealEngineClass): RichTextBlockDecorator

  @JsName("ClearAllDefaultStyleOverrides")
  public open fun clearAllDefaultStyleOverrides(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RichTextBlock

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RichTextBlock

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RichTextBlock

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RichTextBlock

    @JsName("C")
    public fun copy(other: UObject): RichTextBlock

    @JsName("C")
    public fun copy(other: Any): RichTextBlock
  }
}

public open external class RichTextBlockImageDecorator(
  outer: UObject,
) : RichTextBlockDecorator {
  @JsName("ImageSet")
  public open var imageSet: DataTable

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): RichTextBlockImageDecorator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): RichTextBlockImageDecorator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): RichTextBlockImageDecorator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): RichTextBlockImageDecorator

    @JsName("C")
    public fun copy(other: UObject): RichTextBlockImageDecorator

    @JsName("C")
    public fun copy(other: Any): RichTextBlockImageDecorator
  }
}

public open external class SafeZone(
  outer: UObject,
) : ContentWidget {
  @JsName("PadLeft")
  public open var padLeft: Boolean

  @JsName("PadRight")
  public open var padRight: Boolean

  @JsName("PadTop")
  public open var padTop: Boolean

  @JsName("PadBottom")
  public open var padBottom: Boolean

  @JsName("SetSidesToPad")
  public open fun setSidesToPad(
    inPadLeft: Boolean,
    inPadRight: Boolean,
    inPadTop: Boolean,
    inPadBottom: Boolean,
  ): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SafeZone

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SafeZone

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SafeZone

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SafeZone

    @JsName("C")
    public fun copy(other: UObject): SafeZone

    @JsName("C")
    public fun copy(other: Any): SafeZone
  }
}

@JsName("EStretch")
public external object Stretch {
  public var None: String

  public var Fill: String

  public var ScaleToFit: String

  public var ScaleToFitX: String

  public var ScaleToFitY: String

  public var ScaleToFill: String

  public var ScaleBySafeZone: String

  public var UserSpecified: String

  @JsName("EStretch_MAX")
  public var Max: String
}

@JsName("EStretchDirection")
public external object StretchDirection {
  public var Both: String

  public var DownOnly: String

  public var UpOnly: String

  @JsName("EStretchDirection_MAX")
  public var Max: String
}

public open external class ScaleBox(
  outer: UObject,
) : ContentWidget {
  @JsName("Stretch")
  public open var stretch: String

  @JsName("StretchDirection")
  public open var stretchDirection: String

  @JsName("UserSpecifiedScale")
  public open var userSpecifiedScale: Number

  @JsName("IgnoreInheritedScale")
  public open var ignoreInheritedScale: Boolean

  @JsName("SetUserSpecifiedScale")
  public open fun setUserSpecifiedScale(inUserSpecifiedScale: Number): Unit

  @JsName("SetStretchDirection")
  public open fun setStretchDirection(inStretchDirection: String): Unit

  @JsName("SetStretch")
  public open fun setStretch(inStretch: String): Unit

  @JsName("SetIgnoreInheritedScale")
  public open fun setIgnoreInheritedScale(inIgnoreInheritedScale: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScaleBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScaleBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScaleBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScaleBox

    @JsName("C")
    public fun copy(other: UObject): ScaleBox

    @JsName("C")
    public fun copy(other: Any): ScaleBox
  }
}

public open external class ScrollBar(
  outer: UObject,
) : Widget {
  @JsName("WidgetStyle")
  public open var widgetStyle: ScrollBarStyle

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("bAlwaysShowScrollbar")
  public open var alwaysShowScrollbar: Boolean

  @JsName("bAlwaysShowScrollbarTrack")
  public open var alwaysShowScrollbarTrack: Boolean

  @JsName("Orientation")
  public open var orientation: String

  @JsName("Thickness")
  public open var thickness: Vector2d

  @JsName("Padding")
  public open var padding: Margin

  @JsName("SetState")
  public open fun setState(inOffsetFraction: Number, inThumbSizeFraction: Number): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScrollBar

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScrollBar

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScrollBar

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScrollBar

    @JsName("C")
    public fun copy(other: UObject): ScrollBar

    @JsName("C")
    public fun copy(other: Any): ScrollBar
  }
}

@JsName("EDescendantScrollDestination")
public external object DescendantScrollDestination {
  public var IntoView: String

  public var TopOrLeft: String

  public var Center: String

  public var BottomOrRight: String

  @JsName("EDescendantScrollDestination_MAX")
  public var Max: String
}

@JsName("EScrollWhenFocusChanges")
public external object ScrollWhenFocusChanges {
  public var NoScroll: String

  public var InstantScroll: String

  public var AnimatedScroll: String

  @JsName("EScrollWhenFocusChanges_MAX")
  public var Max: String
}

public open external class ScrollBox(
  outer: UObject,
) : PanelWidget {
  @JsName("WidgetStyle")
  public open var widgetStyle: ScrollBoxStyle

  @JsName("WidgetBarStyle")
  public open var widgetBarStyle: ScrollBarStyle

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("BarStyle")
  public open var barStyle: SlateWidgetStyleAsset

  @JsName("Orientation")
  public open var orientation: String

  @JsName("ScrollBarVisibility")
  public open var scrollBarVisibility: String

  @JsName("ConsumeMouseWheel")
  public open var consumeMouseWheel: String

  @JsName("ScrollbarThickness")
  public open var scrollbarThickness: Vector2d

  @JsName("ScrollbarPadding")
  public open var scrollbarPadding: Margin

  @JsName("AlwaysShowScrollbar")
  public open var alwaysShowScrollbar: Boolean

  @JsName("AlwaysShowScrollbarTrack")
  public open var alwaysShowScrollbarTrack: Boolean

  @JsName("AllowOverscroll")
  public open var allowOverscroll: Boolean

  @JsName("BackPadScrolling")
  public open var backPadScrolling: Boolean

  @JsName("FrontPadScrolling")
  public open var frontPadScrolling: Boolean

  @JsName("bAnimateWheelScrolling")
  public open var animateWheelScrolling: Boolean

  @JsName("NavigationDestination")
  public open var navigationDestination: String

  @JsName("NavigationScrollPadding")
  public open var navigationScrollPadding: Number

  @JsName("ScrollWhenFocusChanges")
  public open var scrollWhenFocusChanges: String

  @JsName("bAllowRightClickDragScrolling")
  public open var allowRightClickDragScrolling: Boolean

  @JsName("WheelScrollMultiplier")
  public open var wheelScrollMultiplier: Number

  @JsName("OnUserScrolled")
  public open var onUserScrolled: UnrealEngineMulticastDelegate<(CurrentOffset: Number) -> Unit>

  @JsName("SetWheelScrollMultiplier")
  public open fun setWheelScrollMultiplier(newWheelScrollMultiplier: Number): Unit

  @JsName("SetScrollWhenFocusChanges")
  public open fun setScrollWhenFocusChanges(newScrollWhenFocusChanges: String): Unit

  @JsName("SetScrollOffset")
  public open fun setScrollOffset(newScrollOffset: Number): Unit

  @JsName("SetScrollBarVisibility")
  public open fun setScrollBarVisibility(newScrollBarVisibility: String): Unit

  @JsName("SetScrollbarThickness")
  public open fun setScrollbarThickness(newScrollbarThickness: Vector2d): Unit

  @JsName("SetScrollbarPadding")
  public open fun setScrollbarPadding(newScrollbarPadding: Margin): Unit

  @JsName("SetOrientation")
  public open fun setOrientation(newOrientation: String): Unit

  @JsName("SetNavigationDestination")
  public open fun setNavigationDestination(newNavigationDestination: String): Unit

  @JsName("SetConsumeMouseWheel")
  public open fun setConsumeMouseWheel(newConsumeMouseWheel: String): Unit

  @JsName("SetAnimateWheelScrolling")
  public open fun setAnimateWheelScrolling(shouldAnimateWheelScrolling: Boolean): Unit

  @JsName("SetAlwaysShowScrollbar")
  public open fun setAlwaysShowScrollbar(newAlwaysShowScrollbar: Boolean): Unit

  @JsName("SetAllowOverscroll")
  public open fun setAllowOverscroll(newAllowOverscroll: Boolean): Unit

  @JsName("ScrollWidgetIntoView")
  public open fun scrollWidgetIntoView(
    widgetToFind: Widget,
    animateScroll: Boolean,
    scrollDestination: String,
    padding: Number,
  ): Unit

  @JsName("ScrollToStart")
  public open fun scrollToStart(): Unit

  @JsName("ScrollToEnd")
  public open fun scrollToEnd(): Unit

  @JsName("GetViewOffsetFraction")
  public open fun getViewOffsetFraction(): Number

  @JsName("GetScrollOffsetOfEnd")
  public open fun getScrollOffsetOfEnd(): Number

  @JsName("GetScrollOffset")
  public open fun getScrollOffset(): Number

  @JsName("EndInertialScrolling")
  public open fun endInertialScrolling(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScrollBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScrollBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScrollBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScrollBox

    @JsName("C")
    public fun copy(other: UObject): ScrollBox

    @JsName("C")
    public fun copy(other: Any): ScrollBox
  }
}

public open external class SizeBox(
  outer: UObject,
) : ContentWidget {
  @JsName("WidthOverride")
  public open var widthOverride: Number

  @JsName("HeightOverride")
  public open var heightOverride: Number

  @JsName("MinDesiredWidth")
  public open var minDesiredWidth: Number

  @JsName("MinDesiredHeight")
  public open var minDesiredHeight: Number

  @JsName("MaxDesiredWidth")
  public open var maxDesiredWidth: Number

  @JsName("MaxDesiredHeight")
  public open var maxDesiredHeight: Number

  @JsName("MinAspectRatio")
  public open var minAspectRatio: Number

  @JsName("MaxAspectRatio")
  public open var maxAspectRatio: Number

  @JsName("bOverride_WidthOverride")
  public open var overrideWidthOverride: Boolean

  @JsName("bOverride_HeightOverride")
  public open var overrideHeightOverride: Boolean

  @JsName("bOverride_MinDesiredWidth")
  public open var overrideMinDesiredWidth: Boolean

  @JsName("bOverride_MinDesiredHeight")
  public open var overrideMinDesiredHeight: Boolean

  @JsName("bOverride_MaxDesiredWidth")
  public open var overrideMaxDesiredWidth: Boolean

  @JsName("bOverride_MaxDesiredHeight")
  public open var overrideMaxDesiredHeight: Boolean

  @JsName("bOverride_MinAspectRatio")
  public open var overrideMinAspectRatio: Boolean

  @JsName("bOverride_MaxAspectRatio")
  public open var overrideMaxAspectRatio: Boolean

  @JsName("SetWidthOverride")
  public open fun setWidthOverride(inWidthOverride: Number): Unit

  @JsName("SetMinDesiredWidth")
  public open fun setMinDesiredWidth(inMinDesiredWidth: Number): Unit

  @JsName("SetMinDesiredHeight")
  public open fun setMinDesiredHeight(inMinDesiredHeight: Number): Unit

  @JsName("SetMinAspectRatio")
  public open fun setMinAspectRatio(inMinAspectRatio: Number): Unit

  @JsName("SetMaxDesiredWidth")
  public open fun setMaxDesiredWidth(inMaxDesiredWidth: Number): Unit

  @JsName("SetMaxDesiredHeight")
  public open fun setMaxDesiredHeight(inMaxDesiredHeight: Number): Unit

  @JsName("SetMaxAspectRatio")
  public open fun setMaxAspectRatio(inMaxAspectRatio: Number): Unit

  @JsName("SetHeightOverride")
  public open fun setHeightOverride(inHeightOverride: Number): Unit

  @JsName("ClearWidthOverride")
  public open fun clearWidthOverride(): Unit

  @JsName("ClearMinDesiredWidth")
  public open fun clearMinDesiredWidth(): Unit

  @JsName("ClearMinDesiredHeight")
  public open fun clearMinDesiredHeight(): Unit

  @JsName("ClearMinAspectRatio")
  public open fun clearMinAspectRatio(): Unit

  @JsName("ClearMaxDesiredWidth")
  public open fun clearMaxDesiredWidth(): Unit

  @JsName("ClearMaxDesiredHeight")
  public open fun clearMaxDesiredHeight(): Unit

  @JsName("ClearMaxAspectRatio")
  public open fun clearMaxAspectRatio(): Unit

  @JsName("ClearHeightOverride")
  public open fun clearHeightOverride(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SizeBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SizeBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SizeBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SizeBox

    @JsName("C")
    public fun copy(other: UObject): SizeBox

    @JsName("C")
    public fun copy(other: Any): SizeBox
  }
}

public open external class SlateBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateBlueprintLibrary

    @JsName("TransformVectorLocalToAbsolute")
    public fun transformVectorLocalToAbsolute(geometry: Geometry, localVector: Vector2d): Vector2d

    @JsName("TransformVectorAbsoluteToLocal")
    public fun transformVectorAbsoluteToLocal(geometry: Geometry, absoluteVector: Vector2d):
        Vector2d

    @JsName("TransformScalarLocalToAbsolute")
    public fun transformScalarLocalToAbsolute(geometry: Geometry, localScalar: Number): Number

    @JsName("TransformScalarAbsoluteToLocal")
    public fun transformScalarAbsoluteToLocal(geometry: Geometry, absoluteScalar: Number): Number

    @JsName("ScreenToWidgetLocal")
    public fun screenToWidgetLocal(
      worldContextObject: UObject,
      geometry: Geometry,
      screenPosition: Vector2d,
      localCoordinate: Vector2d,
      includeWindowPosition: Boolean,
    ): LocalCoordinateProvider

    @JsName("ScreenToWidgetAbsolute")
    public fun screenToWidgetAbsolute(
      worldContextObject: UObject,
      screenPosition: Vector2d,
      absoluteCoordinate: Vector2d,
      includeWindowPosition: Boolean,
    ): AbsoluteCoordinateProvider

    @JsName("ScreenToViewport")
    public fun screenToViewport(
      worldContextObject: UObject,
      screenPosition: Vector2d,
      viewportPosition: Vector2d,
    ): ViewportPositionProvider

    @JsName("LocalToViewport")
    public fun localToViewport(
      worldContextObject: UObject,
      geometry: Geometry,
      localCoordinate: Vector2d,
      pixelPosition: Vector2d,
      viewportPosition: Vector2d,
    ): Object360

    @JsName("LocalToAbsolute")
    public fun localToAbsolute(geometry: Geometry, localCoordinate: Vector2d): Vector2d

    @JsName("IsUnderLocation")
    public fun isUnderLocation(geometry: Geometry, absoluteCoordinate: Vector2d): Boolean

    @JsName("GetLocalTopLeft")
    public fun getLocalTopLeft(geometry: Geometry): Vector2d

    @JsName("GetLocalSize")
    public fun getLocalSize(geometry: Geometry): Vector2d

    @JsName("GetAbsoluteSize")
    public fun getAbsoluteSize(geometry: Geometry): Vector2d

    @JsName("EqualEqual_SlateBrush")
    public fun equalEqualSlateBrush(a: SlateBrush, b: SlateBrush): Boolean

    @JsName("AbsoluteToViewport")
    public fun absoluteToViewport(
      worldContextObject: UObject,
      absoluteDesktopCoordinate: Vector2d,
      pixelPosition: Vector2d,
      viewportPosition: Vector2d,
    ): Object360

    @JsName("AbsoluteToLocal")
    public fun absoluteToLocal(geometry: Geometry, absoluteCoordinate: Vector2d): Vector2d

    @JsName("C")
    public fun copy(other: UObject): SlateBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): SlateBlueprintLibrary
  }
}

public open external class SlateMeshVertex {
  public open var position: Vector2f

  @JsName("Color")
  public open var color: Color

  @JsName("UV0")
  public open var uv0: Vector2f

  @JsName("UV1")
  public open var uv1: Vector2f

  @JsName("UV2")
  public open var uv2: Vector2f

  @JsName("UV3")
  public open var uv3: Vector2f

  @JsName("UV4")
  public open var uv4: Vector2f

  @JsName("UV5")
  public open var uv5: Vector2f

  public open fun clone(): SlateMeshVertex

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SlateMeshVertex

    @JsName("C")
    public fun copy(other: Any): SlateMeshVertex
  }
}

public open external class SlateVectorArtData(
  outer: UObject,
) : UObject {
  @JsName("MeshAsset")
  public open var meshAsset: StaticMesh

  @JsName("SourceMaterial")
  public open var sourceMaterial: MaterialInterface

  @JsName("VertexData")
  public open var vertexData: Array<SlateMeshVertex>

  @JsName("IndexData")
  public open var indexData: Array<Any>

  @JsName("Material")
  public open var material: MaterialInterface

  @JsName("ExtentMin")
  public open var extentMin: Vector2d

  @JsName("ExtentMax")
  public open var extentMax: Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SlateVectorArtData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SlateVectorArtData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SlateVectorArtData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SlateVectorArtData

    @JsName("C")
    public fun copy(other: UObject): SlateVectorArtData

    @JsName("C")
    public fun copy(other: Any): SlateVectorArtData
  }
}

public open external class SliderStyle : SlateWidgetStyle {
  @JsName("NormalBarImage")
  public open var normalBarImage: SlateBrush

  @JsName("HoveredBarImage")
  public open var hoveredBarImage: SlateBrush

  @JsName("DisabledBarImage")
  public open var disabledBarImage: SlateBrush

  @JsName("NormalThumbImage")
  public open var normalThumbImage: SlateBrush

  @JsName("HoveredThumbImage")
  public open var hoveredThumbImage: SlateBrush

  @JsName("DisabledThumbImage")
  public open var disabledThumbImage: SlateBrush

  @JsName("BarThickness")
  public open var barThickness: Number

  public override fun clone(): SliderStyle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SliderStyle

    @JsName("C")
    public fun copy(other: Any): SliderStyle
  }
}

public open external class Slider(
  outer: UObject,
) : Widget {
  @JsName("Value")
  public open var value: Number

  @JsName("ValueDelegate")
  public open var valueDelegate: UnrealEngineDelegate<() -> Number>

  @JsName("MinValue")
  public open var minValue: Number

  @JsName("MaxValue")
  public open var maxValue: Number

  @JsName("WidgetStyle")
  public open var widgetStyle: SliderStyle

  @JsName("Orientation")
  public open var orientation: String

  @JsName("SliderBarColor")
  public open var sliderBarColor: LinearColor

  @JsName("SliderHandleColor")
  public open var sliderHandleColor: LinearColor

  @JsName("IndentHandle")
  public open var indentHandle: Boolean

  @JsName("Locked")
  public open var locked: Boolean

  @JsName("MouseUsesStep")
  public open var mouseUsesStep: Boolean

  @JsName("RequiresControllerLock")
  public open var requiresControllerLock: Boolean

  @JsName("StepSize")
  public open var stepSize: Number

  @JsName("IsFocusable")
  public open var isFocusable: Boolean

  @JsName("OnMouseCaptureBegin")
  public open var onMouseCaptureBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnMouseCaptureEnd")
  public open var onMouseCaptureEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnControllerCaptureBegin")
  public open var onControllerCaptureBegin: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnControllerCaptureEnd")
  public open var onControllerCaptureEnd: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnValueChanged")
  public open var onValueChanged: UnrealEngineMulticastDelegate<(Value: Number) -> Unit>

  @JsName("SetValue")
  public open fun setValue(inValue: Number): Unit

  @JsName("SetStepSize")
  public open fun setStepSize(inValue: Number): Unit

  @JsName("SetSliderHandleColor")
  public open fun setSliderHandleColor(inValue: LinearColor): Unit

  @JsName("SetSliderBarColor")
  public open fun setSliderBarColor(inValue: LinearColor): Unit

  @JsName("SetMinValue")
  public open fun setMinValue(inValue: Number): Unit

  @JsName("SetMaxValue")
  public open fun setMaxValue(inValue: Number): Unit

  @JsName("SetLocked")
  public open fun setLocked(inValue: Boolean): Unit

  @JsName("SetIndentHandle")
  public open fun setIndentHandle(inValue: Boolean): Unit

  @JsName("GetValue")
  public open fun getValue(): Number

  @JsName("GetNormalizedValue")
  public open fun getNormalizedValue(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Slider

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Slider

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Slider

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Slider

    @JsName("C")
    public fun copy(other: UObject): Slider

    @JsName("C")
    public fun copy(other: Any): Slider
  }
}

public open external class Spacer(
  outer: UObject,
) : Widget {
  @JsName("Size")
  public open var size: Vector2d

  @JsName("SetSize")
  public open fun setSize(inSize: Vector2d): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Spacer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Spacer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Spacer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Spacer

    @JsName("C")
    public fun copy(other: UObject): Spacer

    @JsName("C")
    public fun copy(other: Any): Spacer
  }
}

public open external class SpinBox(
  outer: UObject,
) : Widget {
  @JsName("Value")
  public open var value: Number

  @JsName("ValueDelegate")
  public open var valueDelegate: UnrealEngineDelegate<() -> Number>

  @JsName("WidgetStyle")
  public open var widgetStyle: SpinBoxStyle

  @JsName("Style")
  public open var style: SlateWidgetStyleAsset

  @JsName("MinFractionalDigits")
  public open var minFractionalDigits: Number

  @JsName("MaxFractionalDigits")
  public open var maxFractionalDigits: Number

  @JsName("bAlwaysUsesDeltaSnap")
  public open var alwaysUsesDeltaSnap: Boolean

  @JsName("Delta")
  public open var delta: Number

  @JsName("SliderExponent")
  public open var sliderExponent: Number

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("Justification")
  public open var justification: String

  @JsName("MinDesiredWidth")
  public open var minDesiredWidth: Number

  @JsName("ClearKeyboardFocusOnCommit")
  public open var clearKeyboardFocusOnCommit: Boolean

  @JsName("SelectAllTextOnCommit")
  public open var selectAllTextOnCommit: Boolean

  @JsName("ForegroundColor")
  public open var foregroundColor: SlateColor

  @JsName("OnValueChanged")
  public open var onValueChanged: UnrealEngineMulticastDelegate<(InValue: Number) -> Unit>

  @JsName("OnValueCommitted")
  public open var onValueCommitted: UnrealEngineMulticastDelegate<(InValue: Number,
      CommitMethod: String) -> Unit>

  @JsName("OnBeginSliderMovement")
  public open var onBeginSliderMovement: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnEndSliderMovement")
  public open var onEndSliderMovement: UnrealEngineMulticastDelegate<(InValue: Number) -> Unit>

  @JsName("bOverride_MinValue")
  public open var overrideMinValue: Boolean

  @JsName("bOverride_MaxValue")
  public open var overrideMaxValue: Boolean

  @JsName("bOverride_MinSliderValue")
  public open var overrideMinSliderValue: Boolean

  @JsName("bOverride_MaxSliderValue")
  public open var overrideMaxSliderValue: Boolean

  @JsName("MinValue")
  public open var minValue: Number

  @JsName("MaxValue")
  public open var maxValue: Number

  @JsName("MinSliderValue")
  public open var minSliderValue: Number

  @JsName("MaxSliderValue")
  public open var maxSliderValue: Number

  @JsName("SetValue")
  public open fun setValue(newValue: Number): Unit

  @JsName("SetMinValue")
  public open fun setMinValue(newValue: Number): Unit

  @JsName("SetMinSliderValue")
  public open fun setMinSliderValue(newValue: Number): Unit

  @JsName("SetMinFractionalDigits")
  public open fun setMinFractionalDigits(newValue: Number): Unit

  @JsName("SetMaxValue")
  public open fun setMaxValue(newValue: Number): Unit

  @JsName("SetMaxSliderValue")
  public open fun setMaxSliderValue(newValue: Number): Unit

  @JsName("SetMaxFractionalDigits")
  public open fun setMaxFractionalDigits(newValue: Number): Unit

  @JsName("SetForegroundColor")
  public open fun setForegroundColor(inForegroundColor: SlateColor): Unit

  @JsName("SetDelta")
  public open fun setDelta(newValue: Number): Unit

  @JsName("SetAlwaysUsesDeltaSnap")
  public open fun setAlwaysUsesDeltaSnap(newValue: Boolean): Unit

  @JsName("GetValue")
  public open fun getValue(): Number

  @JsName("GetMinValue")
  public open fun getMinValue(): Number

  @JsName("GetMinSliderValue")
  public open fun getMinSliderValue(): Number

  @JsName("GetMinFractionalDigits")
  public open fun getMinFractionalDigits(): Number

  @JsName("GetMaxValue")
  public open fun getMaxValue(): Number

  @JsName("GetMaxSliderValue")
  public open fun getMaxSliderValue(): Number

  @JsName("GetMaxFractionalDigits")
  public open fun getMaxFractionalDigits(): Number

  @JsName("GetDelta")
  public open fun getDelta(): Number

  @JsName("GetAlwaysUsesDeltaSnap")
  public open fun getAlwaysUsesDeltaSnap(): Boolean

  @JsName("ClearMinValue")
  public open fun clearMinValue(): Unit

  @JsName("ClearMinSliderValue")
  public open fun clearMinSliderValue(): Unit

  @JsName("ClearMaxValue")
  public open fun clearMaxValue(): Unit

  @JsName("ClearMaxSliderValue")
  public open fun clearMaxSliderValue(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SpinBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SpinBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SpinBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SpinBox

    @JsName("C")
    public fun copy(other: UObject): SpinBox

    @JsName("C")
    public fun copy(other: Any): SpinBox
  }
}

public open external class TextBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetTextValue")
  public open fun getTextValue(): String

  @JsName("GetStringValue")
  public open fun getStringValue(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextBinding

    @JsName("C")
    public fun copy(other: UObject): TextBinding

    @JsName("C")
    public fun copy(other: Any): TextBinding
  }
}

public open external class TextBlock(
  outer: UObject,
) : TextLayoutWidget {
  public open var text: String

  @JsName("TextDelegate")
  public open var textDelegate: UnrealEngineDelegate<() -> String>

  @JsName("ColorAndOpacity")
  public open var colorAndOpacity: SlateColor

  @JsName("ColorAndOpacityDelegate")
  public open var colorAndOpacityDelegate: UnrealEngineDelegate<() -> SlateColor>

  @JsName("Font")
  public open var font: SlateFontInfo

  @JsName("StrikeBrush")
  public open var strikeBrush: SlateBrush

  @JsName("ShadowOffset")
  public open var shadowOffset: Vector2d

  @JsName("ShadowColorAndOpacity")
  public open var shadowColorAndOpacity: LinearColor

  @JsName("ShadowColorAndOpacityDelegate")
  public open var shadowColorAndOpacityDelegate: UnrealEngineDelegate<() -> LinearColor>

  @JsName("MinDesiredWidth")
  public open var minDesiredWidth: Number

  @JsName("bWrapWithInvalidationPanel")
  public open var wrapWithInvalidationPanel: Boolean

  public open override var autoWrapText: Boolean

  @JsName("TextTransformPolicy")
  public open var textTransformPolicy: String

  @JsName("TextOverflowPolicy")
  public open var textOverflowPolicy: String

  @JsName("bSimpleTextMode")
  public open var simpleTextMode: Boolean

  @JsName("SetTextTransformPolicy")
  public open fun setTextTransformPolicy(inTransformPolicy: String): Unit

  @JsName("SetTextOverflowPolicy")
  public open fun setTextOverflowPolicy(inOverflowPolicy: String): Unit

  @JsName("SetText")
  public open fun setText(inText: String): Unit

  @JsName("SetStrikeBrush")
  public open fun setStrikeBrush(inStrikeBrush: SlateBrush): Unit

  @JsName("SetShadowOffset")
  public open fun setShadowOffset(inShadowOffset: Vector2d): Unit

  @JsName("SetShadowColorAndOpacity")
  public open fun setShadowColorAndOpacity(inShadowColorAndOpacity: LinearColor): Unit

  @JsName("SetOpacity")
  public open fun setOpacity(inOpacity: Number): Unit

  @JsName("SetMinDesiredWidth")
  public open fun setMinDesiredWidth(inMinDesiredWidth: Number): Unit

  @JsName("SetFont")
  public open fun setFont(inFontInfo: SlateFontInfo): Unit

  @JsName("SetColorAndOpacity")
  public open fun setColorAndOpacity(inColorAndOpacity: SlateColor): Unit

  @JsName("SetAutoWrapText")
  public open fun setAutoWrapText(inAutoTextWrap: Boolean): Unit

  @JsName("GetText")
  public open fun getText(): String

  @JsName("GetDynamicOutlineMaterial")
  public open fun getDynamicOutlineMaterial(): MaterialInstanceDynamic

  @JsName("GetDynamicFontMaterial")
  public open fun getDynamicFontMaterial(): MaterialInstanceDynamic

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TextBlock

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TextBlock

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TextBlock

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TextBlock

    @JsName("C")
    public fun copy(other: UObject): TextBlock

    @JsName("C")
    public fun copy(other: Any): TextBlock
  }
}

public open external class Throbber(
  outer: UObject,
) : Widget {
  @JsName("NumberOfPieces")
  public open var numberOfPieces: Number

  @JsName("bAnimateHorizontally")
  public open var animateHorizontally: Boolean

  @JsName("bAnimateVertically")
  public open var animateVertically: Boolean

  @JsName("bAnimateOpacity")
  public open var animateOpacity: Boolean

  @JsName("PieceImage")
  public open var pieceImage: SlateBrushAsset

  @JsName("UImage")
  public open var uImage: SlateBrush

  @JsName("SetNumberOfPieces")
  public open fun setNumberOfPieces(inNumberOfPieces: Number): Unit

  @JsName("SetAnimateVertically")
  public open fun setAnimateVertically(inAnimateVertically: Boolean): Unit

  @JsName("SetAnimateOpacity")
  public open fun setAnimateOpacity(inAnimateOpacity: Boolean): Unit

  @JsName("SetAnimateHorizontally")
  public open fun setAnimateHorizontally(inAnimateHorizontally: Boolean): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Throbber

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Throbber

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Throbber

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Throbber

    @JsName("C")
    public fun copy(other: UObject): Throbber

    @JsName("C")
    public fun copy(other: Any): Throbber
  }
}

@JsName("EListItemAlignment")
public external object ListItemAlignment {
  public var EvenlyDistributed: String

  public var EvenlySize: String

  public var EvenlyWide: String

  public var LeftAligned: String

  public var RightAligned: String

  public var CenterAligned: String

  public var Fill: String

  @JsName("EListItemAlignment_MAX")
  public var Max: String
}

public open external class TileView(
  outer: UObject,
) : ListView {
  @JsName("EntryHeight")
  public open var entryHeight: Number

  @JsName("EntryWidth")
  public open var entryWidth: Number

  @JsName("TileAlignment")
  public open var tileAlignment: String

  @JsName("bWrapHorizontalNavigation")
  public open var wrapHorizontalNavigation: Boolean

  @JsName("SetEntryWidth")
  public open fun setEntryWidth(newWidth: Number): Unit

  @JsName("SetEntryHeight")
  public open fun setEntryHeight(newHeight: Number): Unit

  @JsName("GetEntryWidth")
  public open fun getEntryWidth(): Number

  @JsName("GetEntryHeight")
  public open fun getEntryHeight(): Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TileView

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TileView

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TileView

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TileView

    @JsName("C")
    public fun copy(other: UObject): TileView

    @JsName("C")
    public fun copy(other: Any): TileView
  }
}

public open external class TreeView(
  outer: UObject,
) : ListView {
  @JsName("BP_OnGetItemChildren")
  public open var bpOnGetItemChildren: UnrealEngineDelegate<(Item: UObject,
      Children: Array<UObject>) -> Unit>

  @JsName("BP_OnItemExpansionChanged")
  public open var bpOnItemExpansionChanged: UnrealEngineMulticastDelegate<(Item: UObject,
      bIsExpanded: Boolean) -> Unit>

  @JsName("SetItemExpansion")
  public open fun setItemExpansion(item: UObject, expandItem: Boolean): Unit

  @JsName("ExpandAll")
  public open fun expandAll(): Unit

  @JsName("CollapseAll")
  public open fun collapseAll(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TreeView

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TreeView

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TreeView

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TreeView

    @JsName("C")
    public fun copy(other: UObject): TreeView

    @JsName("C")
    public fun copy(other: Any): TreeView
  }
}

public open external class UniformGridPanel(
  outer: UObject,
) : PanelWidget {
  @JsName("SlotPadding")
  public open var slotPadding: Margin

  @JsName("MinDesiredSlotWidth")
  public open var minDesiredSlotWidth: Number

  @JsName("MinDesiredSlotHeight")
  public open var minDesiredSlotHeight: Number

  @JsName("SetSlotPadding")
  public open fun setSlotPadding(inSlotPadding: Margin): Unit

  @JsName("SetMinDesiredSlotWidth")
  public open fun setMinDesiredSlotWidth(inMinDesiredSlotWidth: Number): Unit

  @JsName("SetMinDesiredSlotHeight")
  public open fun setMinDesiredSlotHeight(inMinDesiredSlotHeight: Number): Unit

  @JsName("AddChildToUniformGrid")
  public open fun addChildToUniformGrid(
    content: Widget,
    inRow: Number,
    inColumn: Number,
  ): UniformGridSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UniformGridPanel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UniformGridPanel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UniformGridPanel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UniformGridPanel

    @JsName("C")
    public fun copy(other: UObject): UniformGridPanel

    @JsName("C")
    public fun copy(other: Any): UniformGridPanel
  }
}

public open external class UserWidgetBlueprint(
  outer: UObject,
) : Blueprint {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): UserWidgetBlueprint

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): UserWidgetBlueprint

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): UserWidgetBlueprint

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): UserWidgetBlueprint

    @JsName("C")
    public fun copy(other: UObject): UserWidgetBlueprint

    @JsName("C")
    public fun copy(other: Any): UserWidgetBlueprint
  }
}

public open external class VerticalBox(
  outer: UObject,
) : PanelWidget {
  @JsName("AddChildToVerticalBox")
  public open fun addChildToVerticalBox(content: Widget): VerticalBoxSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VerticalBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VerticalBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VerticalBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VerticalBox

    @JsName("C")
    public fun copy(other: UObject): VerticalBox

    @JsName("C")
    public fun copy(other: Any): VerticalBox
  }
}

public open external class Viewport(
  outer: UObject,
) : ContentWidget {
  @JsName("BackgroundColor")
  public open var backgroundColor: LinearColor

  @JsName("Spawn")
  public open fun spawn(actorClass: UnrealEngineClass): Actor

  @JsName("SetViewRotation")
  public open fun setViewRotation(rotation: Rotator): Unit

  @JsName("SetViewLocation")
  public open fun setViewLocation(location: Vector): Unit

  @JsName("GetViewRotation")
  public open fun getViewRotation(): Rotator

  @JsName("GetViewportWorld")
  public open fun getViewportWorld(): World

  @JsName("GetViewLocation")
  public open fun getViewLocation(): Vector

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): Viewport

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): Viewport

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): Viewport

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): Viewport

    @JsName("C")
    public fun copy(other: UObject): Viewport

    @JsName("C")
    public fun copy(other: Any): Viewport
  }
}

public open external class VisibilityBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetValue")
  public open fun getValue(): String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): VisibilityBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): VisibilityBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): VisibilityBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): VisibilityBinding

    @JsName("C")
    public fun copy(other: UObject): VisibilityBinding

    @JsName("C")
    public fun copy(other: Any): VisibilityBinding
  }
}

public open external class BlueprintWidgetAnimationDelegateBinding {
  @JsName("Action")
  public open var action: String

  @JsName("AnimationToBind")
  public open var animationToBind: String

  @JsName("FunctionNameToBind")
  public open var functionNameToBind: String

  @JsName("UserTag")
  public open var userTag: String

  public open fun clone(): BlueprintWidgetAnimationDelegateBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintWidgetAnimationDelegateBinding

    @JsName("C")
    public fun copy(other: Any): BlueprintWidgetAnimationDelegateBinding
  }
}

public open external class WidgetAnimationDelegateBinding(
  outer: UObject,
) : DynamicBlueprintBinding {
  @JsName("WidgetAnimationDelegateBindings")
  public open var widgetAnimationDelegateBindings: Array<BlueprintWidgetAnimationDelegateBinding>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetAnimationDelegateBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetAnimationDelegateBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetAnimationDelegateBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetAnimationDelegateBinding

    @JsName("C")
    public fun copy(other: UObject): WidgetAnimationDelegateBinding

    @JsName("C")
    public fun copy(other: Any): WidgetAnimationDelegateBinding
  }
}

@JsName("T$654")
public external interface Object654 {
  @JsName("Result")
  public var result: UmgSequencePlayer

  @JsName("$")
  public var value: WidgetAnimationPlayCallbackProxy
}

public open external class WidgetAnimationPlayCallbackProxy(
  outer: UObject,
) : UObject {
  @JsName("Finished")
  public open var finished: UnrealEngineMulticastDelegate<() -> Unit>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetAnimationPlayCallbackProxy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetAnimationPlayCallbackProxy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetAnimationPlayCallbackProxy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetAnimationPlayCallbackProxy

    @JsName("CreatePlayAnimationTimeRangeProxyObject")
    public fun createPlayAnimationTimeRangeProxyObject(
      result: UmgSequencePlayer,
      widget: UserWidget,
      inAnimation: WidgetAnimation,
      startAtTime: Number,
      endAtTime: Number,
      numLoopsToPlay: Number,
      playMode: String,
      playbackSpeed: Number,
    ): Object654

    @JsName("CreatePlayAnimationProxyObject")
    public fun createPlayAnimationProxyObject(
      result: UmgSequencePlayer,
      widget: UserWidget,
      inAnimation: WidgetAnimation,
      startAtTime: Number,
      numLoopsToPlay: Number,
      playMode: String,
      playbackSpeed: Number,
    ): Object654

    @JsName("C")
    public fun copy(other: UObject): WidgetAnimationPlayCallbackProxy

    @JsName("C")
    public fun copy(other: Any): WidgetAnimationPlayCallbackProxy
  }
}

public open external class WidgetBinding(
  outer: UObject,
) : PropertyBinding {
  @JsName("GetValue")
  public open fun getValue(): Widget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetBinding

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetBinding

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetBinding

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetBinding

    @JsName("C")
    public fun copy(other: UObject): WidgetBinding

    @JsName("C")
    public fun copy(other: Any): WidgetBinding
  }
}

public open external class EventGraphFastCallPair {
  @JsName("FunctionToPatch")
  public open var functionToPatch: UFunction

  @JsName("EventGraphCallOffset")
  public open var eventGraphCallOffset: Number

  public open fun clone(): EventGraphFastCallPair

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EventGraphFastCallPair

    @JsName("C")
    public fun copy(other: Any): EventGraphFastCallPair
  }
}

public open external class BlueprintGeneratedClass(
  outer: UObject,
) : Class {
  @JsName("NumReplicatedProperties")
  public open var numReplicatedProperties: Number

  @JsName("bHasNativizedParent")
  public open var hasNativizedParent: Boolean

  @JsName("bHasCookedComponentInstancingData")
  public open var hasCookedComponentInstancingData: Boolean

  @JsName("bIsSparseClassDataSerializable")
  public open var isSparseClassDataSerializable: Boolean

  @JsName("DynamicBindingObjects")
  public open var dynamicBindingObjects: Array<DynamicBlueprintBinding>

  @JsName("ComponentTemplates")
  public open var componentTemplates: Array<ActorComponent>

  @JsName("Timelines")
  public open var timelines: Array<TimelineTemplate>

  @JsName("ComponentClassOverrides")
  public open var componentClassOverrides: Array<BpComponentClassOverride>

  @JsName("SimpleConstructionScript")
  public open var simpleConstructionScript: SimpleConstructionScript

  @JsName("InheritableComponentHandler")
  public open var inheritableComponentHandler: InheritableComponentHandler

  @JsName("UberGraphFramePointerProperty")
  public open var uberGraphFramePointerProperty: StructProperty

  @JsName("UberGraphFunction")
  public open var uberGraphFunction: UFunction

  @JsName("FastCallPairs")
  public open var fastCallPairs: Array<EventGraphFastCallPair>

  @JsName("OverridenArchetypeForCDO")
  public open var overridenArchetypeForCdo: UObject

  @JsName("PropertyGuids")
  public open var propertyGuids: Any

  @JsName("CalledFunctions")
  public open var calledFunctions: Array<UFunction>

  @JsName("CookedComponentInstancingData")
  public open var cookedComponentInstancingData: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintGeneratedClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintGeneratedClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintGeneratedClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintGeneratedClass

    @JsName("C")
    public fun copy(other: UObject): BlueprintGeneratedClass

    @JsName("C")
    public fun copy(other: Any): BlueprintGeneratedClass
  }
}

@JsName("EBindingKind")
public external object BindingKind {
  public var Function: String

  public var Property: String

  @JsName("EBindingKind_MAX")
  public var Max: String
}

public open external class DelegateRuntimeBinding {
  @JsName("ObjectName")
  public open var objectName: String

  @JsName("PropertyName")
  public open var propertyName: String

  @JsName("FunctionName")
  public open var functionName: String

  @JsName("SourcePath")
  public open var sourcePath: DynamicPropertyPath

  @JsName("Kind")
  public open var kind: String

  public open fun clone(): DelegateRuntimeBinding

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): DelegateRuntimeBinding

    @JsName("C")
    public fun copy(other: Any): DelegateRuntimeBinding
  }
}

public open external class WidgetBlueprintGeneratedClass(
  outer: UObject,
) : BlueprintGeneratedClass {
  @JsName("WidgetTree")
  public open var widgetTree: WidgetTree

  @JsName("bCanCallPreConstruct")
  public open var canCallPreConstruct: Boolean

  @JsName("bClassRequiresNativeTick")
  public open var classRequiresNativeTick: Boolean

  @JsName("Bindings")
  public open var bindings: Array<DelegateRuntimeBinding>

  @JsName("Animations")
  public open var animations: Array<WidgetAnimation>

  @JsName("NamedSlots")
  public open var namedSlots: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetBlueprintGeneratedClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetBlueprintGeneratedClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetBlueprintGeneratedClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetBlueprintGeneratedClass

    @JsName("C")
    public fun copy(other: UObject): WidgetBlueprintGeneratedClass

    @JsName("C")
    public fun copy(other: Any): WidgetBlueprintGeneratedClass
  }
}

public open external class NavigationEvent : InputEvent {
  public open override fun clone(): NavigationEvent

  @JsName("GetInputEventFromNavigationEvent")
  public open fun getInputEventFromNavigationEvent(): InputEvent

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): NavigationEvent

    @JsName("C")
    public fun copy(other: Any): NavigationEvent

    @JsName("GetInputEventFromNavigationEvent")
    public fun getInputEventFromNavigationEvent(event: NavigationEvent): InputEvent
  }
}

public open external class WidgetBlueprintLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetBlueprintLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetBlueprintLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetBlueprintLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetBlueprintLibrary

    @JsName("UnlockMouse")
    public fun unlockMouse(reply: EventReply): Object268

    @JsName("Unhandled")
    public fun unhandled(): EventReply

    @JsName("SetWindowTitleBarState")
    public fun setWindowTitleBarState(
      titleBarContent: Widget,
      mode: String,
      titleBarDragEnabled: Boolean,
      windowButtonsVisible: Boolean,
      titleBarVisible: Boolean,
    ): Unit

    @JsName("SetWindowTitleBarCloseButtonActive")
    public fun setWindowTitleBarCloseButtonActive(active: Boolean): Unit

    @JsName("SetUserFocus")
    public fun setUserFocus(
      reply: EventReply,
      focusWidget: Widget,
      inAllUsers: Boolean,
    ): Object268

    @JsName("SetMousePosition")
    public fun setMousePosition(reply: EventReply, newMousePosition: Vector2d): Object268

    @JsName("SetInputMode_UIOnlyEx")
    public fun setInputModeUiOnlyEx(
      playerController: PlayerController,
      inWidgetToFocus: Widget,
      inMouseLockMode: String,
    ): Unit

    @JsName("SetInputMode_GameOnly")
    public fun setInputModeGameOnly(playerController: PlayerController): Unit

    @JsName("SetInputMode_GameAndUIEx")
    public fun setInputModeGameAndUiEx(
      playerController: PlayerController,
      inWidgetToFocus: Widget,
      inMouseLockMode: String,
      hideCursorDuringCapture: Boolean,
    ): Unit

    @JsName("SetHardwareCursor")
    public fun setHardwareCursor(
      worldContextObject: UObject,
      cursorShape: String,
      cursorName: String,
      hotSpot: Vector2d,
    ): Boolean

    @JsName("SetFocusToGameViewport")
    public fun setFocusToGameViewport(): Unit

    @JsName("SetColorVisionDeficiencyType")
    public fun setColorVisionDeficiencyType(
      type: String,
      severity: Number,
      correctDeficiency: Boolean,
      showCorrectionWithDeficiency: Boolean,
    ): Unit

    @JsName("SetBrushResourceToTexture")
    public fun setBrushResourceToTexture(brush: SlateBrush, texture: Texture2d): BrushProvider

    @JsName("SetBrushResourceToMaterial")
    public fun setBrushResourceToMaterial(brush: SlateBrush, material: MaterialInterface):
        BrushProvider

    @JsName("RestorePreviousWindowTitleBarState")
    public fun restorePreviousWindowTitleBarState(): Unit

    @JsName("ReleaseMouseCapture")
    public fun releaseMouseCapture(reply: EventReply): Object268

    @JsName("ReleaseJoystickCapture")
    public fun releaseJoystickCapture(reply: EventReply, inAllJoysticks: Boolean): Object268

    @JsName("NoResourceBrush")
    public fun noResourceBrush(): SlateBrush

    @JsName("MakeBrushFromTexture")
    public fun makeBrushFromTexture(
      texture: Texture2d,
      width: Number,
      height: Number,
    ): SlateBrush

    @JsName("MakeBrushFromMaterial")
    public fun makeBrushFromMaterial(
      material: MaterialInterface,
      width: Number,
      height: Number,
    ): SlateBrush

    @JsName("MakeBrushFromAsset")
    public fun makeBrushFromAsset(brushAsset: SlateBrushAsset): SlateBrush

    @JsName("LockMouse")
    public fun lockMouse(reply: EventReply, capturingWidget: Widget): Object268

    @JsName("IsDragDropping")
    public fun isDragDropping(): Boolean

    @JsName("Handled")
    public fun handled(): EventReply

    @JsName("GetSafeZonePadding")
    public fun getSafeZonePadding(
      worldContextObject: UObject,
      safePadding: Vector4,
      safePaddingScale: Vector2d,
      spillOverPadding: Vector4,
    ): Object359

    @JsName("GetKeyEventFromAnalogInputEvent")
    public fun getKeyEventFromAnalogInputEvent(event: AnalogInputEvent): KeyEvent

    @JsName("GetInputEventFromPointerEvent")
    public fun getInputEventFromPointerEvent(event: UPointerEvent): InputEvent

    @JsName("GetInputEventFromNavigationEvent")
    public fun getInputEventFromNavigationEvent(event: NavigationEvent): InputEvent

    @JsName("GetInputEventFromKeyEvent")
    public fun getInputEventFromKeyEvent(event: KeyEvent): InputEvent

    @JsName("GetInputEventFromCharacterEvent")
    public fun getInputEventFromCharacterEvent(event: CharacterEvent): InputEvent

    @JsName("GetDynamicMaterial")
    public fun getDynamicMaterial(brush: SlateBrush): Object43

    @JsName("GetDragDroppingContent")
    public fun getDragDroppingContent(): DragDropOperation

    @JsName("GetBrushResourceAsTexture2D")
    public fun getBrushResourceAsTexture2d(brush: SlateBrush): Texture2d

    @JsName("GetBrushResourceAsMaterial")
    public fun getBrushResourceAsMaterial(brush: SlateBrush): MaterialInterface

    @JsName("GetBrushResource")
    public fun getBrushResource(brush: SlateBrush): UObject

    @JsName("GetAllWidgetsWithInterface")
    public fun getAllWidgetsWithInterface(
      worldContextObject: UObject,
      foundWidgets: Array<UserWidget>,
      `interface`: UnrealEngineClass,
      topLevelOnly: Boolean,
    ): FoundWidgetsProvider

    @JsName("GetAllWidgetsOfClass")
    public fun getAllWidgetsOfClass(
      worldContextObject: UObject,
      foundWidgets: Array<UserWidget>,
      widgetClass: UnrealEngineClass,
      topLevelOnly: Boolean,
    ): FoundWidgetsProvider

    @JsName("EndDragDrop")
    public fun endDragDrop(reply: EventReply): Object268

    @JsName("DrawTextFormatted")
    public fun drawTextFormatted(
      context: PaintContext,
      text: String,
      position: Vector2d,
      font: Font,
      fontSize: Number,
      fontTypeFace: String,
      tint: LinearColor,
    ): ContextProvider

    @JsName("DrawText")
    public fun drawText(
      context: PaintContext,
      inString: String,
      position: Vector2d,
      tint: LinearColor,
    ): ContextProvider

    @JsName("DrawLines")
    public fun drawLines(
      context: PaintContext,
      points: Array<Vector2d>,
      tint: LinearColor,
      antiAlias: Boolean,
      thickness: Number,
    ): ContextProvider

    @JsName("DrawLine")
    public fun drawLine(
      context: PaintContext,
      positionA: Vector2d,
      positionB: Vector2d,
      tint: LinearColor,
      antiAlias: Boolean,
      thickness: Number,
    ): ContextProvider

    @JsName("DrawBox")
    public fun drawBox(
      context: PaintContext,
      position: Vector2d,
      size: Vector2d,
      brush: SlateBrushAsset,
      tint: LinearColor,
    ): ContextProvider

    @JsName("DismissAllMenus")
    public fun dismissAllMenus(): Unit

    @JsName("DetectDragIfPressed")
    public fun detectDragIfPressed(
      uPointerEvent: UPointerEvent,
      widgetDetectingDrag: Widget,
      dragKey: Key,
    ): EventReply

    @JsName("DetectDrag")
    public fun detectDrag(
      reply: EventReply,
      widgetDetectingDrag: Widget,
      dragKey: Key,
    ): Object268

    @JsName("CreateDragDropOperation")
    public fun createDragDropOperation(operationClass: UnrealEngineClass): DragDropOperation

    @JsName("Create")
    public fun create(
      worldContextObject: UObject,
      widgetType: UnrealEngineClass,
      owningPlayer: PlayerController,
    ): UserWidget

    @JsName("ClearUserFocus")
    public fun clearUserFocus(reply: EventReply, inAllUsers: Boolean): Object268

    @JsName("CaptureMouse")
    public fun captureMouse(reply: EventReply, capturingWidget: Widget): Object268

    @JsName("CaptureJoystick")
    public fun captureJoystick(
      reply: EventReply,
      capturingWidget: Widget,
      inAllJoysticks: Boolean,
    ): Object268

    @JsName("CancelDragDrop")
    public fun cancelDragDrop(): Unit

    @JsName("C")
    public fun copy(other: UObject): WidgetBlueprintLibrary

    @JsName("C")
    public fun copy(other: Any): WidgetBlueprintLibrary
  }
}

@JsName("EWidgetInteractionSource")
public external object WidgetInteractionSource {
  public var World: String

  public var Mouse: String

  public var CenterScreen: String

  public var Custom: String

  @JsName("EWidgetInteractionSource_MAX")
  public var Max: String
}

public open external class WidgetInteractionComponent(
  outer: UObject,
) : SceneComponent {
  @JsName("OnHoveredWidgetChanged")
  public open var onHoveredWidgetChanged:
      UnrealEngineMulticastDelegate<(WidgetComponent: WidgetComponent,
      PreviousWidgetComponent: WidgetComponent) -> Unit>

  @JsName("VirtualUserIndex")
  public open var virtualUserIndex: Number

  @JsName("PointerIndex")
  public open var pointerIndex: Number

  @JsName("TraceChannel")
  public open var traceChannel: String

  @JsName("InteractionDistance")
  public open var interactionDistance: Number

  @JsName("InteractionSource")
  public open var interactionSource: String

  @JsName("bEnableHitTesting")
  public open var enableHitTesting: Boolean

  @JsName("bShowDebug")
  public open var showDebug: Boolean

  @JsName("DebugSphereLineThickness")
  public open var debugSphereLineThickness: Number

  @JsName("DebugLineThickness")
  public open var debugLineThickness: Number

  @JsName("DebugColor")
  public open var debugColor: LinearColor

  @JsName("CustomHitResult")
  public open var customHitResult: HitResult

  @JsName("LocalHitLocation")
  public open var localHitLocation: Vector2d

  @JsName("LastLocalHitLocation")
  public open var lastLocalHitLocation: Vector2d

  @JsName("HoveredWidgetComponent")
  public open var hoveredWidgetComponent: WidgetComponent

  @JsName("LastHitResult")
  public open var lastHitResult: HitResult

  @JsName("bIsHoveredWidgetInteractable")
  public open var isHoveredWidgetInteractable: Boolean

  @JsName("bIsHoveredWidgetFocusable")
  public open var isHoveredWidgetFocusable: Boolean

  @JsName("bIsHoveredWidgetHitTestVisible")
  public open var isHoveredWidgetHitTestVisible: Boolean

  @JsName("ArrowComponent")
  public open var arrowComponent: ArrowComponent

  @JsName("SetFocus")
  public open fun setFocus(focusWidget: Widget): Unit

  @JsName("SetCustomHitResult")
  public open fun setCustomHitResult(hitResult: HitResult): Unit

  @JsName("SendKeyChar")
  public open fun sendKeyChar(characters: String, repeat: Boolean): Boolean

  @JsName("ScrollWheel")
  public open fun scrollWheel(scrollDelta: Number): Unit

  @JsName("ReleasePointerKey")
  public open fun releasePointerKey(key: Key): Unit

  @JsName("ReleaseKey")
  public open fun releaseKey(key: Key): Boolean

  @JsName("PressPointerKey")
  public open fun pressPointerKey(key: Key): Unit

  @JsName("PressKey")
  public open fun pressKey(key: Key, repeat: Boolean): Boolean

  @JsName("PressAndReleaseKey")
  public open fun pressAndReleaseKey(key: Key): Boolean

  @JsName("IsOverInteractableWidget")
  public open fun isOverInteractableWidget(): Boolean

  @JsName("IsOverHitTestVisibleWidget")
  public open fun isOverHitTestVisibleWidget(): Boolean

  @JsName("IsOverFocusableWidget")
  public open fun isOverFocusableWidget(): Boolean

  @JsName("GetLastHitResult")
  public open fun getLastHitResult(): HitResult

  @JsName("GetHoveredWidgetComponent")
  public open fun getHoveredWidgetComponent(): WidgetComponent

  @JsName("Get2DHitLocation")
  public open fun get2dHitLocation(): Vector2d

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetInteractionComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetInteractionComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetInteractionComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetInteractionComponent

    @JsName("C")
    public fun copy(other: UObject): WidgetInteractionComponent

    @JsName("C")
    public fun copy(other: Any): WidgetInteractionComponent
  }
}

public open external class WidgetLayoutLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetLayoutLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetLayoutLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetLayoutLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetLayoutLibrary

    @JsName("SlotAsWrapBoxSlot")
    public fun slotAsWrapBoxSlot(widget: Widget): WrapBoxSlot

    @JsName("SlotAsWidgetSwitcherSlot")
    public fun slotAsWidgetSwitcherSlot(widget: Widget): WidgetSwitcherSlot

    @JsName("SlotAsVerticalBoxSlot")
    public fun slotAsVerticalBoxSlot(widget: Widget): VerticalBoxSlot

    @JsName("SlotAsUniformGridSlot")
    public fun slotAsUniformGridSlot(widget: Widget): UniformGridSlot

    @JsName("SlotAsSizeBoxSlot")
    public fun slotAsSizeBoxSlot(widget: Widget): SizeBoxSlot

    @JsName("SlotAsScrollBoxSlot")
    public fun slotAsScrollBoxSlot(widget: Widget): ScrollBoxSlot

    @JsName("SlotAsScaleBoxSlot")
    public fun slotAsScaleBoxSlot(widget: Widget): ScaleBoxSlot

    @JsName("SlotAsSafeBoxSlot")
    public fun slotAsSafeBoxSlot(widget: Widget): SafeZoneSlot

    @JsName("SlotAsOverlaySlot")
    public fun slotAsOverlaySlot(widget: Widget): OverlaySlot

    @JsName("SlotAsHorizontalBoxSlot")
    public fun slotAsHorizontalBoxSlot(widget: Widget): HorizontalBoxSlot

    @JsName("SlotAsGridSlot")
    public fun slotAsGridSlot(widget: Widget): GridSlot

    @JsName("SlotAsCanvasSlot")
    public fun slotAsCanvasSlot(widget: Widget): CanvasPanelSlot

    @JsName("SlotAsBorderSlot")
    public fun slotAsBorderSlot(widget: Widget): BorderSlot

    @JsName("RemoveAllWidgets")
    public fun removeAllWidgets(worldContextObject: UObject): Unit

    @JsName("ProjectWorldLocationToWidgetPosition")
    public fun projectWorldLocationToWidgetPosition(
      playerController: PlayerController,
      worldLocation: Vector,
      screenPosition: Vector2d,
      playerViewportRelative: Boolean,
    ): Object279

    @JsName("GetViewportWidgetGeometry")
    public fun getViewportWidgetGeometry(worldContextObject: UObject): Geometry

    @JsName("GetViewportSize")
    public fun getViewportSize(worldContextObject: UObject): Vector2d

    @JsName("GetViewportScale")
    public fun getViewportScale(worldContextObject: UObject): Number

    @JsName("GetPlayerScreenWidgetGeometry")
    public fun getPlayerScreenWidgetGeometry(playerController: PlayerController): Geometry

    @JsName("GetMousePositionScaledByDPI")
    public fun getMousePositionScaledByDpi(
      player: PlayerController,
      locationX: Number,
      locationY: Number,
    ): Object273

    @JsName("GetMousePositionOnViewport")
    public fun getMousePositionOnViewport(worldContextObject: UObject): Vector2d

    @JsName("GetMousePositionOnPlatform")
    public fun getMousePositionOnPlatform(): Vector2d

    @JsName("C")
    public fun copy(other: UObject): WidgetLayoutLibrary

    @JsName("C")
    public fun copy(other: Any): WidgetLayoutLibrary
  }
}

public open external class WidgetSwitcher(
  outer: UObject,
) : PanelWidget {
  @JsName("ActiveWidgetIndex")
  public open var activeWidgetIndex: Number

  @JsName("SetActiveWidgetIndex")
  public open fun setActiveWidgetIndex(index: Number): Unit

  @JsName("SetActiveWidget")
  public open fun setActiveWidget(widget: Widget): Unit

  @JsName("GetWidgetAtIndex")
  public open fun getWidgetAtIndex(index: Number): Widget

  @JsName("GetNumWidgets")
  public open fun getNumWidgets(): Number

  @JsName("GetActiveWidgetIndex")
  public open fun getActiveWidgetIndex(): Number

  @JsName("GetActiveWidget")
  public open fun getActiveWidget(): Widget

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WidgetSwitcher

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WidgetSwitcher

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WidgetSwitcher

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WidgetSwitcher

    @JsName("C")
    public fun copy(other: UObject): WidgetSwitcher

    @JsName("C")
    public fun copy(other: Any): WidgetSwitcher
  }
}

public open external class WindowTitleBarArea(
  outer: UObject,
) : ContentWidget {
  @JsName("bWindowButtonsEnabled")
  public open var windowButtonsEnabled: Boolean

  @JsName("bDoubleClickTogglesFullscreen")
  public open var doubleClickTogglesFullscreen: Boolean

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WindowTitleBarArea

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WindowTitleBarArea

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WindowTitleBarArea

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WindowTitleBarArea

    @JsName("C")
    public fun copy(other: UObject): WindowTitleBarArea

    @JsName("C")
    public fun copy(other: Any): WindowTitleBarArea
  }
}

public open external class WindowTitleBarAreaSlot(
  outer: UObject,
) : PanelSlot {
  @JsName("Padding")
  public open var padding: Margin

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("VerticalAlignment")
  public open var verticalAlignment: String

  @JsName("SetVerticalAlignment")
  public open fun setVerticalAlignment(inVerticalAlignment: String): Unit

  @JsName("SetPadding")
  public open fun setPadding(inPadding: Margin): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WindowTitleBarAreaSlot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WindowTitleBarAreaSlot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WindowTitleBarAreaSlot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WindowTitleBarAreaSlot

    @JsName("C")
    public fun copy(other: UObject): WindowTitleBarAreaSlot

    @JsName("C")
    public fun copy(other: Any): WindowTitleBarAreaSlot
  }
}

public open external class WrapBox(
  outer: UObject,
) : PanelWidget {
  @JsName("InnerSlotPadding")
  public open var innerSlotPadding: Vector2d

  @JsName("WrapWidth")
  public open var wrapWidth: Number

  @JsName("WrapSize")
  public open var wrapSize: Number

  @JsName("bExplicitWrapWidth")
  public open var explicitWrapWidth: Boolean

  @JsName("bExplicitWrapSize")
  public open var explicitWrapSize: Boolean

  @JsName("HorizontalAlignment")
  public open var horizontalAlignment: String

  @JsName("Orientation")
  public open var orientation: String

  @JsName("SetInnerSlotPadding")
  public open fun setInnerSlotPadding(inPadding: Vector2d): Unit

  @JsName("SetHorizontalAlignment")
  public open fun setHorizontalAlignment(inHorizontalAlignment: String): Unit

  @JsName("AddChildToWrapBox")
  public open fun addChildToWrapBox(content: Widget): WrapBoxSlot

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): WrapBox

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): WrapBox

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): WrapBox

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): WrapBox

    @JsName("C")
    public fun copy(other: UObject): WrapBox

    @JsName("C")
    public fun copy(other: Any): WrapBox
  }
}

public open external class BlueprintEditorLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintEditorLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintEditorLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintEditorLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintEditorLibrary

    @JsName("UpgradeOperatorNodes")
    public fun upgradeOperatorNodes(blueprint: Blueprint): Unit

    @JsName("ReplaceVariableReferences")
    public fun replaceVariableReferences(
      blueprint: Blueprint,
      oldVarName: String,
      newVarName: String,
    ): Unit

    @JsName("ReparentBlueprint")
    public fun reparentBlueprint(blueprint: Blueprint, newParentClass: UnrealEngineClass): Unit

    @JsName("RenameGraph")
    public fun renameGraph(graph: EdGraph, newNameStr: String): Unit

    @JsName("RemoveUnusedVariables")
    public fun removeUnusedVariables(blueprint: Blueprint): Number

    @JsName("RemoveUnusedNodes")
    public fun removeUnusedNodes(blueprint: Blueprint): Unit

    @JsName("RemoveGraph")
    public fun removeGraph(blueprint: Blueprint, graph: EdGraph): Unit

    @JsName("RemoveFunctionGraph")
    public fun removeFunctionGraph(blueprint: Blueprint, funcName: String): Unit

    @JsName("GetBlueprintAsset")
    public fun getBlueprintAsset(uObject: UObject): Blueprint

    @JsName("GeneratedClass")
    public fun generatedClass(blueprintObj: Blueprint): UnrealEngineClass

    @JsName("FindGraph")
    public fun findGraph(blueprint: Blueprint, graphName: String): EdGraph

    @JsName("FindEventGraph")
    public fun findEventGraph(blueprint: Blueprint): EdGraph

    @JsName("CompileBlueprint")
    public fun compileBlueprint(blueprint: Blueprint): Unit

    @JsName("AddFunctionGraph")
    public fun addFunctionGraph(blueprint: Blueprint, funcName: String): EdGraph

    @JsName("C")
    public fun copy(other: UObject): BlueprintEditorLibrary

    @JsName("C")
    public fun copy(other: Any): BlueprintEditorLibrary
  }
}

public open external class ClassViewerProjectSettings(
  outer: UObject,
) : UObject {
  @JsName("InternalOnlyPaths")
  public open var internalOnlyPaths: Array<DirectoryPath>

  @JsName("InternalOnlyClasses")
  public open var internalOnlyClasses: Array<SoftClassPath>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ClassViewerProjectSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ClassViewerProjectSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ClassViewerProjectSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ClassViewerProjectSettings

    @JsName("C")
    public fun copy(other: UObject): ClassViewerProjectSettings

    @JsName("C")
    public fun copy(other: Any): ClassViewerProjectSettings
  }
}

@JsName("EContentBrowserDataMenuContext_AddNewMenuDomain")
public external object ContentBrowserDataMenuContext_AddNewMenuDomain {
  public var Toolbar: String

  public var AssetView: String

  public var PathView: String

  @JsName("EContentBrowserDataMenuContext_MAX")
  public var EContentBrowserDataMenuContextMax: String
}

@JsName("ContentBrowserDataMenuContext_AddNewMenu")
public open external class ContentBrowserDataMenuContextAddNewMenu(
  outer: UObject,
) : UObject {
  @JsName("SelectedPaths")
  public open var selectedPaths: Array<String>

  @JsName("bContainsValidPackagePath")
  public open var containsValidPackagePath: Boolean

  @JsName("bCanBeModified")
  public open var canBeModified: Boolean

  @JsName("OwnerDomain")
  public open var ownerDomain: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserDataMenuContextAddNewMenu

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserDataMenuContextAddNewMenu

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserDataMenuContextAddNewMenu

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserDataMenuContextAddNewMenu

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserDataMenuContextAddNewMenu

    @JsName("C")
    public fun copy(other: Any): ContentBrowserDataMenuContextAddNewMenu
  }
}

public open external class ContentBrowserItem {
  public open fun clone(): ContentBrowserItem

  @JsName("GetDisplayName")
  public open fun getDisplayName(): String

  @JsName("GetVirtualPath")
  public open fun getVirtualPath(): String

  @JsName("IsFile")
  public open fun isFile(): Boolean

  @JsName("IsFolder")
  public open fun isFolder(): Boolean

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ContentBrowserItem

    @JsName("C")
    public fun copy(other: Any): ContentBrowserItem

    @JsName("GetDisplayName")
    public fun getDisplayName(item: ContentBrowserItem): String

    @JsName("GetVirtualPath")
    public fun getVirtualPath(item: ContentBrowserItem): String

    @JsName("IsFile")
    public fun isFile(item: ContentBrowserItem): Boolean

    @JsName("IsFolder")
    public fun isFolder(item: ContentBrowserItem): Boolean
  }
}

@JsName("ContentBrowserDataMenuContext_FolderMenu")
public open external class ContentBrowserDataMenuContextFolderMenu(
  outer: UObject,
) : UObject {
  @JsName("SelectedItems")
  public open var selectedItems: Array<ContentBrowserItem>

  @JsName("bCanBeModified")
  public open var canBeModified: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserDataMenuContextFolderMenu

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserDataMenuContextFolderMenu

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserDataMenuContextFolderMenu

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserDataMenuContextFolderMenu

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserDataMenuContextFolderMenu

    @JsName("C")
    public fun copy(other: Any): ContentBrowserDataMenuContextFolderMenu
  }
}

@JsName("ContentBrowserDataMenuContext_FileMenu")
public open external class ContentBrowserDataMenuContextFileMenu(
  outer: UObject,
) : UObject {
  @JsName("SelectedItems")
  public open var selectedItems: Array<ContentBrowserItem>

  @JsName("bCanBeModified")
  public open var canBeModified: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserDataMenuContextFileMenu

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserDataMenuContextFileMenu

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserDataMenuContextFileMenu

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserDataMenuContextFileMenu

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserDataMenuContextFileMenu

    @JsName("C")
    public fun copy(other: Any): ContentBrowserDataMenuContextFileMenu
  }
}

@JsName("ContentBrowserDataMenuContext_DragDropMenu")
public open external class ContentBrowserDataMenuContextDragDropMenu(
  outer: UObject,
) : UObject {
  @JsName("DropTargetItem")
  public open var dropTargetItem: ContentBrowserItem

  @JsName("DraggedItems")
  public open var draggedItems: Array<ContentBrowserItem>

  @JsName("bCanMove")
  public open var canMove: Boolean

  @JsName("bCanCopy")
  public open var canCopy: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserDataMenuContextDragDropMenu

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserDataMenuContextDragDropMenu

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserDataMenuContextDragDropMenu

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserDataMenuContextDragDropMenu

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserDataMenuContextDragDropMenu

    @JsName("C")
    public fun copy(other: Any): ContentBrowserDataMenuContextDragDropMenu
  }
}

public open external class ContentBrowserDataSource(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserDataSource

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserDataSource

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserDataSource

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserDataSource

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserDataSource

    @JsName("C")
    public fun copy(other: Any): ContentBrowserDataSource
  }
}

@JsName("EContentBrowserItemTypeFilter")
public external object ContentBrowserItemTypeFilter {
  @JsName("IncludeNone")
  public var None: String

  @JsName("IncludeFolders")
  public var Folders: String

  @JsName("IncludeFiles")
  public var Files: String

  @JsName("IncludeAll")
  public var All: String

  @JsName("EContentBrowserItemTypeFilter_MAX")
  public var Max: String
}

@JsName("EContentBrowserItemCategoryFilter")
public external object ContentBrowserItemCategoryFilter {
  @JsName("IncludeNone")
  public var None: String

  @JsName("IncludeAssets")
  public var Assets: String

  @JsName("IncludeClasses")
  public var Classes: String

  @JsName("IncludeCollections")
  public var Collections: String

  @JsName("IncludeMisc")
  public var Misc: String

  @JsName("IncludeAll")
  public var All: String

  @JsName("EContentBrowserItemCategoryFilter_MAX")
  public var Max: String
}

@JsName("EContentBrowserItemAttributeFilter")
public external object ContentBrowserItemAttributeFilter {
  @JsName("IncludeNone")
  public var None: String

  @JsName("IncludeProject")
  public var Project: String

  @JsName("IncludeEngine")
  public var Engine: String

  @JsName("IncludePlugins")
  public var Plugins: String

  @JsName("IncludeDeveloper")
  public var Developer: String

  @JsName("IncludeLocalized")
  public var Localized: String

  @JsName("IncludeAll")
  public var All: String

  @JsName("EContentBrowserItemAttributeFilter_MAX")
  public var Max: String
}

public open external class ContentBrowserDataFilter {
  @JsName("bRecursivePaths")
  public open var recursivePaths: Boolean

  @JsName("ItemTypeFilter")
  public open var itemTypeFilter: String

  @JsName("ItemCategoryFilter")
  public open var itemCategoryFilter: String

  @JsName("ItemAttributeFilter")
  public open var itemAttributeFilter: String

  public open fun clone(): ContentBrowserDataFilter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ContentBrowserDataFilter

    @JsName("C")
    public fun copy(other: Any): ContentBrowserDataFilter
  }
}

public open external class ContentBrowserDataSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("EnabledDataSources")
  public open var enabledDataSources: Array<String>

  @JsName("GetItemsUnderPath")
  public open fun getItemsUnderPath(inPath: String, inFilter: ContentBrowserDataFilter):
      Array<ContentBrowserItem>

  @JsName("GetItemsAtPath")
  public open fun getItemsAtPath(inPath: String, inItemTypeFilter: String):
      Array<ContentBrowserItem>

  @JsName("GetItemAtPath")
  public open fun getItemAtPath(inPath: String, inItemTypeFilter: String): ContentBrowserItem

  @JsName("GetAvailableDataSources")
  public open fun getAvailableDataSources(): Array<String>

  @JsName("GetActiveDataSources")
  public open fun getActiveDataSources(): Array<String>

  @JsName("DeactivateDataSource")
  public open fun deactivateDataSource(name: String): Boolean

  @JsName("DeactivateAllDataSources")
  public open fun deactivateAllDataSources(): Unit

  @JsName("ActivateDataSource")
  public open fun activateDataSource(name: String): Boolean

  @JsName("ActivateAllDataSources")
  public open fun activateAllDataSources(): Unit

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserDataSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserDataSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserDataSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserDataSubsystem

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserDataSubsystem

    @JsName("C")
    public fun copy(other: Any): ContentBrowserDataSubsystem
  }
}

public open external class ContentBrowserItemLibrary(
  outer: UObject,
) : BlueprintFunctionLibrary {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ContentBrowserItemLibrary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ContentBrowserItemLibrary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ContentBrowserItemLibrary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ContentBrowserItemLibrary

    @JsName("IsFolder")
    public fun isFolder(item: ContentBrowserItem): Boolean

    @JsName("IsFile")
    public fun isFile(item: ContentBrowserItem): Boolean

    @JsName("GetVirtualPath")
    public fun getVirtualPath(item: ContentBrowserItem): String

    @JsName("GetDisplayName")
    public fun getDisplayName(item: ContentBrowserItem): String

    @JsName("C")
    public fun copy(other: UObject): ContentBrowserItemLibrary

    @JsName("C")
    public fun copy(other: Any): ContentBrowserItemLibrary
  }
}

public open external class EditorConfigBase(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorConfigBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorConfigBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorConfigBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorConfigBase

    @JsName("C")
    public fun copy(other: UObject): EditorConfigBase

    @JsName("C")
    public fun copy(other: Any): EditorConfigBase
  }
}

public open external class EditorConfigSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorConfigSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorConfigSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorConfigSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorConfigSubsystem

    @JsName("C")
    public fun copy(other: UObject): EditorConfigSubsystem

    @JsName("C")
    public fun copy(other: Any): EditorConfigSubsystem
  }
}

public open external class EditorConfigTestStruct {
  @JsName("BoolProperty")
  public open var boolProperty: Boolean

  @JsName("IntProperty")
  public open var intProperty: Number

  @JsName("StringProperty")
  public open var stringProperty: String

  @JsName("FloatProperty")
  public open var floatProperty: Number

  @JsName("ArrayProperty")
  public open var arrayProperty: Array<String>

  public open fun clone(): EditorConfigTestStruct

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorConfigTestStruct

    @JsName("C")
    public fun copy(other: Any): EditorConfigTestStruct
  }
}

public open external class EditorConfigTestObject(
  outer: UObject,
) : UObject {
  @JsName("UObject")
  public open var uObject: UObject

  @JsName("SoftObjectPath")
  public open var softObjectPath: SoftObjectPath

  public open var struct: EditorConfigTestStruct

  @JsName("Number")
  public open var number: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorConfigTestObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorConfigTestObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorConfigTestObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorConfigTestObject

    @JsName("C")
    public fun copy(other: UObject): EditorConfigTestObject

    @JsName("C")
    public fun copy(other: Any): EditorConfigTestObject
  }
}

public open external class EditorMetadataOverrides(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorMetadataOverrides

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorMetadataOverrides

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorMetadataOverrides

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorMetadataOverrides

    @JsName("C")
    public fun copy(other: UObject): EditorMetadataOverrides

    @JsName("C")
    public fun copy(other: Any): EditorMetadataOverrides
  }
}

public open external class SourceControlState {
  @JsName("Filename")
  public open var filename: String

  @JsName("bIsValid")
  public open var isValid: Boolean

  @JsName("bIsUnknown")
  public open var isUnknown: Boolean

  @JsName("bCanCheckIn")
  public open var canCheckIn: Boolean

  @JsName("bCanCheckOut")
  public open var canCheckOut: Boolean

  @JsName("bIsCheckedOut")
  public open var isCheckedOut: Boolean

  @JsName("bIsCurrent")
  public open var isCurrent: Boolean

  @JsName("bIsSourceControlled")
  public open var isSourceControlled: Boolean

  @JsName("bIsAdded")
  public open var isAdded: Boolean

  @JsName("bIsDeleted")
  public open var isDeleted: Boolean

  @JsName("bIsIgnored")
  public open var isIgnored: Boolean

  @JsName("bCanEdit")
  public open var canEdit: Boolean

  @JsName("bCanDelete")
  public open var canDelete: Boolean

  @JsName("bIsModified")
  public open var isModified: Boolean

  @JsName("bCanAdd")
  public open var canAdd: Boolean

  @JsName("bIsConflicted")
  public open var isConflicted: Boolean

  @JsName("bCanRevert")
  public open var canRevert: Boolean

  @JsName("bIsCheckedOutOther")
  public open var isCheckedOutOther: Boolean

  @JsName("CheckedOutOther")
  public open var checkedOutOther: String

  public open fun clone(): SourceControlState

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): SourceControlState

    @JsName("C")
    public fun copy(other: Any): SourceControlState
  }
}

public open external class SourceControlHelpers(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceControlHelpers

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceControlHelpers

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceControlHelpers

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceControlHelpers

    @JsName("SyncFiles")
    public fun syncFiles(inFiles: Array<String>, silent: Boolean): Boolean

    @JsName("SyncFile")
    public fun syncFile(inFile: String, silent: Boolean): Boolean

    @JsName("RevertUnchangedFiles")
    public fun revertUnchangedFiles(inFiles: Array<String>, silent: Boolean): Boolean

    @JsName("RevertUnchangedFile")
    public fun revertUnchangedFile(inFile: String, silent: Boolean): Boolean

    @JsName("RevertFiles")
    public fun revertFiles(inFiles: Array<String>, silent: Boolean): Boolean

    @JsName("RevertFile")
    public fun revertFile(inFile: String, silent: Boolean): Boolean

    @JsName("QueryFileState")
    public fun queryFileState(inFile: String, silent: Boolean): SourceControlState

    @JsName("MarkFilesForDelete")
    public fun markFilesForDelete(inFiles: Array<String>, silent: Boolean): Boolean

    @JsName("MarkFilesForAdd")
    public fun markFilesForAdd(inFiles: Array<String>, silent: Boolean): Boolean

    @JsName("MarkFileForDelete")
    public fun markFileForDelete(inFile: String, silent: Boolean): Boolean

    @JsName("MarkFileForAdd")
    public fun markFileForAdd(inFile: String, silent: Boolean): Boolean

    @JsName("LastErrorMsg")
    public fun lastErrorMsg(): String

    @JsName("IsEnabled")
    public fun isEnabled(): Boolean

    @JsName("IsAvailable")
    public fun isAvailable(): Boolean

    @JsName("CurrentProvider")
    public fun currentProvider(): String

    @JsName("CopyFile")
    public fun copyFile(
      inSourceFile: String,
      inDestFile: String,
      silent: Boolean,
    ): Boolean

    @JsName("CheckOutOrAddFiles")
    public fun checkOutOrAddFiles(inFiles: Array<String>, silent: Boolean): Boolean

    @JsName("CheckOutOrAddFile")
    public fun checkOutOrAddFile(inFile: String, silent: Boolean): Boolean

    @JsName("CheckOutFiles")
    public fun checkOutFiles(inFiles: Array<String>, silent: Boolean): Boolean

    @JsName("CheckOutFile")
    public fun checkOutFile(inFile: String, silent: Boolean): Boolean

    @JsName("CheckInFiles")
    public fun checkInFiles(
      inFiles: Array<String>,
      inDescription: String,
      silent: Boolean,
    ): Boolean

    @JsName("CheckInFile")
    public fun checkInFile(
      inFile: String,
      inDescription: String,
      silent: Boolean,
    ): Boolean

    @JsName("C")
    public fun copy(other: UObject): SourceControlHelpers

    @JsName("C")
    public fun copy(other: Any): SourceControlHelpers
  }
}

public open external class SourceControlPreferences(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bEnableValidationTag")
  public open var enableValidationTag: Boolean

  @JsName("bShouldDeleteNewFilesOnRevert")
  public open var shouldDeleteNewFilesOnRevert: Boolean

  @JsName("CollectionChangelistTags")
  public open var collectionChangelistTags: Array<String>

  @JsName("SpecificCollectionChangelistTags")
  public open var specificCollectionChangelistTags: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SourceControlPreferences

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SourceControlPreferences

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SourceControlPreferences

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SourceControlPreferences

    @JsName("C")
    public fun copy(other: UObject): SourceControlPreferences

    @JsName("C")
    public fun copy(other: Any): SourceControlPreferences
  }
}

public open external class ActorBrowsingModeSettings(
  outer: UObject,
) : UObject {
  @JsName("bHideTemporaryActors")
  public open var hideTemporaryActors: Boolean

  @JsName("bShowOnlyActorsInCurrentLevel")
  public open var showOnlyActorsInCurrentLevel: Boolean

  @JsName("bShowOnlySelectedActors")
  public open var showOnlySelectedActors: Boolean

  @JsName("bHideActorComponents")
  public open var hideActorComponents: Boolean

  @JsName("bHideLevelInstanceHierarchy")
  public open var hideLevelInstanceHierarchy: Boolean

  @JsName("bHideUnloadedActors")
  public open var hideUnloadedActors: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ActorBrowsingModeSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ActorBrowsingModeSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ActorBrowsingModeSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ActorBrowsingModeSettings

    @JsName("C")
    public fun copy(other: UObject): ActorBrowsingModeSettings

    @JsName("C")
    public fun copy(other: Any): ActorBrowsingModeSettings
  }
}

public open external class OutlinerConfig(
  outer: UObject,
) : EditorConfigBase {
  @JsName("Outliners")
  public open var outliners: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): OutlinerConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): OutlinerConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): OutlinerConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): OutlinerConfig

    @JsName("C")
    public fun copy(other: UObject): OutlinerConfig

    @JsName("C")
    public fun copy(other: Any): OutlinerConfig
  }
}

public open external class SceneOutlinerMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SceneOutlinerMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SceneOutlinerMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SceneOutlinerMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SceneOutlinerMenuContext

    @JsName("C")
    public fun copy(other: UObject): SceneOutlinerMenuContext

    @JsName("C")
    public fun copy(other: Any): SceneOutlinerMenuContext
  }
}

public open external class DetailsConfig(
  outer: UObject,
) : EditorConfigBase {
  @JsName("Views")
  public open var views: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): DetailsConfig

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): DetailsConfig

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): DetailsConfig

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): DetailsConfig

    @JsName("C")
    public fun copy(other: UObject): DetailsConfig

    @JsName("C")
    public fun copy(other: Any): DetailsConfig
  }
}

public external object EditConditionTestEnum {
  @JsName("First")
  public var first: String

  @JsName("Second")
  public var second: String

  @JsName("EditConditionTestEnum_MAX")
  public var editConditionTestEnumMax: String
}

public external object EditConditionByteEnum {
  @JsName("First")
  public var first: String

  @JsName("Second")
  public var second: String

  @JsName("EditConditionByteEnum_MAX")
  public var editConditionByteEnumMax: String
}

public open external class EditConditionTestObject(
  outer: UObject,
) : UObject {
  @JsName("BoolProperty")
  public open var boolProperty: Boolean

  @JsName("EnumProperty")
  public open var enumProperty: String

  @JsName("ByteEnumProperty")
  public open var byteEnumProperty: String

  @JsName("DoubleProperty")
  public open var doubleProperty: Any

  @JsName("IntegerProperty")
  public open var integerProperty: Number

  @JsName("UintBitfieldProperty")
  public open var uintBitfieldProperty: Boolean

  @JsName("UObjectPtr")
  public open var uObjectPtr: UObject

  @JsName("SoftClassPtr")
  public open var softClassPtr: Class

  @JsName("WeakObjectPtr")
  public open var weakObjectPtr: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditConditionTestObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditConditionTestObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditConditionTestObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditConditionTestObject

    @JsName("C")
    public fun copy(other: UObject): EditConditionTestObject

    @JsName("C")
    public fun copy(other: Any): EditConditionTestObject
  }
}

public open external class BlueprintNodeSpawner(
  outer: UObject,
) : UObject {
  @JsName("NodeClass")
  public open var nodeClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintNodeSpawner
  }
}

public open external class BlueprintEventNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  @JsName("EventFunc")
  public open var eventFunc: UFunction

  @JsName("CustomEventName")
  public open var customEventName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintEventNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintEventNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintEventNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintEventNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintEventNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintEventNodeSpawner
  }
}

public open external class BlueprintBoundEventNodeSpawner(
  outer: UObject,
) : BlueprintEventNodeSpawner {
  @JsName("EventDelegate")
  public open var eventDelegate: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintBoundEventNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintBoundEventNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintBoundEventNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintBoundEventNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintBoundEventNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintBoundEventNodeSpawner
  }
}

public open external class BlueprintBoundNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintBoundNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintBoundNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintBoundNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintBoundNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintBoundNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintBoundNodeSpawner
  }
}

public open external class BlueprintComponentNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  @JsName("ComponentClass")
  public open var componentClass: UnrealEngineClass

  @JsName("ComponentName")
  public open var componentName: String

  @JsName("ComponentAssetName")
  public open var componentAssetName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintComponentNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintComponentNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintComponentNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintComponentNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintComponentNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintComponentNodeSpawner
  }
}

public open external class BlueprintFieldNodeSpawner(
  outer: UObject,
) : BlueprintNodeSpawner {
  @JsName("OwnerClass")
  public open var ownerClass: UnrealEngineClass

  @JsName("Field")
  public open var field: Field

  @JsName("Property")
  public open var property: Any

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintFieldNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintFieldNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintFieldNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintFieldNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintFieldNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintFieldNodeSpawner
  }
}

public open external class BlueprintDelegateNodeSpawner(
  outer: UObject,
) : BlueprintFieldNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintDelegateNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintDelegateNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintDelegateNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintDelegateNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintDelegateNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintDelegateNodeSpawner
  }
}

@JsName("EBlueprintBreakpointReloadMethod")
public external object BlueprintBreakpointReloadMethod {
  public var RestoreAll: String

  public var RestoreAllAndDisable: String

  public var DiscardAll: String

  @JsName("EBlueprintBreakpointReloadMethod_MAX")
  public var Max: String
}

@JsName("ESaveOnCompile")
public external object SaveOnCompile {
  @JsName("SoC_Never")
  public var Never: String

  @JsName("SoC_SuccessOnly")
  public var SuccessOnly: String

  @JsName("SoC_Always")
  public var Always: String

  @JsName("SoC_MAX")
  public var Max: String
}

public open external class BlueprintEditorSettings(
  outer: UObject,
) : DeveloperSettings {
  @JsName("bDrawMidpointArrowsInBlueprints")
  public open var drawMidpointArrowsInBlueprints: Boolean

  @JsName("bShowGraphInstructionText")
  public open var showGraphInstructionText: Boolean

  @JsName("bHideUnrelatedNodes")
  public open var hideUnrelatedNodes: Boolean

  @JsName("bShowShortTooltips")
  public open var showShortTooltips: Boolean

  @JsName("bSplitContextTargetSettings")
  public open var splitContextTargetSettings: Boolean

  @JsName("bExposeAllMemberComponentFunctions")
  public open var exposeAllMemberComponentFunctions: Boolean

  @JsName("bShowContextualFavorites")
  public open var showContextualFavorites: Boolean

  @JsName("bExposeDeprecatedFunctions")
  public open var exposeDeprecatedFunctions: Boolean

  @JsName("bCompactCallOnMemberNodes")
  public open var compactCallOnMemberNodes: Boolean

  @JsName("bFlattenFavoritesMenus")
  public open var flattenFavoritesMenus: Boolean

  @JsName("bAutoCastObjectConnections")
  public open var autoCastObjectConnections: Boolean

  @JsName("bShowViewportOnSimulate")
  public open var showViewportOnSimulate: Boolean

  @JsName("bSpawnDefaultBlueprintNodes")
  public open var spawnDefaultBlueprintNodes: Boolean

  @JsName("bHideConstructionScriptComponentsInDetailsView")
  public open var hideConstructionScriptComponentsInDetailsView: Boolean

  @JsName("bHostFindInBlueprintsInGlobalTab")
  public open var hostFindInBlueprintsInGlobalTab: Boolean

  @JsName("bNavigateToNativeFunctionsFromCallNodes")
  public open var navigateToNativeFunctionsFromCallNodes: Boolean

  @JsName("bDoubleClickNavigatesToParent")
  public open var doubleClickNavigatesToParent: Boolean

  @JsName("bEnableTypePromotion")
  public open var enableTypePromotion: Boolean

  @JsName("TypePromotionPinDenyList")
  public open var typePromotionPinDenyList: Any

  @JsName("BreakpointReloadMethod")
  public open var breakpointReloadMethod: String

  @JsName("bEnablePinValueInspectionTooltips")
  public open var enablePinValueInspectionTooltips: Boolean

  @JsName("bEnableNamespaceEditorFeatures")
  public open var enableNamespaceEditorFeatures: Boolean

  @JsName("bEnableNamespaceFilteringFeatures")
  public open var enableNamespaceFilteringFeatures: Boolean

  @JsName("bEnableNamespaceImportingFeatures")
  public open var enableNamespaceImportingFeatures: Boolean

  @JsName("NamespacesToAlwaysInclude")
  public open var namespacesToAlwaysInclude: Array<String>

  @JsName("bFavorPureCastNodes")
  public open var favorPureCastNodes: Boolean

  @JsName("SaveOnCompile")
  public open var saveOnCompile: String

  @JsName("bJumpToNodeErrors")
  public open var jumpToNodeErrors: Boolean

  @JsName("bAllowExplicitImpureNodeDisabling")
  public open var allowExplicitImpureNodeDisabling: Boolean

  @JsName("bShowActionMenuItemSignatures")
  public open var showActionMenuItemSignatures: Boolean

  @JsName("bBlueprintNodeUniqueNames")
  public open var blueprintNodeUniqueNames: Boolean

  @JsName("bShowDetailedCompileResults")
  public open var showDetailedCompileResults: Boolean

  @JsName("CompileEventDisplayThresholdMs")
  public open var compileEventDisplayThresholdMs: Number

  @JsName("NodeTemplateCacheCapMB")
  public open var nodeTemplateCacheCapMb: Number

  @JsName("bShowInheritedVariables")
  public open var showInheritedVariables: Boolean

  @JsName("bAlwaysShowInterfacesInOverrides")
  public open var alwaysShowInterfacesInOverrides: Boolean

  @JsName("bShowParentClassInOverrides")
  public open var showParentClassInOverrides: Boolean

  @JsName("bShowEmptySections")
  public open var showEmptySections: Boolean

  @JsName("bShowAccessSpecifier")
  public open var showAccessSpecifier: Boolean

  @JsName("Bookmarks")
  public open var bookmarks: Any

  @JsName("BookmarkNodes")
  public open var bookmarkNodes: Array<BpEditorBookmarkNode>

  @JsName("PerBlueprintSettings")
  public open var perBlueprintSettings: Any

  @JsName("bIncludeCommentNodesInBookmarksTab")
  public open var includeCommentNodesInBookmarksTab: Boolean

  @JsName("bShowBookmarksForCurrentDocumentOnlyInTab")
  public open var showBookmarksForCurrentDocumentOnlyInTab: Boolean

  @JsName("GraphEditorQuickJumps")
  public open var graphEditorQuickJumps: Any

  @JsName("BaseClassesToAllowRecompilingDuringPlayInEditor")
  public open var baseClassesToAllowRecompilingDuringPlayInEditor: Array<Class>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintEditorSettings

    @JsName("C")
    public fun copy(other: UObject): BlueprintEditorSettings

    @JsName("C")
    public fun copy(other: Any): BlueprintEditorSettings
  }
}

public open external class BlueprintFunctionNodeSpawner(
  outer: UObject,
) : BlueprintFieldNodeSpawner {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintFunctionNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintFunctionNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintFunctionNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintFunctionNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintFunctionNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintFunctionNodeSpawner
  }
}

public open external class BlueprintVariableNodeSpawner(
  outer: UObject,
) : BlueprintFieldNodeSpawner {
  @JsName("LocalVarOuter")
  public open var localVarOuter: EdGraph

  @JsName("LocalVarDesc")
  public open var localVarDesc: BpVariableDescription

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintVariableNodeSpawner

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintVariableNodeSpawner

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintVariableNodeSpawner

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintVariableNodeSpawner

    @JsName("C")
    public fun copy(other: UObject): BlueprintVariableNodeSpawner

    @JsName("C")
    public fun copy(other: Any): BlueprintVariableNodeSpawner
  }
}

public open external class BlueprintCallableFunctionRedirect {
  @JsName("ClassName")
  public open var className: String

  @JsName("OldFunctionName")
  public open var oldFunctionName: String

  @JsName("NewFunctionName")
  public open var newFunctionName: String

  @JsName("BlueprintParamName")
  public open var blueprintParamName: String

  @JsName("ClassParamName")
  public open var classParamName: String

  public open fun clone(): BlueprintCallableFunctionRedirect

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlueprintCallableFunctionRedirect

    @JsName("C")
    public fun copy(other: Any): BlueprintCallableFunctionRedirect
  }
}

@JsName("EdGraphSchema_K2")
public open external class EdGraphSchemaK2(
  outer: UObject,
) : EdGraphSchema {
  @JsName("EditoronlyBPFunctionRedirects")
  public open var editoronlyBpFunctionRedirects: Array<BlueprintCallableFunctionRedirect>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EdGraphSchemaK2

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EdGraphSchemaK2

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EdGraphSchemaK2

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EdGraphSchemaK2

    @JsName("C")
    public fun copy(other: UObject): EdGraphSchemaK2

    @JsName("C")
    public fun copy(other: Any): EdGraphSchemaK2
  }
}

@JsName("K2Node_ActorBoundEvent")
public open external class K2NodeActorBoundEvent(
  outer: UObject,
) : K2NodeEvent {
  @JsName("DelegatePropertyName")
  public open var delegatePropertyName: String

  @JsName("DelegateOwnerClass")
  public open var delegateOwnerClass: UnrealEngineClass

  @JsName("EventOwner")
  public open var eventOwner: Actor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeActorBoundEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeActorBoundEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeActorBoundEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeActorBoundEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeActorBoundEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeActorBoundEvent
  }
}

@JsName("K2Node_CallFunction")
public open external class K2NodeCallFunction(
  outer: UObject,
) : K2Node {
  @JsName("bIsPureFunc")
  public open var isPureFunc: Boolean

  @JsName("bIsConstFunc")
  public open var isConstFunc: Boolean

  @JsName("bWantsEnumToExecExpansion")
  public open var wantsEnumToExecExpansion: Boolean

  @JsName("bIsInterfaceCall")
  public open var isInterfaceCall: Boolean

  @JsName("bIsFinalFunction")
  public open var isFinalFunction: Boolean

  @JsName("bIsBeadFunction")
  public open var isBeadFunction: Boolean

  @JsName("FunctionReference")
  public open var functionReference: MemberReference

  @JsName("CallFunctionName")
  public open var callFunctionName: String

  @JsName("CallFunctionClass")
  public open var callFunctionClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCallFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCallFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCallFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCallFunction

    @JsName("C")
    public fun copy(other: UObject): K2NodeCallFunction

    @JsName("C")
    public fun copy(other: Any): K2NodeCallFunction
  }
}

@JsName("K2Node_AddComponent")
public open external class K2NodeAddComponent(
  outer: UObject,
) : K2NodeCallFunction {
  @JsName("bHasExposedVariable")
  public open var hasExposedVariable: Boolean

  @JsName("TemplateBlueprint")
  public open var templateBlueprint: String

  @JsName("TemplateType")
  public open var templateType: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAddComponent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAddComponent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAddComponent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAddComponent

    @JsName("C")
    public fun copy(other: UObject): K2NodeAddComponent

    @JsName("C")
    public fun copy(other: Any): K2NodeAddComponent
  }
}

@JsName("K2Node_ConstructObjectFromClass")
public open external class K2NodeConstructObjectFromClass(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeConstructObjectFromClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeConstructObjectFromClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeConstructObjectFromClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeConstructObjectFromClass

    @JsName("C")
    public fun copy(other: UObject): K2NodeConstructObjectFromClass

    @JsName("C")
    public fun copy(other: Any): K2NodeConstructObjectFromClass
  }
}

@JsName("K2Node_AddComponentByClass")
public open external class K2NodeAddComponentByClass(
  outer: UObject,
) : K2NodeConstructObjectFromClass {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAddComponentByClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAddComponentByClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAddComponentByClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAddComponentByClass

    @JsName("C")
    public fun copy(other: UObject): K2NodeAddComponentByClass

    @JsName("C")
    public fun copy(other: Any): K2NodeAddComponentByClass
  }
}

@JsName("K2Node_BaseMCDelegate")
public open external class K2NodeBaseMcDelegate(
  outer: UObject,
) : K2Node {
  @JsName("DelegateReference")
  public open var delegateReference: MemberReference

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeBaseMcDelegate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeBaseMcDelegate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeBaseMcDelegate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeBaseMcDelegate

    @JsName("C")
    public fun copy(other: UObject): K2NodeBaseMcDelegate

    @JsName("C")
    public fun copy(other: Any): K2NodeBaseMcDelegate
  }
}

@JsName("K2Node_AddDelegate")
public open external class K2NodeAddDelegate(
  outer: UObject,
) : K2NodeBaseMcDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAddDelegate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAddDelegate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAddDelegate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAddDelegate

    @JsName("C")
    public fun copy(other: UObject): K2NodeAddDelegate

    @JsName("C")
    public fun copy(other: Any): K2NodeAddDelegate
  }
}

@JsName("K2Node_AddPinInterface")
public open external class K2NodeAddPinInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAddPinInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAddPinInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAddPinInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAddPinInterface

    @JsName("C")
    public fun copy(other: UObject): K2NodeAddPinInterface

    @JsName("C")
    public fun copy(other: Any): K2NodeAddPinInterface
  }
}

@JsName("K2Node_AssignDelegate")
public open external class K2NodeAssignDelegate(
  outer: UObject,
) : K2NodeAddDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAssignDelegate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAssignDelegate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAssignDelegate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAssignDelegate

    @JsName("C")
    public fun copy(other: UObject): K2NodeAssignDelegate

    @JsName("C")
    public fun copy(other: Any): K2NodeAssignDelegate
  }
}

@JsName("K2Node_AssignmentStatement")
public open external class K2NodeAssignmentStatement(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAssignmentStatement

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAssignmentStatement

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAssignmentStatement

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAssignmentStatement

    @JsName("C")
    public fun copy(other: UObject): K2NodeAssignmentStatement

    @JsName("C")
    public fun copy(other: Any): K2NodeAssignmentStatement
  }
}

@JsName("K2Node_BaseAsyncTask")
public open external class K2NodeBaseAsyncTask(
  outer: UObject,
) : K2Node {
  @JsName("ProxyFactoryFunctionName")
  public open var proxyFactoryFunctionName: String

  @JsName("ProxyFactoryClass")
  public open var proxyFactoryClass: UnrealEngineClass

  @JsName("ProxyClass")
  public open var proxyClass: UnrealEngineClass

  @JsName("ProxyActivateFunctionName")
  public open var proxyActivateFunctionName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeBaseAsyncTask

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeBaseAsyncTask

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeBaseAsyncTask

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeBaseAsyncTask

    @JsName("C")
    public fun copy(other: UObject): K2NodeBaseAsyncTask

    @JsName("C")
    public fun copy(other: Any): K2NodeBaseAsyncTask
  }
}

@JsName("K2Node_AsyncAction")
public open external class K2NodeAsyncAction(
  outer: UObject,
) : K2NodeBaseAsyncTask {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeAsyncAction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeAsyncAction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeAsyncAction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeAsyncAction

    @JsName("C")
    public fun copy(other: UObject): K2NodeAsyncAction

    @JsName("C")
    public fun copy(other: Any): K2NodeAsyncAction
  }
}

@JsName("K2Node_BitmaskLiteral")
public open external class K2NodeBitmaskLiteral(
  outer: UObject,
) : K2Node {
  @JsName("BitflagsEnum")
  public open var bitflagsEnum: Enum

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeBitmaskLiteral

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeBitmaskLiteral

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeBitmaskLiteral

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeBitmaskLiteral

    @JsName("C")
    public fun copy(other: UObject): K2NodeBitmaskLiteral

    @JsName("C")
    public fun copy(other: Any): K2NodeBitmaskLiteral
  }
}

@JsName("ESelfContextInfo")
public external object SelfContextInfo {
  public var Unspecified: String

  public var NotSelfContext: String

  @JsName("ESelfContextInfo_MAX")
  public var Max: String
}

@JsName("K2Node_Variable")
public open external class K2NodeVariable(
  outer: UObject,
) : K2Node {
  @JsName("VariableReference")
  public open var variableReference: MemberReference

  @JsName("SelfContextInfo")
  public open var selfContextInfo: String

  @JsName("VariableSourceClass")
  public open var variableSourceClass: UnrealEngineClass

  @JsName("VariableName")
  public open var variableName: String

  @JsName("bSelfContext")
  public open var selfContext: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeVariable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeVariable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeVariable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeVariable

    @JsName("C")
    public fun copy(other: UObject): K2NodeVariable

    @JsName("C")
    public fun copy(other: Any): K2NodeVariable
  }
}

@JsName("K2Node_StructOperation")
public open external class K2NodeStructOperation(
  outer: UObject,
) : K2NodeVariable {
  @JsName("StructType")
  public open var structType: ScriptStruct

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeStructOperation

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeStructOperation

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeStructOperation

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeStructOperation

    @JsName("C")
    public fun copy(other: UObject): K2NodeStructOperation

    @JsName("C")
    public fun copy(other: Any): K2NodeStructOperation
  }
}

@JsName("K2Node_StructMemberGet")
public open external class K2NodeStructMemberGet(
  outer: UObject,
) : K2NodeStructOperation {
  @JsName("ShowPinForProperties")
  public open var showPinForProperties: Array<OptionalPinFromProperty>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeStructMemberGet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeStructMemberGet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeStructMemberGet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeStructMemberGet

    @JsName("C")
    public fun copy(other: UObject): K2NodeStructMemberGet

    @JsName("C")
    public fun copy(other: Any): K2NodeStructMemberGet
  }
}

@JsName("K2Node_BreakStruct")
public open external class K2NodeBreakStruct(
  outer: UObject,
) : K2NodeStructMemberGet {
  @JsName("bMadeAfterOverridePinRemoval")
  public open var madeAfterOverridePinRemoval: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeBreakStruct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeBreakStruct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeBreakStruct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeBreakStruct

    @JsName("C")
    public fun copy(other: UObject): K2NodeBreakStruct

    @JsName("C")
    public fun copy(other: Any): K2NodeBreakStruct
  }
}

@JsName("K2Node_CallArrayFunction")
public open external class K2NodeCallArrayFunction(
  outer: UObject,
) : K2NodeCallFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCallArrayFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCallArrayFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCallArrayFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCallArrayFunction

    @JsName("C")
    public fun copy(other: UObject): K2NodeCallArrayFunction

    @JsName("C")
    public fun copy(other: Any): K2NodeCallArrayFunction
  }
}

@JsName("K2Node_CallDataTableFunction")
public open external class K2NodeCallDataTableFunction(
  outer: UObject,
) : K2NodeCallFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCallDataTableFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCallDataTableFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCallDataTableFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCallDataTableFunction

    @JsName("C")
    public fun copy(other: UObject): K2NodeCallDataTableFunction

    @JsName("C")
    public fun copy(other: Any): K2NodeCallDataTableFunction
  }
}

@JsName("K2Node_CallDelegate")
public open external class K2NodeCallDelegate(
  outer: UObject,
) : K2NodeBaseMcDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCallDelegate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCallDelegate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCallDelegate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCallDelegate

    @JsName("C")
    public fun copy(other: UObject): K2NodeCallDelegate

    @JsName("C")
    public fun copy(other: Any): K2NodeCallDelegate
  }
}

@JsName("K2Node_CallFunctionOnMember")
public open external class K2NodeCallFunctionOnMember(
  outer: UObject,
) : K2NodeCallFunction {
  @JsName("MemberVariableToCallOn")
  public open var memberVariableToCallOn: MemberReference

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCallFunctionOnMember

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCallFunctionOnMember

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCallFunctionOnMember

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCallFunctionOnMember

    @JsName("C")
    public fun copy(other: UObject): K2NodeCallFunctionOnMember

    @JsName("C")
    public fun copy(other: Any): K2NodeCallFunctionOnMember
  }
}

@JsName("K2Node_CallMaterialParameterCollectionFunction")
public open external class K2NodeCallMaterialParameterCollectionFunction(
  outer: UObject,
) : K2NodeCallFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCallMaterialParameterCollectionFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        K2NodeCallMaterialParameterCollectionFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCallMaterialParameterCollectionFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCallMaterialParameterCollectionFunction

    @JsName("C")
    public fun copy(other: UObject): K2NodeCallMaterialParameterCollectionFunction

    @JsName("C")
    public fun copy(other: Any): K2NodeCallMaterialParameterCollectionFunction
  }
}

@JsName("K2Node_CallParentFunction")
public open external class K2NodeCallParentFunction(
  outer: UObject,
) : K2NodeCallFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCallParentFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCallParentFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCallParentFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCallParentFunction

    @JsName("C")
    public fun copy(other: UObject): K2NodeCallParentFunction

    @JsName("C")
    public fun copy(other: Any): K2NodeCallParentFunction
  }
}

@JsName("K2Node_CastByteToEnum")
public open external class K2NodeCastByteToEnum(
  outer: UObject,
) : K2Node {
  @JsName("Enum")
  public open var enum: Enum

  @JsName("bSafe")
  public open var safe: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCastByteToEnum

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCastByteToEnum

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCastByteToEnum

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCastByteToEnum

    @JsName("C")
    public fun copy(other: UObject): K2NodeCastByteToEnum

    @JsName("C")
    public fun copy(other: Any): K2NodeCastByteToEnum
  }
}

@JsName("K2Node_DynamicCast")
public open external class K2NodeDynamicCast(
  outer: UObject,
) : K2Node {
  @JsName("TargetType")
  public open var targetType: UnrealEngineClass

  @JsName("bIsPureCast")
  public open var isPureCast: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeDynamicCast

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeDynamicCast

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeDynamicCast

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeDynamicCast

    @JsName("C")
    public fun copy(other: UObject): K2NodeDynamicCast

    @JsName("C")
    public fun copy(other: Any): K2NodeDynamicCast
  }
}

@JsName("K2Node_ClassDynamicCast")
public open external class K2NodeClassDynamicCast(
  outer: UObject,
) : K2NodeDynamicCast {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeClassDynamicCast

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeClassDynamicCast

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeClassDynamicCast

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeClassDynamicCast

    @JsName("C")
    public fun copy(other: UObject): K2NodeClassDynamicCast

    @JsName("C")
    public fun copy(other: Any): K2NodeClassDynamicCast
  }
}

@JsName("K2Node_ClearDelegate")
public open external class K2NodeClearDelegate(
  outer: UObject,
) : K2NodeBaseMcDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeClearDelegate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeClearDelegate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeClearDelegate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeClearDelegate

    @JsName("C")
    public fun copy(other: UObject): K2NodeClearDelegate

    @JsName("C")
    public fun copy(other: Any): K2NodeClearDelegate
  }
}

@JsName("K2Node_CommutativeAssociativeBinaryOperator")
public open external class K2NodeCommutativeAssociativeBinaryOperator(
  outer: UObject,
) : K2NodeCallFunction {
  @JsName("NumAdditionalInputs")
  public open var numAdditionalInputs: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCommutativeAssociativeBinaryOperator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String):
        K2NodeCommutativeAssociativeBinaryOperator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCommutativeAssociativeBinaryOperator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCommutativeAssociativeBinaryOperator

    @JsName("C")
    public fun copy(other: UObject): K2NodeCommutativeAssociativeBinaryOperator

    @JsName("C")
    public fun copy(other: Any): K2NodeCommutativeAssociativeBinaryOperator
  }
}

@JsName("K2Node_ComponentBoundEvent")
public open external class K2NodeComponentBoundEvent(
  outer: UObject,
) : K2NodeEvent {
  @JsName("DelegatePropertyName")
  public open var delegatePropertyName: String

  @JsName("DelegateOwnerClass")
  public open var delegateOwnerClass: UnrealEngineClass

  @JsName("ComponentPropertyName")
  public open var componentPropertyName: String

  @JsName("DelegatePropertyDisplayName")
  public open var delegatePropertyDisplayName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeComponentBoundEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeComponentBoundEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeComponentBoundEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeComponentBoundEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeComponentBoundEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeComponentBoundEvent
  }
}

@JsName("K2Node_Tunnel")
public open external class K2NodeTunnel(
  outer: UObject,
) : K2NodeEditablePinBase {
  @JsName("OutputSourceNode")
  public open var outputSourceNode: K2NodeTunnel

  @JsName("InputSinkNode")
  public open var inputSinkNode: K2NodeTunnel

  @JsName("bCanHaveInputs")
  public open var canHaveInputs: Boolean

  @JsName("bCanHaveOutputs")
  public open var canHaveOutputs: Boolean

  @JsName("MetaData")
  public open var metaData: KismetUserDeclaredFunctionMetadata

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeTunnel

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeTunnel

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeTunnel

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeTunnel

    @JsName("C")
    public fun copy(other: UObject): K2NodeTunnel

    @JsName("C")
    public fun copy(other: Any): K2NodeTunnel
  }
}

@JsName("K2Node_Composite")
public open external class K2NodeComposite(
  outer: UObject,
) : K2NodeTunnel {
  @JsName("BoundGraph")
  public open var boundGraph: EdGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeComposite

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeComposite

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeComposite

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeComposite

    @JsName("C")
    public fun copy(other: UObject): K2NodeComposite

    @JsName("C")
    public fun copy(other: Any): K2NodeComposite
  }
}

@JsName("K2Node_ConvertAsset")
public open external class K2NodeConvertAsset(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeConvertAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeConvertAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeConvertAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeConvertAsset

    @JsName("C")
    public fun copy(other: UObject): K2NodeConvertAsset

    @JsName("C")
    public fun copy(other: Any): K2NodeConvertAsset
  }
}

@JsName("K2Node_Copy")
public open external class K2NodeCopy(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCopy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCopy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCopy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCopy

    @JsName("C")
    public fun copy(other: UObject): K2NodeCopy

    @JsName("C")
    public fun copy(other: Any): K2NodeCopy
  }
}

@JsName("K2Node_CreateDelegate")
public open external class K2NodeCreateDelegate(
  outer: UObject,
) : K2Node {
  @JsName("SelectedFunctionName")
  public open var selectedFunctionName: String

  @JsName("SelectedFunctionGuid")
  public open var selectedFunctionGuid: Guid

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeCreateDelegate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeCreateDelegate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeCreateDelegate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeCreateDelegate

    @JsName("C")
    public fun copy(other: UObject): K2NodeCreateDelegate

    @JsName("C")
    public fun copy(other: Any): K2NodeCreateDelegate
  }
}

@JsName("K2Node_DeadClass")
public open external class K2NodeDeadClass(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeDeadClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeDeadClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeDeadClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeDeadClass

    @JsName("C")
    public fun copy(other: UObject): K2NodeDeadClass

    @JsName("C")
    public fun copy(other: Any): K2NodeDeadClass
  }
}

@JsName("K2Node_DelegateSet")
public open external class K2NodeDelegateSet(
  outer: UObject,
) : K2Node {
  @JsName("DelegatePropertyName")
  public open var delegatePropertyName: String

  @JsName("DelegatePropertyClass")
  public open var delegatePropertyClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeDelegateSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeDelegateSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeDelegateSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeDelegateSet

    @JsName("C")
    public fun copy(other: UObject): K2NodeDelegateSet

    @JsName("C")
    public fun copy(other: Any): K2NodeDelegateSet
  }
}

@JsName("K2Node_TemporaryVariable")
public open external class K2NodeTemporaryVariable(
  outer: UObject,
) : K2Node {
  @JsName("VariableType")
  public open var variableType: EdGraphPinType

  @JsName("bIsPersistent")
  public open var isPersistent: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeTemporaryVariable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeTemporaryVariable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeTemporaryVariable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeTemporaryVariable

    @JsName("C")
    public fun copy(other: UObject): K2NodeTemporaryVariable

    @JsName("C")
    public fun copy(other: Any): K2NodeTemporaryVariable
  }
}

@JsName("K2Node_DoOnceMultiInput")
public open external class K2NodeDoOnceMultiInput(
  outer: UObject,
) : K2Node {
  @JsName("NumAdditionalInputs")
  public open var numAdditionalInputs: Number

  @JsName("DataNode")
  public open var dataNode: K2NodeTemporaryVariable

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeDoOnceMultiInput

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeDoOnceMultiInput

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeDoOnceMultiInput

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeDoOnceMultiInput

    @JsName("C")
    public fun copy(other: UObject): K2NodeDoOnceMultiInput

    @JsName("C")
    public fun copy(other: Any): K2NodeDoOnceMultiInput
  }
}

@JsName("K2Node_EaseFunction")
public open external class K2NodeEaseFunction(
  outer: UObject,
) : K2Node {
  @JsName("EaseFunctionName")
  public open var easeFunctionName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeEaseFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeEaseFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeEaseFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeEaseFunction

    @JsName("C")
    public fun copy(other: UObject): K2NodeEaseFunction

    @JsName("C")
    public fun copy(other: Any): K2NodeEaseFunction
  }
}

@JsName("K2Node_EditorPropertyAccessBase")
public open external class K2NodeEditorPropertyAccessBase(
  outer: UObject,
) : K2NodeCallFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeEditorPropertyAccessBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeEditorPropertyAccessBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeEditorPropertyAccessBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeEditorPropertyAccessBase

    @JsName("C")
    public fun copy(other: UObject): K2NodeEditorPropertyAccessBase

    @JsName("C")
    public fun copy(other: Any): K2NodeEditorPropertyAccessBase
  }
}

@JsName("K2Node_GetEditorProperty")
public open external class K2NodeGetEditorProperty(
  outer: UObject,
) : K2NodeEditorPropertyAccessBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetEditorProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetEditorProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetEditorProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetEditorProperty

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetEditorProperty

    @JsName("C")
    public fun copy(other: Any): K2NodeGetEditorProperty
  }
}

@JsName("K2Node_SetEditorProperty")
public open external class K2NodeSetEditorProperty(
  outer: UObject,
) : K2NodeEditorPropertyAccessBase {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSetEditorProperty

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSetEditorProperty

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSetEditorProperty

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSetEditorProperty

    @JsName("C")
    public fun copy(other: UObject): K2NodeSetEditorProperty

    @JsName("C")
    public fun copy(other: Any): K2NodeSetEditorProperty
  }
}

@JsName("K2Node_EnumEquality")
public open external class K2NodeEnumEquality(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeEnumEquality

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeEnumEquality

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeEnumEquality

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeEnumEquality

    @JsName("C")
    public fun copy(other: UObject): K2NodeEnumEquality

    @JsName("C")
    public fun copy(other: Any): K2NodeEnumEquality
  }
}

@JsName("K2Node_EnumInequality")
public open external class K2NodeEnumInequality(
  outer: UObject,
) : K2NodeEnumEquality {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeEnumInequality

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeEnumInequality

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeEnumInequality

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeEnumInequality

    @JsName("C")
    public fun copy(other: UObject): K2NodeEnumInequality

    @JsName("C")
    public fun copy(other: Any): K2NodeEnumInequality
  }
}

@JsName("K2Node_EnumLiteral")
public open external class K2NodeEnumLiteral(
  outer: UObject,
) : K2Node {
  @JsName("Enum")
  public open var enum: Enum

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeEnumLiteral

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeEnumLiteral

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeEnumLiteral

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeEnumLiteral

    @JsName("C")
    public fun copy(other: UObject): K2NodeEnumLiteral

    @JsName("C")
    public fun copy(other: Any): K2NodeEnumLiteral
  }
}

@JsName("K2Node_EventNodeInterface")
public open external class K2NodeEventNodeInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeEventNodeInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeEventNodeInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeEventNodeInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeEventNodeInterface

    @JsName("C")
    public fun copy(other: UObject): K2NodeEventNodeInterface

    @JsName("C")
    public fun copy(other: Any): K2NodeEventNodeInterface
  }
}

@JsName("K2Node_ExecutionSequence")
public open external class K2NodeExecutionSequence(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeExecutionSequence

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeExecutionSequence

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeExecutionSequence

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeExecutionSequence

    @JsName("C")
    public fun copy(other: UObject): K2NodeExecutionSequence

    @JsName("C")
    public fun copy(other: Any): K2NodeExecutionSequence
  }
}

@JsName("K2Node_ExternalGraphInterface")
public open external class K2NodeExternalGraphInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeExternalGraphInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeExternalGraphInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeExternalGraphInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeExternalGraphInterface

    @JsName("C")
    public fun copy(other: UObject): K2NodeExternalGraphInterface

    @JsName("C")
    public fun copy(other: Any): K2NodeExternalGraphInterface
  }
}

@JsName("K2Node_ForEachElementInEnum")
public open external class K2NodeForEachElementInEnum(
  outer: UObject,
) : K2Node {
  @JsName("Enum")
  public open var enum: Enum

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeForEachElementInEnum

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeForEachElementInEnum

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeForEachElementInEnum

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeForEachElementInEnum

    @JsName("C")
    public fun copy(other: UObject): K2NodeForEachElementInEnum

    @JsName("C")
    public fun copy(other: Any): K2NodeForEachElementInEnum
  }
}

@JsName("K2Node_FormatText")
public open external class K2NodeFormatText(
  outer: UObject,
) : K2Node {
  @JsName("PinNames")
  public open var pinNames: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeFormatText

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeFormatText

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeFormatText

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeFormatText

    @JsName("C")
    public fun copy(other: UObject): K2NodeFormatText

    @JsName("C")
    public fun copy(other: Any): K2NodeFormatText
  }
}

@JsName("K2Node_FunctionTerminator")
public open external class K2NodeFunctionTerminator(
  outer: UObject,
) : K2NodeEditablePinBase {
  @JsName("FunctionReference")
  public open var functionReference: MemberReference

  @JsName("SignatureClass")
  public open var signatureClass: UnrealEngineClass

  @JsName("SignatureName")
  public open var signatureName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeFunctionTerminator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeFunctionTerminator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeFunctionTerminator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeFunctionTerminator

    @JsName("C")
    public fun copy(other: UObject): K2NodeFunctionTerminator

    @JsName("C")
    public fun copy(other: Any): K2NodeFunctionTerminator
  }
}

@JsName("K2Node_FunctionEntry")
public open external class K2NodeFunctionEntry(
  outer: UObject,
) : K2NodeFunctionTerminator {
  @JsName("CustomGeneratedFunctionName")
  public open var customGeneratedFunctionName: String

  @JsName("MetaData")
  public open var metaData: KismetUserDeclaredFunctionMetadata

  @JsName("LocalVariables")
  public open var localVariables: Array<BpVariableDescription>

  @JsName("bEnforceConstCorrectness")
  public open var enforceConstCorrectness: Boolean

  @JsName("ExtraFlags")
  public open var extraFlags: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeFunctionEntry

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeFunctionEntry

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeFunctionEntry

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeFunctionEntry

    @JsName("C")
    public fun copy(other: UObject): K2NodeFunctionEntry

    @JsName("C")
    public fun copy(other: Any): K2NodeFunctionEntry
  }
}

@JsName("K2Node_FunctionResult")
public open external class K2NodeFunctionResult(
  outer: UObject,
) : K2NodeFunctionTerminator {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeFunctionResult

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeFunctionResult

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeFunctionResult

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeFunctionResult

    @JsName("C")
    public fun copy(other: UObject): K2NodeFunctionResult

    @JsName("C")
    public fun copy(other: Any): K2NodeFunctionResult
  }
}

@JsName("K2Node_GenericCreateObject")
public open external class K2NodeGenericCreateObject(
  outer: UObject,
) : K2NodeConstructObjectFromClass {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGenericCreateObject

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGenericCreateObject

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGenericCreateObject

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGenericCreateObject

    @JsName("C")
    public fun copy(other: UObject): K2NodeGenericCreateObject

    @JsName("C")
    public fun copy(other: Any): K2NodeGenericCreateObject
  }
}

@JsName("K2Node_GetArrayItem")
public open external class K2NodeGetArrayItem(
  outer: UObject,
) : K2Node {
  @JsName("bReturnByRefDesired")
  public open var returnByRefDesired: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetArrayItem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetArrayItem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetArrayItem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetArrayItem

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetArrayItem

    @JsName("C")
    public fun copy(other: Any): K2NodeGetArrayItem
  }
}

@JsName("K2Node_GetClassDefaults")
public open external class K2NodeGetClassDefaults(
  outer: UObject,
) : K2Node {
  @JsName("BlueprintSubscribedTo")
  public open var blueprintSubscribedTo: Blueprint

  @JsName("ShowPinForProperties")
  public open var showPinForProperties: Array<OptionalPinFromProperty>

  @JsName("bExcludeObjectContainers")
  public open var excludeObjectContainers: Boolean

  @JsName("bExcludeObjectArrays")
  public open var excludeObjectArrays: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetClassDefaults

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetClassDefaults

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetClassDefaults

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetClassDefaults

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetClassDefaults

    @JsName("C")
    public fun copy(other: Any): K2NodeGetClassDefaults
  }
}

@JsName("K2Node_GetDataTableRow")
public open external class K2NodeGetDataTableRow(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetDataTableRow

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetDataTableRow

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetDataTableRow

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetDataTableRow

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetDataTableRow

    @JsName("C")
    public fun copy(other: Any): K2NodeGetDataTableRow
  }
}

@JsName("K2Node_GetEnumeratorName")
public open external class K2NodeGetEnumeratorName(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetEnumeratorName

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetEnumeratorName

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetEnumeratorName

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetEnumeratorName

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetEnumeratorName

    @JsName("C")
    public fun copy(other: Any): K2NodeGetEnumeratorName
  }
}

@JsName("K2Node_GetEnumeratorNameAsString")
public open external class K2NodeGetEnumeratorNameAsString(
  outer: UObject,
) : K2NodeGetEnumeratorName {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetEnumeratorNameAsString

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetEnumeratorNameAsString

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetEnumeratorNameAsString

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetEnumeratorNameAsString

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetEnumeratorNameAsString

    @JsName("C")
    public fun copy(other: Any): K2NodeGetEnumeratorNameAsString
  }
}

@JsName("K2Node_GetInputAxisKeyValue")
public open external class K2NodeGetInputAxisKeyValue(
  outer: UObject,
) : K2NodeCallFunction {
  @JsName("InputAxisKey")
  public open var inputAxisKey: Key

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetInputAxisKeyValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetInputAxisKeyValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetInputAxisKeyValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetInputAxisKeyValue

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetInputAxisKeyValue

    @JsName("C")
    public fun copy(other: Any): K2NodeGetInputAxisKeyValue
  }
}

@JsName("K2Node_GetInputAxisValue")
public open external class K2NodeGetInputAxisValue(
  outer: UObject,
) : K2NodeCallFunction {
  @JsName("InputAxisName")
  public open var inputAxisName: String

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetInputAxisValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetInputAxisValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetInputAxisValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetInputAxisValue

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetInputAxisValue

    @JsName("C")
    public fun copy(other: Any): K2NodeGetInputAxisValue
  }
}

@JsName("K2Node_GetInputVectorAxisValue")
public open external class K2NodeGetInputVectorAxisValue(
  outer: UObject,
) : K2NodeGetInputAxisKeyValue {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetInputVectorAxisValue

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetInputVectorAxisValue

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetInputVectorAxisValue

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetInputVectorAxisValue

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetInputVectorAxisValue

    @JsName("C")
    public fun copy(other: Any): K2NodeGetInputVectorAxisValue
  }
}

@JsName("K2Node_GetNumEnumEntries")
public open external class K2NodeGetNumEnumEntries(
  outer: UObject,
) : K2Node {
  @JsName("Enum")
  public open var enum: Enum

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetNumEnumEntries

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetNumEnumEntries

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetNumEnumEntries

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetNumEnumEntries

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetNumEnumEntries

    @JsName("C")
    public fun copy(other: Any): K2NodeGetNumEnumEntries
  }
}

@JsName("K2Node_GetSubsystem")
public open external class K2NodeGetSubsystem(
  outer: UObject,
) : K2Node {
  @JsName("CustomClass")
  public open var customClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetSubsystem

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetSubsystem

    @JsName("C")
    public fun copy(other: Any): K2NodeGetSubsystem
  }
}

@JsName("K2Node_GetSubsystemFromPC")
public open external class K2NodeGetSubsystemFromPc(
  outer: UObject,
) : K2NodeGetSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetSubsystemFromPc

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetSubsystemFromPc

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetSubsystemFromPc

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetSubsystemFromPc

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetSubsystemFromPc

    @JsName("C")
    public fun copy(other: Any): K2NodeGetSubsystemFromPc
  }
}

@JsName("K2Node_GetEngineSubsystem")
public open external class K2NodeGetEngineSubsystem(
  outer: UObject,
) : K2NodeGetSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetEngineSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetEngineSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetEngineSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetEngineSubsystem

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetEngineSubsystem

    @JsName("C")
    public fun copy(other: Any): K2NodeGetEngineSubsystem
  }
}

@JsName("K2Node_GetEditorSubsystem")
public open external class K2NodeGetEditorSubsystem(
  outer: UObject,
) : K2NodeGetSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeGetEditorSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeGetEditorSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeGetEditorSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeGetEditorSubsystem

    @JsName("C")
    public fun copy(other: UObject): K2NodeGetEditorSubsystem

    @JsName("C")
    public fun copy(other: Any): K2NodeGetEditorSubsystem
  }
}

@JsName("K2Node_IfThenElse")
public open external class K2NodeIfThenElse(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeIfThenElse

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeIfThenElse

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeIfThenElse

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeIfThenElse

    @JsName("C")
    public fun copy(other: UObject): K2NodeIfThenElse

    @JsName("C")
    public fun copy(other: Any): K2NodeIfThenElse
  }
}

@JsName("K2Node_InputAction")
public open external class K2NodeInputAction(
  outer: UObject,
) : K2Node {
  @JsName("InputActionName")
  public open var inputActionName: String

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputAction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputAction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputAction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputAction

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputAction

    @JsName("C")
    public fun copy(other: Any): K2NodeInputAction
  }
}

@JsName("K2Node_InputActionEvent")
public open external class K2NodeInputActionEvent(
  outer: UObject,
) : K2NodeEvent {
  @JsName("InputActionName")
  public open var inputActionName: String

  @JsName("InputKeyEvent")
  public open var inputKeyEvent: String

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputActionEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputActionEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputActionEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputActionEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputActionEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeInputActionEvent
  }
}

@JsName("K2Node_InputAxisEvent")
public open external class K2NodeInputAxisEvent(
  outer: UObject,
) : K2NodeEvent {
  @JsName("InputAxisName")
  public open var inputAxisName: String

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputAxisEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputAxisEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputAxisEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputAxisEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputAxisEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeInputAxisEvent
  }
}

@JsName("K2Node_InputAxisKeyEvent")
public open external class K2NodeInputAxisKeyEvent(
  outer: UObject,
) : K2NodeEvent {
  @JsName("AxisKey")
  public open var axisKey: Key

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputAxisKeyEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputAxisKeyEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputAxisKeyEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputAxisKeyEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputAxisKeyEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeInputAxisKeyEvent
  }
}

@JsName("K2Node_InputKey")
public open external class K2NodeInputKey(
  outer: UObject,
) : K2Node {
  @JsName("InputKey")
  public open var inputKey: Key

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  @JsName("bControl")
  public open var control: Boolean

  @JsName("bAlt")
  public open var alt: Boolean

  @JsName("bShift")
  public open var shift: Boolean

  @JsName("bCommand")
  public open var command: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputKey

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputKey

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputKey

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputKey

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputKey

    @JsName("C")
    public fun copy(other: Any): K2NodeInputKey
  }
}

@JsName("K2Node_InputKeyEvent")
public open external class K2NodeInputKeyEvent(
  outer: UObject,
) : K2NodeEvent {
  @JsName("InputChord")
  public open var inputChord: InputChord

  @JsName("InputKeyEvent")
  public open var inputKeyEvent: String

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputKeyEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputKeyEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputKeyEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputKeyEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputKeyEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeInputKeyEvent
  }
}

@JsName("K2Node_InputTouch")
public open external class K2NodeInputTouch(
  outer: UObject,
) : K2Node {
  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputTouch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputTouch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputTouch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputTouch

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputTouch

    @JsName("C")
    public fun copy(other: Any): K2NodeInputTouch
  }
}

@JsName("K2Node_InputTouchEvent")
public open external class K2NodeInputTouchEvent(
  outer: UObject,
) : K2NodeEvent {
  @JsName("InputKeyEvent")
  public open var inputKeyEvent: String

  @JsName("bConsumeInput")
  public open var consumeInput: Boolean

  @JsName("bExecuteWhenPaused")
  public open var executeWhenPaused: Boolean

  @JsName("bOverrideParentBinding")
  public open var overrideParentBinding: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputTouchEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputTouchEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputTouchEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputTouchEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputTouchEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeInputTouchEvent
  }
}

@JsName("K2Node_InputVectorAxisEvent")
public open external class K2NodeInputVectorAxisEvent(
  outer: UObject,
) : K2NodeInputAxisKeyEvent {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeInputVectorAxisEvent

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeInputVectorAxisEvent

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeInputVectorAxisEvent

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeInputVectorAxisEvent

    @JsName("C")
    public fun copy(other: UObject): K2NodeInputVectorAxisEvent

    @JsName("C")
    public fun copy(other: Any): K2NodeInputVectorAxisEvent
  }
}

@JsName("K2Node_Knot")
public open external class K2NodeKnot(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeKnot

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeKnot

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeKnot

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeKnot

    @JsName("C")
    public fun copy(other: UObject): K2NodeKnot

    @JsName("C")
    public fun copy(other: Any): K2NodeKnot
  }
}

@JsName("K2Node_Literal")
public open external class K2NodeLiteral(
  outer: UObject,
) : K2Node {
  @JsName("ObjectRef")
  public open var objectRef: UObject

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeLiteral

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeLiteral

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeLiteral

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeLiteral

    @JsName("C")
    public fun copy(other: UObject): K2NodeLiteral

    @JsName("C")
    public fun copy(other: Any): K2NodeLiteral
  }
}

@JsName("K2Node_LoadAsset")
public open external class K2NodeLoadAsset(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeLoadAsset

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeLoadAsset

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeLoadAsset

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeLoadAsset

    @JsName("C")
    public fun copy(other: UObject): K2NodeLoadAsset

    @JsName("C")
    public fun copy(other: Any): K2NodeLoadAsset
  }
}

@JsName("K2Node_LoadAssetClass")
public open external class K2NodeLoadAssetClass(
  outer: UObject,
) : K2NodeLoadAsset {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeLoadAssetClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeLoadAssetClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeLoadAssetClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeLoadAssetClass

    @JsName("C")
    public fun copy(other: UObject): K2NodeLoadAssetClass

    @JsName("C")
    public fun copy(other: Any): K2NodeLoadAssetClass
  }
}

@JsName("K2Node_LocalVariable")
public open external class K2NodeLocalVariable(
  outer: UObject,
) : K2NodeTemporaryVariable {
  @JsName("CustomVariableName")
  public open var customVariableName: String

  @JsName("VariableTooltip")
  public open var variableTooltip: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeLocalVariable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeLocalVariable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeLocalVariable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeLocalVariable

    @JsName("C")
    public fun copy(other: UObject): K2NodeLocalVariable

    @JsName("C")
    public fun copy(other: Any): K2NodeLocalVariable
  }
}

public open external class GraphReference {
  @JsName("MacroGraph")
  public open var macroGraph: EdGraph

  @JsName("GraphBlueprint")
  public open var graphBlueprint: Blueprint

  @JsName("GraphGuid")
  public open var graphGuid: Guid

  public open fun clone(): GraphReference

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): GraphReference

    @JsName("C")
    public fun copy(other: Any): GraphReference
  }
}

@JsName("K2Node_MacroInstance")
public open external class K2NodeMacroInstance(
  outer: UObject,
) : K2NodeTunnel {
  @JsName("MacroGraph")
  public open var macroGraph: EdGraph

  @JsName("MacroGraphReference")
  public open var macroGraphReference: GraphReference

  @JsName("ResolvedWildcardType")
  public open var resolvedWildcardType: EdGraphPinType

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMacroInstance

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMacroInstance

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMacroInstance

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMacroInstance

    @JsName("C")
    public fun copy(other: UObject): K2NodeMacroInstance

    @JsName("C")
    public fun copy(other: Any): K2NodeMacroInstance
  }
}

@JsName("K2Node_MakeContainer")
public open external class K2NodeMakeContainer(
  outer: UObject,
) : K2Node {
  @JsName("NumInputs")
  public open var numInputs: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMakeContainer

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMakeContainer

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMakeContainer

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMakeContainer

    @JsName("C")
    public fun copy(other: UObject): K2NodeMakeContainer

    @JsName("C")
    public fun copy(other: Any): K2NodeMakeContainer
  }
}

@JsName("K2Node_MakeArray")
public open external class K2NodeMakeArray(
  outer: UObject,
) : K2NodeMakeContainer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMakeArray

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMakeArray

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMakeArray

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMakeArray

    @JsName("C")
    public fun copy(other: UObject): K2NodeMakeArray

    @JsName("C")
    public fun copy(other: Any): K2NodeMakeArray
  }
}

@JsName("K2Node_MakeMap")
public open external class K2NodeMakeMap(
  outer: UObject,
) : K2NodeMakeContainer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMakeMap

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMakeMap

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMakeMap

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMakeMap

    @JsName("C")
    public fun copy(other: UObject): K2NodeMakeMap

    @JsName("C")
    public fun copy(other: Any): K2NodeMakeMap
  }
}

@JsName("K2Node_MakeSet")
public open external class K2NodeMakeSet(
  outer: UObject,
) : K2NodeMakeContainer {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMakeSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMakeSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMakeSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMakeSet

    @JsName("C")
    public fun copy(other: UObject): K2NodeMakeSet

    @JsName("C")
    public fun copy(other: Any): K2NodeMakeSet
  }
}

@JsName("K2Node_StructMemberSet")
public open external class K2NodeStructMemberSet(
  outer: UObject,
) : K2NodeStructOperation {
  @JsName("ShowPinForProperties")
  public open var showPinForProperties: Array<OptionalPinFromProperty>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeStructMemberSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeStructMemberSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeStructMemberSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeStructMemberSet

    @JsName("C")
    public fun copy(other: UObject): K2NodeStructMemberSet

    @JsName("C")
    public fun copy(other: Any): K2NodeStructMemberSet
  }
}

@JsName("K2Node_MakeStruct")
public open external class K2NodeMakeStruct(
  outer: UObject,
) : K2NodeStructMemberSet {
  @JsName("bMadeAfterOverridePinRemoval")
  public open var madeAfterOverridePinRemoval: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMakeStruct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMakeStruct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMakeStruct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMakeStruct

    @JsName("C")
    public fun copy(other: UObject): K2NodeMakeStruct

    @JsName("C")
    public fun copy(other: Any): K2NodeMakeStruct
  }
}

@JsName("K2Node_MakeVariable")
public open external class K2NodeMakeVariable(
  outer: UObject,
) : K2Node {
  @JsName("VariableType")
  public open var variableType: BpVariableDescription

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMakeVariable

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMakeVariable

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMakeVariable

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMakeVariable

    @JsName("C")
    public fun copy(other: UObject): K2NodeMakeVariable

    @JsName("C")
    public fun copy(other: Any): K2NodeMakeVariable
  }
}

@JsName("K2Node_MathExpression")
public open external class K2NodeMathExpression(
  outer: UObject,
) : K2NodeComposite {
  @JsName("Expression")
  public open var expression: String

  @JsName("bMadeAfterRotChange")
  public open var madeAfterRotChange: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMathExpression

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMathExpression

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMathExpression

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMathExpression

    @JsName("C")
    public fun copy(other: UObject): K2NodeMathExpression

    @JsName("C")
    public fun copy(other: Any): K2NodeMathExpression
  }
}

public open external class InterpFilter(
  outer: UObject,
) : UObject {
  @JsName("Caption")
  public open var caption: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpFilter

    @JsName("C")
    public fun copy(other: UObject): InterpFilter

    @JsName("C")
    public fun copy(other: Any): InterpFilter
  }
}

public open external class InterpGroupDirector(
  outer: UObject,
) : InterpGroup {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpGroupDirector

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpGroupDirector

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpGroupDirector

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpGroupDirector

    @JsName("C")
    public fun copy(other: UObject): InterpGroupDirector

    @JsName("C")
    public fun copy(other: Any): InterpGroupDirector
  }
}

public open external class InterpData(
  outer: UObject,
) : UObject {
  @JsName("InterpLength")
  public open var interpLength: Number

  @JsName("PathBuildTime")
  public open var pathBuildTime: Number

  @JsName("InterpGroups")
  public open var interpGroups: Array<InterpGroup>

  @JsName("CurveEdSetup")
  public open var curveEdSetup: InterpCurveEdSetup

  @JsName("InterpFilters")
  public open var interpFilters: Array<InterpFilter>

  @JsName("SelectedFilter")
  public open var selectedFilter: InterpFilter

  @JsName("DefaultFilters")
  public open var defaultFilters: Array<InterpFilter>

  @JsName("EdSectionStart")
  public open var edSectionStart: Number

  @JsName("EdSectionEnd")
  public open var edSectionEnd: Number

  @JsName("bShouldBakeAndPrune")
  public open var shouldBakeAndPrune: Boolean

  @JsName("CachedDirectorGroup")
  public open var cachedDirectorGroup: InterpGroupDirector

  @JsName("AllEventNames")
  public open var allEventNames: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): InterpData

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): InterpData

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): InterpData

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): InterpData

    @JsName("C")
    public fun copy(other: UObject): InterpData

    @JsName("C")
    public fun copy(other: Any): InterpData
  }
}

public open external class InterpGroupActorInfo {
  @JsName("ObjectName")
  public open var objectName: String

  @JsName("Actors")
  public open var actors: Array<Actor>

  public open fun clone(): InterpGroupActorInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpGroupActorInfo

    @JsName("C")
    public fun copy(other: Any): InterpGroupActorInfo
  }
}

public open external class CameraCutInfo {
  @JsName("Location")
  public open var location: Vector

  @JsName("Timestamp")
  public open var timestamp: Number

  public open fun clone(): CameraCutInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): CameraCutInfo

    @JsName("C")
    public fun copy(other: Any): CameraCutInfo
  }
}

public open external class MatineeActor(
  inWorld: World,
  location: Vector,
  rotation: Rotator,
) : Actor {
  @JsName("MatineeData")
  public open var matineeData: InterpData

  @JsName("MatineeControllerName")
  public open var matineeControllerName: String

  @JsName("PlayRate")
  public open var playRate: Number

  @JsName("bPlayOnLevelLoad")
  public open var playOnLevelLoad: Boolean

  @JsName("bForceStartPos")
  public open var forceStartPos: Boolean

  @JsName("ForceStartPosition")
  public open var forceStartPosition: Number

  @JsName("bLooping")
  public open var looping: Boolean

  @JsName("bRewindOnPlay")
  public open var rewindOnPlay: Boolean

  @JsName("bNoResetOnRewind")
  public open var noResetOnRewind: Boolean

  @JsName("bRewindIfAlreadyPlaying")
  public open var rewindIfAlreadyPlaying: Boolean

  @JsName("bDisableRadioFilter")
  public open var disableRadioFilter: Boolean

  @JsName("bClientSideOnly")
  public open var clientSideOnly: Boolean

  @JsName("bSkipUpdateIfNotVisible")
  public open var skipUpdateIfNotVisible: Boolean

  @JsName("bIsSkippable")
  public open var isSkippable: Boolean

  @JsName("PreferredSplitScreenNum")
  public open var preferredSplitScreenNum: Number

  @JsName("bDisableMovementInput")
  public open var disableMovementInput: Boolean

  @JsName("bDisableLookAtInput")
  public open var disableLookAtInput: Boolean

  @JsName("bHidePlayer")
  public open var hidePlayer: Boolean

  @JsName("bHideHud")
  public open var hideHud: Boolean

  @JsName("GroupActorInfos")
  public open var groupActorInfos: Array<InterpGroupActorInfo>

  @JsName("bShouldShowGore")
  public open var shouldShowGore: Boolean

  @JsName("GroupInst")
  public open var groupInst: Array<InterpGroupInst>

  @JsName("CameraCuts")
  public open var cameraCuts: Array<CameraCutInfo>

  @JsName("SpriteComponent")
  public open var spriteComponent: BillboardComponent

  @JsName("bIsBeingEdited")
  public open var isBeingEdited: Boolean

  @JsName("bIsScrubbing")
  public open var isScrubbing: Boolean

  @JsName("bIsPlaying")
  public open var isPlaying: Boolean

  @JsName("bReversePlayback")
  public open var reversePlayback: Boolean

  @JsName("bPaused")
  public open var paused: Boolean

  @JsName("bPendingStop")
  public open var pendingStop: Boolean

  @JsName("InterpPosition")
  public open var interpPosition: Number

  @JsName("ReplicationForceIsPlaying")
  public open var replicationForceIsPlaying: Number

  @JsName("OnPlay")
  public open var onPlay: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnStop")
  public open var onStop: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("OnPause")
  public open var onPause: UnrealEngineMulticastDelegate<() -> Unit>

  @JsName("Stop")
  public open fun stop(): Unit

  @JsName("SetPosition")
  public open fun setPosition(newPosition: Number, jump: Boolean): Unit

  @JsName("SetLoopingState")
  public open fun setLoopingState(newLooping: Boolean): Unit

  @JsName("Reverse")
  public open fun reverse(): Unit

  @JsName("Play")
  public open fun play(): Unit

  @JsName("Pause")
  public open fun pause(): Unit

  @JsName("EnableGroupByName")
  public open fun enableGroupByName(groupName: String, enable: Boolean): Unit

  @JsName("ChangePlaybackDirection")
  public open fun changePlaybackDirection(): Unit

  public companion object {
    @JsName("GetDefaultObject")
    public fun getDefaultObject(): MatineeActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): MatineeActor

    @JsName("C")
    public fun copy(other: UObject): MatineeActor

    @JsName("C")
    public fun copy(other: Any): MatineeActor
  }
}

@JsName("K2Node_MatineeController")
public open external class K2NodeMatineeController(
  outer: UObject,
) : K2Node {
  @JsName("MatineeActor")
  public open var matineeActor: MatineeActor

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMatineeController

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMatineeController

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMatineeController

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMatineeController

    @JsName("C")
    public fun copy(other: UObject): K2NodeMatineeController

    @JsName("C")
    public fun copy(other: Any): K2NodeMatineeController
  }
}

@JsName("K2Node_Message")
public open external class K2NodeMessage(
  outer: UObject,
) : K2NodeCallFunction {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMessage

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMessage

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMessage

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMessage

    @JsName("C")
    public fun copy(other: UObject): K2NodeMessage

    @JsName("C")
    public fun copy(other: Any): K2NodeMessage
  }
}

@JsName("K2Node_MultiGate")
public open external class K2NodeMultiGate(
  outer: UObject,
) : K2NodeExecutionSequence {
  @JsName("DataNode")
  public open var dataNode: K2NodeTemporaryVariable

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeMultiGate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeMultiGate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeMultiGate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeMultiGate

    @JsName("C")
    public fun copy(other: UObject): K2NodeMultiGate

    @JsName("C")
    public fun copy(other: Any): K2NodeMultiGate
  }
}

@JsName("K2Node_PromotableOperator")
public open external class K2NodePromotableOperator(
  outer: UObject,
) : K2NodeCallFunction {
  @JsName("NumAdditionalInputs")
  public open var numAdditionalInputs: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodePromotableOperator

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodePromotableOperator

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodePromotableOperator

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodePromotableOperator

    @JsName("C")
    public fun copy(other: UObject): K2NodePromotableOperator

    @JsName("C")
    public fun copy(other: Any): K2NodePromotableOperator
  }
}

@JsName("K2Node_PureAssignmentStatement")
public open external class K2NodePureAssignmentStatement(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodePureAssignmentStatement

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodePureAssignmentStatement

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodePureAssignmentStatement

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodePureAssignmentStatement

    @JsName("C")
    public fun copy(other: UObject): K2NodePureAssignmentStatement

    @JsName("C")
    public fun copy(other: Any): K2NodePureAssignmentStatement
  }
}

@JsName("K2Node_RemoveDelegate")
public open external class K2NodeRemoveDelegate(
  outer: UObject,
) : K2NodeBaseMcDelegate {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeRemoveDelegate

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeRemoveDelegate

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeRemoveDelegate

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeRemoveDelegate

    @JsName("C")
    public fun copy(other: UObject): K2NodeRemoveDelegate

    @JsName("C")
    public fun copy(other: Any): K2NodeRemoveDelegate
  }
}

@JsName("K2Node_Select")
public open external class K2NodeSelect(
  outer: UObject,
) : K2Node {
  @JsName("NumOptionPins")
  public open var numOptionPins: Number

  @JsName("IndexPinType")
  public open var indexPinType: EdGraphPinType

  @JsName("Enum")
  public open var enum: Enum

  @JsName("EnumEntries")
  public open var enumEntries: Array<String>

  @JsName("EnumEntryFriendlyNames")
  public open var enumEntryFriendlyNames: Array<String>

  @JsName("bReconstructNode")
  public open var reconstructNode: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSelect

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSelect

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSelect

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSelect

    @JsName("C")
    public fun copy(other: UObject): K2NodeSelect

    @JsName("C")
    public fun copy(other: Any): K2NodeSelect
  }
}

@JsName("K2Node_Self")
public open external class K2NodeSelf(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSelf

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSelf

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSelf

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSelf

    @JsName("C")
    public fun copy(other: UObject): K2NodeSelf

    @JsName("C")
    public fun copy(other: Any): K2NodeSelf
  }
}

@JsName("K2Node_SetFieldsInStruct")
public open external class K2NodeSetFieldsInStruct(
  outer: UObject,
) : K2NodeMakeStruct {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSetFieldsInStruct

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSetFieldsInStruct

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSetFieldsInStruct

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSetFieldsInStruct

    @JsName("C")
    public fun copy(other: UObject): K2NodeSetFieldsInStruct

    @JsName("C")
    public fun copy(other: Any): K2NodeSetFieldsInStruct
  }
}

@JsName("K2Node_SetVariableOnPersistentFrame")
public open external class K2NodeSetVariableOnPersistentFrame(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSetVariableOnPersistentFrame

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSetVariableOnPersistentFrame

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSetVariableOnPersistentFrame

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSetVariableOnPersistentFrame

    @JsName("C")
    public fun copy(other: UObject): K2NodeSetVariableOnPersistentFrame

    @JsName("C")
    public fun copy(other: Any): K2NodeSetVariableOnPersistentFrame
  }
}

@JsName("K2Node_SpawnActor")
public open external class K2NodeSpawnActor(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSpawnActor

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSpawnActor

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSpawnActor

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSpawnActor

    @JsName("C")
    public fun copy(other: UObject): K2NodeSpawnActor

    @JsName("C")
    public fun copy(other: Any): K2NodeSpawnActor
  }
}

@JsName("K2Node_SpawnActorFromClass")
public open external class K2NodeSpawnActorFromClass(
  outer: UObject,
) : K2NodeConstructObjectFromClass {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSpawnActorFromClass

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSpawnActorFromClass

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSpawnActorFromClass

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSpawnActorFromClass

    @JsName("C")
    public fun copy(other: UObject): K2NodeSpawnActorFromClass

    @JsName("C")
    public fun copy(other: Any): K2NodeSpawnActorFromClass
  }
}

@JsName("K2Node_Switch")
public open external class K2NodeSwitch(
  outer: UObject,
) : K2Node {
  @JsName("bHasDefaultPin")
  public open var hasDefaultPin: Boolean

  @JsName("FunctionName")
  public open var functionName: String

  @JsName("FunctionClass")
  public open var functionClass: UnrealEngineClass

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSwitch

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSwitch

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSwitch

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSwitch

    @JsName("C")
    public fun copy(other: UObject): K2NodeSwitch

    @JsName("C")
    public fun copy(other: Any): K2NodeSwitch
  }
}

@JsName("K2Node_SwitchEnum")
public open external class K2NodeSwitchEnum(
  outer: UObject,
) : K2NodeSwitch {
  @JsName("Enum")
  public open var enum: Enum

  @JsName("EnumEntries")
  public open var enumEntries: Array<String>

  @JsName("EnumFriendlyNames")
  public open var enumFriendlyNames: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSwitchEnum

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSwitchEnum

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSwitchEnum

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSwitchEnum

    @JsName("C")
    public fun copy(other: UObject): K2NodeSwitchEnum

    @JsName("C")
    public fun copy(other: Any): K2NodeSwitchEnum
  }
}

@JsName("K2Node_SwitchInteger")
public open external class K2NodeSwitchInteger(
  outer: UObject,
) : K2NodeSwitch {
  @JsName("StartIndex")
  public open var startIndex: Number

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSwitchInteger

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSwitchInteger

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSwitchInteger

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSwitchInteger

    @JsName("C")
    public fun copy(other: UObject): K2NodeSwitchInteger

    @JsName("C")
    public fun copy(other: Any): K2NodeSwitchInteger
  }
}

@JsName("K2Node_SwitchName")
public open external class K2NodeSwitchName(
  outer: UObject,
) : K2NodeSwitch {
  @JsName("PinNames")
  public open var pinNames: Array<String>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSwitchName

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSwitchName

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSwitchName

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSwitchName

    @JsName("C")
    public fun copy(other: UObject): K2NodeSwitchName

    @JsName("C")
    public fun copy(other: Any): K2NodeSwitchName
  }
}

@JsName("K2Node_SwitchString")
public open external class K2NodeSwitchString(
  outer: UObject,
) : K2NodeSwitch {
  @JsName("PinNames")
  public open var pinNames: Array<String>

  @JsName("bIsCaseSensitive")
  public open var isCaseSensitive: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeSwitchString

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeSwitchString

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeSwitchString

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeSwitchString

    @JsName("C")
    public fun copy(other: UObject): K2NodeSwitchString

    @JsName("C")
    public fun copy(other: Any): K2NodeSwitchString
  }
}

@JsName("K2Node_Timeline")
public open external class K2NodeTimeline(
  outer: UObject,
) : K2Node {
  @JsName("TimelineName")
  public open var timelineName: String

  @JsName("bAutoPlay")
  public open var autoPlay: Boolean

  @JsName("TimelineGuid")
  public open var timelineGuid: Guid

  @JsName("bLoop")
  public open var loop: Boolean

  @JsName("bReplicated")
  public open var replicated: Boolean

  @JsName("bIgnoreTimeDilation")
  public open var ignoreTimeDilation: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeTimeline

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeTimeline

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeTimeline

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeTimeline

    @JsName("C")
    public fun copy(other: UObject): K2NodeTimeline

    @JsName("C")
    public fun copy(other: Any): K2NodeTimeline
  }
}

@JsName("ETunnelBoundaryType")
public external object TunnelBoundaryType {
  public var Unknown: String

  public var EntrySite: String

  public var InputSite: String

  public var OutputSite: String

  @JsName("ETunnelBoundaryType_MAX")
  public var Max: String
}

@JsName("K2Node_TunnelBoundary")
public open external class K2NodeTunnelBoundary(
  outer: UObject,
) : K2Node {
  @JsName("BaseName")
  public open var baseName: String

  @JsName("TunnelBoundaryType")
  public open var tunnelBoundaryType: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeTunnelBoundary

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeTunnelBoundary

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeTunnelBoundary

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeTunnelBoundary

    @JsName("C")
    public fun copy(other: UObject): K2NodeTunnelBoundary

    @JsName("C")
    public fun copy(other: Any): K2NodeTunnelBoundary
  }
}

@JsName("K2Node_VariableGet")
public open external class K2NodeVariableGet(
  outer: UObject,
) : K2NodeVariable {
  @JsName("bIsPureGet")
  public open var isPureGet: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeVariableGet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeVariableGet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeVariableGet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeVariableGet

    @JsName("C")
    public fun copy(other: UObject): K2NodeVariableGet

    @JsName("C")
    public fun copy(other: Any): K2NodeVariableGet
  }
}

@JsName("K2Node_VariableSet")
public open external class K2NodeVariableSet(
  outer: UObject,
) : K2NodeVariable {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeVariableSet

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeVariableSet

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeVariableSet

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeVariableSet

    @JsName("C")
    public fun copy(other: UObject): K2NodeVariableSet

    @JsName("C")
    public fun copy(other: Any): K2NodeVariableSet
  }
}

@JsName("K2Node_VariableSetRef")
public open external class K2NodeVariableSetRef(
  outer: UObject,
) : K2Node {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): K2NodeVariableSetRef

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): K2NodeVariableSetRef

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): K2NodeVariableSetRef

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): K2NodeVariableSetRef

    @JsName("C")
    public fun copy(other: UObject): K2NodeVariableSetRef

    @JsName("C")
    public fun copy(other: Any): K2NodeVariableSetRef
  }
}

public open external class NodeDependingOnEnumInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): NodeDependingOnEnumInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): NodeDependingOnEnumInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): NodeDependingOnEnumInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): NodeDependingOnEnumInterface

    @JsName("C")
    public fun copy(other: UObject): NodeDependingOnEnumInterface

    @JsName("C")
    public fun copy(other: Any): NodeDependingOnEnumInterface
  }
}

public open external class PinTypeSelectorFilter(
  outer: UObject,
) : UObject {
  @JsName("FilterClass")
  public open var filterClass: Class

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PinTypeSelectorFilter

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PinTypeSelectorFilter

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PinTypeSelectorFilter

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PinTypeSelectorFilter

    @JsName("C")
    public fun copy(other: UObject): PinTypeSelectorFilter

    @JsName("C")
    public fun copy(other: Any): PinTypeSelectorFilter
  }
}

public open external class BlueprintCompilerExtension(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintCompilerExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintCompilerExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintCompilerExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintCompilerExtension

    @JsName("C")
    public fun copy(other: UObject): BlueprintCompilerExtension

    @JsName("C")
    public fun copy(other: Any): BlueprintCompilerExtension
  }
}

public open external class BlueprintEditorToolMenuContext(
  outer: UObject,
) : UObject {
  @JsName("GetBlueprintObj")
  public open fun getBlueprintObj(): Blueprint

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintEditorToolMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintEditorToolMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintEditorToolMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintEditorToolMenuContext

    @JsName("C")
    public fun copy(other: UObject): BlueprintEditorToolMenuContext

    @JsName("C")
    public fun copy(other: Any): BlueprintEditorToolMenuContext
  }
}

public open external class FavoritedBlueprintPaletteItem {
  public open fun clone(): FavoritedBlueprintPaletteItem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): FavoritedBlueprintPaletteItem

    @JsName("C")
    public fun copy(other: Any): FavoritedBlueprintPaletteItem
  }
}

public open external class BlueprintPaletteFavorites(
  outer: UObject,
) : UObject {
  @JsName("CustomFavorites")
  public open var customFavorites: Array<String>

  @JsName("CurrentFavorites")
  public open var currentFavorites: Array<FavoritedBlueprintPaletteItem>

  @JsName("CurrentProfile")
  public open var currentProfile: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlueprintPaletteFavorites

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlueprintPaletteFavorites

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlueprintPaletteFavorites

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlueprintPaletteFavorites

    @JsName("C")
    public fun copy(other: UObject): BlueprintPaletteFavorites

    @JsName("C")
    public fun copy(other: Any): BlueprintPaletteFavorites
  }
}

@JsName("SCSEditorExtensionContext")
public open external class ScsEditorExtensionContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): ScsEditorExtensionContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): ScsEditorExtensionContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): ScsEditorExtensionContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): ScsEditorExtensionContext

    @JsName("C")
    public fun copy(other: UObject): ScsEditorExtensionContext

    @JsName("C")
    public fun copy(other: Any): ScsEditorExtensionContext
  }
}

@JsName("SSCSEditorMenuContext")
public open external class SscsEditorMenuContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SscsEditorMenuContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SscsEditorMenuContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SscsEditorMenuContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SscsEditorMenuContext

    @JsName("C")
    public fun copy(other: UObject): SscsEditorMenuContext

    @JsName("C")
    public fun copy(other: Any): SscsEditorMenuContext
  }
}

public open external class SubobjectEditorExtensionContext(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): SubobjectEditorExtensionContext

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): SubobjectEditorExtensionContext

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): SubobjectEditorExtensionContext

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): SubobjectEditorExtensionContext

    @JsName("C")
    public fun copy(other: UObject): SubobjectEditorExtensionContext

    @JsName("C")
    public fun copy(other: Any): SubobjectEditorExtensionContext
  }
}

@JsName("EBlueprintPinStyleType")
public external object BlueprintPinStyleType {
  @JsName("BPST_Original")
  public var Original: String

  @JsName("BPST_VariantA")
  public var VariantA: String

  @JsName("BPST_MAX")
  public var Max: String
}

@JsName("EGraphPanningMouseButton")
public external object GraphPanningMouseButton {
  public var Right: String

  public var Middle: String

  public var Both: String

  @JsName("EGraphPanningMouseButton_MAX")
  public var Max: String
}

@JsName("ECommentBoxMode")
public external object CommentBoxMode {
  public var GroupMovement: String

  public var NoGroupMovement: String

  @JsName("ECommentBoxMode_MAX")
  public var Max: String
}

public open external class GraphEditorSettings(
  outer: UObject,
) : UObject {
  @JsName("DataPinStyle")
  public open var dataPinStyle: String

  @JsName("PanningMouseButton")
  public open var panningMouseButton: String

  @JsName("PaddingAbovePin")
  public open var paddingAbovePin: Number

  @JsName("PaddingBelowPin")
  public open var paddingBelowPin: Number

  @JsName("PaddingRightOfInput")
  public open var paddingRightOfInput: Number

  @JsName("PaddingLeftOfOutput")
  public open var paddingLeftOfOutput: Number

  @JsName("PaddingTowardsNodeEdge")
  public open var paddingTowardsNodeEdge: Number

  @JsName("bTreatSplinesLikePins")
  public open var treatSplinesLikePins: Boolean

  @JsName("SplineHoverTolerance")
  public open var splineHoverTolerance: Number

  @JsName("SplineCloseTolerance")
  public open var splineCloseTolerance: Number

  @JsName("ForwardSplineHorizontalDeltaRange")
  public open var forwardSplineHorizontalDeltaRange: Number

  @JsName("ForwardSplineVerticalDeltaRange")
  public open var forwardSplineVerticalDeltaRange: Number

  @JsName("ForwardSplineTangentFromHorizontalDelta")
  public open var forwardSplineTangentFromHorizontalDelta: Vector2d

  @JsName("ForwardSplineTangentFromVerticalDelta")
  public open var forwardSplineTangentFromVerticalDelta: Vector2d

  @JsName("BackwardSplineHorizontalDeltaRange")
  public open var backwardSplineHorizontalDeltaRange: Number

  @JsName("BackwardSplineVerticalDeltaRange")
  public open var backwardSplineVerticalDeltaRange: Number

  @JsName("BackwardSplineTangentFromHorizontalDelta")
  public open var backwardSplineTangentFromHorizontalDelta: Vector2d

  @JsName("BackwardSplineTangentFromVerticalDelta")
  public open var backwardSplineTangentFromVerticalDelta: Vector2d

  @JsName("DefaultPinTypeColor")
  public open var defaultPinTypeColor: LinearColor

  @JsName("ExecutionPinTypeColor")
  public open var executionPinTypeColor: LinearColor

  @JsName("BooleanPinTypeColor")
  public open var booleanPinTypeColor: LinearColor

  @JsName("BytePinTypeColor")
  public open var bytePinTypeColor: LinearColor

  @JsName("ClassPinTypeColor")
  public open var classPinTypeColor: LinearColor

  @JsName("IntPinTypeColor")
  public open var intPinTypeColor: LinearColor

  @JsName("Int64PinTypeColor")
  public open var int64PinTypeColor: LinearColor

  @JsName("FloatPinTypeColor")
  public open var floatPinTypeColor: LinearColor

  @JsName("DoublePinTypeColor")
  public open var doublePinTypeColor: LinearColor

  @JsName("RealPinTypeColor")
  public open var realPinTypeColor: LinearColor

  @JsName("NamePinTypeColor")
  public open var namePinTypeColor: LinearColor

  @JsName("SoftObjectPinTypeColor")
  public open var softObjectPinTypeColor: LinearColor

  @JsName("SoftClassPinTypeColor")
  public open var softClassPinTypeColor: LinearColor

  @JsName("DelegatePinTypeColor")
  public open var delegatePinTypeColor: LinearColor

  @JsName("ObjectPinTypeColor")
  public open var objectPinTypeColor: LinearColor

  @JsName("InterfacePinTypeColor")
  public open var interfacePinTypeColor: LinearColor

  @JsName("StringPinTypeColor")
  public open var stringPinTypeColor: LinearColor

  @JsName("TextPinTypeColor")
  public open var textPinTypeColor: LinearColor

  @JsName("StructPinTypeColor")
  public open var structPinTypeColor: LinearColor

  @JsName("WildcardPinTypeColor")
  public open var wildcardPinTypeColor: LinearColor

  @JsName("VectorPinTypeColor")
  public open var vectorPinTypeColor: LinearColor

  @JsName("RotatorPinTypeColor")
  public open var rotatorPinTypeColor: LinearColor

  @JsName("TransformPinTypeColor")
  public open var transformPinTypeColor: LinearColor

  @JsName("IndexPinTypeColor")
  public open var indexPinTypeColor: LinearColor

  @JsName("EventNodeTitleColor")
  public open var eventNodeTitleColor: LinearColor

  @JsName("FunctionCallNodeTitleColor")
  public open var functionCallNodeTitleColor: LinearColor

  @JsName("PureFunctionCallNodeTitleColor")
  public open var pureFunctionCallNodeTitleColor: LinearColor

  @JsName("ParentFunctionCallNodeTitleColor")
  public open var parentFunctionCallNodeTitleColor: LinearColor

  @JsName("FunctionTerminatorNodeTitleColor")
  public open var functionTerminatorNodeTitleColor: LinearColor

  @JsName("ExecBranchNodeTitleColor")
  public open var execBranchNodeTitleColor: LinearColor

  @JsName("ExecSequenceNodeTitleColor")
  public open var execSequenceNodeTitleColor: LinearColor

  @JsName("ResultNodeTitleColor")
  public open var resultNodeTitleColor: LinearColor

  @JsName("DefaultCommentNodeTitleColor")
  public open var defaultCommentNodeTitleColor: LinearColor

  @JsName("PreviewNodeTitleColor")
  public open var previewNodeTitleColor: LinearColor

  @JsName("DefaultDataWireThickness")
  public open var defaultDataWireThickness: Number

  @JsName("DefaultExecutionWireThickness")
  public open var defaultExecutionWireThickness: Number

  @JsName("TraceAttackColor")
  public open var traceAttackColor: LinearColor

  @JsName("TraceAttackWireThickness")
  public open var traceAttackWireThickness: Number

  @JsName("TraceAttackHoldPeriod")
  public open var traceAttackHoldPeriod: Number

  @JsName("TraceDecayPeriod")
  public open var traceDecayPeriod: Number

  @JsName("TraceDecayExponent")
  public open var traceDecayExponent: Number

  @JsName("TraceSustainColor")
  public open var traceSustainColor: LinearColor

  @JsName("TraceSustainWireThickness")
  public open var traceSustainWireThickness: Number

  @JsName("TraceSustainHoldPeriod")
  public open var traceSustainHoldPeriod: Number

  @JsName("TraceReleaseColor")
  public open var traceReleaseColor: LinearColor

  @JsName("TraceReleaseWireThickness")
  public open var traceReleaseWireThickness: Number

  @JsName("TraceReleasePeriod")
  public open var traceReleasePeriod: Number

  @JsName("TraceReleaseExponent")
  public open var traceReleaseExponent: Number

  @JsName("TracePositionBonusPeriod")
  public open var tracePositionBonusPeriod: Number

  @JsName("TracePositionExponent")
  public open var tracePositionExponent: Number

  @JsName("PaddingAutoCollateIncrement")
  public open var paddingAutoCollateIncrement: Number

  @JsName("bOpenCreateMenuOnBlankGraphAreas")
  public open var openCreateMenuOnBlankGraphAreas: Boolean

  @JsName("DefaultCommentNodeMoveMode")
  public open var defaultCommentNodeMoveMode: String

  @JsName("bShowCommentBubbleWhenZoomedOut")
  public open var showCommentBubbleWhenZoomedOut: Boolean

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): GraphEditorSettings

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): GraphEditorSettings

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): GraphEditorSettings

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): GraphEditorSettings

    @JsName("C")
    public fun copy(other: UObject): GraphEditorSettings

    @JsName("C")
    public fun copy(other: Any): GraphEditorSettings
  }
}

public open external class AssetEditorContextInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetEditorContextInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetEditorContextInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetEditorContextInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetEditorContextInterface

    @JsName("C")
    public fun copy(other: UObject): AssetEditorContextInterface

    @JsName("C")
    public fun copy(other: Any): AssetEditorContextInterface
  }
}

public open external class AssetFactoryInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AssetFactoryInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AssetFactoryInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AssetFactoryInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AssetFactoryInterface

    @JsName("C")
    public fun copy(other: UObject): AssetFactoryInterface

    @JsName("C")
    public fun copy(other: Any): AssetFactoryInterface
  }
}

public open external class EditorElementSubsystem(
  outer: UObject,
) : EditorSubsystem {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): EditorElementSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): EditorElementSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): EditorElementSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): EditorElementSubsystem

    @JsName("C")
    public fun copy(other: UObject): EditorElementSubsystem

    @JsName("C")
    public fun copy(other: Any): EditorElementSubsystem
  }
}

public open external class PlacementSubsystem(
  outer: UObject,
) : EditorSubsystem {
  @JsName("AssetFactories")
  public open var assetFactories: Array<Any>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): PlacementSubsystem

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): PlacementSubsystem

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): PlacementSubsystem

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): PlacementSubsystem

    @JsName("C")
    public fun copy(other: UObject): PlacementSubsystem

    @JsName("C")
    public fun copy(other: Any): PlacementSubsystem
  }
}

public open external class TypedElementDetailsInterface(
  outer: UObject,
) : Interface {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementDetailsInterface

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementDetailsInterface

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementDetailsInterface

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementDetailsInterface

    @JsName("C")
    public fun copy(other: UObject): TypedElementDetailsInterface

    @JsName("C")
    public fun copy(other: Any): TypedElementDetailsInterface
  }
}

public open external class TypedElementViewportInteraction(
  outer: UObject,
) : UObject {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): TypedElementViewportInteraction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): TypedElementViewportInteraction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): TypedElementViewportInteraction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): TypedElementViewportInteraction

    @JsName("C")
    public fun copy(other: UObject): TypedElementViewportInteraction

    @JsName("C")
    public fun copy(other: Any): TypedElementViewportInteraction
  }
}

public open external class AnimNodeFunctionRef {
  @JsName("ClassName")
  public open var className: String

  @JsName("FunctionName")
  public open var functionName: String

  @JsName("Class")
  public open var `class`: UnrealEngineClass

  @JsName("UFunction")
  public open var uFunction: UFunction

  public open fun clone(): AnimNodeFunctionRef

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeFunctionRef

    @JsName("C")
    public fun copy(other: Any): AnimNodeFunctionRef
  }
}

@JsName("AnimNode_Base")
public open external class AnimNodeBase {
  @JsName("InitialUpdateFunction")
  public open var initialUpdateFunction: AnimNodeFunctionRef

  @JsName("BecomeRelevantFunction")
  public open var becomeRelevantFunction: AnimNodeFunctionRef

  @JsName("UpdateFunction")
  public open var updateFunction: AnimNodeFunctionRef

  public open fun clone(): AnimNodeBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBase

    @JsName("C")
    public fun copy(other: Any): AnimNodeBase
  }
}

public open external class PoseLinkBase {
  @JsName("LinkID")
  public open var linkId: Number

  @JsName("SourceLinkID")
  public open var sourceLinkId: Number

  public open fun clone(): PoseLinkBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseLinkBase

    @JsName("C")
    public fun copy(other: Any): PoseLinkBase
  }
}

public open external class PoseLink : PoseLinkBase {
  public override fun clone(): PoseLink

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PoseLink

    @JsName("C")
    public fun copy(other: Any): PoseLink
  }
}

@JsName("AnimNode_Root")
public open external class AnimNodeRoot : AnimNodeBase {
  @JsName("Result")
  public open var result: PoseLink

  @JsName("Name")
  public open var name: String

  @JsName("Group")
  public open var group: String

  public override fun clone(): AnimNodeRoot

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeRoot

    @JsName("C")
    public fun copy(other: Any): AnimNodeRoot
  }
}

@JsName("AnimNode_BlendSpaceSampleResult")
public open external class AnimNodeBlendSpaceSampleResult : AnimNodeRoot {
  public override fun clone(): AnimNodeBlendSpaceSampleResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeBlendSpaceSampleResult

    @JsName("C")
    public fun copy(other: Any): AnimNodeBlendSpaceSampleResult
  }
}

@JsName("AnimGraphNode_BlendSpaceSampleResult")
public open external class AnimGraphNodeBlendSpaceSampleResult(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeBlendSpaceSampleResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeBlendSpaceSampleResult

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeBlendSpaceSampleResult

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeBlendSpaceSampleResult

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeBlendSpaceSampleResult

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeBlendSpaceSampleResult

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeBlendSpaceSampleResult
  }
}

public open external class AnimationBlendSpaceSampleGraph(
  outer: UObject,
) : AnimationGraph {
  @JsName("ResultNode")
  public open var resultNode: AnimGraphNodeBlendSpaceSampleResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationBlendSpaceSampleGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationBlendSpaceSampleGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationBlendSpaceSampleGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationBlendSpaceSampleGraph

    @JsName("C")
    public fun copy(other: UObject): AnimationBlendSpaceSampleGraph

    @JsName("C")
    public fun copy(other: Any): AnimationBlendSpaceSampleGraph
  }
}

public open external class AnimationConduitGraphSchema(
  outer: UObject,
) : EdGraphSchemaK2 {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationConduitGraphSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationConduitGraphSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationConduitGraphSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationConduitGraphSchema

    @JsName("C")
    public fun copy(other: UObject): AnimationConduitGraphSchema

    @JsName("C")
    public fun copy(other: Any): AnimationConduitGraphSchema
  }
}

@JsName("AnimNode_StateResult")
public open external class AnimNodeStateResult : AnimNodeRoot {
  @JsName("StateIndex")
  public open var stateIndex: Number

  public override fun clone(): AnimNodeStateResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeStateResult

    @JsName("C")
    public fun copy(other: Any): AnimNodeStateResult
  }
}

@JsName("AnimGraphNode_StateResult")
public open external class AnimGraphNodeStateResult(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeStateResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeStateResult

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeStateResult

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeStateResult

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeStateResult

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeStateResult

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeStateResult
  }
}

@JsName("AnimGraphNode_CustomTransitionResult")
public open external class AnimGraphNodeCustomTransitionResult(
  outer: UObject,
) : AnimGraphNodeStateResult {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeCustomTransitionResult

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeCustomTransitionResult

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeCustomTransitionResult

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeCustomTransitionResult

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeCustomTransitionResult

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeCustomTransitionResult
  }
}

public open external class AnimationCustomTransitionGraph(
  outer: UObject,
) : AnimationGraph {
  @JsName("MyResultNode")
  public open var myResultNode: AnimGraphNodeCustomTransitionResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationCustomTransitionGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationCustomTransitionGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationCustomTransitionGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationCustomTransitionGraph

    @JsName("C")
    public fun copy(other: UObject): AnimationCustomTransitionGraph

    @JsName("C")
    public fun copy(other: Any): AnimationCustomTransitionGraph
  }
}

public open external class AnimationGraphSchema(
  outer: UObject,
) : EdGraphSchemaK2 {
  @JsName("PN_SequenceName")
  public open var pnSequenceName: String

  @JsName("NAME_NeverAsPin")
  public open var nameNeverAsPin: String

  @JsName("NAME_PinHiddenByDefault")
  public open var namePinHiddenByDefault: String

  @JsName("NAME_PinShownByDefault")
  public open var namePinShownByDefault: String

  @JsName("NAME_AlwaysAsPin")
  public open var nameAlwaysAsPin: String

  @JsName("NAME_CustomizeProperty")
  public open var nameCustomizeProperty: String

  @JsName("NAME_OnEvaluate")
  public open var nameOnEvaluate: String

  @JsName("DefaultEvaluationHandlerName")
  public open var defaultEvaluationHandlerName: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationGraphSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationGraphSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationGraphSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationGraphSchema

    @JsName("C")
    public fun copy(other: UObject): AnimationGraphSchema

    @JsName("C")
    public fun copy(other: Any): AnimationGraphSchema
  }
}

public open external class AnimationCustomTransitionSchema(
  outer: UObject,
) : AnimationGraphSchema {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationCustomTransitionSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationCustomTransitionSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationCustomTransitionSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationCustomTransitionSchema

    @JsName("C")
    public fun copy(other: UObject): AnimationCustomTransitionSchema

    @JsName("C")
    public fun copy(other: Any): AnimationCustomTransitionSchema
  }
}

public open external class AnimationStateGraph(
  outer: UObject,
) : AnimationGraph {
  @JsName("MyResultNode")
  public open var myResultNode: AnimGraphNodeStateResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationStateGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationStateGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationStateGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationStateGraph

    @JsName("C")
    public fun copy(other: UObject): AnimationStateGraph

    @JsName("C")
    public fun copy(other: Any): AnimationStateGraph
  }
}

public open external class AnimationStateGraphSchema(
  outer: UObject,
) : AnimationGraphSchema {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationStateGraphSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationStateGraphSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationStateGraphSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationStateGraphSchema

    @JsName("C")
    public fun copy(other: UObject): AnimationStateGraphSchema

    @JsName("C")
    public fun copy(other: Any): AnimationStateGraphSchema
  }
}

public open external class AnimStateEntryNode(
  outer: UObject,
) : EdGraphNode {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimStateEntryNode

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimStateEntryNode

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimStateEntryNode

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimStateEntryNode

    @JsName("C")
    public fun copy(other: UObject): AnimStateEntryNode

    @JsName("C")
    public fun copy(other: Any): AnimStateEntryNode
  }
}

@JsName("AnimGraphNode_StateMachineBase")
public open external class AnimGraphNodeStateMachineBase(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("EditorStateMachineGraph")
  public open var editorStateMachineGraph: AnimationStateMachineGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeStateMachineBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeStateMachineBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeStateMachineBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeStateMachineBase

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeStateMachineBase

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeStateMachineBase
  }
}

public open external class AnimationStateMachineGraph(
  outer: UObject,
) : EdGraph {
  @JsName("EntryNode")
  public open var entryNode: AnimStateEntryNode

  @JsName("OwnerAnimGraphNode")
  public open var ownerAnimGraphNode: AnimGraphNodeStateMachineBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationStateMachineGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationStateMachineGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationStateMachineGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationStateMachineGraph

    @JsName("C")
    public fun copy(other: UObject): AnimationStateMachineGraph

    @JsName("C")
    public fun copy(other: Any): AnimationStateMachineGraph
  }
}

public open external class AnimationStateMachineSchema(
  outer: UObject,
) : EdGraphSchema {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationStateMachineSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationStateMachineSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationStateMachineSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationStateMachineSchema

    @JsName("C")
    public fun copy(other: UObject): AnimationStateMachineSchema

    @JsName("C")
    public fun copy(other: Any): AnimationStateMachineSchema
  }
}

@JsName("AnimNode_TransitionResult")
public open external class AnimNodeTransitionResult : AnimNodeBase {
  @JsName("bCanEnterTransition")
  public open var canEnterTransition: Boolean

  public override fun clone(): AnimNodeTransitionResult

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimNodeTransitionResult

    @JsName("C")
    public fun copy(other: Any): AnimNodeTransitionResult
  }
}

@JsName("AnimGraphNode_TransitionResult")
public open external class AnimGraphNodeTransitionResult(
  outer: UObject,
) : AnimGraphNodeBase {
  @JsName("UNode")
  public open var uNode: AnimNodeTransitionResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimGraphNodeTransitionResult

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimGraphNodeTransitionResult

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimGraphNodeTransitionResult

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimGraphNodeTransitionResult

    @JsName("C")
    public fun copy(other: UObject): AnimGraphNodeTransitionResult

    @JsName("C")
    public fun copy(other: Any): AnimGraphNodeTransitionResult
  }
}

public open external class AnimationTransitionGraph(
  outer: UObject,
) : AnimationGraph {
  @JsName("MyResultNode")
  public open var myResultNode: AnimGraphNodeTransitionResult

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationTransitionGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationTransitionGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationTransitionGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationTransitionGraph

    @JsName("C")
    public fun copy(other: UObject): AnimationTransitionGraph

    @JsName("C")
    public fun copy(other: Any): AnimationTransitionGraph
  }
}

public open external class AnimationTransitionSchema(
  outer: UObject,
) : EdGraphSchemaK2 {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimationTransitionSchema

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimationTransitionSchema

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimationTransitionSchema

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimationTransitionSchema

    @JsName("C")
    public fun copy(other: UObject): AnimationTransitionSchema

    @JsName("C")
    public fun copy(other: Any): AnimationTransitionSchema
  }
}

public open external class AnimBlueprintExtension(
  outer: UObject,
) : BlueprintExtension {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtension

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtension

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtension

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtension

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtension

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtension
  }
}

@JsName("AnimBlueprintExtension_Attributes")
public open external class AnimBlueprintExtensionAttributes(
  outer: UObject,
) : AnimBlueprintExtension {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionAttributes

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionAttributes

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionAttributes

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionAttributes

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionAttributes

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionAttributes
  }
}

public open external class AnimSubsystem {
  public open fun clone(): AnimSubsystem

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSubsystem

    @JsName("C")
    public fun copy(other: Any): AnimSubsystem
  }
}

@JsName("EPostCopyOperation")
public external object PostCopyOperation {
  public var None: String

  public var LogicalNegateBool: String

  @JsName("EPostCopyOperation_MAX")
  public var Max: String
}

public open external class ExposedValueCopyRecord {
  @JsName("CopyIndex")
  public open var copyIndex: Number

  @JsName("PostCopyOperation")
  public open var postCopyOperation: String

  public open fun clone(): ExposedValueCopyRecord

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExposedValueCopyRecord

    @JsName("C")
    public fun copy(other: Any): ExposedValueCopyRecord
  }
}

public open external class ExposedValueHandler {
  @JsName("CopyRecords")
  public open var copyRecords: Array<ExposedValueCopyRecord>

  @JsName("UFunction")
  public open var uFunction: UFunction

  @JsName("BoundFunction")
  public open var boundFunction: String

  public open fun clone(): ExposedValueHandler

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): ExposedValueHandler

    @JsName("C")
    public fun copy(other: Any): ExposedValueHandler
  }
}

@JsName("AnimSubsystem_Base")
public open external class AnimSubsystemBase : AnimSubsystem {
  @JsName("ExposedValueHandlers")
  public open var exposedValueHandlers: Array<ExposedValueHandler>

  public override fun clone(): AnimSubsystemBase

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSubsystemBase

    @JsName("C")
    public fun copy(other: Any): AnimSubsystemBase
  }
}

@JsName("AnimBlueprintExtension_Base")
public open external class AnimBlueprintExtensionBase(
  outer: UObject,
) : AnimBlueprintExtension {
  @JsName("Subsystem")
  public open var subsystem: AnimSubsystemBase

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionBase

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionBase

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionBase

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionBase

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionBase

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionBase
  }
}

@JsName("EFilterInterpolationType")
public external object FilterInterpolationType {
  @JsName("BSIT_Average")
  public var Average: String

  @JsName("BSIT_Linear")
  public var Linear: String

  @JsName("BSIT_Cubic")
  public var Cubic: String

  @JsName("BSIT_EaseInOut")
  public var EaseInOut: String

  @JsName("BSIT_ExponentialDecay")
  public var ExponentialDecay: String

  @JsName("BSIT_SpringDamper")
  public var SpringDamper: String

  @JsName("BSIT_MAX")
  public var Max: String
}

public open external class InterpolationParameter {
  @JsName("InterpolationTime")
  public open var interpolationTime: Number

  @JsName("DampingRatio")
  public open var dampingRatio: Number

  @JsName("MaxSpeed")
  public open var maxSpeed: Number

  @JsName("InterpolationType")
  public open var interpolationType: String

  public open fun clone(): InterpolationParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): InterpolationParameter

    @JsName("C")
    public fun copy(other: Any): InterpolationParameter
  }
}

public open external class AnalysisProperties(
  outer: UObject,
) : UObject {
  @JsName("UFunction")
  public open var uFunction: String

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnalysisProperties

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnalysisProperties

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnalysisProperties

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnalysisProperties

    @JsName("C")
    public fun copy(other: UObject): AnalysisProperties

    @JsName("C")
    public fun copy(other: Any): AnalysisProperties
  }
}

@JsName("ENotifyTriggerMode")
public external object NotifyTriggerMode {
  public var AllAnimations: String

  public var HighestWeightedAnimation: String

  public var None: String

  @JsName("ENotifyTriggerMode_MAX")
  public var Max: String
}

@JsName("EPreferredTriangulationDirection")
public external object PreferredTriangulationDirection {
  public var None: String

  public var Tangential: String

  public var Radial: String

  @JsName("EPreferredTriangulationDirection_MAX")
  public var Max: String
}

public open external class PerBoneInterpolation {
  @JsName("BoneReference")
  public open var boneReference: BoneReference

  @JsName("InterpolationSpeedPerSec")
  public open var interpolationSpeedPerSec: Number

  public open fun clone(): PerBoneInterpolation

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PerBoneInterpolation

    @JsName("C")
    public fun copy(other: Any): PerBoneInterpolation
  }
}

public open external class BlendSample {
  @JsName("Animation")
  public open var animation: AnimSequence

  @JsName("SampleValue")
  public open var sampleValue: Vector

  @JsName("RateScale")
  public open var rateScale: Number

  @JsName("bIsValid")
  public open var isValid: Boolean

  public open fun clone(): BlendSample

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlendSample

    @JsName("C")
    public fun copy(other: Any): BlendSample
  }
}

public open external class EditorElement {
  @JsName("Indices")
  public open var indices: Number

  @JsName("Weights")
  public open var weights: Number

  public open fun clone(): EditorElement

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): EditorElement

    @JsName("C")
    public fun copy(other: Any): EditorElement
  }
}

public open external class BlendSpaceSegment {
  @JsName("SampleIndices")
  public open var sampleIndices: Number

  @JsName("Vertices")
  public open var vertices: Number

  public open fun clone(): BlendSpaceSegment

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlendSpaceSegment

    @JsName("C")
    public fun copy(other: Any): BlendSpaceSegment
  }
}

public open external class BlendSpaceTriangleEdgeInfo {
  @JsName("Normal")
  public open var normal: Vector2d

  @JsName("NeighbourTriangleIndex")
  public open var neighbourTriangleIndex: Number

  @JsName("AdjacentPerimeterTriangleIndices")
  public open var adjacentPerimeterTriangleIndices: Number

  @JsName("AdjacentPerimeterVertexIndices")
  public open var adjacentPerimeterVertexIndices: Number

  public open fun clone(): BlendSpaceTriangleEdgeInfo

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlendSpaceTriangleEdgeInfo

    @JsName("C")
    public fun copy(other: Any): BlendSpaceTriangleEdgeInfo
  }
}

public open external class BlendSpaceTriangle {
  @JsName("SampleIndices")
  public open var sampleIndices: Number

  @JsName("Vertices")
  public open var vertices: Vector2d

  @JsName("EdgeInfo")
  public open var edgeInfo: BlendSpaceTriangleEdgeInfo

  public open fun clone(): BlendSpaceTriangle

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlendSpaceTriangle

    @JsName("C")
    public fun copy(other: Any): BlendSpaceTriangle
  }
}

public open external class BlendSpaceData {
  @JsName("Segments")
  public open var segments: Array<BlendSpaceSegment>

  @JsName("Triangles")
  public open var triangles: Array<BlendSpaceTriangle>

  public open fun clone(): BlendSpaceData

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlendSpaceData

    @JsName("C")
    public fun copy(other: Any): BlendSpaceData
  }
}

public open external class BlendParameter {
  @JsName("DisplayName")
  public open var displayName: String

  @JsName("Min")
  public open var min: Number

  @JsName("Max")
  public open var max: Number

  @JsName("GridNum")
  public open var gridNum: Number

  @JsName("bSnapToGrid")
  public open var snapToGrid: Boolean

  @JsName("bWrapInput")
  public open var wrapInput: Boolean

  public open fun clone(): BlendParameter

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): BlendParameter

    @JsName("C")
    public fun copy(other: Any): BlendParameter
  }
}

@JsName("EBlendSpaceAxis")
public external object BlendSpaceAxis {
  @JsName("BSA_None")
  public var None: String

  @JsName("BSA_X")
  public var x: String

  @JsName("BSA_Y")
  public var y: String

  @JsName("BSA_MAX")
  public var Max: String
}

public open external class BlendSpace(
  outer: UObject,
) : AnimationAsset {
  @JsName("bRotationBlendInMeshSpace")
  public open var rotationBlendInMeshSpace: Boolean

  @JsName("InterpolationParam")
  public open var interpolationParam: InterpolationParameter

  @JsName("AnalysisProperties")
  public open var analysisProperties: AnalysisProperties

  @JsName("TargetWeightInterpolationSpeedPerSec")
  public open var targetWeightInterpolationSpeedPerSec: Number

  @JsName("bTargetWeightInterpolationEaseInOut")
  public open var targetWeightInterpolationEaseInOut: Boolean

  @JsName("PreviewBasePose")
  public open var previewBasePose: AnimSequence

  @JsName("AnimLength")
  public open var animLength: Number

  @JsName("NotifyTriggerMode")
  public open var notifyTriggerMode: String

  @JsName("bInterpolateUsingGrid")
  public open var interpolateUsingGrid: Boolean

  @JsName("PreferredTriangulationDirection")
  public open var preferredTriangulationDirection: String

  @JsName("PerBoneBlend")
  public open var perBoneBlend: Array<PerBoneInterpolation>

  @JsName("SampleIndexWithMarkers")
  public open var sampleIndexWithMarkers: Number

  @JsName("SampleData")
  public open var sampleData: Array<BlendSample>

  @JsName("GridSamples")
  public open var gridSamples: Array<EditorElement>

  @JsName("BlendSpaceData")
  public open var blendSpaceData: BlendSpaceData

  @JsName("BlendParameters")
  public open var blendParameters: BlendParameter

  @JsName("AxisToScaleAnimation")
  public open var axisToScaleAnimation: String

  @JsName("DimensionIndices")
  public open var dimensionIndices: Array<Number>

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): BlendSpace

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): BlendSpace

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): BlendSpace

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): BlendSpace

    @JsName("C")
    public fun copy(other: UObject): BlendSpace

    @JsName("C")
    public fun copy(other: Any): BlendSpace
  }
}

@JsName("AnimSubsystem_BlendSpaceGraph")
public open external class AnimSubsystemBlendSpaceGraph : AnimSubsystem {
  @JsName("BlendSpaces")
  public open var blendSpaces: Array<BlendSpace>

  public override fun clone(): AnimSubsystemBlendSpaceGraph

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSubsystemBlendSpaceGraph

    @JsName("C")
    public fun copy(other: Any): AnimSubsystemBlendSpaceGraph
  }
}

@JsName("AnimBlueprintExtension_BlendSpaceGraph")
public open external class AnimBlueprintExtensionBlendSpaceGraph(
  outer: UObject,
) : AnimBlueprintExtension {
  @JsName("Class")
  public open var `class`: UnrealEngineClass

  @JsName("Subsystem")
  public open var subsystem: AnimSubsystemBlendSpaceGraph

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionBlendSpaceGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionBlendSpaceGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionBlendSpaceGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionBlendSpaceGraph

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionBlendSpaceGraph

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionBlendSpaceGraph
  }
}

@JsName("AnimBlueprintExtension_CachedPose")
public open external class AnimBlueprintExtensionCachedPose(
  outer: UObject,
) : AnimBlueprintExtension {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionCachedPose

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionCachedPose

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionCachedPose

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionCachedPose

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionCachedPose

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionCachedPose
  }
}

@JsName("AnimBlueprintExtension_CallFunction")
public open external class AnimBlueprintExtensionCallFunction(
  outer: UObject,
) : AnimBlueprintExtension {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionCallFunction

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionCallFunction

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionCallFunction

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionCallFunction

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionCallFunction

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionCallFunction
  }
}

@JsName("AnimBlueprintExtension_LinkedAnimGraph")
public open external class AnimBlueprintExtensionLinkedAnimGraph(
  outer: UObject,
) : AnimBlueprintExtension {
  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionLinkedAnimGraph

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionLinkedAnimGraph

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionLinkedAnimGraph

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionLinkedAnimGraph

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionLinkedAnimGraph

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionLinkedAnimGraph
  }
}

public open external class AnimSubsystemInstance {
  public open fun clone(): AnimSubsystemInstance

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSubsystemInstance

    @JsName("C")
    public fun copy(other: Any): AnimSubsystemInstance
  }
}

@JsName("AnimSubsystemInstance_NodeRelevancy")
public open external class AnimSubsystemInstanceNodeRelevancy : AnimSubsystemInstance {
  public override fun clone(): AnimSubsystemInstanceNodeRelevancy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): AnimSubsystemInstanceNodeRelevancy

    @JsName("C")
    public fun copy(other: Any): AnimSubsystemInstanceNodeRelevancy
  }
}

@JsName("AnimBlueprintExtension_NodeRelevancy")
public open external class AnimBlueprintExtensionNodeRelevancy(
  outer: UObject,
) : AnimBlueprintExtension {
  @JsName("Subsystem")
  public open var subsystem: AnimSubsystemInstanceNodeRelevancy

  public companion object {
    @JsName("Load")
    public fun load(resourceName: String): AnimBlueprintExtensionNodeRelevancy

    @JsName("Find")
    public fun find(outer: UObject, resourceName: String): AnimBlueprintExtensionNodeRelevancy

    @JsName("GetDefaultObject")
    public fun getDefaultObject(): AnimBlueprintExtensionNodeRelevancy

    @JsName("CreateDefaultSubobject")
    public fun createDefaultSubobject(
      name: String,
      transient: Boolean,
      required: Boolean,
      abstract: Boolean,
    ): AnimBlueprintExtensionNodeRelevancy

    @JsName("C")
    public fun copy(other: UObject): AnimBlueprintExtensionNodeRelevancy

    @JsName("C")
    public fun copy(other: Any): AnimBlueprintExtensionNodeRelevancy
  }
}

public open external class PropertyAccessSegment {
  @JsName("Name")
  public open var name: String

  public open var struct: Struct

  @JsName("Property")
  public open var property: Any

  @JsName("UFunction")
  public open var uFunction: UFunction

  @JsName("ArrayIndex")
  public open var arrayIndex: Number

  @JsName("Flags")
  public open var flags: Any

  public open fun clone(): PropertyAccessSegment

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyAccessSegment

    @JsName("C")
    public fun copy(other: Any): PropertyAccessSegment
  }
}

public open external class PropertyAccessPath {
  @JsName("PathSegmentStartIndex")
  public open var pathSegmentStartIndex: Number

  @JsName("PathSegmentCount")
  public open var pathSegmentCount: Number

  public open fun clone(): PropertyAccessPath

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyAccessPath

    @JsName("C")
    public fun copy(other: Any): PropertyAccessPath
  }
}

@JsName("EPropertyAccessCopyType")
public external object PropertyAccessCopyType {
  public var None: String

  public var Plain: String

  public var Complex: String

  public var Bool: String

  public var Struct: String

  public var Object: String

  public var Name: String

  public var Array: String

  public var PromoteBoolToByte: String

  public var PromoteBoolToInt32: String

  public var PromoteBoolToInt64: String

  public var PromoteBoolToFloat: String

  public var PromoteBoolToDouble: String

  public var PromoteByteToInt32: String

  public var PromoteByteToInt64: String

  public var PromoteByteToFloat: String

  public var PromoteByteToDouble: String

  public var PromoteInt32ToInt64: String

  public var PromoteInt32ToFloat: String

  public var PromoteInt32ToDouble: String

  public var PromoteFloatToDouble: String

  public var DemoteDoubleToFloat: String

  public var PromoteArrayFloatToDouble: String

  public var DemoteArrayDoubleToFloat: String

  @JsName("EPropertyAccessCopyType_MAX")
  public var Max: String
}

public open external class PropertyAccessCopy {
  @JsName("AccessIndex")
  public open var accessIndex: Number

  @JsName("DestAccessStartIndex")
  public open var destAccessStartIndex: Number

  @JsName("DestAccessEndIndex")
  public open var destAccessEndIndex: Number

  @JsName("Type")
  public open var type: String

  public open fun clone(): PropertyAccessCopy

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyAccessCopy

    @JsName("C")
    public fun copy(other: Any): PropertyAccessCopy
  }
}

public open external class PropertyAccessCopyBatch {
  @JsName("Copies")
  public open var copies: Array<PropertyAccessCopy>

  public open fun clone(): PropertyAccessCopyBatch

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyAccessCopyBatch

    @JsName("C")
    public fun copy(other: Any): PropertyAccessCopyBatch
  }
}

public open external class PropertyAccessIndirectionChain {
  @JsName("Property")
  public open var property: Any

  @JsName("IndirectionStartIndex")
  public open var indirectionStartIndex: Number

  @JsName("IndirectionEndIndex")
  public open var indirectionEndIndex: Number

  public open fun clone(): PropertyAccessIndirectionChain

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyAccessIndirectionChain

    @JsName("C")
    public fun copy(other: Any): PropertyAccessIndirectionChain
  }
}

@JsName("EPropertyAccessObjectType")
public external object PropertyAccessObjectType {
  public var None: String

  public var Object: String

  public var WeakObject: String

  public var SoftObject: String

  @JsName("EPropertyAccessObjectType_MAX")
  public var Max: String
}

@JsName("EPropertyAccessIndirectionType")
public external object PropertyAccessIndirectionType {
  public var Offset: String

  public var Object: String

  public var Array: String

  public var ScriptFunction: String

  public var NativeFunction: String

  @JsName("EPropertyAccessIndirectionType_MAX")
  public var Max: String
}

public open external class PropertyAccessIndirection {
  @JsName("Property")
  public open var property: Any

  @JsName("UFunction")
  public open var uFunction: UFunction

  @JsName("ReturnBufferSize")
  public open var returnBufferSize: Number

  @JsName("ReturnBufferAlignment")
  public open var returnBufferAlignment: Number

  @JsName("ArrayIndex")
  public open var arrayIndex: Number

  @JsName("Offset")
  public open var offset: Any

  @JsName("ObjectType")
  public open var objectType: String

  @JsName("Type")
  public open var type: String

  public open fun clone(): PropertyAccessIndirection

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyAccessIndirection

    @JsName("C")
    public fun copy(other: Any): PropertyAccessIndirection
  }
}

public open external class PropertyAccessLibrary {
  @JsName("PathSegments")
  public open var pathSegments: Array<PropertyAccessSegment>

  @JsName("SrcPaths")
  public open var srcPaths: Array<PropertyAccessPath>

  @JsName("DestPaths")
  public open var destPaths: Array<PropertyAccessPath>

  @JsName("CopyBatches")
  public open var copyBatches: PropertyAccessCopyBatch

  @JsName("CopyBatchArray")
  public open var copyBatchArray: Array<PropertyAccessCopyBatch>

  @JsName("SrcAccesses")
  public open var srcAccesses: Array<PropertyAccessIndirectionChain>

  @JsName("DestAccesses")
  public open var destAccesses: Array<PropertyAccessIndirectionChain>

  @JsName("Indirections")
  public open var indirections: Array<PropertyAccessIndirection>

  public open fun clone(): PropertyAccessLibrary

  public companion object {
    @JsName("C")
    public fun copy(other: UObject): PropertyAccessLibrary

    @JsName("C")
    public fun copy(other: Any): PropertyAccessLibrary
  }
}
